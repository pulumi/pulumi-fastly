{
    "name": "fastly",
    "description": "A Pulumi package for creating and managing fastly cloud resources.",
    "keywords": [
        "pulumi",
        "fastly"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`fastly` Terraform Provider](https://github.com/fastly/terraform-provider-fastly).",
    "repository": "https://github.com/pulumi/pulumi-fastly",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "namespaces": {
                "fastly": "Fastly"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing fastly cloud resources.. Based on terraform-provider-fastly: version v4",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/fastly/terraform-provider-fastly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-fastly` repo](https://github.com/pulumi/pulumi-fastly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-fastly` repo](https://github.com/fastly/terraform-provider-fastly/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/fastly/terraform-provider-fastly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-fastly` repo](https://github.com/pulumi/pulumi-fastly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-fastly` repo](https://github.com/fastly/terraform-provider-fastly/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {
                "enabled": true
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "Fastly API Key from https://app.fastly.com/#account\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "Fastly API URL\n"
            },
            "forceHttp2": {
                "type": "boolean",
                "description": "Set this to `true` to disable HTTP/1.x fallback mechanism that the underlying Go library will attempt upon connection to\n`api.fastly.com:443` by default. This may slightly improve the provider's performance and reduce unnecessary TLS\nhandshakes. Default: `false`\n"
            },
            "noAuth": {
                "type": "boolean",
                "description": "Set to `true` if your configuration only consumes data sources that do not require authentication, such as\n`fastly.getFastlyIpRanges`\n"
            }
        }
    },
    "types": {
        "fastly:index/AlertDimensions:AlertDimensions": {
            "properties": {
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of a subset of domains that the alert monitors.\n"
                },
                "origins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Addresses of a subset of backends that the alert monitors.\n"
                }
            },
            "type": "object"
        },
        "fastly:index/AlertEvaluationStrategy:AlertEvaluationStrategy": {
            "properties": {
                "period": {
                    "type": "string",
                    "description": "The length of time to evaluate whether the conditions have been met. The data is polled every minute. One of: `5m`, `15m`, `30m`.\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Threshold used to alert.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of strategy to use to evaluate. One of: `above_threshold`, `below_threshold`.\n"
                }
            },
            "type": "object",
            "required": [
                "period",
                "threshold",
                "type"
            ]
        },
        "fastly:index/ServiceACLEntriesEntry:ServiceACLEntriesEntry": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A personal freeform descriptive note\n"
                },
                "id": {
                    "type": "string",
                    "description": "The unique ID of the entry\n"
                },
                "ip": {
                    "type": "string",
                    "description": "An IP address that is the focus for the ACL\n"
                },
                "negated": {
                    "type": "boolean",
                    "description": "A boolean that will negate the match if true\n"
                },
                "subnet": {
                    "type": "string",
                    "description": "An optional subnet mask applied to the IP address\n"
                }
            },
            "type": "object",
            "required": [
                "ip"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "ip"
                    ]
                }
            }
        },
        "fastly:index/ServiceComputeBackend:ServiceComputeBackend": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "An IPv4, hostname, or IPv6 address for the Backend\n"
                },
                "betweenBytesTimeout": {
                    "type": "integer",
                    "description": "How long to wait between bytes in milliseconds. Default `10000`\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "How long to wait for a timeout in milliseconds. Default `1000`\n"
                },
                "errorThreshold": {
                    "type": "integer",
                    "description": "Number of errors to allow before the Backend is marked as down. Default `0`\n"
                },
                "firstByteTimeout": {
                    "type": "integer",
                    "description": "How long to wait for the first bytes in milliseconds. Default `15000`\n"
                },
                "healthcheck": {
                    "type": "string",
                    "description": "Name of a defined `healthcheck` to assign to this backend\n"
                },
                "keepaliveTime": {
                    "type": "integer",
                    "description": "How long in seconds to keep a persistent connection to the backend between requests.\n"
                },
                "maxConn": {
                    "type": "integer",
                    "description": "Maximum number of connections for this Backend. Default `200`\n"
                },
                "maxTlsVersion": {
                    "type": "string",
                    "description": "Maximum allowed TLS version on SSL connections to this backend.\n"
                },
                "minTlsVersion": {
                    "type": "string",
                    "description": "Minimum allowed TLS version on SSL connections to this backend.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "overrideHost": {
                    "type": "string",
                    "description": "The hostname to override the Host header\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port number on which the Backend responds. Default `80`\n"
                },
                "shareKey": {
                    "type": "string",
                    "description": "Value that when shared across backends will enable those backends to share the same health check.\n"
                },
                "shield": {
                    "type": "string",
                    "description": "The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response\n"
                },
                "sslCaCert": {
                    "type": "string",
                    "description": "CA certificate attached to origin.\n"
                },
                "sslCertHostname": {
                    "type": "string",
                    "description": "Configure certificate validation. Does not affect SNI at all\n"
                },
                "sslCheckCert": {
                    "type": "boolean",
                    "description": "Be strict about checking SSL certs. Default `true`\n"
                },
                "sslCiphers": {
                    "type": "string",
                    "description": "Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.\n"
                },
                "sslClientCert": {
                    "type": "string",
                    "description": "Client certificate attached to origin. Used when connecting to the backend\n",
                    "secret": true
                },
                "sslClientKey": {
                    "type": "string",
                    "description": "Client key attached to origin. Used when connecting to the backend\n",
                    "secret": true
                },
                "sslSniHostname": {
                    "type": "string",
                    "description": "Configure SNI in the TLS handshake. Does not affect cert validation at all\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Whether or not to use SSL to reach the Backend. Default `false`\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name"
            ]
        },
        "fastly:index/ServiceComputeDictionary:ServiceComputeDictionary": {
            "properties": {
                "dictionaryId": {
                    "type": "string",
                    "description": "The ID of the dictionary\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the dictionary to be deleted, even if it contains entries. Defaults to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary\n"
                },
                "writeOnly": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dictionaryId",
                        "name"
                    ]
                }
            }
        },
        "fastly:index/ServiceComputeDomain:ServiceComputeDomain": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "An optional comment about the Domain.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "fastly:index/ServiceComputeLoggingBigquery:ServiceComputeLoggingBigquery": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The ID of your BigQuery dataset\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your GCP project\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines\n",
                    "secret": true
                },
                "table": {
                    "type": "string",
                    "description": "The ID of your BigQuery table\n"
                },
                "template": {
                    "type": "string",
                    "description": "BigQuery table name suffix template\n"
                }
            },
            "type": "object",
            "required": [
                "dataset",
                "email",
                "name",
                "projectId",
                "secretKey",
                "table"
            ]
        },
        "fastly:index/ServiceComputeLoggingBlobstorage:ServiceComputeLoggingBlobstorage": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The unique Azure Blob Storage namespace in which your data objects are stored\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "container": {
                    "type": "string",
                    "description": "The name of the Azure Blob Storage container in which to store logs\n"
                },
                "fileMaxBytes": {
                    "type": "integer",
                    "description": "Maximum size of an uploaded log file, if non-zero.\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred in seconds. Default `3600`\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "sasToken": {
                    "type": "string",
                    "description": "The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work\n",
                    "secret": true
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "container",
                "name",
                "sasToken"
            ]
        },
        "fastly:index/ServiceComputeLoggingCloudfile:ServiceComputeLoggingCloudfile": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your Cloud File account access key\n",
                    "secret": true
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of your Cloud Files container\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload logs to\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for your Cloud Files account\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "bucketName",
                "name",
                "user"
            ]
        },
        "fastly:index/ServiceComputeLoggingDatadog:ServiceComputeLoggingDatadog": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API key from your Datadog account\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceComputeLoggingDigitalocean:ServiceComputeLoggingDigitalocean": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your DigitalOcean Spaces account access key\n",
                    "secret": true
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the DigitalOcean Space\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload logs to\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your DigitalOcean Spaces account secret key\n",
                    "secret": true
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "bucketName",
                "name",
                "secretKey"
            ]
        },
        "fastly:index/ServiceComputeLoggingElasticsearch:ServiceComputeLoggingElasticsearch": {
            "properties": {
                "index": {
                    "type": "string",
                    "description": "The name of the Elasticsearch index to send documents (logs) to\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "password": {
                    "type": "string",
                    "description": "BasicAuth password for Elasticsearch\n",
                    "secret": true
                },
                "pipeline": {
                    "type": "string",
                    "description": "The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing\n"
                },
                "requestMaxBytes": {
                    "type": "integer",
                    "description": "The maximum number of logs sent in one request. Defaults to `0` for unbounded\n"
                },
                "requestMaxEntries": {
                    "type": "integer",
                    "description": "The maximum number of bytes sent in one request. Defaults to `0` for unbounded\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Elasticsearch URL to stream logs to\n"
                },
                "user": {
                    "type": "string",
                    "description": "BasicAuth username for Elasticsearch\n"
                }
            },
            "type": "object",
            "required": [
                "index",
                "name",
                "url"
            ]
        },
        "fastly:index/ServiceComputeLoggingFtp:ServiceComputeLoggingFtp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The FTP address to stream logs to\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the server (for anonymous use an email address)\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload log files to. If the path ends in `/` then it is treated as a directory\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred, in seconds (Default `3600`)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port number. Default: `21`\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the server (can be `anonymous`)\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name",
                "password",
                "path",
                "user"
            ]
        },
        "fastly:index/ServiceComputeLoggingGc:ServiceComputeLoggingGc": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket in which to store the logs\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred, in seconds (Default 3600)\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Google Cloud Platform project\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required\n",
                    "secret": true
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "user": {
                    "type": "string",
                    "description": "Your Google Cloud Platform service account email address. The `client_email` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.\n"
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "name"
            ]
        },
        "fastly:index/ServiceComputeLoggingGooglepubsub:ServiceComputeLoggingGooglepubsub": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Google Cloud Platform project\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your Google Cloud Platform account secret key. The `private_key` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.\n",
                    "secret": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Google Cloud Pub/Sub topic to which logs will be published\n"
                },
                "user": {
                    "type": "string",
                    "description": "Your Google Cloud Platform service account email address. The `client_email` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "secretKey",
                "topic",
                "user"
            ]
        },
        "fastly:index/ServiceComputeLoggingHeroku:ServiceComputeLoggingHeroku": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL to stream logs to\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token",
                "url"
            ]
        },
        "fastly:index/ServiceComputeLoggingHoneycomb:ServiceComputeLoggingHoneycomb": {
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The Honeycomb Dataset you want to log to\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "token": {
                    "type": "string",
                    "description": "The Write Key from the Account page of your Honeycomb account\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "dataset",
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceComputeLoggingHttp:ServiceComputeLoggingHttp": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "Value of the `Content-Type` header sent with the request\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "Custom header sent with the request\n"
                },
                "headerValue": {
                    "type": "string",
                    "description": "Value of the custom header sent with the request\n"
                },
                "jsonFormat": {
                    "type": "string",
                    "description": "Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "method": {
                    "type": "string",
                    "description": "HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "requestMaxBytes": {
                    "type": "integer",
                    "description": "The maximum number of bytes sent in one request\n"
                },
                "requestMaxEntries": {
                    "type": "integer",
                    "description": "The maximum number of logs sent in one request\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "Used during the TLS handshake to validate the certificate\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL that log data will be sent to. Must use the https protocol\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "fastly:index/ServiceComputeLoggingKafka:ServiceComputeLoggingKafka": {
            "properties": {
                "authMethod": {
                    "type": "string",
                    "description": "SASL authentication method. One of: plain, scram-sha-256, scram-sha-512\n"
                },
                "brokers": {
                    "type": "string",
                    "description": "A comma-separated list of IP addresses or hostnames of Kafka brokers\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "parseLogKeyvals": {
                    "type": "boolean",
                    "description": "Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers\n"
                },
                "password": {
                    "type": "string",
                    "description": "SASL Pass\n",
                    "secret": true
                },
                "requestMaxBytes": {
                    "type": "integer",
                    "description": "Maximum size of log batch, if non-zero. Defaults to 0 for unbounded\n"
                },
                "requiredAcks": {
                    "type": "string",
                    "description": "The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic to send logs to\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Whether to use TLS for secure logging. Can be either `true` or `false`\n"
                },
                "user": {
                    "type": "string",
                    "description": "SASL User\n"
                }
            },
            "type": "object",
            "required": [
                "brokers",
                "name",
                "topic"
            ]
        },
        "fastly:index/ServiceComputeLoggingKinese:ServiceComputeLoggingKinese": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The AWS access key to be used to write to the stream\n",
                    "secret": true
                },
                "iamRole": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `access_key` and `secret_key` are provided.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region the stream resides in. (Default: `us-east-1`)\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The AWS secret access key to authenticate with\n",
                    "secret": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Kinesis stream name\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "topic"
            ]
        },
        "fastly:index/ServiceComputeLoggingLogentry:ServiceComputeLoggingLogentry": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port number configured in Logentries\n"
                },
                "token": {
                    "type": "string",
                    "description": "Use token based authentication (https://logentries.com/doc/input-token/)\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Whether to use TLS for secure logging\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceComputeLoggingLoggly:ServiceComputeLoggingLoggly": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceComputeLoggingLogshuttle:ServiceComputeLoggingLogshuttle": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "token": {
                    "type": "string",
                    "description": "The data authentication token associated with this endpoint\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Your Log Shuttle endpoint URL\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token",
                "url"
            ]
        },
        "fastly:index/ServiceComputeLoggingNewrelic:ServiceComputeLoggingNewrelic": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region that log data will be sent to. Default: `US`\n"
                },
                "token": {
                    "type": "string",
                    "description": "The Insert API key from the Account page of your New Relic account\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceComputeLoggingOpenstack:ServiceComputeLoggingOpenstack": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your OpenStack account access key\n",
                    "secret": true
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of your OpenStack container\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred, in seconds. Default `3600`\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "url": {
                    "type": "string",
                    "description": "Your OpenStack auth url\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for your OpenStack account\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "bucketName",
                "name",
                "url",
                "user"
            ]
        },
        "fastly:index/ServiceComputeLoggingPapertrail:ServiceComputeLoggingPapertrail": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the Papertrail endpoint\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port associated with the address where the Papertrail endpoint can be accessed\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name",
                "port"
            ]
        },
        "fastly:index/ServiceComputeLoggingS3:ServiceComputeLoggingS3": {
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket in which to store the logs\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`\n"
                },
                "fileMaxBytes": {
                    "type": "integer",
                    "description": "Maximum size of an uploaded log file, if non-zero.\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred, in seconds. Default `3600`\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "redundancy": {
                    "type": "string",
                    "description": "The S3 storage class (redundancy level). Should be one of: `standard`, `intelligent_tiering`, `standard_ia`, `onezone_ia`, `glacier`, `glacier_ir`, `deep_archive`, or `reduced_redundancy`\n"
                },
                "s3AccessKey": {
                    "type": "string",
                    "description": "AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iam_role` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`\n",
                    "secret": true
                },
                "s3IamRole": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `access_key` and `secret_key` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`\n"
                },
                "s3SecretKey": {
                    "type": "string",
                    "description": "AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iam_role` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`\n",
                    "secret": true
                },
                "serverSideEncryption": {
                    "type": "string",
                    "description": "Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`\n"
                },
                "serverSideEncryptionKmsKeyId": {
                    "type": "string",
                    "description": "Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "name"
            ]
        },
        "fastly:index/ServiceComputeLoggingScalyr:ServiceComputeLoggingScalyr": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The name of the logfile field sent to Scalyr\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to use for authentication (https://www.scalyr.com/keys)\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceComputeLoggingSftp:ServiceComputeLoggingSftp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The SFTP address to stream logs to\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload log files to. If the path ends in `/` then it is treated as a directory\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port the SFTP service listens on. (Default: `22`)\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The SSH private key for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred\n",
                    "secret": true
                },
                "sshKnownHosts": {
                    "type": "string",
                    "description": "A list of host keys for all hosts we can connect to over SFTP\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the server\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name",
                "path",
                "sshKnownHosts",
                "user"
            ]
        },
        "fastly:index/ServiceComputeLoggingSplunk:ServiceComputeLoggingSplunk": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format.\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format.\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)\n"
                },
                "token": {
                    "type": "string",
                    "description": "The Splunk token to be used for authentication\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The Splunk URL to stream logs to\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Whether to use TLS for secure logging. Default: `false`\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token",
                "url"
            ]
        },
        "fastly:index/ServiceComputeLoggingSumologic:ServiceComputeLoggingSumologic": {
            "properties": {
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to Sumologic collector endpoint\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "fastly:index/ServiceComputeLoggingSyslog:ServiceComputeLoggingSyslog": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "A hostname or IPv4 address of the Syslog endpoint\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port associated with the address where the Syslog endpoint can be accessed. Default `514`\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "Used during the TLS handshake to validate the certificate\n"
                },
                "token": {
                    "type": "string",
                    "description": "Whether to prepend each message with a specific token\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Whether to use TLS for secure logging. Default `false`\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name"
            ]
        },
        "fastly:index/ServiceComputePackage:ServiceComputePackage": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified\n"
                },
                "filename": {
                    "type": "string",
                    "description": "The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified\n"
                },
                "sourceCodeHash": {
                    "type": "string",
                    "description": "Used to trigger updates. Must be set to a SHA512 hash of all files (in sorted order) within the package. The usual way to set this is using the fastly*package*hash data source.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "sourceCodeHash"
                    ]
                }
            }
        },
        "fastly:index/ServiceComputeProductEnablement:ServiceComputeProductEnablement": {
            "properties": {
                "fanout": {
                    "type": "boolean",
                    "description": "Enable Fanout support\n"
                },
                "name": {
                    "type": "string",
                    "description": "Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)\n"
                },
                "websockets": {
                    "type": "boolean",
                    "description": "Enable WebSockets support\n"
                }
            },
            "type": "object"
        },
        "fastly:index/ServiceComputeResourceLink:ServiceComputeResourceLink": {
            "properties": {
                "linkId": {
                    "type": "string",
                    "description": "An alphanumeric string identifying the resource link.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource link.\n"
                },
                "resourceId": {
                    "type": "string",
                    "description": "The ID of the underlying linked resource.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "resourceId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "linkId",
                        "name",
                        "resourceId"
                    ]
                }
            }
        },
        "fastly:index/ServiceVclAcl:ServiceVclAcl": {
            "properties": {
                "aclId": {
                    "type": "string",
                    "description": "The ID of the ACL\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the ACL to be deleted, even if it contains entries. Defaults to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "aclId",
                        "name"
                    ]
                }
            }
        },
        "fastly:index/ServiceVclBackend:ServiceVclBackend": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "An IPv4, hostname, or IPv6 address for the Backend\n"
                },
                "autoLoadbalance": {
                    "type": "boolean",
                    "description": "Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `false`\n"
                },
                "betweenBytesTimeout": {
                    "type": "integer",
                    "description": "How long to wait between bytes in milliseconds. Default `10000`\n"
                },
                "connectTimeout": {
                    "type": "integer",
                    "description": "How long to wait for a timeout in milliseconds. Default `1000`\n"
                },
                "errorThreshold": {
                    "type": "integer",
                    "description": "Number of errors to allow before the Backend is marked as down. Default `0`\n"
                },
                "firstByteTimeout": {
                    "type": "integer",
                    "description": "How long to wait for the first bytes in milliseconds. Default `15000`\n"
                },
                "healthcheck": {
                    "type": "string",
                    "description": "Name of a defined `healthcheck` to assign to this backend\n"
                },
                "keepaliveTime": {
                    "type": "integer",
                    "description": "How long in seconds to keep a persistent connection to the backend between requests.\n"
                },
                "maxConn": {
                    "type": "integer",
                    "description": "Maximum number of connections for this Backend. Default `200`\n"
                },
                "maxTlsVersion": {
                    "type": "string",
                    "description": "Maximum allowed TLS version on SSL connections to this backend.\n"
                },
                "minTlsVersion": {
                    "type": "string",
                    "description": "Minimum allowed TLS version on SSL connections to this backend.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "overrideHost": {
                    "type": "string",
                    "description": "The hostname to override the Host header\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port number on which the Backend responds. Default `80`\n"
                },
                "requestCondition": {
                    "type": "string",
                    "description": "Name of a condition, which if met, will select this backend during a request.\n"
                },
                "shareKey": {
                    "type": "string",
                    "description": "Value that when shared across backends will enable those backends to share the same health check.\n"
                },
                "shield": {
                    "type": "string",
                    "description": "The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response\n"
                },
                "sslCaCert": {
                    "type": "string",
                    "description": "CA certificate attached to origin.\n"
                },
                "sslCertHostname": {
                    "type": "string",
                    "description": "Configure certificate validation. Does not affect SNI at all\n"
                },
                "sslCheckCert": {
                    "type": "boolean",
                    "description": "Be strict about checking SSL certs. Default `true`\n"
                },
                "sslCiphers": {
                    "type": "string",
                    "description": "Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.\n"
                },
                "sslClientCert": {
                    "type": "string",
                    "description": "Client certificate attached to origin. Used when connecting to the backend\n",
                    "secret": true
                },
                "sslClientKey": {
                    "type": "string",
                    "description": "Client key attached to origin. Used when connecting to the backend\n",
                    "secret": true
                },
                "sslSniHostname": {
                    "type": "string",
                    "description": "Configure SNI in the TLS handshake. Does not affect cert validation at all\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Whether or not to use SSL to reach the Backend. Default `false`\n"
                },
                "weight": {
                    "type": "integer",
                    "description": "The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name"
            ]
        },
        "fastly:index/ServiceVclCacheSetting:ServiceVclCacheSetting": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "One of cache, pass, or restart, as defined on Fastly's documentation under \"[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)\"\n"
                },
                "cacheCondition": {
                    "type": "string",
                    "description": "Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "staleTtl": {
                    "type": "integer",
                    "description": "Max \"Time To Live\" for stale (unreachable) objects\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "The Time-To-Live (TTL) for the object\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "fastly:index/ServiceVclCondition:ServiceVclCondition": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`\n"
                },
                "statement": {
                    "type": "string",
                    "description": "The statement used to determine if the condition is met\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "statement",
                "type"
            ]
        },
        "fastly:index/ServiceVclDictionary:ServiceVclDictionary": {
            "properties": {
                "dictionaryId": {
                    "type": "string",
                    "description": "The ID of the dictionary\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the dictionary to be deleted, even if it contains entries. Defaults to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary\n"
                },
                "writeOnly": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dictionaryId",
                        "name"
                    ]
                }
            }
        },
        "fastly:index/ServiceVclDirector:ServiceVclDirector": {
            "properties": {
                "backends": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Names of defined backends to map the director to. Example: `[ \"origin1\", \"origin2\" ]`\n"
                },
                "comment": {
                    "type": "string",
                    "description": "An optional comment about the Director\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "quorum": {
                    "type": "integer",
                    "description": "Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`\n"
                },
                "retries": {
                    "type": "integer",
                    "description": "How many backends to search if it fails. Default `5`\n"
                },
                "shield": {
                    "type": "string",
                    "description": "Selected POP to serve as a \"shield\" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response\n"
                },
                "type": {
                    "type": "integer",
                    "description": "Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`\n"
                }
            },
            "type": "object",
            "required": [
                "backends",
                "name"
            ]
        },
        "fastly:index/ServiceVclDomain:ServiceVclDomain": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "An optional comment about the Domain.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "fastly:index/ServiceVclDynamicsnippet:ServiceVclDynamicsnippet": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The VCL code that specifies exactly what the snippet does\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name that is unique across \"regular\" and \"dynamic\" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`\n"
                },
                "snippetId": {
                    "type": "string",
                    "description": "The ID of the dynamic snippet\n"
                },
                "type": {
                    "type": "string",
                    "description": "The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name",
                        "snippetId",
                        "type"
                    ]
                }
            }
        },
        "fastly:index/ServiceVclGzip:ServiceVclGzip": {
            "properties": {
                "cacheCondition": {
                    "type": "string",
                    "description": "Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)\n"
                },
                "contentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The content-type for each type of content you wish to have dynamically gzip'ed. Example: `[\"text/html\", \"text/css\"]`\n"
                },
                "extensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "File extensions for each file type to dynamically gzip. Example: `[\"css\", \"js\"]`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "fastly:index/ServiceVclHeader:ServiceVclHeader": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regex_repeat`\n"
                },
                "cacheCondition": {
                    "type": "string",
                    "description": "Name of already defined `condition` to apply. This `condition` must be of type `CACHE`\n"
                },
                "destination": {
                    "type": "string",
                    "description": "The name of the header that is going to be affected by the Action\n"
                },
                "ignoreIfSet": {
                    "type": "boolean",
                    "description": "Don't add the header if it is already. (Only applies to `set` action.). Default `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Lower priorities execute first. Default: `100`\n"
                },
                "regex": {
                    "type": "string",
                    "description": "Regular expression to use (Only applies to `regex` and `regex_repeat` actions.)\n"
                },
                "requestCondition": {
                    "type": "string",
                    "description": "Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)\n"
                },
                "source": {
                    "type": "string",
                    "description": "Variable to be used as a source for the header content (Does not apply to `delete` action.)\n"
                },
                "substitution": {
                    "type": "string",
                    "description": "Value to substitute in place of regular expression. (Only applies to `regex` and `regex_repeat`.)\n"
                },
                "type": {
                    "type": "string",
                    "description": "The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "destination",
                "name",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "destination",
                        "name",
                        "regex",
                        "source",
                        "substitution",
                        "type"
                    ]
                }
            }
        },
        "fastly:index/ServiceVclHealthcheck:ServiceVclHealthcheck": {
            "properties": {
                "checkInterval": {
                    "type": "integer",
                    "description": "How often to run the Healthcheck in milliseconds. Default `5000`\n"
                },
                "expectedResponse": {
                    "type": "integer",
                    "description": "The status code expected from the host. Default `200`\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).\n"
                },
                "host": {
                    "type": "string",
                    "description": "The Host header to send for this Healthcheck\n"
                },
                "httpVersion": {
                    "type": "string",
                    "description": "Whether to use version 1.0 or 1.1 HTTP. Default `1.1`\n"
                },
                "initial": {
                    "type": "integer",
                    "description": "When loading a config, the initial number of probes to be seen as OK. Default `3`\n"
                },
                "method": {
                    "type": "string",
                    "description": "Which HTTP method to use. Default `HEAD`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to check\n"
                },
                "threshold": {
                    "type": "integer",
                    "description": "How many Healthchecks must succeed to be considered healthy. Default `3`\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Timeout in milliseconds. Default `5000`\n"
                },
                "window": {
                    "type": "integer",
                    "description": "The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "name",
                "path"
            ]
        },
        "fastly:index/ServiceVclLoggingBigquery:ServiceVclLoggingBigquery": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.\n"
                },
                "dataset": {
                    "type": "string",
                    "description": "The ID of your BigQuery dataset\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable\n",
                    "secret": true
                },
                "format": {
                    "type": "string",
                    "description": "The logging format desired.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your GCP project\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "Name of a condition to apply this logging.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines\n",
                    "secret": true
                },
                "table": {
                    "type": "string",
                    "description": "The ID of your BigQuery table\n"
                },
                "template": {
                    "type": "string",
                    "description": "BigQuery table name suffix template\n"
                }
            },
            "type": "object",
            "required": [
                "dataset",
                "email",
                "name",
                "projectId",
                "secretKey",
                "table"
            ]
        },
        "fastly:index/ServiceVclLoggingBlobstorage:ServiceVclLoggingBlobstorage": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The unique Azure Blob Storage namespace in which your data objects are stored\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "container": {
                    "type": "string",
                    "description": "The name of the Azure Blob Storage container in which to store logs\n"
                },
                "fileMaxBytes": {
                    "type": "integer",
                    "description": "Maximum size of an uploaded log file, if non-zero.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t \"%r\" %\u003es %b`)\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred in seconds. Default `3600`\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply\n"
                },
                "sasToken": {
                    "type": "string",
                    "description": "The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work\n",
                    "secret": true
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                }
            },
            "type": "object",
            "required": [
                "accountName",
                "container",
                "name",
                "sasToken"
            ]
        },
        "fastly:index/ServiceVclLoggingCloudfile:ServiceVclLoggingCloudfile": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your Cloud File account access key\n",
                    "secret": true
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of your Cloud Files container\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload logs to\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. Can be `none` or `waf_debug`.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for your Cloud Files account\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "bucketName",
                "name",
                "user"
            ]
        },
        "fastly:index/ServiceVclLoggingDatadog:ServiceVclLoggingDatadog": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The API key from your Datadog account\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceVclLoggingDigitalocean:ServiceVclLoggingDigitalocean": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your DigitalOcean Spaces account access key\n",
                    "secret": true
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the DigitalOcean Space\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload logs to\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. Can be `none` or `waf_debug`.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your DigitalOcean Spaces account secret key\n",
                    "secret": true
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "bucketName",
                "name",
                "secretKey"
            ]
        },
        "fastly:index/ServiceVclLoggingElasticsearch:ServiceVclLoggingElasticsearch": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).\n"
                },
                "index": {
                    "type": "string",
                    "description": "The name of the Elasticsearch index to send documents (logs) to\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "password": {
                    "type": "string",
                    "description": "BasicAuth password for Elasticsearch\n",
                    "secret": true
                },
                "pipeline": {
                    "type": "string",
                    "description": "The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "requestMaxBytes": {
                    "type": "integer",
                    "description": "The maximum number of logs sent in one request. Defaults to `0` for unbounded\n"
                },
                "requestMaxEntries": {
                    "type": "integer",
                    "description": "The maximum number of bytes sent in one request. Defaults to `0` for unbounded\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Elasticsearch URL to stream logs to\n"
                },
                "user": {
                    "type": "string",
                    "description": "BasicAuth username for Elasticsearch\n"
                }
            },
            "type": "object",
            "required": [
                "index",
                "name",
                "url"
            ]
        },
        "fastly:index/ServiceVclLoggingFtp:ServiceVclLoggingFtp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The FTP address to stream logs to\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the server (for anonymous use an email address)\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload log files to. If the path ends in `/` then it is treated as a directory\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred, in seconds (Default `3600`)\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port number. Default: `21`\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "The PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply.\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the server (can be `anonymous`)\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name",
                "password",
                "path",
                "user"
            ]
        },
        "fastly:index/ServiceVclLoggingGc:ServiceVclLoggingGc": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket in which to store the logs\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred, in seconds (Default 3600)\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Google Cloud Platform project\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "Name of a condition to apply this logging.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required\n",
                    "secret": true
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "user": {
                    "type": "string",
                    "description": "Your Google Cloud Platform service account email address. The `client_email` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.\n"
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "name"
            ]
        },
        "fastly:index/ServiceVclLoggingGooglepubsub:ServiceVclLoggingGooglepubsub": {
            "properties": {
                "accountName": {
                    "type": "string",
                    "description": "The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of your Google Cloud Platform project\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Your Google Cloud Platform account secret key. The `private_key` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.\n",
                    "secret": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Google Cloud Pub/Sub topic to which logs will be published\n"
                },
                "user": {
                    "type": "string",
                    "description": "Your Google Cloud Platform service account email address. The `client_email` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "projectId",
                "secretKey",
                "topic",
                "user"
            ]
        },
        "fastly:index/ServiceVclLoggingHerokus:ServiceVclLoggingHerokus": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. Can be `none` or `waf_debug`.\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL to stream logs to\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token",
                "url"
            ]
        },
        "fastly:index/ServiceVclLoggingHoneycomb:ServiceVclLoggingHoneycomb": {
            "properties": {
                "dataset": {
                    "type": "string",
                    "description": "The Honeycomb Dataset you want to log to\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. Can be `none` or `waf_debug`.\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The Write Key from the Account page of your Honeycomb account\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "dataset",
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceVclLoggingHttp:ServiceVclLoggingHttp": {
            "properties": {
                "contentType": {
                    "type": "string",
                    "description": "Value of the `Content-Type` header sent with the request\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)\n"
                },
                "headerName": {
                    "type": "string",
                    "description": "Custom header sent with the request\n"
                },
                "headerValue": {
                    "type": "string",
                    "description": "Value of the custom header sent with the request\n"
                },
                "jsonFormat": {
                    "type": "string",
                    "description": "Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "method": {
                    "type": "string",
                    "description": "HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed\n"
                },
                "requestMaxBytes": {
                    "type": "integer",
                    "description": "The maximum number of bytes sent in one request\n"
                },
                "requestMaxEntries": {
                    "type": "integer",
                    "description": "The maximum number of logs sent in one request\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "Used during the TLS handshake to validate the certificate\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL that log data will be sent to. Must use the https protocol\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "fastly:index/ServiceVclLoggingKafka:ServiceVclLoggingKafka": {
            "properties": {
                "authMethod": {
                    "type": "string",
                    "description": "SASL authentication method. One of: plain, scram-sha-256, scram-sha-512\n"
                },
                "brokers": {
                    "type": "string",
                    "description": "A comma-separated list of IP addresses or hostnames of Kafka brokers\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "parseLogKeyvals": {
                    "type": "boolean",
                    "description": "Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers\n"
                },
                "password": {
                    "type": "string",
                    "description": "SASL Pass\n",
                    "secret": true
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "requestMaxBytes": {
                    "type": "integer",
                    "description": "Maximum size of log batch, if non-zero. Defaults to 0 for unbounded\n"
                },
                "requiredAcks": {
                    "type": "string",
                    "description": "The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)\n"
                },
                "topic": {
                    "type": "string",
                    "description": "The Kafka topic to send logs to\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Whether to use TLS for secure logging. Can be either `true` or `false`\n"
                },
                "user": {
                    "type": "string",
                    "description": "SASL User\n"
                }
            },
            "type": "object",
            "required": [
                "brokers",
                "name",
                "topic"
            ]
        },
        "fastly:index/ServiceVclLoggingKinese:ServiceVclLoggingKinese": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "The AWS access key to be used to write to the stream\n",
                    "secret": true
                },
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "iamRole": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `access_key` and `secret_key` are provided.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. Can be `none` or `waf_debug`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region the stream resides in. (Default: `us-east-1`)\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The AWS secret access key to authenticate with\n",
                    "secret": true
                },
                "topic": {
                    "type": "string",
                    "description": "The Kinesis stream name\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "topic"
            ]
        },
        "fastly:index/ServiceVclLoggingLogentry:ServiceVclLoggingLogentry": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port number configured in Logentries\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "Name of blockAttributes condition to apply this logging.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Use token based authentication (https://logentries.com/doc/input-token/)\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Whether to use TLS for secure logging\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceVclLoggingLoggly:ServiceVclLoggingLoggly": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. Can be `none` or `waf_debug`.\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceVclLoggingLogshuttle:ServiceVclLoggingLogshuttle": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. Can be `none` or `waf_debug`.\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The data authentication token associated with this endpoint\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Your Log Shuttle endpoint URL\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token",
                "url"
            ]
        },
        "fastly:index/ServiceVclLoggingNewrelic:ServiceVclLoggingNewrelic": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region that log data will be sent to. Default: `US`\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The Insert API key from the Account page of your New Relic account\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceVclLoggingNewrelicotlp:ServiceVclLoggingNewrelicotlp": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting. Your log must produce valid JSON that New Relic OTLP can ingest.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the New Relic OTLP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region that log data will be sent to. Default: `US`\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The Insert API key from the Account page of your New Relic account\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The optional New Relic Trace Observer URL to stream logs to for Infinite Tracing.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceVclLoggingOpenstack:ServiceVclLoggingOpenstack": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Your OpenStack account access key\n",
                    "secret": true
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of your OpenStack container\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred, in seconds. Default `3600`\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. Can be `none` or `waf_debug`.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "url": {
                    "type": "string",
                    "description": "Your OpenStack auth url\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for your OpenStack account\n"
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "bucketName",
                "name",
                "url",
                "user"
            ]
        },
        "fastly:index/ServiceVclLoggingPapertrail:ServiceVclLoggingPapertrail": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The address of the Papertrail endpoint\n"
                },
                "format": {
                    "type": "string",
                    "description": "A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port associated with the address where the Papertrail endpoint can be accessed\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name",
                "port"
            ]
        },
        "fastly:index/ServiceVclLoggingS3:ServiceVclLoggingS3": {
            "properties": {
                "acl": {
                    "type": "string",
                    "description": "The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`\n"
                },
                "bucketName": {
                    "type": "string",
                    "description": "The name of the bucket in which to store the logs\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`\n"
                },
                "fileMaxBytes": {
                    "type": "integer",
                    "description": "Maximum size of an uploaded log file, if non-zero.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2).\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently the logs should be transferred, in seconds. Default `3600`\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "redundancy": {
                    "type": "string",
                    "description": "The S3 storage class (redundancy level). Should be one of: `standard`, `intelligent_tiering`, `standard_ia`, `onezone_ia`, `glacier`, `glacier_ir`, `deep_archive`, or `reduced_redundancy`\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "Name of blockAttributes condition to apply this logging.\n"
                },
                "s3AccessKey": {
                    "type": "string",
                    "description": "AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iam_role` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`\n",
                    "secret": true
                },
                "s3IamRole": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `access_key` and `secret_key` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`\n"
                },
                "s3SecretKey": {
                    "type": "string",
                    "description": "AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iam_role` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`\n",
                    "secret": true
                },
                "serverSideEncryption": {
                    "type": "string",
                    "description": "Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`\n"
                },
                "serverSideEncryptionKmsKeyId": {
                    "type": "string",
                    "description": "Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                }
            },
            "type": "object",
            "required": [
                "bucketName",
                "name"
            ]
        },
        "fastly:index/ServiceVclLoggingScalyr:ServiceVclLoggingScalyr": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache style log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The name of the logfile field sent to Scalyr\n"
                },
                "region": {
                    "type": "string",
                    "description": "The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of an existing condition in the configured endpoint, or leave blank to always execute.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The token to use for authentication (https://www.scalyr.com/keys)\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "name",
                "token"
            ]
        },
        "fastly:index/ServiceVclLoggingSftp:ServiceVclLoggingSftp": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "The SFTP address to stream logs to\n"
                },
                "compressionCodec": {
                    "type": "string",
                    "description": "The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is \"gzip\", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting.\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).\n"
                },
                "gzipLevel": {
                    "type": "integer",
                    "description": "Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "The path to upload log files to. If the path ends in `/` then it is treated as a directory\n"
                },
                "period": {
                    "type": "integer",
                    "description": "How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port the SFTP service listens on. (Default: `22`)\n"
                },
                "publicKey": {
                    "type": "string",
                    "description": "A PGP public key that Fastly will use to encrypt your log files before writing them to disk\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "The SSH private key for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred\n",
                    "secret": true
                },
                "sshKnownHosts": {
                    "type": "string",
                    "description": "A list of host keys for all hosts we can connect to over SFTP\n"
                },
                "timestampFormat": {
                    "type": "string",
                    "description": "The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)\n"
                },
                "user": {
                    "type": "string",
                    "description": "The username for the server\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name",
                "path",
                "sshKnownHosts",
                "user"
            ]
        },
        "fastly:index/ServiceVclLoggingSplunk:ServiceVclLoggingSplunk": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t \"%r\" %\u003es %b`)\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "The name of the condition to apply\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format.\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format.\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)\n"
                },
                "token": {
                    "type": "string",
                    "description": "The Splunk token to be used for authentication\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "The Splunk URL to stream logs to\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Whether to use TLS for secure logging. Default: `false`\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "token",
                "url"
            ]
        },
        "fastly:index/ServiceVclLoggingSumologic:ServiceVclLoggingSumologic": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "Name of blockAttributes condition to apply this logging.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to Sumologic collector endpoint\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "url"
            ]
        },
        "fastly:index/ServiceVclLoggingSyslog:ServiceVclLoggingSyslog": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "A hostname or IPv4 address of the Syslog endpoint\n"
                },
                "format": {
                    "type": "string",
                    "description": "Apache-style string or VCL variables to use for log formatting\n"
                },
                "formatVersion": {
                    "type": "integer",
                    "description": "The version of the custom logging format. Can be either 1 or 2. (Default: 2)\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "placement": {
                    "type": "string",
                    "description": "Where in the generated VCL the logging call should be placed.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port associated with the address where the Syslog endpoint can be accessed. Default `514`\n"
                },
                "responseCondition": {
                    "type": "string",
                    "description": "Name of blockAttributes condition to apply this logging.\n"
                },
                "tlsCaCert": {
                    "type": "string",
                    "description": "A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`\n",
                    "secret": true
                },
                "tlsHostname": {
                    "type": "string",
                    "description": "Used during the TLS handshake to validate the certificate\n"
                },
                "token": {
                    "type": "string",
                    "description": "Whether to prepend each message with a specific token\n"
                },
                "useTls": {
                    "type": "boolean",
                    "description": "Whether to use TLS for secure logging. Default `false`\n"
                }
            },
            "type": "object",
            "required": [
                "address",
                "name"
            ]
        },
        "fastly:index/ServiceVclProductEnablement:ServiceVclProductEnablement": {
            "properties": {
                "brotliCompression": {
                    "type": "boolean",
                    "description": "Enable Brotli Compression support\n"
                },
                "domainInspector": {
                    "type": "boolean",
                    "description": "Enable Domain Inspector support\n"
                },
                "imageOptimizer": {
                    "type": "boolean",
                    "description": "Enable Image Optimizer support (requires at least one backend with a `shield` attribute)\n"
                },
                "name": {
                    "type": "string",
                    "description": "Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)\n"
                },
                "originInspector": {
                    "type": "boolean",
                    "description": "Enable Origin Inspector support\n"
                },
                "websockets": {
                    "type": "boolean",
                    "description": "Enable WebSockets support\n"
                }
            },
            "type": "object"
        },
        "fastly:index/ServiceVclRateLimiter:ServiceVclRateLimiter": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action to take when a rate limiter violation is detected (one of: log*only, response, response*object)\n"
                },
                "clientKey": {
                    "type": "string",
                    "description": "Comma-separated list of VCL variables used to generate a counter key to identify a client\n"
                },
                "featureRevision": {
                    "type": "integer",
                    "description": "Revision number of the rate limiting feature implementation\n"
                },
                "httpMethods": {
                    "type": "string",
                    "description": "Comma-separated list of HTTP methods to apply rate limiting to\n"
                },
                "loggerType": {
                    "type": "string",
                    "description": "Name of the type of logging endpoint to be used when action is log_only (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique human readable name for the rate limiting rule\n"
                },
                "penaltyBoxDuration": {
                    "type": "integer",
                    "description": "Length of time in minutes that the rate limiter is in effect after the initial violation is detected\n"
                },
                "ratelimiterId": {
                    "type": "string",
                    "description": "Alphanumeric string identifying the rate limiter\n"
                },
                "response": {
                    "$ref": "#/types/fastly:index/ServiceVclRateLimiterResponse:ServiceVclRateLimiterResponse",
                    "description": "Custom response to be sent when the rate limit is exceeded. Required if action is response\n"
                },
                "responseObjectName": {
                    "type": "string",
                    "description": "Name of existing response object. Required if action is response_object\n"
                },
                "rpsLimit": {
                    "type": "integer",
                    "description": "Upper limit of requests per second allowed by the rate limiter\n"
                },
                "uriDictionaryName": {
                    "type": "string",
                    "description": "The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited\n"
                },
                "windowSize": {
                    "type": "integer",
                    "description": "Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)\n"
                }
            },
            "type": "object",
            "required": [
                "action",
                "clientKey",
                "httpMethods",
                "name",
                "penaltyBoxDuration",
                "rpsLimit",
                "windowSize"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "action",
                        "clientKey",
                        "httpMethods",
                        "name",
                        "penaltyBoxDuration",
                        "ratelimiterId",
                        "rpsLimit",
                        "windowSize"
                    ]
                }
            }
        },
        "fastly:index/ServiceVclRateLimiterResponse:ServiceVclRateLimiterResponse": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "HTTP response body data\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "HTTP Content-Type (e.g. application/json)\n"
                },
                "status": {
                    "type": "integer",
                    "description": "HTTP response status code (e.g. 429)\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "contentType",
                "status"
            ]
        },
        "fastly:index/ServiceVclRequestSetting:ServiceVclRequestSetting": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)\n"
                },
                "bypassBusyWait": {
                    "type": "boolean",
                    "description": "Disable collapsed forwarding, so you don't wait for other objects to origin\n"
                },
                "defaultHost": {
                    "type": "string",
                    "description": "Sets the host header\n"
                },
                "forceMiss": {
                    "type": "boolean",
                    "description": "Force a cache miss for the request. If specified, can be `true` or `false`\n"
                },
                "forceSsl": {
                    "type": "boolean",
                    "description": "Forces the request to use SSL (Redirects a non-SSL request to SSL)\n"
                },
                "geoHeaders": {
                    "type": "boolean",
                    "description": "Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers\n",
                    "deprecationMessage": "'geo_headers' attribute has been deprecated and will be removed in the next major version release"
                },
                "hashKeys": {
                    "type": "string",
                    "description": "Comma separated list of varnish request object fields that should be in the hash key\n"
                },
                "maxStaleAge": {
                    "type": "integer",
                    "description": "How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds\n"
                },
                "name": {
                    "type": "string",
                    "description": "Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "requestCondition": {
                    "type": "string",
                    "description": "Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `request_setting`)\n"
                },
                "timerSupport": {
                    "type": "boolean",
                    "description": "Injects the X-Timer info into the request for viewing origin fetch durations\n"
                },
                "xff": {
                    "type": "string",
                    "description": "X-Forwarded-For, should be `clear`, `leave`, `append`, `append_all`, or `overwrite`. Default `append`\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "fastly:index/ServiceVclResponseObject:ServiceVclResponseObject": {
            "properties": {
                "cacheCondition": {
                    "type": "string",
                    "description": "Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)\n"
                },
                "content": {
                    "type": "string",
                    "description": "The content to deliver for the response object\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "The MIME type of the content\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "requestCondition": {
                    "type": "string",
                    "description": "Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`\n"
                },
                "response": {
                    "type": "string",
                    "description": "The HTTP Response. Default `OK`\n"
                },
                "status": {
                    "type": "integer",
                    "description": "The HTTP Status Code. Default `200`\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "fastly:index/ServiceVclSnippet:ServiceVclSnippet": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The VCL code that specifies exactly what the snippet does\n"
                },
                "name": {
                    "type": "string",
                    "description": "A name that is unique across \"regular\" and \"dynamic\" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`\n"
                },
                "type": {
                    "type": "string",
                    "description": "The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name",
                "type"
            ]
        },
        "fastly:index/ServiceVclVcl:ServiceVclVcl": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The custom VCL code to upload\n"
                },
                "main": {
                    "type": "boolean",
                    "description": "If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name"
            ]
        },
        "fastly:index/ServiceVclWaf:ServiceVclWaf": {
            "properties": {
                "disabled": {
                    "type": "boolean",
                    "description": "A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency\n"
                },
                "prefetchCondition": {
                    "type": "string",
                    "description": "The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)\n"
                },
                "responseObject": {
                    "type": "string",
                    "description": "The name of the response object used by the Web Application Firewall\n"
                },
                "wafId": {
                    "type": "string",
                    "description": "The ID of the WAF\n"
                }
            },
            "type": "object",
            "required": [
                "responseObject"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "responseObject",
                        "wafId"
                    ]
                }
            }
        },
        "fastly:index/ServiceWafConfigurationRule:ServiceWafConfigurationRule": {
            "properties": {
                "modsecRuleId": {
                    "type": "integer",
                    "description": "The Web Application Firewall rule's modsecurity ID\n"
                },
                "revision": {
                    "type": "integer",
                    "description": "The Web Application Firewall rule's revision. The latest revision will be used if this is not provided\n"
                },
                "status": {
                    "type": "string",
                    "description": "The Web Application Firewall rule's status. Allowed values are (`log`, `block` and `score`)\n"
                }
            },
            "type": "object",
            "required": [
                "modsecRuleId",
                "status"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "modsecRuleId",
                        "revision",
                        "status"
                    ]
                }
            }
        },
        "fastly:index/ServiceWafConfigurationRuleExclusion:ServiceWafConfigurationRuleExclusion": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "A conditional expression in VCL used to determine if the condition is met\n"
                },
                "exclusionType": {
                    "type": "string",
                    "description": "The type of rule exclusion. Values are `rule` to exclude the specified rule(s), or `waf` to disable the Web Application Firewall\n"
                },
                "modsecRuleIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Set of modsecurity IDs to be excluded. No rules should be provided when `exclusion_type` is `waf`. The rules need to be configured on the Web Application Firewall to be excluded\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of rule exclusion\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The numeric ID assigned to the WAF Rule Exclusion\n"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "exclusionType",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "condition",
                        "exclusionType",
                        "name",
                        "number"
                    ]
                }
            }
        },
        "fastly:index/TlsSubscriptionManagedDnsChallenge:TlsSubscriptionManagedDnsChallenge": {
            "properties": {
                "recordName": {
                    "type": "string",
                    "description": "The name of the DNS record to add. For example `_acme-challenge.example.com`.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The type of DNS record to add, e.g. `A`, or `CNAME`.\n"
                },
                "recordValue": {
                    "type": "string",
                    "description": "The value to which the DNS record should point, e.g. `xxxxx.fastly-validations.com`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "recordName",
                        "recordType",
                        "recordValue"
                    ]
                }
            }
        },
        "fastly:index/TlsSubscriptionManagedHttpChallenge:TlsSubscriptionManagedHttpChallenge": {
            "properties": {
                "recordName": {
                    "type": "string",
                    "description": "The name of the DNS record to add. For example `example.com`. Best accessed through a `for` expression to filter the relevant record.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "The type of DNS record to add, e.g. `A`, or `CNAME`.\n"
                },
                "recordValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list with the value(s) to which the DNS record should point.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "recordName",
                        "recordType",
                        "recordValues"
                    ]
                }
            }
        },
        "fastly:index/getConfigstoresStore:getConfigstoresStore": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Alphanumeric string identifying the Config Store.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Config Store.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "fastly:index/getDatacentersPop:getDatacentersPop": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "A code representing the POP location.\n"
                },
                "group": {
                    "type": "string",
                    "description": "A code representing the general region of the world in which the POP location resides.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the POP.\n"
                },
                "shield": {
                    "type": "string",
                    "description": "A code representing the shielding name of the POP. The value may be empty if the POP is not available for shielding.\n"
                }
            },
            "type": "object",
            "required": [
                "code",
                "group",
                "name",
                "shield"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "fastly:index/getDictionariesDictionary:getDictionariesDictionary": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Alphanumeric string identifying the Dictionary.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Dictionary.\n"
                },
                "writeOnly": {
                    "type": "boolean",
                    "description": "Indicates if items in the dictionary are readable or not.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "writeOnly"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "fastly:index/getKvstoresStore:getKvstoresStore": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Alphanumeric string identifying the KV Store.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the KV Store.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "fastly:index/getSecretstoresStore:getSecretstoresStore": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Alphanumeric string identifying the Secrets Store.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name for the Secrets Store.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "fastly:index/getServicesDetail:getServicesDetail": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "A freeform descriptive note.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date and time in ISO 8601 format.\n"
                },
                "customerId": {
                    "type": "string",
                    "description": "Alphanumeric string identifying the customer.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Alphanumeric string identifying the service.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of this service. One of `vcl`, `wasm`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time in ISO 8601 format.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "The currently activated version.\n"
                }
            },
            "type": "object",
            "required": [
                "comment",
                "createdAt",
                "customerId",
                "id",
                "name",
                "type",
                "updatedAt",
                "version"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "fastly:index/getTlsConfigurationDnsRecord:getTlsConfigurationDnsRecord": {
            "properties": {
                "recordType": {
                    "type": "string",
                    "description": "Type of DNS record to set, e.g. A, AAAA, or CNAME.\n"
                },
                "recordValue": {
                    "type": "string",
                    "description": "The IP address or hostname of the DNS record.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The regions that will be used to route traffic. Select DNS Records with a `global` region to route traffic to the most performant point of presence (POP) worldwide (global pricing will apply). Select DNS records with a `us-eu` region to exclusively land traffic on North American and European POPs.\n"
                }
            },
            "type": "object",
            "required": [
                "recordType",
                "recordValue",
                "region"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "fastly:index/getVclSnippetsVclSnippet:getVclSnippetsVclSnippet": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The VCL code that specifies exactly what the snippet does.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Alphanumeric string identifying a VCL Snippet.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name for the snippet.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority determines execution order. Lower numbers execute first.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The location in generated VCL where the snippet should be placed.\n"
                }
            },
            "type": "object",
            "required": [
                "content",
                "id",
                "name",
                "priority",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "fastly:index/getWafRulesRule:getWafRulesRule": {
            "properties": {
                "latestRevisionNumber": {
                    "type": "integer",
                    "description": "The modsecurity rule's latest revision.\n"
                },
                "modsecRuleId": {
                    "type": "integer",
                    "description": "The modsecurity rule ID.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The modsecurity rule's type.\n"
                }
            },
            "type": "object",
            "required": [
                "latestRevisionNumber",
                "modsecRuleId",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the fastly package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "description": "Fastly API Key from https://app.fastly.com/#account\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "Fastly API URL\n"
            },
            "forceHttp2": {
                "type": "boolean",
                "description": "Set this to `true` to disable HTTP/1.x fallback mechanism that the underlying Go library will attempt upon connection to\n`api.fastly.com:443` by default. This may slightly improve the provider's performance and reduce unnecessary TLS\nhandshakes. Default: `false`\n"
            },
            "noAuth": {
                "type": "boolean",
                "description": "Set to `true` if your configuration only consumes data sources that do not require authentication, such as\n`fastly.getFastlyIpRanges`\n"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "Fastly API Key from https://app.fastly.com/#account\n"
            },
            "baseUrl": {
                "type": "string",
                "description": "Fastly API URL\n"
            },
            "forceHttp2": {
                "type": "boolean",
                "description": "Set this to `true` to disable HTTP/1.x fallback mechanism that the underlying Go library will attempt upon connection to\n`api.fastly.com:443` by default. This may slightly improve the provider's performance and reduce unnecessary TLS\nhandshakes. Default: `false`\n"
            },
            "noAuth": {
                "type": "boolean",
                "description": "Set to `true` if your configuration only consumes data sources that do not require authentication, such as\n`fastly.getFastlyIpRanges`\n"
            }
        }
    },
    "resources": {
        "fastly:index/alert:Alert": {
            "description": "Provides a Fastly Alert. Alerts send notifications to custom integrations (e.g., Slack channels, PagerDuty, Microsoft Teams and New Relic) when an observed metric either exceeds or falls below a threshold.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = new fastly.ServiceVcl(\"example\", {name: \"my_vcl_service\"});\nconst exampleAlert = new fastly.Alert(\"example\", {\n    name: \"my_vcl_service errors\",\n    serviceId: example.id,\n    source: \"stats\",\n    metric: \"status_5xx\",\n    evaluationStrategy: {\n        type: \"above_threshold\",\n        period: \"5m\",\n        threshold: 10,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.ServiceVcl(\"example\", name=\"my_vcl_service\")\nexample_alert = fastly.Alert(\"example\",\n    name=\"my_vcl_service errors\",\n    service_id=example.id,\n    source=\"stats\",\n    metric=\"status_5xx\",\n    evaluation_strategy=fastly.AlertEvaluationStrategyArgs(\n        type=\"above_threshold\",\n        period=\"5m\",\n        threshold=10,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Fastly.ServiceVcl(\"example\", new()\n    {\n        Name = \"my_vcl_service\",\n    });\n\n    var exampleAlert = new Fastly.Alert(\"example\", new()\n    {\n        Name = \"my_vcl_service errors\",\n        ServiceId = example.Id,\n        Source = \"stats\",\n        Metric = \"status_5xx\",\n        EvaluationStrategy = new Fastly.Inputs.AlertEvaluationStrategyArgs\n        {\n            Type = \"above_threshold\",\n            Period = \"5m\",\n            Threshold = 10,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := fastly.NewServiceVcl(ctx, \"example\", \u0026fastly.ServiceVclArgs{\n\t\t\tName: pulumi.String(\"my_vcl_service\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewAlert(ctx, \"example\", \u0026fastly.AlertArgs{\n\t\t\tName:      pulumi.String(\"my_vcl_service errors\"),\n\t\t\tServiceId: example.ID(),\n\t\t\tSource:    pulumi.String(\"stats\"),\n\t\t\tMetric:    pulumi.String(\"status_5xx\"),\n\t\t\tEvaluationStrategy: \u0026fastly.AlertEvaluationStrategyArgs{\n\t\t\t\tType:      pulumi.String(\"above_threshold\"),\n\t\t\t\tPeriod:    pulumi.String(\"5m\"),\n\t\t\t\tThreshold: pulumi.Float64(10),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.ServiceVcl;\nimport com.pulumi.fastly.ServiceVclArgs;\nimport com.pulumi.fastly.Alert;\nimport com.pulumi.fastly.AlertArgs;\nimport com.pulumi.fastly.inputs.AlertEvaluationStrategyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ServiceVcl(\"example\", ServiceVclArgs.builder()        \n            .name(\"my_vcl_service\")\n            .build());\n\n        var exampleAlert = new Alert(\"exampleAlert\", AlertArgs.builder()        \n            .name(\"my_vcl_service errors\")\n            .serviceId(example.id())\n            .source(\"stats\")\n            .metric(\"status_5xx\")\n            .evaluationStrategy(AlertEvaluationStrategyArgs.builder()\n                .type(\"above_threshold\")\n                .period(\"5m\")\n                .threshold(10)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: fastly:ServiceVcl\n    properties:\n      name: my_vcl_service\n  exampleAlert:\n    type: fastly:Alert\n    name: example\n    properties:\n      name: my_vcl_service errors\n      serviceId: ${example.id}\n      source: stats\n      metric: status_5xx\n      evaluationStrategy:\n        type: above_threshold\n        period: 5m\n        threshold: 10\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFastly Alerts can be imported using their ID, e.g.\n\n```sh\n$ pulumi import fastly:index/alert:Alert example xxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Additional text that is included in the alert notification.\n"
                },
                "dimensions": {
                    "$ref": "#/types/fastly:index/AlertDimensions:AlertDimensions",
                    "description": "More filters depending on the source type.\n"
                },
                "evaluationStrategy": {
                    "$ref": "#/types/fastly:index/AlertEvaluationStrategy:AlertEvaluationStrategy",
                    "description": "Criteria on how to alert.\n"
                },
                "integrationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of integrations used to notify when alert fires.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The service which the alert monitors.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source where the metric comes from. One of: `domains`, `origins`, `stats`.\n"
                }
            },
            "required": [
                "evaluationStrategy",
                "metric",
                "name",
                "serviceId",
                "source"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Additional text that is included in the alert notification.\n"
                },
                "dimensions": {
                    "$ref": "#/types/fastly:index/AlertDimensions:AlertDimensions",
                    "description": "More filters depending on the source type.\n"
                },
                "evaluationStrategy": {
                    "$ref": "#/types/fastly:index/AlertEvaluationStrategy:AlertEvaluationStrategy",
                    "description": "Criteria on how to alert.\n"
                },
                "integrationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of integrations used to notify when alert fires.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The service which the alert monitors.\n",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "description": "The source where the metric comes from. One of: `domains`, `origins`, `stats`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "evaluationStrategy",
                "metric",
                "serviceId",
                "source"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Alert resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Additional text that is included in the alert notification.\n"
                    },
                    "dimensions": {
                        "$ref": "#/types/fastly:index/AlertDimensions:AlertDimensions",
                        "description": "More filters depending on the source type.\n"
                    },
                    "evaluationStrategy": {
                        "$ref": "#/types/fastly:index/AlertEvaluationStrategy:AlertEvaluationStrategy",
                        "description": "Criteria on how to alert.\n"
                    },
                    "integrationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of integrations used to notify when alert fires.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the alert.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The service which the alert monitors.\n",
                        "willReplaceOnChanges": true
                    },
                    "source": {
                        "type": "string",
                        "description": "The source where the metric comes from. One of: `domains`, `origins`, `stats`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/configstore:Configstore": {
            "description": "Provides a container that lets you store data in key-value pairs that are accessible to Compute services during request processing.\n\nIn order for a Config Store (`fastly.Configstore`) to be accessible to a [Compute](https://developer.fastly.com/learning/compute/) service you'll first need to define a Compute service (`fastly.ServiceCompute`) in your configuration, and then create a link to the Config Store from within the service using the `resource_link` block (shown in the below examples).\n\n## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\n// IMPORTANT: Deleting a Config Store requires first deleting its resource_link.\n// This requires a two-step `pulumi up` as we can't guarantee deletion order.\n// e.g. resource_link deletion within fastly_service_compute might not finish first.\nconst exampleConfigstore = new fastly.Configstore(\"example\", {name: \"my_config_store\"});\nconst example = fastly.getPackageHash({\n    filename: \"package.tar.gz\",\n});\nconst exampleServiceCompute = new fastly.ServiceCompute(\"example\", {\n    name: \"my_compute_service\",\n    domains: [{\n        name: \"demo.example.com\",\n    }],\n    \"package\": {\n        filename: \"package.tar.gz\",\n        sourceCodeHash: example.then(example =\u003e example.hash),\n    },\n    resourceLinks: [{\n        name: \"my_resource_link\",\n        resourceId: exampleConfigstore.id,\n    }],\n    forceDestroy: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\n# IMPORTANT: Deleting a Config Store requires first deleting its resource_link.\n# This requires a two-step `pulumi up` as we can't guarantee deletion order.\n# e.g. resource_link deletion within fastly_service_compute might not finish first.\nexample_configstore = fastly.Configstore(\"example\", name=\"my_config_store\")\nexample = fastly.get_package_hash(filename=\"package.tar.gz\")\nexample_service_compute = fastly.ServiceCompute(\"example\",\n    name=\"my_compute_service\",\n    domains=[fastly.ServiceComputeDomainArgs(\n        name=\"demo.example.com\",\n    )],\n    package=fastly.ServiceComputePackageArgs(\n        filename=\"package.tar.gz\",\n        source_code_hash=example.hash,\n    ),\n    resource_links=[fastly.ServiceComputeResourceLinkArgs(\n        name=\"my_resource_link\",\n        resource_id=example_configstore.id,\n    )],\n    force_destroy=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // IMPORTANT: Deleting a Config Store requires first deleting its resource_link.\n    // This requires a two-step `pulumi up` as we can't guarantee deletion order.\n    // e.g. resource_link deletion within fastly_service_compute might not finish first.\n    var exampleConfigstore = new Fastly.Configstore(\"example\", new()\n    {\n        Name = \"my_config_store\",\n    });\n\n    var example = Fastly.GetPackageHash.Invoke(new()\n    {\n        Filename = \"package.tar.gz\",\n    });\n\n    var exampleServiceCompute = new Fastly.ServiceCompute(\"example\", new()\n    {\n        Name = \"my_compute_service\",\n        Domains = new[]\n        {\n            new Fastly.Inputs.ServiceComputeDomainArgs\n            {\n                Name = \"demo.example.com\",\n            },\n        },\n        Package = new Fastly.Inputs.ServiceComputePackageArgs\n        {\n            Filename = \"package.tar.gz\",\n            SourceCodeHash = example.Apply(getPackageHashResult =\u003e getPackageHashResult.Hash),\n        },\n        ResourceLinks = new[]\n        {\n            new Fastly.Inputs.ServiceComputeResourceLinkArgs\n            {\n                Name = \"my_resource_link\",\n                ResourceId = exampleConfigstore.Id,\n            },\n        },\n        ForceDestroy = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// IMPORTANT: Deleting a Config Store requires first deleting its resource_link.\n\t\t// This requires a two-step `pulumi up` as we can't guarantee deletion order.\n\t\t// e.g. resource_link deletion within fastly_service_compute might not finish first.\n\t\texampleConfigstore, err := fastly.NewConfigstore(ctx, \"example\", \u0026fastly.ConfigstoreArgs{\n\t\t\tName: pulumi.String(\"my_config_store\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := fastly.GetPackageHash(ctx, \u0026fastly.GetPackageHashArgs{\n\t\t\tFilename: pulumi.StringRef(\"package.tar.gz\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewServiceCompute(ctx, \"example\", \u0026fastly.ServiceComputeArgs{\n\t\t\tName: pulumi.String(\"my_compute_service\"),\n\t\t\tDomains: fastly.ServiceComputeDomainArray{\n\t\t\t\t\u0026fastly.ServiceComputeDomainArgs{\n\t\t\t\t\tName: pulumi.String(\"demo.example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPackage: \u0026fastly.ServiceComputePackageArgs{\n\t\t\t\tFilename:       pulumi.String(\"package.tar.gz\"),\n\t\t\t\tSourceCodeHash: pulumi.String(example.Hash),\n\t\t\t},\n\t\t\tResourceLinks: fastly.ServiceComputeResourceLinkArray{\n\t\t\t\t\u0026fastly.ServiceComputeResourceLinkArgs{\n\t\t\t\t\tName:       pulumi.String(\"my_resource_link\"),\n\t\t\t\t\tResourceId: exampleConfigstore.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.Configstore;\nimport com.pulumi.fastly.ConfigstoreArgs;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetPackageHashArgs;\nimport com.pulumi.fastly.ServiceCompute;\nimport com.pulumi.fastly.ServiceComputeArgs;\nimport com.pulumi.fastly.inputs.ServiceComputeDomainArgs;\nimport com.pulumi.fastly.inputs.ServiceComputePackageArgs;\nimport com.pulumi.fastly.inputs.ServiceComputeResourceLinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // IMPORTANT: Deleting a Config Store requires first deleting its resource_link.\n        // This requires a two-step `pulumi up` as we can't guarantee deletion order.\n        // e.g. resource_link deletion within fastly_service_compute might not finish first.\n        var exampleConfigstore = new Configstore(\"exampleConfigstore\", ConfigstoreArgs.builder()        \n            .name(\"my_config_store\")\n            .build());\n\n        final var example = FastlyFunctions.getPackageHash(GetPackageHashArgs.builder()\n            .filename(\"package.tar.gz\")\n            .build());\n\n        var exampleServiceCompute = new ServiceCompute(\"exampleServiceCompute\", ServiceComputeArgs.builder()        \n            .name(\"my_compute_service\")\n            .domains(ServiceComputeDomainArgs.builder()\n                .name(\"demo.example.com\")\n                .build())\n            .package_(ServiceComputePackageArgs.builder()\n                .filename(\"package.tar.gz\")\n                .sourceCodeHash(example.applyValue(getPackageHashResult -\u003e getPackageHashResult.hash()))\n                .build())\n            .resourceLinks(ServiceComputeResourceLinkArgs.builder()\n                .name(\"my_resource_link\")\n                .resourceId(exampleConfigstore.id())\n                .build())\n            .forceDestroy(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # IMPORTANT: Deleting a Config Store requires first deleting its resource_link.\n  # This requires a two-step `pulumi up` as we can't guarantee deletion order.\n  # e.g. resource_link deletion within fastly_service_compute might not finish first.\n  exampleConfigstore:\n    type: fastly:Configstore\n    name: example\n    properties:\n      name: my_config_store\n  exampleServiceCompute:\n    type: fastly:ServiceCompute\n    name: example\n    properties:\n      name: my_compute_service\n      domains:\n        - name: demo.example.com\n      package:\n        filename: package.tar.gz\n        sourceCodeHash: ${example.hash}\n      resourceLinks:\n        - name: my_resource_link\n          resourceId: ${exampleConfigstore.id}\n      forceDestroy: true\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getPackageHash\n      Arguments:\n        filename: package.tar.gz\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFastly Config Stores can be imported using their Store ID, e.g.\n\n```sh\n$ pulumi import fastly:index/configstore:Configstore example xxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the Config Store to be deleted, even if it contains entries. Defaults to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify the Config Store. It is important to note that changing this attribute will delete and recreate the Config Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the Config Store to be deleted, even if it contains entries. Defaults to false.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify the Config Store. It is important to note that changing this attribute will delete and recreate the Config Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Configstore resources.\n",
                "properties": {
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Allow the Config Store to be deleted, even if it contains entries. Defaults to false.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A unique name to identify the Config Store. It is important to note that changing this attribute will delete and recreate the Config Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/configstoreEntries:ConfigstoreEntries": {
            "description": "\n\n## Import\n\nFastly Config Stores entries can be imported using the corresponding Config Store ID with the `/entries` suffix, e.g.\n\n```sh\n$ pulumi import fastly:index/configstoreEntries:ConfigstoreEntries example xxxxxxxxxxxxxxxxxxxx/entries\n```\n\n",
            "properties": {
                "entries": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map representing an entry in the Config Store, (key/value)\n"
                },
                "manageEntries": {
                    "type": "boolean"
                },
                "storeId": {
                    "type": "string",
                    "description": "An alphanumeric string identifying the Config Store.\n"
                }
            },
            "required": [
                "entries",
                "storeId"
            ],
            "inputProperties": {
                "entries": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map representing an entry in the Config Store, (key/value)\n"
                },
                "manageEntries": {
                    "type": "boolean"
                },
                "storeId": {
                    "type": "string",
                    "description": "An alphanumeric string identifying the Config Store.\n"
                }
            },
            "requiredInputs": [
                "entries",
                "storeId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ConfigstoreEntries resources.\n",
                "properties": {
                    "entries": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map representing an entry in the Config Store, (key/value)\n"
                    },
                    "manageEntries": {
                        "type": "boolean"
                    },
                    "storeId": {
                        "type": "string",
                        "description": "An alphanumeric string identifying the Config Store.\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/kvstore:Kvstore": {
            "description": "## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\n// IMPORTANT: Deleting a KV Store requires first deleting its resource_link.\n// This requires a two-step `pulumi up` as we can't guarantee deletion order.\n// e.g. resource_link deletion within fastly_service_compute might not finish first.\nconst exampleKvstore = new fastly.Kvstore(\"example\", {name: \"my_kv_store\"});\nconst example = fastly.getPackageHash({\n    filename: \"package.tar.gz\",\n});\nconst exampleServiceCompute = new fastly.ServiceCompute(\"example\", {\n    name: \"my_compute_service\",\n    domains: [{\n        name: \"demo.example.com\",\n    }],\n    \"package\": {\n        filename: \"package.tar.gz\",\n        sourceCodeHash: example.then(example =\u003e example.hash),\n    },\n    resourceLinks: [{\n        name: \"my_resource_link\",\n        resourceId: exampleKvstore.id,\n    }],\n    forceDestroy: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\n# IMPORTANT: Deleting a KV Store requires first deleting its resource_link.\n# This requires a two-step `pulumi up` as we can't guarantee deletion order.\n# e.g. resource_link deletion within fastly_service_compute might not finish first.\nexample_kvstore = fastly.Kvstore(\"example\", name=\"my_kv_store\")\nexample = fastly.get_package_hash(filename=\"package.tar.gz\")\nexample_service_compute = fastly.ServiceCompute(\"example\",\n    name=\"my_compute_service\",\n    domains=[fastly.ServiceComputeDomainArgs(\n        name=\"demo.example.com\",\n    )],\n    package=fastly.ServiceComputePackageArgs(\n        filename=\"package.tar.gz\",\n        source_code_hash=example.hash,\n    ),\n    resource_links=[fastly.ServiceComputeResourceLinkArgs(\n        name=\"my_resource_link\",\n        resource_id=example_kvstore.id,\n    )],\n    force_destroy=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // IMPORTANT: Deleting a KV Store requires first deleting its resource_link.\n    // This requires a two-step `pulumi up` as we can't guarantee deletion order.\n    // e.g. resource_link deletion within fastly_service_compute might not finish first.\n    var exampleKvstore = new Fastly.Kvstore(\"example\", new()\n    {\n        Name = \"my_kv_store\",\n    });\n\n    var example = Fastly.GetPackageHash.Invoke(new()\n    {\n        Filename = \"package.tar.gz\",\n    });\n\n    var exampleServiceCompute = new Fastly.ServiceCompute(\"example\", new()\n    {\n        Name = \"my_compute_service\",\n        Domains = new[]\n        {\n            new Fastly.Inputs.ServiceComputeDomainArgs\n            {\n                Name = \"demo.example.com\",\n            },\n        },\n        Package = new Fastly.Inputs.ServiceComputePackageArgs\n        {\n            Filename = \"package.tar.gz\",\n            SourceCodeHash = example.Apply(getPackageHashResult =\u003e getPackageHashResult.Hash),\n        },\n        ResourceLinks = new[]\n        {\n            new Fastly.Inputs.ServiceComputeResourceLinkArgs\n            {\n                Name = \"my_resource_link\",\n                ResourceId = exampleKvstore.Id,\n            },\n        },\n        ForceDestroy = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// IMPORTANT: Deleting a KV Store requires first deleting its resource_link.\n\t\t// This requires a two-step `pulumi up` as we can't guarantee deletion order.\n\t\t// e.g. resource_link deletion within fastly_service_compute might not finish first.\n\t\texampleKvstore, err := fastly.NewKvstore(ctx, \"example\", \u0026fastly.KvstoreArgs{\n\t\t\tName: pulumi.String(\"my_kv_store\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := fastly.GetPackageHash(ctx, \u0026fastly.GetPackageHashArgs{\n\t\t\tFilename: pulumi.StringRef(\"package.tar.gz\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewServiceCompute(ctx, \"example\", \u0026fastly.ServiceComputeArgs{\n\t\t\tName: pulumi.String(\"my_compute_service\"),\n\t\t\tDomains: fastly.ServiceComputeDomainArray{\n\t\t\t\t\u0026fastly.ServiceComputeDomainArgs{\n\t\t\t\t\tName: pulumi.String(\"demo.example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPackage: \u0026fastly.ServiceComputePackageArgs{\n\t\t\t\tFilename:       pulumi.String(\"package.tar.gz\"),\n\t\t\t\tSourceCodeHash: pulumi.String(example.Hash),\n\t\t\t},\n\t\t\tResourceLinks: fastly.ServiceComputeResourceLinkArray{\n\t\t\t\t\u0026fastly.ServiceComputeResourceLinkArgs{\n\t\t\t\t\tName:       pulumi.String(\"my_resource_link\"),\n\t\t\t\t\tResourceId: exampleKvstore.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.Kvstore;\nimport com.pulumi.fastly.KvstoreArgs;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetPackageHashArgs;\nimport com.pulumi.fastly.ServiceCompute;\nimport com.pulumi.fastly.ServiceComputeArgs;\nimport com.pulumi.fastly.inputs.ServiceComputeDomainArgs;\nimport com.pulumi.fastly.inputs.ServiceComputePackageArgs;\nimport com.pulumi.fastly.inputs.ServiceComputeResourceLinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // IMPORTANT: Deleting a KV Store requires first deleting its resource_link.\n        // This requires a two-step `pulumi up` as we can't guarantee deletion order.\n        // e.g. resource_link deletion within fastly_service_compute might not finish first.\n        var exampleKvstore = new Kvstore(\"exampleKvstore\", KvstoreArgs.builder()        \n            .name(\"my_kv_store\")\n            .build());\n\n        final var example = FastlyFunctions.getPackageHash(GetPackageHashArgs.builder()\n            .filename(\"package.tar.gz\")\n            .build());\n\n        var exampleServiceCompute = new ServiceCompute(\"exampleServiceCompute\", ServiceComputeArgs.builder()        \n            .name(\"my_compute_service\")\n            .domains(ServiceComputeDomainArgs.builder()\n                .name(\"demo.example.com\")\n                .build())\n            .package_(ServiceComputePackageArgs.builder()\n                .filename(\"package.tar.gz\")\n                .sourceCodeHash(example.applyValue(getPackageHashResult -\u003e getPackageHashResult.hash()))\n                .build())\n            .resourceLinks(ServiceComputeResourceLinkArgs.builder()\n                .name(\"my_resource_link\")\n                .resourceId(exampleKvstore.id())\n                .build())\n            .forceDestroy(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # IMPORTANT: Deleting a KV Store requires first deleting its resource_link.\n  # This requires a two-step `pulumi up` as we can't guarantee deletion order.\n  # e.g. resource_link deletion within fastly_service_compute might not finish first.\n  exampleKvstore:\n    type: fastly:Kvstore\n    name: example\n    properties:\n      name: my_kv_store\n  exampleServiceCompute:\n    type: fastly:ServiceCompute\n    name: example\n    properties:\n      name: my_compute_service\n      domains:\n        - name: demo.example.com\n      package:\n        filename: package.tar.gz\n        sourceCodeHash: ${example.hash}\n      resourceLinks:\n        - name: my_resource_link\n          resourceId: ${exampleKvstore.id}\n      forceDestroy: true\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getPackageHash\n      Arguments:\n        filename: package.tar.gz\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFastly KV Stores can be imported using their Store ID, e.g.\n\n```sh\n$ pulumi import fastly:index/kvstore:Kvstore example xxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the KV Store to be deleted, even if it contains entries. Defaults to false.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The regional location of the KV Store. Valid values are `US`, `EU`, `ASIA`, and `AUS`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Allow the KV Store to be deleted, even if it contains entries. Defaults to false.\n"
                },
                "location": {
                    "type": "string",
                    "description": "The regional location of the KV Store. Valid values are `US`, `EU`, `ASIA`, and `AUS`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Kvstore resources.\n",
                "properties": {
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Allow the KV Store to be deleted, even if it contains entries. Defaults to false.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "The regional location of the KV Store. Valid values are `US`, `EU`, `ASIA`, and `AUS`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/secretstore:Secretstore": {
            "description": "## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\n// IMPORTANT: Deleting a Secret Store requires first deleting its resource_link.\n// This requires a two-step `pulumi up` as we can't guarantee deletion order.\n// e.g. resource_link deletion within fastly_service_compute might not finish first.\nconst exampleSecretstore = new fastly.Secretstore(\"example\", {name: \"my_secret_store\"});\nconst example = fastly.getPackageHash({\n    filename: \"package.tar.gz\",\n});\nconst exampleServiceCompute = new fastly.ServiceCompute(\"example\", {\n    name: \"my_compute_service\",\n    domains: [{\n        name: \"demo.example.com\",\n    }],\n    \"package\": {\n        filename: \"package.tar.gz\",\n        sourceCodeHash: example.then(example =\u003e example.hash),\n    },\n    resourceLinks: [{\n        name: \"my_resource_link\",\n        resourceId: exampleSecretstore.id,\n    }],\n    forceDestroy: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\n# IMPORTANT: Deleting a Secret Store requires first deleting its resource_link.\n# This requires a two-step `pulumi up` as we can't guarantee deletion order.\n# e.g. resource_link deletion within fastly_service_compute might not finish first.\nexample_secretstore = fastly.Secretstore(\"example\", name=\"my_secret_store\")\nexample = fastly.get_package_hash(filename=\"package.tar.gz\")\nexample_service_compute = fastly.ServiceCompute(\"example\",\n    name=\"my_compute_service\",\n    domains=[fastly.ServiceComputeDomainArgs(\n        name=\"demo.example.com\",\n    )],\n    package=fastly.ServiceComputePackageArgs(\n        filename=\"package.tar.gz\",\n        source_code_hash=example.hash,\n    ),\n    resource_links=[fastly.ServiceComputeResourceLinkArgs(\n        name=\"my_resource_link\",\n        resource_id=example_secretstore.id,\n    )],\n    force_destroy=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // IMPORTANT: Deleting a Secret Store requires first deleting its resource_link.\n    // This requires a two-step `pulumi up` as we can't guarantee deletion order.\n    // e.g. resource_link deletion within fastly_service_compute might not finish first.\n    var exampleSecretstore = new Fastly.Secretstore(\"example\", new()\n    {\n        Name = \"my_secret_store\",\n    });\n\n    var example = Fastly.GetPackageHash.Invoke(new()\n    {\n        Filename = \"package.tar.gz\",\n    });\n\n    var exampleServiceCompute = new Fastly.ServiceCompute(\"example\", new()\n    {\n        Name = \"my_compute_service\",\n        Domains = new[]\n        {\n            new Fastly.Inputs.ServiceComputeDomainArgs\n            {\n                Name = \"demo.example.com\",\n            },\n        },\n        Package = new Fastly.Inputs.ServiceComputePackageArgs\n        {\n            Filename = \"package.tar.gz\",\n            SourceCodeHash = example.Apply(getPackageHashResult =\u003e getPackageHashResult.Hash),\n        },\n        ResourceLinks = new[]\n        {\n            new Fastly.Inputs.ServiceComputeResourceLinkArgs\n            {\n                Name = \"my_resource_link\",\n                ResourceId = exampleSecretstore.Id,\n            },\n        },\n        ForceDestroy = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t// IMPORTANT: Deleting a Secret Store requires first deleting its resource_link.\n\t\t// This requires a two-step `pulumi up` as we can't guarantee deletion order.\n\t\t// e.g. resource_link deletion within fastly_service_compute might not finish first.\n\t\texampleSecretstore, err := fastly.NewSecretstore(ctx, \"example\", \u0026fastly.SecretstoreArgs{\n\t\t\tName: pulumi.String(\"my_secret_store\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := fastly.GetPackageHash(ctx, \u0026fastly.GetPackageHashArgs{\n\t\t\tFilename: pulumi.StringRef(\"package.tar.gz\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewServiceCompute(ctx, \"example\", \u0026fastly.ServiceComputeArgs{\n\t\t\tName: pulumi.String(\"my_compute_service\"),\n\t\t\tDomains: fastly.ServiceComputeDomainArray{\n\t\t\t\t\u0026fastly.ServiceComputeDomainArgs{\n\t\t\t\t\tName: pulumi.String(\"demo.example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPackage: \u0026fastly.ServiceComputePackageArgs{\n\t\t\t\tFilename:       pulumi.String(\"package.tar.gz\"),\n\t\t\t\tSourceCodeHash: pulumi.String(example.Hash),\n\t\t\t},\n\t\t\tResourceLinks: fastly.ServiceComputeResourceLinkArray{\n\t\t\t\t\u0026fastly.ServiceComputeResourceLinkArgs{\n\t\t\t\t\tName:       pulumi.String(\"my_resource_link\"),\n\t\t\t\t\tResourceId: exampleSecretstore.ID(),\n\t\t\t\t},\n\t\t\t},\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.Secretstore;\nimport com.pulumi.fastly.SecretstoreArgs;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetPackageHashArgs;\nimport com.pulumi.fastly.ServiceCompute;\nimport com.pulumi.fastly.ServiceComputeArgs;\nimport com.pulumi.fastly.inputs.ServiceComputeDomainArgs;\nimport com.pulumi.fastly.inputs.ServiceComputePackageArgs;\nimport com.pulumi.fastly.inputs.ServiceComputeResourceLinkArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        // IMPORTANT: Deleting a Secret Store requires first deleting its resource_link.\n        // This requires a two-step `pulumi up` as we can't guarantee deletion order.\n        // e.g. resource_link deletion within fastly_service_compute might not finish first.\n        var exampleSecretstore = new Secretstore(\"exampleSecretstore\", SecretstoreArgs.builder()        \n            .name(\"my_secret_store\")\n            .build());\n\n        final var example = FastlyFunctions.getPackageHash(GetPackageHashArgs.builder()\n            .filename(\"package.tar.gz\")\n            .build());\n\n        var exampleServiceCompute = new ServiceCompute(\"exampleServiceCompute\", ServiceComputeArgs.builder()        \n            .name(\"my_compute_service\")\n            .domains(ServiceComputeDomainArgs.builder()\n                .name(\"demo.example.com\")\n                .build())\n            .package_(ServiceComputePackageArgs.builder()\n                .filename(\"package.tar.gz\")\n                .sourceCodeHash(example.applyValue(getPackageHashResult -\u003e getPackageHashResult.hash()))\n                .build())\n            .resourceLinks(ServiceComputeResourceLinkArgs.builder()\n                .name(\"my_resource_link\")\n                .resourceId(exampleSecretstore.id())\n                .build())\n            .forceDestroy(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # IMPORTANT: Deleting a Secret Store requires first deleting its resource_link.\n  # This requires a two-step `pulumi up` as we can't guarantee deletion order.\n  # e.g. resource_link deletion within fastly_service_compute might not finish first.\n  exampleSecretstore:\n    type: fastly:Secretstore\n    name: example\n    properties:\n      name: my_secret_store\n  exampleServiceCompute:\n    type: fastly:ServiceCompute\n    name: example\n    properties:\n      name: my_compute_service\n      domains:\n        - name: demo.example.com\n      package:\n        filename: package.tar.gz\n        sourceCodeHash: ${example.hash}\n      resourceLinks:\n        - name: my_resource_link\n          resourceId: ${exampleSecretstore.id}\n      forceDestroy: true\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getPackageHash\n      Arguments:\n        filename: package.tar.gz\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nFastly Secret Stores can be imported using their Store ID, e.g.\n\n```sh\n$ pulumi import fastly:index/secretstore:Secretstore example xxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secretstore resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/serviceACLEntries:ServiceACLEntries": {
            "description": "\n\n## Import\n\nThis is an example of the import command being applied to the resource named `fastly_service_acl_entries.entries`\n\nThe resource ID is a combined value of the `service_id` and `acl_id` separated by a forward slash.\n\n```sh\n$ pulumi import fastly:index/serviceACLEntries:ServiceACLEntries entries xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx\n```\n\nIf Terraform is already managing remote acl entries against a resource being imported then the user will be asked to remove it from the existing Terraform state.\n\nThe following is an example of the Terraform state command to remove the resource named `fastly_service_acl_entries.entries` from the Terraform state file.\n\n$ terraform state rm fastly_service_acl_entries.entries\n\n",
            "properties": {
                "aclId": {
                    "type": "string",
                    "description": "The ID of the ACL that the items belong to\n"
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceACLEntriesEntry:ServiceACLEntriesEntry"
                    },
                    "description": "ACL Entries\n"
                },
                "manageEntries": {
                    "type": "boolean",
                    "description": "Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the Service that the ACL belongs to\n"
                }
            },
            "required": [
                "aclId",
                "serviceId"
            ],
            "inputProperties": {
                "aclId": {
                    "type": "string",
                    "description": "The ID of the ACL that the items belong to\n",
                    "willReplaceOnChanges": true
                },
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceACLEntriesEntry:ServiceACLEntriesEntry"
                    },
                    "description": "ACL Entries\n"
                },
                "manageEntries": {
                    "type": "boolean",
                    "description": "Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the Service that the ACL belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "aclId",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceACLEntries resources.\n",
                "properties": {
                    "aclId": {
                        "type": "string",
                        "description": "The ID of the ACL that the items belong to\n",
                        "willReplaceOnChanges": true
                    },
                    "entries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceACLEntriesEntry:ServiceACLEntriesEntry"
                        },
                        "description": "ACL Entries\n"
                    },
                    "manageEntries": {
                        "type": "boolean",
                        "description": "Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the Service that the ACL belongs to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/serviceAuthorization:ServiceAuthorization": {
            "description": "Configures authorization with granular permissions to services. Users can be granted rights for services on different levels.\n\nThe Service Authorization resource requires a user id, service id and an optional permission.\n\n## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst demo = new fastly.ServiceVcl(\"demo\", {});\nconst user = new fastly.User(\"user\", {});\nconst auth = new fastly.ServiceAuthorization(\"auth\", {\n    serviceId: demo.id,\n    userId: user.id,\n    permission: \"purge_all\",\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndemo = fastly.ServiceVcl(\"demo\")\nuser = fastly.User(\"user\")\nauth = fastly.ServiceAuthorization(\"auth\",\n    service_id=demo.id,\n    user_id=user.id,\n    permission=\"purge_all\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = new Fastly.ServiceVcl(\"demo\");\n\n    var user = new Fastly.User(\"user\");\n\n    var auth = new Fastly.ServiceAuthorization(\"auth\", new()\n    {\n        ServiceId = demo.Id,\n        UserId = user.Id,\n        Permission = \"purge_all\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemo, err := fastly.NewServiceVcl(ctx, \"demo\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tuser, err := fastly.NewUser(ctx, \"user\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewServiceAuthorization(ctx, \"auth\", \u0026fastly.ServiceAuthorizationArgs{\n\t\t\tServiceId:  demo.ID(),\n\t\t\tUserId:     user.ID(),\n\t\t\tPermission: pulumi.String(\"purge_all\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.ServiceVcl;\nimport com.pulumi.fastly.User;\nimport com.pulumi.fastly.ServiceAuthorization;\nimport com.pulumi.fastly.ServiceAuthorizationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var demo = new ServiceVcl(\"demo\");\n\n        var user = new User(\"user\");\n\n        var auth = new ServiceAuthorization(\"auth\", ServiceAuthorizationArgs.builder()        \n            .serviceId(demo.id())\n            .userId(user.id())\n            .permission(\"purge_all\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo:\n    type: fastly:ServiceVcl\n  user:\n    type: fastly:User\n  auth:\n    type: fastly:ServiceAuthorization\n    properties:\n      serviceId: ${demo.id}\n      userId: ${user.id}\n      permission: purge_all\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA Fastly Service Authorization can be imported using their user ID, e.g.\n\n```sh\n$ pulumi import fastly:index/serviceAuthorization:ServiceAuthorization demo xxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service to grant permissions for.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user which will receive the granted permissions.\n"
                }
            },
            "required": [
                "permission",
                "serviceId",
                "userId"
            ],
            "inputProperties": {
                "permission": {
                    "type": "string",
                    "description": "The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service to grant permissions for.\n",
                    "willReplaceOnChanges": true
                },
                "userId": {
                    "type": "string",
                    "description": "The ID of the user which will receive the granted permissions.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permission",
                "serviceId",
                "userId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAuthorization resources.\n",
                "properties": {
                    "permission": {
                        "type": "string",
                        "description": "The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service to grant permissions for.\n",
                        "willReplaceOnChanges": true
                    },
                    "userId": {
                        "type": "string",
                        "description": "The ID of the user which will receive the granted permissions.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/serviceCompute:ServiceCompute": {
            "description": "\n\n## Import\n\nFastly Services can be imported using their service ID, e.g.\n\n```sh\n$ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx\n```\n\nBy default, either the active version will be imported, or the latest version if no version is active.\n\nAlternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.\n\n```sh\n$ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx@2\n```\n\n",
            "properties": {
                "activate": {
                    "type": "boolean",
                    "description": "Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                },
                "activeVersion": {
                    "type": "integer",
                    "description": "The currently active version of your Fastly Service\n"
                },
                "backends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeBackend:ServiceComputeBackend"
                    }
                },
                "clonedVersion": {
                    "type": "integer",
                    "description": "The latest cloned version by the provider\n"
                },
                "comment": {
                    "type": "string"
                },
                "dictionaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeDictionary:ServiceComputeDictionary"
                    }
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeDomain:ServiceComputeDomain"
                    },
                    "description": "A set of Domain names to serve as entry points for your Service\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`\n"
                },
                "forceRefresh": {
                    "type": "boolean"
                },
                "imported": {
                    "type": "boolean",
                    "description": "Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished\n"
                },
                "loggingBigqueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingBigquery:ServiceComputeLoggingBigquery"
                    }
                },
                "loggingBlobstorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingBlobstorage:ServiceComputeLoggingBlobstorage"
                    }
                },
                "loggingCloudfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingCloudfile:ServiceComputeLoggingCloudfile"
                    }
                },
                "loggingDatadogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingDatadog:ServiceComputeLoggingDatadog"
                    }
                },
                "loggingDigitaloceans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingDigitalocean:ServiceComputeLoggingDigitalocean"
                    }
                },
                "loggingElasticsearches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingElasticsearch:ServiceComputeLoggingElasticsearch"
                    }
                },
                "loggingFtps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingFtp:ServiceComputeLoggingFtp"
                    }
                },
                "loggingGcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingGc:ServiceComputeLoggingGc"
                    }
                },
                "loggingGooglepubsubs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingGooglepubsub:ServiceComputeLoggingGooglepubsub"
                    }
                },
                "loggingHeroku": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingHeroku:ServiceComputeLoggingHeroku"
                    }
                },
                "loggingHoneycombs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingHoneycomb:ServiceComputeLoggingHoneycomb"
                    }
                },
                "loggingHttps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingHttp:ServiceComputeLoggingHttp"
                    }
                },
                "loggingKafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingKafka:ServiceComputeLoggingKafka"
                    }
                },
                "loggingKineses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingKinese:ServiceComputeLoggingKinese"
                    }
                },
                "loggingLogentries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingLogentry:ServiceComputeLoggingLogentry"
                    }
                },
                "loggingLogglies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingLoggly:ServiceComputeLoggingLoggly"
                    }
                },
                "loggingLogshuttles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingLogshuttle:ServiceComputeLoggingLogshuttle"
                    }
                },
                "loggingNewrelics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingNewrelic:ServiceComputeLoggingNewrelic"
                    }
                },
                "loggingOpenstacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingOpenstack:ServiceComputeLoggingOpenstack"
                    }
                },
                "loggingPapertrails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingPapertrail:ServiceComputeLoggingPapertrail"
                    }
                },
                "loggingS3s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingS3:ServiceComputeLoggingS3"
                    }
                },
                "loggingScalyrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingScalyr:ServiceComputeLoggingScalyr"
                    }
                },
                "loggingSftps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingSftp:ServiceComputeLoggingSftp"
                    }
                },
                "loggingSplunks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingSplunk:ServiceComputeLoggingSplunk"
                    }
                },
                "loggingSumologics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingSumologic:ServiceComputeLoggingSumologic"
                    }
                },
                "loggingSyslogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingSyslog:ServiceComputeLoggingSyslog"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The unique name for the Service to create\n"
                },
                "package": {
                    "$ref": "#/types/fastly:index/ServiceComputePackage:ServiceComputePackage",
                    "description": "The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute service (if omitted, ensure `activate = false` is set on `fastly.ServiceCompute` to avoid service validation errors). See Fastly's documentation on [Compute](https://developer.fastly.com/learning/compute/)\n"
                },
                "productEnablement": {
                    "$ref": "#/types/fastly:index/ServiceComputeProductEnablement:ServiceComputeProductEnablement"
                },
                "resourceLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeResourceLink:ServiceComputeResourceLink"
                    },
                    "description": "A resource link represents a link between a shared resource (such as an KV Store or Config Store) and a service version.\n"
                },
                "reuse": {
                    "type": "boolean"
                },
                "versionComment": {
                    "type": "string",
                    "description": "Description field for the version\n"
                }
            },
            "required": [
                "activeVersion",
                "clonedVersion",
                "domains",
                "forceRefresh",
                "imported",
                "name"
            ],
            "inputProperties": {
                "activate": {
                    "type": "boolean",
                    "description": "Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                },
                "backends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeBackend:ServiceComputeBackend"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "dictionaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeDictionary:ServiceComputeDictionary"
                    }
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeDomain:ServiceComputeDomain"
                    },
                    "description": "A set of Domain names to serve as entry points for your Service\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`\n"
                },
                "loggingBigqueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingBigquery:ServiceComputeLoggingBigquery"
                    }
                },
                "loggingBlobstorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingBlobstorage:ServiceComputeLoggingBlobstorage"
                    }
                },
                "loggingCloudfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingCloudfile:ServiceComputeLoggingCloudfile"
                    }
                },
                "loggingDatadogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingDatadog:ServiceComputeLoggingDatadog"
                    }
                },
                "loggingDigitaloceans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingDigitalocean:ServiceComputeLoggingDigitalocean"
                    }
                },
                "loggingElasticsearches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingElasticsearch:ServiceComputeLoggingElasticsearch"
                    }
                },
                "loggingFtps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingFtp:ServiceComputeLoggingFtp"
                    }
                },
                "loggingGcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingGc:ServiceComputeLoggingGc"
                    }
                },
                "loggingGooglepubsubs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingGooglepubsub:ServiceComputeLoggingGooglepubsub"
                    }
                },
                "loggingHeroku": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingHeroku:ServiceComputeLoggingHeroku"
                    }
                },
                "loggingHoneycombs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingHoneycomb:ServiceComputeLoggingHoneycomb"
                    }
                },
                "loggingHttps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingHttp:ServiceComputeLoggingHttp"
                    }
                },
                "loggingKafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingKafka:ServiceComputeLoggingKafka"
                    }
                },
                "loggingKineses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingKinese:ServiceComputeLoggingKinese"
                    }
                },
                "loggingLogentries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingLogentry:ServiceComputeLoggingLogentry"
                    }
                },
                "loggingLogglies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingLoggly:ServiceComputeLoggingLoggly"
                    }
                },
                "loggingLogshuttles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingLogshuttle:ServiceComputeLoggingLogshuttle"
                    }
                },
                "loggingNewrelics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingNewrelic:ServiceComputeLoggingNewrelic"
                    }
                },
                "loggingOpenstacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingOpenstack:ServiceComputeLoggingOpenstack"
                    }
                },
                "loggingPapertrails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingPapertrail:ServiceComputeLoggingPapertrail"
                    }
                },
                "loggingS3s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingS3:ServiceComputeLoggingS3"
                    }
                },
                "loggingScalyrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingScalyr:ServiceComputeLoggingScalyr"
                    }
                },
                "loggingSftps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingSftp:ServiceComputeLoggingSftp"
                    }
                },
                "loggingSplunks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingSplunk:ServiceComputeLoggingSplunk"
                    }
                },
                "loggingSumologics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingSumologic:ServiceComputeLoggingSumologic"
                    }
                },
                "loggingSyslogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeLoggingSyslog:ServiceComputeLoggingSyslog"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The unique name for the Service to create\n"
                },
                "package": {
                    "$ref": "#/types/fastly:index/ServiceComputePackage:ServiceComputePackage",
                    "description": "The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute service (if omitted, ensure `activate = false` is set on `fastly.ServiceCompute` to avoid service validation errors). See Fastly's documentation on [Compute](https://developer.fastly.com/learning/compute/)\n"
                },
                "productEnablement": {
                    "$ref": "#/types/fastly:index/ServiceComputeProductEnablement:ServiceComputeProductEnablement"
                },
                "resourceLinks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceComputeResourceLink:ServiceComputeResourceLink"
                    },
                    "description": "A resource link represents a link between a shared resource (such as an KV Store or Config Store) and a service version.\n"
                },
                "reuse": {
                    "type": "boolean"
                },
                "versionComment": {
                    "type": "string",
                    "description": "Description field for the version\n"
                }
            },
            "requiredInputs": [
                "domains"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceCompute resources.\n",
                "properties": {
                    "activate": {
                        "type": "boolean",
                        "description": "Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                    },
                    "activeVersion": {
                        "type": "integer",
                        "description": "The currently active version of your Fastly Service\n"
                    },
                    "backends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeBackend:ServiceComputeBackend"
                        }
                    },
                    "clonedVersion": {
                        "type": "integer",
                        "description": "The latest cloned version by the provider\n"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "dictionaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeDictionary:ServiceComputeDictionary"
                        }
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeDomain:ServiceComputeDomain"
                        },
                        "description": "A set of Domain names to serve as entry points for your Service\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`\n"
                    },
                    "forceRefresh": {
                        "type": "boolean"
                    },
                    "imported": {
                        "type": "boolean",
                        "description": "Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished\n"
                    },
                    "loggingBigqueries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingBigquery:ServiceComputeLoggingBigquery"
                        }
                    },
                    "loggingBlobstorages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingBlobstorage:ServiceComputeLoggingBlobstorage"
                        }
                    },
                    "loggingCloudfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingCloudfile:ServiceComputeLoggingCloudfile"
                        }
                    },
                    "loggingDatadogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingDatadog:ServiceComputeLoggingDatadog"
                        }
                    },
                    "loggingDigitaloceans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingDigitalocean:ServiceComputeLoggingDigitalocean"
                        }
                    },
                    "loggingElasticsearches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingElasticsearch:ServiceComputeLoggingElasticsearch"
                        }
                    },
                    "loggingFtps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingFtp:ServiceComputeLoggingFtp"
                        }
                    },
                    "loggingGcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingGc:ServiceComputeLoggingGc"
                        }
                    },
                    "loggingGooglepubsubs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingGooglepubsub:ServiceComputeLoggingGooglepubsub"
                        }
                    },
                    "loggingHeroku": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingHeroku:ServiceComputeLoggingHeroku"
                        }
                    },
                    "loggingHoneycombs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingHoneycomb:ServiceComputeLoggingHoneycomb"
                        }
                    },
                    "loggingHttps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingHttp:ServiceComputeLoggingHttp"
                        }
                    },
                    "loggingKafkas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingKafka:ServiceComputeLoggingKafka"
                        }
                    },
                    "loggingKineses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingKinese:ServiceComputeLoggingKinese"
                        }
                    },
                    "loggingLogentries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingLogentry:ServiceComputeLoggingLogentry"
                        }
                    },
                    "loggingLogglies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingLoggly:ServiceComputeLoggingLoggly"
                        }
                    },
                    "loggingLogshuttles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingLogshuttle:ServiceComputeLoggingLogshuttle"
                        }
                    },
                    "loggingNewrelics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingNewrelic:ServiceComputeLoggingNewrelic"
                        }
                    },
                    "loggingOpenstacks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingOpenstack:ServiceComputeLoggingOpenstack"
                        }
                    },
                    "loggingPapertrails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingPapertrail:ServiceComputeLoggingPapertrail"
                        }
                    },
                    "loggingS3s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingS3:ServiceComputeLoggingS3"
                        }
                    },
                    "loggingScalyrs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingScalyr:ServiceComputeLoggingScalyr"
                        }
                    },
                    "loggingSftps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingSftp:ServiceComputeLoggingSftp"
                        }
                    },
                    "loggingSplunks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingSplunk:ServiceComputeLoggingSplunk"
                        }
                    },
                    "loggingSumologics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingSumologic:ServiceComputeLoggingSumologic"
                        }
                    },
                    "loggingSyslogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeLoggingSyslog:ServiceComputeLoggingSyslog"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name for the Service to create\n"
                    },
                    "package": {
                        "$ref": "#/types/fastly:index/ServiceComputePackage:ServiceComputePackage",
                        "description": "The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute service (if omitted, ensure `activate = false` is set on `fastly.ServiceCompute` to avoid service validation errors). See Fastly's documentation on [Compute](https://developer.fastly.com/learning/compute/)\n"
                    },
                    "productEnablement": {
                        "$ref": "#/types/fastly:index/ServiceComputeProductEnablement:ServiceComputeProductEnablement"
                    },
                    "resourceLinks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceComputeResourceLink:ServiceComputeResourceLink"
                        },
                        "description": "A resource link represents a link between a shared resource (such as an KV Store or Config Store) and a service version.\n"
                    },
                    "reuse": {
                        "type": "boolean"
                    },
                    "versionComment": {
                        "type": "string",
                        "description": "Description field for the version\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/serviceDictionaryItems:ServiceDictionaryItems": {
            "description": "\n\n## Import\n\nThis is an example of the import command being applied to the resource named `fastly_service_dictionary_items.items`\n\nThe resource ID is a combined value of the `service_id` and `dictionary_id` separated by a forward slash.\n\n```sh\n$ pulumi import fastly:index/serviceDictionaryItems:ServiceDictionaryItems items xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx\n```\n\nIf Terraform is already managing remote dictionary items against a resource being imported then the user will be asked to remove it from the existing Terraform state.\n\nThe following is an example of the Terraform state command to remove the resource named `fastly_service_dictionary_items.items` from the Terraform state file.\n\n$ terraform state rm fastly_service_dictionary_items.items\n\n",
            "properties": {
                "dictionaryId": {
                    "type": "string",
                    "description": "The ID of the dictionary that the items belong to\n"
                },
                "items": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map representing an entry in the dictionary, (key/value)\n"
                },
                "manageItems": {
                    "type": "boolean",
                    "description": "Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service that the dictionary belongs to\n"
                }
            },
            "required": [
                "dictionaryId",
                "serviceId"
            ],
            "inputProperties": {
                "dictionaryId": {
                    "type": "string",
                    "description": "The ID of the dictionary that the items belong to\n",
                    "willReplaceOnChanges": true
                },
                "items": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map representing an entry in the dictionary, (key/value)\n"
                },
                "manageItems": {
                    "type": "boolean",
                    "description": "Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service that the dictionary belongs to\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "dictionaryId",
                "serviceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceDictionaryItems resources.\n",
                "properties": {
                    "dictionaryId": {
                        "type": "string",
                        "description": "The ID of the dictionary that the items belong to\n",
                        "willReplaceOnChanges": true
                    },
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map representing an entry in the dictionary, (key/value)\n"
                    },
                    "manageItems": {
                        "type": "boolean",
                        "description": "Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service that the dictionary belongs to\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent": {
            "description": "\n\n## Import\n\nThis is an example of the import command being applied to the resource named `fastly_service_dynamic_snippet_content.content`\n\nThe resource ID is a combined value of the `service_id` and `snippet_id` separated by a forward slash.\n\n```sh\n$ pulumi import fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent content xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx\n```\n\nIf Terraform is already managing remote content against a resource being imported then the user will be asked to remove it from the existing Terraform state.\n\nThe following is an example of the Terraform state command to remove the resource named `fastly_service_dynamic_snippet_content.content` from the Terraform state file.\n\n$ terraform state rm fastly_service_dynamic_snippet_content.content\n\n",
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The VCL code that specifies exactly what the snippet does\n"
                },
                "manageSnippets": {
                    "type": "boolean",
                    "description": "Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service that the dynamic snippet belongs to\n"
                },
                "snippetId": {
                    "type": "string",
                    "description": "The ID of the dynamic snippet that the content belong to\n"
                }
            },
            "required": [
                "content",
                "serviceId",
                "snippetId"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "The VCL code that specifies exactly what the snippet does\n"
                },
                "manageSnippets": {
                    "type": "boolean",
                    "description": "Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally\n"
                },
                "serviceId": {
                    "type": "string",
                    "description": "The ID of the service that the dynamic snippet belongs to\n"
                },
                "snippetId": {
                    "type": "string",
                    "description": "The ID of the dynamic snippet that the content belong to\n"
                }
            },
            "requiredInputs": [
                "content",
                "serviceId",
                "snippetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceDynamicSnippetContent resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The VCL code that specifies exactly what the snippet does\n"
                    },
                    "manageSnippets": {
                        "type": "boolean",
                        "description": "Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally\n"
                    },
                    "serviceId": {
                        "type": "string",
                        "description": "The ID of the service that the dynamic snippet belongs to\n"
                    },
                    "snippetId": {
                        "type": "string",
                        "description": "The ID of the dynamic snippet that the content belong to\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/serviceVcl:ServiceVcl": {
            "description": "\n\n## Import\n\nFastly Services can be imported using their service ID, e.g.\n\n```sh\n$ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx\n```\n\nBy default, either the active version will be imported, or the latest version if no version is active.\n\nAlternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.\n\n```sh\n$ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2\n```\n\n",
            "properties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclAcl:ServiceVclAcl"
                    }
                },
                "activate": {
                    "type": "boolean",
                    "description": "Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                },
                "activeVersion": {
                    "type": "integer",
                    "description": "The currently active version of your Fastly Service\n"
                },
                "backends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclBackend:ServiceVclBackend"
                    }
                },
                "cacheSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclCacheSetting:ServiceVclCacheSetting"
                    }
                },
                "clonedVersion": {
                    "type": "integer",
                    "description": "The latest cloned version by the provider\n"
                },
                "comment": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclCondition:ServiceVclCondition"
                    }
                },
                "defaultHost": {
                    "type": "string",
                    "description": "The default hostname\n"
                },
                "defaultTtl": {
                    "type": "integer",
                    "description": "The default Time-to-live (TTL) for requests\n"
                },
                "dictionaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclDictionary:ServiceVclDictionary"
                    }
                },
                "directors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclDirector:ServiceVclDirector"
                    }
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclDomain:ServiceVclDomain"
                    },
                    "description": "A set of Domain names to serve as entry points for your Service\n"
                },
                "dynamicsnippets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclDynamicsnippet:ServiceVclDynamicsnippet"
                    }
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`\n"
                },
                "forceRefresh": {
                    "type": "boolean"
                },
                "gzips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclGzip:ServiceVclGzip"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclHeader:ServiceVclHeader"
                    }
                },
                "healthchecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclHealthcheck:ServiceVclHealthcheck"
                    }
                },
                "http3": {
                    "type": "boolean",
                    "description": "Enables support for the HTTP/3 (QUIC) protocol\n"
                },
                "imported": {
                    "type": "boolean",
                    "description": "Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished\n"
                },
                "loggingBigqueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingBigquery:ServiceVclLoggingBigquery"
                    }
                },
                "loggingBlobstorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingBlobstorage:ServiceVclLoggingBlobstorage"
                    }
                },
                "loggingCloudfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingCloudfile:ServiceVclLoggingCloudfile"
                    }
                },
                "loggingDatadogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingDatadog:ServiceVclLoggingDatadog"
                    }
                },
                "loggingDigitaloceans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingDigitalocean:ServiceVclLoggingDigitalocean"
                    }
                },
                "loggingElasticsearches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingElasticsearch:ServiceVclLoggingElasticsearch"
                    }
                },
                "loggingFtps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingFtp:ServiceVclLoggingFtp"
                    }
                },
                "loggingGcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingGc:ServiceVclLoggingGc"
                    }
                },
                "loggingGooglepubsubs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingGooglepubsub:ServiceVclLoggingGooglepubsub"
                    }
                },
                "loggingHerokus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingHerokus:ServiceVclLoggingHerokus"
                    }
                },
                "loggingHoneycombs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingHoneycomb:ServiceVclLoggingHoneycomb"
                    }
                },
                "loggingHttps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingHttp:ServiceVclLoggingHttp"
                    }
                },
                "loggingKafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingKafka:ServiceVclLoggingKafka"
                    }
                },
                "loggingKineses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingKinese:ServiceVclLoggingKinese"
                    }
                },
                "loggingLogentries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingLogentry:ServiceVclLoggingLogentry"
                    }
                },
                "loggingLogglies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingLoggly:ServiceVclLoggingLoggly"
                    }
                },
                "loggingLogshuttles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingLogshuttle:ServiceVclLoggingLogshuttle"
                    }
                },
                "loggingNewrelicotlps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingNewrelicotlp:ServiceVclLoggingNewrelicotlp"
                    }
                },
                "loggingNewrelics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingNewrelic:ServiceVclLoggingNewrelic"
                    }
                },
                "loggingOpenstacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingOpenstack:ServiceVclLoggingOpenstack"
                    }
                },
                "loggingPapertrails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingPapertrail:ServiceVclLoggingPapertrail"
                    }
                },
                "loggingS3s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingS3:ServiceVclLoggingS3"
                    }
                },
                "loggingScalyrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingScalyr:ServiceVclLoggingScalyr"
                    }
                },
                "loggingSftps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingSftp:ServiceVclLoggingSftp"
                    }
                },
                "loggingSplunks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingSplunk:ServiceVclLoggingSplunk"
                    }
                },
                "loggingSumologics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingSumologic:ServiceVclLoggingSumologic"
                    }
                },
                "loggingSyslogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingSyslog:ServiceVclLoggingSyslog"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The unique name for the Service to create\n"
                },
                "productEnablement": {
                    "$ref": "#/types/fastly:index/ServiceVclProductEnablement:ServiceVclProductEnablement"
                },
                "rateLimiters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclRateLimiter:ServiceVclRateLimiter"
                    }
                },
                "requestSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclRequestSetting:ServiceVclRequestSetting"
                    }
                },
                "responseObjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclResponseObject:ServiceVclResponseObject"
                    }
                },
                "reuse": {
                    "type": "boolean"
                },
                "snippets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclSnippet:ServiceVclSnippet"
                    }
                },
                "staleIfError": {
                    "type": "boolean",
                    "description": "Enables serving a stale object if there is an error\n"
                },
                "staleIfErrorTtl": {
                    "type": "integer",
                    "description": "The default time-to-live (TTL) for serving the stale object for the version\n"
                },
                "vcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclVcl:ServiceVclVcl"
                    }
                },
                "versionComment": {
                    "type": "string",
                    "description": "Description field for the version\n"
                },
                "waf": {
                    "$ref": "#/types/fastly:index/ServiceVclWaf:ServiceVclWaf"
                }
            },
            "required": [
                "activeVersion",
                "clonedVersion",
                "domains",
                "forceRefresh",
                "imported",
                "name"
            ],
            "inputProperties": {
                "acls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclAcl:ServiceVclAcl"
                    }
                },
                "activate": {
                    "type": "boolean",
                    "description": "Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                },
                "backends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclBackend:ServiceVclBackend"
                    }
                },
                "cacheSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclCacheSetting:ServiceVclCacheSetting"
                    }
                },
                "comment": {
                    "type": "string"
                },
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclCondition:ServiceVclCondition"
                    }
                },
                "defaultHost": {
                    "type": "string",
                    "description": "The default hostname\n"
                },
                "defaultTtl": {
                    "type": "integer",
                    "description": "The default Time-to-live (TTL) for requests\n"
                },
                "dictionaries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclDictionary:ServiceVclDictionary"
                    }
                },
                "directors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclDirector:ServiceVclDirector"
                    }
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclDomain:ServiceVclDomain"
                    },
                    "description": "A set of Domain names to serve as entry points for your Service\n"
                },
                "dynamicsnippets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclDynamicsnippet:ServiceVclDynamicsnippet"
                    }
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`\n"
                },
                "gzips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclGzip:ServiceVclGzip"
                    }
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclHeader:ServiceVclHeader"
                    }
                },
                "healthchecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclHealthcheck:ServiceVclHealthcheck"
                    }
                },
                "http3": {
                    "type": "boolean",
                    "description": "Enables support for the HTTP/3 (QUIC) protocol\n"
                },
                "loggingBigqueries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingBigquery:ServiceVclLoggingBigquery"
                    }
                },
                "loggingBlobstorages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingBlobstorage:ServiceVclLoggingBlobstorage"
                    }
                },
                "loggingCloudfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingCloudfile:ServiceVclLoggingCloudfile"
                    }
                },
                "loggingDatadogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingDatadog:ServiceVclLoggingDatadog"
                    }
                },
                "loggingDigitaloceans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingDigitalocean:ServiceVclLoggingDigitalocean"
                    }
                },
                "loggingElasticsearches": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingElasticsearch:ServiceVclLoggingElasticsearch"
                    }
                },
                "loggingFtps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingFtp:ServiceVclLoggingFtp"
                    }
                },
                "loggingGcs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingGc:ServiceVclLoggingGc"
                    }
                },
                "loggingGooglepubsubs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingGooglepubsub:ServiceVclLoggingGooglepubsub"
                    }
                },
                "loggingHerokus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingHerokus:ServiceVclLoggingHerokus"
                    }
                },
                "loggingHoneycombs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingHoneycomb:ServiceVclLoggingHoneycomb"
                    }
                },
                "loggingHttps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingHttp:ServiceVclLoggingHttp"
                    }
                },
                "loggingKafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingKafka:ServiceVclLoggingKafka"
                    }
                },
                "loggingKineses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingKinese:ServiceVclLoggingKinese"
                    }
                },
                "loggingLogentries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingLogentry:ServiceVclLoggingLogentry"
                    }
                },
                "loggingLogglies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingLoggly:ServiceVclLoggingLoggly"
                    }
                },
                "loggingLogshuttles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingLogshuttle:ServiceVclLoggingLogshuttle"
                    }
                },
                "loggingNewrelicotlps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingNewrelicotlp:ServiceVclLoggingNewrelicotlp"
                    }
                },
                "loggingNewrelics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingNewrelic:ServiceVclLoggingNewrelic"
                    }
                },
                "loggingOpenstacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingOpenstack:ServiceVclLoggingOpenstack"
                    }
                },
                "loggingPapertrails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingPapertrail:ServiceVclLoggingPapertrail"
                    }
                },
                "loggingS3s": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingS3:ServiceVclLoggingS3"
                    }
                },
                "loggingScalyrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingScalyr:ServiceVclLoggingScalyr"
                    }
                },
                "loggingSftps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingSftp:ServiceVclLoggingSftp"
                    }
                },
                "loggingSplunks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingSplunk:ServiceVclLoggingSplunk"
                    }
                },
                "loggingSumologics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingSumologic:ServiceVclLoggingSumologic"
                    }
                },
                "loggingSyslogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclLoggingSyslog:ServiceVclLoggingSyslog"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The unique name for the Service to create\n"
                },
                "productEnablement": {
                    "$ref": "#/types/fastly:index/ServiceVclProductEnablement:ServiceVclProductEnablement"
                },
                "rateLimiters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclRateLimiter:ServiceVclRateLimiter"
                    }
                },
                "requestSettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclRequestSetting:ServiceVclRequestSetting"
                    }
                },
                "responseObjects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclResponseObject:ServiceVclResponseObject"
                    }
                },
                "reuse": {
                    "type": "boolean"
                },
                "snippets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclSnippet:ServiceVclSnippet"
                    }
                },
                "staleIfError": {
                    "type": "boolean",
                    "description": "Enables serving a stale object if there is an error\n"
                },
                "staleIfErrorTtl": {
                    "type": "integer",
                    "description": "The default time-to-live (TTL) for serving the stale object for the version\n"
                },
                "vcls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceVclVcl:ServiceVclVcl"
                    }
                },
                "versionComment": {
                    "type": "string",
                    "description": "Description field for the version\n"
                },
                "waf": {
                    "$ref": "#/types/fastly:index/ServiceVclWaf:ServiceVclWaf"
                }
            },
            "requiredInputs": [
                "domains"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceVcl resources.\n",
                "properties": {
                    "acls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclAcl:ServiceVclAcl"
                        }
                    },
                    "activate": {
                        "type": "boolean",
                        "description": "Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                    },
                    "activeVersion": {
                        "type": "integer",
                        "description": "The currently active version of your Fastly Service\n"
                    },
                    "backends": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclBackend:ServiceVclBackend"
                        }
                    },
                    "cacheSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclCacheSetting:ServiceVclCacheSetting"
                        }
                    },
                    "clonedVersion": {
                        "type": "integer",
                        "description": "The latest cloned version by the provider\n"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "conditions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclCondition:ServiceVclCondition"
                        }
                    },
                    "defaultHost": {
                        "type": "string",
                        "description": "The default hostname\n"
                    },
                    "defaultTtl": {
                        "type": "integer",
                        "description": "The default Time-to-live (TTL) for requests\n"
                    },
                    "dictionaries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclDictionary:ServiceVclDictionary"
                        }
                    },
                    "directors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclDirector:ServiceVclDirector"
                        }
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclDomain:ServiceVclDomain"
                        },
                        "description": "A set of Domain names to serve as entry points for your Service\n"
                    },
                    "dynamicsnippets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclDynamicsnippet:ServiceVclDynamicsnippet"
                        }
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`\n"
                    },
                    "forceRefresh": {
                        "type": "boolean"
                    },
                    "gzips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclGzip:ServiceVclGzip"
                        }
                    },
                    "headers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclHeader:ServiceVclHeader"
                        }
                    },
                    "healthchecks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclHealthcheck:ServiceVclHealthcheck"
                        }
                    },
                    "http3": {
                        "type": "boolean",
                        "description": "Enables support for the HTTP/3 (QUIC) protocol\n"
                    },
                    "imported": {
                        "type": "boolean",
                        "description": "Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished\n"
                    },
                    "loggingBigqueries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingBigquery:ServiceVclLoggingBigquery"
                        }
                    },
                    "loggingBlobstorages": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingBlobstorage:ServiceVclLoggingBlobstorage"
                        }
                    },
                    "loggingCloudfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingCloudfile:ServiceVclLoggingCloudfile"
                        }
                    },
                    "loggingDatadogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingDatadog:ServiceVclLoggingDatadog"
                        }
                    },
                    "loggingDigitaloceans": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingDigitalocean:ServiceVclLoggingDigitalocean"
                        }
                    },
                    "loggingElasticsearches": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingElasticsearch:ServiceVclLoggingElasticsearch"
                        }
                    },
                    "loggingFtps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingFtp:ServiceVclLoggingFtp"
                        }
                    },
                    "loggingGcs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingGc:ServiceVclLoggingGc"
                        }
                    },
                    "loggingGooglepubsubs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingGooglepubsub:ServiceVclLoggingGooglepubsub"
                        }
                    },
                    "loggingHerokus": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingHerokus:ServiceVclLoggingHerokus"
                        }
                    },
                    "loggingHoneycombs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingHoneycomb:ServiceVclLoggingHoneycomb"
                        }
                    },
                    "loggingHttps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingHttp:ServiceVclLoggingHttp"
                        }
                    },
                    "loggingKafkas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingKafka:ServiceVclLoggingKafka"
                        }
                    },
                    "loggingKineses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingKinese:ServiceVclLoggingKinese"
                        }
                    },
                    "loggingLogentries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingLogentry:ServiceVclLoggingLogentry"
                        }
                    },
                    "loggingLogglies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingLoggly:ServiceVclLoggingLoggly"
                        }
                    },
                    "loggingLogshuttles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingLogshuttle:ServiceVclLoggingLogshuttle"
                        }
                    },
                    "loggingNewrelicotlps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingNewrelicotlp:ServiceVclLoggingNewrelicotlp"
                        }
                    },
                    "loggingNewrelics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingNewrelic:ServiceVclLoggingNewrelic"
                        }
                    },
                    "loggingOpenstacks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingOpenstack:ServiceVclLoggingOpenstack"
                        }
                    },
                    "loggingPapertrails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingPapertrail:ServiceVclLoggingPapertrail"
                        }
                    },
                    "loggingS3s": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingS3:ServiceVclLoggingS3"
                        }
                    },
                    "loggingScalyrs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingScalyr:ServiceVclLoggingScalyr"
                        }
                    },
                    "loggingSftps": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingSftp:ServiceVclLoggingSftp"
                        }
                    },
                    "loggingSplunks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingSplunk:ServiceVclLoggingSplunk"
                        }
                    },
                    "loggingSumologics": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingSumologic:ServiceVclLoggingSumologic"
                        }
                    },
                    "loggingSyslogs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclLoggingSyslog:ServiceVclLoggingSyslog"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The unique name for the Service to create\n"
                    },
                    "productEnablement": {
                        "$ref": "#/types/fastly:index/ServiceVclProductEnablement:ServiceVclProductEnablement"
                    },
                    "rateLimiters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclRateLimiter:ServiceVclRateLimiter"
                        }
                    },
                    "requestSettings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclRequestSetting:ServiceVclRequestSetting"
                        }
                    },
                    "responseObjects": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclResponseObject:ServiceVclResponseObject"
                        }
                    },
                    "reuse": {
                        "type": "boolean"
                    },
                    "snippets": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclSnippet:ServiceVclSnippet"
                        }
                    },
                    "staleIfError": {
                        "type": "boolean",
                        "description": "Enables serving a stale object if there is an error\n"
                    },
                    "staleIfErrorTtl": {
                        "type": "integer",
                        "description": "The default time-to-live (TTL) for serving the stale object for the version\n"
                    },
                    "vcls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceVclVcl:ServiceVclVcl"
                        }
                    },
                    "versionComment": {
                        "type": "string",
                        "description": "Description field for the version\n"
                    },
                    "waf": {
                        "$ref": "#/types/fastly:index/ServiceVclWaf:ServiceVclWaf"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/serviceWafConfiguration:ServiceWafConfiguration": {
            "description": "Defines a set of Web Application Firewall configuration options that can be used to populate a service WAF. This resource will configure rules, thresholds and other settings for a WAF.\n\n\n\u003e **Warning:** This provider will take precedence over any changes you make in the UI or API. Such changes are likely to be reversed if you run the provider again.\n\n\n## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst demo = new fastly.ServiceVcl(\"demo\", {\n    name: \"demofastly\",\n    domains: [{\n        name: \"example.com\",\n        comment: \"demo\",\n    }],\n    backends: [{\n        address: \"127.0.0.1\",\n        name: \"origin1\",\n        port: 80,\n    }],\n    conditions: [\n        {\n            name: \"WAF_Prefetch\",\n            type: \"PREFETCH\",\n            statement: \"req.backend.is_origin\",\n        },\n        {\n            name: \"WAF_always_false\",\n            statement: \"false\",\n            type: \"REQUEST\",\n        },\n    ],\n    responseObjects: [{\n        name: \"WAF_Response\",\n        status: 403,\n        response: \"Forbidden\",\n        contentType: \"text/html\",\n        content: \"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n        requestCondition: \"WAF_always_false\",\n    }],\n    waf: {\n        prefetchCondition: \"WAF_Prefetch\",\n        responseObject: \"WAF_Response\",\n    },\n    forceDestroy: true,\n});\nconst waf = new fastly.ServiceWafConfiguration(\"waf\", {\n    wafId: demo.waf.apply(waf =\u003e waf?.wafId),\n    httpViolationScoreThreshold: 100,\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndemo = fastly.ServiceVcl(\"demo\",\n    name=\"demofastly\",\n    domains=[fastly.ServiceVclDomainArgs(\n        name=\"example.com\",\n        comment=\"demo\",\n    )],\n    backends=[fastly.ServiceVclBackendArgs(\n        address=\"127.0.0.1\",\n        name=\"origin1\",\n        port=80,\n    )],\n    conditions=[\n        fastly.ServiceVclConditionArgs(\n            name=\"WAF_Prefetch\",\n            type=\"PREFETCH\",\n            statement=\"req.backend.is_origin\",\n        ),\n        fastly.ServiceVclConditionArgs(\n            name=\"WAF_always_false\",\n            statement=\"false\",\n            type=\"REQUEST\",\n        ),\n    ],\n    response_objects=[fastly.ServiceVclResponseObjectArgs(\n        name=\"WAF_Response\",\n        status=403,\n        response=\"Forbidden\",\n        content_type=\"text/html\",\n        content=\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n        request_condition=\"WAF_always_false\",\n    )],\n    waf=fastly.ServiceVclWafArgs(\n        prefetch_condition=\"WAF_Prefetch\",\n        response_object=\"WAF_Response\",\n    ),\n    force_destroy=True)\nwaf = fastly.ServiceWafConfiguration(\"waf\",\n    waf_id=demo.waf.waf_id,\n    http_violation_score_threshold=100)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = new Fastly.ServiceVcl(\"demo\", new()\n    {\n        Name = \"demofastly\",\n        Domains = new[]\n        {\n            new Fastly.Inputs.ServiceVclDomainArgs\n            {\n                Name = \"example.com\",\n                Comment = \"demo\",\n            },\n        },\n        Backends = new[]\n        {\n            new Fastly.Inputs.ServiceVclBackendArgs\n            {\n                Address = \"127.0.0.1\",\n                Name = \"origin1\",\n                Port = 80,\n            },\n        },\n        Conditions = new[]\n        {\n            new Fastly.Inputs.ServiceVclConditionArgs\n            {\n                Name = \"WAF_Prefetch\",\n                Type = \"PREFETCH\",\n                Statement = \"req.backend.is_origin\",\n            },\n            new Fastly.Inputs.ServiceVclConditionArgs\n            {\n                Name = \"WAF_always_false\",\n                Statement = \"false\",\n                Type = \"REQUEST\",\n            },\n        },\n        ResponseObjects = new[]\n        {\n            new Fastly.Inputs.ServiceVclResponseObjectArgs\n            {\n                Name = \"WAF_Response\",\n                Status = 403,\n                Response = \"Forbidden\",\n                ContentType = \"text/html\",\n                Content = \"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n                RequestCondition = \"WAF_always_false\",\n            },\n        },\n        Waf = new Fastly.Inputs.ServiceVclWafArgs\n        {\n            PrefetchCondition = \"WAF_Prefetch\",\n            ResponseObject = \"WAF_Response\",\n        },\n        ForceDestroy = true,\n    });\n\n    var waf = new Fastly.ServiceWafConfiguration(\"waf\", new()\n    {\n        WafId = demo.Waf.Apply(waf =\u003e waf?.WafId),\n        HttpViolationScoreThreshold = 100,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemo, err := fastly.NewServiceVcl(ctx, \"demo\", \u0026fastly.ServiceVclArgs{\n\t\t\tName: pulumi.String(\"demofastly\"),\n\t\t\tDomains: fastly.ServiceVclDomainArray{\n\t\t\t\t\u0026fastly.ServiceVclDomainArgs{\n\t\t\t\t\tName:    pulumi.String(\"example.com\"),\n\t\t\t\t\tComment: pulumi.String(\"demo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBackends: fastly.ServiceVclBackendArray{\n\t\t\t\t\u0026fastly.ServiceVclBackendArgs{\n\t\t\t\t\tAddress: pulumi.String(\"127.0.0.1\"),\n\t\t\t\t\tName:    pulumi.String(\"origin1\"),\n\t\t\t\t\tPort:    pulumi.Int(80),\n\t\t\t\t},\n\t\t\t},\n\t\t\tConditions: fastly.ServiceVclConditionArray{\n\t\t\t\t\u0026fastly.ServiceVclConditionArgs{\n\t\t\t\t\tName:      pulumi.String(\"WAF_Prefetch\"),\n\t\t\t\t\tType:      pulumi.String(\"PREFETCH\"),\n\t\t\t\t\tStatement: pulumi.String(\"req.backend.is_origin\"),\n\t\t\t\t},\n\t\t\t\t\u0026fastly.ServiceVclConditionArgs{\n\t\t\t\t\tName:      pulumi.String(\"WAF_always_false\"),\n\t\t\t\t\tStatement: pulumi.String(\"false\"),\n\t\t\t\t\tType:      pulumi.String(\"REQUEST\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResponseObjects: fastly.ServiceVclResponseObjectArray{\n\t\t\t\t\u0026fastly.ServiceVclResponseObjectArgs{\n\t\t\t\t\tName:             pulumi.String(\"WAF_Response\"),\n\t\t\t\t\tStatus:           pulumi.Int(403),\n\t\t\t\t\tResponse:         pulumi.String(\"Forbidden\"),\n\t\t\t\t\tContentType:      pulumi.String(\"text/html\"),\n\t\t\t\t\tContent:          pulumi.String(\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\t\t\tRequestCondition: pulumi.String(\"WAF_always_false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tWaf: \u0026fastly.ServiceVclWafArgs{\n\t\t\t\tPrefetchCondition: pulumi.String(\"WAF_Prefetch\"),\n\t\t\t\tResponseObject:    pulumi.String(\"WAF_Response\"),\n\t\t\t},\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewServiceWafConfiguration(ctx, \"waf\", \u0026fastly.ServiceWafConfigurationArgs{\n\t\t\tWafId: demo.Waf.ApplyT(func(waf fastly.ServiceVclWaf) (*string, error) {\n\t\t\t\treturn \u0026waf.WafId, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tHttpViolationScoreThreshold: pulumi.Int(100),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.ServiceVcl;\nimport com.pulumi.fastly.ServiceVclArgs;\nimport com.pulumi.fastly.inputs.ServiceVclDomainArgs;\nimport com.pulumi.fastly.inputs.ServiceVclBackendArgs;\nimport com.pulumi.fastly.inputs.ServiceVclConditionArgs;\nimport com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;\nimport com.pulumi.fastly.inputs.ServiceVclWafArgs;\nimport com.pulumi.fastly.ServiceWafConfiguration;\nimport com.pulumi.fastly.ServiceWafConfigurationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var demo = new ServiceVcl(\"demo\", ServiceVclArgs.builder()        \n            .name(\"demofastly\")\n            .domains(ServiceVclDomainArgs.builder()\n                .name(\"example.com\")\n                .comment(\"demo\")\n                .build())\n            .backends(ServiceVclBackendArgs.builder()\n                .address(\"127.0.0.1\")\n                .name(\"origin1\")\n                .port(80)\n                .build())\n            .conditions(            \n                ServiceVclConditionArgs.builder()\n                    .name(\"WAF_Prefetch\")\n                    .type(\"PREFETCH\")\n                    .statement(\"req.backend.is_origin\")\n                    .build(),\n                ServiceVclConditionArgs.builder()\n                    .name(\"WAF_always_false\")\n                    .statement(\"false\")\n                    .type(\"REQUEST\")\n                    .build())\n            .responseObjects(ServiceVclResponseObjectArgs.builder()\n                .name(\"WAF_Response\")\n                .status(\"403\")\n                .response(\"Forbidden\")\n                .contentType(\"text/html\")\n                .content(\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\")\n                .requestCondition(\"WAF_always_false\")\n                .build())\n            .waf(ServiceVclWafArgs.builder()\n                .prefetchCondition(\"WAF_Prefetch\")\n                .responseObject(\"WAF_Response\")\n                .build())\n            .forceDestroy(true)\n            .build());\n\n        var waf = new ServiceWafConfiguration(\"waf\", ServiceWafConfigurationArgs.builder()        \n            .wafId(demo.waf().applyValue(waf -\u003e waf.wafId()))\n            .httpViolationScoreThreshold(100)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo:\n    type: fastly:ServiceVcl\n    properties:\n      name: demofastly\n      domains:\n        - name: example.com\n          comment: demo\n      backends:\n        - address: 127.0.0.1\n          name: origin1\n          port: 80\n      conditions:\n        - name: WAF_Prefetch\n          type: PREFETCH\n          statement: req.backend.is_origin\n        - name: WAF_always_false\n          statement: 'false'\n          type: REQUEST\n      responseObjects:\n        - name: WAF_Response\n          status: '403'\n          response: Forbidden\n          contentType: text/html\n          content: \u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\n          requestCondition: WAF_always_false\n      waf:\n        prefetchCondition: WAF_Prefetch\n        responseObject: WAF_Response\n      forceDestroy: true\n  waf:\n    type: fastly:ServiceWafConfiguration\n    properties:\n      wafId: ${demo.waf.wafId}\n      httpViolationScoreThreshold: 100\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nUsage with rules:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst demo = new fastly.ServiceVcl(\"demo\", {\n    name: \"demofastly\",\n    domains: [{\n        name: \"example.com\",\n        comment: \"demo\",\n    }],\n    backends: [{\n        address: \"127.0.0.1\",\n        name: \"origin1\",\n        port: 80,\n    }],\n    conditions: [\n        {\n            name: \"WAF_Prefetch\",\n            type: \"PREFETCH\",\n            statement: \"req.backend.is_origin\",\n        },\n        {\n            name: \"WAF_always_false\",\n            statement: \"false\",\n            type: \"REQUEST\",\n        },\n    ],\n    responseObjects: [{\n        name: \"WAF_Response\",\n        status: 403,\n        response: \"Forbidden\",\n        contentType: \"text/html\",\n        content: \"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n        requestCondition: \"WAF_always_false\",\n    }],\n    waf: {\n        prefetchCondition: \"WAF_Prefetch\",\n        responseObject: \"WAF_Response\",\n    },\n    forceDestroy: true,\n});\nconst waf = new fastly.ServiceWafConfiguration(\"waf\", {\n    wafId: demo.waf.apply(waf =\u003e waf?.wafId),\n    httpViolationScoreThreshold: 100,\n    rules: [{\n        modsecRuleId: 1010090,\n        revision: 1,\n        status: \"log\",\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndemo = fastly.ServiceVcl(\"demo\",\n    name=\"demofastly\",\n    domains=[fastly.ServiceVclDomainArgs(\n        name=\"example.com\",\n        comment=\"demo\",\n    )],\n    backends=[fastly.ServiceVclBackendArgs(\n        address=\"127.0.0.1\",\n        name=\"origin1\",\n        port=80,\n    )],\n    conditions=[\n        fastly.ServiceVclConditionArgs(\n            name=\"WAF_Prefetch\",\n            type=\"PREFETCH\",\n            statement=\"req.backend.is_origin\",\n        ),\n        fastly.ServiceVclConditionArgs(\n            name=\"WAF_always_false\",\n            statement=\"false\",\n            type=\"REQUEST\",\n        ),\n    ],\n    response_objects=[fastly.ServiceVclResponseObjectArgs(\n        name=\"WAF_Response\",\n        status=403,\n        response=\"Forbidden\",\n        content_type=\"text/html\",\n        content=\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n        request_condition=\"WAF_always_false\",\n    )],\n    waf=fastly.ServiceVclWafArgs(\n        prefetch_condition=\"WAF_Prefetch\",\n        response_object=\"WAF_Response\",\n    ),\n    force_destroy=True)\nwaf = fastly.ServiceWafConfiguration(\"waf\",\n    waf_id=demo.waf.waf_id,\n    http_violation_score_threshold=100,\n    rules=[fastly.ServiceWafConfigurationRuleArgs(\n        modsec_rule_id=1010090,\n        revision=1,\n        status=\"log\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = new Fastly.ServiceVcl(\"demo\", new()\n    {\n        Name = \"demofastly\",\n        Domains = new[]\n        {\n            new Fastly.Inputs.ServiceVclDomainArgs\n            {\n                Name = \"example.com\",\n                Comment = \"demo\",\n            },\n        },\n        Backends = new[]\n        {\n            new Fastly.Inputs.ServiceVclBackendArgs\n            {\n                Address = \"127.0.0.1\",\n                Name = \"origin1\",\n                Port = 80,\n            },\n        },\n        Conditions = new[]\n        {\n            new Fastly.Inputs.ServiceVclConditionArgs\n            {\n                Name = \"WAF_Prefetch\",\n                Type = \"PREFETCH\",\n                Statement = \"req.backend.is_origin\",\n            },\n            new Fastly.Inputs.ServiceVclConditionArgs\n            {\n                Name = \"WAF_always_false\",\n                Statement = \"false\",\n                Type = \"REQUEST\",\n            },\n        },\n        ResponseObjects = new[]\n        {\n            new Fastly.Inputs.ServiceVclResponseObjectArgs\n            {\n                Name = \"WAF_Response\",\n                Status = 403,\n                Response = \"Forbidden\",\n                ContentType = \"text/html\",\n                Content = \"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n                RequestCondition = \"WAF_always_false\",\n            },\n        },\n        Waf = new Fastly.Inputs.ServiceVclWafArgs\n        {\n            PrefetchCondition = \"WAF_Prefetch\",\n            ResponseObject = \"WAF_Response\",\n        },\n        ForceDestroy = true,\n    });\n\n    var waf = new Fastly.ServiceWafConfiguration(\"waf\", new()\n    {\n        WafId = demo.Waf.Apply(waf =\u003e waf?.WafId),\n        HttpViolationScoreThreshold = 100,\n        Rules = new[]\n        {\n            new Fastly.Inputs.ServiceWafConfigurationRuleArgs\n            {\n                ModsecRuleId = 1010090,\n                Revision = 1,\n                Status = \"log\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemo, err := fastly.NewServiceVcl(ctx, \"demo\", \u0026fastly.ServiceVclArgs{\n\t\t\tName: pulumi.String(\"demofastly\"),\n\t\t\tDomains: fastly.ServiceVclDomainArray{\n\t\t\t\t\u0026fastly.ServiceVclDomainArgs{\n\t\t\t\t\tName:    pulumi.String(\"example.com\"),\n\t\t\t\t\tComment: pulumi.String(\"demo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBackends: fastly.ServiceVclBackendArray{\n\t\t\t\t\u0026fastly.ServiceVclBackendArgs{\n\t\t\t\t\tAddress: pulumi.String(\"127.0.0.1\"),\n\t\t\t\t\tName:    pulumi.String(\"origin1\"),\n\t\t\t\t\tPort:    pulumi.Int(80),\n\t\t\t\t},\n\t\t\t},\n\t\t\tConditions: fastly.ServiceVclConditionArray{\n\t\t\t\t\u0026fastly.ServiceVclConditionArgs{\n\t\t\t\t\tName:      pulumi.String(\"WAF_Prefetch\"),\n\t\t\t\t\tType:      pulumi.String(\"PREFETCH\"),\n\t\t\t\t\tStatement: pulumi.String(\"req.backend.is_origin\"),\n\t\t\t\t},\n\t\t\t\t\u0026fastly.ServiceVclConditionArgs{\n\t\t\t\t\tName:      pulumi.String(\"WAF_always_false\"),\n\t\t\t\t\tStatement: pulumi.String(\"false\"),\n\t\t\t\t\tType:      pulumi.String(\"REQUEST\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResponseObjects: fastly.ServiceVclResponseObjectArray{\n\t\t\t\t\u0026fastly.ServiceVclResponseObjectArgs{\n\t\t\t\t\tName:             pulumi.String(\"WAF_Response\"),\n\t\t\t\t\tStatus:           pulumi.Int(403),\n\t\t\t\t\tResponse:         pulumi.String(\"Forbidden\"),\n\t\t\t\t\tContentType:      pulumi.String(\"text/html\"),\n\t\t\t\t\tContent:          pulumi.String(\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\t\t\tRequestCondition: pulumi.String(\"WAF_always_false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tWaf: \u0026fastly.ServiceVclWafArgs{\n\t\t\t\tPrefetchCondition: pulumi.String(\"WAF_Prefetch\"),\n\t\t\t\tResponseObject:    pulumi.String(\"WAF_Response\"),\n\t\t\t},\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewServiceWafConfiguration(ctx, \"waf\", \u0026fastly.ServiceWafConfigurationArgs{\n\t\t\tWafId: demo.Waf.ApplyT(func(waf fastly.ServiceVclWaf) (*string, error) {\n\t\t\t\treturn \u0026waf.WafId, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tHttpViolationScoreThreshold: pulumi.Int(100),\n\t\t\tRules: fastly.ServiceWafConfigurationRuleArray{\n\t\t\t\t\u0026fastly.ServiceWafConfigurationRuleArgs{\n\t\t\t\t\tModsecRuleId: pulumi.Int(1010090),\n\t\t\t\t\tRevision:     pulumi.Int(1),\n\t\t\t\t\tStatus:       pulumi.String(\"log\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.ServiceVcl;\nimport com.pulumi.fastly.ServiceVclArgs;\nimport com.pulumi.fastly.inputs.ServiceVclDomainArgs;\nimport com.pulumi.fastly.inputs.ServiceVclBackendArgs;\nimport com.pulumi.fastly.inputs.ServiceVclConditionArgs;\nimport com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;\nimport com.pulumi.fastly.inputs.ServiceVclWafArgs;\nimport com.pulumi.fastly.ServiceWafConfiguration;\nimport com.pulumi.fastly.ServiceWafConfigurationArgs;\nimport com.pulumi.fastly.inputs.ServiceWafConfigurationRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var demo = new ServiceVcl(\"demo\", ServiceVclArgs.builder()        \n            .name(\"demofastly\")\n            .domains(ServiceVclDomainArgs.builder()\n                .name(\"example.com\")\n                .comment(\"demo\")\n                .build())\n            .backends(ServiceVclBackendArgs.builder()\n                .address(\"127.0.0.1\")\n                .name(\"origin1\")\n                .port(80)\n                .build())\n            .conditions(            \n                ServiceVclConditionArgs.builder()\n                    .name(\"WAF_Prefetch\")\n                    .type(\"PREFETCH\")\n                    .statement(\"req.backend.is_origin\")\n                    .build(),\n                ServiceVclConditionArgs.builder()\n                    .name(\"WAF_always_false\")\n                    .statement(\"false\")\n                    .type(\"REQUEST\")\n                    .build())\n            .responseObjects(ServiceVclResponseObjectArgs.builder()\n                .name(\"WAF_Response\")\n                .status(\"403\")\n                .response(\"Forbidden\")\n                .contentType(\"text/html\")\n                .content(\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\")\n                .requestCondition(\"WAF_always_false\")\n                .build())\n            .waf(ServiceVclWafArgs.builder()\n                .prefetchCondition(\"WAF_Prefetch\")\n                .responseObject(\"WAF_Response\")\n                .build())\n            .forceDestroy(true)\n            .build());\n\n        var waf = new ServiceWafConfiguration(\"waf\", ServiceWafConfigurationArgs.builder()        \n            .wafId(demo.waf().applyValue(waf -\u003e waf.wafId()))\n            .httpViolationScoreThreshold(100)\n            .rules(ServiceWafConfigurationRuleArgs.builder()\n                .modsecRuleId(1010090)\n                .revision(1)\n                .status(\"log\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo:\n    type: fastly:ServiceVcl\n    properties:\n      name: demofastly\n      domains:\n        - name: example.com\n          comment: demo\n      backends:\n        - address: 127.0.0.1\n          name: origin1\n          port: 80\n      conditions:\n        - name: WAF_Prefetch\n          type: PREFETCH\n          statement: req.backend.is_origin\n        - name: WAF_always_false\n          statement: 'false'\n          type: REQUEST\n      responseObjects:\n        - name: WAF_Response\n          status: '403'\n          response: Forbidden\n          contentType: text/html\n          content: \u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\n          requestCondition: WAF_always_false\n      waf:\n        prefetchCondition: WAF_Prefetch\n        responseObject: WAF_Response\n      forceDestroy: true\n  waf:\n    type: fastly:ServiceWafConfiguration\n    properties:\n      wafId: ${demo.waf.wafId}\n      httpViolationScoreThreshold: 100\n      rules:\n        - modsecRuleId: 1.01009e+06\n          revision: 1\n          status: log\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nUsage with rule exclusions:\n\n\u003e **Warning:** Rule exclusions are part of a **beta release**, which may be subject to breaking changes and improvements over time. For more information, see our [product and feature lifecycle](https://docs.fastly.com/products/fastly-product-lifecycle#beta) descriptions.\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst demo = new fastly.ServiceVcl(\"demo\", {\n    name: \"demofastly\",\n    domains: [{\n        name: \"example.com\",\n        comment: \"demo\",\n    }],\n    backends: [{\n        address: \"127.0.0.1\",\n        name: \"origin1\",\n        port: 80,\n    }],\n    conditions: [\n        {\n            name: \"WAF_Prefetch\",\n            type: \"PREFETCH\",\n            statement: \"req.backend.is_origin\",\n        },\n        {\n            name: \"WAF_always_false\",\n            statement: \"false\",\n            type: \"REQUEST\",\n        },\n    ],\n    responseObjects: [{\n        name: \"WAF_Response\",\n        status: 403,\n        response: \"Forbidden\",\n        contentType: \"text/html\",\n        content: \"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n        requestCondition: \"WAF_always_false\",\n    }],\n    waf: {\n        prefetchCondition: \"WAF_Prefetch\",\n        responseObject: \"WAF_Response\",\n    },\n    forceDestroy: true,\n});\nconst waf = new fastly.ServiceWafConfiguration(\"waf\", {\n    wafId: demo.waf.apply(waf =\u003e waf?.wafId),\n    httpViolationScoreThreshold: 100,\n    rules: [{\n        modsecRuleId: 2029718,\n        revision: 1,\n        status: \"log\",\n    }],\n    ruleExclusions: [{\n        name: \"index page\",\n        exclusionType: \"rule\",\n        condition: \"req.url.basename == \\\"index.html\\\"\",\n        modsecRuleIds: [2029718],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndemo = fastly.ServiceVcl(\"demo\",\n    name=\"demofastly\",\n    domains=[fastly.ServiceVclDomainArgs(\n        name=\"example.com\",\n        comment=\"demo\",\n    )],\n    backends=[fastly.ServiceVclBackendArgs(\n        address=\"127.0.0.1\",\n        name=\"origin1\",\n        port=80,\n    )],\n    conditions=[\n        fastly.ServiceVclConditionArgs(\n            name=\"WAF_Prefetch\",\n            type=\"PREFETCH\",\n            statement=\"req.backend.is_origin\",\n        ),\n        fastly.ServiceVclConditionArgs(\n            name=\"WAF_always_false\",\n            statement=\"false\",\n            type=\"REQUEST\",\n        ),\n    ],\n    response_objects=[fastly.ServiceVclResponseObjectArgs(\n        name=\"WAF_Response\",\n        status=403,\n        response=\"Forbidden\",\n        content_type=\"text/html\",\n        content=\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n        request_condition=\"WAF_always_false\",\n    )],\n    waf=fastly.ServiceVclWafArgs(\n        prefetch_condition=\"WAF_Prefetch\",\n        response_object=\"WAF_Response\",\n    ),\n    force_destroy=True)\nwaf = fastly.ServiceWafConfiguration(\"waf\",\n    waf_id=demo.waf.waf_id,\n    http_violation_score_threshold=100,\n    rules=[fastly.ServiceWafConfigurationRuleArgs(\n        modsec_rule_id=2029718,\n        revision=1,\n        status=\"log\",\n    )],\n    rule_exclusions=[fastly.ServiceWafConfigurationRuleExclusionArgs(\n        name=\"index page\",\n        exclusion_type=\"rule\",\n        condition=\"req.url.basename == \\\"index.html\\\"\",\n        modsec_rule_ids=[2029718],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = new Fastly.ServiceVcl(\"demo\", new()\n    {\n        Name = \"demofastly\",\n        Domains = new[]\n        {\n            new Fastly.Inputs.ServiceVclDomainArgs\n            {\n                Name = \"example.com\",\n                Comment = \"demo\",\n            },\n        },\n        Backends = new[]\n        {\n            new Fastly.Inputs.ServiceVclBackendArgs\n            {\n                Address = \"127.0.0.1\",\n                Name = \"origin1\",\n                Port = 80,\n            },\n        },\n        Conditions = new[]\n        {\n            new Fastly.Inputs.ServiceVclConditionArgs\n            {\n                Name = \"WAF_Prefetch\",\n                Type = \"PREFETCH\",\n                Statement = \"req.backend.is_origin\",\n            },\n            new Fastly.Inputs.ServiceVclConditionArgs\n            {\n                Name = \"WAF_always_false\",\n                Statement = \"false\",\n                Type = \"REQUEST\",\n            },\n        },\n        ResponseObjects = new[]\n        {\n            new Fastly.Inputs.ServiceVclResponseObjectArgs\n            {\n                Name = \"WAF_Response\",\n                Status = 403,\n                Response = \"Forbidden\",\n                ContentType = \"text/html\",\n                Content = \"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\",\n                RequestCondition = \"WAF_always_false\",\n            },\n        },\n        Waf = new Fastly.Inputs.ServiceVclWafArgs\n        {\n            PrefetchCondition = \"WAF_Prefetch\",\n            ResponseObject = \"WAF_Response\",\n        },\n        ForceDestroy = true,\n    });\n\n    var waf = new Fastly.ServiceWafConfiguration(\"waf\", new()\n    {\n        WafId = demo.Waf.Apply(waf =\u003e waf?.WafId),\n        HttpViolationScoreThreshold = 100,\n        Rules = new[]\n        {\n            new Fastly.Inputs.ServiceWafConfigurationRuleArgs\n            {\n                ModsecRuleId = 2029718,\n                Revision = 1,\n                Status = \"log\",\n            },\n        },\n        RuleExclusions = new[]\n        {\n            new Fastly.Inputs.ServiceWafConfigurationRuleExclusionArgs\n            {\n                Name = \"index page\",\n                ExclusionType = \"rule\",\n                Condition = \"req.url.basename == \\\"index.html\\\"\",\n                ModsecRuleIds = new[]\n                {\n                    2029718,\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemo, err := fastly.NewServiceVcl(ctx, \"demo\", \u0026fastly.ServiceVclArgs{\n\t\t\tName: pulumi.String(\"demofastly\"),\n\t\t\tDomains: fastly.ServiceVclDomainArray{\n\t\t\t\t\u0026fastly.ServiceVclDomainArgs{\n\t\t\t\t\tName:    pulumi.String(\"example.com\"),\n\t\t\t\t\tComment: pulumi.String(\"demo\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBackends: fastly.ServiceVclBackendArray{\n\t\t\t\t\u0026fastly.ServiceVclBackendArgs{\n\t\t\t\t\tAddress: pulumi.String(\"127.0.0.1\"),\n\t\t\t\t\tName:    pulumi.String(\"origin1\"),\n\t\t\t\t\tPort:    pulumi.Int(80),\n\t\t\t\t},\n\t\t\t},\n\t\t\tConditions: fastly.ServiceVclConditionArray{\n\t\t\t\t\u0026fastly.ServiceVclConditionArgs{\n\t\t\t\t\tName:      pulumi.String(\"WAF_Prefetch\"),\n\t\t\t\t\tType:      pulumi.String(\"PREFETCH\"),\n\t\t\t\t\tStatement: pulumi.String(\"req.backend.is_origin\"),\n\t\t\t\t},\n\t\t\t\t\u0026fastly.ServiceVclConditionArgs{\n\t\t\t\t\tName:      pulumi.String(\"WAF_always_false\"),\n\t\t\t\t\tStatement: pulumi.String(\"false\"),\n\t\t\t\t\tType:      pulumi.String(\"REQUEST\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tResponseObjects: fastly.ServiceVclResponseObjectArray{\n\t\t\t\t\u0026fastly.ServiceVclResponseObjectArgs{\n\t\t\t\t\tName:             pulumi.String(\"WAF_Response\"),\n\t\t\t\t\tStatus:           pulumi.Int(403),\n\t\t\t\t\tResponse:         pulumi.String(\"Forbidden\"),\n\t\t\t\t\tContentType:      pulumi.String(\"text/html\"),\n\t\t\t\t\tContent:          pulumi.String(\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\"),\n\t\t\t\t\tRequestCondition: pulumi.String(\"WAF_always_false\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tWaf: \u0026fastly.ServiceVclWafArgs{\n\t\t\t\tPrefetchCondition: pulumi.String(\"WAF_Prefetch\"),\n\t\t\t\tResponseObject:    pulumi.String(\"WAF_Response\"),\n\t\t\t},\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewServiceWafConfiguration(ctx, \"waf\", \u0026fastly.ServiceWafConfigurationArgs{\n\t\t\tWafId: demo.Waf.ApplyT(func(waf fastly.ServiceVclWaf) (*string, error) {\n\t\t\t\treturn \u0026waf.WafId, nil\n\t\t\t}).(pulumi.StringPtrOutput),\n\t\t\tHttpViolationScoreThreshold: pulumi.Int(100),\n\t\t\tRules: fastly.ServiceWafConfigurationRuleArray{\n\t\t\t\t\u0026fastly.ServiceWafConfigurationRuleArgs{\n\t\t\t\t\tModsecRuleId: pulumi.Int(2029718),\n\t\t\t\t\tRevision:     pulumi.Int(1),\n\t\t\t\t\tStatus:       pulumi.String(\"log\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tRuleExclusions: fastly.ServiceWafConfigurationRuleExclusionArray{\n\t\t\t\t\u0026fastly.ServiceWafConfigurationRuleExclusionArgs{\n\t\t\t\t\tName:          pulumi.String(\"index page\"),\n\t\t\t\t\tExclusionType: pulumi.String(\"rule\"),\n\t\t\t\t\tCondition:     pulumi.String(\"req.url.basename == \\\"index.html\\\"\"),\n\t\t\t\t\tModsecRuleIds: pulumi.IntArray{\n\t\t\t\t\t\tpulumi.Int(2029718),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.ServiceVcl;\nimport com.pulumi.fastly.ServiceVclArgs;\nimport com.pulumi.fastly.inputs.ServiceVclDomainArgs;\nimport com.pulumi.fastly.inputs.ServiceVclBackendArgs;\nimport com.pulumi.fastly.inputs.ServiceVclConditionArgs;\nimport com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;\nimport com.pulumi.fastly.inputs.ServiceVclWafArgs;\nimport com.pulumi.fastly.ServiceWafConfiguration;\nimport com.pulumi.fastly.ServiceWafConfigurationArgs;\nimport com.pulumi.fastly.inputs.ServiceWafConfigurationRuleArgs;\nimport com.pulumi.fastly.inputs.ServiceWafConfigurationRuleExclusionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var demo = new ServiceVcl(\"demo\", ServiceVclArgs.builder()        \n            .name(\"demofastly\")\n            .domains(ServiceVclDomainArgs.builder()\n                .name(\"example.com\")\n                .comment(\"demo\")\n                .build())\n            .backends(ServiceVclBackendArgs.builder()\n                .address(\"127.0.0.1\")\n                .name(\"origin1\")\n                .port(80)\n                .build())\n            .conditions(            \n                ServiceVclConditionArgs.builder()\n                    .name(\"WAF_Prefetch\")\n                    .type(\"PREFETCH\")\n                    .statement(\"req.backend.is_origin\")\n                    .build(),\n                ServiceVclConditionArgs.builder()\n                    .name(\"WAF_always_false\")\n                    .statement(\"false\")\n                    .type(\"REQUEST\")\n                    .build())\n            .responseObjects(ServiceVclResponseObjectArgs.builder()\n                .name(\"WAF_Response\")\n                .status(\"403\")\n                .response(\"Forbidden\")\n                .contentType(\"text/html\")\n                .content(\"\u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\")\n                .requestCondition(\"WAF_always_false\")\n                .build())\n            .waf(ServiceVclWafArgs.builder()\n                .prefetchCondition(\"WAF_Prefetch\")\n                .responseObject(\"WAF_Response\")\n                .build())\n            .forceDestroy(true)\n            .build());\n\n        var waf = new ServiceWafConfiguration(\"waf\", ServiceWafConfigurationArgs.builder()        \n            .wafId(demo.waf().applyValue(waf -\u003e waf.wafId()))\n            .httpViolationScoreThreshold(100)\n            .rules(ServiceWafConfigurationRuleArgs.builder()\n                .modsecRuleId(2029718)\n                .revision(1)\n                .status(\"log\")\n                .build())\n            .ruleExclusions(ServiceWafConfigurationRuleExclusionArgs.builder()\n                .name(\"index page\")\n                .exclusionType(\"rule\")\n                .condition(\"req.url.basename == \\\"index.html\\\"\")\n                .modsecRuleIds(2029718)\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo:\n    type: fastly:ServiceVcl\n    properties:\n      name: demofastly\n      domains:\n        - name: example.com\n          comment: demo\n      backends:\n        - address: 127.0.0.1\n          name: origin1\n          port: 80\n      conditions:\n        - name: WAF_Prefetch\n          type: PREFETCH\n          statement: req.backend.is_origin\n        - name: WAF_always_false\n          statement: 'false'\n          type: REQUEST\n      responseObjects:\n        - name: WAF_Response\n          status: '403'\n          response: Forbidden\n          contentType: text/html\n          content: \u003chtml\u003e\u003cbody\u003eForbidden\u003c/body\u003e\u003c/html\u003e\n          requestCondition: WAF_always_false\n      waf:\n        prefetchCondition: WAF_Prefetch\n        responseObject: WAF_Response\n      forceDestroy: true\n  waf:\n    type: fastly:ServiceWafConfiguration\n    properties:\n      wafId: ${demo.waf.wafId}\n      httpViolationScoreThreshold: 100\n      rules:\n        - modsecRuleId: 2.029718e+06\n          revision: 1\n          status: log\n      ruleExclusions:\n        - name: index page\n          exclusionType: rule\n          condition: req.url.basename == \"index.html\"\n          modsecRuleIds:\n            - 2.029718e+06\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\nUsage with rules from data source:\n\n## Import\n\nThis is an example of the import command being applied to the resource named `fastly_service_waf_configuration.waf`\n\nThe resource ID should be the WAF ID.\n\n```sh\n$ pulumi import fastly:index/serviceWafConfiguration:ServiceWafConfiguration waf xxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "activate": {
                    "type": "boolean",
                    "description": "Conditionally prevents a new firewall version from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Whether a specific firewall version is currently deployed\n"
                },
                "allowedHttpVersions": {
                    "type": "string",
                    "description": "Allowed HTTP versions\n"
                },
                "allowedMethods": {
                    "type": "string",
                    "description": "A space-separated list of HTTP method names\n"
                },
                "allowedRequestContentType": {
                    "type": "string",
                    "description": "Allowed request content types\n"
                },
                "allowedRequestContentTypeCharset": {
                    "type": "string",
                    "description": "Allowed request content type charset\n"
                },
                "argLength": {
                    "type": "integer",
                    "description": "The maximum number of arguments allowed\n"
                },
                "argNameLength": {
                    "type": "integer",
                    "description": "The maximum allowed argument name length\n"
                },
                "clonedVersion": {
                    "type": "integer",
                    "description": "The latest cloned firewall version by the provider\n"
                },
                "combinedFileSizes": {
                    "type": "integer",
                    "description": "The maximum allowed size of all files\n"
                },
                "criticalAnomalyScore": {
                    "type": "integer",
                    "description": "Score value to add for critical anomalies\n"
                },
                "crsValidateUtf8Encoding": {
                    "type": "boolean",
                    "description": "CRS validate UTF8 encoding\n"
                },
                "errorAnomalyScore": {
                    "type": "integer",
                    "description": "Score value to add for error anomalies\n"
                },
                "highRiskCountryCodes": {
                    "type": "string",
                    "description": "A space-separated list of country codes in ISO 3166-1 (two-letter) format\n"
                },
                "httpViolationScoreThreshold": {
                    "type": "integer",
                    "description": "HTTP violation threshold\n"
                },
                "inboundAnomalyScoreThreshold": {
                    "type": "integer",
                    "description": "Inbound anomaly threshold\n"
                },
                "lfiScoreThreshold": {
                    "type": "integer",
                    "description": "Local file inclusion attack threshold\n"
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "The maximum allowed file size, in bytes\n"
                },
                "maxNumArgs": {
                    "type": "integer",
                    "description": "The maximum number of arguments allowed\n"
                },
                "noticeAnomalyScore": {
                    "type": "integer",
                    "description": "Score value to add for notice anomalies\n"
                },
                "number": {
                    "type": "integer",
                    "description": "The WAF firewall version\n"
                },
                "paranoiaLevel": {
                    "type": "integer",
                    "description": "The configured paranoia level\n"
                },
                "phpInjectionScoreThreshold": {
                    "type": "integer",
                    "description": "PHP injection threshold\n"
                },
                "rceScoreThreshold": {
                    "type": "integer",
                    "description": "Remote code execution threshold\n"
                },
                "restrictedExtensions": {
                    "type": "string",
                    "description": "A space-separated list of allowed file extensions\n"
                },
                "restrictedHeaders": {
                    "type": "string",
                    "description": "A space-separated list of allowed header names\n"
                },
                "rfiScoreThreshold": {
                    "type": "integer",
                    "description": "Remote file inclusion attack threshold\n"
                },
                "ruleExclusions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceWafConfigurationRuleExclusion:ServiceWafConfigurationRuleExclusion"
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceWafConfigurationRule:ServiceWafConfigurationRule"
                    }
                },
                "sessionFixationScoreThreshold": {
                    "type": "integer",
                    "description": "Session fixation attack threshold\n"
                },
                "sqlInjectionScoreThreshold": {
                    "type": "integer",
                    "description": "SQL injection attack threshold\n"
                },
                "totalArgLength": {
                    "type": "integer",
                    "description": "The maximum size of argument names and values\n"
                },
                "wafId": {
                    "type": "string",
                    "description": "The ID of the Web Application Firewall that the configuration belongs to\n"
                },
                "warningAnomalyScore": {
                    "type": "integer",
                    "description": "Score value to add for warning anomalies\n"
                },
                "xssScoreThreshold": {
                    "type": "integer",
                    "description": "XSS attack threshold\n"
                }
            },
            "required": [
                "active",
                "allowedHttpVersions",
                "allowedMethods",
                "allowedRequestContentType",
                "allowedRequestContentTypeCharset",
                "argLength",
                "argNameLength",
                "clonedVersion",
                "combinedFileSizes",
                "criticalAnomalyScore",
                "crsValidateUtf8Encoding",
                "errorAnomalyScore",
                "highRiskCountryCodes",
                "httpViolationScoreThreshold",
                "inboundAnomalyScoreThreshold",
                "lfiScoreThreshold",
                "maxFileSize",
                "maxNumArgs",
                "noticeAnomalyScore",
                "number",
                "paranoiaLevel",
                "phpInjectionScoreThreshold",
                "rceScoreThreshold",
                "restrictedExtensions",
                "restrictedHeaders",
                "rfiScoreThreshold",
                "sessionFixationScoreThreshold",
                "sqlInjectionScoreThreshold",
                "totalArgLength",
                "wafId",
                "warningAnomalyScore",
                "xssScoreThreshold"
            ],
            "inputProperties": {
                "activate": {
                    "type": "boolean",
                    "description": "Conditionally prevents a new firewall version from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                },
                "allowedHttpVersions": {
                    "type": "string",
                    "description": "Allowed HTTP versions\n"
                },
                "allowedMethods": {
                    "type": "string",
                    "description": "A space-separated list of HTTP method names\n"
                },
                "allowedRequestContentType": {
                    "type": "string",
                    "description": "Allowed request content types\n"
                },
                "allowedRequestContentTypeCharset": {
                    "type": "string",
                    "description": "Allowed request content type charset\n"
                },
                "argLength": {
                    "type": "integer",
                    "description": "The maximum number of arguments allowed\n"
                },
                "argNameLength": {
                    "type": "integer",
                    "description": "The maximum allowed argument name length\n"
                },
                "combinedFileSizes": {
                    "type": "integer",
                    "description": "The maximum allowed size of all files\n"
                },
                "criticalAnomalyScore": {
                    "type": "integer",
                    "description": "Score value to add for critical anomalies\n"
                },
                "crsValidateUtf8Encoding": {
                    "type": "boolean",
                    "description": "CRS validate UTF8 encoding\n"
                },
                "errorAnomalyScore": {
                    "type": "integer",
                    "description": "Score value to add for error anomalies\n"
                },
                "highRiskCountryCodes": {
                    "type": "string",
                    "description": "A space-separated list of country codes in ISO 3166-1 (two-letter) format\n"
                },
                "httpViolationScoreThreshold": {
                    "type": "integer",
                    "description": "HTTP violation threshold\n"
                },
                "inboundAnomalyScoreThreshold": {
                    "type": "integer",
                    "description": "Inbound anomaly threshold\n"
                },
                "lfiScoreThreshold": {
                    "type": "integer",
                    "description": "Local file inclusion attack threshold\n"
                },
                "maxFileSize": {
                    "type": "integer",
                    "description": "The maximum allowed file size, in bytes\n"
                },
                "maxNumArgs": {
                    "type": "integer",
                    "description": "The maximum number of arguments allowed\n"
                },
                "noticeAnomalyScore": {
                    "type": "integer",
                    "description": "Score value to add for notice anomalies\n"
                },
                "paranoiaLevel": {
                    "type": "integer",
                    "description": "The configured paranoia level\n"
                },
                "phpInjectionScoreThreshold": {
                    "type": "integer",
                    "description": "PHP injection threshold\n"
                },
                "rceScoreThreshold": {
                    "type": "integer",
                    "description": "Remote code execution threshold\n"
                },
                "restrictedExtensions": {
                    "type": "string",
                    "description": "A space-separated list of allowed file extensions\n"
                },
                "restrictedHeaders": {
                    "type": "string",
                    "description": "A space-separated list of allowed header names\n"
                },
                "rfiScoreThreshold": {
                    "type": "integer",
                    "description": "Remote file inclusion attack threshold\n"
                },
                "ruleExclusions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceWafConfigurationRuleExclusion:ServiceWafConfigurationRuleExclusion"
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/ServiceWafConfigurationRule:ServiceWafConfigurationRule"
                    }
                },
                "sessionFixationScoreThreshold": {
                    "type": "integer",
                    "description": "Session fixation attack threshold\n"
                },
                "sqlInjectionScoreThreshold": {
                    "type": "integer",
                    "description": "SQL injection attack threshold\n"
                },
                "totalArgLength": {
                    "type": "integer",
                    "description": "The maximum size of argument names and values\n"
                },
                "wafId": {
                    "type": "string",
                    "description": "The ID of the Web Application Firewall that the configuration belongs to\n",
                    "willReplaceOnChanges": true
                },
                "warningAnomalyScore": {
                    "type": "integer",
                    "description": "Score value to add for warning anomalies\n"
                },
                "xssScoreThreshold": {
                    "type": "integer",
                    "description": "XSS attack threshold\n"
                }
            },
            "requiredInputs": [
                "wafId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceWafConfiguration resources.\n",
                "properties": {
                    "activate": {
                        "type": "boolean",
                        "description": "Conditionally prevents a new firewall version from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`\n"
                    },
                    "active": {
                        "type": "boolean",
                        "description": "Whether a specific firewall version is currently deployed\n"
                    },
                    "allowedHttpVersions": {
                        "type": "string",
                        "description": "Allowed HTTP versions\n"
                    },
                    "allowedMethods": {
                        "type": "string",
                        "description": "A space-separated list of HTTP method names\n"
                    },
                    "allowedRequestContentType": {
                        "type": "string",
                        "description": "Allowed request content types\n"
                    },
                    "allowedRequestContentTypeCharset": {
                        "type": "string",
                        "description": "Allowed request content type charset\n"
                    },
                    "argLength": {
                        "type": "integer",
                        "description": "The maximum number of arguments allowed\n"
                    },
                    "argNameLength": {
                        "type": "integer",
                        "description": "The maximum allowed argument name length\n"
                    },
                    "clonedVersion": {
                        "type": "integer",
                        "description": "The latest cloned firewall version by the provider\n"
                    },
                    "combinedFileSizes": {
                        "type": "integer",
                        "description": "The maximum allowed size of all files\n"
                    },
                    "criticalAnomalyScore": {
                        "type": "integer",
                        "description": "Score value to add for critical anomalies\n"
                    },
                    "crsValidateUtf8Encoding": {
                        "type": "boolean",
                        "description": "CRS validate UTF8 encoding\n"
                    },
                    "errorAnomalyScore": {
                        "type": "integer",
                        "description": "Score value to add for error anomalies\n"
                    },
                    "highRiskCountryCodes": {
                        "type": "string",
                        "description": "A space-separated list of country codes in ISO 3166-1 (two-letter) format\n"
                    },
                    "httpViolationScoreThreshold": {
                        "type": "integer",
                        "description": "HTTP violation threshold\n"
                    },
                    "inboundAnomalyScoreThreshold": {
                        "type": "integer",
                        "description": "Inbound anomaly threshold\n"
                    },
                    "lfiScoreThreshold": {
                        "type": "integer",
                        "description": "Local file inclusion attack threshold\n"
                    },
                    "maxFileSize": {
                        "type": "integer",
                        "description": "The maximum allowed file size, in bytes\n"
                    },
                    "maxNumArgs": {
                        "type": "integer",
                        "description": "The maximum number of arguments allowed\n"
                    },
                    "noticeAnomalyScore": {
                        "type": "integer",
                        "description": "Score value to add for notice anomalies\n"
                    },
                    "number": {
                        "type": "integer",
                        "description": "The WAF firewall version\n"
                    },
                    "paranoiaLevel": {
                        "type": "integer",
                        "description": "The configured paranoia level\n"
                    },
                    "phpInjectionScoreThreshold": {
                        "type": "integer",
                        "description": "PHP injection threshold\n"
                    },
                    "rceScoreThreshold": {
                        "type": "integer",
                        "description": "Remote code execution threshold\n"
                    },
                    "restrictedExtensions": {
                        "type": "string",
                        "description": "A space-separated list of allowed file extensions\n"
                    },
                    "restrictedHeaders": {
                        "type": "string",
                        "description": "A space-separated list of allowed header names\n"
                    },
                    "rfiScoreThreshold": {
                        "type": "integer",
                        "description": "Remote file inclusion attack threshold\n"
                    },
                    "ruleExclusions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceWafConfigurationRuleExclusion:ServiceWafConfigurationRuleExclusion"
                        }
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/ServiceWafConfigurationRule:ServiceWafConfigurationRule"
                        }
                    },
                    "sessionFixationScoreThreshold": {
                        "type": "integer",
                        "description": "Session fixation attack threshold\n"
                    },
                    "sqlInjectionScoreThreshold": {
                        "type": "integer",
                        "description": "SQL injection attack threshold\n"
                    },
                    "totalArgLength": {
                        "type": "integer",
                        "description": "The maximum size of argument names and values\n"
                    },
                    "wafId": {
                        "type": "string",
                        "description": "The ID of the Web Application Firewall that the configuration belongs to\n",
                        "willReplaceOnChanges": true
                    },
                    "warningAnomalyScore": {
                        "type": "integer",
                        "description": "Score value to add for warning anomalies\n"
                    },
                    "xssScoreThreshold": {
                        "type": "integer",
                        "description": "XSS attack threshold\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/tlsActivation:TlsActivation": {
            "description": "Enables TLS on a domain using a specified custom TLS certificate.\n\n\u003e **Note:** The Fastly service must be provisioned _prior_ to enabling TLS on it. This can be achieved in Pulumi using `depends_on`.\n\n## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst demo = new fastly.ServiceVcl(\"demo\", {\n    name: \"my-service\",\n    domains: [{\n        name: \"example.com\",\n    }],\n    backends: [{\n        address: \"127.0.0.1\",\n        name: \"localhost\",\n    }],\n    forceDestroy: true,\n});\nconst demoTlsPrivateKey = new fastly.TlsPrivateKey(\"demo\", {\n    keyPem: \"...\",\n    name: \"demo-key\",\n});\nconst demoTlsCertificate = new fastly.TlsCertificate(\"demo\", {\n    certificateBody: \"...\",\n    name: \"demo-cert\",\n}, {\n    dependsOn: [demoTlsPrivateKey],\n});\nconst test = new fastly.TlsActivation(\"test\", {\n    certificateId: demoTlsCertificate.id,\n    domain: \"example.com\",\n}, {\n    dependsOn: [demo],\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndemo = fastly.ServiceVcl(\"demo\",\n    name=\"my-service\",\n    domains=[fastly.ServiceVclDomainArgs(\n        name=\"example.com\",\n    )],\n    backends=[fastly.ServiceVclBackendArgs(\n        address=\"127.0.0.1\",\n        name=\"localhost\",\n    )],\n    force_destroy=True)\ndemo_tls_private_key = fastly.TlsPrivateKey(\"demo\",\n    key_pem=\"...\",\n    name=\"demo-key\")\ndemo_tls_certificate = fastly.TlsCertificate(\"demo\",\n    certificate_body=\"...\",\n    name=\"demo-cert\",\n    opts=pulumi.ResourceOptions(depends_on=[demo_tls_private_key]))\ntest = fastly.TlsActivation(\"test\",\n    certificate_id=demo_tls_certificate.id,\n    domain=\"example.com\",\n    opts=pulumi.ResourceOptions(depends_on=[demo]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = new Fastly.ServiceVcl(\"demo\", new()\n    {\n        Name = \"my-service\",\n        Domains = new[]\n        {\n            new Fastly.Inputs.ServiceVclDomainArgs\n            {\n                Name = \"example.com\",\n            },\n        },\n        Backends = new[]\n        {\n            new Fastly.Inputs.ServiceVclBackendArgs\n            {\n                Address = \"127.0.0.1\",\n                Name = \"localhost\",\n            },\n        },\n        ForceDestroy = true,\n    });\n\n    var demoTlsPrivateKey = new Fastly.TlsPrivateKey(\"demo\", new()\n    {\n        KeyPem = \"...\",\n        Name = \"demo-key\",\n    });\n\n    var demoTlsCertificate = new Fastly.TlsCertificate(\"demo\", new()\n    {\n        CertificateBody = \"...\",\n        Name = \"demo-cert\",\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            demoTlsPrivateKey,\n        },\n    });\n\n    var test = new Fastly.TlsActivation(\"test\", new()\n    {\n        CertificateId = demoTlsCertificate.Id,\n        Domain = \"example.com\",\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            demo,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemo, err := fastly.NewServiceVcl(ctx, \"demo\", \u0026fastly.ServiceVclArgs{\n\t\t\tName: pulumi.String(\"my-service\"),\n\t\t\tDomains: fastly.ServiceVclDomainArray{\n\t\t\t\t\u0026fastly.ServiceVclDomainArgs{\n\t\t\t\t\tName: pulumi.String(\"example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tBackends: fastly.ServiceVclBackendArray{\n\t\t\t\t\u0026fastly.ServiceVclBackendArgs{\n\t\t\t\t\tAddress: pulumi.String(\"127.0.0.1\"),\n\t\t\t\t\tName:    pulumi.String(\"localhost\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdemoTlsPrivateKey, err := fastly.NewTlsPrivateKey(ctx, \"demo\", \u0026fastly.TlsPrivateKeyArgs{\n\t\t\tKeyPem: pulumi.String(\"...\"),\n\t\t\tName:   pulumi.String(\"demo-key\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdemoTlsCertificate, err := fastly.NewTlsCertificate(ctx, \"demo\", \u0026fastly.TlsCertificateArgs{\n\t\t\tCertificateBody: pulumi.String(\"...\"),\n\t\t\tName:            pulumi.String(\"demo-cert\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tdemoTlsPrivateKey,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewTlsActivation(ctx, \"test\", \u0026fastly.TlsActivationArgs{\n\t\t\tCertificateId: demoTlsCertificate.ID(),\n\t\t\tDomain:        pulumi.String(\"example.com\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tdemo,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.ServiceVcl;\nimport com.pulumi.fastly.ServiceVclArgs;\nimport com.pulumi.fastly.inputs.ServiceVclDomainArgs;\nimport com.pulumi.fastly.inputs.ServiceVclBackendArgs;\nimport com.pulumi.fastly.TlsPrivateKey;\nimport com.pulumi.fastly.TlsPrivateKeyArgs;\nimport com.pulumi.fastly.TlsCertificate;\nimport com.pulumi.fastly.TlsCertificateArgs;\nimport com.pulumi.fastly.TlsActivation;\nimport com.pulumi.fastly.TlsActivationArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var demo = new ServiceVcl(\"demo\", ServiceVclArgs.builder()        \n            .name(\"my-service\")\n            .domains(ServiceVclDomainArgs.builder()\n                .name(\"example.com\")\n                .build())\n            .backends(ServiceVclBackendArgs.builder()\n                .address(\"127.0.0.1\")\n                .name(\"localhost\")\n                .build())\n            .forceDestroy(true)\n            .build());\n\n        var demoTlsPrivateKey = new TlsPrivateKey(\"demoTlsPrivateKey\", TlsPrivateKeyArgs.builder()        \n            .keyPem(\"...\")\n            .name(\"demo-key\")\n            .build());\n\n        var demoTlsCertificate = new TlsCertificate(\"demoTlsCertificate\", TlsCertificateArgs.builder()        \n            .certificateBody(\"...\")\n            .name(\"demo-cert\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(demoTlsPrivateKey)\n                .build());\n\n        var test = new TlsActivation(\"test\", TlsActivationArgs.builder()        \n            .certificateId(demoTlsCertificate.id())\n            .domain(\"example.com\")\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(demo)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo:\n    type: fastly:ServiceVcl\n    properties:\n      name: my-service\n      domains:\n        - name: example.com\n      backends:\n        - address: 127.0.0.1\n          name: localhost\n      forceDestroy: true\n  demoTlsPrivateKey:\n    type: fastly:TlsPrivateKey\n    name: demo\n    properties:\n      keyPem: '...'\n      name: demo-key\n  demoTlsCertificate:\n    type: fastly:TlsCertificate\n    name: demo\n    properties:\n      certificateBody: '...'\n      name: demo-cert\n    options:\n      dependson:\n        - ${demoTlsPrivateKey}\n  test:\n    type: fastly:TlsActivation\n    properties:\n      certificateId: ${demoTlsCertificate.id}\n      domain: example.com\n    options:\n      dependson:\n        - ${demo}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n\u003e **Warning:** Updating the `fastly.TlsPrivateKey`/`fastly.TlsCertificate` resources should be done in multiple plan/apply steps to avoid potential downtime. The new certificate and associated private key must first be created so they exist alongside the currently active resources. Once the new resources have been created, then the `fastly.TlsActivation` can be updated to point to the new certificate. Finally, the original key/certificate resources can be deleted.\n\n## Import\n\nA TLS activation can be imported using its ID, e.g.\n\n```sh\n$ pulumi import fastly:index/tlsActivation:TlsActivation demo xxxxxxxx\n```\n\n",
            "properties": {
                "certificateId": {
                    "type": "string",
                    "description": "ID of certificate to use. Must have the `domain` specified in the certificate's Subject Alternative Names.\n"
                },
                "configurationId": {
                    "type": "string",
                    "description": "ID of TLS configuration to be used to terminate TLS traffic, or use the default one if missing.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Time-stamp (GMT) when TLS was enabled.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Domain to enable TLS on. Must be assigned to an existing Fastly Service.\n"
                },
                "mutualAuthenticationId": {
                    "type": "string",
                    "description": "An alphanumeric string identifying a mutual authentication.\n"
                }
            },
            "required": [
                "certificateId",
                "configurationId",
                "createdAt",
                "domain"
            ],
            "inputProperties": {
                "certificateId": {
                    "type": "string",
                    "description": "ID of certificate to use. Must have the `domain` specified in the certificate's Subject Alternative Names.\n"
                },
                "configurationId": {
                    "type": "string",
                    "description": "ID of TLS configuration to be used to terminate TLS traffic, or use the default one if missing.\n",
                    "willReplaceOnChanges": true
                },
                "domain": {
                    "type": "string",
                    "description": "Domain to enable TLS on. Must be assigned to an existing Fastly Service.\n",
                    "willReplaceOnChanges": true
                },
                "mutualAuthenticationId": {
                    "type": "string",
                    "description": "An alphanumeric string identifying a mutual authentication.\n"
                }
            },
            "requiredInputs": [
                "certificateId",
                "domain"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TlsActivation resources.\n",
                "properties": {
                    "certificateId": {
                        "type": "string",
                        "description": "ID of certificate to use. Must have the `domain` specified in the certificate's Subject Alternative Names.\n"
                    },
                    "configurationId": {
                        "type": "string",
                        "description": "ID of TLS configuration to be used to terminate TLS traffic, or use the default one if missing.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Time-stamp (GMT) when TLS was enabled.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain to enable TLS on. Must be assigned to an existing Fastly Service.\n",
                        "willReplaceOnChanges": true
                    },
                    "mutualAuthenticationId": {
                        "type": "string",
                        "description": "An alphanumeric string identifying a mutual authentication.\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/tlsCertificate:TlsCertificate": {
            "description": "Uploads a custom TLS certificate to Fastly to be used to terminate TLS traffic.\n\n\u003e Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate. This\ncan be achieved in Pulumi using `depends_on`\n\n## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\nimport * as tls from \"@pulumi/tls\";\n\nconst key = new tls.index.PrivateKey(\"key\", {algorithm: \"RSA\"});\nconst cert = new tls.index.SelfSignedCert(\"cert\", {\n    keyAlgorithm: key.algorithm,\n    privateKeyPem: key.privateKeyPem,\n    subject: [{\n        commonName: \"example.com\",\n    }],\n    isCaCertificate: true,\n    validityPeriodHours: 360,\n    allowedUses: [\n        \"cert_signing\",\n        \"server_auth\",\n    ],\n    dnsNames: [\"example.com\"],\n});\nconst keyTlsPrivateKey = new fastly.TlsPrivateKey(\"key\", {\n    keyPem: key.privateKeyPem,\n    name: \"tf-demo\",\n});\nconst example = new fastly.TlsCertificate(\"example\", {\n    name: \"tf-demo\",\n    certificateBody: cert.certPem,\n}, {\n    dependsOn: [keyTlsPrivateKey],\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\nimport pulumi_tls as tls\n\nkey = tls.index.PrivateKey(\"key\", algorithm=RSA)\ncert = tls.index.SelfSignedCert(\"cert\",\n    key_algorithm=key.algorithm,\n    private_key_pem=key.private_key_pem,\n    subject=[{\n        commonName: example.com,\n    }],\n    is_ca_certificate=True,\n    validity_period_hours=360,\n    allowed_uses=[\n        cert_signing,\n        server_auth,\n    ],\n    dns_names=[example.com])\nkey_tls_private_key = fastly.TlsPrivateKey(\"key\",\n    key_pem=key[\"privateKeyPem\"],\n    name=\"tf-demo\")\nexample = fastly.TlsCertificate(\"example\",\n    name=\"tf-demo\",\n    certificate_body=cert[\"certPem\"],\n    opts=pulumi.ResourceOptions(depends_on=[key_tls_private_key]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\nusing Tls = Pulumi.Tls;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var key = new Tls.Index.PrivateKey(\"key\", new()\n    {\n        Algorithm = \"RSA\",\n    });\n\n    var cert = new Tls.Index.SelfSignedCert(\"cert\", new()\n    {\n        KeyAlgorithm = key.Algorithm,\n        PrivateKeyPem = key.PrivateKeyPem,\n        Subject = new[]\n        {\n            \n            {\n                { \"commonName\", \"example.com\" },\n            },\n        },\n        IsCaCertificate = true,\n        ValidityPeriodHours = 360,\n        AllowedUses = new[]\n        {\n            \"cert_signing\",\n            \"server_auth\",\n        },\n        DnsNames = new[]\n        {\n            \"example.com\",\n        },\n    });\n\n    var keyTlsPrivateKey = new Fastly.TlsPrivateKey(\"key\", new()\n    {\n        KeyPem = key.PrivateKeyPem,\n        Name = \"tf-demo\",\n    });\n\n    var example = new Fastly.TlsCertificate(\"example\", new()\n    {\n        Name = \"tf-demo\",\n        CertificateBody = cert.CertPem,\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            keyTlsPrivateKey,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi-tls/sdk/v4/go/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tkey, err := tls.NewPrivateKey(ctx, \"key\", \u0026tls.PrivateKeyArgs{\n\t\t\tAlgorithm: \"RSA\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcert, err := tls.NewSelfSignedCert(ctx, \"cert\", \u0026tls.SelfSignedCertArgs{\n\t\t\tKeyAlgorithm:  key.Algorithm,\n\t\t\tPrivateKeyPem: key.PrivateKeyPem,\n\t\t\tSubject: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"commonName\": \"example.com\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsCaCertificate:     true,\n\t\t\tValidityPeriodHours: 360,\n\t\t\tAllowedUses: []string{\n\t\t\t\t\"cert_signing\",\n\t\t\t\t\"server_auth\",\n\t\t\t},\n\t\t\tDnsNames: []string{\n\t\t\t\t\"example.com\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tkeyTlsPrivateKey, err := fastly.NewTlsPrivateKey(ctx, \"key\", \u0026fastly.TlsPrivateKeyArgs{\n\t\t\tKeyPem: key.PrivateKeyPem,\n\t\t\tName:   pulumi.String(\"tf-demo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewTlsCertificate(ctx, \"example\", \u0026fastly.TlsCertificateArgs{\n\t\t\tName:            pulumi.String(\"tf-demo\"),\n\t\t\tCertificateBody: cert.CertPem,\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tkeyTlsPrivateKey,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tls.privateKey;\nimport com.pulumi.tls.PrivateKeyArgs;\nimport com.pulumi.tls.selfSignedCert;\nimport com.pulumi.tls.SelfSignedCertArgs;\nimport com.pulumi.fastly.TlsPrivateKey;\nimport com.pulumi.fastly.TlsPrivateKeyArgs;\nimport com.pulumi.fastly.TlsCertificate;\nimport com.pulumi.fastly.TlsCertificateArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var key = new PrivateKey(\"key\", PrivateKeyArgs.builder()        \n            .algorithm(\"RSA\")\n            .build());\n\n        var cert = new SelfSignedCert(\"cert\", SelfSignedCertArgs.builder()        \n            .keyAlgorithm(key.algorithm())\n            .privateKeyPem(key.privateKeyPem())\n            .subject(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .isCaCertificate(true)\n            .validityPeriodHours(360)\n            .allowedUses(            \n                \"cert_signing\",\n                \"server_auth\")\n            .dnsNames(\"example.com\")\n            .build());\n\n        var keyTlsPrivateKey = new TlsPrivateKey(\"keyTlsPrivateKey\", TlsPrivateKeyArgs.builder()        \n            .keyPem(key.privateKeyPem())\n            .name(\"tf-demo\")\n            .build());\n\n        var example = new TlsCertificate(\"example\", TlsCertificateArgs.builder()        \n            .name(\"tf-demo\")\n            .certificateBody(cert.certPem())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(keyTlsPrivateKey)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  key:\n    type: tls:privateKey\n    properties:\n      algorithm: RSA\n  cert:\n    type: tls:selfSignedCert\n    properties:\n      keyAlgorithm: ${key.algorithm}\n      privateKeyPem: ${key.privateKeyPem}\n      subject:\n        - commonName: example.com\n      isCaCertificate: true\n      validityPeriodHours: 360\n      allowedUses:\n        - cert_signing\n        - server_auth\n      dnsNames:\n        - example.com\n  keyTlsPrivateKey:\n    type: fastly:TlsPrivateKey\n    name: key\n    properties:\n      keyPem: ${key.privateKeyPem}\n      name: tf-demo\n  example:\n    type: fastly:TlsCertificate\n    properties:\n      name: tf-demo\n      certificateBody: ${cert.certPem}\n    options:\n      dependson:\n        - ${keyTlsPrivateKey}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Updating certificates\n\nThere are three scenarios for updating a certificate:\n\n1. The certificate is about to expire but the private key stays the same.\n2. The certificate is about to expire but the private key is changing.\n3. The domains on the certificate are changing.\n\nIn the first scenario you only need to update the `certificate_body` attribute of the `fastly.TlsCertificate` resource, while the other scenarios require a new private key (`fastly.TlsPrivateKey`) and certificate (`fastly.TlsCertificate`) to be generated.\n\nWhen updating both the `fastly.TlsPrivateKey` and `fastly.TlsCertificate` resources, they should be done in multiple plan/apply steps to avoid potential downtime. The new certificate and associated private key must first be created so they exist alongside the currently active resources. Once the new resources have been created, then the `fastly.TlsActivation` can be updated to point to the new certificate. Finally, the original key/certificate resources can be deleted.\n\n## Import\n\nA certificate can be imported using its Fastly certificate ID, e.g.\n\n```sh\n$ pulumi import fastly:index/tlsCertificate:TlsCertificate demo xxxxxxxxxxx\n```\n\n",
            "properties": {
                "certificateBody": {
                    "type": "string",
                    "description": "PEM-formatted certificate, optionally including any intermediary certificates.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp (GMT) when the certificate was created.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.\n"
                },
                "issuedTo": {
                    "type": "string",
                    "description": "The hostname for which a certificate was issued.\n"
                },
                "issuer": {
                    "type": "string",
                    "description": "The certificate authority that issued the certificate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.\n"
                },
                "serialNumber": {
                    "type": "string",
                    "description": "A value assigned by the issuer that is unique to a certificate.\n"
                },
                "signatureAlgorithm": {
                    "type": "string",
                    "description": "The algorithm used to sign the certificate.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp (GMT) when the certificate was last updated.\n"
                }
            },
            "required": [
                "certificateBody",
                "createdAt",
                "domains",
                "issuedTo",
                "issuer",
                "name",
                "replace",
                "serialNumber",
                "signatureAlgorithm",
                "updatedAt"
            ],
            "inputProperties": {
                "certificateBody": {
                    "type": "string",
                    "description": "PEM-formatted certificate, optionally including any intermediary certificates.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.\n"
                }
            },
            "requiredInputs": [
                "certificateBody"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TlsCertificate resources.\n",
                "properties": {
                    "certificateBody": {
                        "type": "string",
                        "description": "PEM-formatted certificate, optionally including any intermediary certificates.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the certificate was created.\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.\n"
                    },
                    "issuedTo": {
                        "type": "string",
                        "description": "The hostname for which a certificate was issued.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The certificate authority that issued the certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.\n"
                    },
                    "serialNumber": {
                        "type": "string",
                        "description": "A value assigned by the issuer that is unique to a certificate.\n"
                    },
                    "signatureAlgorithm": {
                        "type": "string",
                        "description": "The algorithm used to sign the certificate.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the certificate was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/tlsMutualAuthentication:TlsMutualAuthentication": {
            "description": "The Mutual TLS API allows for client-to-server authentication using client-side X.509 authentication.\n\nThe main Mutual Authentication object represents the certificate bundle and other configurations which support Mutual TLS for your domains.\n\nMutual TLS can be added to existing TLS activations to allow for client-to-server authentication. In order to use mutual TLS, you must already have active server-side TLS using either custom certificates or an enabled Fastly-managed subscription.\n\nThe examples below demonstrate how to use Mutual Authentication along with a TLS Subscription. Refer to the `fastly.TlsSubscription` resource documentation for a deeper explanation of that code.\n\n",
            "properties": {
                "activationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TLS Activation IDs\n"
                },
                "certBundle": {
                    "type": "string",
                    "description": "One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Date and time in ISO 8601 format.\n"
                },
                "enforced": {
                    "type": "boolean",
                    "description": "Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).\n"
                },
                "include": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "A custom name for your mutual authentication. If name is not supplied we will auto-generate one.\n"
                },
                "tlsActivations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of alphanumeric strings identifying TLS activations.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Date and time in ISO 8601 format.\n"
                }
            },
            "required": [
                "certBundle",
                "createdAt",
                "enforced",
                "name",
                "tlsActivations",
                "updatedAt"
            ],
            "inputProperties": {
                "activationIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of TLS Activation IDs\n"
                },
                "certBundle": {
                    "type": "string",
                    "description": "One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.\n"
                },
                "enforced": {
                    "type": "boolean",
                    "description": "Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).\n"
                },
                "include": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "A custom name for your mutual authentication. If name is not supplied we will auto-generate one.\n"
                }
            },
            "requiredInputs": [
                "certBundle"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TlsMutualAuthentication resources.\n",
                "properties": {
                    "activationIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of TLS Activation IDs\n"
                    },
                    "certBundle": {
                        "type": "string",
                        "description": "One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time in ISO 8601 format.\n"
                    },
                    "enforced": {
                        "type": "boolean",
                        "description": "Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).\n"
                    },
                    "include": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "A custom name for your mutual authentication. If name is not supplied we will auto-generate one.\n"
                    },
                    "tlsActivations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of alphanumeric strings identifying TLS activations.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Date and time in ISO 8601 format.\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/tlsPlatformCertificate:TlsPlatformCertificate": {
            "description": "Uploads a TLS certificate to the Fastly Platform TLS service.\n\n\u003e Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate. This\ncan be achieved in Pulumi using `depends_on`\n\n## Example Usage\n\nBasic usage with self-signed CA:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\nimport * as tls from \"@pulumi/tls\";\n\nconst caKey = new tls.index.PrivateKey(\"ca_key\", {algorithm: \"RSA\"});\nconst key = new tls.index.PrivateKey(\"key\", {algorithm: \"RSA\"});\nconst ca = new tls.index.SelfSignedCert(\"ca\", {\n    keyAlgorithm: caKey.algorithm,\n    privateKeyPem: caKey.privateKeyPem,\n    subject: [{\n        commonName: \"Example CA\",\n    }],\n    isCaCertificate: true,\n    validityPeriodHours: 360,\n    allowedUses: [\n        \"cert_signing\",\n        \"server_auth\",\n    ],\n});\nconst example = new tls.index.CertRequest(\"example\", {\n    keyAlgorithm: key.algorithm,\n    privateKeyPem: key.privateKeyPem,\n    subject: [{\n        commonName: \"example.com\",\n    }],\n    dnsNames: [\n        \"example.com\",\n        \"www.example.com\",\n    ],\n});\nconst cert = new tls.index.LocallySignedCert(\"cert\", {\n    certRequestPem: example.certRequestPem,\n    caKeyAlgorithm: caKey.algorithm,\n    caPrivateKeyPem: caKey.privateKeyPem,\n    caCertPem: ca.certPem,\n    validityPeriodHours: 360,\n    allowedUses: [\n        \"cert_signing\",\n        \"server_auth\",\n    ],\n});\nconst config = fastly.getTlsConfiguration({\n    tlsService: \"PLATFORM\",\n});\nconst keyTlsPrivateKey = new fastly.TlsPrivateKey(\"key\", {\n    keyPem: key.privateKeyPem,\n    name: \"tf-demo\",\n});\nconst certTlsPlatformCertificate = new fastly.TlsPlatformCertificate(\"cert\", {\n    certificateBody: cert.certPem,\n    intermediatesBlob: ca.certPem,\n    configurationId: config.then(config =\u003e config.id),\n    allowUntrustedRoot: true,\n}, {\n    dependsOn: [keyTlsPrivateKey],\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\nimport pulumi_tls as tls\n\nca_key = tls.index.PrivateKey(\"ca_key\", algorithm=RSA)\nkey = tls.index.PrivateKey(\"key\", algorithm=RSA)\nca = tls.index.SelfSignedCert(\"ca\",\n    key_algorithm=ca_key.algorithm,\n    private_key_pem=ca_key.private_key_pem,\n    subject=[{\n        commonName: Example CA,\n    }],\n    is_ca_certificate=True,\n    validity_period_hours=360,\n    allowed_uses=[\n        cert_signing,\n        server_auth,\n    ])\nexample = tls.index.CertRequest(\"example\",\n    key_algorithm=key.algorithm,\n    private_key_pem=key.private_key_pem,\n    subject=[{\n        commonName: example.com,\n    }],\n    dns_names=[\n        example.com,\n        www.example.com,\n    ])\ncert = tls.index.LocallySignedCert(\"cert\",\n    cert_request_pem=example.cert_request_pem,\n    ca_key_algorithm=ca_key.algorithm,\n    ca_private_key_pem=ca_key.private_key_pem,\n    ca_cert_pem=ca.cert_pem,\n    validity_period_hours=360,\n    allowed_uses=[\n        cert_signing,\n        server_auth,\n    ])\nconfig = fastly.get_tls_configuration(tls_service=\"PLATFORM\")\nkey_tls_private_key = fastly.TlsPrivateKey(\"key\",\n    key_pem=key[\"privateKeyPem\"],\n    name=\"tf-demo\")\ncert_tls_platform_certificate = fastly.TlsPlatformCertificate(\"cert\",\n    certificate_body=cert[\"certPem\"],\n    intermediates_blob=ca[\"certPem\"],\n    configuration_id=config.id,\n    allow_untrusted_root=True,\n    opts=pulumi.ResourceOptions(depends_on=[key_tls_private_key]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\nusing Tls = Pulumi.Tls;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var caKey = new Tls.Index.PrivateKey(\"ca_key\", new()\n    {\n        Algorithm = \"RSA\",\n    });\n\n    var key = new Tls.Index.PrivateKey(\"key\", new()\n    {\n        Algorithm = \"RSA\",\n    });\n\n    var ca = new Tls.Index.SelfSignedCert(\"ca\", new()\n    {\n        KeyAlgorithm = caKey.Algorithm,\n        PrivateKeyPem = caKey.PrivateKeyPem,\n        Subject = new[]\n        {\n            \n            {\n                { \"commonName\", \"Example CA\" },\n            },\n        },\n        IsCaCertificate = true,\n        ValidityPeriodHours = 360,\n        AllowedUses = new[]\n        {\n            \"cert_signing\",\n            \"server_auth\",\n        },\n    });\n\n    var example = new Tls.Index.CertRequest(\"example\", new()\n    {\n        KeyAlgorithm = key.Algorithm,\n        PrivateKeyPem = key.PrivateKeyPem,\n        Subject = new[]\n        {\n            \n            {\n                { \"commonName\", \"example.com\" },\n            },\n        },\n        DnsNames = new[]\n        {\n            \"example.com\",\n            \"www.example.com\",\n        },\n    });\n\n    var cert = new Tls.Index.LocallySignedCert(\"cert\", new()\n    {\n        CertRequestPem = example.CertRequestPem,\n        CaKeyAlgorithm = caKey.Algorithm,\n        CaPrivateKeyPem = caKey.PrivateKeyPem,\n        CaCertPem = ca.CertPem,\n        ValidityPeriodHours = 360,\n        AllowedUses = new[]\n        {\n            \"cert_signing\",\n            \"server_auth\",\n        },\n    });\n\n    var config = Fastly.GetTlsConfiguration.Invoke(new()\n    {\n        TlsService = \"PLATFORM\",\n    });\n\n    var keyTlsPrivateKey = new Fastly.TlsPrivateKey(\"key\", new()\n    {\n        KeyPem = key.PrivateKeyPem,\n        Name = \"tf-demo\",\n    });\n\n    var certTlsPlatformCertificate = new Fastly.TlsPlatformCertificate(\"cert\", new()\n    {\n        CertificateBody = cert.CertPem,\n        IntermediatesBlob = ca.CertPem,\n        ConfigurationId = config.Apply(getTlsConfigurationResult =\u003e getTlsConfigurationResult.Id),\n        AllowUntrustedRoot = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn =\n        {\n            keyTlsPrivateKey,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi-tls/sdk/v4/go/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcaKey, err := tls.NewPrivateKey(ctx, \"ca_key\", \u0026tls.PrivateKeyArgs{\n\t\t\tAlgorithm: \"RSA\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tkey, err := tls.NewPrivateKey(ctx, \"key\", \u0026tls.PrivateKeyArgs{\n\t\t\tAlgorithm: \"RSA\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tca, err := tls.NewSelfSignedCert(ctx, \"ca\", \u0026tls.SelfSignedCertArgs{\n\t\t\tKeyAlgorithm:  caKey.Algorithm,\n\t\t\tPrivateKeyPem: caKey.PrivateKeyPem,\n\t\t\tSubject: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"commonName\": \"Example CA\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tIsCaCertificate:     true,\n\t\t\tValidityPeriodHours: 360,\n\t\t\tAllowedUses: []string{\n\t\t\t\t\"cert_signing\",\n\t\t\t\t\"server_auth\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample, err := tls.NewCertRequest(ctx, \"example\", \u0026tls.CertRequestArgs{\n\t\t\tKeyAlgorithm:  key.Algorithm,\n\t\t\tPrivateKeyPem: key.PrivateKeyPem,\n\t\t\tSubject: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"commonName\": \"example.com\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tDnsNames: []string{\n\t\t\t\t\"example.com\",\n\t\t\t\t\"www.example.com\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tcert, err := tls.NewLocallySignedCert(ctx, \"cert\", \u0026tls.LocallySignedCertArgs{\n\t\t\tCertRequestPem:      example.CertRequestPem,\n\t\t\tCaKeyAlgorithm:      caKey.Algorithm,\n\t\t\tCaPrivateKeyPem:     caKey.PrivateKeyPem,\n\t\t\tCaCertPem:           ca.CertPem,\n\t\t\tValidityPeriodHours: 360,\n\t\t\tAllowedUses: []string{\n\t\t\t\t\"cert_signing\",\n\t\t\t\t\"server_auth\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tconfig, err := fastly.GetTlsConfiguration(ctx, \u0026fastly.GetTlsConfigurationArgs{\n\t\t\tTlsService: pulumi.StringRef(\"PLATFORM\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tkeyTlsPrivateKey, err := fastly.NewTlsPrivateKey(ctx, \"key\", \u0026fastly.TlsPrivateKeyArgs{\n\t\t\tKeyPem: key.PrivateKeyPem,\n\t\t\tName:   pulumi.String(\"tf-demo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewTlsPlatformCertificate(ctx, \"cert\", \u0026fastly.TlsPlatformCertificateArgs{\n\t\t\tCertificateBody:    cert.CertPem,\n\t\t\tIntermediatesBlob:  ca.CertPem,\n\t\t\tConfigurationId:    pulumi.String(config.Id),\n\t\t\tAllowUntrustedRoot: pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tkeyTlsPrivateKey,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tls.privateKey;\nimport com.pulumi.tls.PrivateKeyArgs;\nimport com.pulumi.tls.selfSignedCert;\nimport com.pulumi.tls.SelfSignedCertArgs;\nimport com.pulumi.tls.certRequest;\nimport com.pulumi.tls.CertRequestArgs;\nimport com.pulumi.tls.locallySignedCert;\nimport com.pulumi.tls.LocallySignedCertArgs;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsConfigurationArgs;\nimport com.pulumi.fastly.TlsPrivateKey;\nimport com.pulumi.fastly.TlsPrivateKeyArgs;\nimport com.pulumi.fastly.TlsPlatformCertificate;\nimport com.pulumi.fastly.TlsPlatformCertificateArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var caKey = new PrivateKey(\"caKey\", PrivateKeyArgs.builder()        \n            .algorithm(\"RSA\")\n            .build());\n\n        var key = new PrivateKey(\"key\", PrivateKeyArgs.builder()        \n            .algorithm(\"RSA\")\n            .build());\n\n        var ca = new SelfSignedCert(\"ca\", SelfSignedCertArgs.builder()        \n            .keyAlgorithm(caKey.algorithm())\n            .privateKeyPem(caKey.privateKeyPem())\n            .subject(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .isCaCertificate(true)\n            .validityPeriodHours(360)\n            .allowedUses(            \n                \"cert_signing\",\n                \"server_auth\")\n            .build());\n\n        var example = new CertRequest(\"example\", CertRequestArgs.builder()        \n            .keyAlgorithm(key.algorithm())\n            .privateKeyPem(key.privateKeyPem())\n            .subject(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .dnsNames(            \n                \"example.com\",\n                \"www.example.com\")\n            .build());\n\n        var cert = new LocallySignedCert(\"cert\", LocallySignedCertArgs.builder()        \n            .certRequestPem(example.certRequestPem())\n            .caKeyAlgorithm(caKey.algorithm())\n            .caPrivateKeyPem(caKey.privateKeyPem())\n            .caCertPem(ca.certPem())\n            .validityPeriodHours(360)\n            .allowedUses(            \n                \"cert_signing\",\n                \"server_auth\")\n            .build());\n\n        final var config = FastlyFunctions.getTlsConfiguration(GetTlsConfigurationArgs.builder()\n            .tlsService(\"PLATFORM\")\n            .build());\n\n        var keyTlsPrivateKey = new TlsPrivateKey(\"keyTlsPrivateKey\", TlsPrivateKeyArgs.builder()        \n            .keyPem(key.privateKeyPem())\n            .name(\"tf-demo\")\n            .build());\n\n        var certTlsPlatformCertificate = new TlsPlatformCertificate(\"certTlsPlatformCertificate\", TlsPlatformCertificateArgs.builder()        \n            .certificateBody(cert.certPem())\n            .intermediatesBlob(ca.certPem())\n            .configurationId(config.applyValue(getTlsConfigurationResult -\u003e getTlsConfigurationResult.id()))\n            .allowUntrustedRoot(true)\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(keyTlsPrivateKey)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  caKey:\n    type: tls:privateKey\n    name: ca_key\n    properties:\n      algorithm: RSA\n  key:\n    type: tls:privateKey\n    properties:\n      algorithm: RSA\n  ca:\n    type: tls:selfSignedCert\n    properties:\n      keyAlgorithm: ${caKey.algorithm}\n      privateKeyPem: ${caKey.privateKeyPem}\n      subject:\n        - commonName: Example CA\n      isCaCertificate: true\n      validityPeriodHours: 360\n      allowedUses:\n        - cert_signing\n        - server_auth\n  example:\n    type: tls:certRequest\n    properties:\n      keyAlgorithm: ${key.algorithm}\n      privateKeyPem: ${key.privateKeyPem}\n      subject:\n        - commonName: example.com\n      dnsNames:\n        - example.com\n        - www.example.com\n  cert:\n    type: tls:locallySignedCert\n    properties:\n      certRequestPem: ${example.certRequestPem}\n      caKeyAlgorithm: ${caKey.algorithm}\n      caPrivateKeyPem: ${caKey.privateKeyPem}\n      caCertPem: ${ca.certPem}\n      validityPeriodHours: 360\n      allowedUses:\n        - cert_signing\n        - server_auth\n  keyTlsPrivateKey:\n    type: fastly:TlsPrivateKey\n    name: key\n    properties:\n      keyPem: ${key.privateKeyPem}\n      name: tf-demo\n  certTlsPlatformCertificate:\n    type: fastly:TlsPlatformCertificate\n    name: cert\n    properties:\n      certificateBody: ${cert.certPem}\n      intermediatesBlob: ${ca.certPem}\n      configurationId: ${config.id}\n      allowUntrustedRoot: true\n    options:\n      dependson:\n        - ${keyTlsPrivateKey}\nvariables:\n  config:\n    fn::invoke:\n      Function: fastly:getTlsConfiguration\n      Arguments:\n        tlsService: PLATFORM\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA certificate can be imported using its Fastly certificate ID, e.g.\n\n```sh\n$ pulumi import fastly:index/tlsPlatformCertificate:TlsPlatformCertificate demo xxxxxxxxxxx\n```\n\n",
            "properties": {
                "allowUntrustedRoot": {
                    "type": "boolean",
                    "description": "Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.\n"
                },
                "certificateBody": {
                    "type": "string",
                    "description": "PEM-formatted certificate.\n"
                },
                "configurationId": {
                    "type": "string",
                    "description": "ID of TLS configuration to be used to terminate TLS traffic.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp (GMT) when the certificate was created.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.\n"
                },
                "intermediatesBlob": {
                    "type": "string",
                    "description": "PEM-formatted certificate chain from the `certificate_body` to its root.\n"
                },
                "notAfter": {
                    "type": "string",
                    "description": "Timestamp (GMT) when the certificate will expire.\n"
                },
                "notBefore": {
                    "type": "string",
                    "description": "Timestamp (GMT) when the certificate will become valid.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp (GMT) when the certificate was last updated.\n"
                }
            },
            "required": [
                "certificateBody",
                "configurationId",
                "createdAt",
                "domains",
                "intermediatesBlob",
                "notAfter",
                "notBefore",
                "replace",
                "updatedAt"
            ],
            "inputProperties": {
                "allowUntrustedRoot": {
                    "type": "boolean",
                    "description": "Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.\n"
                },
                "certificateBody": {
                    "type": "string",
                    "description": "PEM-formatted certificate.\n"
                },
                "configurationId": {
                    "type": "string",
                    "description": "ID of TLS configuration to be used to terminate TLS traffic.\n",
                    "willReplaceOnChanges": true
                },
                "intermediatesBlob": {
                    "type": "string",
                    "description": "PEM-formatted certificate chain from the `certificate_body` to its root.\n"
                }
            },
            "requiredInputs": [
                "certificateBody",
                "configurationId",
                "intermediatesBlob"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TlsPlatformCertificate resources.\n",
                "properties": {
                    "allowUntrustedRoot": {
                        "type": "boolean",
                        "description": "Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.\n"
                    },
                    "certificateBody": {
                        "type": "string",
                        "description": "PEM-formatted certificate.\n"
                    },
                    "configurationId": {
                        "type": "string",
                        "description": "ID of TLS configuration to be used to terminate TLS traffic.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the certificate was created.\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.\n"
                    },
                    "intermediatesBlob": {
                        "type": "string",
                        "description": "PEM-formatted certificate chain from the `certificate_body` to its root.\n"
                    },
                    "notAfter": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the certificate will expire.\n"
                    },
                    "notBefore": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the certificate will become valid.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the certificate was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/tlsPrivateKey:TlsPrivateKey": {
            "description": "Uploads a Custom TLS Private Key to Fastly. This can be combined with a `fastly.TlsCertificate` resource to provide a TLS Certificate able to be applied to a Fastly Service.\n\nThe Private Key resource requires a key in PEM format, and a name to identify it.\n\n## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\nimport * as tls from \"@pulumi/tls\";\n\nconst demo = new tls.index.PrivateKey(\"demo\", {algorithm: \"RSA\"});\nconst demoTlsPrivateKey = new fastly.TlsPrivateKey(\"demo\", {\n    keyPem: demo.privateKeyPem,\n    name: \"tf-demo\",\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\nimport pulumi_tls as tls\n\ndemo = tls.index.PrivateKey(\"demo\", algorithm=RSA)\ndemo_tls_private_key = fastly.TlsPrivateKey(\"demo\",\n    key_pem=demo[\"privateKeyPem\"],\n    name=\"tf-demo\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\nusing Tls = Pulumi.Tls;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = new Tls.Index.PrivateKey(\"demo\", new()\n    {\n        Algorithm = \"RSA\",\n    });\n\n    var demoTlsPrivateKey = new Fastly.TlsPrivateKey(\"demo\", new()\n    {\n        KeyPem = demo.PrivateKeyPem,\n        Name = \"tf-demo\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi-tls/sdk/v4/go/tls\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemo, err := tls.NewPrivateKey(ctx, \"demo\", \u0026tls.PrivateKeyArgs{\n\t\t\tAlgorithm: \"RSA\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewTlsPrivateKey(ctx, \"demo\", \u0026fastly.TlsPrivateKeyArgs{\n\t\t\tKeyPem: demo.PrivateKeyPem,\n\t\t\tName:   pulumi.String(\"tf-demo\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.tls.privateKey;\nimport com.pulumi.tls.PrivateKeyArgs;\nimport com.pulumi.fastly.TlsPrivateKey;\nimport com.pulumi.fastly.TlsPrivateKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var demo = new PrivateKey(\"demo\", PrivateKeyArgs.builder()        \n            .algorithm(\"RSA\")\n            .build());\n\n        var demoTlsPrivateKey = new TlsPrivateKey(\"demoTlsPrivateKey\", TlsPrivateKeyArgs.builder()        \n            .keyPem(demo.privateKeyPem())\n            .name(\"tf-demo\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo:\n    type: tls:privateKey\n    properties:\n      algorithm: RSA\n  demoTlsPrivateKey:\n    type: fastly:TlsPrivateKey\n    name: demo\n    properties:\n      keyPem: ${demo.privateKeyPem}\n      name: tf-demo\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA Private Key can be imported using its ID, e.g.\n\n```sh\n$ pulumi import fastly:index/tlsPrivateKey:TlsPrivateKey demo xxxxxxxxxxx\n```\n\n",
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Time-stamp (GMT) when the private key was created.\n"
                },
                "keyLength": {
                    "type": "integer",
                    "description": "The key length used to generate the private key.\n"
                },
                "keyPem": {
                    "type": "string",
                    "description": "Private key in PEM format.\n",
                    "secret": true
                },
                "keyType": {
                    "type": "string",
                    "description": "The algorithm used to generate the private key. Must be RSA.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Customisable name of the private key.\n"
                },
                "publicKeySha1": {
                    "type": "string",
                    "description": "Useful for safely identifying the key.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Whether Fastly recommends replacing this private key.\n"
                }
            },
            "required": [
                "createdAt",
                "keyLength",
                "keyPem",
                "keyType",
                "name",
                "publicKeySha1",
                "replace"
            ],
            "inputProperties": {
                "keyPem": {
                    "type": "string",
                    "description": "Private key in PEM format.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Customisable name of the private key.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "keyPem"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TlsPrivateKey resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Time-stamp (GMT) when the private key was created.\n"
                    },
                    "keyLength": {
                        "type": "integer",
                        "description": "The key length used to generate the private key.\n"
                    },
                    "keyPem": {
                        "type": "string",
                        "description": "Private key in PEM format.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "keyType": {
                        "type": "string",
                        "description": "The algorithm used to generate the private key. Must be RSA.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Customisable name of the private key.\n",
                        "willReplaceOnChanges": true
                    },
                    "publicKeySha1": {
                        "type": "string",
                        "description": "Useful for safely identifying the key.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Whether Fastly recommends replacing this private key.\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/tlsSubscription:TlsSubscription": {
            "description": "Enables TLS on a domain using a certificate managed by Fastly.\n\nDNS records need to be modified on the domain being secured, in order to respond to the ACME domain ownership challenge.\n\nThere are two options for doing this: the `managed_dns_challenges`, which is the default method; and the `managed_http_challenges`, which points production traffic to Fastly.\n\n\u003e See the [Fastly documentation](https://docs.fastly.com/en/guides/serving-https-traffic-using-fastly-managed-certificates#verifying-domain-ownership) for more information on verifying domain ownership.\n\nThe examples below demonstrate usage with AWS Route53 to configure DNS, and the `fastly.TlsSubscriptionValidation` resource to wait for validation to complete.\n\n## Import\n\nA subscription can be imported using its Fastly subscription ID, e.g.\n\n```sh\n$ pulumi import fastly:index/tlsSubscription:TlsSubscription demo xxxxxxxxxxx\n```\n\n",
            "properties": {
                "certificateAuthority": {
                    "type": "string",
                    "description": "The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt` or `globalsign`.\n"
                },
                "certificateId": {
                    "type": "string",
                    "description": "The certificate ID associated with the subscription.\n"
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.\n"
                },
                "configurationId": {
                    "type": "string",
                    "description": "The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Timestamp (GMT) when the subscription was created.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains on which to enable TLS.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Always delete subscription, even when active domains are present. Defaults to false.\n\n!\u003e **Warning:** by default, the Fastly API protects you from disabling production traffic by preventing updating or deleting subscriptions with active domains. The use of `force_update` and `force_destroy` will override these protections. Take extra care using these options if you are handling production traffic.\n"
                },
                "forceUpdate": {
                    "type": "boolean",
                    "description": "Always update subscription, even when active domains are present. Defaults to false.\n"
                },
                "managedDnsChallenge": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "The details required to configure DNS to respond to ACME DNS challenge in order to verify domain ownership.\n",
                    "deprecationMessage": "Use 'managed_dns_challenges' attribute instead"
                },
                "managedDnsChallenges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/TlsSubscriptionManagedDnsChallenge:TlsSubscriptionManagedDnsChallenge"
                    },
                    "description": "A list of options for configuring DNS to respond to ACME DNS challenge in order to verify domain ownership.\n"
                },
                "managedHttpChallenges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/fastly:index/TlsSubscriptionManagedHttpChallenge:TlsSubscriptionManagedHttpChallenge"
                    },
                    "description": "A list of options for configuring DNS to respond to ACME HTTP challenge in order to verify domain ownership. Best accessed through a `for` expression to filter the relevant record.\n"
                },
                "state": {
                    "type": "string",
                    "description": "The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Timestamp (GMT) when the subscription was updated.\n"
                }
            },
            "required": [
                "certificateAuthority",
                "certificateId",
                "commonName",
                "configurationId",
                "createdAt",
                "domains",
                "managedDnsChallenge",
                "managedDnsChallenges",
                "managedHttpChallenges",
                "state",
                "updatedAt"
            ],
            "inputProperties": {
                "certificateAuthority": {
                    "type": "string",
                    "description": "The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt` or `globalsign`.\n",
                    "willReplaceOnChanges": true
                },
                "commonName": {
                    "type": "string",
                    "description": "The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.\n"
                },
                "configurationId": {
                    "type": "string",
                    "description": "The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.\n"
                },
                "domains": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains on which to enable TLS.\n"
                },
                "forceDestroy": {
                    "type": "boolean",
                    "description": "Always delete subscription, even when active domains are present. Defaults to false.\n\n!\u003e **Warning:** by default, the Fastly API protects you from disabling production traffic by preventing updating or deleting subscriptions with active domains. The use of `force_update` and `force_destroy` will override these protections. Take extra care using these options if you are handling production traffic.\n"
                },
                "forceUpdate": {
                    "type": "boolean",
                    "description": "Always update subscription, even when active domains are present. Defaults to false.\n"
                }
            },
            "requiredInputs": [
                "certificateAuthority",
                "domains"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TlsSubscription resources.\n",
                "properties": {
                    "certificateAuthority": {
                        "type": "string",
                        "description": "The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt` or `globalsign`.\n",
                        "willReplaceOnChanges": true
                    },
                    "certificateId": {
                        "type": "string",
                        "description": "The certificate ID associated with the subscription.\n"
                    },
                    "commonName": {
                        "type": "string",
                        "description": "The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.\n"
                    },
                    "configurationId": {
                        "type": "string",
                        "description": "The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the subscription was created.\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains on which to enable TLS.\n"
                    },
                    "forceDestroy": {
                        "type": "boolean",
                        "description": "Always delete subscription, even when active domains are present. Defaults to false.\n\n!\u003e **Warning:** by default, the Fastly API protects you from disabling production traffic by preventing updating or deleting subscriptions with active domains. The use of `force_update` and `force_destroy` will override these protections. Take extra care using these options if you are handling production traffic.\n"
                    },
                    "forceUpdate": {
                        "type": "boolean",
                        "description": "Always update subscription, even when active domains are present. Defaults to false.\n"
                    },
                    "managedDnsChallenge": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "The details required to configure DNS to respond to ACME DNS challenge in order to verify domain ownership.\n",
                        "deprecationMessage": "Use 'managed_dns_challenges' attribute instead"
                    },
                    "managedDnsChallenges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/TlsSubscriptionManagedDnsChallenge:TlsSubscriptionManagedDnsChallenge"
                        },
                        "description": "A list of options for configuring DNS to respond to ACME DNS challenge in order to verify domain ownership.\n"
                    },
                    "managedHttpChallenges": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/fastly:index/TlsSubscriptionManagedHttpChallenge:TlsSubscriptionManagedHttpChallenge"
                        },
                        "description": "A list of options for configuring DNS to respond to ACME HTTP challenge in order to verify domain ownership. Best accessed through a `for` expression to filter the relevant record.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the subscription was updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/tlsSubscriptionValidation:TlsSubscriptionValidation": {
            "description": "This resource represents a successful validation of a Fastly TLS Subscription in concert with other resources.\n\nMost commonly, this resource is used together with a resource for a DNS record and `fastly.TlsSubscription` to request a DNS validated certificate, deploy the required validation records and wait for validation to complete.\n\n\u003e **Warning:** This resource implements a part of the validation workflow. It does not represent a real-world entity in Fastly, therefore changing or deleting this resource on its own has no immediate effect.\n\n",
            "properties": {
                "subscriptionId": {
                    "type": "string",
                    "description": "The ID of the TLS Subscription that should be validated.\n"
                }
            },
            "required": [
                "subscriptionId"
            ],
            "inputProperties": {
                "subscriptionId": {
                    "type": "string",
                    "description": "The ID of the TLS Subscription that should be validated.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "subscriptionId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TlsSubscriptionValidation resources.\n",
                "properties": {
                    "subscriptionId": {
                        "type": "string",
                        "description": "The ID of the TLS Subscription that should be validated.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "fastly:index/user:User": {
            "description": "Provides a Fastly User, representing the configuration for a user account for interacting with Fastly.\n\nThe User resource requires a login and name, and optionally a role.\n\n## Example Usage\n\nBasic usage:\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst demo = new fastly.User(\"demo\", {\n    login: \"demo@example.com\",\n    name: \"Demo User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndemo = fastly.User(\"demo\",\n    login=\"demo@example.com\",\n    name=\"Demo User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = new Fastly.User(\"demo\", new()\n    {\n        Login = \"demo@example.com\",\n        Name = \"Demo User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fastly.NewUser(ctx, \"demo\", \u0026fastly.UserArgs{\n\t\t\tLogin: pulumi.String(\"demo@example.com\"),\n\t\t\tName:  pulumi.String(\"Demo User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.User;\nimport com.pulumi.fastly.UserArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var demo = new User(\"demo\", UserArgs.builder()        \n            .login(\"demo@example.com\")\n            .name(\"Demo User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  demo:\n    type: fastly:User\n    properties:\n      login: demo@example.com\n      name: Demo User\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nA Fastly User can be imported using their user ID, e.g.\n\n```sh\n$ pulumi import fastly:index/user:User demo xxxxxxxxxxxxxxxxxxxx\n```\n\n",
            "properties": {
                "login": {
                    "type": "string",
                    "description": "The email address, which is the login name, of the User\n"
                },
                "name": {
                    "type": "string",
                    "description": "The real life name of the user\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of this user. Can be `user` (the default), `billing`, `engineer`, or `superuser`. For detailed information on the abilities granted to each role, see [Fastly's Documentation on User roles](https://docs.fastly.com/en/guides/configuring-user-roles-and-permissions#user-roles-and-what-they-can-do)\n"
                }
            },
            "required": [
                "login",
                "name"
            ],
            "inputProperties": {
                "login": {
                    "type": "string",
                    "description": "The email address, which is the login name, of the User\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The real life name of the user\n"
                },
                "role": {
                    "type": "string",
                    "description": "The role of this user. Can be `user` (the default), `billing`, `engineer`, or `superuser`. For detailed information on the abilities granted to each role, see [Fastly's Documentation on User roles](https://docs.fastly.com/en/guides/configuring-user-roles-and-permissions#user-roles-and-what-they-can-do)\n"
                }
            },
            "requiredInputs": [
                "login"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "login": {
                        "type": "string",
                        "description": "The email address, which is the login name, of the User\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The real life name of the user\n"
                    },
                    "role": {
                        "type": "string",
                        "description": "The role of this user. Can be `user` (the default), `billing`, `engineer`, or `superuser`. For detailed information on the abilities granted to each role, see [Fastly's Documentation on User roles](https://docs.fastly.com/en/guides/configuring-user-roles-and-permissions#user-roles-and-what-they-can-do)\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "fastly:index/getConfigstores:getConfigstores": {
            "outputs": {
                "description": "A collection of values returned by getConfigstores.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "stores": {
                        "description": "List of all Config Stores.\n",
                        "items": {
                            "$ref": "#/types/fastly:index/getConfigstoresStore:getConfigstoresStore"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "stores",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getDatacenters:getDatacenters": {
            "description": "Use this data source to get the list of the [Fastly datacenters](https://developer.fastly.com/reference/api/utils/pops/).\n\n",
            "outputs": {
                "description": "A collection of values returned by getDatacenters.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "pops": {
                        "description": "A list of all Fastly POPs.\n",
                        "items": {
                            "$ref": "#/types/fastly:index/getDatacentersPop:getDatacentersPop"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "pops",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getDictionaries:getDictionaries": {
            "description": "Use this data source to get a list of [Fastly dictionaries](https://developer.fastly.com/reference/api/dictionaries/) for the specified service/version.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst exampleServiceVcl = new fastly.ServiceVcl(\"example\", {\n    name: \"Example Service\",\n    domains: [{\n        name: \"example.com\",\n    }],\n    dictionaries: [\n        {\n            name: \"example_1\",\n        },\n        {\n            name: \"example_2\",\n        },\n        {\n            name: \"example_3\",\n        },\n    ],\n    forceDestroy: true,\n});\nconst example = fastly.getDictionariesOutput({\n    serviceId: exampleServiceVcl.id,\n    serviceVersion: exampleServiceVcl.activeVersion,\n});\nexport const serviceDictionaries = example;\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample_service_vcl = fastly.ServiceVcl(\"example\",\n    name=\"Example Service\",\n    domains=[fastly.ServiceVclDomainArgs(\n        name=\"example.com\",\n    )],\n    dictionaries=[\n        fastly.ServiceVclDictionaryArgs(\n            name=\"example_1\",\n        ),\n        fastly.ServiceVclDictionaryArgs(\n            name=\"example_2\",\n        ),\n        fastly.ServiceVclDictionaryArgs(\n            name=\"example_3\",\n        ),\n    ],\n    force_destroy=True)\nexample = fastly.get_dictionaries_output(service_id=example_service_vcl.id,\n    service_version=example_service_vcl.active_version)\npulumi.export(\"serviceDictionaries\", example)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleServiceVcl = new Fastly.ServiceVcl(\"example\", new()\n    {\n        Name = \"Example Service\",\n        Domains = new[]\n        {\n            new Fastly.Inputs.ServiceVclDomainArgs\n            {\n                Name = \"example.com\",\n            },\n        },\n        Dictionaries = new[]\n        {\n            new Fastly.Inputs.ServiceVclDictionaryArgs\n            {\n                Name = \"example_1\",\n            },\n            new Fastly.Inputs.ServiceVclDictionaryArgs\n            {\n                Name = \"example_2\",\n            },\n            new Fastly.Inputs.ServiceVclDictionaryArgs\n            {\n                Name = \"example_3\",\n            },\n        },\n        ForceDestroy = true,\n    });\n\n    var example = Fastly.GetDictionaries.Invoke(new()\n    {\n        ServiceId = exampleServiceVcl.Id,\n        ServiceVersion = exampleServiceVcl.ActiveVersion,\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"serviceDictionaries\"] = example,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleServiceVcl, err := fastly.NewServiceVcl(ctx, \"example\", \u0026fastly.ServiceVclArgs{\n\t\t\tName: pulumi.String(\"Example Service\"),\n\t\t\tDomains: fastly.ServiceVclDomainArray{\n\t\t\t\t\u0026fastly.ServiceVclDomainArgs{\n\t\t\t\t\tName: pulumi.String(\"example.com\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDictionaries: fastly.ServiceVclDictionaryArray{\n\t\t\t\t\u0026fastly.ServiceVclDictionaryArgs{\n\t\t\t\t\tName: pulumi.String(\"example_1\"),\n\t\t\t\t},\n\t\t\t\t\u0026fastly.ServiceVclDictionaryArgs{\n\t\t\t\t\tName: pulumi.String(\"example_2\"),\n\t\t\t\t},\n\t\t\t\t\u0026fastly.ServiceVclDictionaryArgs{\n\t\t\t\t\tName: pulumi.String(\"example_3\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tForceDestroy: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample := fastly.GetDictionariesOutput(ctx, fastly.GetDictionariesOutputArgs{\n\t\t\tServiceId:      exampleServiceVcl.ID(),\n\t\t\tServiceVersion: exampleServiceVcl.ActiveVersion,\n\t\t}, nil)\n\t\tctx.Export(\"serviceDictionaries\", example)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.ServiceVcl;\nimport com.pulumi.fastly.ServiceVclArgs;\nimport com.pulumi.fastly.inputs.ServiceVclDomainArgs;\nimport com.pulumi.fastly.inputs.ServiceVclDictionaryArgs;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetDictionariesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var exampleServiceVcl = new ServiceVcl(\"exampleServiceVcl\", ServiceVclArgs.builder()        \n            .name(\"Example Service\")\n            .domains(ServiceVclDomainArgs.builder()\n                .name(\"example.com\")\n                .build())\n            .dictionaries(            \n                ServiceVclDictionaryArgs.builder()\n                    .name(\"example_1\")\n                    .build(),\n                ServiceVclDictionaryArgs.builder()\n                    .name(\"example_2\")\n                    .build(),\n                ServiceVclDictionaryArgs.builder()\n                    .name(\"example_3\")\n                    .build())\n            .forceDestroy(true)\n            .build());\n\n        final var example = FastlyFunctions.getDictionaries(GetDictionariesArgs.builder()\n            .serviceId(exampleServiceVcl.id())\n            .serviceVersion(exampleServiceVcl.activeVersion())\n            .build());\n\n        ctx.export(\"serviceDictionaries\", example.applyValue(getDictionariesResult -\u003e getDictionariesResult));\n    }\n}\n```\n```yaml\nresources:\n  exampleServiceVcl:\n    type: fastly:ServiceVcl\n    name: example\n    properties:\n      name: Example Service\n      domains:\n        - name: example.com\n      dictionaries:\n        - name: example_1\n        - name: example_2\n        - name: example_3\n      forceDestroy: true\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getDictionaries\n      Arguments:\n        serviceId: ${exampleServiceVcl.id}\n        serviceVersion: ${exampleServiceVcl.activeVersion}\noutputs:\n  serviceDictionaries: ${example}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n[1]: https://developer.fastly.com/reference/api/dictionaries/\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDictionaries.\n",
                "properties": {
                    "serviceId": {
                        "type": "string",
                        "description": "Alphanumeric string identifying the service.\n"
                    },
                    "serviceVersion": {
                        "type": "integer",
                        "description": "Integer identifying a service version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "serviceId",
                    "serviceVersion"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDictionaries.\n",
                "properties": {
                    "dictionaries": {
                        "description": "List of all dictionaries for the version of the service.\n",
                        "items": {
                            "$ref": "#/types/fastly:index/getDictionariesDictionary:getDictionariesDictionary"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "serviceId": {
                        "description": "Alphanumeric string identifying the service.\n",
                        "type": "string"
                    },
                    "serviceVersion": {
                        "description": "Integer identifying a service version.\n",
                        "type": "integer"
                    }
                },
                "required": [
                    "dictionaries",
                    "serviceId",
                    "serviceVersion",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getFastlyIpRanges:getFastlyIpRanges": {
            "description": "Use this data source to get the [IP ranges](https://docs.fastly.com/guides/securing-communications/accessing-fastlys-ip-ranges) of Fastly edge nodes.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst fastly = fastly.getFastlyIpRanges({});\nconst fromFastly = new aws.index.SecurityGroup(\"from_fastly\", {\n    name: \"from_fastly\",\n    ingress: [{\n        fromPort: \"443\",\n        toPort: \"443\",\n        protocol: \"tcp\",\n        cidrBlocks: fastly.cidrBlocks,\n        ipv6CidrBlocks: fastly.ipv6CidrBlocks,\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_fastly as fastly\n\nfastly = fastly.get_fastly_ip_ranges()\nfrom_fastly = aws.index.SecurityGroup(\"from_fastly\",\n    name=from_fastly,\n    ingress=[{\n        fromPort: 443,\n        toPort: 443,\n        protocol: tcp,\n        cidrBlocks: fastly.cidr_blocks,\n        ipv6CidrBlocks: fastly.ipv6_cidr_blocks,\n    }])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var fastly = Fastly.GetFastlyIpRanges.Invoke();\n\n    var fromFastly = new Aws.Index.SecurityGroup(\"from_fastly\", new()\n    {\n        Name = \"from_fastly\",\n        Ingress = new[]\n        {\n            \n            {\n                { \"fromPort\", \"443\" },\n                { \"toPort\", \"443\" },\n                { \"protocol\", \"tcp\" },\n                { \"cidrBlocks\", fastly.Apply(getFastlyIpRangesResult =\u003e getFastlyIpRangesResult.CidrBlocks) },\n                { \"ipv6CidrBlocks\", fastly.Apply(getFastlyIpRangesResult =\u003e getFastlyIpRangesResult.Ipv6CidrBlocks) },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-aws/sdk/v5/go/aws\"\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfastly, err := fastly.GetFastlyIpRanges(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = aws.NewSecurityGroup(ctx, \"from_fastly\", \u0026aws.SecurityGroupArgs{\n\t\t\tName: \"from_fastly\",\n\t\t\tIngress: []map[string]interface{}{\n\t\t\t\tmap[string]interface{}{\n\t\t\t\t\t\"fromPort\":       \"443\",\n\t\t\t\t\t\"toPort\":         \"443\",\n\t\t\t\t\t\"protocol\":       \"tcp\",\n\t\t\t\t\t\"cidrBlocks\":     fastly.CidrBlocks,\n\t\t\t\t\t\"ipv6CidrBlocks\": fastly.Ipv6CidrBlocks,\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.aws.securityGroup;\nimport com.pulumi.aws.SecurityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var fastly = FastlyFunctions.getFastlyIpRanges();\n\n        var fromFastly = new SecurityGroup(\"fromFastly\", SecurityGroupArgs.builder()        \n            .name(\"from_fastly\")\n            .ingress(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  fromFastly:\n    type: aws:securityGroup\n    name: from_fastly\n    properties:\n      name: from_fastly\n      ingress:\n        - fromPort: '443'\n          toPort: '443'\n          protocol: tcp\n          cidrBlocks: ${fastly.cidrBlocks}\n          ipv6CidrBlocks: ${fastly.ipv6CidrBlocks}\nvariables:\n  fastly:\n    fn::invoke:\n      Function: fastly:getFastlyIpRanges\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n[1]: https://docs.fastly.com/guides/securing-communications/accessing-fastlys-ip-ranges\n",
            "outputs": {
                "description": "A collection of values returned by getFastlyIpRanges.\n",
                "properties": {
                    "cidrBlocks": {
                        "description": "The lexically ordered list of ipv4 CIDR blocks.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ipv6CidrBlocks": {
                        "description": "The lexically ordered list of ipv6 CIDR blocks.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "cidrBlocks",
                    "ipv6CidrBlocks",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getKvstores:getKvstores": {
            "outputs": {
                "description": "A collection of values returned by getKvstores.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "stores": {
                        "description": "List of all KV Stores.\n",
                        "items": {
                            "$ref": "#/types/fastly:index/getKvstoresStore:getKvstoresStore"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "stores",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getPackageHash:getPackageHash": {
            "description": "Use this data source to generate a SHA512 hash of all files (in sorted order) within the package.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getPackageHash({\n    filename: \"./path/to/package.tar.gz\",\n});\nconst exampleServiceCompute = new fastly.ServiceCompute(\"example\", {\"package\": {\n    filename: \"./path/to/package.tar.gz\",\n    sourceCodeHash: example.then(example =\u003e example.hash),\n}});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_package_hash(filename=\"./path/to/package.tar.gz\")\nexample_service_compute = fastly.ServiceCompute(\"example\", package=fastly.ServiceComputePackageArgs(\n    filename=\"./path/to/package.tar.gz\",\n    source_code_hash=example.hash,\n))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetPackageHash.Invoke(new()\n    {\n        Filename = \"./path/to/package.tar.gz\",\n    });\n\n    var exampleServiceCompute = new Fastly.ServiceCompute(\"example\", new()\n    {\n        Package = new Fastly.Inputs.ServiceComputePackageArgs\n        {\n            Filename = \"./path/to/package.tar.gz\",\n            SourceCodeHash = example.Apply(getPackageHashResult =\u003e getPackageHashResult.Hash),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := fastly.GetPackageHash(ctx, \u0026fastly.GetPackageHashArgs{\n\t\t\tFilename: pulumi.StringRef(\"./path/to/package.tar.gz\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewServiceCompute(ctx, \"example\", \u0026fastly.ServiceComputeArgs{\n\t\t\tPackage: \u0026fastly.ServiceComputePackageArgs{\n\t\t\t\tFilename:       pulumi.String(\"./path/to/package.tar.gz\"),\n\t\t\t\tSourceCodeHash: pulumi.String(example.Hash),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetPackageHashArgs;\nimport com.pulumi.fastly.ServiceCompute;\nimport com.pulumi.fastly.ServiceComputeArgs;\nimport com.pulumi.fastly.inputs.ServiceComputePackageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getPackageHash(GetPackageHashArgs.builder()\n            .filename(\"./path/to/package.tar.gz\")\n            .build());\n\n        var exampleServiceCompute = new ServiceCompute(\"exampleServiceCompute\", ServiceComputeArgs.builder()        \n            .package_(ServiceComputePackageArgs.builder()\n                .filename(\"./path/to/package.tar.gz\")\n                .sourceCodeHash(example.applyValue(getPackageHashResult -\u003e getPackageHashResult.hash()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleServiceCompute:\n    type: fastly:ServiceCompute\n    name: example\n    properties:\n      package:\n        filename: ./path/to/package.tar.gz\n        sourceCodeHash: ${example.hash}\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getPackageHash\n      Arguments:\n        filename: ./path/to/package.tar.gz\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPackageHash.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified\n"
                    },
                    "filename": {
                        "type": "string",
                        "description": "The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getPackageHash.\n",
                "properties": {
                    "content": {
                        "description": "The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified\n",
                        "type": "string"
                    },
                    "filename": {
                        "description": "The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified\n",
                        "type": "string"
                    },
                    "hash": {
                        "description": "A SHA512 hash of all files (in sorted order) within the package.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "hash",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getSecretstores:getSecretstores": {
            "outputs": {
                "description": "A collection of values returned by getSecretstores.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "stores": {
                        "description": "List of all Secrets Stores.\n",
                        "items": {
                            "$ref": "#/types/fastly:index/getSecretstoresStore:getSecretstoresStore"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "stores",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getServices:getServices": {
            "description": "Use this data source to get the list of the [Fastly services](https://developer.fastly.com/reference/api/services/service/).\n\n",
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "details": {
                        "description": "A detailed list of Fastly services in your account. This is limited to the services the API token can read.\n",
                        "items": {
                            "$ref": "#/types/fastly:index/getServicesDetail:getServicesDetail"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ids": {
                        "description": "A list of service IDs in your account. This is limited to the services the API token can read.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "details",
                    "ids",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsActivation:getTlsActivation": {
            "description": "Use this data source to get information on a TLS activation, including the certificate used, and the domain on which TLS was enabled.\n\n\u003e **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination\nof filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination\nwith any of the others.\n\n\u003e **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsActivation({\n    domain: \"example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_activation(domain=\"example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsActivation.Invoke(new()\n    {\n        Domain = \"example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fastly.LookupTlsActivation(ctx, \u0026fastly.LookupTlsActivationArgs{\n\t\t\tDomain: pulumi.StringRef(\"example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsActivationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getTlsActivation(GetTlsActivationArgs.builder()\n            .domain(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getTlsActivation\n      Arguments:\n        domain: example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTlsActivation.\n",
                "properties": {
                    "certificateId": {
                        "type": "string",
                        "description": "ID of the TLS Certificate used.\n"
                    },
                    "configurationId": {
                        "type": "string",
                        "description": "ID of the TLS Configuration used.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Domain that TLS was enabled on.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Fastly Activation ID. Conflicts with all other filters.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTlsActivation.\n",
                "properties": {
                    "certificateId": {
                        "description": "ID of the TLS Certificate used.\n",
                        "type": "string"
                    },
                    "configurationId": {
                        "description": "ID of the TLS Configuration used.\n",
                        "type": "string"
                    },
                    "createdAt": {
                        "description": "Timestamp (GMT) when TLS was enabled.\n",
                        "type": "string"
                    },
                    "domain": {
                        "description": "Domain that TLS was enabled on.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Fastly Activation ID. Conflicts with all other filters.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "certificateId",
                    "configurationId",
                    "createdAt",
                    "domain",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsActivationIds:getTlsActivationIds": {
            "description": "Use this data source to get the list of TLS Activation identifiers in Fastly.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsActivationIds({\n    certificateId: exampleFastlyTlsCertificate.id,\n});\nconst exampleGetTlsActivation = example.then(example =\u003e .reduce((__obj, [, ]) =\u003e ({ ...__obj, [__key]: fastly.getTlsActivation({\n    id: __value,\n}) })));\nexport const activationDomains = exampleGetTlsActivation.apply(exampleGetTlsActivation =\u003e Object.values(exampleGetTlsActivation).map(a =\u003e (a.domain)));\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_activation_ids(certificate_id=example_fastly_tls_certificate[\"id\"])\nexample_get_tls_activation = {__key: fastly.get_tls_activation(id=__value) for __key, __value in example.ids}\npulumi.export(\"activationDomains\", [a.domain for a in example_get_tls_activation])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsActivationIds.Invoke(new()\n    {\n        CertificateId = exampleFastlyTlsCertificate.Id,\n    });\n\n    var exampleGetTlsActivation = ;\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"activationDomains\"] = exampleGetTlsActivation.Apply(exampleGetTlsActivation =\u003e (exampleGetTlsActivation).Values.Select(a =\u003e \n        {\n            return a.Domain;\n        }).ToList()),\n    };\n});\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTlsActivationIds.\n",
                "properties": {
                    "certificateId": {
                        "type": "string",
                        "description": "ID of TLS certificate used to filter activations\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTlsActivationIds.\n",
                "properties": {
                    "certificateId": {
                        "description": "ID of TLS certificate used to filter activations\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ids": {
                        "description": "List of IDs of the TLS Activations.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ids",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsCertificate:getTlsCertificate": {
            "description": "Use this data source to get information of a TLS certificate for use with other resources.\n\n\u003e **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination\nof filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination\nwith any of the others.\n\n\u003e **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsCertificate({\n    name: \"example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_certificate(name=\"example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsCertificate.Invoke(new()\n    {\n        Name = \"example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fastly.LookupTlsCertificate(ctx, \u0026fastly.LookupTlsCertificateArgs{\n\t\t\tName: pulumi.StringRef(\"example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getTlsCertificate(GetTlsCertificateArgs.builder()\n            .name(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getTlsCertificate\n      Arguments:\n        name: example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTlsCertificate.\n",
                "properties": {
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Domains that are listed in any certificates' Subject Alternative Names (SAN) list.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique ID assigned to certificate by Fastly\n"
                    },
                    "issuedTo": {
                        "type": "string",
                        "description": "The hostname for which a certificate was issued.\n"
                    },
                    "issuer": {
                        "type": "string",
                        "description": "The certificate authority that issued the certificate.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTlsCertificate.\n",
                "properties": {
                    "createdAt": {
                        "description": "Timestamp (GMT) when the certificate was created\n",
                        "type": "string"
                    },
                    "domains": {
                        "description": "Domains that are listed in any certificates' Subject Alternative Names (SAN) list.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique ID assigned to certificate by Fastly\n",
                        "type": "string"
                    },
                    "issuedTo": {
                        "description": "The hostname for which a certificate was issued.\n",
                        "type": "string"
                    },
                    "issuer": {
                        "description": "The certificate authority that issued the certificate.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.\n",
                        "type": "string"
                    },
                    "replace": {
                        "description": "A recommendation from Fastly indicating the key associated with this certificate is in need of rotation\n",
                        "type": "boolean"
                    },
                    "serialNumber": {
                        "description": "A value assigned by the issuer that is unique to a certificate\n",
                        "type": "string"
                    },
                    "signatureAlgorithm": {
                        "description": "The algorithm used to sign the certificate\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "Timestamp (GMT) when the certificate was last updated\n",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "domains",
                    "id",
                    "issuedTo",
                    "issuer",
                    "name",
                    "replace",
                    "serialNumber",
                    "signatureAlgorithm",
                    "updatedAt"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsCertificateIds:getTlsCertificateIds": {
            "description": "Use this data source to get the IDs of available TLS certificates for use with other resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsCertificateIds({});\nconst exampleTlsActivation = new fastly.TlsActivation(\"example\", {certificateId: example.then(example =\u003e example.ids?.[0])});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_certificate_ids()\nexample_tls_activation = fastly.TlsActivation(\"example\", certificate_id=example.ids[0])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsCertificateIds.Invoke();\n\n    var exampleTlsActivation = new Fastly.TlsActivation(\"example\", new()\n    {\n        CertificateId = example.Apply(getTlsCertificateIdsResult =\u003e getTlsCertificateIdsResult.Ids[0]),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := fastly.GetTlsCertificateIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewTlsActivation(ctx, \"example\", \u0026fastly.TlsActivationArgs{\n\t\t\tCertificateId: pulumi.String(example.Ids[0]),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.TlsActivation;\nimport com.pulumi.fastly.TlsActivationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getTlsCertificateIds();\n\n        var exampleTlsActivation = new TlsActivation(\"exampleTlsActivation\", TlsActivationArgs.builder()        \n            .certificateId(example.applyValue(getTlsCertificateIdsResult -\u003e getTlsCertificateIdsResult.ids()[0]))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTlsActivation:\n    type: fastly:TlsActivation\n    name: example\n    properties:\n      certificateId: ${example.ids[0]}\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getTlsCertificateIds\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getTlsCertificateIds.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ids": {
                        "description": "List of IDs corresponding to Custom TLS certificates.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ids",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsConfiguration:getTlsConfiguration": {
            "description": "Use this data source to get the ID of a TLS configuration for use with other resources.\n\n\u003e **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination\nof filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination\nwith any of the others.\n\n\u003e **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsConfiguration({\n    \"default\": true,\n});\nconst exampleTlsActivation = new fastly.TlsActivation(\"example\", {configurationId: example.then(example =\u003e example.id)});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_configuration(default=True)\nexample_tls_activation = fastly.TlsActivation(\"example\", configuration_id=example.id)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsConfiguration.Invoke(new()\n    {\n        Default = true,\n    });\n\n    var exampleTlsActivation = new Fastly.TlsActivation(\"example\", new()\n    {\n        ConfigurationId = example.Apply(getTlsConfigurationResult =\u003e getTlsConfigurationResult.Id),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := fastly.GetTlsConfiguration(ctx, \u0026fastly.GetTlsConfigurationArgs{\n\t\t\tDefault: pulumi.BoolRef(true),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewTlsActivation(ctx, \"example\", \u0026fastly.TlsActivationArgs{\n\t\t\tConfigurationId: pulumi.String(example.Id),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsConfigurationArgs;\nimport com.pulumi.fastly.TlsActivation;\nimport com.pulumi.fastly.TlsActivationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getTlsConfiguration(GetTlsConfigurationArgs.builder()\n            .default_(true)\n            .build());\n\n        var exampleTlsActivation = new TlsActivation(\"exampleTlsActivation\", TlsActivationArgs.builder()        \n            .configurationId(example.applyValue(getTlsConfigurationResult -\u003e getTlsConfigurationResult.id()))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTlsActivation:\n    type: fastly:TlsActivation\n    name: example\n    properties:\n      configurationId: ${example.id}\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getTlsConfiguration\n      Arguments:\n        default: true\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTlsConfiguration.\n",
                "properties": {
                    "default": {
                        "type": "boolean",
                        "description": "Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.\n"
                    },
                    "httpProtocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "HTTP protocols available on the TLS configuration.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Custom name of the TLS configuration.\n"
                    },
                    "tlsProtocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "TLS protocols available on the TLS configuration.\n"
                    },
                    "tlsService": {
                        "type": "string",
                        "description": "Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTlsConfiguration.\n",
                "properties": {
                    "createdAt": {
                        "description": "Timestamp (GMT) when the configuration was created.\n",
                        "type": "string"
                    },
                    "default": {
                        "description": "Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.\n",
                        "type": "boolean"
                    },
                    "dnsRecords": {
                        "description": "The available DNS addresses that can be used to enable TLS for a domain. DNS must be configured for a domain for TLS handshakes to succeed. If enabling TLS on an apex domain (e.g. `example.com`) you must create four A records (or four AAAA records for IPv6 support) using the displayed global A record's IP addresses with your DNS provider. For subdomains and wildcard domains (e.g. `www.example.com` or `*.example.com`) you will need to create a relevant CNAME record.\n",
                        "items": {
                            "$ref": "#/types/fastly:index/getTlsConfigurationDnsRecord:getTlsConfigurationDnsRecord"
                        },
                        "type": "array"
                    },
                    "httpProtocols": {
                        "description": "HTTP protocols available on the TLS configuration.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "Custom name of the TLS configuration.\n",
                        "type": "string"
                    },
                    "tlsProtocols": {
                        "description": "TLS protocols available on the TLS configuration.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tlsService": {
                        "description": "Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "Timestamp (GMT) when the configuration was last updated.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "createdAt",
                    "default",
                    "dnsRecords",
                    "httpProtocols",
                    "id",
                    "name",
                    "tlsProtocols",
                    "tlsService",
                    "updatedAt"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsConfigurationIds:getTlsConfigurationIds": {
            "description": "Use this data source to get the IDs of available TLS configurations for use with other resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsConfigurationIds({});\nconst exampleTlsActivation = new fastly.TlsActivation(\"example\", {configurationId: example.then(example =\u003e example.ids?.[0])});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_configuration_ids()\nexample_tls_activation = fastly.TlsActivation(\"example\", configuration_id=example.ids[0])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsConfigurationIds.Invoke();\n\n    var exampleTlsActivation = new Fastly.TlsActivation(\"example\", new()\n    {\n        ConfigurationId = example.Apply(getTlsConfigurationIdsResult =\u003e getTlsConfigurationIdsResult.Ids[0]),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := fastly.GetTlsConfigurationIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.NewTlsActivation(ctx, \"example\", \u0026fastly.TlsActivationArgs{\n\t\t\tConfigurationId: pulumi.String(example.Ids[0]),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.TlsActivation;\nimport com.pulumi.fastly.TlsActivationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getTlsConfigurationIds();\n\n        var exampleTlsActivation = new TlsActivation(\"exampleTlsActivation\", TlsActivationArgs.builder()        \n            .configurationId(example.applyValue(getTlsConfigurationIdsResult -\u003e getTlsConfigurationIdsResult.ids()[0]))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleTlsActivation:\n    type: fastly:TlsActivation\n    name: example\n    properties:\n      configurationId: ${example.ids[0]}\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getTlsConfigurationIds\n      Arguments: {}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getTlsConfigurationIds.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ids": {
                        "description": "List of IDs corresponding to available TLS configurations.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ids",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsDomain:getTlsDomain": {
            "description": "Use this data source to get the IDs of activations, certificates and subscriptions associated with a domain.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst domain = fastly.getTlsDomain({\n    domain: \"example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndomain = fastly.get_tls_domain(domain=\"example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var domain = Fastly.GetTlsDomain.Invoke(new()\n    {\n        Domain = \"example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fastly.GetTlsDomain(ctx, \u0026fastly.GetTlsDomainArgs{\n\t\t\tDomain: \"example.com\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsDomainArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var domain = FastlyFunctions.getTlsDomain(GetTlsDomainArgs.builder()\n            .domain(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  domain:\n    fn::invoke:\n      Function: fastly:getTlsDomain\n      Arguments:\n        domain: example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTlsDomain.\n",
                "properties": {
                    "domain": {
                        "type": "string",
                        "description": "Domain name to look up activations, certificates and subscriptions for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "domain"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTlsDomain.\n",
                "properties": {
                    "domain": {
                        "description": "Domain name to look up activations, certificates and subscriptions for.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "tlsActivationIds": {
                        "description": "IDs of the activations associated with the domain.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tlsCertificateIds": {
                        "description": "IDs of the certificates associated with the domain.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "tlsSubscriptionIds": {
                        "description": "IDs of the subscriptions associated with the domain.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "domain",
                    "tlsActivationIds",
                    "tlsCertificateIds",
                    "tlsSubscriptionIds",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsPlatformCertificate:getTlsPlatformCertificate": {
            "description": "Use this data source to get information of a Platform TLS certificate for use with other resources.\n\n\u003e **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination\nof filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination\nwith any of the others.\n\n\u003e **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsPlatformCertificate({\n    domains: [\"example.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_platform_certificate(domains=[\"example.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsPlatformCertificate.Invoke(new()\n    {\n        Domains = new[]\n        {\n            \"example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fastly.LookupTlsPlatformCertificate(ctx, \u0026fastly.LookupTlsPlatformCertificateArgs{\n\t\t\tDomains: []string{\n\t\t\t\t\"example.com\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsPlatformCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getTlsPlatformCertificate(GetTlsPlatformCertificateArgs.builder()\n            .domains(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getTlsPlatformCertificate\n      Arguments:\n        domains:\n          - example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTlsPlatformCertificate.\n",
                "properties": {
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Domains that are listed in any certificate's Subject Alternative Names (SAN) list.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTlsPlatformCertificate.\n",
                "properties": {
                    "configurationId": {
                        "description": "ID of TLS configuration used to terminate TLS traffic.\n",
                        "type": "string"
                    },
                    "createdAt": {
                        "description": "Timestamp (GMT) when the certificate was created.\n",
                        "type": "string"
                    },
                    "domains": {
                        "description": "Domains that are listed in any certificate's Subject Alternative Names (SAN) list.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.\n",
                        "type": "string"
                    },
                    "notAfter": {
                        "description": "Timestamp (GMT) when the certificate will expire.\n",
                        "type": "string"
                    },
                    "notBefore": {
                        "description": "Timestamp (GMT) when the certificate will become valid.\n",
                        "type": "string"
                    },
                    "replace": {
                        "description": "A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.\n",
                        "type": "boolean"
                    },
                    "updatedAt": {
                        "description": "Timestamp (GMT) when the certificate was last updated.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "configurationId",
                    "createdAt",
                    "domains",
                    "id",
                    "notAfter",
                    "notBefore",
                    "replace",
                    "updatedAt"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsPlatformCertificateIds:getTlsPlatformCertificateIds": {
            "description": "Use this data source to get the IDs of available Platform TLS Certificates for use with other resources.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsPlatformCertificateIds({});\nconst exampleGetTlsPlatformCertificate = example.then(example =\u003e fastly.getTlsPlatformCertificate({\n    id: example.ids?.[0],\n}));\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_platform_certificate_ids()\nexample_get_tls_platform_certificate = fastly.get_tls_platform_certificate(id=example.ids[0])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsPlatformCertificateIds.Invoke();\n\n    var exampleGetTlsPlatformCertificate = Fastly.GetTlsPlatformCertificate.Invoke(new()\n    {\n        Id = example.Apply(getTlsPlatformCertificateIdsResult =\u003e getTlsPlatformCertificateIdsResult.Ids[0]),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := fastly.GetTlsPlatformCertificateIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.LookupTlsPlatformCertificate(ctx, \u0026fastly.LookupTlsPlatformCertificateArgs{\n\t\t\tId: pulumi.StringRef(example.Ids[0]),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsPlatformCertificateArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getTlsPlatformCertificateIds();\n\n        final var exampleGetTlsPlatformCertificate = FastlyFunctions.getTlsPlatformCertificate(GetTlsPlatformCertificateArgs.builder()\n            .id(example.applyValue(getTlsPlatformCertificateIdsResult -\u003e getTlsPlatformCertificateIdsResult.ids()[0]))\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getTlsPlatformCertificateIds\n      Arguments: {}\n  exampleGetTlsPlatformCertificate:\n    fn::invoke:\n      Function: fastly:getTlsPlatformCertificate\n      Arguments:\n        id: ${example.ids[0]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getTlsPlatformCertificateIds.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ids": {
                        "description": "List of IDs corresponding to Platform TLS certificates.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ids",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsPrivateKey:getTlsPrivateKey": {
            "description": "Use this data source to get information on a TLS Private Key uploaded to Fastly.\n\n\u003e **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination\n of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination\n with any of the others.\n\n\u003e **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search\n is specific enough to return a single key.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst demo = fastly.getTlsPrivateKey({\n    name: \"demo-private-key\",\n});\nexport const privateKeyNeedsReplacing = demo.then(demo =\u003e demo.replace);\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndemo = fastly.get_tls_private_key(name=\"demo-private-key\")\npulumi.export(\"privateKeyNeedsReplacing\", demo.replace)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = Fastly.GetTlsPrivateKey.Invoke(new()\n    {\n        Name = \"demo-private-key\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"privateKeyNeedsReplacing\"] = demo.Apply(getTlsPrivateKeyResult =\u003e getTlsPrivateKeyResult.Replace),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdemo, err := fastly.LookupTlsPrivateKey(ctx, \u0026fastly.LookupTlsPrivateKeyArgs{\n\t\t\tName: pulumi.StringRef(\"demo-private-key\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"privateKeyNeedsReplacing\", demo.Replace)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsPrivateKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demo = FastlyFunctions.getTlsPrivateKey(GetTlsPrivateKeyArgs.builder()\n            .name(\"demo-private-key\")\n            .build());\n\n        ctx.export(\"privateKeyNeedsReplacing\", demo.applyValue(getTlsPrivateKeyResult -\u003e getTlsPrivateKeyResult.replace()));\n    }\n}\n```\n```yaml\nvariables:\n  demo:\n    fn::invoke:\n      Function: fastly:getTlsPrivateKey\n      Arguments:\n        name: demo-private-key\noutputs:\n  privateKeyNeedsReplacing: ${demo.replace}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTlsPrivateKey.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Timestamp (GMT) when the private key was created.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Fastly private key ID. Conflicts with all the other filters\n"
                    },
                    "keyLength": {
                        "type": "integer",
                        "description": "The key length used to generate the private key.\n"
                    },
                    "keyType": {
                        "type": "string",
                        "description": "The algorithm used to generate the private key. Must be RSA.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The human-readable name assigned to the private key when uploaded.\n"
                    },
                    "publicKeySha1": {
                        "type": "string",
                        "description": "A hash of the associated public key, useful for safely identifying it.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTlsPrivateKey.\n",
                "properties": {
                    "createdAt": {
                        "description": "Timestamp (GMT) when the private key was created.\n",
                        "type": "string"
                    },
                    "id": {
                        "description": "Fastly private key ID. Conflicts with all the other filters\n",
                        "type": "string"
                    },
                    "keyLength": {
                        "description": "The key length used to generate the private key.\n",
                        "type": "integer"
                    },
                    "keyType": {
                        "description": "The algorithm used to generate the private key. Must be RSA.\n",
                        "type": "string"
                    },
                    "name": {
                        "description": "The human-readable name assigned to the private key when uploaded.\n",
                        "type": "string"
                    },
                    "publicKeySha1": {
                        "description": "A hash of the associated public key, useful for safely identifying it.\n",
                        "type": "string"
                    },
                    "replace": {
                        "description": "Whether Fastly recommends replacing this private key.\n",
                        "type": "boolean"
                    }
                },
                "required": [
                    "createdAt",
                    "id",
                    "keyLength",
                    "keyType",
                    "name",
                    "publicKeySha1",
                    "replace"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsPrivateKeyIds:getTlsPrivateKeyIds": {
            "description": "Use this data source to get the list of TLS private key identifiers in Fastly.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst demo = fastly.getTlsPrivateKeyIds({});\nconst example = fastly.getTlsPrivateKey({\n    id: demoFastlyTlsPrivateKeyIds.ids[0],\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\ndemo = fastly.get_tls_private_key_ids()\nexample = fastly.get_tls_private_key(id=demo_fastly_tls_private_key_ids[\"ids\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var demo = Fastly.GetTlsPrivateKeyIds.Invoke();\n\n    var example = Fastly.GetTlsPrivateKey.Invoke(new()\n    {\n        Id = demoFastlyTlsPrivateKeyIds.Ids[0],\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fastly.GetTlsPrivateKeyIds(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = fastly.LookupTlsPrivateKey(ctx, \u0026fastly.LookupTlsPrivateKeyArgs{\n\t\t\tId: pulumi.StringRef(demoFastlyTlsPrivateKeyIds.Ids[0]),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsPrivateKeyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var demo = FastlyFunctions.getTlsPrivateKeyIds();\n\n        final var example = FastlyFunctions.getTlsPrivateKey(GetTlsPrivateKeyArgs.builder()\n            .id(demoFastlyTlsPrivateKeyIds.ids()[0])\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  demo:\n    fn::invoke:\n      Function: fastly:getTlsPrivateKeyIds\n      Arguments: {}\n  example:\n    fn::invoke:\n      Function: fastly:getTlsPrivateKey\n      Arguments:\n        id: ${demoFastlyTlsPrivateKeyIds.ids[0]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getTlsPrivateKeyIds.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ids": {
                        "description": "List of IDs of the TLS private keys.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ids",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsSubscription:getTlsSubscription": {
            "description": "Use this data source to get information about a TLS subscription.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsSubscription({\n    domains: [\"example.com\"],\n});\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_subscription(domains=[\"example.com\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsSubscription.Invoke(new()\n    {\n        Domains = new[]\n        {\n            \"example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := fastly.LookupTlsSubscription(ctx, \u0026fastly.LookupTlsSubscriptionArgs{\n\t\t\tDomains: []string{\n\t\t\t\t\"example.com\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.fastly.FastlyFunctions;\nimport com.pulumi.fastly.inputs.GetTlsSubscriptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FastlyFunctions.getTlsSubscription(GetTlsSubscriptionArgs.builder()\n            .domains(\"example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: fastly:getTlsSubscription\n      Arguments:\n        domains:\n          - example.com\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTlsSubscription.\n",
                "properties": {
                    "certificateAuthority": {
                        "type": "string",
                        "description": "The entity that issues and certifies the TLS certificates for the subscription.\n"
                    },
                    "configurationId": {
                        "type": "string",
                        "description": "ID of TLS configuration used to terminate TLS traffic.\n"
                    },
                    "domains": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of domains on which to enable TLS.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "ID of TLS subscription. Conflicts with all the other filters.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTlsSubscription.\n",
                "properties": {
                    "certificateAuthority": {
                        "description": "The entity that issues and certifies the TLS certificates for the subscription.\n",
                        "type": "string"
                    },
                    "certificateIds": {
                        "description": "List of certificate IDs associated with the Subscription.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "commonName": {
                        "description": "The common name associated with the subscription generated by Fastly TLS.\n",
                        "type": "string"
                    },
                    "configurationId": {
                        "description": "ID of TLS configuration used to terminate TLS traffic.\n",
                        "type": "string"
                    },
                    "createdAt": {
                        "description": "Timestamp (GMT) when subscription was created.\n",
                        "type": "string"
                    },
                    "domains": {
                        "description": "List of domains on which to enable TLS.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "ID of TLS subscription. Conflicts with all the other filters.\n",
                        "type": "string"
                    },
                    "state": {
                        "description": "The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.\n",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "Timestamp (GMT) when subscription was last updated.\n",
                        "type": "string"
                    }
                },
                "required": [
                    "certificateAuthority",
                    "certificateIds",
                    "commonName",
                    "configurationId",
                    "createdAt",
                    "domains",
                    "id",
                    "state",
                    "updatedAt"
                ],
                "type": "object"
            }
        },
        "fastly:index/getTlsSubscriptionIds:getTlsSubscriptionIds": {
            "description": "Use this data source to get the list of IDs of TLS Subscriptions in Fastly.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fastly from \"@pulumi/fastly\";\n\nconst example = fastly.getTlsSubscriptionIds({});\nconst exampleGetTlsSubscription = example.then(example =\u003e .reduce((__obj, [, ]) =\u003e ({ ...__obj, [__key]: fastly.getTlsSubscription({\n    id: __value,\n}) })));\nexport const subscriptionDomains = exampleGetTlsSubscription.apply(exampleGetTlsSubscription =\u003e Object.values(exampleGetTlsSubscription).map(a =\u003e (a.certificateAuthority)));\n```\n```python\nimport pulumi\nimport pulumi_fastly as fastly\n\nexample = fastly.get_tls_subscription_ids()\nexample_get_tls_subscription = {__key: fastly.get_tls_subscription(id=__value) for __key, __value in example.ids}\npulumi.export(\"subscriptionDomains\", [a.certificate_authority for a in example_get_tls_subscription])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Fastly = Pulumi.Fastly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Fastly.GetTlsSubscriptionIds.Invoke();\n\n    var exampleGetTlsSubscription = ;\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"subscriptionDomains\"] = exampleGetTlsSubscription.Apply(exampleGetTlsSubscription =\u003e (exampleGetTlsSubscription).Values.Select(a =\u003e \n        {\n            return a.CertificateAuthority;\n        }).ToList()),\n    };\n});\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getTlsSubscriptionIds.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "ids": {
                        "description": "IDs of available TLS subscriptions.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "ids",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getVclSnippets:getVclSnippets": {
            "inputs": {
                "description": "A collection of arguments for invoking getVclSnippets.\n",
                "properties": {
                    "serviceId": {
                        "type": "string"
                    },
                    "serviceVersion": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "serviceId",
                    "serviceVersion"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getVclSnippets.\n",
                "properties": {
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "serviceId": {
                        "type": "string"
                    },
                    "serviceVersion": {
                        "type": "integer"
                    },
                    "vclSnippets": {
                        "items": {
                            "$ref": "#/types/fastly:index/getVclSnippetsVclSnippet:getVclSnippetsVclSnippet"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "serviceId",
                    "serviceVersion",
                    "vclSnippets",
                    "id"
                ],
                "type": "object"
            }
        },
        "fastly:index/getWafRules:getWafRules": {
            "inputs": {
                "description": "A collection of arguments for invoking getWafRules.\n",
                "properties": {
                    "excludeModsecRuleIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Exclusion filter by WAF rule's ModSecurity ID.\n"
                    },
                    "modsecRuleIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of modsecurity rules IDs to be used as filters for the data set.\n"
                    },
                    "publishers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Inclusion filter by WAF rule's publishers.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Inclusion filter by WAF rule's tags.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWafRules.\n",
                "properties": {
                    "excludeModsecRuleIds": {
                        "description": "A list of modsecurity rules IDs to be excluded from the data set.\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "id": {
                        "description": "The provider-assigned unique ID for this managed resource.\n",
                        "type": "string"
                    },
                    "modsecRuleIds": {
                        "description": "A list of modsecurity rules IDs to be used as filters for the data set.\n",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    },
                    "publishers": {
                        "description": "A list of publishers to be used as filters for the data set.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "rules": {
                        "description": "The list of rules that results from any given combination of filters.\n",
                        "items": {
                            "$ref": "#/types/fastly:index/getWafRulesRule:getWafRulesRule"
                        },
                        "type": "array"
                    },
                    "tags": {
                        "description": "A list of tags to be used as filters for the data set.\n",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "rules",
                    "id"
                ],
                "type": "object"
            }
        }
    }
}