# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['Servicev1Args', 'Servicev1']

@pulumi.input_type
class Servicev1Args:
    def __init__(__self__, *,
                 domains: pulumi.Input[Sequence[pulumi.Input['Servicev1DomainArgs']]],
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1AclArgs']]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BackendArgs']]]] = None,
                 bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BigqueryloggingArgs']]]] = None,
                 blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BlobstorageloggingArgs']]]] = None,
                 cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1CacheSettingArgs']]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ConditionArgs']]]] = None,
                 default_host: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DictionaryArgs']]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DirectorArgs']]]] = None,
                 dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DynamicsnippetArgs']]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GcsloggingArgs']]]] = None,
                 gzips: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GzipArgs']]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HeaderArgs']]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HealthcheckArgs']]]] = None,
                 httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HttpsloggingArgs']]]] = None,
                 logentries: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LogentryArgs']]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingCloudfileArgs']]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDatadogArgs']]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDigitaloceanArgs']]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingElasticsearchArgs']]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingFtpArgs']]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingGooglepubsubArgs']]]] = None,
                 logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHerokuArgs']]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHoneycombArgs']]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKafkaArgs']]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKineseArgs']]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogglyArgs']]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogshuttleArgs']]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingNewrelicArgs']]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingOpenstackArgs']]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingScalyrArgs']]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingSftpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 papertrails: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1PapertrailArgs']]]] = None,
                 request_settings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1RequestSettingArgs']]]] = None,
                 response_objects: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ResponseObjectArgs']]]] = None,
                 s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1S3loggingArgs']]]] = None,
                 snippets: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SnippetArgs']]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SplunkArgs']]]] = None,
                 stale_if_error: Optional[pulumi.Input[bool]] = None,
                 stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SumologicArgs']]]] = None,
                 syslogs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SyslogArgs']]]] = None,
                 vcls: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1VclArgs']]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input['Servicev1WafArgs']] = None):
        """
        The set of arguments for constructing a Servicev1 resource.
        :param pulumi.Input[Sequence[pulumi.Input['Servicev1DomainArgs']]] domains: A set of Domain names to serve as entry points for your Service
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[str] comment: Description field for the service. Default `Managed by Terraform`
        :param pulumi.Input[str] default_host: The default hostname
        :param pulumi.Input[int] default_ttl: The default Time-to-live (TTL) for requests
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        :param pulumi.Input[str] name: The unique name for the Service to create
        :param pulumi.Input[bool] stale_if_error: Enables serving a stale object if there is an error
        :param pulumi.Input[int] stale_if_error_ttl: The default time-to-live (TTL) for serving the stale object for the version
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        pulumi.set(__self__, "domains", domains)
        if acls is not None:
            pulumi.set(__self__, "acls", acls)
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if bigqueryloggings is not None:
            pulumi.set(__self__, "bigqueryloggings", bigqueryloggings)
        if blobstorageloggings is not None:
            pulumi.set(__self__, "blobstorageloggings", blobstorageloggings)
        if cache_settings is not None:
            pulumi.set(__self__, "cache_settings", cache_settings)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if default_host is not None:
            pulumi.set(__self__, "default_host", default_host)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if dictionaries is not None:
            pulumi.set(__self__, "dictionaries", dictionaries)
        if directors is not None:
            pulumi.set(__self__, "directors", directors)
        if dynamicsnippets is not None:
            pulumi.set(__self__, "dynamicsnippets", dynamicsnippets)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if gcsloggings is not None:
            pulumi.set(__self__, "gcsloggings", gcsloggings)
        if gzips is not None:
            pulumi.set(__self__, "gzips", gzips)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if healthchecks is not None:
            pulumi.set(__self__, "healthchecks", healthchecks)
        if httpsloggings is not None:
            pulumi.set(__self__, "httpsloggings", httpsloggings)
        if logentries is not None:
            pulumi.set(__self__, "logentries", logentries)
        if logging_cloudfiles is not None:
            pulumi.set(__self__, "logging_cloudfiles", logging_cloudfiles)
        if logging_datadogs is not None:
            pulumi.set(__self__, "logging_datadogs", logging_datadogs)
        if logging_digitaloceans is not None:
            pulumi.set(__self__, "logging_digitaloceans", logging_digitaloceans)
        if logging_elasticsearches is not None:
            pulumi.set(__self__, "logging_elasticsearches", logging_elasticsearches)
        if logging_ftps is not None:
            pulumi.set(__self__, "logging_ftps", logging_ftps)
        if logging_googlepubsubs is not None:
            pulumi.set(__self__, "logging_googlepubsubs", logging_googlepubsubs)
        if logging_heroku is not None:
            pulumi.set(__self__, "logging_heroku", logging_heroku)
        if logging_honeycombs is not None:
            pulumi.set(__self__, "logging_honeycombs", logging_honeycombs)
        if logging_kafkas is not None:
            pulumi.set(__self__, "logging_kafkas", logging_kafkas)
        if logging_kineses is not None:
            pulumi.set(__self__, "logging_kineses", logging_kineses)
        if logging_logglies is not None:
            pulumi.set(__self__, "logging_logglies", logging_logglies)
        if logging_logshuttles is not None:
            pulumi.set(__self__, "logging_logshuttles", logging_logshuttles)
        if logging_newrelics is not None:
            pulumi.set(__self__, "logging_newrelics", logging_newrelics)
        if logging_openstacks is not None:
            pulumi.set(__self__, "logging_openstacks", logging_openstacks)
        if logging_scalyrs is not None:
            pulumi.set(__self__, "logging_scalyrs", logging_scalyrs)
        if logging_sftps is not None:
            pulumi.set(__self__, "logging_sftps", logging_sftps)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if papertrails is not None:
            pulumi.set(__self__, "papertrails", papertrails)
        if request_settings is not None:
            pulumi.set(__self__, "request_settings", request_settings)
        if response_objects is not None:
            pulumi.set(__self__, "response_objects", response_objects)
        if s3loggings is not None:
            pulumi.set(__self__, "s3loggings", s3loggings)
        if snippets is not None:
            pulumi.set(__self__, "snippets", snippets)
        if splunks is not None:
            pulumi.set(__self__, "splunks", splunks)
        if stale_if_error is not None:
            pulumi.set(__self__, "stale_if_error", stale_if_error)
        if stale_if_error_ttl is not None:
            pulumi.set(__self__, "stale_if_error_ttl", stale_if_error_ttl)
        if sumologics is not None:
            pulumi.set(__self__, "sumologics", sumologics)
        if syslogs is not None:
            pulumi.set(__self__, "syslogs", syslogs)
        if vcls is not None:
            pulumi.set(__self__, "vcls", vcls)
        if version_comment is not None:
            pulumi.set(__self__, "version_comment", version_comment)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input['Servicev1DomainArgs']]]:
        """
        A set of Domain names to serve as entry points for your Service
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input['Servicev1DomainArgs']]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1AclArgs']]]]:
        return pulumi.get(self, "acls")

    @acls.setter
    def acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1AclArgs']]]]):
        pulumi.set(self, "acls", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BackendArgs']]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter
    def bigqueryloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BigqueryloggingArgs']]]]:
        return pulumi.get(self, "bigqueryloggings")

    @bigqueryloggings.setter
    def bigqueryloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BigqueryloggingArgs']]]]):
        pulumi.set(self, "bigqueryloggings", value)

    @property
    @pulumi.getter
    def blobstorageloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BlobstorageloggingArgs']]]]:
        return pulumi.get(self, "blobstorageloggings")

    @blobstorageloggings.setter
    def blobstorageloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BlobstorageloggingArgs']]]]):
        pulumi.set(self, "blobstorageloggings", value)

    @property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1CacheSettingArgs']]]]:
        return pulumi.get(self, "cache_settings")

    @cache_settings.setter
    def cache_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1CacheSettingArgs']]]]):
        pulumi.set(self, "cache_settings", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the service. Default `Managed by Terraform`
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="defaultHost")
    def default_host(self) -> Optional[pulumi.Input[str]]:
        """
        The default hostname
        """
        return pulumi.get(self, "default_host")

    @default_host.setter
    def default_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_host", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default Time-to-live (TTL) for requests
        """
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter
    def dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DictionaryArgs']]]]:
        return pulumi.get(self, "dictionaries")

    @dictionaries.setter
    def dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DictionaryArgs']]]]):
        pulumi.set(self, "dictionaries", value)

    @property
    @pulumi.getter
    def directors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DirectorArgs']]]]:
        return pulumi.get(self, "directors")

    @directors.setter
    def directors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DirectorArgs']]]]):
        pulumi.set(self, "directors", value)

    @property
    @pulumi.getter
    def dynamicsnippets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DynamicsnippetArgs']]]]:
        return pulumi.get(self, "dynamicsnippets")

    @dynamicsnippets.setter
    def dynamicsnippets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DynamicsnippetArgs']]]]):
        pulumi.set(self, "dynamicsnippets", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def gcsloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GcsloggingArgs']]]]:
        return pulumi.get(self, "gcsloggings")

    @gcsloggings.setter
    def gcsloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GcsloggingArgs']]]]):
        pulumi.set(self, "gcsloggings", value)

    @property
    @pulumi.getter
    def gzips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GzipArgs']]]]:
        return pulumi.get(self, "gzips")

    @gzips.setter
    def gzips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GzipArgs']]]]):
        pulumi.set(self, "gzips", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HealthcheckArgs']]]]:
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HealthcheckArgs']]]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter
    def httpsloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HttpsloggingArgs']]]]:
        return pulumi.get(self, "httpsloggings")

    @httpsloggings.setter
    def httpsloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HttpsloggingArgs']]]]):
        pulumi.set(self, "httpsloggings", value)

    @property
    @pulumi.getter
    def logentries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LogentryArgs']]]]:
        return pulumi.get(self, "logentries")

    @logentries.setter
    def logentries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LogentryArgs']]]]):
        pulumi.set(self, "logentries", value)

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingCloudfileArgs']]]]:
        return pulumi.get(self, "logging_cloudfiles")

    @logging_cloudfiles.setter
    def logging_cloudfiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingCloudfileArgs']]]]):
        pulumi.set(self, "logging_cloudfiles", value)

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDatadogArgs']]]]:
        return pulumi.get(self, "logging_datadogs")

    @logging_datadogs.setter
    def logging_datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDatadogArgs']]]]):
        pulumi.set(self, "logging_datadogs", value)

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDigitaloceanArgs']]]]:
        return pulumi.get(self, "logging_digitaloceans")

    @logging_digitaloceans.setter
    def logging_digitaloceans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDigitaloceanArgs']]]]):
        pulumi.set(self, "logging_digitaloceans", value)

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingElasticsearchArgs']]]]:
        return pulumi.get(self, "logging_elasticsearches")

    @logging_elasticsearches.setter
    def logging_elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingElasticsearchArgs']]]]):
        pulumi.set(self, "logging_elasticsearches", value)

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingFtpArgs']]]]:
        return pulumi.get(self, "logging_ftps")

    @logging_ftps.setter
    def logging_ftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingFtpArgs']]]]):
        pulumi.set(self, "logging_ftps", value)

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingGooglepubsubArgs']]]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @logging_googlepubsubs.setter
    def logging_googlepubsubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingGooglepubsubArgs']]]]):
        pulumi.set(self, "logging_googlepubsubs", value)

    @property
    @pulumi.getter(name="loggingHeroku")
    def logging_heroku(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHerokuArgs']]]]:
        return pulumi.get(self, "logging_heroku")

    @logging_heroku.setter
    def logging_heroku(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHerokuArgs']]]]):
        pulumi.set(self, "logging_heroku", value)

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHoneycombArgs']]]]:
        return pulumi.get(self, "logging_honeycombs")

    @logging_honeycombs.setter
    def logging_honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHoneycombArgs']]]]):
        pulumi.set(self, "logging_honeycombs", value)

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKafkaArgs']]]]:
        return pulumi.get(self, "logging_kafkas")

    @logging_kafkas.setter
    def logging_kafkas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKafkaArgs']]]]):
        pulumi.set(self, "logging_kafkas", value)

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKineseArgs']]]]:
        return pulumi.get(self, "logging_kineses")

    @logging_kineses.setter
    def logging_kineses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKineseArgs']]]]):
        pulumi.set(self, "logging_kineses", value)

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogglyArgs']]]]:
        return pulumi.get(self, "logging_logglies")

    @logging_logglies.setter
    def logging_logglies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogglyArgs']]]]):
        pulumi.set(self, "logging_logglies", value)

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogshuttleArgs']]]]:
        return pulumi.get(self, "logging_logshuttles")

    @logging_logshuttles.setter
    def logging_logshuttles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogshuttleArgs']]]]):
        pulumi.set(self, "logging_logshuttles", value)

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingNewrelicArgs']]]]:
        return pulumi.get(self, "logging_newrelics")

    @logging_newrelics.setter
    def logging_newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingNewrelicArgs']]]]):
        pulumi.set(self, "logging_newrelics", value)

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingOpenstackArgs']]]]:
        return pulumi.get(self, "logging_openstacks")

    @logging_openstacks.setter
    def logging_openstacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingOpenstackArgs']]]]):
        pulumi.set(self, "logging_openstacks", value)

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingScalyrArgs']]]]:
        return pulumi.get(self, "logging_scalyrs")

    @logging_scalyrs.setter
    def logging_scalyrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingScalyrArgs']]]]):
        pulumi.set(self, "logging_scalyrs", value)

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingSftpArgs']]]]:
        return pulumi.get(self, "logging_sftps")

    @logging_sftps.setter
    def logging_sftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingSftpArgs']]]]):
        pulumi.set(self, "logging_sftps", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name for the Service to create
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def papertrails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1PapertrailArgs']]]]:
        return pulumi.get(self, "papertrails")

    @papertrails.setter
    def papertrails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1PapertrailArgs']]]]):
        pulumi.set(self, "papertrails", value)

    @property
    @pulumi.getter(name="requestSettings")
    def request_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1RequestSettingArgs']]]]:
        return pulumi.get(self, "request_settings")

    @request_settings.setter
    def request_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1RequestSettingArgs']]]]):
        pulumi.set(self, "request_settings", value)

    @property
    @pulumi.getter(name="responseObjects")
    def response_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ResponseObjectArgs']]]]:
        return pulumi.get(self, "response_objects")

    @response_objects.setter
    def response_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ResponseObjectArgs']]]]):
        pulumi.set(self, "response_objects", value)

    @property
    @pulumi.getter
    def s3loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1S3loggingArgs']]]]:
        return pulumi.get(self, "s3loggings")

    @s3loggings.setter
    def s3loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1S3loggingArgs']]]]):
        pulumi.set(self, "s3loggings", value)

    @property
    @pulumi.getter
    def snippets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SnippetArgs']]]]:
        return pulumi.get(self, "snippets")

    @snippets.setter
    def snippets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SnippetArgs']]]]):
        pulumi.set(self, "snippets", value)

    @property
    @pulumi.getter
    def splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SplunkArgs']]]]:
        return pulumi.get(self, "splunks")

    @splunks.setter
    def splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SplunkArgs']]]]):
        pulumi.set(self, "splunks", value)

    @property
    @pulumi.getter(name="staleIfError")
    def stale_if_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables serving a stale object if there is an error
        """
        return pulumi.get(self, "stale_if_error")

    @stale_if_error.setter
    def stale_if_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale_if_error", value)

    @property
    @pulumi.getter(name="staleIfErrorTtl")
    def stale_if_error_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default time-to-live (TTL) for serving the stale object for the version
        """
        return pulumi.get(self, "stale_if_error_ttl")

    @stale_if_error_ttl.setter
    def stale_if_error_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stale_if_error_ttl", value)

    @property
    @pulumi.getter
    def sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SumologicArgs']]]]:
        return pulumi.get(self, "sumologics")

    @sumologics.setter
    def sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SumologicArgs']]]]):
        pulumi.set(self, "sumologics", value)

    @property
    @pulumi.getter
    def syslogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SyslogArgs']]]]:
        return pulumi.get(self, "syslogs")

    @syslogs.setter
    def syslogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SyslogArgs']]]]):
        pulumi.set(self, "syslogs", value)

    @property
    @pulumi.getter
    def vcls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1VclArgs']]]]:
        return pulumi.get(self, "vcls")

    @vcls.setter
    def vcls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1VclArgs']]]]):
        pulumi.set(self, "vcls", value)

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

    @version_comment.setter
    def version_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_comment", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input['Servicev1WafArgs']]:
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input['Servicev1WafArgs']]):
        pulumi.set(self, "waf", value)


@pulumi.input_type
class _Servicev1State:
    def __init__(__self__, *,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1AclArgs']]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 active_version: Optional[pulumi.Input[int]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BackendArgs']]]] = None,
                 bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BigqueryloggingArgs']]]] = None,
                 blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BlobstorageloggingArgs']]]] = None,
                 cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1CacheSettingArgs']]]] = None,
                 cloned_version: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ConditionArgs']]]] = None,
                 default_host: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DictionaryArgs']]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DirectorArgs']]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DomainArgs']]]] = None,
                 dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DynamicsnippetArgs']]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GcsloggingArgs']]]] = None,
                 gzips: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GzipArgs']]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HeaderArgs']]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HealthcheckArgs']]]] = None,
                 httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HttpsloggingArgs']]]] = None,
                 logentries: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LogentryArgs']]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingCloudfileArgs']]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDatadogArgs']]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDigitaloceanArgs']]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingElasticsearchArgs']]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingFtpArgs']]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingGooglepubsubArgs']]]] = None,
                 logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHerokuArgs']]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHoneycombArgs']]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKafkaArgs']]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKineseArgs']]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogglyArgs']]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogshuttleArgs']]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingNewrelicArgs']]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingOpenstackArgs']]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingScalyrArgs']]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingSftpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 papertrails: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1PapertrailArgs']]]] = None,
                 request_settings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1RequestSettingArgs']]]] = None,
                 response_objects: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ResponseObjectArgs']]]] = None,
                 s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1S3loggingArgs']]]] = None,
                 snippets: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SnippetArgs']]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SplunkArgs']]]] = None,
                 stale_if_error: Optional[pulumi.Input[bool]] = None,
                 stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SumologicArgs']]]] = None,
                 syslogs: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SyslogArgs']]]] = None,
                 vcls: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1VclArgs']]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input['Servicev1WafArgs']] = None):
        """
        Input properties used for looking up and filtering Servicev1 resources.
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[int] active_version: The currently active version of your Fastly Service
        :param pulumi.Input[int] cloned_version: The latest cloned version by the provider
        :param pulumi.Input[str] comment: Description field for the service. Default `Managed by Terraform`
        :param pulumi.Input[str] default_host: The default hostname
        :param pulumi.Input[int] default_ttl: The default Time-to-live (TTL) for requests
        :param pulumi.Input[Sequence[pulumi.Input['Servicev1DomainArgs']]] domains: A set of Domain names to serve as entry points for your Service
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        :param pulumi.Input[str] name: The unique name for the Service to create
        :param pulumi.Input[bool] stale_if_error: Enables serving a stale object if there is an error
        :param pulumi.Input[int] stale_if_error_ttl: The default time-to-live (TTL) for serving the stale object for the version
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        if acls is not None:
            pulumi.set(__self__, "acls", acls)
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if active_version is not None:
            pulumi.set(__self__, "active_version", active_version)
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if bigqueryloggings is not None:
            pulumi.set(__self__, "bigqueryloggings", bigqueryloggings)
        if blobstorageloggings is not None:
            pulumi.set(__self__, "blobstorageloggings", blobstorageloggings)
        if cache_settings is not None:
            pulumi.set(__self__, "cache_settings", cache_settings)
        if cloned_version is not None:
            pulumi.set(__self__, "cloned_version", cloned_version)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if default_host is not None:
            pulumi.set(__self__, "default_host", default_host)
        if default_ttl is not None:
            pulumi.set(__self__, "default_ttl", default_ttl)
        if dictionaries is not None:
            pulumi.set(__self__, "dictionaries", dictionaries)
        if directors is not None:
            pulumi.set(__self__, "directors", directors)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if dynamicsnippets is not None:
            pulumi.set(__self__, "dynamicsnippets", dynamicsnippets)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if gcsloggings is not None:
            pulumi.set(__self__, "gcsloggings", gcsloggings)
        if gzips is not None:
            pulumi.set(__self__, "gzips", gzips)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if healthchecks is not None:
            pulumi.set(__self__, "healthchecks", healthchecks)
        if httpsloggings is not None:
            pulumi.set(__self__, "httpsloggings", httpsloggings)
        if logentries is not None:
            pulumi.set(__self__, "logentries", logentries)
        if logging_cloudfiles is not None:
            pulumi.set(__self__, "logging_cloudfiles", logging_cloudfiles)
        if logging_datadogs is not None:
            pulumi.set(__self__, "logging_datadogs", logging_datadogs)
        if logging_digitaloceans is not None:
            pulumi.set(__self__, "logging_digitaloceans", logging_digitaloceans)
        if logging_elasticsearches is not None:
            pulumi.set(__self__, "logging_elasticsearches", logging_elasticsearches)
        if logging_ftps is not None:
            pulumi.set(__self__, "logging_ftps", logging_ftps)
        if logging_googlepubsubs is not None:
            pulumi.set(__self__, "logging_googlepubsubs", logging_googlepubsubs)
        if logging_heroku is not None:
            pulumi.set(__self__, "logging_heroku", logging_heroku)
        if logging_honeycombs is not None:
            pulumi.set(__self__, "logging_honeycombs", logging_honeycombs)
        if logging_kafkas is not None:
            pulumi.set(__self__, "logging_kafkas", logging_kafkas)
        if logging_kineses is not None:
            pulumi.set(__self__, "logging_kineses", logging_kineses)
        if logging_logglies is not None:
            pulumi.set(__self__, "logging_logglies", logging_logglies)
        if logging_logshuttles is not None:
            pulumi.set(__self__, "logging_logshuttles", logging_logshuttles)
        if logging_newrelics is not None:
            pulumi.set(__self__, "logging_newrelics", logging_newrelics)
        if logging_openstacks is not None:
            pulumi.set(__self__, "logging_openstacks", logging_openstacks)
        if logging_scalyrs is not None:
            pulumi.set(__self__, "logging_scalyrs", logging_scalyrs)
        if logging_sftps is not None:
            pulumi.set(__self__, "logging_sftps", logging_sftps)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if papertrails is not None:
            pulumi.set(__self__, "papertrails", papertrails)
        if request_settings is not None:
            pulumi.set(__self__, "request_settings", request_settings)
        if response_objects is not None:
            pulumi.set(__self__, "response_objects", response_objects)
        if s3loggings is not None:
            pulumi.set(__self__, "s3loggings", s3loggings)
        if snippets is not None:
            pulumi.set(__self__, "snippets", snippets)
        if splunks is not None:
            pulumi.set(__self__, "splunks", splunks)
        if stale_if_error is not None:
            pulumi.set(__self__, "stale_if_error", stale_if_error)
        if stale_if_error_ttl is not None:
            pulumi.set(__self__, "stale_if_error_ttl", stale_if_error_ttl)
        if sumologics is not None:
            pulumi.set(__self__, "sumologics", sumologics)
        if syslogs is not None:
            pulumi.set(__self__, "syslogs", syslogs)
        if vcls is not None:
            pulumi.set(__self__, "vcls", vcls)
        if version_comment is not None:
            pulumi.set(__self__, "version_comment", version_comment)
        if waf is not None:
            pulumi.set(__self__, "waf", waf)

    @property
    @pulumi.getter
    def acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1AclArgs']]]]:
        return pulumi.get(self, "acls")

    @acls.setter
    def acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1AclArgs']]]]):
        pulumi.set(self, "acls", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter(name="activeVersion")
    def active_version(self) -> Optional[pulumi.Input[int]]:
        """
        The currently active version of your Fastly Service
        """
        return pulumi.get(self, "active_version")

    @active_version.setter
    def active_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_version", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BackendArgs']]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter
    def bigqueryloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BigqueryloggingArgs']]]]:
        return pulumi.get(self, "bigqueryloggings")

    @bigqueryloggings.setter
    def bigqueryloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BigqueryloggingArgs']]]]):
        pulumi.set(self, "bigqueryloggings", value)

    @property
    @pulumi.getter
    def blobstorageloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BlobstorageloggingArgs']]]]:
        return pulumi.get(self, "blobstorageloggings")

    @blobstorageloggings.setter
    def blobstorageloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1BlobstorageloggingArgs']]]]):
        pulumi.set(self, "blobstorageloggings", value)

    @property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1CacheSettingArgs']]]]:
        return pulumi.get(self, "cache_settings")

    @cache_settings.setter
    def cache_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1CacheSettingArgs']]]]):
        pulumi.set(self, "cache_settings", value)

    @property
    @pulumi.getter(name="clonedVersion")
    def cloned_version(self) -> Optional[pulumi.Input[int]]:
        """
        The latest cloned version by the provider
        """
        return pulumi.get(self, "cloned_version")

    @cloned_version.setter
    def cloned_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloned_version", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the service. Default `Managed by Terraform`
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="defaultHost")
    def default_host(self) -> Optional[pulumi.Input[str]]:
        """
        The default hostname
        """
        return pulumi.get(self, "default_host")

    @default_host.setter
    def default_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_host", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default Time-to-live (TTL) for requests
        """
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter
    def dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DictionaryArgs']]]]:
        return pulumi.get(self, "dictionaries")

    @dictionaries.setter
    def dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DictionaryArgs']]]]):
        pulumi.set(self, "dictionaries", value)

    @property
    @pulumi.getter
    def directors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DirectorArgs']]]]:
        return pulumi.get(self, "directors")

    @directors.setter
    def directors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DirectorArgs']]]]):
        pulumi.set(self, "directors", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DomainArgs']]]]:
        """
        A set of Domain names to serve as entry points for your Service
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DomainArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def dynamicsnippets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DynamicsnippetArgs']]]]:
        return pulumi.get(self, "dynamicsnippets")

    @dynamicsnippets.setter
    def dynamicsnippets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1DynamicsnippetArgs']]]]):
        pulumi.set(self, "dynamicsnippets", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def gcsloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GcsloggingArgs']]]]:
        return pulumi.get(self, "gcsloggings")

    @gcsloggings.setter
    def gcsloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GcsloggingArgs']]]]):
        pulumi.set(self, "gcsloggings", value)

    @property
    @pulumi.getter
    def gzips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GzipArgs']]]]:
        return pulumi.get(self, "gzips")

    @gzips.setter
    def gzips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1GzipArgs']]]]):
        pulumi.set(self, "gzips", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HealthcheckArgs']]]]:
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HealthcheckArgs']]]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter
    def httpsloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HttpsloggingArgs']]]]:
        return pulumi.get(self, "httpsloggings")

    @httpsloggings.setter
    def httpsloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1HttpsloggingArgs']]]]):
        pulumi.set(self, "httpsloggings", value)

    @property
    @pulumi.getter
    def logentries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LogentryArgs']]]]:
        return pulumi.get(self, "logentries")

    @logentries.setter
    def logentries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LogentryArgs']]]]):
        pulumi.set(self, "logentries", value)

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingCloudfileArgs']]]]:
        return pulumi.get(self, "logging_cloudfiles")

    @logging_cloudfiles.setter
    def logging_cloudfiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingCloudfileArgs']]]]):
        pulumi.set(self, "logging_cloudfiles", value)

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDatadogArgs']]]]:
        return pulumi.get(self, "logging_datadogs")

    @logging_datadogs.setter
    def logging_datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDatadogArgs']]]]):
        pulumi.set(self, "logging_datadogs", value)

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDigitaloceanArgs']]]]:
        return pulumi.get(self, "logging_digitaloceans")

    @logging_digitaloceans.setter
    def logging_digitaloceans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingDigitaloceanArgs']]]]):
        pulumi.set(self, "logging_digitaloceans", value)

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingElasticsearchArgs']]]]:
        return pulumi.get(self, "logging_elasticsearches")

    @logging_elasticsearches.setter
    def logging_elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingElasticsearchArgs']]]]):
        pulumi.set(self, "logging_elasticsearches", value)

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingFtpArgs']]]]:
        return pulumi.get(self, "logging_ftps")

    @logging_ftps.setter
    def logging_ftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingFtpArgs']]]]):
        pulumi.set(self, "logging_ftps", value)

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingGooglepubsubArgs']]]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @logging_googlepubsubs.setter
    def logging_googlepubsubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingGooglepubsubArgs']]]]):
        pulumi.set(self, "logging_googlepubsubs", value)

    @property
    @pulumi.getter(name="loggingHeroku")
    def logging_heroku(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHerokuArgs']]]]:
        return pulumi.get(self, "logging_heroku")

    @logging_heroku.setter
    def logging_heroku(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHerokuArgs']]]]):
        pulumi.set(self, "logging_heroku", value)

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHoneycombArgs']]]]:
        return pulumi.get(self, "logging_honeycombs")

    @logging_honeycombs.setter
    def logging_honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingHoneycombArgs']]]]):
        pulumi.set(self, "logging_honeycombs", value)

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKafkaArgs']]]]:
        return pulumi.get(self, "logging_kafkas")

    @logging_kafkas.setter
    def logging_kafkas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKafkaArgs']]]]):
        pulumi.set(self, "logging_kafkas", value)

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKineseArgs']]]]:
        return pulumi.get(self, "logging_kineses")

    @logging_kineses.setter
    def logging_kineses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingKineseArgs']]]]):
        pulumi.set(self, "logging_kineses", value)

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogglyArgs']]]]:
        return pulumi.get(self, "logging_logglies")

    @logging_logglies.setter
    def logging_logglies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogglyArgs']]]]):
        pulumi.set(self, "logging_logglies", value)

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogshuttleArgs']]]]:
        return pulumi.get(self, "logging_logshuttles")

    @logging_logshuttles.setter
    def logging_logshuttles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingLogshuttleArgs']]]]):
        pulumi.set(self, "logging_logshuttles", value)

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingNewrelicArgs']]]]:
        return pulumi.get(self, "logging_newrelics")

    @logging_newrelics.setter
    def logging_newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingNewrelicArgs']]]]):
        pulumi.set(self, "logging_newrelics", value)

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingOpenstackArgs']]]]:
        return pulumi.get(self, "logging_openstacks")

    @logging_openstacks.setter
    def logging_openstacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingOpenstackArgs']]]]):
        pulumi.set(self, "logging_openstacks", value)

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingScalyrArgs']]]]:
        return pulumi.get(self, "logging_scalyrs")

    @logging_scalyrs.setter
    def logging_scalyrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingScalyrArgs']]]]):
        pulumi.set(self, "logging_scalyrs", value)

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingSftpArgs']]]]:
        return pulumi.get(self, "logging_sftps")

    @logging_sftps.setter
    def logging_sftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1LoggingSftpArgs']]]]):
        pulumi.set(self, "logging_sftps", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name for the Service to create
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def papertrails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1PapertrailArgs']]]]:
        return pulumi.get(self, "papertrails")

    @papertrails.setter
    def papertrails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1PapertrailArgs']]]]):
        pulumi.set(self, "papertrails", value)

    @property
    @pulumi.getter(name="requestSettings")
    def request_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1RequestSettingArgs']]]]:
        return pulumi.get(self, "request_settings")

    @request_settings.setter
    def request_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1RequestSettingArgs']]]]):
        pulumi.set(self, "request_settings", value)

    @property
    @pulumi.getter(name="responseObjects")
    def response_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ResponseObjectArgs']]]]:
        return pulumi.get(self, "response_objects")

    @response_objects.setter
    def response_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1ResponseObjectArgs']]]]):
        pulumi.set(self, "response_objects", value)

    @property
    @pulumi.getter
    def s3loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1S3loggingArgs']]]]:
        return pulumi.get(self, "s3loggings")

    @s3loggings.setter
    def s3loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1S3loggingArgs']]]]):
        pulumi.set(self, "s3loggings", value)

    @property
    @pulumi.getter
    def snippets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SnippetArgs']]]]:
        return pulumi.get(self, "snippets")

    @snippets.setter
    def snippets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SnippetArgs']]]]):
        pulumi.set(self, "snippets", value)

    @property
    @pulumi.getter
    def splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SplunkArgs']]]]:
        return pulumi.get(self, "splunks")

    @splunks.setter
    def splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SplunkArgs']]]]):
        pulumi.set(self, "splunks", value)

    @property
    @pulumi.getter(name="staleIfError")
    def stale_if_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables serving a stale object if there is an error
        """
        return pulumi.get(self, "stale_if_error")

    @stale_if_error.setter
    def stale_if_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale_if_error", value)

    @property
    @pulumi.getter(name="staleIfErrorTtl")
    def stale_if_error_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default time-to-live (TTL) for serving the stale object for the version
        """
        return pulumi.get(self, "stale_if_error_ttl")

    @stale_if_error_ttl.setter
    def stale_if_error_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stale_if_error_ttl", value)

    @property
    @pulumi.getter
    def sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SumologicArgs']]]]:
        return pulumi.get(self, "sumologics")

    @sumologics.setter
    def sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SumologicArgs']]]]):
        pulumi.set(self, "sumologics", value)

    @property
    @pulumi.getter
    def syslogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SyslogArgs']]]]:
        return pulumi.get(self, "syslogs")

    @syslogs.setter
    def syslogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1SyslogArgs']]]]):
        pulumi.set(self, "syslogs", value)

    @property
    @pulumi.getter
    def vcls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1VclArgs']]]]:
        return pulumi.get(self, "vcls")

    @vcls.setter
    def vcls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['Servicev1VclArgs']]]]):
        pulumi.set(self, "vcls", value)

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

    @version_comment.setter
    def version_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_comment", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input['Servicev1WafArgs']]:
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input['Servicev1WafArgs']]):
        pulumi.set(self, "waf", value)


class Servicev1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1AclArgs']]]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BackendArgs']]]]] = None,
                 bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BigqueryloggingArgs']]]]] = None,
                 blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BlobstorageloggingArgs']]]]] = None,
                 cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1CacheSettingArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1ConditionArgs']]]]] = None,
                 default_host: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DictionaryArgs']]]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DirectorArgs']]]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DomainArgs']]]]] = None,
                 dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DynamicsnippetArgs']]]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1GcsloggingArgs']]]]] = None,
                 gzips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1GzipArgs']]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HeaderArgs']]]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HealthcheckArgs']]]]] = None,
                 httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HttpsloggingArgs']]]]] = None,
                 logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LogentryArgs']]]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingCloudfileArgs']]]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingDatadogArgs']]]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingDigitaloceanArgs']]]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingElasticsearchArgs']]]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingFtpArgs']]]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingGooglepubsubArgs']]]]] = None,
                 logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingHerokuArgs']]]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingHoneycombArgs']]]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingKafkaArgs']]]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingKineseArgs']]]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingLogglyArgs']]]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingLogshuttleArgs']]]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingNewrelicArgs']]]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingOpenstackArgs']]]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingScalyrArgs']]]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingSftpArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1PapertrailArgs']]]]] = None,
                 request_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1RequestSettingArgs']]]]] = None,
                 response_objects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1ResponseObjectArgs']]]]] = None,
                 s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1S3loggingArgs']]]]] = None,
                 snippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SnippetArgs']]]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SplunkArgs']]]]] = None,
                 stale_if_error: Optional[pulumi.Input[bool]] = None,
                 stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SumologicArgs']]]]] = None,
                 syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SyslogArgs']]]]] = None,
                 vcls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1VclArgs']]]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[pulumi.InputType['Servicev1WafArgs']]] = None,
                 __props__=None):
        """
        Provides a Fastly Service, representing the configuration for a website, app,
        API, or anything else to be served through Fastly. A Service encompasses Domains
        and Backends.

        The Service resource requires a domain name that is correctly set up to direct
        traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
        on their documentation site for guidance.

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[fastly.Servicev1BackendArgs(
                address="127.0.0.1",
                name="localhost",
                port=80,
            )],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="demo.notexample.com",
            )],
            force_destroy=True)
        ```

        Basic usage with an Amazon S3 Website and that removes the `x-amz-request-id` header:

        ```python
        import pulumi
        import pulumi_aws as aws
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[fastly.Servicev1BackendArgs(
                address="demo.notexample.com.s3-website-us-west-2.amazonaws.com",
                name="AWS S3 hosting",
                override_host="demo.notexample.com.s3-website-us-west-2.amazonaws.com",
                port=80,
            )],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="demo.notexample.com",
            )],
            force_destroy=True,
            gzips=[fastly.Servicev1GzipArgs(
                content_types=[
                    "text/html",
                    "text/css",
                ],
                extensions=[
                    "css",
                    "js",
                ],
                name="file extensions and content types",
            )],
            headers=[fastly.Servicev1HeaderArgs(
                action="delete",
                destination="http.x-amz-request-id",
                name="remove x-amz-request-id",
                type="cache",
            )])
        website = aws.s3.Bucket("website",
            acl="public-read",
            website=aws.s3.BucketWebsiteArgs(
                error_document="error.html",
                index_document="index.html",
            ))
        ```

        Basic usage with [custom
        VCL](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/):

        ```python
        import pulumi
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[fastly.Servicev1BackendArgs(
                address="127.0.0.1",
                name="localhost",
                port=80,
            )],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="demo.notexample.com",
            )],
            force_destroy=True,
            vcls=[
                fastly.Servicev1VclArgs(
                    content=(lambda path: open(path).read())(f"{path['module']}/my_custom_main.vcl"),
                    main=True,
                    name="my_custom_main_vcl",
                ),
                fastly.Servicev1VclArgs(
                    content=(lambda path: open(path).read())(f"{path['module']}/my_custom_library.vcl"),
                    name="my_custom_library_vcl",
                ),
            ])
        ```

        Basic usage with [custom Director](https://developer.fastly.com/reference/api/load-balancing/directors/director/):

        ```python
        import pulumi
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[
                fastly.Servicev1BackendArgs(
                    address="127.0.0.1",
                    name="origin1",
                    port=80,
                ),
                fastly.Servicev1BackendArgs(
                    address="127.0.0.2",
                    name="origin2",
                    port=80,
                ),
            ],
            directors=[fastly.Servicev1DirectorArgs(
                backends=[
                    "origin1",
                    "origin2",
                ],
                name="mydirector",
                quorum=0,
                type=3,
            )],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="demo.notexample.com",
            )],
            force_destroy=True)
        ```

        Basic usage with [Web Application Firewall](https://developer.fastly.com/reference/api/waf/):

        ```python
        import pulumi
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[fastly.Servicev1BackendArgs(
                address="127.0.0.1",
                name="origin1",
                port=80,
            )],
            conditions=[
                fastly.Servicev1ConditionArgs(
                    name="WAF_Prefetch",
                    statement="req.backend.is_origin",
                    type="PREFETCH",
                ),
                fastly.Servicev1ConditionArgs(
                    name="WAF_always_false",
                    statement="false",
                    type="REQUEST",
                ),
            ],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="example.com",
            )],
            force_destroy=True,
            response_objects=[fastly.Servicev1ResponseObjectArgs(
                content="<html><body>Forbidden</body></html>",
                content_type="text/html",
                name="WAF_Response",
                request_condition="WAF_always_false",
                response="Forbidden",
                status=403,
            )],
            waf=fastly.Servicev1WafArgs(
                prefetch_condition="WAF_Prefetch",
                response_object="WAF_Response",
            ))
        ```

        > **Note:** For an AWS S3 Bucket, the Backend address is
        `<domain>.s3-website-<region>.amazonaws.com`. The `override_host` attribute
        should be set to `<bucket_name>.s3-website-<region>.amazonaws.com` in the `backend` block. See the
        Fastly documentation on [Amazon S3][fastly-s3].

        [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
        [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
        [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
        [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/

        ## Import

        Fastly Services can be imported using their service ID, e.g.

        ```sh
         $ pulumi import fastly:index/servicev1:Servicev1 demo xxxxxxxxxxxxxxxxxxxx
        ```

         By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.

        ```sh
         $ pulumi import fastly:index/servicev1:Servicev1 demo xxxxxxxxxxxxxxxxxxxx@2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[str] comment: Description field for the service. Default `Managed by Terraform`
        :param pulumi.Input[str] default_host: The default hostname
        :param pulumi.Input[int] default_ttl: The default Time-to-live (TTL) for requests
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DomainArgs']]]] domains: A set of Domain names to serve as entry points for your Service
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        :param pulumi.Input[str] name: The unique name for the Service to create
        :param pulumi.Input[bool] stale_if_error: Enables serving a stale object if there is an error
        :param pulumi.Input[int] stale_if_error_ttl: The default time-to-live (TTL) for serving the stale object for the version
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Servicev1Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Fastly Service, representing the configuration for a website, app,
        API, or anything else to be served through Fastly. A Service encompasses Domains
        and Backends.

        The Service resource requires a domain name that is correctly set up to direct
        traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
        on their documentation site for guidance.

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[fastly.Servicev1BackendArgs(
                address="127.0.0.1",
                name="localhost",
                port=80,
            )],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="demo.notexample.com",
            )],
            force_destroy=True)
        ```

        Basic usage with an Amazon S3 Website and that removes the `x-amz-request-id` header:

        ```python
        import pulumi
        import pulumi_aws as aws
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[fastly.Servicev1BackendArgs(
                address="demo.notexample.com.s3-website-us-west-2.amazonaws.com",
                name="AWS S3 hosting",
                override_host="demo.notexample.com.s3-website-us-west-2.amazonaws.com",
                port=80,
            )],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="demo.notexample.com",
            )],
            force_destroy=True,
            gzips=[fastly.Servicev1GzipArgs(
                content_types=[
                    "text/html",
                    "text/css",
                ],
                extensions=[
                    "css",
                    "js",
                ],
                name="file extensions and content types",
            )],
            headers=[fastly.Servicev1HeaderArgs(
                action="delete",
                destination="http.x-amz-request-id",
                name="remove x-amz-request-id",
                type="cache",
            )])
        website = aws.s3.Bucket("website",
            acl="public-read",
            website=aws.s3.BucketWebsiteArgs(
                error_document="error.html",
                index_document="index.html",
            ))
        ```

        Basic usage with [custom
        VCL](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/):

        ```python
        import pulumi
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[fastly.Servicev1BackendArgs(
                address="127.0.0.1",
                name="localhost",
                port=80,
            )],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="demo.notexample.com",
            )],
            force_destroy=True,
            vcls=[
                fastly.Servicev1VclArgs(
                    content=(lambda path: open(path).read())(f"{path['module']}/my_custom_main.vcl"),
                    main=True,
                    name="my_custom_main_vcl",
                ),
                fastly.Servicev1VclArgs(
                    content=(lambda path: open(path).read())(f"{path['module']}/my_custom_library.vcl"),
                    name="my_custom_library_vcl",
                ),
            ])
        ```

        Basic usage with [custom Director](https://developer.fastly.com/reference/api/load-balancing/directors/director/):

        ```python
        import pulumi
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[
                fastly.Servicev1BackendArgs(
                    address="127.0.0.1",
                    name="origin1",
                    port=80,
                ),
                fastly.Servicev1BackendArgs(
                    address="127.0.0.2",
                    name="origin2",
                    port=80,
                ),
            ],
            directors=[fastly.Servicev1DirectorArgs(
                backends=[
                    "origin1",
                    "origin2",
                ],
                name="mydirector",
                quorum=0,
                type=3,
            )],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="demo.notexample.com",
            )],
            force_destroy=True)
        ```

        Basic usage with [Web Application Firewall](https://developer.fastly.com/reference/api/waf/):

        ```python
        import pulumi
        import pulumi_fastly as fastly

        demo = fastly.Servicev1("demo",
            backends=[fastly.Servicev1BackendArgs(
                address="127.0.0.1",
                name="origin1",
                port=80,
            )],
            conditions=[
                fastly.Servicev1ConditionArgs(
                    name="WAF_Prefetch",
                    statement="req.backend.is_origin",
                    type="PREFETCH",
                ),
                fastly.Servicev1ConditionArgs(
                    name="WAF_always_false",
                    statement="false",
                    type="REQUEST",
                ),
            ],
            domains=[fastly.Servicev1DomainArgs(
                comment="demo",
                name="example.com",
            )],
            force_destroy=True,
            response_objects=[fastly.Servicev1ResponseObjectArgs(
                content="<html><body>Forbidden</body></html>",
                content_type="text/html",
                name="WAF_Response",
                request_condition="WAF_always_false",
                response="Forbidden",
                status=403,
            )],
            waf=fastly.Servicev1WafArgs(
                prefetch_condition="WAF_Prefetch",
                response_object="WAF_Response",
            ))
        ```

        > **Note:** For an AWS S3 Bucket, the Backend address is
        `<domain>.s3-website-<region>.amazonaws.com`. The `override_host` attribute
        should be set to `<bucket_name>.s3-website-<region>.amazonaws.com` in the `backend` block. See the
        Fastly documentation on [Amazon S3][fastly-s3].

        [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
        [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
        [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
        [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/

        ## Import

        Fastly Services can be imported using their service ID, e.g.

        ```sh
         $ pulumi import fastly:index/servicev1:Servicev1 demo xxxxxxxxxxxxxxxxxxxx
        ```

         By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.

        ```sh
         $ pulumi import fastly:index/servicev1:Servicev1 demo xxxxxxxxxxxxxxxxxxxx@2
        ```

        :param str resource_name: The name of the resource.
        :param Servicev1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(Servicev1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1AclArgs']]]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BackendArgs']]]]] = None,
                 bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BigqueryloggingArgs']]]]] = None,
                 blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BlobstorageloggingArgs']]]]] = None,
                 cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1CacheSettingArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1ConditionArgs']]]]] = None,
                 default_host: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DictionaryArgs']]]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DirectorArgs']]]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DomainArgs']]]]] = None,
                 dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DynamicsnippetArgs']]]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1GcsloggingArgs']]]]] = None,
                 gzips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1GzipArgs']]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HeaderArgs']]]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HealthcheckArgs']]]]] = None,
                 httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HttpsloggingArgs']]]]] = None,
                 logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LogentryArgs']]]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingCloudfileArgs']]]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingDatadogArgs']]]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingDigitaloceanArgs']]]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingElasticsearchArgs']]]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingFtpArgs']]]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingGooglepubsubArgs']]]]] = None,
                 logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingHerokuArgs']]]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingHoneycombArgs']]]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingKafkaArgs']]]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingKineseArgs']]]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingLogglyArgs']]]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingLogshuttleArgs']]]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingNewrelicArgs']]]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingOpenstackArgs']]]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingScalyrArgs']]]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingSftpArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1PapertrailArgs']]]]] = None,
                 request_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1RequestSettingArgs']]]]] = None,
                 response_objects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1ResponseObjectArgs']]]]] = None,
                 s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1S3loggingArgs']]]]] = None,
                 snippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SnippetArgs']]]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SplunkArgs']]]]] = None,
                 stale_if_error: Optional[pulumi.Input[bool]] = None,
                 stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SumologicArgs']]]]] = None,
                 syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SyslogArgs']]]]] = None,
                 vcls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1VclArgs']]]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[pulumi.InputType['Servicev1WafArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = Servicev1Args.__new__(Servicev1Args)

            __props__.__dict__["acls"] = acls
            __props__.__dict__["activate"] = activate
            __props__.__dict__["backends"] = backends
            __props__.__dict__["bigqueryloggings"] = bigqueryloggings
            __props__.__dict__["blobstorageloggings"] = blobstorageloggings
            __props__.__dict__["cache_settings"] = cache_settings
            __props__.__dict__["comment"] = comment
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["default_host"] = default_host
            __props__.__dict__["default_ttl"] = default_ttl
            __props__.__dict__["dictionaries"] = dictionaries
            __props__.__dict__["directors"] = directors
            if domains is None and not opts.urn:
                raise TypeError("Missing required property 'domains'")
            __props__.__dict__["domains"] = domains
            __props__.__dict__["dynamicsnippets"] = dynamicsnippets
            __props__.__dict__["force_destroy"] = force_destroy
            __props__.__dict__["gcsloggings"] = gcsloggings
            __props__.__dict__["gzips"] = gzips
            __props__.__dict__["headers"] = headers
            __props__.__dict__["healthchecks"] = healthchecks
            __props__.__dict__["httpsloggings"] = httpsloggings
            __props__.__dict__["logentries"] = logentries
            __props__.__dict__["logging_cloudfiles"] = logging_cloudfiles
            __props__.__dict__["logging_datadogs"] = logging_datadogs
            __props__.__dict__["logging_digitaloceans"] = logging_digitaloceans
            __props__.__dict__["logging_elasticsearches"] = logging_elasticsearches
            __props__.__dict__["logging_ftps"] = logging_ftps
            __props__.__dict__["logging_googlepubsubs"] = logging_googlepubsubs
            __props__.__dict__["logging_heroku"] = logging_heroku
            __props__.__dict__["logging_honeycombs"] = logging_honeycombs
            __props__.__dict__["logging_kafkas"] = logging_kafkas
            __props__.__dict__["logging_kineses"] = logging_kineses
            __props__.__dict__["logging_logglies"] = logging_logglies
            __props__.__dict__["logging_logshuttles"] = logging_logshuttles
            __props__.__dict__["logging_newrelics"] = logging_newrelics
            __props__.__dict__["logging_openstacks"] = logging_openstacks
            __props__.__dict__["logging_scalyrs"] = logging_scalyrs
            __props__.__dict__["logging_sftps"] = logging_sftps
            __props__.__dict__["name"] = name
            __props__.__dict__["papertrails"] = papertrails
            __props__.__dict__["request_settings"] = request_settings
            __props__.__dict__["response_objects"] = response_objects
            __props__.__dict__["s3loggings"] = s3loggings
            __props__.__dict__["snippets"] = snippets
            __props__.__dict__["splunks"] = splunks
            __props__.__dict__["stale_if_error"] = stale_if_error
            __props__.__dict__["stale_if_error_ttl"] = stale_if_error_ttl
            __props__.__dict__["sumologics"] = sumologics
            __props__.__dict__["syslogs"] = syslogs
            __props__.__dict__["vcls"] = vcls
            __props__.__dict__["version_comment"] = version_comment
            __props__.__dict__["waf"] = waf
            __props__.__dict__["active_version"] = None
            __props__.__dict__["cloned_version"] = None
        super(Servicev1, __self__).__init__(
            'fastly:index/servicev1:Servicev1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1AclArgs']]]]] = None,
            activate: Optional[pulumi.Input[bool]] = None,
            active_version: Optional[pulumi.Input[int]] = None,
            backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BackendArgs']]]]] = None,
            bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BigqueryloggingArgs']]]]] = None,
            blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1BlobstorageloggingArgs']]]]] = None,
            cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1CacheSettingArgs']]]]] = None,
            cloned_version: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1ConditionArgs']]]]] = None,
            default_host: Optional[pulumi.Input[str]] = None,
            default_ttl: Optional[pulumi.Input[int]] = None,
            dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DictionaryArgs']]]]] = None,
            directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DirectorArgs']]]]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DomainArgs']]]]] = None,
            dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DynamicsnippetArgs']]]]] = None,
            force_destroy: Optional[pulumi.Input[bool]] = None,
            gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1GcsloggingArgs']]]]] = None,
            gzips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1GzipArgs']]]]] = None,
            headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HeaderArgs']]]]] = None,
            healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HealthcheckArgs']]]]] = None,
            httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1HttpsloggingArgs']]]]] = None,
            logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LogentryArgs']]]]] = None,
            logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingCloudfileArgs']]]]] = None,
            logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingDatadogArgs']]]]] = None,
            logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingDigitaloceanArgs']]]]] = None,
            logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingElasticsearchArgs']]]]] = None,
            logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingFtpArgs']]]]] = None,
            logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingGooglepubsubArgs']]]]] = None,
            logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingHerokuArgs']]]]] = None,
            logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingHoneycombArgs']]]]] = None,
            logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingKafkaArgs']]]]] = None,
            logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingKineseArgs']]]]] = None,
            logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingLogglyArgs']]]]] = None,
            logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingLogshuttleArgs']]]]] = None,
            logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingNewrelicArgs']]]]] = None,
            logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingOpenstackArgs']]]]] = None,
            logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingScalyrArgs']]]]] = None,
            logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1LoggingSftpArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1PapertrailArgs']]]]] = None,
            request_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1RequestSettingArgs']]]]] = None,
            response_objects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1ResponseObjectArgs']]]]] = None,
            s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1S3loggingArgs']]]]] = None,
            snippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SnippetArgs']]]]] = None,
            splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SplunkArgs']]]]] = None,
            stale_if_error: Optional[pulumi.Input[bool]] = None,
            stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
            sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SumologicArgs']]]]] = None,
            syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1SyslogArgs']]]]] = None,
            vcls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1VclArgs']]]]] = None,
            version_comment: Optional[pulumi.Input[str]] = None,
            waf: Optional[pulumi.Input[pulumi.InputType['Servicev1WafArgs']]] = None) -> 'Servicev1':
        """
        Get an existing Servicev1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[int] active_version: The currently active version of your Fastly Service
        :param pulumi.Input[int] cloned_version: The latest cloned version by the provider
        :param pulumi.Input[str] comment: Description field for the service. Default `Managed by Terraform`
        :param pulumi.Input[str] default_host: The default hostname
        :param pulumi.Input[int] default_ttl: The default Time-to-live (TTL) for requests
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['Servicev1DomainArgs']]]] domains: A set of Domain names to serve as entry points for your Service
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        :param pulumi.Input[str] name: The unique name for the Service to create
        :param pulumi.Input[bool] stale_if_error: Enables serving a stale object if there is an error
        :param pulumi.Input[int] stale_if_error_ttl: The default time-to-live (TTL) for serving the stale object for the version
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _Servicev1State.__new__(_Servicev1State)

        __props__.__dict__["acls"] = acls
        __props__.__dict__["activate"] = activate
        __props__.__dict__["active_version"] = active_version
        __props__.__dict__["backends"] = backends
        __props__.__dict__["bigqueryloggings"] = bigqueryloggings
        __props__.__dict__["blobstorageloggings"] = blobstorageloggings
        __props__.__dict__["cache_settings"] = cache_settings
        __props__.__dict__["cloned_version"] = cloned_version
        __props__.__dict__["comment"] = comment
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["default_host"] = default_host
        __props__.__dict__["default_ttl"] = default_ttl
        __props__.__dict__["dictionaries"] = dictionaries
        __props__.__dict__["directors"] = directors
        __props__.__dict__["domains"] = domains
        __props__.__dict__["dynamicsnippets"] = dynamicsnippets
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["gcsloggings"] = gcsloggings
        __props__.__dict__["gzips"] = gzips
        __props__.__dict__["headers"] = headers
        __props__.__dict__["healthchecks"] = healthchecks
        __props__.__dict__["httpsloggings"] = httpsloggings
        __props__.__dict__["logentries"] = logentries
        __props__.__dict__["logging_cloudfiles"] = logging_cloudfiles
        __props__.__dict__["logging_datadogs"] = logging_datadogs
        __props__.__dict__["logging_digitaloceans"] = logging_digitaloceans
        __props__.__dict__["logging_elasticsearches"] = logging_elasticsearches
        __props__.__dict__["logging_ftps"] = logging_ftps
        __props__.__dict__["logging_googlepubsubs"] = logging_googlepubsubs
        __props__.__dict__["logging_heroku"] = logging_heroku
        __props__.__dict__["logging_honeycombs"] = logging_honeycombs
        __props__.__dict__["logging_kafkas"] = logging_kafkas
        __props__.__dict__["logging_kineses"] = logging_kineses
        __props__.__dict__["logging_logglies"] = logging_logglies
        __props__.__dict__["logging_logshuttles"] = logging_logshuttles
        __props__.__dict__["logging_newrelics"] = logging_newrelics
        __props__.__dict__["logging_openstacks"] = logging_openstacks
        __props__.__dict__["logging_scalyrs"] = logging_scalyrs
        __props__.__dict__["logging_sftps"] = logging_sftps
        __props__.__dict__["name"] = name
        __props__.__dict__["papertrails"] = papertrails
        __props__.__dict__["request_settings"] = request_settings
        __props__.__dict__["response_objects"] = response_objects
        __props__.__dict__["s3loggings"] = s3loggings
        __props__.__dict__["snippets"] = snippets
        __props__.__dict__["splunks"] = splunks
        __props__.__dict__["stale_if_error"] = stale_if_error
        __props__.__dict__["stale_if_error_ttl"] = stale_if_error_ttl
        __props__.__dict__["sumologics"] = sumologics
        __props__.__dict__["syslogs"] = syslogs
        __props__.__dict__["vcls"] = vcls
        __props__.__dict__["version_comment"] = version_comment
        __props__.__dict__["waf"] = waf
        return Servicev1(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acls(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Acl']]]:
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter
    def activate(self) -> pulumi.Output[Optional[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter(name="activeVersion")
    def active_version(self) -> pulumi.Output[int]:
        """
        The currently active version of your Fastly Service
        """
        return pulumi.get(self, "active_version")

    @property
    @pulumi.getter
    def backends(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Backend']]]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def bigqueryloggings(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Bigquerylogging']]]:
        return pulumi.get(self, "bigqueryloggings")

    @property
    @pulumi.getter
    def blobstorageloggings(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Blobstoragelogging']]]:
        return pulumi.get(self, "blobstorageloggings")

    @property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1CacheSetting']]]:
        return pulumi.get(self, "cache_settings")

    @property
    @pulumi.getter(name="clonedVersion")
    def cloned_version(self) -> pulumi.Output[int]:
        """
        The latest cloned version by the provider
        """
        return pulumi.get(self, "cloned_version")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Description field for the service. Default `Managed by Terraform`
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Condition']]]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="defaultHost")
    def default_host(self) -> pulumi.Output[Optional[str]]:
        """
        The default hostname
        """
        return pulumi.get(self, "default_host")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> pulumi.Output[Optional[int]]:
        """
        The default Time-to-live (TTL) for requests
        """
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter
    def dictionaries(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Dictionary']]]:
        return pulumi.get(self, "dictionaries")

    @property
    @pulumi.getter
    def directors(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Director']]]:
        return pulumi.get(self, "directors")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence['outputs.Servicev1Domain']]:
        """
        A set of Domain names to serve as entry points for your Service
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def dynamicsnippets(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Dynamicsnippet']]]:
        return pulumi.get(self, "dynamicsnippets")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[bool]]:
        """
        Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        """
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter
    def gcsloggings(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Gcslogging']]]:
        return pulumi.get(self, "gcsloggings")

    @property
    @pulumi.getter
    def gzips(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Gzip']]]:
        return pulumi.get(self, "gzips")

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Header']]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def healthchecks(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Healthcheck']]]:
        return pulumi.get(self, "healthchecks")

    @property
    @pulumi.getter
    def httpsloggings(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Httpslogging']]]:
        return pulumi.get(self, "httpsloggings")

    @property
    @pulumi.getter
    def logentries(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Logentry']]]:
        return pulumi.get(self, "logentries")

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingCloudfile']]]:
        return pulumi.get(self, "logging_cloudfiles")

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingDatadog']]]:
        return pulumi.get(self, "logging_datadogs")

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingDigitalocean']]]:
        return pulumi.get(self, "logging_digitaloceans")

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingElasticsearch']]]:
        return pulumi.get(self, "logging_elasticsearches")

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingFtp']]]:
        return pulumi.get(self, "logging_ftps")

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingGooglepubsub']]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @property
    @pulumi.getter(name="loggingHeroku")
    def logging_heroku(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingHeroku']]]:
        return pulumi.get(self, "logging_heroku")

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingHoneycomb']]]:
        return pulumi.get(self, "logging_honeycombs")

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingKafka']]]:
        return pulumi.get(self, "logging_kafkas")

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingKinese']]]:
        return pulumi.get(self, "logging_kineses")

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingLoggly']]]:
        return pulumi.get(self, "logging_logglies")

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingLogshuttle']]]:
        return pulumi.get(self, "logging_logshuttles")

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingNewrelic']]]:
        return pulumi.get(self, "logging_newrelics")

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingOpenstack']]]:
        return pulumi.get(self, "logging_openstacks")

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingScalyr']]]:
        return pulumi.get(self, "logging_scalyrs")

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1LoggingSftp']]]:
        return pulumi.get(self, "logging_sftps")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The unique name for the Service to create
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def papertrails(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Papertrail']]]:
        return pulumi.get(self, "papertrails")

    @property
    @pulumi.getter(name="requestSettings")
    def request_settings(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1RequestSetting']]]:
        return pulumi.get(self, "request_settings")

    @property
    @pulumi.getter(name="responseObjects")
    def response_objects(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1ResponseObject']]]:
        return pulumi.get(self, "response_objects")

    @property
    @pulumi.getter
    def s3loggings(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1S3logging']]]:
        return pulumi.get(self, "s3loggings")

    @property
    @pulumi.getter
    def snippets(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Snippet']]]:
        return pulumi.get(self, "snippets")

    @property
    @pulumi.getter
    def splunks(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Splunk']]]:
        return pulumi.get(self, "splunks")

    @property
    @pulumi.getter(name="staleIfError")
    def stale_if_error(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables serving a stale object if there is an error
        """
        return pulumi.get(self, "stale_if_error")

    @property
    @pulumi.getter(name="staleIfErrorTtl")
    def stale_if_error_ttl(self) -> pulumi.Output[Optional[int]]:
        """
        The default time-to-live (TTL) for serving the stale object for the version
        """
        return pulumi.get(self, "stale_if_error_ttl")

    @property
    @pulumi.getter
    def sumologics(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Sumologic']]]:
        return pulumi.get(self, "sumologics")

    @property
    @pulumi.getter
    def syslogs(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Syslog']]]:
        return pulumi.get(self, "syslogs")

    @property
    @pulumi.getter
    def vcls(self) -> pulumi.Output[Optional[Sequence['outputs.Servicev1Vcl']]]:
        return pulumi.get(self, "vcls")

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> pulumi.Output[Optional[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

    @property
    @pulumi.getter
    def waf(self) -> pulumi.Output[Optional['outputs.Servicev1Waf']]:
        return pulumi.get(self, "waf")

