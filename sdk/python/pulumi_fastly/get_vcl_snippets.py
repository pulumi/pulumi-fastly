# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetVclSnippetsResult',
    'AwaitableGetVclSnippetsResult',
    'get_vcl_snippets',
    'get_vcl_snippets_output',
]

@pulumi.output_type
class GetVclSnippetsResult:
    """
    A collection of values returned by getVclSnippets.
    """
    def __init__(__self__, id=None, service_id=None, service_version=None, vcl_snippets=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if service_id and not isinstance(service_id, str):
            raise TypeError("Expected argument 'service_id' to be a str")
        pulumi.set(__self__, "service_id", service_id)
        if service_version and not isinstance(service_version, int):
            raise TypeError("Expected argument 'service_version' to be a int")
        pulumi.set(__self__, "service_version", service_version)
        if vcl_snippets and not isinstance(vcl_snippets, list):
            raise TypeError("Expected argument 'vcl_snippets' to be a list")
        pulumi.set(__self__, "vcl_snippets", vcl_snippets)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceVersion")
    def service_version(self) -> int:
        return pulumi.get(self, "service_version")

    @property
    @pulumi.getter(name="vclSnippets")
    def vcl_snippets(self) -> Sequence['outputs.GetVclSnippetsVclSnippetResult']:
        return pulumi.get(self, "vcl_snippets")


class AwaitableGetVclSnippetsResult(GetVclSnippetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVclSnippetsResult(
            id=self.id,
            service_id=self.service_id,
            service_version=self.service_version,
            vcl_snippets=self.vcl_snippets)


def get_vcl_snippets(service_id: Optional[str] = None,
                     service_version: Optional[int] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVclSnippetsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['serviceId'] = service_id
    __args__['serviceVersion'] = service_version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fastly:index/getVclSnippets:getVclSnippets', __args__, opts=opts, typ=GetVclSnippetsResult).value

    return AwaitableGetVclSnippetsResult(
        id=pulumi.get(__ret__, 'id'),
        service_id=pulumi.get(__ret__, 'service_id'),
        service_version=pulumi.get(__ret__, 'service_version'),
        vcl_snippets=pulumi.get(__ret__, 'vcl_snippets'))


@_utilities.lift_output_func(get_vcl_snippets)
def get_vcl_snippets_output(service_id: Optional[pulumi.Input[str]] = None,
                            service_version: Optional[pulumi.Input[int]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVclSnippetsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
