# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNgwafThresholdsResult',
    'AwaitableGetNgwafThresholdsResult',
    'get_ngwaf_thresholds',
    'get_ngwaf_thresholds_output',
]

@pulumi.output_type
class GetNgwafThresholdsResult:
    """
    A collection of values returned by getNgwafThresholds.
    """
    def __init__(__self__, id=None, thresholds=None, workspace_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if thresholds and not isinstance(thresholds, list):
            raise TypeError("Expected argument 'thresholds' to be a list")
        pulumi.set(__self__, "thresholds", thresholds)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def thresholds(self) -> Sequence['outputs.GetNgwafThresholdsThresholdResult']:
        """
        List of all thresholds for a given workspace.
        """
        return pulumi.get(self, "thresholds")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        The ID of the workspace.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetNgwafThresholdsResult(GetNgwafThresholdsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNgwafThresholdsResult(
            id=self.id,
            thresholds=self.thresholds,
            workspace_id=self.workspace_id)


def get_ngwaf_thresholds(workspace_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNgwafThresholdsResult:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str workspace_id: The ID of the workspace.
    """
    __args__ = dict()
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fastly:index/getNgwafThresholds:getNgwafThresholds', __args__, opts=opts, typ=GetNgwafThresholdsResult).value

    return AwaitableGetNgwafThresholdsResult(
        id=pulumi.get(__ret__, 'id'),
        thresholds=pulumi.get(__ret__, 'thresholds'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_ngwaf_thresholds_output(workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNgwafThresholdsResult]:
    """
    Use this data source to access information about an existing resource.

    :param _builtins.str workspace_id: The ID of the workspace.
    """
    __args__ = dict()
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('fastly:index/getNgwafThresholds:getNgwafThresholds', __args__, opts=opts, typ=GetNgwafThresholdsResult)
    return __ret__.apply(lambda __response__: GetNgwafThresholdsResult(
        id=pulumi.get(__response__, 'id'),
        thresholds=pulumi.get(__response__, 'thresholds'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
