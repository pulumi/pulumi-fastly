# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNgwafAlertSlackIntegrationResult',
    'AwaitableGetNgwafAlertSlackIntegrationResult',
    'get_ngwaf_alert_slack_integration',
    'get_ngwaf_alert_slack_integration_output',
]

@pulumi.output_type
class GetNgwafAlertSlackIntegrationResult:
    """
    A collection of values returned by getNgwafAlertSlackIntegration.
    """
    def __init__(__self__, id=None, slack_alerts=None, workspace_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if slack_alerts and not isinstance(slack_alerts, list):
            raise TypeError("Expected argument 'slack_alerts' to be a list")
        pulumi.set(__self__, "slack_alerts", slack_alerts)
        if workspace_id and not isinstance(workspace_id, str):
            raise TypeError("Expected argument 'workspace_id' to be a str")
        pulumi.set(__self__, "workspace_id", workspace_id)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="slackAlerts")
    def slack_alerts(self) -> Sequence['outputs.GetNgwafAlertSlackIntegrationSlackAlertResult']:
        """
        List of all Slack alerts for a workspace.
        """
        return pulumi.get(self, "slack_alerts")

    @_builtins.property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> _builtins.str:
        """
        The ID of the workspace.
        """
        return pulumi.get(self, "workspace_id")


class AwaitableGetNgwafAlertSlackIntegrationResult(GetNgwafAlertSlackIntegrationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNgwafAlertSlackIntegrationResult(
            id=self.id,
            slack_alerts=self.slack_alerts,
            workspace_id=self.workspace_id)


def get_ngwaf_alert_slack_integration(workspace_id: Optional[_builtins.str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNgwafAlertSlackIntegrationResult:
    """
    Use this data source to get a Fastly Next-Gen WAF Alert Slack integration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fastly as fastly

    ngwaf_slack_alerts = fastly.get_ngwaf_alert_slack_integration(workspace_id=example["id"])
    pulumi.export("ngwafSlackAlertsAll", ngwaf_slack_alerts)
    ```


    :param _builtins.str workspace_id: The ID of the workspace.
    """
    __args__ = dict()
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('fastly:index/getNgwafAlertSlackIntegration:getNgwafAlertSlackIntegration', __args__, opts=opts, typ=GetNgwafAlertSlackIntegrationResult).value

    return AwaitableGetNgwafAlertSlackIntegrationResult(
        id=pulumi.get(__ret__, 'id'),
        slack_alerts=pulumi.get(__ret__, 'slack_alerts'),
        workspace_id=pulumi.get(__ret__, 'workspace_id'))
def get_ngwaf_alert_slack_integration_output(workspace_id: Optional[pulumi.Input[_builtins.str]] = None,
                                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNgwafAlertSlackIntegrationResult]:
    """
    Use this data source to get a Fastly Next-Gen WAF Alert Slack integration.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_fastly as fastly

    ngwaf_slack_alerts = fastly.get_ngwaf_alert_slack_integration(workspace_id=example["id"])
    pulumi.export("ngwafSlackAlertsAll", ngwaf_slack_alerts)
    ```


    :param _builtins.str workspace_id: The ID of the workspace.
    """
    __args__ = dict()
    __args__['workspaceId'] = workspace_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('fastly:index/getNgwafAlertSlackIntegration:getNgwafAlertSlackIntegration', __args__, opts=opts, typ=GetNgwafAlertSlackIntegrationResult)
    return __ret__.apply(lambda __response__: GetNgwafAlertSlackIntegrationResult(
        id=pulumi.get(__response__, 'id'),
        slack_alerts=pulumi.get(__response__, 'slack_alerts'),
        workspace_id=pulumi.get(__response__, 'workspace_id')))
