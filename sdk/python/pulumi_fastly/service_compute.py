# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceComputeArgs', 'ServiceCompute']

@pulumi.input_type
class ServiceComputeArgs:
    def __init__(__self__, *,
                 backends: pulumi.Input[Sequence[pulumi.Input['ServiceComputeBackendArgs']]],
                 domains: pulumi.Input[Sequence[pulumi.Input['ServiceComputeDomainArgs']]],
                 package: pulumi.Input['ServiceComputePackageArgs'],
                 activate: Optional[pulumi.Input[bool]] = None,
                 bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBigqueryloggingArgs']]]] = None,
                 blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBlobstorageloggingArgs']]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDictionaryArgs']]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDirectorArgs']]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeGcsloggingArgs']]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHealthcheckArgs']]]] = None,
                 httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHttpsloggingArgs']]]] = None,
                 logentries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLogentryArgs']]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingCloudfileArgs']]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDatadogArgs']]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDigitaloceanArgs']]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingElasticsearchArgs']]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingFtpArgs']]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingGooglepubsubArgs']]]] = None,
                 logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHerokuArgs']]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHoneycombArgs']]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKafkaArgs']]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKineseArgs']]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogglyArgs']]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogshuttleArgs']]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingNewrelicArgs']]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingOpenstackArgs']]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingScalyrArgs']]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingSftpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 papertrails: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputePapertrailArgs']]]] = None,
                 s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeS3loggingArgs']]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSplunkArgs']]]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSumologicArgs']]]] = None,
                 syslogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSyslogArgs']]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceCompute resource.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceComputeDomainArgs']]] domains: A set of Domain names to serve as entry points for your Service
        :param pulumi.Input['ServiceComputePackageArgs'] package: The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[str] comment: Description field for the service. Default `Managed by Terraform`
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        :param pulumi.Input[str] name: The unique name for the Service to create
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        pulumi.set(__self__, "backends", backends)
        pulumi.set(__self__, "domains", domains)
        pulumi.set(__self__, "package", package)
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if bigqueryloggings is not None:
            pulumi.set(__self__, "bigqueryloggings", bigqueryloggings)
        if blobstorageloggings is not None:
            pulumi.set(__self__, "blobstorageloggings", blobstorageloggings)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dictionaries is not None:
            pulumi.set(__self__, "dictionaries", dictionaries)
        if directors is not None:
            pulumi.set(__self__, "directors", directors)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if gcsloggings is not None:
            pulumi.set(__self__, "gcsloggings", gcsloggings)
        if healthchecks is not None:
            pulumi.set(__self__, "healthchecks", healthchecks)
        if httpsloggings is not None:
            pulumi.set(__self__, "httpsloggings", httpsloggings)
        if logentries is not None:
            pulumi.set(__self__, "logentries", logentries)
        if logging_cloudfiles is not None:
            pulumi.set(__self__, "logging_cloudfiles", logging_cloudfiles)
        if logging_datadogs is not None:
            pulumi.set(__self__, "logging_datadogs", logging_datadogs)
        if logging_digitaloceans is not None:
            pulumi.set(__self__, "logging_digitaloceans", logging_digitaloceans)
        if logging_elasticsearches is not None:
            pulumi.set(__self__, "logging_elasticsearches", logging_elasticsearches)
        if logging_ftps is not None:
            pulumi.set(__self__, "logging_ftps", logging_ftps)
        if logging_googlepubsubs is not None:
            pulumi.set(__self__, "logging_googlepubsubs", logging_googlepubsubs)
        if logging_heroku is not None:
            pulumi.set(__self__, "logging_heroku", logging_heroku)
        if logging_honeycombs is not None:
            pulumi.set(__self__, "logging_honeycombs", logging_honeycombs)
        if logging_kafkas is not None:
            pulumi.set(__self__, "logging_kafkas", logging_kafkas)
        if logging_kineses is not None:
            pulumi.set(__self__, "logging_kineses", logging_kineses)
        if logging_logglies is not None:
            pulumi.set(__self__, "logging_logglies", logging_logglies)
        if logging_logshuttles is not None:
            pulumi.set(__self__, "logging_logshuttles", logging_logshuttles)
        if logging_newrelics is not None:
            pulumi.set(__self__, "logging_newrelics", logging_newrelics)
        if logging_openstacks is not None:
            pulumi.set(__self__, "logging_openstacks", logging_openstacks)
        if logging_scalyrs is not None:
            pulumi.set(__self__, "logging_scalyrs", logging_scalyrs)
        if logging_sftps is not None:
            pulumi.set(__self__, "logging_sftps", logging_sftps)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if papertrails is not None:
            pulumi.set(__self__, "papertrails", papertrails)
        if s3loggings is not None:
            pulumi.set(__self__, "s3loggings", s3loggings)
        if splunks is not None:
            pulumi.set(__self__, "splunks", splunks)
        if sumologics is not None:
            pulumi.set(__self__, "sumologics", sumologics)
        if syslogs is not None:
            pulumi.set(__self__, "syslogs", syslogs)
        if version_comment is not None:
            pulumi.set(__self__, "version_comment", version_comment)

    @property
    @pulumi.getter
    def backends(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceComputeBackendArgs']]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceComputeBackendArgs']]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceComputeDomainArgs']]]:
        """
        A set of Domain names to serve as entry points for your Service
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceComputeDomainArgs']]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def package(self) -> pulumi.Input['ServiceComputePackageArgs']:
        """
        The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        """
        return pulumi.get(self, "package")

    @package.setter
    def package(self, value: pulumi.Input['ServiceComputePackageArgs']):
        pulumi.set(self, "package", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def bigqueryloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBigqueryloggingArgs']]]]:
        return pulumi.get(self, "bigqueryloggings")

    @bigqueryloggings.setter
    def bigqueryloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBigqueryloggingArgs']]]]):
        pulumi.set(self, "bigqueryloggings", value)

    @property
    @pulumi.getter
    def blobstorageloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBlobstorageloggingArgs']]]]:
        return pulumi.get(self, "blobstorageloggings")

    @blobstorageloggings.setter
    def blobstorageloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBlobstorageloggingArgs']]]]):
        pulumi.set(self, "blobstorageloggings", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the service. Default `Managed by Terraform`
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDictionaryArgs']]]]:
        return pulumi.get(self, "dictionaries")

    @dictionaries.setter
    def dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDictionaryArgs']]]]):
        pulumi.set(self, "dictionaries", value)

    @property
    @pulumi.getter
    def directors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDirectorArgs']]]]:
        return pulumi.get(self, "directors")

    @directors.setter
    def directors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDirectorArgs']]]]):
        pulumi.set(self, "directors", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def gcsloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeGcsloggingArgs']]]]:
        return pulumi.get(self, "gcsloggings")

    @gcsloggings.setter
    def gcsloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeGcsloggingArgs']]]]):
        pulumi.set(self, "gcsloggings", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHealthcheckArgs']]]]:
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHealthcheckArgs']]]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter
    def httpsloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHttpsloggingArgs']]]]:
        return pulumi.get(self, "httpsloggings")

    @httpsloggings.setter
    def httpsloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHttpsloggingArgs']]]]):
        pulumi.set(self, "httpsloggings", value)

    @property
    @pulumi.getter
    def logentries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLogentryArgs']]]]:
        return pulumi.get(self, "logentries")

    @logentries.setter
    def logentries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLogentryArgs']]]]):
        pulumi.set(self, "logentries", value)

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingCloudfileArgs']]]]:
        return pulumi.get(self, "logging_cloudfiles")

    @logging_cloudfiles.setter
    def logging_cloudfiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingCloudfileArgs']]]]):
        pulumi.set(self, "logging_cloudfiles", value)

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDatadogArgs']]]]:
        return pulumi.get(self, "logging_datadogs")

    @logging_datadogs.setter
    def logging_datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDatadogArgs']]]]):
        pulumi.set(self, "logging_datadogs", value)

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDigitaloceanArgs']]]]:
        return pulumi.get(self, "logging_digitaloceans")

    @logging_digitaloceans.setter
    def logging_digitaloceans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDigitaloceanArgs']]]]):
        pulumi.set(self, "logging_digitaloceans", value)

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingElasticsearchArgs']]]]:
        return pulumi.get(self, "logging_elasticsearches")

    @logging_elasticsearches.setter
    def logging_elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingElasticsearchArgs']]]]):
        pulumi.set(self, "logging_elasticsearches", value)

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingFtpArgs']]]]:
        return pulumi.get(self, "logging_ftps")

    @logging_ftps.setter
    def logging_ftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingFtpArgs']]]]):
        pulumi.set(self, "logging_ftps", value)

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingGooglepubsubArgs']]]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @logging_googlepubsubs.setter
    def logging_googlepubsubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingGooglepubsubArgs']]]]):
        pulumi.set(self, "logging_googlepubsubs", value)

    @property
    @pulumi.getter(name="loggingHeroku")
    def logging_heroku(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHerokuArgs']]]]:
        return pulumi.get(self, "logging_heroku")

    @logging_heroku.setter
    def logging_heroku(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHerokuArgs']]]]):
        pulumi.set(self, "logging_heroku", value)

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHoneycombArgs']]]]:
        return pulumi.get(self, "logging_honeycombs")

    @logging_honeycombs.setter
    def logging_honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHoneycombArgs']]]]):
        pulumi.set(self, "logging_honeycombs", value)

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKafkaArgs']]]]:
        return pulumi.get(self, "logging_kafkas")

    @logging_kafkas.setter
    def logging_kafkas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKafkaArgs']]]]):
        pulumi.set(self, "logging_kafkas", value)

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKineseArgs']]]]:
        return pulumi.get(self, "logging_kineses")

    @logging_kineses.setter
    def logging_kineses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKineseArgs']]]]):
        pulumi.set(self, "logging_kineses", value)

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogglyArgs']]]]:
        return pulumi.get(self, "logging_logglies")

    @logging_logglies.setter
    def logging_logglies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogglyArgs']]]]):
        pulumi.set(self, "logging_logglies", value)

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogshuttleArgs']]]]:
        return pulumi.get(self, "logging_logshuttles")

    @logging_logshuttles.setter
    def logging_logshuttles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogshuttleArgs']]]]):
        pulumi.set(self, "logging_logshuttles", value)

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingNewrelicArgs']]]]:
        return pulumi.get(self, "logging_newrelics")

    @logging_newrelics.setter
    def logging_newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingNewrelicArgs']]]]):
        pulumi.set(self, "logging_newrelics", value)

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingOpenstackArgs']]]]:
        return pulumi.get(self, "logging_openstacks")

    @logging_openstacks.setter
    def logging_openstacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingOpenstackArgs']]]]):
        pulumi.set(self, "logging_openstacks", value)

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingScalyrArgs']]]]:
        return pulumi.get(self, "logging_scalyrs")

    @logging_scalyrs.setter
    def logging_scalyrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingScalyrArgs']]]]):
        pulumi.set(self, "logging_scalyrs", value)

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingSftpArgs']]]]:
        return pulumi.get(self, "logging_sftps")

    @logging_sftps.setter
    def logging_sftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingSftpArgs']]]]):
        pulumi.set(self, "logging_sftps", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name for the Service to create
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def papertrails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputePapertrailArgs']]]]:
        return pulumi.get(self, "papertrails")

    @papertrails.setter
    def papertrails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputePapertrailArgs']]]]):
        pulumi.set(self, "papertrails", value)

    @property
    @pulumi.getter
    def s3loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeS3loggingArgs']]]]:
        return pulumi.get(self, "s3loggings")

    @s3loggings.setter
    def s3loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeS3loggingArgs']]]]):
        pulumi.set(self, "s3loggings", value)

    @property
    @pulumi.getter
    def splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSplunkArgs']]]]:
        return pulumi.get(self, "splunks")

    @splunks.setter
    def splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSplunkArgs']]]]):
        pulumi.set(self, "splunks", value)

    @property
    @pulumi.getter
    def sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSumologicArgs']]]]:
        return pulumi.get(self, "sumologics")

    @sumologics.setter
    def sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSumologicArgs']]]]):
        pulumi.set(self, "sumologics", value)

    @property
    @pulumi.getter
    def syslogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSyslogArgs']]]]:
        return pulumi.get(self, "syslogs")

    @syslogs.setter
    def syslogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSyslogArgs']]]]):
        pulumi.set(self, "syslogs", value)

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

    @version_comment.setter
    def version_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_comment", value)


@pulumi.input_type
class _ServiceComputeState:
    def __init__(__self__, *,
                 activate: Optional[pulumi.Input[bool]] = None,
                 active_version: Optional[pulumi.Input[int]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBackendArgs']]]] = None,
                 bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBigqueryloggingArgs']]]] = None,
                 blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBlobstorageloggingArgs']]]] = None,
                 cloned_version: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDictionaryArgs']]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDirectorArgs']]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDomainArgs']]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeGcsloggingArgs']]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHealthcheckArgs']]]] = None,
                 httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHttpsloggingArgs']]]] = None,
                 logentries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLogentryArgs']]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingCloudfileArgs']]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDatadogArgs']]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDigitaloceanArgs']]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingElasticsearchArgs']]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingFtpArgs']]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingGooglepubsubArgs']]]] = None,
                 logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHerokuArgs']]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHoneycombArgs']]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKafkaArgs']]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKineseArgs']]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogglyArgs']]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogshuttleArgs']]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingNewrelicArgs']]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingOpenstackArgs']]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingScalyrArgs']]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingSftpArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package: Optional[pulumi.Input['ServiceComputePackageArgs']] = None,
                 papertrails: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputePapertrailArgs']]]] = None,
                 s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeS3loggingArgs']]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSplunkArgs']]]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSumologicArgs']]]] = None,
                 syslogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSyslogArgs']]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServiceCompute resources.
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[int] active_version: The currently active version of your Fastly Service
        :param pulumi.Input[int] cloned_version: The latest cloned version by the provider
        :param pulumi.Input[str] comment: Description field for the service. Default `Managed by Terraform`
        :param pulumi.Input[Sequence[pulumi.Input['ServiceComputeDomainArgs']]] domains: A set of Domain names to serve as entry points for your Service
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        :param pulumi.Input[str] name: The unique name for the Service to create
        :param pulumi.Input['ServiceComputePackageArgs'] package: The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if active_version is not None:
            pulumi.set(__self__, "active_version", active_version)
        if backends is not None:
            pulumi.set(__self__, "backends", backends)
        if bigqueryloggings is not None:
            pulumi.set(__self__, "bigqueryloggings", bigqueryloggings)
        if blobstorageloggings is not None:
            pulumi.set(__self__, "blobstorageloggings", blobstorageloggings)
        if cloned_version is not None:
            pulumi.set(__self__, "cloned_version", cloned_version)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if dictionaries is not None:
            pulumi.set(__self__, "dictionaries", dictionaries)
        if directors is not None:
            pulumi.set(__self__, "directors", directors)
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if gcsloggings is not None:
            pulumi.set(__self__, "gcsloggings", gcsloggings)
        if healthchecks is not None:
            pulumi.set(__self__, "healthchecks", healthchecks)
        if httpsloggings is not None:
            pulumi.set(__self__, "httpsloggings", httpsloggings)
        if logentries is not None:
            pulumi.set(__self__, "logentries", logentries)
        if logging_cloudfiles is not None:
            pulumi.set(__self__, "logging_cloudfiles", logging_cloudfiles)
        if logging_datadogs is not None:
            pulumi.set(__self__, "logging_datadogs", logging_datadogs)
        if logging_digitaloceans is not None:
            pulumi.set(__self__, "logging_digitaloceans", logging_digitaloceans)
        if logging_elasticsearches is not None:
            pulumi.set(__self__, "logging_elasticsearches", logging_elasticsearches)
        if logging_ftps is not None:
            pulumi.set(__self__, "logging_ftps", logging_ftps)
        if logging_googlepubsubs is not None:
            pulumi.set(__self__, "logging_googlepubsubs", logging_googlepubsubs)
        if logging_heroku is not None:
            pulumi.set(__self__, "logging_heroku", logging_heroku)
        if logging_honeycombs is not None:
            pulumi.set(__self__, "logging_honeycombs", logging_honeycombs)
        if logging_kafkas is not None:
            pulumi.set(__self__, "logging_kafkas", logging_kafkas)
        if logging_kineses is not None:
            pulumi.set(__self__, "logging_kineses", logging_kineses)
        if logging_logglies is not None:
            pulumi.set(__self__, "logging_logglies", logging_logglies)
        if logging_logshuttles is not None:
            pulumi.set(__self__, "logging_logshuttles", logging_logshuttles)
        if logging_newrelics is not None:
            pulumi.set(__self__, "logging_newrelics", logging_newrelics)
        if logging_openstacks is not None:
            pulumi.set(__self__, "logging_openstacks", logging_openstacks)
        if logging_scalyrs is not None:
            pulumi.set(__self__, "logging_scalyrs", logging_scalyrs)
        if logging_sftps is not None:
            pulumi.set(__self__, "logging_sftps", logging_sftps)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if package is not None:
            pulumi.set(__self__, "package", package)
        if papertrails is not None:
            pulumi.set(__self__, "papertrails", papertrails)
        if s3loggings is not None:
            pulumi.set(__self__, "s3loggings", s3loggings)
        if splunks is not None:
            pulumi.set(__self__, "splunks", splunks)
        if sumologics is not None:
            pulumi.set(__self__, "sumologics", sumologics)
        if syslogs is not None:
            pulumi.set(__self__, "syslogs", syslogs)
        if version_comment is not None:
            pulumi.set(__self__, "version_comment", version_comment)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter(name="activeVersion")
    def active_version(self) -> Optional[pulumi.Input[int]]:
        """
        The currently active version of your Fastly Service
        """
        return pulumi.get(self, "active_version")

    @active_version.setter
    def active_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_version", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBackendArgs']]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter
    def bigqueryloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBigqueryloggingArgs']]]]:
        return pulumi.get(self, "bigqueryloggings")

    @bigqueryloggings.setter
    def bigqueryloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBigqueryloggingArgs']]]]):
        pulumi.set(self, "bigqueryloggings", value)

    @property
    @pulumi.getter
    def blobstorageloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBlobstorageloggingArgs']]]]:
        return pulumi.get(self, "blobstorageloggings")

    @blobstorageloggings.setter
    def blobstorageloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeBlobstorageloggingArgs']]]]):
        pulumi.set(self, "blobstorageloggings", value)

    @property
    @pulumi.getter(name="clonedVersion")
    def cloned_version(self) -> Optional[pulumi.Input[int]]:
        """
        The latest cloned version by the provider
        """
        return pulumi.get(self, "cloned_version")

    @cloned_version.setter
    def cloned_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloned_version", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the service. Default `Managed by Terraform`
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDictionaryArgs']]]]:
        return pulumi.get(self, "dictionaries")

    @dictionaries.setter
    def dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDictionaryArgs']]]]):
        pulumi.set(self, "dictionaries", value)

    @property
    @pulumi.getter
    def directors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDirectorArgs']]]]:
        return pulumi.get(self, "directors")

    @directors.setter
    def directors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDirectorArgs']]]]):
        pulumi.set(self, "directors", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDomainArgs']]]]:
        """
        A set of Domain names to serve as entry points for your Service
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeDomainArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def gcsloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeGcsloggingArgs']]]]:
        return pulumi.get(self, "gcsloggings")

    @gcsloggings.setter
    def gcsloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeGcsloggingArgs']]]]):
        pulumi.set(self, "gcsloggings", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHealthcheckArgs']]]]:
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHealthcheckArgs']]]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter
    def httpsloggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHttpsloggingArgs']]]]:
        return pulumi.get(self, "httpsloggings")

    @httpsloggings.setter
    def httpsloggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeHttpsloggingArgs']]]]):
        pulumi.set(self, "httpsloggings", value)

    @property
    @pulumi.getter
    def logentries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLogentryArgs']]]]:
        return pulumi.get(self, "logentries")

    @logentries.setter
    def logentries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLogentryArgs']]]]):
        pulumi.set(self, "logentries", value)

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingCloudfileArgs']]]]:
        return pulumi.get(self, "logging_cloudfiles")

    @logging_cloudfiles.setter
    def logging_cloudfiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingCloudfileArgs']]]]):
        pulumi.set(self, "logging_cloudfiles", value)

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDatadogArgs']]]]:
        return pulumi.get(self, "logging_datadogs")

    @logging_datadogs.setter
    def logging_datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDatadogArgs']]]]):
        pulumi.set(self, "logging_datadogs", value)

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDigitaloceanArgs']]]]:
        return pulumi.get(self, "logging_digitaloceans")

    @logging_digitaloceans.setter
    def logging_digitaloceans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingDigitaloceanArgs']]]]):
        pulumi.set(self, "logging_digitaloceans", value)

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingElasticsearchArgs']]]]:
        return pulumi.get(self, "logging_elasticsearches")

    @logging_elasticsearches.setter
    def logging_elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingElasticsearchArgs']]]]):
        pulumi.set(self, "logging_elasticsearches", value)

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingFtpArgs']]]]:
        return pulumi.get(self, "logging_ftps")

    @logging_ftps.setter
    def logging_ftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingFtpArgs']]]]):
        pulumi.set(self, "logging_ftps", value)

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingGooglepubsubArgs']]]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @logging_googlepubsubs.setter
    def logging_googlepubsubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingGooglepubsubArgs']]]]):
        pulumi.set(self, "logging_googlepubsubs", value)

    @property
    @pulumi.getter(name="loggingHeroku")
    def logging_heroku(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHerokuArgs']]]]:
        return pulumi.get(self, "logging_heroku")

    @logging_heroku.setter
    def logging_heroku(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHerokuArgs']]]]):
        pulumi.set(self, "logging_heroku", value)

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHoneycombArgs']]]]:
        return pulumi.get(self, "logging_honeycombs")

    @logging_honeycombs.setter
    def logging_honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingHoneycombArgs']]]]):
        pulumi.set(self, "logging_honeycombs", value)

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKafkaArgs']]]]:
        return pulumi.get(self, "logging_kafkas")

    @logging_kafkas.setter
    def logging_kafkas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKafkaArgs']]]]):
        pulumi.set(self, "logging_kafkas", value)

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKineseArgs']]]]:
        return pulumi.get(self, "logging_kineses")

    @logging_kineses.setter
    def logging_kineses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingKineseArgs']]]]):
        pulumi.set(self, "logging_kineses", value)

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogglyArgs']]]]:
        return pulumi.get(self, "logging_logglies")

    @logging_logglies.setter
    def logging_logglies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogglyArgs']]]]):
        pulumi.set(self, "logging_logglies", value)

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogshuttleArgs']]]]:
        return pulumi.get(self, "logging_logshuttles")

    @logging_logshuttles.setter
    def logging_logshuttles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingLogshuttleArgs']]]]):
        pulumi.set(self, "logging_logshuttles", value)

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingNewrelicArgs']]]]:
        return pulumi.get(self, "logging_newrelics")

    @logging_newrelics.setter
    def logging_newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingNewrelicArgs']]]]):
        pulumi.set(self, "logging_newrelics", value)

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingOpenstackArgs']]]]:
        return pulumi.get(self, "logging_openstacks")

    @logging_openstacks.setter
    def logging_openstacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingOpenstackArgs']]]]):
        pulumi.set(self, "logging_openstacks", value)

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingScalyrArgs']]]]:
        return pulumi.get(self, "logging_scalyrs")

    @logging_scalyrs.setter
    def logging_scalyrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingScalyrArgs']]]]):
        pulumi.set(self, "logging_scalyrs", value)

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingSftpArgs']]]]:
        return pulumi.get(self, "logging_sftps")

    @logging_sftps.setter
    def logging_sftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeLoggingSftpArgs']]]]):
        pulumi.set(self, "logging_sftps", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The unique name for the Service to create
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def package(self) -> Optional[pulumi.Input['ServiceComputePackageArgs']]:
        """
        The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        """
        return pulumi.get(self, "package")

    @package.setter
    def package(self, value: Optional[pulumi.Input['ServiceComputePackageArgs']]):
        pulumi.set(self, "package", value)

    @property
    @pulumi.getter
    def papertrails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputePapertrailArgs']]]]:
        return pulumi.get(self, "papertrails")

    @papertrails.setter
    def papertrails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputePapertrailArgs']]]]):
        pulumi.set(self, "papertrails", value)

    @property
    @pulumi.getter
    def s3loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeS3loggingArgs']]]]:
        return pulumi.get(self, "s3loggings")

    @s3loggings.setter
    def s3loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeS3loggingArgs']]]]):
        pulumi.set(self, "s3loggings", value)

    @property
    @pulumi.getter
    def splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSplunkArgs']]]]:
        return pulumi.get(self, "splunks")

    @splunks.setter
    def splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSplunkArgs']]]]):
        pulumi.set(self, "splunks", value)

    @property
    @pulumi.getter
    def sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSumologicArgs']]]]:
        return pulumi.get(self, "sumologics")

    @sumologics.setter
    def sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSumologicArgs']]]]):
        pulumi.set(self, "sumologics", value)

    @property
    @pulumi.getter
    def syslogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSyslogArgs']]]]:
        return pulumi.get(self, "syslogs")

    @syslogs.setter
    def syslogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceComputeSyslogArgs']]]]):
        pulumi.set(self, "syslogs", value)

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

    @version_comment.setter
    def version_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_comment", value)


class ServiceCompute(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBackendArgs']]]]] = None,
                 bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBigqueryloggingArgs']]]]] = None,
                 blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBlobstorageloggingArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDictionaryArgs']]]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDirectorArgs']]]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDomainArgs']]]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeGcsloggingArgs']]]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeHealthcheckArgs']]]]] = None,
                 httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeHttpsloggingArgs']]]]] = None,
                 logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLogentryArgs']]]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingCloudfileArgs']]]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingDatadogArgs']]]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingDigitaloceanArgs']]]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingElasticsearchArgs']]]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingFtpArgs']]]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingGooglepubsubArgs']]]]] = None,
                 logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingHerokuArgs']]]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingHoneycombArgs']]]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingKafkaArgs']]]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingKineseArgs']]]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingLogglyArgs']]]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingLogshuttleArgs']]]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingNewrelicArgs']]]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingOpenstackArgs']]]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingScalyrArgs']]]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingSftpArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package: Optional[pulumi.Input[pulumi.InputType['ServiceComputePackageArgs']]] = None,
                 papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputePapertrailArgs']]]]] = None,
                 s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeS3loggingArgs']]]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSplunkArgs']]]]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSumologicArgs']]]]] = None,
                 syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSyslogArgs']]]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Provides a Fastly Compute@Edge service. Compute@Edge is a computation platform capable of running custom binaries that you compile on your own systems and upload to Fastly. Security and portability is provided by compiling your code to [WebAssembly](https://webassembly.org/), which is run at the edge using [Lucet](https://github.com/bytecodealliance/lucet), an open-source WebAssembly runtime created by Fastly. A compute service encompasses Domains and Backends.

        The Service resource requires a domain name that is correctly set up to direct
        traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
        on their documentation site for guidance.

        ## Example Usage
        ### package block

        The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on
        [Compute@Edge](https://www.fastly.com/products/edge-compute/serverless)

        [fastly-s3]: https://docs.fastly.com/en/guides/amazon-s3
        [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
        [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
        [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
        [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/

        ## Import

        Fastly Services can be imported using their service ID, e.g.

        ```sh
         $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx
        ```

         By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.

        ```sh
         $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx@2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[str] comment: Description field for the service. Default `Managed by Terraform`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDomainArgs']]]] domains: A set of Domain names to serve as entry points for your Service
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        :param pulumi.Input[str] name: The unique name for the Service to create
        :param pulumi.Input[pulumi.InputType['ServiceComputePackageArgs']] package: The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceComputeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Fastly Compute@Edge service. Compute@Edge is a computation platform capable of running custom binaries that you compile on your own systems and upload to Fastly. Security and portability is provided by compiling your code to [WebAssembly](https://webassembly.org/), which is run at the edge using [Lucet](https://github.com/bytecodealliance/lucet), an open-source WebAssembly runtime created by Fastly. A compute service encompasses Domains and Backends.

        The Service resource requires a domain name that is correctly set up to direct
        traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
        on their documentation site for guidance.

        ## Example Usage
        ### package block

        The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on
        [Compute@Edge](https://www.fastly.com/products/edge-compute/serverless)

        [fastly-s3]: https://docs.fastly.com/en/guides/amazon-s3
        [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
        [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
        [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
        [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/

        ## Import

        Fastly Services can be imported using their service ID, e.g.

        ```sh
         $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx
        ```

         By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.

        ```sh
         $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx@2
        ```

        :param str resource_name: The name of the resource.
        :param ServiceComputeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceComputeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBackendArgs']]]]] = None,
                 bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBigqueryloggingArgs']]]]] = None,
                 blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBlobstorageloggingArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDictionaryArgs']]]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDirectorArgs']]]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDomainArgs']]]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeGcsloggingArgs']]]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeHealthcheckArgs']]]]] = None,
                 httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeHttpsloggingArgs']]]]] = None,
                 logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLogentryArgs']]]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingCloudfileArgs']]]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingDatadogArgs']]]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingDigitaloceanArgs']]]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingElasticsearchArgs']]]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingFtpArgs']]]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingGooglepubsubArgs']]]]] = None,
                 logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingHerokuArgs']]]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingHoneycombArgs']]]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingKafkaArgs']]]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingKineseArgs']]]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingLogglyArgs']]]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingLogshuttleArgs']]]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingNewrelicArgs']]]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingOpenstackArgs']]]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingScalyrArgs']]]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingSftpArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 package: Optional[pulumi.Input[pulumi.InputType['ServiceComputePackageArgs']]] = None,
                 papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputePapertrailArgs']]]]] = None,
                 s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeS3loggingArgs']]]]] = None,
                 splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSplunkArgs']]]]] = None,
                 sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSumologicArgs']]]]] = None,
                 syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSyslogArgs']]]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceComputeArgs.__new__(ServiceComputeArgs)

            __props__.__dict__["activate"] = activate
            if backends is None and not opts.urn:
                raise TypeError("Missing required property 'backends'")
            __props__.__dict__["backends"] = backends
            __props__.__dict__["bigqueryloggings"] = bigqueryloggings
            __props__.__dict__["blobstorageloggings"] = blobstorageloggings
            __props__.__dict__["comment"] = comment
            __props__.__dict__["dictionaries"] = dictionaries
            __props__.__dict__["directors"] = directors
            if domains is None and not opts.urn:
                raise TypeError("Missing required property 'domains'")
            __props__.__dict__["domains"] = domains
            __props__.__dict__["force_destroy"] = force_destroy
            __props__.__dict__["gcsloggings"] = gcsloggings
            __props__.__dict__["healthchecks"] = healthchecks
            __props__.__dict__["httpsloggings"] = httpsloggings
            __props__.__dict__["logentries"] = logentries
            __props__.__dict__["logging_cloudfiles"] = logging_cloudfiles
            __props__.__dict__["logging_datadogs"] = logging_datadogs
            __props__.__dict__["logging_digitaloceans"] = logging_digitaloceans
            __props__.__dict__["logging_elasticsearches"] = logging_elasticsearches
            __props__.__dict__["logging_ftps"] = logging_ftps
            __props__.__dict__["logging_googlepubsubs"] = logging_googlepubsubs
            __props__.__dict__["logging_heroku"] = logging_heroku
            __props__.__dict__["logging_honeycombs"] = logging_honeycombs
            __props__.__dict__["logging_kafkas"] = logging_kafkas
            __props__.__dict__["logging_kineses"] = logging_kineses
            __props__.__dict__["logging_logglies"] = logging_logglies
            __props__.__dict__["logging_logshuttles"] = logging_logshuttles
            __props__.__dict__["logging_newrelics"] = logging_newrelics
            __props__.__dict__["logging_openstacks"] = logging_openstacks
            __props__.__dict__["logging_scalyrs"] = logging_scalyrs
            __props__.__dict__["logging_sftps"] = logging_sftps
            __props__.__dict__["name"] = name
            if package is None and not opts.urn:
                raise TypeError("Missing required property 'package'")
            __props__.__dict__["package"] = package
            __props__.__dict__["papertrails"] = papertrails
            __props__.__dict__["s3loggings"] = s3loggings
            __props__.__dict__["splunks"] = splunks
            __props__.__dict__["sumologics"] = sumologics
            __props__.__dict__["syslogs"] = syslogs
            __props__.__dict__["version_comment"] = version_comment
            __props__.__dict__["active_version"] = None
            __props__.__dict__["cloned_version"] = None
        super(ServiceCompute, __self__).__init__(
            'fastly:index/serviceCompute:ServiceCompute',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activate: Optional[pulumi.Input[bool]] = None,
            active_version: Optional[pulumi.Input[int]] = None,
            backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBackendArgs']]]]] = None,
            bigqueryloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBigqueryloggingArgs']]]]] = None,
            blobstorageloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeBlobstorageloggingArgs']]]]] = None,
            cloned_version: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDictionaryArgs']]]]] = None,
            directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDirectorArgs']]]]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDomainArgs']]]]] = None,
            force_destroy: Optional[pulumi.Input[bool]] = None,
            gcsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeGcsloggingArgs']]]]] = None,
            healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeHealthcheckArgs']]]]] = None,
            httpsloggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeHttpsloggingArgs']]]]] = None,
            logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLogentryArgs']]]]] = None,
            logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingCloudfileArgs']]]]] = None,
            logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingDatadogArgs']]]]] = None,
            logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingDigitaloceanArgs']]]]] = None,
            logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingElasticsearchArgs']]]]] = None,
            logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingFtpArgs']]]]] = None,
            logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingGooglepubsubArgs']]]]] = None,
            logging_heroku: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingHerokuArgs']]]]] = None,
            logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingHoneycombArgs']]]]] = None,
            logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingKafkaArgs']]]]] = None,
            logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingKineseArgs']]]]] = None,
            logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingLogglyArgs']]]]] = None,
            logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingLogshuttleArgs']]]]] = None,
            logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingNewrelicArgs']]]]] = None,
            logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingOpenstackArgs']]]]] = None,
            logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingScalyrArgs']]]]] = None,
            logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeLoggingSftpArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            package: Optional[pulumi.Input[pulumi.InputType['ServiceComputePackageArgs']]] = None,
            papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputePapertrailArgs']]]]] = None,
            s3loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeS3loggingArgs']]]]] = None,
            splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSplunkArgs']]]]] = None,
            sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSumologicArgs']]]]] = None,
            syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeSyslogArgs']]]]] = None,
            version_comment: Optional[pulumi.Input[str]] = None) -> 'ServiceCompute':
        """
        Get an existing ServiceCompute resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[int] active_version: The currently active version of your Fastly Service
        :param pulumi.Input[int] cloned_version: The latest cloned version by the provider
        :param pulumi.Input[str] comment: Description field for the service. Default `Managed by Terraform`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceComputeDomainArgs']]]] domains: A set of Domain names to serve as entry points for your Service
        :param pulumi.Input[bool] force_destroy: Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        :param pulumi.Input[str] name: The unique name for the Service to create
        :param pulumi.Input[pulumi.InputType['ServiceComputePackageArgs']] package: The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceComputeState.__new__(_ServiceComputeState)

        __props__.__dict__["activate"] = activate
        __props__.__dict__["active_version"] = active_version
        __props__.__dict__["backends"] = backends
        __props__.__dict__["bigqueryloggings"] = bigqueryloggings
        __props__.__dict__["blobstorageloggings"] = blobstorageloggings
        __props__.__dict__["cloned_version"] = cloned_version
        __props__.__dict__["comment"] = comment
        __props__.__dict__["dictionaries"] = dictionaries
        __props__.__dict__["directors"] = directors
        __props__.__dict__["domains"] = domains
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["gcsloggings"] = gcsloggings
        __props__.__dict__["healthchecks"] = healthchecks
        __props__.__dict__["httpsloggings"] = httpsloggings
        __props__.__dict__["logentries"] = logentries
        __props__.__dict__["logging_cloudfiles"] = logging_cloudfiles
        __props__.__dict__["logging_datadogs"] = logging_datadogs
        __props__.__dict__["logging_digitaloceans"] = logging_digitaloceans
        __props__.__dict__["logging_elasticsearches"] = logging_elasticsearches
        __props__.__dict__["logging_ftps"] = logging_ftps
        __props__.__dict__["logging_googlepubsubs"] = logging_googlepubsubs
        __props__.__dict__["logging_heroku"] = logging_heroku
        __props__.__dict__["logging_honeycombs"] = logging_honeycombs
        __props__.__dict__["logging_kafkas"] = logging_kafkas
        __props__.__dict__["logging_kineses"] = logging_kineses
        __props__.__dict__["logging_logglies"] = logging_logglies
        __props__.__dict__["logging_logshuttles"] = logging_logshuttles
        __props__.__dict__["logging_newrelics"] = logging_newrelics
        __props__.__dict__["logging_openstacks"] = logging_openstacks
        __props__.__dict__["logging_scalyrs"] = logging_scalyrs
        __props__.__dict__["logging_sftps"] = logging_sftps
        __props__.__dict__["name"] = name
        __props__.__dict__["package"] = package
        __props__.__dict__["papertrails"] = papertrails
        __props__.__dict__["s3loggings"] = s3loggings
        __props__.__dict__["splunks"] = splunks
        __props__.__dict__["sumologics"] = sumologics
        __props__.__dict__["syslogs"] = syslogs
        __props__.__dict__["version_comment"] = version_comment
        return ServiceCompute(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activate(self) -> pulumi.Output[Optional[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter(name="activeVersion")
    def active_version(self) -> pulumi.Output[int]:
        """
        The currently active version of your Fastly Service
        """
        return pulumi.get(self, "active_version")

    @property
    @pulumi.getter
    def backends(self) -> pulumi.Output[Sequence['outputs.ServiceComputeBackend']]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter
    def bigqueryloggings(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeBigquerylogging']]]:
        return pulumi.get(self, "bigqueryloggings")

    @property
    @pulumi.getter
    def blobstorageloggings(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeBlobstoragelogging']]]:
        return pulumi.get(self, "blobstorageloggings")

    @property
    @pulumi.getter(name="clonedVersion")
    def cloned_version(self) -> pulumi.Output[int]:
        """
        The latest cloned version by the provider
        """
        return pulumi.get(self, "cloned_version")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        Description field for the service. Default `Managed by Terraform`
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def dictionaries(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeDictionary']]]:
        return pulumi.get(self, "dictionaries")

    @property
    @pulumi.getter
    def directors(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeDirector']]]:
        return pulumi.get(self, "directors")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence['outputs.ServiceComputeDomain']]:
        """
        A set of Domain names to serve as entry points for your Service
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[bool]]:
        """
        Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        """
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter
    def gcsloggings(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeGcslogging']]]:
        return pulumi.get(self, "gcsloggings")

    @property
    @pulumi.getter
    def healthchecks(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeHealthcheck']]]:
        return pulumi.get(self, "healthchecks")

    @property
    @pulumi.getter
    def httpsloggings(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeHttpslogging']]]:
        return pulumi.get(self, "httpsloggings")

    @property
    @pulumi.getter
    def logentries(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLogentry']]]:
        return pulumi.get(self, "logentries")

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingCloudfile']]]:
        return pulumi.get(self, "logging_cloudfiles")

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingDatadog']]]:
        return pulumi.get(self, "logging_datadogs")

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingDigitalocean']]]:
        return pulumi.get(self, "logging_digitaloceans")

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingElasticsearch']]]:
        return pulumi.get(self, "logging_elasticsearches")

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingFtp']]]:
        return pulumi.get(self, "logging_ftps")

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingGooglepubsub']]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @property
    @pulumi.getter(name="loggingHeroku")
    def logging_heroku(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingHeroku']]]:
        return pulumi.get(self, "logging_heroku")

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingHoneycomb']]]:
        return pulumi.get(self, "logging_honeycombs")

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingKafka']]]:
        return pulumi.get(self, "logging_kafkas")

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingKinese']]]:
        return pulumi.get(self, "logging_kineses")

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingLoggly']]]:
        return pulumi.get(self, "logging_logglies")

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingLogshuttle']]]:
        return pulumi.get(self, "logging_logshuttles")

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingNewrelic']]]:
        return pulumi.get(self, "logging_newrelics")

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingOpenstack']]]:
        return pulumi.get(self, "logging_openstacks")

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingScalyr']]]:
        return pulumi.get(self, "logging_scalyrs")

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeLoggingSftp']]]:
        return pulumi.get(self, "logging_sftps")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The unique name for the Service to create
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def package(self) -> pulumi.Output['outputs.ServiceComputePackage']:
        """
        The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        """
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def papertrails(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputePapertrail']]]:
        return pulumi.get(self, "papertrails")

    @property
    @pulumi.getter
    def s3loggings(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeS3logging']]]:
        return pulumi.get(self, "s3loggings")

    @property
    @pulumi.getter
    def splunks(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeSplunk']]]:
        return pulumi.get(self, "splunks")

    @property
    @pulumi.getter
    def sumologics(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeSumologic']]]:
        return pulumi.get(self, "sumologics")

    @property
    @pulumi.getter
    def syslogs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceComputeSyslog']]]:
        return pulumi.get(self, "syslogs")

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> pulumi.Output[Optional[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

