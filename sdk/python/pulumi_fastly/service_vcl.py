# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceVclArgs', 'ServiceVcl']

@pulumi.input_type
class ServiceVclArgs:
    def __init__(__self__, *,
                 domains: pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]],
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclBackendArgs']]]] = None,
                 cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclCacheSettingArgs']]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclConditionArgs']]]] = None,
                 default_host: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDictionaryArgs']]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDirectorArgs']]]] = None,
                 dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDynamicsnippetArgs']]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gzips: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclGzipArgs']]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHeaderArgs']]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]]] = None,
                 http3: Optional[pulumi.Input[bool]] = None,
                 logging_bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBigqueryArgs']]]] = None,
                 logging_blobstorages: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBlobstorageArgs']]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingCloudfileArgs']]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDatadogArgs']]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDigitaloceanArgs']]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingElasticsearchArgs']]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingFtpArgs']]]] = None,
                 logging_gcs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGcArgs']]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGooglepubsubArgs']]]] = None,
                 logging_herokus: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHerokusArgs']]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHoneycombArgs']]]] = None,
                 logging_https: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHttpArgs']]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKafkaArgs']]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKineseArgs']]]] = None,
                 logging_logentries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogentryArgs']]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogglyArgs']]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogshuttleArgs']]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingNewrelicArgs']]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingOpenstackArgs']]]] = None,
                 logging_papertrails: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingPapertrailArgs']]]] = None,
                 logging_s3s: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingS3Args']]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingScalyrArgs']]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSftpArgs']]]] = None,
                 logging_splunks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSplunkArgs']]]] = None,
                 logging_sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSumologicArgs']]]] = None,
                 logging_syslogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSyslogArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_enablement: Optional[pulumi.Input['ServiceVclProductEnablementArgs']] = None,
                 rate_limiters: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRateLimiterArgs']]]] = None,
                 request_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRequestSettingArgs']]]] = None,
                 response_objects: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]]] = None,
                 reuse: Optional[pulumi.Input[bool]] = None,
                 snippets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclSnippetArgs']]]] = None,
                 stale_if_error: Optional[pulumi.Input[bool]] = None,
                 stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
                 vcls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclVclArgs']]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input['ServiceVclWafArgs']] = None):
        """
        The set of arguments for constructing a ServiceVcl resource.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]] domains: The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
        :param pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]] acls: The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[str] comment: An optional comment about the Director
        :param pulumi.Input[str] default_host: Sets the host header
        :param pulumi.Input[int] default_ttl: The default Time-to-live (TTL) for requests
        :param pulumi.Input[bool] force_destroy: Allow the ACL to be deleted, even if it contains entries. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]] healthchecks: Name of a defined `healthcheck` to assign to this backend
        :param pulumi.Input[bool] http3: Enables support for the HTTP/3 (QUIC) protocol
        :param pulumi.Input[str] name: A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
        :param pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]] response_objects: The name of the response object used by the Web Application Firewall
        :param pulumi.Input[bool] reuse: Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
               deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
               an active service will cause an error. Default `false`
        :param pulumi.Input[bool] stale_if_error: Enables serving a stale object if there is an error
        :param pulumi.Input[int] stale_if_error_ttl: The default time-to-live (TTL) for serving the stale object for the version
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        ServiceVclArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domains=domains,
            acls=acls,
            activate=activate,
            backends=backends,
            cache_settings=cache_settings,
            comment=comment,
            conditions=conditions,
            default_host=default_host,
            default_ttl=default_ttl,
            dictionaries=dictionaries,
            directors=directors,
            dynamicsnippets=dynamicsnippets,
            force_destroy=force_destroy,
            gzips=gzips,
            headers=headers,
            healthchecks=healthchecks,
            http3=http3,
            logging_bigqueries=logging_bigqueries,
            logging_blobstorages=logging_blobstorages,
            logging_cloudfiles=logging_cloudfiles,
            logging_datadogs=logging_datadogs,
            logging_digitaloceans=logging_digitaloceans,
            logging_elasticsearches=logging_elasticsearches,
            logging_ftps=logging_ftps,
            logging_gcs=logging_gcs,
            logging_googlepubsubs=logging_googlepubsubs,
            logging_herokus=logging_herokus,
            logging_honeycombs=logging_honeycombs,
            logging_https=logging_https,
            logging_kafkas=logging_kafkas,
            logging_kineses=logging_kineses,
            logging_logentries=logging_logentries,
            logging_logglies=logging_logglies,
            logging_logshuttles=logging_logshuttles,
            logging_newrelics=logging_newrelics,
            logging_openstacks=logging_openstacks,
            logging_papertrails=logging_papertrails,
            logging_s3s=logging_s3s,
            logging_scalyrs=logging_scalyrs,
            logging_sftps=logging_sftps,
            logging_splunks=logging_splunks,
            logging_sumologics=logging_sumologics,
            logging_syslogs=logging_syslogs,
            name=name,
            product_enablement=product_enablement,
            rate_limiters=rate_limiters,
            request_settings=request_settings,
            response_objects=response_objects,
            reuse=reuse,
            snippets=snippets,
            stale_if_error=stale_if_error,
            stale_if_error_ttl=stale_if_error_ttl,
            vcls=vcls,
            version_comment=version_comment,
            waf=waf,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domains: pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]],
             acls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]]] = None,
             activate: Optional[pulumi.Input[bool]] = None,
             backends: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclBackendArgs']]]] = None,
             cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclCacheSettingArgs']]]] = None,
             comment: Optional[pulumi.Input[str]] = None,
             conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclConditionArgs']]]] = None,
             default_host: Optional[pulumi.Input[str]] = None,
             default_ttl: Optional[pulumi.Input[int]] = None,
             dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDictionaryArgs']]]] = None,
             directors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDirectorArgs']]]] = None,
             dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDynamicsnippetArgs']]]] = None,
             force_destroy: Optional[pulumi.Input[bool]] = None,
             gzips: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclGzipArgs']]]] = None,
             headers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHeaderArgs']]]] = None,
             healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]]] = None,
             http3: Optional[pulumi.Input[bool]] = None,
             logging_bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBigqueryArgs']]]] = None,
             logging_blobstorages: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBlobstorageArgs']]]] = None,
             logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingCloudfileArgs']]]] = None,
             logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDatadogArgs']]]] = None,
             logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDigitaloceanArgs']]]] = None,
             logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingElasticsearchArgs']]]] = None,
             logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingFtpArgs']]]] = None,
             logging_gcs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGcArgs']]]] = None,
             logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGooglepubsubArgs']]]] = None,
             logging_herokus: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHerokusArgs']]]] = None,
             logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHoneycombArgs']]]] = None,
             logging_https: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHttpArgs']]]] = None,
             logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKafkaArgs']]]] = None,
             logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKineseArgs']]]] = None,
             logging_logentries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogentryArgs']]]] = None,
             logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogglyArgs']]]] = None,
             logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogshuttleArgs']]]] = None,
             logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingNewrelicArgs']]]] = None,
             logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingOpenstackArgs']]]] = None,
             logging_papertrails: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingPapertrailArgs']]]] = None,
             logging_s3s: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingS3Args']]]] = None,
             logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingScalyrArgs']]]] = None,
             logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSftpArgs']]]] = None,
             logging_splunks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSplunkArgs']]]] = None,
             logging_sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSumologicArgs']]]] = None,
             logging_syslogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSyslogArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             product_enablement: Optional[pulumi.Input['ServiceVclProductEnablementArgs']] = None,
             rate_limiters: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRateLimiterArgs']]]] = None,
             request_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRequestSettingArgs']]]] = None,
             response_objects: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]]] = None,
             reuse: Optional[pulumi.Input[bool]] = None,
             snippets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclSnippetArgs']]]] = None,
             stale_if_error: Optional[pulumi.Input[bool]] = None,
             stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
             vcls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclVclArgs']]]] = None,
             version_comment: Optional[pulumi.Input[str]] = None,
             waf: Optional[pulumi.Input['ServiceVclWafArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("domains", domains)
        if acls is not None:
            _setter("acls", acls)
        if activate is not None:
            _setter("activate", activate)
        if backends is not None:
            _setter("backends", backends)
        if cache_settings is not None:
            _setter("cache_settings", cache_settings)
        if comment is not None:
            _setter("comment", comment)
        if conditions is not None:
            _setter("conditions", conditions)
        if default_host is not None:
            _setter("default_host", default_host)
        if default_ttl is not None:
            _setter("default_ttl", default_ttl)
        if dictionaries is not None:
            _setter("dictionaries", dictionaries)
        if directors is not None:
            _setter("directors", directors)
        if dynamicsnippets is not None:
            _setter("dynamicsnippets", dynamicsnippets)
        if force_destroy is not None:
            _setter("force_destroy", force_destroy)
        if gzips is not None:
            _setter("gzips", gzips)
        if headers is not None:
            _setter("headers", headers)
        if healthchecks is not None:
            _setter("healthchecks", healthchecks)
        if http3 is not None:
            _setter("http3", http3)
        if logging_bigqueries is not None:
            _setter("logging_bigqueries", logging_bigqueries)
        if logging_blobstorages is not None:
            _setter("logging_blobstorages", logging_blobstorages)
        if logging_cloudfiles is not None:
            _setter("logging_cloudfiles", logging_cloudfiles)
        if logging_datadogs is not None:
            _setter("logging_datadogs", logging_datadogs)
        if logging_digitaloceans is not None:
            _setter("logging_digitaloceans", logging_digitaloceans)
        if logging_elasticsearches is not None:
            _setter("logging_elasticsearches", logging_elasticsearches)
        if logging_ftps is not None:
            _setter("logging_ftps", logging_ftps)
        if logging_gcs is not None:
            _setter("logging_gcs", logging_gcs)
        if logging_googlepubsubs is not None:
            _setter("logging_googlepubsubs", logging_googlepubsubs)
        if logging_herokus is not None:
            _setter("logging_herokus", logging_herokus)
        if logging_honeycombs is not None:
            _setter("logging_honeycombs", logging_honeycombs)
        if logging_https is not None:
            _setter("logging_https", logging_https)
        if logging_kafkas is not None:
            _setter("logging_kafkas", logging_kafkas)
        if logging_kineses is not None:
            _setter("logging_kineses", logging_kineses)
        if logging_logentries is not None:
            _setter("logging_logentries", logging_logentries)
        if logging_logglies is not None:
            _setter("logging_logglies", logging_logglies)
        if logging_logshuttles is not None:
            _setter("logging_logshuttles", logging_logshuttles)
        if logging_newrelics is not None:
            _setter("logging_newrelics", logging_newrelics)
        if logging_openstacks is not None:
            _setter("logging_openstacks", logging_openstacks)
        if logging_papertrails is not None:
            _setter("logging_papertrails", logging_papertrails)
        if logging_s3s is not None:
            _setter("logging_s3s", logging_s3s)
        if logging_scalyrs is not None:
            _setter("logging_scalyrs", logging_scalyrs)
        if logging_sftps is not None:
            _setter("logging_sftps", logging_sftps)
        if logging_splunks is not None:
            _setter("logging_splunks", logging_splunks)
        if logging_sumologics is not None:
            _setter("logging_sumologics", logging_sumologics)
        if logging_syslogs is not None:
            _setter("logging_syslogs", logging_syslogs)
        if name is not None:
            _setter("name", name)
        if product_enablement is not None:
            _setter("product_enablement", product_enablement)
        if rate_limiters is not None:
            _setter("rate_limiters", rate_limiters)
        if request_settings is not None:
            _setter("request_settings", request_settings)
        if response_objects is not None:
            _setter("response_objects", response_objects)
        if reuse is not None:
            _setter("reuse", reuse)
        if snippets is not None:
            _setter("snippets", snippets)
        if stale_if_error is not None:
            _setter("stale_if_error", stale_if_error)
        if stale_if_error_ttl is not None:
            _setter("stale_if_error_ttl", stale_if_error_ttl)
        if vcls is not None:
            _setter("vcls", vcls)
        if version_comment is not None:
            _setter("version_comment", version_comment)
        if waf is not None:
            _setter("waf", waf)

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]]:
        """
        The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]]]:
        """
        The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
        """
        return pulumi.get(self, "acls")

    @acls.setter
    def acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]]]):
        pulumi.set(self, "acls", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclBackendArgs']]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclBackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclCacheSettingArgs']]]]:
        return pulumi.get(self, "cache_settings")

    @cache_settings.setter
    def cache_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclCacheSettingArgs']]]]):
        pulumi.set(self, "cache_settings", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        An optional comment about the Director
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="defaultHost")
    def default_host(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the host header
        """
        return pulumi.get(self, "default_host")

    @default_host.setter
    def default_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_host", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default Time-to-live (TTL) for requests
        """
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter
    def dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDictionaryArgs']]]]:
        return pulumi.get(self, "dictionaries")

    @dictionaries.setter
    def dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDictionaryArgs']]]]):
        pulumi.set(self, "dictionaries", value)

    @property
    @pulumi.getter
    def directors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDirectorArgs']]]]:
        return pulumi.get(self, "directors")

    @directors.setter
    def directors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDirectorArgs']]]]):
        pulumi.set(self, "directors", value)

    @property
    @pulumi.getter
    def dynamicsnippets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDynamicsnippetArgs']]]]:
        return pulumi.get(self, "dynamicsnippets")

    @dynamicsnippets.setter
    def dynamicsnippets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDynamicsnippetArgs']]]]):
        pulumi.set(self, "dynamicsnippets", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow the ACL to be deleted, even if it contains entries. Defaults to false.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def gzips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclGzipArgs']]]]:
        return pulumi.get(self, "gzips")

    @gzips.setter
    def gzips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclGzipArgs']]]]):
        pulumi.set(self, "gzips", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]]]:
        """
        Name of a defined `healthcheck` to assign to this backend
        """
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter
    def http3(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables support for the HTTP/3 (QUIC) protocol
        """
        return pulumi.get(self, "http3")

    @http3.setter
    def http3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http3", value)

    @property
    @pulumi.getter(name="loggingBigqueries")
    def logging_bigqueries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBigqueryArgs']]]]:
        return pulumi.get(self, "logging_bigqueries")

    @logging_bigqueries.setter
    def logging_bigqueries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBigqueryArgs']]]]):
        pulumi.set(self, "logging_bigqueries", value)

    @property
    @pulumi.getter(name="loggingBlobstorages")
    def logging_blobstorages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBlobstorageArgs']]]]:
        return pulumi.get(self, "logging_blobstorages")

    @logging_blobstorages.setter
    def logging_blobstorages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBlobstorageArgs']]]]):
        pulumi.set(self, "logging_blobstorages", value)

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingCloudfileArgs']]]]:
        return pulumi.get(self, "logging_cloudfiles")

    @logging_cloudfiles.setter
    def logging_cloudfiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingCloudfileArgs']]]]):
        pulumi.set(self, "logging_cloudfiles", value)

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDatadogArgs']]]]:
        return pulumi.get(self, "logging_datadogs")

    @logging_datadogs.setter
    def logging_datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDatadogArgs']]]]):
        pulumi.set(self, "logging_datadogs", value)

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDigitaloceanArgs']]]]:
        return pulumi.get(self, "logging_digitaloceans")

    @logging_digitaloceans.setter
    def logging_digitaloceans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDigitaloceanArgs']]]]):
        pulumi.set(self, "logging_digitaloceans", value)

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingElasticsearchArgs']]]]:
        return pulumi.get(self, "logging_elasticsearches")

    @logging_elasticsearches.setter
    def logging_elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingElasticsearchArgs']]]]):
        pulumi.set(self, "logging_elasticsearches", value)

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingFtpArgs']]]]:
        return pulumi.get(self, "logging_ftps")

    @logging_ftps.setter
    def logging_ftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingFtpArgs']]]]):
        pulumi.set(self, "logging_ftps", value)

    @property
    @pulumi.getter(name="loggingGcs")
    def logging_gcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGcArgs']]]]:
        return pulumi.get(self, "logging_gcs")

    @logging_gcs.setter
    def logging_gcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGcArgs']]]]):
        pulumi.set(self, "logging_gcs", value)

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGooglepubsubArgs']]]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @logging_googlepubsubs.setter
    def logging_googlepubsubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGooglepubsubArgs']]]]):
        pulumi.set(self, "logging_googlepubsubs", value)

    @property
    @pulumi.getter(name="loggingHerokus")
    def logging_herokus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHerokusArgs']]]]:
        return pulumi.get(self, "logging_herokus")

    @logging_herokus.setter
    def logging_herokus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHerokusArgs']]]]):
        pulumi.set(self, "logging_herokus", value)

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHoneycombArgs']]]]:
        return pulumi.get(self, "logging_honeycombs")

    @logging_honeycombs.setter
    def logging_honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHoneycombArgs']]]]):
        pulumi.set(self, "logging_honeycombs", value)

    @property
    @pulumi.getter(name="loggingHttps")
    def logging_https(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHttpArgs']]]]:
        return pulumi.get(self, "logging_https")

    @logging_https.setter
    def logging_https(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHttpArgs']]]]):
        pulumi.set(self, "logging_https", value)

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKafkaArgs']]]]:
        return pulumi.get(self, "logging_kafkas")

    @logging_kafkas.setter
    def logging_kafkas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKafkaArgs']]]]):
        pulumi.set(self, "logging_kafkas", value)

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKineseArgs']]]]:
        return pulumi.get(self, "logging_kineses")

    @logging_kineses.setter
    def logging_kineses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKineseArgs']]]]):
        pulumi.set(self, "logging_kineses", value)

    @property
    @pulumi.getter(name="loggingLogentries")
    def logging_logentries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogentryArgs']]]]:
        return pulumi.get(self, "logging_logentries")

    @logging_logentries.setter
    def logging_logentries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogentryArgs']]]]):
        pulumi.set(self, "logging_logentries", value)

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogglyArgs']]]]:
        return pulumi.get(self, "logging_logglies")

    @logging_logglies.setter
    def logging_logglies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogglyArgs']]]]):
        pulumi.set(self, "logging_logglies", value)

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogshuttleArgs']]]]:
        return pulumi.get(self, "logging_logshuttles")

    @logging_logshuttles.setter
    def logging_logshuttles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogshuttleArgs']]]]):
        pulumi.set(self, "logging_logshuttles", value)

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingNewrelicArgs']]]]:
        return pulumi.get(self, "logging_newrelics")

    @logging_newrelics.setter
    def logging_newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingNewrelicArgs']]]]):
        pulumi.set(self, "logging_newrelics", value)

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingOpenstackArgs']]]]:
        return pulumi.get(self, "logging_openstacks")

    @logging_openstacks.setter
    def logging_openstacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingOpenstackArgs']]]]):
        pulumi.set(self, "logging_openstacks", value)

    @property
    @pulumi.getter(name="loggingPapertrails")
    def logging_papertrails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingPapertrailArgs']]]]:
        return pulumi.get(self, "logging_papertrails")

    @logging_papertrails.setter
    def logging_papertrails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingPapertrailArgs']]]]):
        pulumi.set(self, "logging_papertrails", value)

    @property
    @pulumi.getter(name="loggingS3s")
    def logging_s3s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingS3Args']]]]:
        return pulumi.get(self, "logging_s3s")

    @logging_s3s.setter
    def logging_s3s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingS3Args']]]]):
        pulumi.set(self, "logging_s3s", value)

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingScalyrArgs']]]]:
        return pulumi.get(self, "logging_scalyrs")

    @logging_scalyrs.setter
    def logging_scalyrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingScalyrArgs']]]]):
        pulumi.set(self, "logging_scalyrs", value)

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSftpArgs']]]]:
        return pulumi.get(self, "logging_sftps")

    @logging_sftps.setter
    def logging_sftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSftpArgs']]]]):
        pulumi.set(self, "logging_sftps", value)

    @property
    @pulumi.getter(name="loggingSplunks")
    def logging_splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSplunkArgs']]]]:
        return pulumi.get(self, "logging_splunks")

    @logging_splunks.setter
    def logging_splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSplunkArgs']]]]):
        pulumi.set(self, "logging_splunks", value)

    @property
    @pulumi.getter(name="loggingSumologics")
    def logging_sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSumologicArgs']]]]:
        return pulumi.get(self, "logging_sumologics")

    @logging_sumologics.setter
    def logging_sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSumologicArgs']]]]):
        pulumi.set(self, "logging_sumologics", value)

    @property
    @pulumi.getter(name="loggingSyslogs")
    def logging_syslogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSyslogArgs']]]]:
        return pulumi.get(self, "logging_syslogs")

    @logging_syslogs.setter
    def logging_syslogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSyslogArgs']]]]):
        pulumi.set(self, "logging_syslogs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="productEnablement")
    def product_enablement(self) -> Optional[pulumi.Input['ServiceVclProductEnablementArgs']]:
        return pulumi.get(self, "product_enablement")

    @product_enablement.setter
    def product_enablement(self, value: Optional[pulumi.Input['ServiceVclProductEnablementArgs']]):
        pulumi.set(self, "product_enablement", value)

    @property
    @pulumi.getter(name="rateLimiters")
    def rate_limiters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRateLimiterArgs']]]]:
        return pulumi.get(self, "rate_limiters")

    @rate_limiters.setter
    def rate_limiters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRateLimiterArgs']]]]):
        pulumi.set(self, "rate_limiters", value)

    @property
    @pulumi.getter(name="requestSettings")
    def request_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRequestSettingArgs']]]]:
        return pulumi.get(self, "request_settings")

    @request_settings.setter
    def request_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRequestSettingArgs']]]]):
        pulumi.set(self, "request_settings", value)

    @property
    @pulumi.getter(name="responseObjects")
    def response_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]]]:
        """
        The name of the response object used by the Web Application Firewall
        """
        return pulumi.get(self, "response_objects")

    @response_objects.setter
    def response_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]]]):
        pulumi.set(self, "response_objects", value)

    @property
    @pulumi.getter
    def reuse(self) -> Optional[pulumi.Input[bool]]:
        """
        Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
        deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
        an active service will cause an error. Default `false`
        """
        return pulumi.get(self, "reuse")

    @reuse.setter
    def reuse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reuse", value)

    @property
    @pulumi.getter
    def snippets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclSnippetArgs']]]]:
        return pulumi.get(self, "snippets")

    @snippets.setter
    def snippets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclSnippetArgs']]]]):
        pulumi.set(self, "snippets", value)

    @property
    @pulumi.getter(name="staleIfError")
    def stale_if_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables serving a stale object if there is an error
        """
        return pulumi.get(self, "stale_if_error")

    @stale_if_error.setter
    def stale_if_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale_if_error", value)

    @property
    @pulumi.getter(name="staleIfErrorTtl")
    def stale_if_error_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default time-to-live (TTL) for serving the stale object for the version
        """
        return pulumi.get(self, "stale_if_error_ttl")

    @stale_if_error_ttl.setter
    def stale_if_error_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stale_if_error_ttl", value)

    @property
    @pulumi.getter
    def vcls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclVclArgs']]]]:
        return pulumi.get(self, "vcls")

    @vcls.setter
    def vcls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclVclArgs']]]]):
        pulumi.set(self, "vcls", value)

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

    @version_comment.setter
    def version_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_comment", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input['ServiceVclWafArgs']]:
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input['ServiceVclWafArgs']]):
        pulumi.set(self, "waf", value)


@pulumi.input_type
class _ServiceVclState:
    def __init__(__self__, *,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 active_version: Optional[pulumi.Input[int]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclBackendArgs']]]] = None,
                 cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclCacheSettingArgs']]]] = None,
                 cloned_version: Optional[pulumi.Input[int]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclConditionArgs']]]] = None,
                 default_host: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDictionaryArgs']]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDirectorArgs']]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]]] = None,
                 dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDynamicsnippetArgs']]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 force_refresh: Optional[pulumi.Input[bool]] = None,
                 gzips: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclGzipArgs']]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHeaderArgs']]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]]] = None,
                 http3: Optional[pulumi.Input[bool]] = None,
                 imported: Optional[pulumi.Input[bool]] = None,
                 logging_bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBigqueryArgs']]]] = None,
                 logging_blobstorages: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBlobstorageArgs']]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingCloudfileArgs']]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDatadogArgs']]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDigitaloceanArgs']]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingElasticsearchArgs']]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingFtpArgs']]]] = None,
                 logging_gcs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGcArgs']]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGooglepubsubArgs']]]] = None,
                 logging_herokus: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHerokusArgs']]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHoneycombArgs']]]] = None,
                 logging_https: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHttpArgs']]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKafkaArgs']]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKineseArgs']]]] = None,
                 logging_logentries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogentryArgs']]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogglyArgs']]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogshuttleArgs']]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingNewrelicArgs']]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingOpenstackArgs']]]] = None,
                 logging_papertrails: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingPapertrailArgs']]]] = None,
                 logging_s3s: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingS3Args']]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingScalyrArgs']]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSftpArgs']]]] = None,
                 logging_splunks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSplunkArgs']]]] = None,
                 logging_sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSumologicArgs']]]] = None,
                 logging_syslogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSyslogArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_enablement: Optional[pulumi.Input['ServiceVclProductEnablementArgs']] = None,
                 rate_limiters: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRateLimiterArgs']]]] = None,
                 request_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRequestSettingArgs']]]] = None,
                 response_objects: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]]] = None,
                 reuse: Optional[pulumi.Input[bool]] = None,
                 snippets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclSnippetArgs']]]] = None,
                 stale_if_error: Optional[pulumi.Input[bool]] = None,
                 stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
                 vcls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclVclArgs']]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input['ServiceVclWafArgs']] = None):
        """
        Input properties used for looking up and filtering ServiceVcl resources.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]] acls: The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[int] active_version: The currently active version of your Fastly Service
        :param pulumi.Input[int] cloned_version: The latest cloned version by the provider
        :param pulumi.Input[str] comment: An optional comment about the Director
        :param pulumi.Input[str] default_host: Sets the host header
        :param pulumi.Input[int] default_ttl: The default Time-to-live (TTL) for requests
        :param pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]] domains: The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
        :param pulumi.Input[bool] force_destroy: Allow the ACL to be deleted, even if it contains entries. Defaults to false.
        :param pulumi.Input[bool] force_refresh: Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
               local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
               UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
        :param pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]] healthchecks: Name of a defined `healthcheck` to assign to this backend
        :param pulumi.Input[bool] http3: Enables support for the HTTP/3 (QUIC) protocol
        :param pulumi.Input[bool] imported: Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
        :param pulumi.Input[str] name: A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
        :param pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]] response_objects: The name of the response object used by the Web Application Firewall
        :param pulumi.Input[bool] reuse: Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
               deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
               an active service will cause an error. Default `false`
        :param pulumi.Input[bool] stale_if_error: Enables serving a stale object if there is an error
        :param pulumi.Input[int] stale_if_error_ttl: The default time-to-live (TTL) for serving the stale object for the version
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        _ServiceVclState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acls=acls,
            activate=activate,
            active_version=active_version,
            backends=backends,
            cache_settings=cache_settings,
            cloned_version=cloned_version,
            comment=comment,
            conditions=conditions,
            default_host=default_host,
            default_ttl=default_ttl,
            dictionaries=dictionaries,
            directors=directors,
            domains=domains,
            dynamicsnippets=dynamicsnippets,
            force_destroy=force_destroy,
            force_refresh=force_refresh,
            gzips=gzips,
            headers=headers,
            healthchecks=healthchecks,
            http3=http3,
            imported=imported,
            logging_bigqueries=logging_bigqueries,
            logging_blobstorages=logging_blobstorages,
            logging_cloudfiles=logging_cloudfiles,
            logging_datadogs=logging_datadogs,
            logging_digitaloceans=logging_digitaloceans,
            logging_elasticsearches=logging_elasticsearches,
            logging_ftps=logging_ftps,
            logging_gcs=logging_gcs,
            logging_googlepubsubs=logging_googlepubsubs,
            logging_herokus=logging_herokus,
            logging_honeycombs=logging_honeycombs,
            logging_https=logging_https,
            logging_kafkas=logging_kafkas,
            logging_kineses=logging_kineses,
            logging_logentries=logging_logentries,
            logging_logglies=logging_logglies,
            logging_logshuttles=logging_logshuttles,
            logging_newrelics=logging_newrelics,
            logging_openstacks=logging_openstacks,
            logging_papertrails=logging_papertrails,
            logging_s3s=logging_s3s,
            logging_scalyrs=logging_scalyrs,
            logging_sftps=logging_sftps,
            logging_splunks=logging_splunks,
            logging_sumologics=logging_sumologics,
            logging_syslogs=logging_syslogs,
            name=name,
            product_enablement=product_enablement,
            rate_limiters=rate_limiters,
            request_settings=request_settings,
            response_objects=response_objects,
            reuse=reuse,
            snippets=snippets,
            stale_if_error=stale_if_error,
            stale_if_error_ttl=stale_if_error_ttl,
            vcls=vcls,
            version_comment=version_comment,
            waf=waf,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]]] = None,
             activate: Optional[pulumi.Input[bool]] = None,
             active_version: Optional[pulumi.Input[int]] = None,
             backends: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclBackendArgs']]]] = None,
             cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclCacheSettingArgs']]]] = None,
             cloned_version: Optional[pulumi.Input[int]] = None,
             comment: Optional[pulumi.Input[str]] = None,
             conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclConditionArgs']]]] = None,
             default_host: Optional[pulumi.Input[str]] = None,
             default_ttl: Optional[pulumi.Input[int]] = None,
             dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDictionaryArgs']]]] = None,
             directors: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDirectorArgs']]]] = None,
             domains: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]]] = None,
             dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDynamicsnippetArgs']]]] = None,
             force_destroy: Optional[pulumi.Input[bool]] = None,
             force_refresh: Optional[pulumi.Input[bool]] = None,
             gzips: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclGzipArgs']]]] = None,
             headers: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHeaderArgs']]]] = None,
             healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]]] = None,
             http3: Optional[pulumi.Input[bool]] = None,
             imported: Optional[pulumi.Input[bool]] = None,
             logging_bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBigqueryArgs']]]] = None,
             logging_blobstorages: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBlobstorageArgs']]]] = None,
             logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingCloudfileArgs']]]] = None,
             logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDatadogArgs']]]] = None,
             logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDigitaloceanArgs']]]] = None,
             logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingElasticsearchArgs']]]] = None,
             logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingFtpArgs']]]] = None,
             logging_gcs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGcArgs']]]] = None,
             logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGooglepubsubArgs']]]] = None,
             logging_herokus: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHerokusArgs']]]] = None,
             logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHoneycombArgs']]]] = None,
             logging_https: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHttpArgs']]]] = None,
             logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKafkaArgs']]]] = None,
             logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKineseArgs']]]] = None,
             logging_logentries: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogentryArgs']]]] = None,
             logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogglyArgs']]]] = None,
             logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogshuttleArgs']]]] = None,
             logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingNewrelicArgs']]]] = None,
             logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingOpenstackArgs']]]] = None,
             logging_papertrails: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingPapertrailArgs']]]] = None,
             logging_s3s: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingS3Args']]]] = None,
             logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingScalyrArgs']]]] = None,
             logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSftpArgs']]]] = None,
             logging_splunks: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSplunkArgs']]]] = None,
             logging_sumologics: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSumologicArgs']]]] = None,
             logging_syslogs: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSyslogArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             product_enablement: Optional[pulumi.Input['ServiceVclProductEnablementArgs']] = None,
             rate_limiters: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRateLimiterArgs']]]] = None,
             request_settings: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRequestSettingArgs']]]] = None,
             response_objects: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]]] = None,
             reuse: Optional[pulumi.Input[bool]] = None,
             snippets: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclSnippetArgs']]]] = None,
             stale_if_error: Optional[pulumi.Input[bool]] = None,
             stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
             vcls: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclVclArgs']]]] = None,
             version_comment: Optional[pulumi.Input[str]] = None,
             waf: Optional[pulumi.Input['ServiceVclWafArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if acls is not None:
            _setter("acls", acls)
        if activate is not None:
            _setter("activate", activate)
        if active_version is not None:
            _setter("active_version", active_version)
        if backends is not None:
            _setter("backends", backends)
        if cache_settings is not None:
            _setter("cache_settings", cache_settings)
        if cloned_version is not None:
            _setter("cloned_version", cloned_version)
        if comment is not None:
            _setter("comment", comment)
        if conditions is not None:
            _setter("conditions", conditions)
        if default_host is not None:
            _setter("default_host", default_host)
        if default_ttl is not None:
            _setter("default_ttl", default_ttl)
        if dictionaries is not None:
            _setter("dictionaries", dictionaries)
        if directors is not None:
            _setter("directors", directors)
        if domains is not None:
            _setter("domains", domains)
        if dynamicsnippets is not None:
            _setter("dynamicsnippets", dynamicsnippets)
        if force_destroy is not None:
            _setter("force_destroy", force_destroy)
        if force_refresh is not None:
            _setter("force_refresh", force_refresh)
        if gzips is not None:
            _setter("gzips", gzips)
        if headers is not None:
            _setter("headers", headers)
        if healthchecks is not None:
            _setter("healthchecks", healthchecks)
        if http3 is not None:
            _setter("http3", http3)
        if imported is not None:
            _setter("imported", imported)
        if logging_bigqueries is not None:
            _setter("logging_bigqueries", logging_bigqueries)
        if logging_blobstorages is not None:
            _setter("logging_blobstorages", logging_blobstorages)
        if logging_cloudfiles is not None:
            _setter("logging_cloudfiles", logging_cloudfiles)
        if logging_datadogs is not None:
            _setter("logging_datadogs", logging_datadogs)
        if logging_digitaloceans is not None:
            _setter("logging_digitaloceans", logging_digitaloceans)
        if logging_elasticsearches is not None:
            _setter("logging_elasticsearches", logging_elasticsearches)
        if logging_ftps is not None:
            _setter("logging_ftps", logging_ftps)
        if logging_gcs is not None:
            _setter("logging_gcs", logging_gcs)
        if logging_googlepubsubs is not None:
            _setter("logging_googlepubsubs", logging_googlepubsubs)
        if logging_herokus is not None:
            _setter("logging_herokus", logging_herokus)
        if logging_honeycombs is not None:
            _setter("logging_honeycombs", logging_honeycombs)
        if logging_https is not None:
            _setter("logging_https", logging_https)
        if logging_kafkas is not None:
            _setter("logging_kafkas", logging_kafkas)
        if logging_kineses is not None:
            _setter("logging_kineses", logging_kineses)
        if logging_logentries is not None:
            _setter("logging_logentries", logging_logentries)
        if logging_logglies is not None:
            _setter("logging_logglies", logging_logglies)
        if logging_logshuttles is not None:
            _setter("logging_logshuttles", logging_logshuttles)
        if logging_newrelics is not None:
            _setter("logging_newrelics", logging_newrelics)
        if logging_openstacks is not None:
            _setter("logging_openstacks", logging_openstacks)
        if logging_papertrails is not None:
            _setter("logging_papertrails", logging_papertrails)
        if logging_s3s is not None:
            _setter("logging_s3s", logging_s3s)
        if logging_scalyrs is not None:
            _setter("logging_scalyrs", logging_scalyrs)
        if logging_sftps is not None:
            _setter("logging_sftps", logging_sftps)
        if logging_splunks is not None:
            _setter("logging_splunks", logging_splunks)
        if logging_sumologics is not None:
            _setter("logging_sumologics", logging_sumologics)
        if logging_syslogs is not None:
            _setter("logging_syslogs", logging_syslogs)
        if name is not None:
            _setter("name", name)
        if product_enablement is not None:
            _setter("product_enablement", product_enablement)
        if rate_limiters is not None:
            _setter("rate_limiters", rate_limiters)
        if request_settings is not None:
            _setter("request_settings", request_settings)
        if response_objects is not None:
            _setter("response_objects", response_objects)
        if reuse is not None:
            _setter("reuse", reuse)
        if snippets is not None:
            _setter("snippets", snippets)
        if stale_if_error is not None:
            _setter("stale_if_error", stale_if_error)
        if stale_if_error_ttl is not None:
            _setter("stale_if_error_ttl", stale_if_error_ttl)
        if vcls is not None:
            _setter("vcls", vcls)
        if version_comment is not None:
            _setter("version_comment", version_comment)
        if waf is not None:
            _setter("waf", waf)

    @property
    @pulumi.getter
    def acls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]]]:
        """
        The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
        """
        return pulumi.get(self, "acls")

    @acls.setter
    def acls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclAclArgs']]]]):
        pulumi.set(self, "acls", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter(name="activeVersion")
    def active_version(self) -> Optional[pulumi.Input[int]]:
        """
        The currently active version of your Fastly Service
        """
        return pulumi.get(self, "active_version")

    @active_version.setter
    def active_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "active_version", value)

    @property
    @pulumi.getter
    def backends(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclBackendArgs']]]]:
        return pulumi.get(self, "backends")

    @backends.setter
    def backends(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclBackendArgs']]]]):
        pulumi.set(self, "backends", value)

    @property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclCacheSettingArgs']]]]:
        return pulumi.get(self, "cache_settings")

    @cache_settings.setter
    def cache_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclCacheSettingArgs']]]]):
        pulumi.set(self, "cache_settings", value)

    @property
    @pulumi.getter(name="clonedVersion")
    def cloned_version(self) -> Optional[pulumi.Input[int]]:
        """
        The latest cloned version by the provider
        """
        return pulumi.get(self, "cloned_version")

    @cloned_version.setter
    def cloned_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cloned_version", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        An optional comment about the Director
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="defaultHost")
    def default_host(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the host header
        """
        return pulumi.get(self, "default_host")

    @default_host.setter
    def default_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_host", value)

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default Time-to-live (TTL) for requests
        """
        return pulumi.get(self, "default_ttl")

    @default_ttl.setter
    def default_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_ttl", value)

    @property
    @pulumi.getter
    def dictionaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDictionaryArgs']]]]:
        return pulumi.get(self, "dictionaries")

    @dictionaries.setter
    def dictionaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDictionaryArgs']]]]):
        pulumi.set(self, "dictionaries", value)

    @property
    @pulumi.getter
    def directors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDirectorArgs']]]]:
        return pulumi.get(self, "directors")

    @directors.setter
    def directors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDirectorArgs']]]]):
        pulumi.set(self, "directors", value)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]]]:
        """
        The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDomainArgs']]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def dynamicsnippets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDynamicsnippetArgs']]]]:
        return pulumi.get(self, "dynamicsnippets")

    @dynamicsnippets.setter
    def dynamicsnippets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclDynamicsnippetArgs']]]]):
        pulumi.set(self, "dynamicsnippets", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow the ACL to be deleted, even if it contains entries. Defaults to false.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter(name="forceRefresh")
    def force_refresh(self) -> Optional[pulumi.Input[bool]]:
        """
        Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
        local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
        UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
        """
        return pulumi.get(self, "force_refresh")

    @force_refresh.setter
    def force_refresh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_refresh", value)

    @property
    @pulumi.getter
    def gzips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclGzipArgs']]]]:
        return pulumi.get(self, "gzips")

    @gzips.setter
    def gzips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclGzipArgs']]]]):
        pulumi.set(self, "gzips", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHeaderArgs']]]]:
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHeaderArgs']]]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def healthchecks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]]]:
        """
        Name of a defined `healthcheck` to assign to this backend
        """
        return pulumi.get(self, "healthchecks")

    @healthchecks.setter
    def healthchecks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclHealthcheckArgs']]]]):
        pulumi.set(self, "healthchecks", value)

    @property
    @pulumi.getter
    def http3(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables support for the HTTP/3 (QUIC) protocol
        """
        return pulumi.get(self, "http3")

    @http3.setter
    def http3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "http3", value)

    @property
    @pulumi.getter
    def imported(self) -> Optional[pulumi.Input[bool]]:
        """
        Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
        """
        return pulumi.get(self, "imported")

    @imported.setter
    def imported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "imported", value)

    @property
    @pulumi.getter(name="loggingBigqueries")
    def logging_bigqueries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBigqueryArgs']]]]:
        return pulumi.get(self, "logging_bigqueries")

    @logging_bigqueries.setter
    def logging_bigqueries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBigqueryArgs']]]]):
        pulumi.set(self, "logging_bigqueries", value)

    @property
    @pulumi.getter(name="loggingBlobstorages")
    def logging_blobstorages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBlobstorageArgs']]]]:
        return pulumi.get(self, "logging_blobstorages")

    @logging_blobstorages.setter
    def logging_blobstorages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingBlobstorageArgs']]]]):
        pulumi.set(self, "logging_blobstorages", value)

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingCloudfileArgs']]]]:
        return pulumi.get(self, "logging_cloudfiles")

    @logging_cloudfiles.setter
    def logging_cloudfiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingCloudfileArgs']]]]):
        pulumi.set(self, "logging_cloudfiles", value)

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDatadogArgs']]]]:
        return pulumi.get(self, "logging_datadogs")

    @logging_datadogs.setter
    def logging_datadogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDatadogArgs']]]]):
        pulumi.set(self, "logging_datadogs", value)

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDigitaloceanArgs']]]]:
        return pulumi.get(self, "logging_digitaloceans")

    @logging_digitaloceans.setter
    def logging_digitaloceans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingDigitaloceanArgs']]]]):
        pulumi.set(self, "logging_digitaloceans", value)

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingElasticsearchArgs']]]]:
        return pulumi.get(self, "logging_elasticsearches")

    @logging_elasticsearches.setter
    def logging_elasticsearches(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingElasticsearchArgs']]]]):
        pulumi.set(self, "logging_elasticsearches", value)

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingFtpArgs']]]]:
        return pulumi.get(self, "logging_ftps")

    @logging_ftps.setter
    def logging_ftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingFtpArgs']]]]):
        pulumi.set(self, "logging_ftps", value)

    @property
    @pulumi.getter(name="loggingGcs")
    def logging_gcs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGcArgs']]]]:
        return pulumi.get(self, "logging_gcs")

    @logging_gcs.setter
    def logging_gcs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGcArgs']]]]):
        pulumi.set(self, "logging_gcs", value)

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGooglepubsubArgs']]]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @logging_googlepubsubs.setter
    def logging_googlepubsubs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingGooglepubsubArgs']]]]):
        pulumi.set(self, "logging_googlepubsubs", value)

    @property
    @pulumi.getter(name="loggingHerokus")
    def logging_herokus(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHerokusArgs']]]]:
        return pulumi.get(self, "logging_herokus")

    @logging_herokus.setter
    def logging_herokus(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHerokusArgs']]]]):
        pulumi.set(self, "logging_herokus", value)

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHoneycombArgs']]]]:
        return pulumi.get(self, "logging_honeycombs")

    @logging_honeycombs.setter
    def logging_honeycombs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHoneycombArgs']]]]):
        pulumi.set(self, "logging_honeycombs", value)

    @property
    @pulumi.getter(name="loggingHttps")
    def logging_https(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHttpArgs']]]]:
        return pulumi.get(self, "logging_https")

    @logging_https.setter
    def logging_https(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingHttpArgs']]]]):
        pulumi.set(self, "logging_https", value)

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKafkaArgs']]]]:
        return pulumi.get(self, "logging_kafkas")

    @logging_kafkas.setter
    def logging_kafkas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKafkaArgs']]]]):
        pulumi.set(self, "logging_kafkas", value)

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKineseArgs']]]]:
        return pulumi.get(self, "logging_kineses")

    @logging_kineses.setter
    def logging_kineses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingKineseArgs']]]]):
        pulumi.set(self, "logging_kineses", value)

    @property
    @pulumi.getter(name="loggingLogentries")
    def logging_logentries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogentryArgs']]]]:
        return pulumi.get(self, "logging_logentries")

    @logging_logentries.setter
    def logging_logentries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogentryArgs']]]]):
        pulumi.set(self, "logging_logentries", value)

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogglyArgs']]]]:
        return pulumi.get(self, "logging_logglies")

    @logging_logglies.setter
    def logging_logglies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogglyArgs']]]]):
        pulumi.set(self, "logging_logglies", value)

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogshuttleArgs']]]]:
        return pulumi.get(self, "logging_logshuttles")

    @logging_logshuttles.setter
    def logging_logshuttles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingLogshuttleArgs']]]]):
        pulumi.set(self, "logging_logshuttles", value)

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingNewrelicArgs']]]]:
        return pulumi.get(self, "logging_newrelics")

    @logging_newrelics.setter
    def logging_newrelics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingNewrelicArgs']]]]):
        pulumi.set(self, "logging_newrelics", value)

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingOpenstackArgs']]]]:
        return pulumi.get(self, "logging_openstacks")

    @logging_openstacks.setter
    def logging_openstacks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingOpenstackArgs']]]]):
        pulumi.set(self, "logging_openstacks", value)

    @property
    @pulumi.getter(name="loggingPapertrails")
    def logging_papertrails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingPapertrailArgs']]]]:
        return pulumi.get(self, "logging_papertrails")

    @logging_papertrails.setter
    def logging_papertrails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingPapertrailArgs']]]]):
        pulumi.set(self, "logging_papertrails", value)

    @property
    @pulumi.getter(name="loggingS3s")
    def logging_s3s(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingS3Args']]]]:
        return pulumi.get(self, "logging_s3s")

    @logging_s3s.setter
    def logging_s3s(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingS3Args']]]]):
        pulumi.set(self, "logging_s3s", value)

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingScalyrArgs']]]]:
        return pulumi.get(self, "logging_scalyrs")

    @logging_scalyrs.setter
    def logging_scalyrs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingScalyrArgs']]]]):
        pulumi.set(self, "logging_scalyrs", value)

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSftpArgs']]]]:
        return pulumi.get(self, "logging_sftps")

    @logging_sftps.setter
    def logging_sftps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSftpArgs']]]]):
        pulumi.set(self, "logging_sftps", value)

    @property
    @pulumi.getter(name="loggingSplunks")
    def logging_splunks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSplunkArgs']]]]:
        return pulumi.get(self, "logging_splunks")

    @logging_splunks.setter
    def logging_splunks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSplunkArgs']]]]):
        pulumi.set(self, "logging_splunks", value)

    @property
    @pulumi.getter(name="loggingSumologics")
    def logging_sumologics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSumologicArgs']]]]:
        return pulumi.get(self, "logging_sumologics")

    @logging_sumologics.setter
    def logging_sumologics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSumologicArgs']]]]):
        pulumi.set(self, "logging_sumologics", value)

    @property
    @pulumi.getter(name="loggingSyslogs")
    def logging_syslogs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSyslogArgs']]]]:
        return pulumi.get(self, "logging_syslogs")

    @logging_syslogs.setter
    def logging_syslogs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclLoggingSyslogArgs']]]]):
        pulumi.set(self, "logging_syslogs", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="productEnablement")
    def product_enablement(self) -> Optional[pulumi.Input['ServiceVclProductEnablementArgs']]:
        return pulumi.get(self, "product_enablement")

    @product_enablement.setter
    def product_enablement(self, value: Optional[pulumi.Input['ServiceVclProductEnablementArgs']]):
        pulumi.set(self, "product_enablement", value)

    @property
    @pulumi.getter(name="rateLimiters")
    def rate_limiters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRateLimiterArgs']]]]:
        return pulumi.get(self, "rate_limiters")

    @rate_limiters.setter
    def rate_limiters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRateLimiterArgs']]]]):
        pulumi.set(self, "rate_limiters", value)

    @property
    @pulumi.getter(name="requestSettings")
    def request_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRequestSettingArgs']]]]:
        return pulumi.get(self, "request_settings")

    @request_settings.setter
    def request_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclRequestSettingArgs']]]]):
        pulumi.set(self, "request_settings", value)

    @property
    @pulumi.getter(name="responseObjects")
    def response_objects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]]]:
        """
        The name of the response object used by the Web Application Firewall
        """
        return pulumi.get(self, "response_objects")

    @response_objects.setter
    def response_objects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclResponseObjectArgs']]]]):
        pulumi.set(self, "response_objects", value)

    @property
    @pulumi.getter
    def reuse(self) -> Optional[pulumi.Input[bool]]:
        """
        Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
        deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
        an active service will cause an error. Default `false`
        """
        return pulumi.get(self, "reuse")

    @reuse.setter
    def reuse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reuse", value)

    @property
    @pulumi.getter
    def snippets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclSnippetArgs']]]]:
        return pulumi.get(self, "snippets")

    @snippets.setter
    def snippets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclSnippetArgs']]]]):
        pulumi.set(self, "snippets", value)

    @property
    @pulumi.getter(name="staleIfError")
    def stale_if_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables serving a stale object if there is an error
        """
        return pulumi.get(self, "stale_if_error")

    @stale_if_error.setter
    def stale_if_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "stale_if_error", value)

    @property
    @pulumi.getter(name="staleIfErrorTtl")
    def stale_if_error_ttl(self) -> Optional[pulumi.Input[int]]:
        """
        The default time-to-live (TTL) for serving the stale object for the version
        """
        return pulumi.get(self, "stale_if_error_ttl")

    @stale_if_error_ttl.setter
    def stale_if_error_ttl(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stale_if_error_ttl", value)

    @property
    @pulumi.getter
    def vcls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclVclArgs']]]]:
        return pulumi.get(self, "vcls")

    @vcls.setter
    def vcls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceVclVclArgs']]]]):
        pulumi.set(self, "vcls", value)

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> Optional[pulumi.Input[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

    @version_comment.setter
    def version_comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version_comment", value)

    @property
    @pulumi.getter
    def waf(self) -> Optional[pulumi.Input['ServiceVclWafArgs']]:
        return pulumi.get(self, "waf")

    @waf.setter
    def waf(self, value: Optional[pulumi.Input['ServiceVclWafArgs']]):
        pulumi.set(self, "waf", value)


class ServiceVcl(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclAclArgs']]]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclBackendArgs']]]]] = None,
                 cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclCacheSettingArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclConditionArgs']]]]] = None,
                 default_host: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDictionaryArgs']]]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDirectorArgs']]]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDomainArgs']]]]] = None,
                 dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDynamicsnippetArgs']]]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gzips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclGzipArgs']]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclHeaderArgs']]]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclHealthcheckArgs']]]]] = None,
                 http3: Optional[pulumi.Input[bool]] = None,
                 logging_bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingBigqueryArgs']]]]] = None,
                 logging_blobstorages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingBlobstorageArgs']]]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingCloudfileArgs']]]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingDatadogArgs']]]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingDigitaloceanArgs']]]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingElasticsearchArgs']]]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingFtpArgs']]]]] = None,
                 logging_gcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingGcArgs']]]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingGooglepubsubArgs']]]]] = None,
                 logging_herokus: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHerokusArgs']]]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHoneycombArgs']]]]] = None,
                 logging_https: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHttpArgs']]]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingKafkaArgs']]]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingKineseArgs']]]]] = None,
                 logging_logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogentryArgs']]]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogglyArgs']]]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogshuttleArgs']]]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingNewrelicArgs']]]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingOpenstackArgs']]]]] = None,
                 logging_papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingPapertrailArgs']]]]] = None,
                 logging_s3s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingS3Args']]]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingScalyrArgs']]]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSftpArgs']]]]] = None,
                 logging_splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSplunkArgs']]]]] = None,
                 logging_sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSumologicArgs']]]]] = None,
                 logging_syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSyslogArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_enablement: Optional[pulumi.Input[pulumi.InputType['ServiceVclProductEnablementArgs']]] = None,
                 rate_limiters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclRateLimiterArgs']]]]] = None,
                 request_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclRequestSettingArgs']]]]] = None,
                 response_objects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclResponseObjectArgs']]]]] = None,
                 reuse: Optional[pulumi.Input[bool]] = None,
                 snippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclSnippetArgs']]]]] = None,
                 stale_if_error: Optional[pulumi.Input[bool]] = None,
                 stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
                 vcls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclVclArgs']]]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[pulumi.InputType['ServiceVclWafArgs']]] = None,
                 __props__=None):
        """
        Provides a Fastly Service, representing the configuration for a website, app,
        API, or anything else to be served through Fastly. A Service encompasses Domains
        and Backends.

        The Service resource requires a domain name that is correctly set up to direct
        traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
        on their documentation site for guidance.

        ## Import

        Fastly Services can be imported using their service ID, e.g.

        ```sh
         $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx
        ```

         By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.

        ```sh
         $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclAclArgs']]]] acls: The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[str] comment: An optional comment about the Director
        :param pulumi.Input[str] default_host: Sets the host header
        :param pulumi.Input[int] default_ttl: The default Time-to-live (TTL) for requests
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDomainArgs']]]] domains: The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
        :param pulumi.Input[bool] force_destroy: Allow the ACL to be deleted, even if it contains entries. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclHealthcheckArgs']]]] healthchecks: Name of a defined `healthcheck` to assign to this backend
        :param pulumi.Input[bool] http3: Enables support for the HTTP/3 (QUIC) protocol
        :param pulumi.Input[str] name: A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclResponseObjectArgs']]]] response_objects: The name of the response object used by the Web Application Firewall
        :param pulumi.Input[bool] reuse: Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
               deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
               an active service will cause an error. Default `false`
        :param pulumi.Input[bool] stale_if_error: Enables serving a stale object if there is an error
        :param pulumi.Input[int] stale_if_error_ttl: The default time-to-live (TTL) for serving the stale object for the version
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceVclArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provides a Fastly Service, representing the configuration for a website, app,
        API, or anything else to be served through Fastly. A Service encompasses Domains
        and Backends.

        The Service resource requires a domain name that is correctly set up to direct
        traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
        on their documentation site for guidance.

        ## Import

        Fastly Services can be imported using their service ID, e.g.

        ```sh
         $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx
        ```

         By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.

        ```sh
         $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2
        ```

        :param str resource_name: The name of the resource.
        :param ServiceVclArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceVclArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ServiceVclArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclAclArgs']]]]] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclBackendArgs']]]]] = None,
                 cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclCacheSettingArgs']]]]] = None,
                 comment: Optional[pulumi.Input[str]] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclConditionArgs']]]]] = None,
                 default_host: Optional[pulumi.Input[str]] = None,
                 default_ttl: Optional[pulumi.Input[int]] = None,
                 dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDictionaryArgs']]]]] = None,
                 directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDirectorArgs']]]]] = None,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDomainArgs']]]]] = None,
                 dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDynamicsnippetArgs']]]]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 gzips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclGzipArgs']]]]] = None,
                 headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclHeaderArgs']]]]] = None,
                 healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclHealthcheckArgs']]]]] = None,
                 http3: Optional[pulumi.Input[bool]] = None,
                 logging_bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingBigqueryArgs']]]]] = None,
                 logging_blobstorages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingBlobstorageArgs']]]]] = None,
                 logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingCloudfileArgs']]]]] = None,
                 logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingDatadogArgs']]]]] = None,
                 logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingDigitaloceanArgs']]]]] = None,
                 logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingElasticsearchArgs']]]]] = None,
                 logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingFtpArgs']]]]] = None,
                 logging_gcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingGcArgs']]]]] = None,
                 logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingGooglepubsubArgs']]]]] = None,
                 logging_herokus: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHerokusArgs']]]]] = None,
                 logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHoneycombArgs']]]]] = None,
                 logging_https: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHttpArgs']]]]] = None,
                 logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingKafkaArgs']]]]] = None,
                 logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingKineseArgs']]]]] = None,
                 logging_logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogentryArgs']]]]] = None,
                 logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogglyArgs']]]]] = None,
                 logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogshuttleArgs']]]]] = None,
                 logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingNewrelicArgs']]]]] = None,
                 logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingOpenstackArgs']]]]] = None,
                 logging_papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingPapertrailArgs']]]]] = None,
                 logging_s3s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingS3Args']]]]] = None,
                 logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingScalyrArgs']]]]] = None,
                 logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSftpArgs']]]]] = None,
                 logging_splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSplunkArgs']]]]] = None,
                 logging_sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSumologicArgs']]]]] = None,
                 logging_syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSyslogArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 product_enablement: Optional[pulumi.Input[pulumi.InputType['ServiceVclProductEnablementArgs']]] = None,
                 rate_limiters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclRateLimiterArgs']]]]] = None,
                 request_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclRequestSettingArgs']]]]] = None,
                 response_objects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclResponseObjectArgs']]]]] = None,
                 reuse: Optional[pulumi.Input[bool]] = None,
                 snippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclSnippetArgs']]]]] = None,
                 stale_if_error: Optional[pulumi.Input[bool]] = None,
                 stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
                 vcls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclVclArgs']]]]] = None,
                 version_comment: Optional[pulumi.Input[str]] = None,
                 waf: Optional[pulumi.Input[pulumi.InputType['ServiceVclWafArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceVclArgs.__new__(ServiceVclArgs)

            __props__.__dict__["acls"] = acls
            __props__.__dict__["activate"] = activate
            __props__.__dict__["backends"] = backends
            __props__.__dict__["cache_settings"] = cache_settings
            __props__.__dict__["comment"] = comment
            __props__.__dict__["conditions"] = conditions
            __props__.__dict__["default_host"] = default_host
            __props__.__dict__["default_ttl"] = default_ttl
            __props__.__dict__["dictionaries"] = dictionaries
            __props__.__dict__["directors"] = directors
            if domains is None and not opts.urn:
                raise TypeError("Missing required property 'domains'")
            __props__.__dict__["domains"] = domains
            __props__.__dict__["dynamicsnippets"] = dynamicsnippets
            __props__.__dict__["force_destroy"] = force_destroy
            __props__.__dict__["gzips"] = gzips
            __props__.__dict__["headers"] = headers
            __props__.__dict__["healthchecks"] = healthchecks
            __props__.__dict__["http3"] = http3
            __props__.__dict__["logging_bigqueries"] = logging_bigqueries
            __props__.__dict__["logging_blobstorages"] = logging_blobstorages
            __props__.__dict__["logging_cloudfiles"] = logging_cloudfiles
            __props__.__dict__["logging_datadogs"] = logging_datadogs
            __props__.__dict__["logging_digitaloceans"] = logging_digitaloceans
            __props__.__dict__["logging_elasticsearches"] = logging_elasticsearches
            __props__.__dict__["logging_ftps"] = logging_ftps
            __props__.__dict__["logging_gcs"] = logging_gcs
            __props__.__dict__["logging_googlepubsubs"] = logging_googlepubsubs
            __props__.__dict__["logging_herokus"] = logging_herokus
            __props__.__dict__["logging_honeycombs"] = logging_honeycombs
            __props__.__dict__["logging_https"] = logging_https
            __props__.__dict__["logging_kafkas"] = logging_kafkas
            __props__.__dict__["logging_kineses"] = logging_kineses
            __props__.__dict__["logging_logentries"] = logging_logentries
            __props__.__dict__["logging_logglies"] = logging_logglies
            __props__.__dict__["logging_logshuttles"] = logging_logshuttles
            __props__.__dict__["logging_newrelics"] = logging_newrelics
            __props__.__dict__["logging_openstacks"] = logging_openstacks
            __props__.__dict__["logging_papertrails"] = logging_papertrails
            __props__.__dict__["logging_s3s"] = logging_s3s
            __props__.__dict__["logging_scalyrs"] = logging_scalyrs
            __props__.__dict__["logging_sftps"] = logging_sftps
            __props__.__dict__["logging_splunks"] = logging_splunks
            __props__.__dict__["logging_sumologics"] = logging_sumologics
            __props__.__dict__["logging_syslogs"] = logging_syslogs
            __props__.__dict__["name"] = name
            if product_enablement is not None and not isinstance(product_enablement, ServiceVclProductEnablementArgs):
                product_enablement = product_enablement or {}
                def _setter(key, value):
                    product_enablement[key] = value
                ServiceVclProductEnablementArgs._configure(_setter, **product_enablement)
            __props__.__dict__["product_enablement"] = product_enablement
            __props__.__dict__["rate_limiters"] = rate_limiters
            __props__.__dict__["request_settings"] = request_settings
            __props__.__dict__["response_objects"] = response_objects
            __props__.__dict__["reuse"] = reuse
            __props__.__dict__["snippets"] = snippets
            __props__.__dict__["stale_if_error"] = stale_if_error
            __props__.__dict__["stale_if_error_ttl"] = stale_if_error_ttl
            __props__.__dict__["vcls"] = vcls
            __props__.__dict__["version_comment"] = version_comment
            if waf is not None and not isinstance(waf, ServiceVclWafArgs):
                waf = waf or {}
                def _setter(key, value):
                    waf[key] = value
                ServiceVclWafArgs._configure(_setter, **waf)
            __props__.__dict__["waf"] = waf
            __props__.__dict__["active_version"] = None
            __props__.__dict__["cloned_version"] = None
            __props__.__dict__["force_refresh"] = None
            __props__.__dict__["imported"] = None
        super(ServiceVcl, __self__).__init__(
            'fastly:index/serviceVcl:ServiceVcl',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclAclArgs']]]]] = None,
            activate: Optional[pulumi.Input[bool]] = None,
            active_version: Optional[pulumi.Input[int]] = None,
            backends: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclBackendArgs']]]]] = None,
            cache_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclCacheSettingArgs']]]]] = None,
            cloned_version: Optional[pulumi.Input[int]] = None,
            comment: Optional[pulumi.Input[str]] = None,
            conditions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclConditionArgs']]]]] = None,
            default_host: Optional[pulumi.Input[str]] = None,
            default_ttl: Optional[pulumi.Input[int]] = None,
            dictionaries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDictionaryArgs']]]]] = None,
            directors: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDirectorArgs']]]]] = None,
            domains: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDomainArgs']]]]] = None,
            dynamicsnippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDynamicsnippetArgs']]]]] = None,
            force_destroy: Optional[pulumi.Input[bool]] = None,
            force_refresh: Optional[pulumi.Input[bool]] = None,
            gzips: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclGzipArgs']]]]] = None,
            headers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclHeaderArgs']]]]] = None,
            healthchecks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclHealthcheckArgs']]]]] = None,
            http3: Optional[pulumi.Input[bool]] = None,
            imported: Optional[pulumi.Input[bool]] = None,
            logging_bigqueries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingBigqueryArgs']]]]] = None,
            logging_blobstorages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingBlobstorageArgs']]]]] = None,
            logging_cloudfiles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingCloudfileArgs']]]]] = None,
            logging_datadogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingDatadogArgs']]]]] = None,
            logging_digitaloceans: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingDigitaloceanArgs']]]]] = None,
            logging_elasticsearches: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingElasticsearchArgs']]]]] = None,
            logging_ftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingFtpArgs']]]]] = None,
            logging_gcs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingGcArgs']]]]] = None,
            logging_googlepubsubs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingGooglepubsubArgs']]]]] = None,
            logging_herokus: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHerokusArgs']]]]] = None,
            logging_honeycombs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHoneycombArgs']]]]] = None,
            logging_https: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingHttpArgs']]]]] = None,
            logging_kafkas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingKafkaArgs']]]]] = None,
            logging_kineses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingKineseArgs']]]]] = None,
            logging_logentries: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogentryArgs']]]]] = None,
            logging_logglies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogglyArgs']]]]] = None,
            logging_logshuttles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingLogshuttleArgs']]]]] = None,
            logging_newrelics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingNewrelicArgs']]]]] = None,
            logging_openstacks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingOpenstackArgs']]]]] = None,
            logging_papertrails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingPapertrailArgs']]]]] = None,
            logging_s3s: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingS3Args']]]]] = None,
            logging_scalyrs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingScalyrArgs']]]]] = None,
            logging_sftps: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSftpArgs']]]]] = None,
            logging_splunks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSplunkArgs']]]]] = None,
            logging_sumologics: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSumologicArgs']]]]] = None,
            logging_syslogs: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclLoggingSyslogArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            product_enablement: Optional[pulumi.Input[pulumi.InputType['ServiceVclProductEnablementArgs']]] = None,
            rate_limiters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclRateLimiterArgs']]]]] = None,
            request_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclRequestSettingArgs']]]]] = None,
            response_objects: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclResponseObjectArgs']]]]] = None,
            reuse: Optional[pulumi.Input[bool]] = None,
            snippets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclSnippetArgs']]]]] = None,
            stale_if_error: Optional[pulumi.Input[bool]] = None,
            stale_if_error_ttl: Optional[pulumi.Input[int]] = None,
            vcls: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclVclArgs']]]]] = None,
            version_comment: Optional[pulumi.Input[str]] = None,
            waf: Optional[pulumi.Input[pulumi.InputType['ServiceVclWafArgs']]] = None) -> 'ServiceVcl':
        """
        Get an existing ServiceVcl resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclAclArgs']]]] acls: The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
        :param pulumi.Input[bool] activate: Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        :param pulumi.Input[int] active_version: The currently active version of your Fastly Service
        :param pulumi.Input[int] cloned_version: The latest cloned version by the provider
        :param pulumi.Input[str] comment: An optional comment about the Director
        :param pulumi.Input[str] default_host: Sets the host header
        :param pulumi.Input[int] default_ttl: The default Time-to-live (TTL) for requests
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclDomainArgs']]]] domains: The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
        :param pulumi.Input[bool] force_destroy: Allow the ACL to be deleted, even if it contains entries. Defaults to false.
        :param pulumi.Input[bool] force_refresh: Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
               local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
               UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclHealthcheckArgs']]]] healthchecks: Name of a defined `healthcheck` to assign to this backend
        :param pulumi.Input[bool] http3: Enables support for the HTTP/3 (QUIC) protocol
        :param pulumi.Input[bool] imported: Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
        :param pulumi.Input[str] name: A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceVclResponseObjectArgs']]]] response_objects: The name of the response object used by the Web Application Firewall
        :param pulumi.Input[bool] reuse: Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
               deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
               an active service will cause an error. Default `false`
        :param pulumi.Input[bool] stale_if_error: Enables serving a stale object if there is an error
        :param pulumi.Input[int] stale_if_error_ttl: The default time-to-live (TTL) for serving the stale object for the version
        :param pulumi.Input[str] version_comment: Description field for the version
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceVclState.__new__(_ServiceVclState)

        __props__.__dict__["acls"] = acls
        __props__.__dict__["activate"] = activate
        __props__.__dict__["active_version"] = active_version
        __props__.__dict__["backends"] = backends
        __props__.__dict__["cache_settings"] = cache_settings
        __props__.__dict__["cloned_version"] = cloned_version
        __props__.__dict__["comment"] = comment
        __props__.__dict__["conditions"] = conditions
        __props__.__dict__["default_host"] = default_host
        __props__.__dict__["default_ttl"] = default_ttl
        __props__.__dict__["dictionaries"] = dictionaries
        __props__.__dict__["directors"] = directors
        __props__.__dict__["domains"] = domains
        __props__.__dict__["dynamicsnippets"] = dynamicsnippets
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["force_refresh"] = force_refresh
        __props__.__dict__["gzips"] = gzips
        __props__.__dict__["headers"] = headers
        __props__.__dict__["healthchecks"] = healthchecks
        __props__.__dict__["http3"] = http3
        __props__.__dict__["imported"] = imported
        __props__.__dict__["logging_bigqueries"] = logging_bigqueries
        __props__.__dict__["logging_blobstorages"] = logging_blobstorages
        __props__.__dict__["logging_cloudfiles"] = logging_cloudfiles
        __props__.__dict__["logging_datadogs"] = logging_datadogs
        __props__.__dict__["logging_digitaloceans"] = logging_digitaloceans
        __props__.__dict__["logging_elasticsearches"] = logging_elasticsearches
        __props__.__dict__["logging_ftps"] = logging_ftps
        __props__.__dict__["logging_gcs"] = logging_gcs
        __props__.__dict__["logging_googlepubsubs"] = logging_googlepubsubs
        __props__.__dict__["logging_herokus"] = logging_herokus
        __props__.__dict__["logging_honeycombs"] = logging_honeycombs
        __props__.__dict__["logging_https"] = logging_https
        __props__.__dict__["logging_kafkas"] = logging_kafkas
        __props__.__dict__["logging_kineses"] = logging_kineses
        __props__.__dict__["logging_logentries"] = logging_logentries
        __props__.__dict__["logging_logglies"] = logging_logglies
        __props__.__dict__["logging_logshuttles"] = logging_logshuttles
        __props__.__dict__["logging_newrelics"] = logging_newrelics
        __props__.__dict__["logging_openstacks"] = logging_openstacks
        __props__.__dict__["logging_papertrails"] = logging_papertrails
        __props__.__dict__["logging_s3s"] = logging_s3s
        __props__.__dict__["logging_scalyrs"] = logging_scalyrs
        __props__.__dict__["logging_sftps"] = logging_sftps
        __props__.__dict__["logging_splunks"] = logging_splunks
        __props__.__dict__["logging_sumologics"] = logging_sumologics
        __props__.__dict__["logging_syslogs"] = logging_syslogs
        __props__.__dict__["name"] = name
        __props__.__dict__["product_enablement"] = product_enablement
        __props__.__dict__["rate_limiters"] = rate_limiters
        __props__.__dict__["request_settings"] = request_settings
        __props__.__dict__["response_objects"] = response_objects
        __props__.__dict__["reuse"] = reuse
        __props__.__dict__["snippets"] = snippets
        __props__.__dict__["stale_if_error"] = stale_if_error
        __props__.__dict__["stale_if_error_ttl"] = stale_if_error_ttl
        __props__.__dict__["vcls"] = vcls
        __props__.__dict__["version_comment"] = version_comment
        __props__.__dict__["waf"] = waf
        return ServiceVcl(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acls(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclAcl']]]:
        """
        The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
        """
        return pulumi.get(self, "acls")

    @property
    @pulumi.getter
    def activate(self) -> pulumi.Output[Optional[bool]]:
        """
        Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter(name="activeVersion")
    def active_version(self) -> pulumi.Output[int]:
        """
        The currently active version of your Fastly Service
        """
        return pulumi.get(self, "active_version")

    @property
    @pulumi.getter
    def backends(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclBackend']]]:
        return pulumi.get(self, "backends")

    @property
    @pulumi.getter(name="cacheSettings")
    def cache_settings(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclCacheSetting']]]:
        return pulumi.get(self, "cache_settings")

    @property
    @pulumi.getter(name="clonedVersion")
    def cloned_version(self) -> pulumi.Output[int]:
        """
        The latest cloned version by the provider
        """
        return pulumi.get(self, "cloned_version")

    @property
    @pulumi.getter
    def comment(self) -> pulumi.Output[Optional[str]]:
        """
        An optional comment about the Director
        """
        return pulumi.get(self, "comment")

    @property
    @pulumi.getter
    def conditions(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclCondition']]]:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter(name="defaultHost")
    def default_host(self) -> pulumi.Output[Optional[str]]:
        """
        Sets the host header
        """
        return pulumi.get(self, "default_host")

    @property
    @pulumi.getter(name="defaultTtl")
    def default_ttl(self) -> pulumi.Output[Optional[int]]:
        """
        The default Time-to-live (TTL) for requests
        """
        return pulumi.get(self, "default_ttl")

    @property
    @pulumi.getter
    def dictionaries(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclDictionary']]]:
        return pulumi.get(self, "dictionaries")

    @property
    @pulumi.getter
    def directors(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclDirector']]]:
        return pulumi.get(self, "directors")

    @property
    @pulumi.getter
    def domains(self) -> pulumi.Output[Sequence['outputs.ServiceVclDomain']]:
        """
        The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
        """
        return pulumi.get(self, "domains")

    @property
    @pulumi.getter
    def dynamicsnippets(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclDynamicsnippet']]]:
        return pulumi.get(self, "dynamicsnippets")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[bool]]:
        """
        Allow the ACL to be deleted, even if it contains entries. Defaults to false.
        """
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter(name="forceRefresh")
    def force_refresh(self) -> pulumi.Output[bool]:
        """
        Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
        local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
        UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
        """
        return pulumi.get(self, "force_refresh")

    @property
    @pulumi.getter
    def gzips(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclGzip']]]:
        return pulumi.get(self, "gzips")

    @property
    @pulumi.getter
    def headers(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclHeader']]]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def healthchecks(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclHealthcheck']]]:
        """
        Name of a defined `healthcheck` to assign to this backend
        """
        return pulumi.get(self, "healthchecks")

    @property
    @pulumi.getter
    def http3(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables support for the HTTP/3 (QUIC) protocol
        """
        return pulumi.get(self, "http3")

    @property
    @pulumi.getter
    def imported(self) -> pulumi.Output[bool]:
        """
        Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
        """
        return pulumi.get(self, "imported")

    @property
    @pulumi.getter(name="loggingBigqueries")
    def logging_bigqueries(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingBigquery']]]:
        return pulumi.get(self, "logging_bigqueries")

    @property
    @pulumi.getter(name="loggingBlobstorages")
    def logging_blobstorages(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingBlobstorage']]]:
        return pulumi.get(self, "logging_blobstorages")

    @property
    @pulumi.getter(name="loggingCloudfiles")
    def logging_cloudfiles(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingCloudfile']]]:
        return pulumi.get(self, "logging_cloudfiles")

    @property
    @pulumi.getter(name="loggingDatadogs")
    def logging_datadogs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingDatadog']]]:
        return pulumi.get(self, "logging_datadogs")

    @property
    @pulumi.getter(name="loggingDigitaloceans")
    def logging_digitaloceans(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingDigitalocean']]]:
        return pulumi.get(self, "logging_digitaloceans")

    @property
    @pulumi.getter(name="loggingElasticsearches")
    def logging_elasticsearches(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingElasticsearch']]]:
        return pulumi.get(self, "logging_elasticsearches")

    @property
    @pulumi.getter(name="loggingFtps")
    def logging_ftps(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingFtp']]]:
        return pulumi.get(self, "logging_ftps")

    @property
    @pulumi.getter(name="loggingGcs")
    def logging_gcs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingGc']]]:
        return pulumi.get(self, "logging_gcs")

    @property
    @pulumi.getter(name="loggingGooglepubsubs")
    def logging_googlepubsubs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingGooglepubsub']]]:
        return pulumi.get(self, "logging_googlepubsubs")

    @property
    @pulumi.getter(name="loggingHerokus")
    def logging_herokus(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingHerokus']]]:
        return pulumi.get(self, "logging_herokus")

    @property
    @pulumi.getter(name="loggingHoneycombs")
    def logging_honeycombs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingHoneycomb']]]:
        return pulumi.get(self, "logging_honeycombs")

    @property
    @pulumi.getter(name="loggingHttps")
    def logging_https(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingHttp']]]:
        return pulumi.get(self, "logging_https")

    @property
    @pulumi.getter(name="loggingKafkas")
    def logging_kafkas(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingKafka']]]:
        return pulumi.get(self, "logging_kafkas")

    @property
    @pulumi.getter(name="loggingKineses")
    def logging_kineses(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingKinese']]]:
        return pulumi.get(self, "logging_kineses")

    @property
    @pulumi.getter(name="loggingLogentries")
    def logging_logentries(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingLogentry']]]:
        return pulumi.get(self, "logging_logentries")

    @property
    @pulumi.getter(name="loggingLogglies")
    def logging_logglies(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingLoggly']]]:
        return pulumi.get(self, "logging_logglies")

    @property
    @pulumi.getter(name="loggingLogshuttles")
    def logging_logshuttles(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingLogshuttle']]]:
        return pulumi.get(self, "logging_logshuttles")

    @property
    @pulumi.getter(name="loggingNewrelics")
    def logging_newrelics(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingNewrelic']]]:
        return pulumi.get(self, "logging_newrelics")

    @property
    @pulumi.getter(name="loggingOpenstacks")
    def logging_openstacks(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingOpenstack']]]:
        return pulumi.get(self, "logging_openstacks")

    @property
    @pulumi.getter(name="loggingPapertrails")
    def logging_papertrails(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingPapertrail']]]:
        return pulumi.get(self, "logging_papertrails")

    @property
    @pulumi.getter(name="loggingS3s")
    def logging_s3s(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingS3']]]:
        return pulumi.get(self, "logging_s3s")

    @property
    @pulumi.getter(name="loggingScalyrs")
    def logging_scalyrs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingScalyr']]]:
        return pulumi.get(self, "logging_scalyrs")

    @property
    @pulumi.getter(name="loggingSftps")
    def logging_sftps(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingSftp']]]:
        return pulumi.get(self, "logging_sftps")

    @property
    @pulumi.getter(name="loggingSplunks")
    def logging_splunks(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingSplunk']]]:
        return pulumi.get(self, "logging_splunks")

    @property
    @pulumi.getter(name="loggingSumologics")
    def logging_sumologics(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingSumologic']]]:
        return pulumi.get(self, "logging_sumologics")

    @property
    @pulumi.getter(name="loggingSyslogs")
    def logging_syslogs(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclLoggingSyslog']]]:
        return pulumi.get(self, "logging_syslogs")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="productEnablement")
    def product_enablement(self) -> pulumi.Output[Optional['outputs.ServiceVclProductEnablement']]:
        return pulumi.get(self, "product_enablement")

    @property
    @pulumi.getter(name="rateLimiters")
    def rate_limiters(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclRateLimiter']]]:
        return pulumi.get(self, "rate_limiters")

    @property
    @pulumi.getter(name="requestSettings")
    def request_settings(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclRequestSetting']]]:
        return pulumi.get(self, "request_settings")

    @property
    @pulumi.getter(name="responseObjects")
    def response_objects(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclResponseObject']]]:
        """
        The name of the response object used by the Web Application Firewall
        """
        return pulumi.get(self, "response_objects")

    @property
    @pulumi.getter
    def reuse(self) -> pulumi.Output[Optional[bool]]:
        """
        Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
        deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
        an active service will cause an error. Default `false`
        """
        return pulumi.get(self, "reuse")

    @property
    @pulumi.getter
    def snippets(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclSnippet']]]:
        return pulumi.get(self, "snippets")

    @property
    @pulumi.getter(name="staleIfError")
    def stale_if_error(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables serving a stale object if there is an error
        """
        return pulumi.get(self, "stale_if_error")

    @property
    @pulumi.getter(name="staleIfErrorTtl")
    def stale_if_error_ttl(self) -> pulumi.Output[Optional[int]]:
        """
        The default time-to-live (TTL) for serving the stale object for the version
        """
        return pulumi.get(self, "stale_if_error_ttl")

    @property
    @pulumi.getter
    def vcls(self) -> pulumi.Output[Optional[Sequence['outputs.ServiceVclVcl']]]:
        return pulumi.get(self, "vcls")

    @property
    @pulumi.getter(name="versionComment")
    def version_comment(self) -> pulumi.Output[Optional[str]]:
        """
        Description field for the version
        """
        return pulumi.get(self, "version_comment")

    @property
    @pulumi.getter
    def waf(self) -> pulumi.Output[Optional['outputs.ServiceVclWaf']]:
        return pulumi.get(self, "waf")

