// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource represents a successful validation of a Fastly TLS Subscription in concert with other resources.
 *
 * Most commonly, this resource is used together with a resource for a DNS record and `fastly.TlsSubscription` to request a DNS validated certificate, deploy the required validation records and wait for validation to complete.
 *
 * > **Warning:** This resource implements a part of the validation workflow. It does not represent a real-world entity in Fastly, therefore changing or deleting this resource on its own has no immediate effect.
 *
 * ## Example Usage
 *
 * DNS Validation with AWS Route53:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as fastly from "@pulumi/fastly";
 *
 * const domainName = "example.com";
 * const exampleServicev1 = new fastly.Servicev1("exampleServicev1", {
 *     domains: [{
 *         name: domainName,
 *     }],
 *     backends: [{
 *         address: "127.0.0.1",
 *         name: "localhost",
 *     }],
 *     forceDestroy: true,
 * });
 * const exampleTlsSubscription = new fastly.TlsSubscription("exampleTlsSubscription", {
 *     domains: exampleServicev1.domains.apply(domains => domains.map(domain => domain.name)),
 *     certificateAuthority: "lets-encrypt",
 * });
 * const demo = aws.route53.getZone({
 *     name: domainName,
 *     privateZone: false,
 * });
 * // Set up DNS record for managed DNS domain validation method
 * const domainValidation = new aws.route53.Record("domainValidation", {
 *     name: exampleTlsSubscription.managedDnsChallenge.recordName,
 *     type: exampleTlsSubscription.managedDnsChallenge.recordType,
 *     zoneId: demo.then(demo => demo.id),
 *     allowOverwrite: true,
 *     records: [exampleTlsSubscription.managedDnsChallenge.recordValue],
 *     ttl: 60,
 * });
 * // Resource that other resources can depend on if they require the certificate to be issued
 * const exampleTlsSubscriptionValidation = new fastly.TlsSubscriptionValidation("exampleTlsSubscriptionValidation", {subscriptionId: exampleTlsSubscription.id}, {
 *     dependsOn: [domainValidation],
 * });
 * ```
 */
export class TlsSubscriptionValidation extends pulumi.CustomResource {
    /**
     * Get an existing TlsSubscriptionValidation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsSubscriptionValidationState, opts?: pulumi.CustomResourceOptions): TlsSubscriptionValidation {
        return new TlsSubscriptionValidation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/tlsSubscriptionValidation:TlsSubscriptionValidation';

    /**
     * Returns true if the given object is an instance of TlsSubscriptionValidation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsSubscriptionValidation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsSubscriptionValidation.__pulumiType;
    }

    /**
     * The ID of the TLS Subscription that should be validated.
     */
    public readonly subscriptionId!: pulumi.Output<string>;

    /**
     * Create a TlsSubscriptionValidation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsSubscriptionValidationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsSubscriptionValidationArgs | TlsSubscriptionValidationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsSubscriptionValidationState | undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
        } else {
            const args = argsOrState as TlsSubscriptionValidationArgs | undefined;
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TlsSubscriptionValidation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsSubscriptionValidation resources.
 */
export interface TlsSubscriptionValidationState {
    /**
     * The ID of the TLS Subscription that should be validated.
     */
    subscriptionId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TlsSubscriptionValidation resource.
 */
export interface TlsSubscriptionValidationArgs {
    /**
     * The ID of the TLS Subscription that should be validated.
     */
    subscriptionId: pulumi.Input<string>;
}
