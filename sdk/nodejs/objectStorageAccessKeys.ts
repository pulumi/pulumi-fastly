// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides an Object Storage Access Key, which can be used to manage resources in various clouds.
 *
 * Implements the [Object Storage Access Key API functions](https://www.fastly.com/documentation/reference/api/services/resources/object-storage-access-keys/)
 *
 * > **Note:** Access Keys cannot be updated, so when you change a value in any of the editable fields the key is destroyed and remade
 *
 * Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const demo = new fastly.ObjectStorageAccessKeys("demo", {
 *     buckets: [
 *         "bucket1",
 *         "bucket2",
 *     ],
 *     description: "this is a bucket",
 *     permission: "",
 * });
 * ```
 * > **Note:** Permissions can only be one of these values listed [here](https://quic.fastly.com/documentation/reference/api/services/resources/object-storage-access-keys/#permissions), any other values will return an error
 */
export class ObjectStorageAccessKeys extends pulumi.CustomResource {
    /**
     * Get an existing ObjectStorageAccessKeys resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ObjectStorageAccessKeysState, opts?: pulumi.CustomResourceOptions): ObjectStorageAccessKeys {
        return new ObjectStorageAccessKeys(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/objectStorageAccessKeys:ObjectStorageAccessKeys';

    /**
     * Returns true if the given object is an instance of ObjectStorageAccessKeys.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ObjectStorageAccessKeys {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ObjectStorageAccessKeys.__pulumiType;
    }

    /**
     * ID for the object storage access token
     */
    public /*out*/ readonly accessKeyId!: pulumi.Output<string>;
    /**
     * Optional list of buckets the access key will be associated with.  Example: `["bucket1", "bucket2"]`
     */
    public readonly buckets!: pulumi.Output<string[] | undefined>;
    /**
     * The description of the access key
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The permissions of the access key
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * Secret key for the object storage access token
     */
    public /*out*/ readonly secretKey!: pulumi.Output<string>;

    /**
     * Create a ObjectStorageAccessKeys resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ObjectStorageAccessKeysArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ObjectStorageAccessKeysArgs | ObjectStorageAccessKeysState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ObjectStorageAccessKeysState | undefined;
            resourceInputs["accessKeyId"] = state ? state.accessKeyId : undefined;
            resourceInputs["buckets"] = state ? state.buckets : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
        } else {
            const args = argsOrState as ObjectStorageAccessKeysArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            resourceInputs["buckets"] = args ? args.buckets : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["accessKeyId"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ObjectStorageAccessKeys.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ObjectStorageAccessKeys resources.
 */
export interface ObjectStorageAccessKeysState {
    /**
     * ID for the object storage access token
     */
    accessKeyId?: pulumi.Input<string>;
    /**
     * Optional list of buckets the access key will be associated with.  Example: `["bucket1", "bucket2"]`
     */
    buckets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the access key
     */
    description?: pulumi.Input<string>;
    /**
     * The permissions of the access key
     */
    permission?: pulumi.Input<string>;
    /**
     * Secret key for the object storage access token
     */
    secretKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ObjectStorageAccessKeys resource.
 */
export interface ObjectStorageAccessKeysArgs {
    /**
     * Optional list of buckets the access key will be associated with.  Example: `["bucket1", "bucket2"]`
     */
    buckets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the access key
     */
    description: pulumi.Input<string>;
    /**
     * The permissions of the access key
     */
    permission: pulumi.Input<string>;
}
