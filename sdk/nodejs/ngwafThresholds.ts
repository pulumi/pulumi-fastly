// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Fastly Next-Gen WAF Threshold.  Operations related to managing workspace thresholds.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const demo = new fastly.NgwafThresholds("demo", {
 *     action: "block",
 *     dontNotify: false,
 *     duration: 86400,
 *     enabled: true,
 *     interval: 3600,
 *     limit: 10,
 *     name: "%s",
 *     signal: "SQLI",
 *     workspaceId: example.id,
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF Thresholds can be imported using their workspace and Threshold ID, e.g.
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafThresholds:NgwafThresholds example <workspace_id>/<threshold_id>
 * ```
 */
export class NgwafThresholds extends pulumi.CustomResource {
    /**
     * Get an existing NgwafThresholds resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafThresholdsState, opts?: pulumi.CustomResourceOptions): NgwafThresholds {
        return new NgwafThresholds(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafThresholds:NgwafThresholds';

    /**
     * Returns true if the given object is an instance of NgwafThresholds.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafThresholds {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafThresholds.__pulumiType;
    }

    /**
     * Action to take when threshold is exceeded.
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * Whether to silence notifications when action is taken.
     */
    declare public readonly dontNotify: pulumi.Output<boolean>;
    /**
     * Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
     */
    declare public readonly duration: pulumi.Output<number>;
    /**
     * Whether this threshold is active.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
     */
    declare public readonly interval: pulumi.Output<number>;
    /**
     * Threshold limit. Minimum 1 and maximum 10,000.
     */
    declare public readonly limit: pulumi.Output<number>;
    /**
     * The name of the threshold.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The name of the signal this threshold is acting on.
     */
    declare public readonly signal: pulumi.Output<string>;
    /**
     * The ID of the workspace.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a NgwafThresholds resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafThresholdsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafThresholdsArgs | NgwafThresholdsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafThresholdsState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["dontNotify"] = state?.dontNotify;
            resourceInputs["duration"] = state?.duration;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["interval"] = state?.interval;
            resourceInputs["limit"] = state?.limit;
            resourceInputs["name"] = state?.name;
            resourceInputs["signal"] = state?.signal;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as NgwafThresholdsArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.dontNotify === undefined && !opts.urn) {
                throw new Error("Missing required property 'dontNotify'");
            }
            if (args?.duration === undefined && !opts.urn) {
                throw new Error("Missing required property 'duration'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.interval === undefined && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if (args?.limit === undefined && !opts.urn) {
                throw new Error("Missing required property 'limit'");
            }
            if (args?.signal === undefined && !opts.urn) {
                throw new Error("Missing required property 'signal'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["dontNotify"] = args?.dontNotify;
            resourceInputs["duration"] = args?.duration;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["interval"] = args?.interval;
            resourceInputs["limit"] = args?.limit;
            resourceInputs["name"] = args?.name;
            resourceInputs["signal"] = args?.signal;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgwafThresholds.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafThresholds resources.
 */
export interface NgwafThresholdsState {
    /**
     * Action to take when threshold is exceeded.
     */
    action?: pulumi.Input<string>;
    /**
     * Whether to silence notifications when action is taken.
     */
    dontNotify?: pulumi.Input<boolean>;
    /**
     * Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
     */
    duration?: pulumi.Input<number>;
    /**
     * Whether this threshold is active.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
     */
    interval?: pulumi.Input<number>;
    /**
     * Threshold limit. Minimum 1 and maximum 10,000.
     */
    limit?: pulumi.Input<number>;
    /**
     * The name of the threshold.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the signal this threshold is acting on.
     */
    signal?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafThresholds resource.
 */
export interface NgwafThresholdsArgs {
    /**
     * Action to take when threshold is exceeded.
     */
    action: pulumi.Input<string>;
    /**
     * Whether to silence notifications when action is taken.
     */
    dontNotify: pulumi.Input<boolean>;
    /**
     * Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
     */
    duration: pulumi.Input<number>;
    /**
     * Whether this threshold is active.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
     */
    interval: pulumi.Input<number>;
    /**
     * Threshold limit. Minimum 1 and maximum 10,000.
     */
    limit: pulumi.Input<number>;
    /**
     * The name of the threshold.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the signal this threshold is acting on.
     */
    signal: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId: pulumi.Input<string>;
}
