// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * // IMPORTANT: Deleting a KV Store requires first deleting its resource_link.
 * // This requires a two-step `pulumi up` as we can't guarantee deletion order.
 * // e.g. resource_link deletion within fastly_service_compute might not finish first.
 * const exampleKvstore = new fastly.Kvstore("example", {name: "my_kv_store"});
 * const example = fastly.getPackageHash({
 *     filename: "package.tar.gz",
 * });
 * const exampleServiceCompute = new fastly.ServiceCompute("example", {
 *     name: "my_compute_service",
 *     domains: [{
 *         name: "demo.example.com",
 *     }],
 *     "package": {
 *         filename: "package.tar.gz",
 *         sourceCodeHash: example.then(example => example.hash),
 *     },
 *     resourceLinks: [{
 *         name: "my_resource_link",
 *         resourceId: exampleKvstore.id,
 *     }],
 *     forceDestroy: true,
 * });
 * ```
 *
 * ## Import
 *
 * Fastly KV Stores can be imported using their Store ID, e.g.
 *
 * ```sh
 * $ pulumi import fastly:index/kvstore:Kvstore example xxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class Kvstore extends pulumi.CustomResource {
    /**
     * Get an existing Kvstore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KvstoreState, opts?: pulumi.CustomResourceOptions): Kvstore {
        return new Kvstore(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/kvstore:Kvstore';

    /**
     * Returns true if the given object is an instance of Kvstore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Kvstore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Kvstore.__pulumiType;
    }

    /**
     * Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
     */
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    /**
     * The regional location of the KV Store. Valid values are `US`, `EU`, `ASIA`, and `AUS`.
     */
    declare public readonly location: pulumi.Output<string | undefined>;
    /**
     * A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a Kvstore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KvstoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KvstoreArgs | KvstoreState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KvstoreState | undefined;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["location"] = state?.location;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as KvstoreArgs | undefined;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["location"] = args?.location;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Kvstore.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Kvstore resources.
 */
export interface KvstoreState {
    /**
     * Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The regional location of the KV Store. Valid values are `US`, `EU`, `ASIA`, and `AUS`.
     */
    location?: pulumi.Input<string>;
    /**
     * A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Kvstore resource.
 */
export interface KvstoreArgs {
    /**
     * Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * The regional location of the KV Store. Valid values are `US`, `EU`, `ASIA`, and `AUS`.
     */
    location?: pulumi.Input<string>;
    /**
     * A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
     */
    name?: pulumi.Input<string>;
}
