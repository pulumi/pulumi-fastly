// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Defines content that represents blocks of VCL logic that is inserted into your service.  This resource will populate the content of a dynamic snippet and allow it to be manged without the creation of a new service verison.
 *
 * > **Warning:** This provider will take precedence over any changes you make through the API. Such changes are likely to be reversed if you run the provider again.
 *
 * If this provider is being used to populate the initial content of a dynamic snippet which you intend to manage via the API, then the lifecycle `ignoreChanges` field can be used with the resource.  An example of this configuration is provided below.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * This is an example of the import command being applied to the resource named `fastly_service_dynamic_snippet_content_v1.content` The resource ID is a combined value of the `service_id` and `snippet_id` separated by a forward slash.
 *
 * ```sh
 *  $ pulumi import fastly:index/serviceDynamicSnippetContentv1:ServiceDynamicSnippetContentv1 content xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class ServiceDynamicSnippetContentv1 extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDynamicSnippetContentv1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDynamicSnippetContentv1State, opts?: pulumi.CustomResourceOptions): ServiceDynamicSnippetContentv1 {
        return new ServiceDynamicSnippetContentv1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceDynamicSnippetContentv1:ServiceDynamicSnippetContentv1';

    /**
     * Returns true if the given object is an instance of ServiceDynamicSnippetContentv1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDynamicSnippetContentv1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDynamicSnippetContentv1.__pulumiType;
    }

    /**
     * The VCL code that specifies exactly what the snippet does
     */
    public readonly content!: pulumi.Output<string>;
    /**
     * The ID of the service that the dynamic snippet belongs to
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * The ID of the dynamic snippet that the content belong to
     */
    public readonly snippetId!: pulumi.Output<string>;

    /**
     * Create a ServiceDynamicSnippetContentv1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDynamicSnippetContentv1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDynamicSnippetContentv1Args | ServiceDynamicSnippetContentv1State, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceDynamicSnippetContentv1State | undefined;
            resourceInputs["content"] = state ? state.content : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["snippetId"] = state ? state.snippetId : undefined;
        } else {
            const args = argsOrState as ServiceDynamicSnippetContentv1Args | undefined;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if ((!args || args.snippetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snippetId'");
            }
            resourceInputs["content"] = args ? args.content : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["snippetId"] = args ? args.snippetId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceDynamicSnippetContentv1.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDynamicSnippetContentv1 resources.
 */
export interface ServiceDynamicSnippetContentv1State {
    /**
     * The VCL code that specifies exactly what the snippet does
     */
    content?: pulumi.Input<string>;
    /**
     * The ID of the service that the dynamic snippet belongs to
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The ID of the dynamic snippet that the content belong to
     */
    snippetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceDynamicSnippetContentv1 resource.
 */
export interface ServiceDynamicSnippetContentv1Args {
    /**
     * The VCL code that specifies exactly what the snippet does
     */
    content: pulumi.Input<string>;
    /**
     * The ID of the service that the dynamic snippet belongs to
     */
    serviceId: pulumi.Input<string>;
    /**
     * The ID of the dynamic snippet that the content belong to
     */
    snippetId: pulumi.Input<string>;
}
