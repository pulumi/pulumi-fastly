// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Defines a map of Fastly dictionary items that can be used to populate a service dictionary.  This resource will populate a dictionary with the items and will track their state.
 *
 * > **Warning:** This provider will take precedence over any changes you make in the UI or API. Such changes are likely to be reversed if you run the provider again.
 *
 * If this provider is being used to populate the initial content of a dictionary which you intend to manage via API or UI, then the lifecycle `ignoreChanges` field can be used with the resource.  An example of this configuration is provided below.
 *
 * ## Limitations
 *
 * - `writeOnly` dictionaries are not supported
 *
 * ## Example Usage
 * ### Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const config = new pulumi.Config();
 * const mydictName = config.get("mydictName") || "My Dictionary";
 * const myservice = new fastly.Servicev1("myservice", {
 *     domains: [{
 *         name: "demo.notexample.com",
 *         comment: "demo",
 *     }],
 *     backends: [{
 *         address: "demo.notexample.com.s3-website-us-west-2.amazonaws.com",
 *         name: "AWS S3 hosting",
 *         port: 80,
 *     }],
 *     dictionaries: [{
 *         name: mydictName,
 *     }],
 *     forceDestroy: true,
 * });
 * const items: fastly.ServiceDictionaryItemsv1[];
 * for (const range of Object.entries(myservice.dictionaries.apply(dictionaries => dictionaries.filter(d => d.name == mydictName).reduce((__obj, d) => { ...__obj, [d.name]: d }))).map(([k, v]) => {key: k, value: v})) {
 *     items.push(new fastly.ServiceDictionaryItemsv1(`items-${range.key}`, {
 *         serviceId: myservice.id,
 *         dictionaryId: range.value.dictionaryId,
 *         items: {
 *             key1: "value1",
 *             key2: "value2",
 *         },
 *     }));
 * }
 * ```
 * ### Complex object usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const config = new pulumi.Config();
 * const mydict = config.getObject("mydict") || {
 *     name: "My Dictionary",
 *     items: {
 *         key1: "value1x",
 *         key2: "value2x",
 *     },
 * };
 * const myservice = new fastly.Servicev1("myservice", {
 *     domains: [{
 *         name: "demo.notexample.com",
 *         comment: "demo",
 *     }],
 *     backends: [{
 *         address: "demo.notexample.com.s3-website-us-west-2.amazonaws.com",
 *         name: "AWS S3 hosting",
 *         port: 80,
 *     }],
 *     dictionaries: [{
 *         name: mydict.name,
 *     }],
 *     forceDestroy: true,
 * });
 * const items: fastly.ServiceDictionaryItemsv1[];
 * for (const range of Object.entries(myservice.dictionaries.apply(dictionaries => dictionaries.filter(d => d.name == mydict.name).reduce((__obj, d) => { ...__obj, [d.name]: d }))).map(([k, v]) => {key: k, value: v})) {
 *     items.push(new fastly.ServiceDictionaryItemsv1(`items-${range.key}`, {
 *         serviceId: myservice.id,
 *         dictionaryId: range.value.dictionaryId,
 *         items: mydict.items,
 *     }));
 * }
 * ```
 *
 * ## Import
 *
 * This is an example of the import command being applied to the resource named `fastly_service_dictionary_items_v1.items` The resource ID is a combined value of the `service_id` and `dictionary_id` separated by a forward slash.
 *
 * ```sh
 *  $ pulumi import fastly:index/serviceDictionaryItemsv1:ServiceDictionaryItemsv1 items xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class ServiceDictionaryItemsv1 extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDictionaryItemsv1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDictionaryItemsv1State, opts?: pulumi.CustomResourceOptions): ServiceDictionaryItemsv1 {
        return new ServiceDictionaryItemsv1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceDictionaryItemsv1:ServiceDictionaryItemsv1';

    /**
     * Returns true if the given object is an instance of ServiceDictionaryItemsv1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDictionaryItemsv1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDictionaryItemsv1.__pulumiType;
    }

    /**
     * The ID of the dictionary that the items belong to
     */
    public readonly dictionaryId!: pulumi.Output<string>;
    /**
     * A map representing an entry in the dictionary, (key/value)
     */
    public readonly items!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The ID of the service that the dictionary belongs to
     */
    public readonly serviceId!: pulumi.Output<string>;

    /**
     * Create a ServiceDictionaryItemsv1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDictionaryItemsv1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDictionaryItemsv1Args | ServiceDictionaryItemsv1State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceDictionaryItemsv1State | undefined;
            inputs["dictionaryId"] = state ? state.dictionaryId : undefined;
            inputs["items"] = state ? state.items : undefined;
            inputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as ServiceDictionaryItemsv1Args | undefined;
            if ((!args || args.dictionaryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dictionaryId'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            inputs["dictionaryId"] = args ? args.dictionaryId : undefined;
            inputs["items"] = args ? args.items : undefined;
            inputs["serviceId"] = args ? args.serviceId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ServiceDictionaryItemsv1.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDictionaryItemsv1 resources.
 */
export interface ServiceDictionaryItemsv1State {
    /**
     * The ID of the dictionary that the items belong to
     */
    dictionaryId?: pulumi.Input<string>;
    /**
     * A map representing an entry in the dictionary, (key/value)
     */
    items?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the service that the dictionary belongs to
     */
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceDictionaryItemsv1 resource.
 */
export interface ServiceDictionaryItemsv1Args {
    /**
     * The ID of the dictionary that the items belong to
     */
    dictionaryId: pulumi.Input<string>;
    /**
     * A map representing an entry in the dictionary, (key/value)
     */
    items?: pulumi.Input<{[key: string]: any}>;
    /**
     * The ID of the service that the dictionary belongs to
     */
    serviceId: pulumi.Input<string>;
}
