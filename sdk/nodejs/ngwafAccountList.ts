// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Fastly Next-Gen WAF **List** resource scoped to an **account**.
 *
 * Account-scoped lists are reusable across all workspaces in the account and can be referenced in account-level or workspace-level rules.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const example = new fastly.NgwafAccountList("example", {
 *     name: "shared-bot-ip-list",
 *     description: "List of known bot IPs shared across workspaces",
 *     type: "ip",
 *     entries: [
 *         "1.2.3.4",
 *         "5.6.7.8",
 *         "203.0.113.42",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF account-scoped lists can be imported using just the list ID, e.g.:
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafAccountList:NgwafAccountList demo <listID>
 * ```
 */
export class NgwafAccountList extends pulumi.CustomResource {
    /**
     * Get an existing NgwafAccountList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafAccountListState, opts?: pulumi.CustomResourceOptions): NgwafAccountList {
        return new NgwafAccountList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafAccountList:NgwafAccountList';

    /**
     * Returns true if the given object is an instance of NgwafAccountList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafAccountList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafAccountList.__pulumiType;
    }

    /**
     * INTERNAL: Used to build scope for account-scoped lists. Not user-configurable.
     */
    declare public /*out*/ readonly appliesTos: pulumi.Output<string[]>;
    /**
     * The description of the list.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The values in the list.
     */
    declare public readonly entries: pulumi.Output<string[]>;
    /**
     * The name of the list.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a NgwafAccountList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafAccountListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafAccountListArgs | NgwafAccountListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafAccountListState | undefined;
            resourceInputs["appliesTos"] = state?.appliesTos;
            resourceInputs["description"] = state?.description;
            resourceInputs["entries"] = state?.entries;
            resourceInputs["name"] = state?.name;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as NgwafAccountListArgs | undefined;
            if (args?.entries === undefined && !opts.urn) {
                throw new Error("Missing required property 'entries'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["entries"] = args?.entries;
            resourceInputs["name"] = args?.name;
            resourceInputs["type"] = args?.type;
            resourceInputs["appliesTos"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["appliesTos"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NgwafAccountList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafAccountList resources.
 */
export interface NgwafAccountListState {
    /**
     * INTERNAL: Used to build scope for account-scoped lists. Not user-configurable.
     */
    appliesTos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the list.
     */
    description?: pulumi.Input<string>;
    /**
     * The values in the list.
     */
    entries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the list.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafAccountList resource.
 */
export interface NgwafAccountListArgs {
    /**
     * The description of the list.
     */
    description?: pulumi.Input<string>;
    /**
     * The values in the list.
     */
    entries: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the list.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
     */
    type: pulumi.Input<string>;
}
