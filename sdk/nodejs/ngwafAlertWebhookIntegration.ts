// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides Fastly Next-Gen WAF Alert Webhook integrations, which provide a connection to Webhooks.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const demoWebhookAlert = new fastly.NgwafAlertWebhookIntegration("demo_webhook_alert", {
 *     description: "Some Description",
 *     webhook: "https://example.com/webhooks/my-service",
 *     workspaceId: demo.id,
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF Alert Webhook integrations can be imported using their ID and the ID of the workspace they belong to.
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafAlertWebhookIntegration:NgwafAlertWebhookIntegration example <workspace_id>/<alert_id>
 * ```
 */
export class NgwafAlertWebhookIntegration extends pulumi.CustomResource {
    /**
     * Get an existing NgwafAlertWebhookIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafAlertWebhookIntegrationState, opts?: pulumi.CustomResourceOptions): NgwafAlertWebhookIntegration {
        return new NgwafAlertWebhookIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafAlertWebhookIntegration:NgwafAlertWebhookIntegration';

    /**
     * Returns true if the given object is an instance of NgwafAlertWebhookIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafAlertWebhookIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafAlertWebhookIntegration.__pulumiType;
    }

    /**
     * The description of the alert.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The webhook URL.
     */
    declare public readonly webhook: pulumi.Output<string>;
    /**
     * The ID of the workspace.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a NgwafAlertWebhookIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafAlertWebhookIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafAlertWebhookIntegrationArgs | NgwafAlertWebhookIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafAlertWebhookIntegrationState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["webhook"] = state?.webhook;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as NgwafAlertWebhookIntegrationArgs | undefined;
            if (args?.webhook === undefined && !opts.urn) {
                throw new Error("Missing required property 'webhook'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["webhook"] = args?.webhook ? pulumi.secret(args.webhook) : undefined;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["webhook"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(NgwafAlertWebhookIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafAlertWebhookIntegration resources.
 */
export interface NgwafAlertWebhookIntegrationState {
    /**
     * The description of the alert.
     */
    description?: pulumi.Input<string>;
    /**
     * The webhook URL.
     */
    webhook?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafAlertWebhookIntegration resource.
 */
export interface NgwafAlertWebhookIntegrationArgs {
    /**
     * The description of the alert.
     */
    description?: pulumi.Input<string>;
    /**
     * The webhook URL.
     */
    webhook: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId: pulumi.Input<string>;
}
