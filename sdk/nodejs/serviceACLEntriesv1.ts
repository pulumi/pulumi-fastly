// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Defines a set of Fastly ACL entries that can be used to populate a service ACL.  This resource will populate an ACL with the entries and will track their state.
 *
 * > **Warning:** This provider will take precedence over any changes you make in the UI or API. Such changes are likely to be reversed if you run the provider again.
 *
 * If this provider is being used to populate the initial content of an ACL which you intend to manage via API or UI, then the lifecycle `ignoreChanges` field can be used with the resource.  An example of this configuration is provided below.
 *
 * ## Example Usage
 * ### Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const config = new pulumi.Config();
 * const myaclName = config.get("myaclName") || "My ACL";
 * const myservice = new fastly.Servicev1("myservice", {
 *     domains: [{
 *         name: "demo.notexample.com",
 *         comment: "demo",
 *     }],
 *     backends: [{
 *         address: "demo.notexample.com.s3-website-us-west-2.amazonaws.com",
 *         name: "AWS S3 hosting",
 *         port: 80,
 *     }],
 *     acls: [{
 *         name: myaclName,
 *     }],
 *     forceDestroy: true,
 * });
 * const entries: fastly.ServiceACLEntriesv1[];
 * for (const range of Object.entries(myservice.acls.apply(acls => acls.filter(d => d.name == myaclName).reduce((__obj, d) => { ...__obj, [d.name]: d }))).map(([k, v]) => {key: k, value: v})) {
 *     entries.push(new fastly.ServiceACLEntriesv1(`entries-${range.key}`, {
 *         serviceId: myservice.id,
 *         aclId: range.value.aclId,
 *         entries: [{
 *             ip: "127.0.0.1",
 *             subnet: "24",
 *             negated: false,
 *             comment: "ALC Entry 1",
 *         }],
 *     }));
 * }
 * ```
 * ### Complex object usage:
 *
 * The following example demonstrates the use of dynamic nested blocks to create ACL entries.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const aclName = "my_acl";
 * const aclEntries = [
 *     {
 *         ip: "1.2.3.4",
 *         comment: "acl_entry_1",
 *     },
 *     {
 *         ip: "1.2.3.5",
 *         comment: "acl_entry_2",
 *     },
 *     {
 *         ip: "1.2.3.6",
 *         comment: "acl_entry_3",
 *     },
 * ];
 * const myservice = new fastly.Servicev1("myservice", {
 *     domains: [{
 *         name: "demo.notexample.com",
 *         comment: "demo",
 *     }],
 *     backends: [{
 *         address: "1.2.3.4",
 *         name: "localhost",
 *         port: 80,
 *     }],
 *     acls: [{
 *         name: aclName,
 *     }],
 *     forceDestroy: true,
 * });
 * const entries: fastly.ServiceACLEntriesv1[];
 * for (const range of Object.entries(myservice.acls.apply(acls => acls.filter(d => d.name == aclName).reduce((__obj, d) => { ...__obj, [d.name]: d }))).map(([k, v]) => {key: k, value: v})) {
 *     entries.push(new fastly.ServiceACLEntriesv1(`entries-${range.key}`, {
 *         serviceId: myservice.id,
 *         aclId: range.value.aclId,
 *         dynamic: [{
 *             forEach: aclEntries.map(e => {
 *                 ip: e.ip,
 *                 comment: e.comment,
 *             }),
 *             content: [{
 *                 ip: entry.value.ip,
 *                 subnet: 22,
 *                 comment: entry.value.comment,
 *                 negated: false,
 *             }],
 *         }],
 *     }));
 * }
 * ```
 *
 * ## Import
 *
 * This is an example of the import command being applied to the resource named `fastly_service_acl_entries_v1.entries` The resource ID is a combined value of the `service_id` and `acl_id` separated by a forward slash.
 *
 * ```sh
 *  $ pulumi import fastly:index/serviceACLEntriesv1:ServiceACLEntriesv1 entries xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class ServiceACLEntriesv1 extends pulumi.CustomResource {
    /**
     * Get an existing ServiceACLEntriesv1 resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceACLEntriesv1State, opts?: pulumi.CustomResourceOptions): ServiceACLEntriesv1 {
        return new ServiceACLEntriesv1(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceACLEntriesv1:ServiceACLEntriesv1';

    /**
     * Returns true if the given object is an instance of ServiceACLEntriesv1.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceACLEntriesv1 {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceACLEntriesv1.__pulumiType;
    }

    /**
     * The ID of the ACL that the items belong to
     */
    public readonly aclId!: pulumi.Output<string>;
    /**
     * ACL Entries
     */
    public readonly entries!: pulumi.Output<outputs.ServiceACLEntriesv1Entry[] | undefined>;
    /**
     * The ID of the Service that the ACL belongs to
     */
    public readonly serviceId!: pulumi.Output<string>;

    /**
     * Create a ServiceACLEntriesv1 resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceACLEntriesv1Args, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceACLEntriesv1Args | ServiceACLEntriesv1State, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceACLEntriesv1State | undefined;
            inputs["aclId"] = state ? state.aclId : undefined;
            inputs["entries"] = state ? state.entries : undefined;
            inputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as ServiceACLEntriesv1Args | undefined;
            if ((!args || args.aclId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclId'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            inputs["aclId"] = args ? args.aclId : undefined;
            inputs["entries"] = args ? args.entries : undefined;
            inputs["serviceId"] = args ? args.serviceId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ServiceACLEntriesv1.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceACLEntriesv1 resources.
 */
export interface ServiceACLEntriesv1State {
    /**
     * The ID of the ACL that the items belong to
     */
    readonly aclId?: pulumi.Input<string>;
    /**
     * ACL Entries
     */
    readonly entries?: pulumi.Input<pulumi.Input<inputs.ServiceACLEntriesv1Entry>[]>;
    /**
     * The ID of the Service that the ACL belongs to
     */
    readonly serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceACLEntriesv1 resource.
 */
export interface ServiceACLEntriesv1Args {
    /**
     * The ID of the ACL that the items belong to
     */
    readonly aclId: pulumi.Input<string>;
    /**
     * ACL Entries
     */
    readonly entries?: pulumi.Input<pulumi.Input<inputs.ServiceACLEntriesv1Entry>[]>;
    /**
     * The ID of the Service that the ACL belongs to
     */
    readonly serviceId: pulumi.Input<string>;
}
