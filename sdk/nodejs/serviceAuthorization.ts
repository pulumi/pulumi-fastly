// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Configures authorization with granular permissions to services. Users can be granted rights for services on different levels.
 *
 * The Service Authorization resource requires a user id, service id and an optional permission.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const demo = new fastly.ServiceVcl("demo", {});
 * //...
 * const user = new fastly.User("user", {});
 * // ...
 * const auth = new fastly.ServiceAuthorization("auth", {
 *     serviceId: demo.id,
 *     userId: user.id,
 *     permission: "purge_all",
 * });
 * ```
 *
 * ## Import
 *
 * A Fastly Service Authorization can be imported using their user ID, e.g.
 *
 * ```sh
 *  $ pulumi import fastly:index/serviceAuthorization:ServiceAuthorization demo xxxxxxxxxxxxxxxxxxxx
 * ```
 */
export class ServiceAuthorization extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAuthorization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAuthorizationState, opts?: pulumi.CustomResourceOptions): ServiceAuthorization {
        return new ServiceAuthorization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceAuthorization:ServiceAuthorization';

    /**
     * Returns true if the given object is an instance of ServiceAuthorization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAuthorization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAuthorization.__pulumiType;
    }

    /**
     * The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
     */
    public readonly permission!: pulumi.Output<string>;
    /**
     * The ID of the service to grant permissions for.
     */
    public readonly serviceId!: pulumi.Output<string>;
    /**
     * The ID of the user which will receive the granted permissions.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a ServiceAuthorization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAuthorizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAuthorizationArgs | ServiceAuthorizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAuthorizationState | undefined;
            resourceInputs["permission"] = state ? state.permission : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ServiceAuthorizationArgs | undefined;
            if ((!args || args.permission === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            resourceInputs["permission"] = args ? args.permission : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceAuthorization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceAuthorization resources.
 */
export interface ServiceAuthorizationState {
    /**
     * The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
     */
    permission?: pulumi.Input<string>;
    /**
     * The ID of the service to grant permissions for.
     */
    serviceId?: pulumi.Input<string>;
    /**
     * The ID of the user which will receive the granted permissions.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceAuthorization resource.
 */
export interface ServiceAuthorizationArgs {
    /**
     * The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
     */
    permission: pulumi.Input<string>;
    /**
     * The ID of the service to grant permissions for.
     */
    serviceId: pulumi.Input<string>;
    /**
     * The ID of the user which will receive the granted permissions.
     */
    userId: pulumi.Input<string>;
}
