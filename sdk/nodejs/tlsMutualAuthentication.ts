// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TlsMutualAuthentication extends pulumi.CustomResource {
    /**
     * Get an existing TlsMutualAuthentication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsMutualAuthenticationState, opts?: pulumi.CustomResourceOptions): TlsMutualAuthentication {
        return new TlsMutualAuthentication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/tlsMutualAuthentication:TlsMutualAuthentication';

    /**
     * Returns true if the given object is an instance of TlsMutualAuthentication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsMutualAuthentication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsMutualAuthentication.__pulumiType;
    }

    /**
     * One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
     */
    public readonly certBundle!: pulumi.Output<string>;
    /**
     * Date and time in ISO 8601 format.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
     */
    public readonly enforced!: pulumi.Output<boolean>;
    /**
     * Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
     */
    public readonly include!: pulumi.Output<string | undefined>;
    /**
     * A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * List of alphanumeric strings identifying TLS activations.
     */
    public /*out*/ readonly tlsActivations!: pulumi.Output<string[]>;
    /**
     * Date and time in ISO 8601 format.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a TlsMutualAuthentication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsMutualAuthenticationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsMutualAuthenticationArgs | TlsMutualAuthenticationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsMutualAuthenticationState | undefined;
            resourceInputs["certBundle"] = state ? state.certBundle : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["enforced"] = state ? state.enforced : undefined;
            resourceInputs["include"] = state ? state.include : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["tlsActivations"] = state ? state.tlsActivations : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as TlsMutualAuthenticationArgs | undefined;
            if ((!args || args.certBundle === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certBundle'");
            }
            resourceInputs["certBundle"] = args ? args.certBundle : undefined;
            resourceInputs["enforced"] = args ? args.enforced : undefined;
            resourceInputs["include"] = args ? args.include : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["tlsActivations"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TlsMutualAuthentication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsMutualAuthentication resources.
 */
export interface TlsMutualAuthenticationState {
    /**
     * One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
     */
    certBundle?: pulumi.Input<string>;
    /**
     * Date and time in ISO 8601 format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
     */
    include?: pulumi.Input<string>;
    /**
     * A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
     */
    name?: pulumi.Input<string>;
    /**
     * List of alphanumeric strings identifying TLS activations.
     */
    tlsActivations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Date and time in ISO 8601 format.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TlsMutualAuthentication resource.
 */
export interface TlsMutualAuthenticationArgs {
    /**
     * One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
     */
    certBundle: pulumi.Input<string>;
    /**
     * Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
     */
    enforced?: pulumi.Input<boolean>;
    /**
     * Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
     */
    include?: pulumi.Input<string>;
    /**
     * A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
     */
    name?: pulumi.Input<string>;
}
