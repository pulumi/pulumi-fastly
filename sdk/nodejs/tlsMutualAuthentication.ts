// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The Mutual TLS API allows for client-to-server authentication using client-side X.509 authentication.
 *
 * The main Mutual Authentication object represents the certificate bundle and other configurations which support Mutual TLS for your domains.
 *
 * Mutual TLS can be added to existing TLS activations to allow for client-to-server authentication. In order to use mutual TLS, you must already have active server-side TLS using either custom certificates or an enabled Fastly-managed subscription.
 *
 * The examples below demonstrate how to use Mutual Authentication along with a TLS Subscription. Refer to the `fastly.TlsSubscription` resource documentation for a deeper explanation of that code.
 */
export class TlsMutualAuthentication extends pulumi.CustomResource {
    /**
     * Get an existing TlsMutualAuthentication resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsMutualAuthenticationState, opts?: pulumi.CustomResourceOptions): TlsMutualAuthentication {
        return new TlsMutualAuthentication(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/tlsMutualAuthentication:TlsMutualAuthentication';

    /**
     * Returns true if the given object is an instance of TlsMutualAuthentication.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsMutualAuthentication {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsMutualAuthentication.__pulumiType;
    }

    /**
     * List of TLS Activation IDs
     */
    declare public readonly activationIds: pulumi.Output<string[] | undefined>;
    /**
     * One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
     */
    declare public readonly certBundle: pulumi.Output<string>;
    /**
     * Date and time in ISO 8601 format.
     */
    declare public /*out*/ readonly createdAt: pulumi.Output<string>;
    /**
     * Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
     */
    declare public readonly enforced: pulumi.Output<boolean>;
    declare public readonly include: pulumi.Output<string | undefined>;
    /**
     * A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * List of alphanumeric strings identifying TLS activations.
     */
    declare public /*out*/ readonly tlsActivations: pulumi.Output<string[]>;
    /**
     * Date and time in ISO 8601 format.
     */
    declare public /*out*/ readonly updatedAt: pulumi.Output<string>;

    /**
     * Create a TlsMutualAuthentication resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsMutualAuthenticationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsMutualAuthenticationArgs | TlsMutualAuthenticationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsMutualAuthenticationState | undefined;
            resourceInputs["activationIds"] = state?.activationIds;
            resourceInputs["certBundle"] = state?.certBundle;
            resourceInputs["createdAt"] = state?.createdAt;
            resourceInputs["enforced"] = state?.enforced;
            resourceInputs["include"] = state?.include;
            resourceInputs["name"] = state?.name;
            resourceInputs["tlsActivations"] = state?.tlsActivations;
            resourceInputs["updatedAt"] = state?.updatedAt;
        } else {
            const args = argsOrState as TlsMutualAuthenticationArgs | undefined;
            if (args?.certBundle === undefined && !opts.urn) {
                throw new Error("Missing required property 'certBundle'");
            }
            resourceInputs["activationIds"] = args?.activationIds;
            resourceInputs["certBundle"] = args?.certBundle;
            resourceInputs["enforced"] = args?.enforced;
            resourceInputs["include"] = args?.include;
            resourceInputs["name"] = args?.name;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["tlsActivations"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TlsMutualAuthentication.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsMutualAuthentication resources.
 */
export interface TlsMutualAuthenticationState {
    /**
     * List of TLS Activation IDs
     */
    activationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
     */
    certBundle?: pulumi.Input<string>;
    /**
     * Date and time in ISO 8601 format.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
     */
    enforced?: pulumi.Input<boolean>;
    include?: pulumi.Input<string>;
    /**
     * A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
     */
    name?: pulumi.Input<string>;
    /**
     * List of alphanumeric strings identifying TLS activations.
     */
    tlsActivations?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Date and time in ISO 8601 format.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TlsMutualAuthentication resource.
 */
export interface TlsMutualAuthenticationArgs {
    /**
     * List of TLS Activation IDs
     */
    activationIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
     */
    certBundle: pulumi.Input<string>;
    /**
     * Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
     */
    enforced?: pulumi.Input<boolean>;
    include?: pulumi.Input<string>;
    /**
     * A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
     */
    name?: pulumi.Input<string>;
}
