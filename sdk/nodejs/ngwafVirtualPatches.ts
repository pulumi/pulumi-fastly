// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Fastly Next-Gen WAF Virtual Patch.  Virtual patching
 * rules block or log requests matching specific vulnerabilities.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const demo = new fastly.index.NgwafVirtualPatch("demo", {
 *     action: "block",
 *     enabled: true,
 *     virtualPatchId: "CVE-2017-5638",
 *     workspaceId: demoFastlyNgwafWorkspace.id,
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF Virtual Patches can be imported using their workspace and Virtual Patch ID, e.g.
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafVirtualPatches:NgwafVirtualPatches demo <workspace_id>/<virtual_patch_id>
 * ```
 */
export class NgwafVirtualPatches extends pulumi.CustomResource {
    /**
     * Get an existing NgwafVirtualPatches resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafVirtualPatchesState, opts?: pulumi.CustomResourceOptions): NgwafVirtualPatches {
        return new NgwafVirtualPatches(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafVirtualPatches:NgwafVirtualPatches';

    /**
     * Returns true if the given object is an instance of NgwafVirtualPatches.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafVirtualPatches {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafVirtualPatches.__pulumiType;
    }

    /**
     * Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
     */
    declare public readonly action: pulumi.Output<string>;
    /**
     * Control for enabling and disabling a virtual patch.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * The ID of the virtual patch.
     */
    declare public readonly virtualPatchId: pulumi.Output<string>;
    /**
     * The ID of the workspace.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a NgwafVirtualPatches resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafVirtualPatchesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafVirtualPatchesArgs | NgwafVirtualPatchesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafVirtualPatchesState | undefined;
            resourceInputs["action"] = state?.action;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["virtualPatchId"] = state?.virtualPatchId;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as NgwafVirtualPatchesArgs | undefined;
            if (args?.action === undefined && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.virtualPatchId === undefined && !opts.urn) {
                throw new Error("Missing required property 'virtualPatchId'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["action"] = args?.action;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["virtualPatchId"] = args?.virtualPatchId;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgwafVirtualPatches.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafVirtualPatches resources.
 */
export interface NgwafVirtualPatchesState {
    /**
     * Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
     */
    action?: pulumi.Input<string>;
    /**
     * Control for enabling and disabling a virtual patch.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of the virtual patch.
     */
    virtualPatchId?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafVirtualPatches resource.
 */
export interface NgwafVirtualPatchesArgs {
    /**
     * Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
     */
    action: pulumi.Input<string>;
    /**
     * Control for enabling and disabling a virtual patch.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The ID of the virtual patch.
     */
    virtualPatchId: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId: pulumi.Input<string>;
}
