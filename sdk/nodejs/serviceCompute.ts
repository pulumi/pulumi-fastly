// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * Fastly Services can be imported using their service ID, e.g.
 *
 * ```sh
 *  $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx
 * ```
 *
 *  By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
 *
 * ```sh
 *  $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx@2
 * ```
 */
export class ServiceCompute extends pulumi.CustomResource {
    /**
     * Get an existing ServiceCompute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceComputeState, opts?: pulumi.CustomResourceOptions): ServiceCompute {
        return new ServiceCompute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceCompute:ServiceCompute';

    /**
     * Returns true if the given object is an instance of ServiceCompute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceCompute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceCompute.__pulumiType;
    }

    /**
     * Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     */
    public readonly activate!: pulumi.Output<boolean | undefined>;
    /**
     * The currently active version of your Fastly Service
     */
    public /*out*/ readonly activeVersion!: pulumi.Output<number>;
    public readonly backends!: pulumi.Output<outputs.ServiceComputeBackend[]>;
    /**
     * The latest cloned version by the provider
     */
    public /*out*/ readonly clonedVersion!: pulumi.Output<number>;
    /**
     * Description field for the service. Default `Managed by Terraform`
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * The default hostname
     */
    public readonly defaultHost!: pulumi.Output<string | undefined>;
    /**
     * The default Time-to-live (TTL) for requests
     */
    public readonly defaultTtl!: pulumi.Output<number | undefined>;
    public readonly dictionaries!: pulumi.Output<outputs.ServiceComputeDictionary[] | undefined>;
    public readonly directors!: pulumi.Output<outputs.ServiceComputeDirector[] | undefined>;
    /**
     * A set of Domain names to serve as entry points for your Service
     */
    public readonly domains!: pulumi.Output<outputs.ServiceComputeDomain[]>;
    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
     */
    public readonly forceDestroy!: pulumi.Output<boolean | undefined>;
    public readonly healthchecks!: pulumi.Output<outputs.ServiceComputeHealthcheck[] | undefined>;
    public readonly loggingBigqueries!: pulumi.Output<outputs.ServiceComputeLoggingBigquery[] | undefined>;
    public readonly loggingBlobstorages!: pulumi.Output<outputs.ServiceComputeLoggingBlobstorage[] | undefined>;
    public readonly loggingCloudfiles!: pulumi.Output<outputs.ServiceComputeLoggingCloudfile[] | undefined>;
    public readonly loggingDatadogs!: pulumi.Output<outputs.ServiceComputeLoggingDatadog[] | undefined>;
    public readonly loggingDigitaloceans!: pulumi.Output<outputs.ServiceComputeLoggingDigitalocean[] | undefined>;
    public readonly loggingElasticsearches!: pulumi.Output<outputs.ServiceComputeLoggingElasticsearch[] | undefined>;
    public readonly loggingFtps!: pulumi.Output<outputs.ServiceComputeLoggingFtp[] | undefined>;
    public readonly loggingGcs!: pulumi.Output<outputs.ServiceComputeLoggingGc[] | undefined>;
    public readonly loggingGooglepubsubs!: pulumi.Output<outputs.ServiceComputeLoggingGooglepubsub[] | undefined>;
    public readonly loggingHeroku!: pulumi.Output<outputs.ServiceComputeLoggingHeroku[] | undefined>;
    public readonly loggingHoneycombs!: pulumi.Output<outputs.ServiceComputeLoggingHoneycomb[] | undefined>;
    public readonly loggingHttps!: pulumi.Output<outputs.ServiceComputeLoggingHttp[] | undefined>;
    public readonly loggingKafkas!: pulumi.Output<outputs.ServiceComputeLoggingKafka[] | undefined>;
    public readonly loggingKineses!: pulumi.Output<outputs.ServiceComputeLoggingKinese[] | undefined>;
    public readonly loggingLogentries!: pulumi.Output<outputs.ServiceComputeLoggingLogentry[] | undefined>;
    public readonly loggingLogglies!: pulumi.Output<outputs.ServiceComputeLoggingLoggly[] | undefined>;
    public readonly loggingLogshuttles!: pulumi.Output<outputs.ServiceComputeLoggingLogshuttle[] | undefined>;
    public readonly loggingNewrelics!: pulumi.Output<outputs.ServiceComputeLoggingNewrelic[] | undefined>;
    public readonly loggingOpenstacks!: pulumi.Output<outputs.ServiceComputeLoggingOpenstack[] | undefined>;
    public readonly loggingPapertrails!: pulumi.Output<outputs.ServiceComputeLoggingPapertrail[] | undefined>;
    public readonly loggingS3s!: pulumi.Output<outputs.ServiceComputeLoggingS3[] | undefined>;
    public readonly loggingScalyrs!: pulumi.Output<outputs.ServiceComputeLoggingScalyr[] | undefined>;
    public readonly loggingSftps!: pulumi.Output<outputs.ServiceComputeLoggingSftp[] | undefined>;
    public readonly loggingSplunks!: pulumi.Output<outputs.ServiceComputeLoggingSplunk[] | undefined>;
    public readonly loggingSumologics!: pulumi.Output<outputs.ServiceComputeLoggingSumologic[] | undefined>;
    public readonly loggingSyslogs!: pulumi.Output<outputs.ServiceComputeLoggingSyslog[] | undefined>;
    /**
     * The unique name for the Service to create
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
     */
    public readonly package!: pulumi.Output<outputs.ServiceComputePackage>;
    /**
     * Enables serving a stale object if there is an error
     */
    public readonly staleIfError!: pulumi.Output<boolean | undefined>;
    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     */
    public readonly staleIfErrorTtl!: pulumi.Output<number | undefined>;
    /**
     * Description field for the version
     */
    public readonly versionComment!: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceCompute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceComputeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceComputeArgs | ServiceComputeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceComputeState | undefined;
            resourceInputs["activate"] = state ? state.activate : undefined;
            resourceInputs["activeVersion"] = state ? state.activeVersion : undefined;
            resourceInputs["backends"] = state ? state.backends : undefined;
            resourceInputs["clonedVersion"] = state ? state.clonedVersion : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["defaultHost"] = state ? state.defaultHost : undefined;
            resourceInputs["defaultTtl"] = state ? state.defaultTtl : undefined;
            resourceInputs["dictionaries"] = state ? state.dictionaries : undefined;
            resourceInputs["directors"] = state ? state.directors : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            resourceInputs["healthchecks"] = state ? state.healthchecks : undefined;
            resourceInputs["loggingBigqueries"] = state ? state.loggingBigqueries : undefined;
            resourceInputs["loggingBlobstorages"] = state ? state.loggingBlobstorages : undefined;
            resourceInputs["loggingCloudfiles"] = state ? state.loggingCloudfiles : undefined;
            resourceInputs["loggingDatadogs"] = state ? state.loggingDatadogs : undefined;
            resourceInputs["loggingDigitaloceans"] = state ? state.loggingDigitaloceans : undefined;
            resourceInputs["loggingElasticsearches"] = state ? state.loggingElasticsearches : undefined;
            resourceInputs["loggingFtps"] = state ? state.loggingFtps : undefined;
            resourceInputs["loggingGcs"] = state ? state.loggingGcs : undefined;
            resourceInputs["loggingGooglepubsubs"] = state ? state.loggingGooglepubsubs : undefined;
            resourceInputs["loggingHeroku"] = state ? state.loggingHeroku : undefined;
            resourceInputs["loggingHoneycombs"] = state ? state.loggingHoneycombs : undefined;
            resourceInputs["loggingHttps"] = state ? state.loggingHttps : undefined;
            resourceInputs["loggingKafkas"] = state ? state.loggingKafkas : undefined;
            resourceInputs["loggingKineses"] = state ? state.loggingKineses : undefined;
            resourceInputs["loggingLogentries"] = state ? state.loggingLogentries : undefined;
            resourceInputs["loggingLogglies"] = state ? state.loggingLogglies : undefined;
            resourceInputs["loggingLogshuttles"] = state ? state.loggingLogshuttles : undefined;
            resourceInputs["loggingNewrelics"] = state ? state.loggingNewrelics : undefined;
            resourceInputs["loggingOpenstacks"] = state ? state.loggingOpenstacks : undefined;
            resourceInputs["loggingPapertrails"] = state ? state.loggingPapertrails : undefined;
            resourceInputs["loggingS3s"] = state ? state.loggingS3s : undefined;
            resourceInputs["loggingScalyrs"] = state ? state.loggingScalyrs : undefined;
            resourceInputs["loggingSftps"] = state ? state.loggingSftps : undefined;
            resourceInputs["loggingSplunks"] = state ? state.loggingSplunks : undefined;
            resourceInputs["loggingSumologics"] = state ? state.loggingSumologics : undefined;
            resourceInputs["loggingSyslogs"] = state ? state.loggingSyslogs : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["package"] = state ? state.package : undefined;
            resourceInputs["staleIfError"] = state ? state.staleIfError : undefined;
            resourceInputs["staleIfErrorTtl"] = state ? state.staleIfErrorTtl : undefined;
            resourceInputs["versionComment"] = state ? state.versionComment : undefined;
        } else {
            const args = argsOrState as ServiceComputeArgs | undefined;
            if ((!args || args.backends === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backends'");
            }
            if ((!args || args.domains === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domains'");
            }
            if ((!args || args.package === undefined) && !opts.urn) {
                throw new Error("Missing required property 'package'");
            }
            resourceInputs["activate"] = args ? args.activate : undefined;
            resourceInputs["backends"] = args ? args.backends : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["defaultHost"] = args ? args.defaultHost : undefined;
            resourceInputs["defaultTtl"] = args ? args.defaultTtl : undefined;
            resourceInputs["dictionaries"] = args ? args.dictionaries : undefined;
            resourceInputs["directors"] = args ? args.directors : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            resourceInputs["healthchecks"] = args ? args.healthchecks : undefined;
            resourceInputs["loggingBigqueries"] = args ? args.loggingBigqueries : undefined;
            resourceInputs["loggingBlobstorages"] = args ? args.loggingBlobstorages : undefined;
            resourceInputs["loggingCloudfiles"] = args ? args.loggingCloudfiles : undefined;
            resourceInputs["loggingDatadogs"] = args ? args.loggingDatadogs : undefined;
            resourceInputs["loggingDigitaloceans"] = args ? args.loggingDigitaloceans : undefined;
            resourceInputs["loggingElasticsearches"] = args ? args.loggingElasticsearches : undefined;
            resourceInputs["loggingFtps"] = args ? args.loggingFtps : undefined;
            resourceInputs["loggingGcs"] = args ? args.loggingGcs : undefined;
            resourceInputs["loggingGooglepubsubs"] = args ? args.loggingGooglepubsubs : undefined;
            resourceInputs["loggingHeroku"] = args ? args.loggingHeroku : undefined;
            resourceInputs["loggingHoneycombs"] = args ? args.loggingHoneycombs : undefined;
            resourceInputs["loggingHttps"] = args ? args.loggingHttps : undefined;
            resourceInputs["loggingKafkas"] = args ? args.loggingKafkas : undefined;
            resourceInputs["loggingKineses"] = args ? args.loggingKineses : undefined;
            resourceInputs["loggingLogentries"] = args ? args.loggingLogentries : undefined;
            resourceInputs["loggingLogglies"] = args ? args.loggingLogglies : undefined;
            resourceInputs["loggingLogshuttles"] = args ? args.loggingLogshuttles : undefined;
            resourceInputs["loggingNewrelics"] = args ? args.loggingNewrelics : undefined;
            resourceInputs["loggingOpenstacks"] = args ? args.loggingOpenstacks : undefined;
            resourceInputs["loggingPapertrails"] = args ? args.loggingPapertrails : undefined;
            resourceInputs["loggingS3s"] = args ? args.loggingS3s : undefined;
            resourceInputs["loggingScalyrs"] = args ? args.loggingScalyrs : undefined;
            resourceInputs["loggingSftps"] = args ? args.loggingSftps : undefined;
            resourceInputs["loggingSplunks"] = args ? args.loggingSplunks : undefined;
            resourceInputs["loggingSumologics"] = args ? args.loggingSumologics : undefined;
            resourceInputs["loggingSyslogs"] = args ? args.loggingSyslogs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["package"] = args ? args.package : undefined;
            resourceInputs["staleIfError"] = args ? args.staleIfError : undefined;
            resourceInputs["staleIfErrorTtl"] = args ? args.staleIfErrorTtl : undefined;
            resourceInputs["versionComment"] = args ? args.versionComment : undefined;
            resourceInputs["activeVersion"] = undefined /*out*/;
            resourceInputs["clonedVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceCompute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceCompute resources.
 */
export interface ServiceComputeState {
    /**
     * Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     */
    activate?: pulumi.Input<boolean>;
    /**
     * The currently active version of your Fastly Service
     */
    activeVersion?: pulumi.Input<number>;
    backends?: pulumi.Input<pulumi.Input<inputs.ServiceComputeBackend>[]>;
    /**
     * The latest cloned version by the provider
     */
    clonedVersion?: pulumi.Input<number>;
    /**
     * Description field for the service. Default `Managed by Terraform`
     */
    comment?: pulumi.Input<string>;
    /**
     * The default hostname
     */
    defaultHost?: pulumi.Input<string>;
    /**
     * The default Time-to-live (TTL) for requests
     */
    defaultTtl?: pulumi.Input<number>;
    dictionaries?: pulumi.Input<pulumi.Input<inputs.ServiceComputeDictionary>[]>;
    directors?: pulumi.Input<pulumi.Input<inputs.ServiceComputeDirector>[]>;
    /**
     * A set of Domain names to serve as entry points for your Service
     */
    domains?: pulumi.Input<pulumi.Input<inputs.ServiceComputeDomain>[]>;
    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
     */
    forceDestroy?: pulumi.Input<boolean>;
    healthchecks?: pulumi.Input<pulumi.Input<inputs.ServiceComputeHealthcheck>[]>;
    loggingBigqueries?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingBigquery>[]>;
    loggingBlobstorages?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingBlobstorage>[]>;
    loggingCloudfiles?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingCloudfile>[]>;
    loggingDatadogs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingDatadog>[]>;
    loggingDigitaloceans?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingDigitalocean>[]>;
    loggingElasticsearches?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingElasticsearch>[]>;
    loggingFtps?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingFtp>[]>;
    loggingGcs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingGc>[]>;
    loggingGooglepubsubs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingGooglepubsub>[]>;
    loggingHeroku?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingHeroku>[]>;
    loggingHoneycombs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingHoneycomb>[]>;
    loggingHttps?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingHttp>[]>;
    loggingKafkas?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingKafka>[]>;
    loggingKineses?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingKinese>[]>;
    loggingLogentries?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingLogentry>[]>;
    loggingLogglies?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingLoggly>[]>;
    loggingLogshuttles?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingLogshuttle>[]>;
    loggingNewrelics?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingNewrelic>[]>;
    loggingOpenstacks?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingOpenstack>[]>;
    loggingPapertrails?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingPapertrail>[]>;
    loggingS3s?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingS3>[]>;
    loggingScalyrs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingScalyr>[]>;
    loggingSftps?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingSftp>[]>;
    loggingSplunks?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingSplunk>[]>;
    loggingSumologics?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingSumologic>[]>;
    loggingSyslogs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingSyslog>[]>;
    /**
     * The unique name for the Service to create
     */
    name?: pulumi.Input<string>;
    /**
     * The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
     */
    package?: pulumi.Input<inputs.ServiceComputePackage>;
    /**
     * Enables serving a stale object if there is an error
     */
    staleIfError?: pulumi.Input<boolean>;
    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     */
    staleIfErrorTtl?: pulumi.Input<number>;
    /**
     * Description field for the version
     */
    versionComment?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceCompute resource.
 */
export interface ServiceComputeArgs {
    /**
     * Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     */
    activate?: pulumi.Input<boolean>;
    backends: pulumi.Input<pulumi.Input<inputs.ServiceComputeBackend>[]>;
    /**
     * Description field for the service. Default `Managed by Terraform`
     */
    comment?: pulumi.Input<string>;
    /**
     * The default hostname
     */
    defaultHost?: pulumi.Input<string>;
    /**
     * The default Time-to-live (TTL) for requests
     */
    defaultTtl?: pulumi.Input<number>;
    dictionaries?: pulumi.Input<pulumi.Input<inputs.ServiceComputeDictionary>[]>;
    directors?: pulumi.Input<pulumi.Input<inputs.ServiceComputeDirector>[]>;
    /**
     * A set of Domain names to serve as entry points for your Service
     */
    domains: pulumi.Input<pulumi.Input<inputs.ServiceComputeDomain>[]>;
    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
     */
    forceDestroy?: pulumi.Input<boolean>;
    healthchecks?: pulumi.Input<pulumi.Input<inputs.ServiceComputeHealthcheck>[]>;
    loggingBigqueries?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingBigquery>[]>;
    loggingBlobstorages?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingBlobstorage>[]>;
    loggingCloudfiles?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingCloudfile>[]>;
    loggingDatadogs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingDatadog>[]>;
    loggingDigitaloceans?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingDigitalocean>[]>;
    loggingElasticsearches?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingElasticsearch>[]>;
    loggingFtps?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingFtp>[]>;
    loggingGcs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingGc>[]>;
    loggingGooglepubsubs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingGooglepubsub>[]>;
    loggingHeroku?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingHeroku>[]>;
    loggingHoneycombs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingHoneycomb>[]>;
    loggingHttps?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingHttp>[]>;
    loggingKafkas?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingKafka>[]>;
    loggingKineses?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingKinese>[]>;
    loggingLogentries?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingLogentry>[]>;
    loggingLogglies?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingLoggly>[]>;
    loggingLogshuttles?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingLogshuttle>[]>;
    loggingNewrelics?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingNewrelic>[]>;
    loggingOpenstacks?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingOpenstack>[]>;
    loggingPapertrails?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingPapertrail>[]>;
    loggingS3s?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingS3>[]>;
    loggingScalyrs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingScalyr>[]>;
    loggingSftps?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingSftp>[]>;
    loggingSplunks?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingSplunk>[]>;
    loggingSumologics?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingSumologic>[]>;
    loggingSyslogs?: pulumi.Input<pulumi.Input<inputs.ServiceComputeLoggingSyslog>[]>;
    /**
     * The unique name for the Service to create
     */
    name?: pulumi.Input<string>;
    /**
     * The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
     */
    package: pulumi.Input<inputs.ServiceComputePackage>;
    /**
     * Enables serving a stale object if there is an error
     */
    staleIfError?: pulumi.Input<boolean>;
    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     */
    staleIfErrorTtl?: pulumi.Input<number>;
    /**
     * Description field for the version
     */
    versionComment?: pulumi.Input<string>;
}
