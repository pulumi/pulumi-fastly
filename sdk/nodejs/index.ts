// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AlertArgs, AlertState } from "./alert";
export type Alert = import("./alert").Alert;
export const Alert: typeof import("./alert").Alert = null as any;
utilities.lazyLoad(exports, ["Alert"], () => require("./alert"));

export { ConfigstoreArgs, ConfigstoreState } from "./configstore";
export type Configstore = import("./configstore").Configstore;
export const Configstore: typeof import("./configstore").Configstore = null as any;
utilities.lazyLoad(exports, ["Configstore"], () => require("./configstore"));

export { ConfigstoreEntriesArgs, ConfigstoreEntriesState } from "./configstoreEntries";
export type ConfigstoreEntries = import("./configstoreEntries").ConfigstoreEntries;
export const ConfigstoreEntries: typeof import("./configstoreEntries").ConfigstoreEntries = null as any;
utilities.lazyLoad(exports, ["ConfigstoreEntries"], () => require("./configstoreEntries"));

export { CustomDashboardArgs, CustomDashboardState } from "./customDashboard";
export type CustomDashboard = import("./customDashboard").CustomDashboard;
export const CustomDashboard: typeof import("./customDashboard").CustomDashboard = null as any;
utilities.lazyLoad(exports, ["CustomDashboard"], () => require("./customDashboard"));

export { DomainV1Args, DomainV1State } from "./domainV1";
export type DomainV1 = import("./domainV1").DomainV1;
export const DomainV1: typeof import("./domainV1").DomainV1 = null as any;
utilities.lazyLoad(exports, ["DomainV1"], () => require("./domainV1"));

export { GetConfigstoresResult } from "./getConfigstores";
export const getConfigstores: typeof import("./getConfigstores").getConfigstores = null as any;
export const getConfigstoresOutput: typeof import("./getConfigstores").getConfigstoresOutput = null as any;
utilities.lazyLoad(exports, ["getConfigstores","getConfigstoresOutput"], () => require("./getConfigstores"));

export { GetDatacentersResult } from "./getDatacenters";
export const getDatacenters: typeof import("./getDatacenters").getDatacenters = null as any;
export const getDatacentersOutput: typeof import("./getDatacenters").getDatacentersOutput = null as any;
utilities.lazyLoad(exports, ["getDatacenters","getDatacentersOutput"], () => require("./getDatacenters"));

export { GetDictionariesArgs, GetDictionariesResult, GetDictionariesOutputArgs } from "./getDictionaries";
export const getDictionaries: typeof import("./getDictionaries").getDictionaries = null as any;
export const getDictionariesOutput: typeof import("./getDictionaries").getDictionariesOutput = null as any;
utilities.lazyLoad(exports, ["getDictionaries","getDictionariesOutput"], () => require("./getDictionaries"));

export { GetFastlyIpRangesResult } from "./getFastlyIpRanges";
export const getFastlyIpRanges: typeof import("./getFastlyIpRanges").getFastlyIpRanges = null as any;
export const getFastlyIpRangesOutput: typeof import("./getFastlyIpRanges").getFastlyIpRangesOutput = null as any;
utilities.lazyLoad(exports, ["getFastlyIpRanges","getFastlyIpRangesOutput"], () => require("./getFastlyIpRanges"));

export { GetKvstoresResult } from "./getKvstores";
export const getKvstores: typeof import("./getKvstores").getKvstores = null as any;
export const getKvstoresOutput: typeof import("./getKvstores").getKvstoresOutput = null as any;
utilities.lazyLoad(exports, ["getKvstores","getKvstoresOutput"], () => require("./getKvstores"));

export { GetNgwafAlertDatadogIntegrationArgs, GetNgwafAlertDatadogIntegrationResult, GetNgwafAlertDatadogIntegrationOutputArgs } from "./getNgwafAlertDatadogIntegration";
export const getNgwafAlertDatadogIntegration: typeof import("./getNgwafAlertDatadogIntegration").getNgwafAlertDatadogIntegration = null as any;
export const getNgwafAlertDatadogIntegrationOutput: typeof import("./getNgwafAlertDatadogIntegration").getNgwafAlertDatadogIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafAlertDatadogIntegration","getNgwafAlertDatadogIntegrationOutput"], () => require("./getNgwafAlertDatadogIntegration"));

export { GetNgwafAlertJiraIntegrationArgs, GetNgwafAlertJiraIntegrationResult, GetNgwafAlertJiraIntegrationOutputArgs } from "./getNgwafAlertJiraIntegration";
export const getNgwafAlertJiraIntegration: typeof import("./getNgwafAlertJiraIntegration").getNgwafAlertJiraIntegration = null as any;
export const getNgwafAlertJiraIntegrationOutput: typeof import("./getNgwafAlertJiraIntegration").getNgwafAlertJiraIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafAlertJiraIntegration","getNgwafAlertJiraIntegrationOutput"], () => require("./getNgwafAlertJiraIntegration"));

export { GetNgwafAlertMailingListIntegrationArgs, GetNgwafAlertMailingListIntegrationResult, GetNgwafAlertMailingListIntegrationOutputArgs } from "./getNgwafAlertMailingListIntegration";
export const getNgwafAlertMailingListIntegration: typeof import("./getNgwafAlertMailingListIntegration").getNgwafAlertMailingListIntegration = null as any;
export const getNgwafAlertMailingListIntegrationOutput: typeof import("./getNgwafAlertMailingListIntegration").getNgwafAlertMailingListIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafAlertMailingListIntegration","getNgwafAlertMailingListIntegrationOutput"], () => require("./getNgwafAlertMailingListIntegration"));

export { GetNgwafAlertMicrosoftTeamsIntegrationArgs, GetNgwafAlertMicrosoftTeamsIntegrationResult, GetNgwafAlertMicrosoftTeamsIntegrationOutputArgs } from "./getNgwafAlertMicrosoftTeamsIntegration";
export const getNgwafAlertMicrosoftTeamsIntegration: typeof import("./getNgwafAlertMicrosoftTeamsIntegration").getNgwafAlertMicrosoftTeamsIntegration = null as any;
export const getNgwafAlertMicrosoftTeamsIntegrationOutput: typeof import("./getNgwafAlertMicrosoftTeamsIntegration").getNgwafAlertMicrosoftTeamsIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafAlertMicrosoftTeamsIntegration","getNgwafAlertMicrosoftTeamsIntegrationOutput"], () => require("./getNgwafAlertMicrosoftTeamsIntegration"));

export { GetNgwafAlertOpsgenieIntegrationArgs, GetNgwafAlertOpsgenieIntegrationResult, GetNgwafAlertOpsgenieIntegrationOutputArgs } from "./getNgwafAlertOpsgenieIntegration";
export const getNgwafAlertOpsgenieIntegration: typeof import("./getNgwafAlertOpsgenieIntegration").getNgwafAlertOpsgenieIntegration = null as any;
export const getNgwafAlertOpsgenieIntegrationOutput: typeof import("./getNgwafAlertOpsgenieIntegration").getNgwafAlertOpsgenieIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafAlertOpsgenieIntegration","getNgwafAlertOpsgenieIntegrationOutput"], () => require("./getNgwafAlertOpsgenieIntegration"));

export { GetNgwafAlertPagerdutyIntegrationArgs, GetNgwafAlertPagerdutyIntegrationResult, GetNgwafAlertPagerdutyIntegrationOutputArgs } from "./getNgwafAlertPagerdutyIntegration";
export const getNgwafAlertPagerdutyIntegration: typeof import("./getNgwafAlertPagerdutyIntegration").getNgwafAlertPagerdutyIntegration = null as any;
export const getNgwafAlertPagerdutyIntegrationOutput: typeof import("./getNgwafAlertPagerdutyIntegration").getNgwafAlertPagerdutyIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafAlertPagerdutyIntegration","getNgwafAlertPagerdutyIntegrationOutput"], () => require("./getNgwafAlertPagerdutyIntegration"));

export { GetNgwafAlertSlackIntegrationArgs, GetNgwafAlertSlackIntegrationResult, GetNgwafAlertSlackIntegrationOutputArgs } from "./getNgwafAlertSlackIntegration";
export const getNgwafAlertSlackIntegration: typeof import("./getNgwafAlertSlackIntegration").getNgwafAlertSlackIntegration = null as any;
export const getNgwafAlertSlackIntegrationOutput: typeof import("./getNgwafAlertSlackIntegration").getNgwafAlertSlackIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafAlertSlackIntegration","getNgwafAlertSlackIntegrationOutput"], () => require("./getNgwafAlertSlackIntegration"));

export { GetNgwafAlertWebhookIntegrationArgs, GetNgwafAlertWebhookIntegrationResult, GetNgwafAlertWebhookIntegrationOutputArgs } from "./getNgwafAlertWebhookIntegration";
export const getNgwafAlertWebhookIntegration: typeof import("./getNgwafAlertWebhookIntegration").getNgwafAlertWebhookIntegration = null as any;
export const getNgwafAlertWebhookIntegrationOutput: typeof import("./getNgwafAlertWebhookIntegration").getNgwafAlertWebhookIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafAlertWebhookIntegration","getNgwafAlertWebhookIntegrationOutput"], () => require("./getNgwafAlertWebhookIntegration"));

export { GetNgwafRedactionsArgs, GetNgwafRedactionsResult, GetNgwafRedactionsOutputArgs } from "./getNgwafRedactions";
export const getNgwafRedactions: typeof import("./getNgwafRedactions").getNgwafRedactions = null as any;
export const getNgwafRedactionsOutput: typeof import("./getNgwafRedactions").getNgwafRedactionsOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafRedactions","getNgwafRedactionsOutput"], () => require("./getNgwafRedactions"));

export { GetNgwafThresholdsArgs, GetNgwafThresholdsResult, GetNgwafThresholdsOutputArgs } from "./getNgwafThresholds";
export const getNgwafThresholds: typeof import("./getNgwafThresholds").getNgwafThresholds = null as any;
export const getNgwafThresholdsOutput: typeof import("./getNgwafThresholds").getNgwafThresholdsOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafThresholds","getNgwafThresholdsOutput"], () => require("./getNgwafThresholds"));

export { GetNgwafVirtualPatchesArgs, GetNgwafVirtualPatchesResult, GetNgwafVirtualPatchesOutputArgs } from "./getNgwafVirtualPatches";
export const getNgwafVirtualPatches: typeof import("./getNgwafVirtualPatches").getNgwafVirtualPatches = null as any;
export const getNgwafVirtualPatchesOutput: typeof import("./getNgwafVirtualPatches").getNgwafVirtualPatchesOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafVirtualPatches","getNgwafVirtualPatchesOutput"], () => require("./getNgwafVirtualPatches"));

export { GetNgwafWorkspacesResult } from "./getNgwafWorkspaces";
export const getNgwafWorkspaces: typeof import("./getNgwafWorkspaces").getNgwafWorkspaces = null as any;
export const getNgwafWorkspacesOutput: typeof import("./getNgwafWorkspaces").getNgwafWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getNgwafWorkspaces","getNgwafWorkspacesOutput"], () => require("./getNgwafWorkspaces"));

export { GetPackageHashArgs, GetPackageHashResult, GetPackageHashOutputArgs } from "./getPackageHash";
export const getPackageHash: typeof import("./getPackageHash").getPackageHash = null as any;
export const getPackageHashOutput: typeof import("./getPackageHash").getPackageHashOutput = null as any;
utilities.lazyLoad(exports, ["getPackageHash","getPackageHashOutput"], () => require("./getPackageHash"));

export { GetSecretstoresResult } from "./getSecretstores";
export const getSecretstores: typeof import("./getSecretstores").getSecretstores = null as any;
export const getSecretstoresOutput: typeof import("./getSecretstores").getSecretstoresOutput = null as any;
utilities.lazyLoad(exports, ["getSecretstores","getSecretstoresOutput"], () => require("./getSecretstores"));

export { GetServicesResult } from "./getServices";
export const getServices: typeof import("./getServices").getServices = null as any;
export const getServicesOutput: typeof import("./getServices").getServicesOutput = null as any;
utilities.lazyLoad(exports, ["getServices","getServicesOutput"], () => require("./getServices"));

export { GetTlsActivationArgs, GetTlsActivationResult, GetTlsActivationOutputArgs } from "./getTlsActivation";
export const getTlsActivation: typeof import("./getTlsActivation").getTlsActivation = null as any;
export const getTlsActivationOutput: typeof import("./getTlsActivation").getTlsActivationOutput = null as any;
utilities.lazyLoad(exports, ["getTlsActivation","getTlsActivationOutput"], () => require("./getTlsActivation"));

export { GetTlsActivationIdsArgs, GetTlsActivationIdsResult, GetTlsActivationIdsOutputArgs } from "./getTlsActivationIds";
export const getTlsActivationIds: typeof import("./getTlsActivationIds").getTlsActivationIds = null as any;
export const getTlsActivationIdsOutput: typeof import("./getTlsActivationIds").getTlsActivationIdsOutput = null as any;
utilities.lazyLoad(exports, ["getTlsActivationIds","getTlsActivationIdsOutput"], () => require("./getTlsActivationIds"));

export { GetTlsCertificateArgs, GetTlsCertificateResult, GetTlsCertificateOutputArgs } from "./getTlsCertificate";
export const getTlsCertificate: typeof import("./getTlsCertificate").getTlsCertificate = null as any;
export const getTlsCertificateOutput: typeof import("./getTlsCertificate").getTlsCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getTlsCertificate","getTlsCertificateOutput"], () => require("./getTlsCertificate"));

export { GetTlsCertificateIdsResult } from "./getTlsCertificateIds";
export const getTlsCertificateIds: typeof import("./getTlsCertificateIds").getTlsCertificateIds = null as any;
export const getTlsCertificateIdsOutput: typeof import("./getTlsCertificateIds").getTlsCertificateIdsOutput = null as any;
utilities.lazyLoad(exports, ["getTlsCertificateIds","getTlsCertificateIdsOutput"], () => require("./getTlsCertificateIds"));

export { GetTlsConfigurationArgs, GetTlsConfigurationResult, GetTlsConfigurationOutputArgs } from "./getTlsConfiguration";
export const getTlsConfiguration: typeof import("./getTlsConfiguration").getTlsConfiguration = null as any;
export const getTlsConfigurationOutput: typeof import("./getTlsConfiguration").getTlsConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getTlsConfiguration","getTlsConfigurationOutput"], () => require("./getTlsConfiguration"));

export { GetTlsConfigurationIdsResult } from "./getTlsConfigurationIds";
export const getTlsConfigurationIds: typeof import("./getTlsConfigurationIds").getTlsConfigurationIds = null as any;
export const getTlsConfigurationIdsOutput: typeof import("./getTlsConfigurationIds").getTlsConfigurationIdsOutput = null as any;
utilities.lazyLoad(exports, ["getTlsConfigurationIds","getTlsConfigurationIdsOutput"], () => require("./getTlsConfigurationIds"));

export { GetTlsDomainArgs, GetTlsDomainResult, GetTlsDomainOutputArgs } from "./getTlsDomain";
export const getTlsDomain: typeof import("./getTlsDomain").getTlsDomain = null as any;
export const getTlsDomainOutput: typeof import("./getTlsDomain").getTlsDomainOutput = null as any;
utilities.lazyLoad(exports, ["getTlsDomain","getTlsDomainOutput"], () => require("./getTlsDomain"));

export { GetTlsPlatformCertificateArgs, GetTlsPlatformCertificateResult, GetTlsPlatformCertificateOutputArgs } from "./getTlsPlatformCertificate";
export const getTlsPlatformCertificate: typeof import("./getTlsPlatformCertificate").getTlsPlatformCertificate = null as any;
export const getTlsPlatformCertificateOutput: typeof import("./getTlsPlatformCertificate").getTlsPlatformCertificateOutput = null as any;
utilities.lazyLoad(exports, ["getTlsPlatformCertificate","getTlsPlatformCertificateOutput"], () => require("./getTlsPlatformCertificate"));

export { GetTlsPlatformCertificateIdsResult } from "./getTlsPlatformCertificateIds";
export const getTlsPlatformCertificateIds: typeof import("./getTlsPlatformCertificateIds").getTlsPlatformCertificateIds = null as any;
export const getTlsPlatformCertificateIdsOutput: typeof import("./getTlsPlatformCertificateIds").getTlsPlatformCertificateIdsOutput = null as any;
utilities.lazyLoad(exports, ["getTlsPlatformCertificateIds","getTlsPlatformCertificateIdsOutput"], () => require("./getTlsPlatformCertificateIds"));

export { GetTlsPrivateKeyArgs, GetTlsPrivateKeyResult, GetTlsPrivateKeyOutputArgs } from "./getTlsPrivateKey";
export const getTlsPrivateKey: typeof import("./getTlsPrivateKey").getTlsPrivateKey = null as any;
export const getTlsPrivateKeyOutput: typeof import("./getTlsPrivateKey").getTlsPrivateKeyOutput = null as any;
utilities.lazyLoad(exports, ["getTlsPrivateKey","getTlsPrivateKeyOutput"], () => require("./getTlsPrivateKey"));

export { GetTlsPrivateKeyIdsResult } from "./getTlsPrivateKeyIds";
export const getTlsPrivateKeyIds: typeof import("./getTlsPrivateKeyIds").getTlsPrivateKeyIds = null as any;
export const getTlsPrivateKeyIdsOutput: typeof import("./getTlsPrivateKeyIds").getTlsPrivateKeyIdsOutput = null as any;
utilities.lazyLoad(exports, ["getTlsPrivateKeyIds","getTlsPrivateKeyIdsOutput"], () => require("./getTlsPrivateKeyIds"));

export { GetTlsSubscriptionArgs, GetTlsSubscriptionResult, GetTlsSubscriptionOutputArgs } from "./getTlsSubscription";
export const getTlsSubscription: typeof import("./getTlsSubscription").getTlsSubscription = null as any;
export const getTlsSubscriptionOutput: typeof import("./getTlsSubscription").getTlsSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getTlsSubscription","getTlsSubscriptionOutput"], () => require("./getTlsSubscription"));

export { GetTlsSubscriptionIdsResult } from "./getTlsSubscriptionIds";
export const getTlsSubscriptionIds: typeof import("./getTlsSubscriptionIds").getTlsSubscriptionIds = null as any;
export const getTlsSubscriptionIdsOutput: typeof import("./getTlsSubscriptionIds").getTlsSubscriptionIdsOutput = null as any;
utilities.lazyLoad(exports, ["getTlsSubscriptionIds","getTlsSubscriptionIdsOutput"], () => require("./getTlsSubscriptionIds"));

export { GetVclSnippetsArgs, GetVclSnippetsResult, GetVclSnippetsOutputArgs } from "./getVclSnippets";
export const getVclSnippets: typeof import("./getVclSnippets").getVclSnippets = null as any;
export const getVclSnippetsOutput: typeof import("./getVclSnippets").getVclSnippetsOutput = null as any;
utilities.lazyLoad(exports, ["getVclSnippets","getVclSnippetsOutput"], () => require("./getVclSnippets"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { KvstoreArgs, KvstoreState } from "./kvstore";
export type Kvstore = import("./kvstore").Kvstore;
export const Kvstore: typeof import("./kvstore").Kvstore = null as any;
utilities.lazyLoad(exports, ["Kvstore"], () => require("./kvstore"));

export { NgwafAccountListArgs, NgwafAccountListState } from "./ngwafAccountList";
export type NgwafAccountList = import("./ngwafAccountList").NgwafAccountList;
export const NgwafAccountList: typeof import("./ngwafAccountList").NgwafAccountList = null as any;
utilities.lazyLoad(exports, ["NgwafAccountList"], () => require("./ngwafAccountList"));

export { NgwafAccountRuleArgs, NgwafAccountRuleState } from "./ngwafAccountRule";
export type NgwafAccountRule = import("./ngwafAccountRule").NgwafAccountRule;
export const NgwafAccountRule: typeof import("./ngwafAccountRule").NgwafAccountRule = null as any;
utilities.lazyLoad(exports, ["NgwafAccountRule"], () => require("./ngwafAccountRule"));

export { NgwafAccountSignalArgs, NgwafAccountSignalState } from "./ngwafAccountSignal";
export type NgwafAccountSignal = import("./ngwafAccountSignal").NgwafAccountSignal;
export const NgwafAccountSignal: typeof import("./ngwafAccountSignal").NgwafAccountSignal = null as any;
utilities.lazyLoad(exports, ["NgwafAccountSignal"], () => require("./ngwafAccountSignal"));

export { NgwafAlertDatadogIntegrationArgs, NgwafAlertDatadogIntegrationState } from "./ngwafAlertDatadogIntegration";
export type NgwafAlertDatadogIntegration = import("./ngwafAlertDatadogIntegration").NgwafAlertDatadogIntegration;
export const NgwafAlertDatadogIntegration: typeof import("./ngwafAlertDatadogIntegration").NgwafAlertDatadogIntegration = null as any;
utilities.lazyLoad(exports, ["NgwafAlertDatadogIntegration"], () => require("./ngwafAlertDatadogIntegration"));

export { NgwafAlertJiraIntegrationArgs, NgwafAlertJiraIntegrationState } from "./ngwafAlertJiraIntegration";
export type NgwafAlertJiraIntegration = import("./ngwafAlertJiraIntegration").NgwafAlertJiraIntegration;
export const NgwafAlertJiraIntegration: typeof import("./ngwafAlertJiraIntegration").NgwafAlertJiraIntegration = null as any;
utilities.lazyLoad(exports, ["NgwafAlertJiraIntegration"], () => require("./ngwafAlertJiraIntegration"));

export { NgwafAlertMailingListIntegrationArgs, NgwafAlertMailingListIntegrationState } from "./ngwafAlertMailingListIntegration";
export type NgwafAlertMailingListIntegration = import("./ngwafAlertMailingListIntegration").NgwafAlertMailingListIntegration;
export const NgwafAlertMailingListIntegration: typeof import("./ngwafAlertMailingListIntegration").NgwafAlertMailingListIntegration = null as any;
utilities.lazyLoad(exports, ["NgwafAlertMailingListIntegration"], () => require("./ngwafAlertMailingListIntegration"));

export { NgwafAlertMicrosoftTeamsIntegrationArgs, NgwafAlertMicrosoftTeamsIntegrationState } from "./ngwafAlertMicrosoftTeamsIntegration";
export type NgwafAlertMicrosoftTeamsIntegration = import("./ngwafAlertMicrosoftTeamsIntegration").NgwafAlertMicrosoftTeamsIntegration;
export const NgwafAlertMicrosoftTeamsIntegration: typeof import("./ngwafAlertMicrosoftTeamsIntegration").NgwafAlertMicrosoftTeamsIntegration = null as any;
utilities.lazyLoad(exports, ["NgwafAlertMicrosoftTeamsIntegration"], () => require("./ngwafAlertMicrosoftTeamsIntegration"));

export { NgwafAlertOpsgenieIntegrationArgs, NgwafAlertOpsgenieIntegrationState } from "./ngwafAlertOpsgenieIntegration";
export type NgwafAlertOpsgenieIntegration = import("./ngwafAlertOpsgenieIntegration").NgwafAlertOpsgenieIntegration;
export const NgwafAlertOpsgenieIntegration: typeof import("./ngwafAlertOpsgenieIntegration").NgwafAlertOpsgenieIntegration = null as any;
utilities.lazyLoad(exports, ["NgwafAlertOpsgenieIntegration"], () => require("./ngwafAlertOpsgenieIntegration"));

export { NgwafAlertPagerdutyIntegrationArgs, NgwafAlertPagerdutyIntegrationState } from "./ngwafAlertPagerdutyIntegration";
export type NgwafAlertPagerdutyIntegration = import("./ngwafAlertPagerdutyIntegration").NgwafAlertPagerdutyIntegration;
export const NgwafAlertPagerdutyIntegration: typeof import("./ngwafAlertPagerdutyIntegration").NgwafAlertPagerdutyIntegration = null as any;
utilities.lazyLoad(exports, ["NgwafAlertPagerdutyIntegration"], () => require("./ngwafAlertPagerdutyIntegration"));

export { NgwafAlertSlackIntegrationArgs, NgwafAlertSlackIntegrationState } from "./ngwafAlertSlackIntegration";
export type NgwafAlertSlackIntegration = import("./ngwafAlertSlackIntegration").NgwafAlertSlackIntegration;
export const NgwafAlertSlackIntegration: typeof import("./ngwafAlertSlackIntegration").NgwafAlertSlackIntegration = null as any;
utilities.lazyLoad(exports, ["NgwafAlertSlackIntegration"], () => require("./ngwafAlertSlackIntegration"));

export { NgwafAlertWebhookIntegrationArgs, NgwafAlertWebhookIntegrationState } from "./ngwafAlertWebhookIntegration";
export type NgwafAlertWebhookIntegration = import("./ngwafAlertWebhookIntegration").NgwafAlertWebhookIntegration;
export const NgwafAlertWebhookIntegration: typeof import("./ngwafAlertWebhookIntegration").NgwafAlertWebhookIntegration = null as any;
utilities.lazyLoad(exports, ["NgwafAlertWebhookIntegration"], () => require("./ngwafAlertWebhookIntegration"));

export { NgwafRedactionArgs, NgwafRedactionState } from "./ngwafRedaction";
export type NgwafRedaction = import("./ngwafRedaction").NgwafRedaction;
export const NgwafRedaction: typeof import("./ngwafRedaction").NgwafRedaction = null as any;
utilities.lazyLoad(exports, ["NgwafRedaction"], () => require("./ngwafRedaction"));

export { NgwafThresholdsArgs, NgwafThresholdsState } from "./ngwafThresholds";
export type NgwafThresholds = import("./ngwafThresholds").NgwafThresholds;
export const NgwafThresholds: typeof import("./ngwafThresholds").NgwafThresholds = null as any;
utilities.lazyLoad(exports, ["NgwafThresholds"], () => require("./ngwafThresholds"));

export { NgwafVirtualPatchesArgs, NgwafVirtualPatchesState } from "./ngwafVirtualPatches";
export type NgwafVirtualPatches = import("./ngwafVirtualPatches").NgwafVirtualPatches;
export const NgwafVirtualPatches: typeof import("./ngwafVirtualPatches").NgwafVirtualPatches = null as any;
utilities.lazyLoad(exports, ["NgwafVirtualPatches"], () => require("./ngwafVirtualPatches"));

export { NgwafWorkspaceArgs, NgwafWorkspaceState } from "./ngwafWorkspace";
export type NgwafWorkspace = import("./ngwafWorkspace").NgwafWorkspace;
export const NgwafWorkspace: typeof import("./ngwafWorkspace").NgwafWorkspace = null as any;
utilities.lazyLoad(exports, ["NgwafWorkspace"], () => require("./ngwafWorkspace"));

export { NgwafWorkspaceListArgs, NgwafWorkspaceListState } from "./ngwafWorkspaceList";
export type NgwafWorkspaceList = import("./ngwafWorkspaceList").NgwafWorkspaceList;
export const NgwafWorkspaceList: typeof import("./ngwafWorkspaceList").NgwafWorkspaceList = null as any;
utilities.lazyLoad(exports, ["NgwafWorkspaceList"], () => require("./ngwafWorkspaceList"));

export { NgwafWorkspaceRuleArgs, NgwafWorkspaceRuleState } from "./ngwafWorkspaceRule";
export type NgwafWorkspaceRule = import("./ngwafWorkspaceRule").NgwafWorkspaceRule;
export const NgwafWorkspaceRule: typeof import("./ngwafWorkspaceRule").NgwafWorkspaceRule = null as any;
utilities.lazyLoad(exports, ["NgwafWorkspaceRule"], () => require("./ngwafWorkspaceRule"));

export { NgwafWorkspaceSignalArgs, NgwafWorkspaceSignalState } from "./ngwafWorkspaceSignal";
export type NgwafWorkspaceSignal = import("./ngwafWorkspaceSignal").NgwafWorkspaceSignal;
export const NgwafWorkspaceSignal: typeof import("./ngwafWorkspaceSignal").NgwafWorkspaceSignal = null as any;
utilities.lazyLoad(exports, ["NgwafWorkspaceSignal"], () => require("./ngwafWorkspaceSignal"));

export { ObjectStorageAccessKeysArgs, ObjectStorageAccessKeysState } from "./objectStorageAccessKeys";
export type ObjectStorageAccessKeys = import("./objectStorageAccessKeys").ObjectStorageAccessKeys;
export const ObjectStorageAccessKeys: typeof import("./objectStorageAccessKeys").ObjectStorageAccessKeys = null as any;
utilities.lazyLoad(exports, ["ObjectStorageAccessKeys"], () => require("./objectStorageAccessKeys"));

export * from "./provider";
import { Provider } from "./provider";

export { SecretstoreArgs, SecretstoreState } from "./secretstore";
export type Secretstore = import("./secretstore").Secretstore;
export const Secretstore: typeof import("./secretstore").Secretstore = null as any;
utilities.lazyLoad(exports, ["Secretstore"], () => require("./secretstore"));

export { ServiceACLEntriesArgs, ServiceACLEntriesState } from "./serviceACLEntries";
export type ServiceACLEntries = import("./serviceACLEntries").ServiceACLEntries;
export const ServiceACLEntries: typeof import("./serviceACLEntries").ServiceACLEntries = null as any;
utilities.lazyLoad(exports, ["ServiceACLEntries"], () => require("./serviceACLEntries"));

export { ServiceAuthorizationArgs, ServiceAuthorizationState } from "./serviceAuthorization";
export type ServiceAuthorization = import("./serviceAuthorization").ServiceAuthorization;
export const ServiceAuthorization: typeof import("./serviceAuthorization").ServiceAuthorization = null as any;
utilities.lazyLoad(exports, ["ServiceAuthorization"], () => require("./serviceAuthorization"));

export { ServiceComputeArgs, ServiceComputeState } from "./serviceCompute";
export type ServiceCompute = import("./serviceCompute").ServiceCompute;
export const ServiceCompute: typeof import("./serviceCompute").ServiceCompute = null as any;
utilities.lazyLoad(exports, ["ServiceCompute"], () => require("./serviceCompute"));

export { ServiceDictionaryItemsArgs, ServiceDictionaryItemsState } from "./serviceDictionaryItems";
export type ServiceDictionaryItems = import("./serviceDictionaryItems").ServiceDictionaryItems;
export const ServiceDictionaryItems: typeof import("./serviceDictionaryItems").ServiceDictionaryItems = null as any;
utilities.lazyLoad(exports, ["ServiceDictionaryItems"], () => require("./serviceDictionaryItems"));

export { ServiceDynamicSnippetContentArgs, ServiceDynamicSnippetContentState } from "./serviceDynamicSnippetContent";
export type ServiceDynamicSnippetContent = import("./serviceDynamicSnippetContent").ServiceDynamicSnippetContent;
export const ServiceDynamicSnippetContent: typeof import("./serviceDynamicSnippetContent").ServiceDynamicSnippetContent = null as any;
utilities.lazyLoad(exports, ["ServiceDynamicSnippetContent"], () => require("./serviceDynamicSnippetContent"));

export { ServiceVclArgs, ServiceVclState } from "./serviceVcl";
export type ServiceVcl = import("./serviceVcl").ServiceVcl;
export const ServiceVcl: typeof import("./serviceVcl").ServiceVcl = null as any;
utilities.lazyLoad(exports, ["ServiceVcl"], () => require("./serviceVcl"));

export { TlsActivationArgs, TlsActivationState } from "./tlsActivation";
export type TlsActivation = import("./tlsActivation").TlsActivation;
export const TlsActivation: typeof import("./tlsActivation").TlsActivation = null as any;
utilities.lazyLoad(exports, ["TlsActivation"], () => require("./tlsActivation"));

export { TlsCertificateArgs, TlsCertificateState } from "./tlsCertificate";
export type TlsCertificate = import("./tlsCertificate").TlsCertificate;
export const TlsCertificate: typeof import("./tlsCertificate").TlsCertificate = null as any;
utilities.lazyLoad(exports, ["TlsCertificate"], () => require("./tlsCertificate"));

export { TlsMutualAuthenticationArgs, TlsMutualAuthenticationState } from "./tlsMutualAuthentication";
export type TlsMutualAuthentication = import("./tlsMutualAuthentication").TlsMutualAuthentication;
export const TlsMutualAuthentication: typeof import("./tlsMutualAuthentication").TlsMutualAuthentication = null as any;
utilities.lazyLoad(exports, ["TlsMutualAuthentication"], () => require("./tlsMutualAuthentication"));

export { TlsPlatformCertificateArgs, TlsPlatformCertificateState } from "./tlsPlatformCertificate";
export type TlsPlatformCertificate = import("./tlsPlatformCertificate").TlsPlatformCertificate;
export const TlsPlatformCertificate: typeof import("./tlsPlatformCertificate").TlsPlatformCertificate = null as any;
utilities.lazyLoad(exports, ["TlsPlatformCertificate"], () => require("./tlsPlatformCertificate"));

export { TlsPrivateKeyArgs, TlsPrivateKeyState } from "./tlsPrivateKey";
export type TlsPrivateKey = import("./tlsPrivateKey").TlsPrivateKey;
export const TlsPrivateKey: typeof import("./tlsPrivateKey").TlsPrivateKey = null as any;
utilities.lazyLoad(exports, ["TlsPrivateKey"], () => require("./tlsPrivateKey"));

export { TlsSubscriptionArgs, TlsSubscriptionState } from "./tlsSubscription";
export type TlsSubscription = import("./tlsSubscription").TlsSubscription;
export const TlsSubscription: typeof import("./tlsSubscription").TlsSubscription = null as any;
utilities.lazyLoad(exports, ["TlsSubscription"], () => require("./tlsSubscription"));

export { TlsSubscriptionValidationArgs, TlsSubscriptionValidationState } from "./tlsSubscriptionValidation";
export type TlsSubscriptionValidation = import("./tlsSubscriptionValidation").TlsSubscriptionValidation;
export const TlsSubscriptionValidation: typeof import("./tlsSubscriptionValidation").TlsSubscriptionValidation = null as any;
utilities.lazyLoad(exports, ["TlsSubscriptionValidation"], () => require("./tlsSubscriptionValidation"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "fastly:index/alert:Alert":
                return new Alert(name, <any>undefined, { urn })
            case "fastly:index/configstore:Configstore":
                return new Configstore(name, <any>undefined, { urn })
            case "fastly:index/configstoreEntries:ConfigstoreEntries":
                return new ConfigstoreEntries(name, <any>undefined, { urn })
            case "fastly:index/customDashboard:CustomDashboard":
                return new CustomDashboard(name, <any>undefined, { urn })
            case "fastly:index/domainV1:DomainV1":
                return new DomainV1(name, <any>undefined, { urn })
            case "fastly:index/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "fastly:index/kvstore:Kvstore":
                return new Kvstore(name, <any>undefined, { urn })
            case "fastly:index/ngwafAccountList:NgwafAccountList":
                return new NgwafAccountList(name, <any>undefined, { urn })
            case "fastly:index/ngwafAccountRule:NgwafAccountRule":
                return new NgwafAccountRule(name, <any>undefined, { urn })
            case "fastly:index/ngwafAccountSignal:NgwafAccountSignal":
                return new NgwafAccountSignal(name, <any>undefined, { urn })
            case "fastly:index/ngwafAlertDatadogIntegration:NgwafAlertDatadogIntegration":
                return new NgwafAlertDatadogIntegration(name, <any>undefined, { urn })
            case "fastly:index/ngwafAlertJiraIntegration:NgwafAlertJiraIntegration":
                return new NgwafAlertJiraIntegration(name, <any>undefined, { urn })
            case "fastly:index/ngwafAlertMailingListIntegration:NgwafAlertMailingListIntegration":
                return new NgwafAlertMailingListIntegration(name, <any>undefined, { urn })
            case "fastly:index/ngwafAlertMicrosoftTeamsIntegration:NgwafAlertMicrosoftTeamsIntegration":
                return new NgwafAlertMicrosoftTeamsIntegration(name, <any>undefined, { urn })
            case "fastly:index/ngwafAlertOpsgenieIntegration:NgwafAlertOpsgenieIntegration":
                return new NgwafAlertOpsgenieIntegration(name, <any>undefined, { urn })
            case "fastly:index/ngwafAlertPagerdutyIntegration:NgwafAlertPagerdutyIntegration":
                return new NgwafAlertPagerdutyIntegration(name, <any>undefined, { urn })
            case "fastly:index/ngwafAlertSlackIntegration:NgwafAlertSlackIntegration":
                return new NgwafAlertSlackIntegration(name, <any>undefined, { urn })
            case "fastly:index/ngwafAlertWebhookIntegration:NgwafAlertWebhookIntegration":
                return new NgwafAlertWebhookIntegration(name, <any>undefined, { urn })
            case "fastly:index/ngwafRedaction:NgwafRedaction":
                return new NgwafRedaction(name, <any>undefined, { urn })
            case "fastly:index/ngwafThresholds:NgwafThresholds":
                return new NgwafThresholds(name, <any>undefined, { urn })
            case "fastly:index/ngwafVirtualPatches:NgwafVirtualPatches":
                return new NgwafVirtualPatches(name, <any>undefined, { urn })
            case "fastly:index/ngwafWorkspace:NgwafWorkspace":
                return new NgwafWorkspace(name, <any>undefined, { urn })
            case "fastly:index/ngwafWorkspaceList:NgwafWorkspaceList":
                return new NgwafWorkspaceList(name, <any>undefined, { urn })
            case "fastly:index/ngwafWorkspaceRule:NgwafWorkspaceRule":
                return new NgwafWorkspaceRule(name, <any>undefined, { urn })
            case "fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal":
                return new NgwafWorkspaceSignal(name, <any>undefined, { urn })
            case "fastly:index/objectStorageAccessKeys:ObjectStorageAccessKeys":
                return new ObjectStorageAccessKeys(name, <any>undefined, { urn })
            case "fastly:index/secretstore:Secretstore":
                return new Secretstore(name, <any>undefined, { urn })
            case "fastly:index/serviceACLEntries:ServiceACLEntries":
                return new ServiceACLEntries(name, <any>undefined, { urn })
            case "fastly:index/serviceAuthorization:ServiceAuthorization":
                return new ServiceAuthorization(name, <any>undefined, { urn })
            case "fastly:index/serviceCompute:ServiceCompute":
                return new ServiceCompute(name, <any>undefined, { urn })
            case "fastly:index/serviceDictionaryItems:ServiceDictionaryItems":
                return new ServiceDictionaryItems(name, <any>undefined, { urn })
            case "fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent":
                return new ServiceDynamicSnippetContent(name, <any>undefined, { urn })
            case "fastly:index/serviceVcl:ServiceVcl":
                return new ServiceVcl(name, <any>undefined, { urn })
            case "fastly:index/tlsActivation:TlsActivation":
                return new TlsActivation(name, <any>undefined, { urn })
            case "fastly:index/tlsCertificate:TlsCertificate":
                return new TlsCertificate(name, <any>undefined, { urn })
            case "fastly:index/tlsMutualAuthentication:TlsMutualAuthentication":
                return new TlsMutualAuthentication(name, <any>undefined, { urn })
            case "fastly:index/tlsPlatformCertificate:TlsPlatformCertificate":
                return new TlsPlatformCertificate(name, <any>undefined, { urn })
            case "fastly:index/tlsPrivateKey:TlsPrivateKey":
                return new TlsPrivateKey(name, <any>undefined, { urn })
            case "fastly:index/tlsSubscription:TlsSubscription":
                return new TlsSubscription(name, <any>undefined, { urn })
            case "fastly:index/tlsSubscriptionValidation:TlsSubscriptionValidation":
                return new TlsSubscriptionValidation(name, <any>undefined, { urn })
            case "fastly:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("fastly", "index/alert", _module)
pulumi.runtime.registerResourceModule("fastly", "index/configstore", _module)
pulumi.runtime.registerResourceModule("fastly", "index/configstoreEntries", _module)
pulumi.runtime.registerResourceModule("fastly", "index/customDashboard", _module)
pulumi.runtime.registerResourceModule("fastly", "index/domainV1", _module)
pulumi.runtime.registerResourceModule("fastly", "index/integration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/kvstore", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAccountList", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAccountRule", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAccountSignal", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAlertDatadogIntegration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAlertJiraIntegration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAlertMailingListIntegration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAlertMicrosoftTeamsIntegration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAlertOpsgenieIntegration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAlertPagerdutyIntegration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAlertSlackIntegration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafAlertWebhookIntegration", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafRedaction", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafThresholds", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafVirtualPatches", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafWorkspace", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafWorkspaceList", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafWorkspaceRule", _module)
pulumi.runtime.registerResourceModule("fastly", "index/ngwafWorkspaceSignal", _module)
pulumi.runtime.registerResourceModule("fastly", "index/objectStorageAccessKeys", _module)
pulumi.runtime.registerResourceModule("fastly", "index/secretstore", _module)
pulumi.runtime.registerResourceModule("fastly", "index/serviceACLEntries", _module)
pulumi.runtime.registerResourceModule("fastly", "index/serviceAuthorization", _module)
pulumi.runtime.registerResourceModule("fastly", "index/serviceCompute", _module)
pulumi.runtime.registerResourceModule("fastly", "index/serviceDictionaryItems", _module)
pulumi.runtime.registerResourceModule("fastly", "index/serviceDynamicSnippetContent", _module)
pulumi.runtime.registerResourceModule("fastly", "index/serviceVcl", _module)
pulumi.runtime.registerResourceModule("fastly", "index/tlsActivation", _module)
pulumi.runtime.registerResourceModule("fastly", "index/tlsCertificate", _module)
pulumi.runtime.registerResourceModule("fastly", "index/tlsMutualAuthentication", _module)
pulumi.runtime.registerResourceModule("fastly", "index/tlsPlatformCertificate", _module)
pulumi.runtime.registerResourceModule("fastly", "index/tlsPrivateKey", _module)
pulumi.runtime.registerResourceModule("fastly", "index/tlsSubscription", _module)
pulumi.runtime.registerResourceModule("fastly", "index/tlsSubscriptionValidation", _module)
pulumi.runtime.registerResourceModule("fastly", "index/user", _module)
pulumi.runtime.registerResourcePackage("fastly", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:fastly") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
