// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * This is an example of the import command being applied to the resource named `fastly_service_dictionary_items.items` The resource ID is a combined value of the `service_id` and `dictionary_id` separated by a forward slash.
 *
 * ```sh
 *  $ pulumi import fastly:index/serviceDictionaryItems:ServiceDictionaryItems items xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
 * ```
 *
 *  If Terraform is already managing remote dictionary items against a resource being imported then the user will be asked to remove it from the existing Terraform state.
 *
 *  The following is an example of the Terraform state command to remove the resource named `fastly_service_dictionary_items.items` from the Terraform state file. $ terraform state rm fastly_service_dictionary_items.items
 */
export class ServiceDictionaryItems extends pulumi.CustomResource {
    /**
     * Get an existing ServiceDictionaryItems resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceDictionaryItemsState, opts?: pulumi.CustomResourceOptions): ServiceDictionaryItems {
        return new ServiceDictionaryItems(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceDictionaryItems:ServiceDictionaryItems';

    /**
     * Returns true if the given object is an instance of ServiceDictionaryItems.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceDictionaryItems {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceDictionaryItems.__pulumiType;
    }

    /**
     * The ID of the dictionary that the items belong to
     */
    public readonly dictionaryId!: pulumi.Output<string>;
    /**
     * A map representing an entry in the dictionary, (key/value)
     */
    public readonly items!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
     */
    public readonly manageItems!: pulumi.Output<boolean | undefined>;
    /**
     * The ID of the service that the dictionary belongs to
     */
    public readonly serviceId!: pulumi.Output<string>;

    /**
     * Create a ServiceDictionaryItems resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceDictionaryItemsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceDictionaryItemsArgs | ServiceDictionaryItemsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceDictionaryItemsState | undefined;
            resourceInputs["dictionaryId"] = state ? state.dictionaryId : undefined;
            resourceInputs["items"] = state ? state.items : undefined;
            resourceInputs["manageItems"] = state ? state.manageItems : undefined;
            resourceInputs["serviceId"] = state ? state.serviceId : undefined;
        } else {
            const args = argsOrState as ServiceDictionaryItemsArgs | undefined;
            if ((!args || args.dictionaryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dictionaryId'");
            }
            if ((!args || args.serviceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceId'");
            }
            resourceInputs["dictionaryId"] = args ? args.dictionaryId : undefined;
            resourceInputs["items"] = args ? args.items : undefined;
            resourceInputs["manageItems"] = args ? args.manageItems : undefined;
            resourceInputs["serviceId"] = args ? args.serviceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceDictionaryItems.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceDictionaryItems resources.
 */
export interface ServiceDictionaryItemsState {
    /**
     * The ID of the dictionary that the items belong to
     */
    dictionaryId?: pulumi.Input<string>;
    /**
     * A map representing an entry in the dictionary, (key/value)
     */
    items?: pulumi.Input<{[key: string]: any}>;
    /**
     * Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
     */
    manageItems?: pulumi.Input<boolean>;
    /**
     * The ID of the service that the dictionary belongs to
     */
    serviceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceDictionaryItems resource.
 */
export interface ServiceDictionaryItemsArgs {
    /**
     * The ID of the dictionary that the items belong to
     */
    dictionaryId: pulumi.Input<string>;
    /**
     * A map representing an entry in the dictionary, (key/value)
     */
    items?: pulumi.Input<{[key: string]: any}>;
    /**
     * Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
     */
    manageItems?: pulumi.Input<boolean>;
    /**
     * The ID of the service that the dictionary belongs to
     */
    serviceId: pulumi.Input<string>;
}
