// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Uploads a TLS certificate to the Fastly Platform TLS service.
 *
 * > Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate.
 *
 * ## Import
 *
 * A certificate can be imported using its Fastly certificate ID, e.g.
 *
 * ```sh
 *  $ pulumi import fastly:index/tlsPlatformCertificate:TlsPlatformCertificate demo xxxxxxxxxxx
 * ```
 */
export class TlsPlatformCertificate extends pulumi.CustomResource {
    /**
     * Get an existing TlsPlatformCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsPlatformCertificateState, opts?: pulumi.CustomResourceOptions): TlsPlatformCertificate {
        return new TlsPlatformCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/tlsPlatformCertificate:TlsPlatformCertificate';

    /**
     * Returns true if the given object is an instance of TlsPlatformCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsPlatformCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsPlatformCertificate.__pulumiType;
    }

    /**
     * Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
     */
    public readonly allowUntrustedRoot!: pulumi.Output<boolean | undefined>;
    /**
     * PEM-formatted certificate.
     */
    public readonly certificateBody!: pulumi.Output<string>;
    /**
     * ID of TLS configuration to be used to terminate TLS traffic.
     */
    public readonly configurationId!: pulumi.Output<string>;
    /**
     * Timestamp (GMT) when the certificate was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.
     */
    public /*out*/ readonly domains!: pulumi.Output<string[]>;
    /**
     * PEM-formatted certificate chain from the `certificateBody` to its root.
     */
    public readonly intermediatesBlob!: pulumi.Output<string>;
    /**
     * Timestamp (GMT) when the certificate will expire.
     */
    public /*out*/ readonly notAfter!: pulumi.Output<string>;
    /**
     * Timestamp (GMT) when the certificate will become valid.
     */
    public /*out*/ readonly notBefore!: pulumi.Output<string>;
    /**
     * A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     */
    public /*out*/ readonly replace!: pulumi.Output<boolean>;
    /**
     * Timestamp (GMT) when the certificate was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a TlsPlatformCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsPlatformCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsPlatformCertificateArgs | TlsPlatformCertificateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsPlatformCertificateState | undefined;
            inputs["allowUntrustedRoot"] = state ? state.allowUntrustedRoot : undefined;
            inputs["certificateBody"] = state ? state.certificateBody : undefined;
            inputs["configurationId"] = state ? state.configurationId : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["domains"] = state ? state.domains : undefined;
            inputs["intermediatesBlob"] = state ? state.intermediatesBlob : undefined;
            inputs["notAfter"] = state ? state.notAfter : undefined;
            inputs["notBefore"] = state ? state.notBefore : undefined;
            inputs["replace"] = state ? state.replace : undefined;
            inputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as TlsPlatformCertificateArgs | undefined;
            if ((!args || args.certificateBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateBody'");
            }
            if ((!args || args.configurationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationId'");
            }
            if ((!args || args.intermediatesBlob === undefined) && !opts.urn) {
                throw new Error("Missing required property 'intermediatesBlob'");
            }
            inputs["allowUntrustedRoot"] = args ? args.allowUntrustedRoot : undefined;
            inputs["certificateBody"] = args ? args.certificateBody : undefined;
            inputs["configurationId"] = args ? args.configurationId : undefined;
            inputs["intermediatesBlob"] = args ? args.intermediatesBlob : undefined;
            inputs["createdAt"] = undefined /*out*/;
            inputs["domains"] = undefined /*out*/;
            inputs["notAfter"] = undefined /*out*/;
            inputs["notBefore"] = undefined /*out*/;
            inputs["replace"] = undefined /*out*/;
            inputs["updatedAt"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(TlsPlatformCertificate.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsPlatformCertificate resources.
 */
export interface TlsPlatformCertificateState {
    /**
     * Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
     */
    readonly allowUntrustedRoot?: pulumi.Input<boolean>;
    /**
     * PEM-formatted certificate.
     */
    readonly certificateBody?: pulumi.Input<string>;
    /**
     * ID of TLS configuration to be used to terminate TLS traffic.
     */
    readonly configurationId?: pulumi.Input<string>;
    /**
     * Timestamp (GMT) when the certificate was created.
     */
    readonly createdAt?: pulumi.Input<string>;
    /**
     * All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.
     */
    readonly domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * PEM-formatted certificate chain from the `certificateBody` to its root.
     */
    readonly intermediatesBlob?: pulumi.Input<string>;
    /**
     * Timestamp (GMT) when the certificate will expire.
     */
    readonly notAfter?: pulumi.Input<string>;
    /**
     * Timestamp (GMT) when the certificate will become valid.
     */
    readonly notBefore?: pulumi.Input<string>;
    /**
     * A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     */
    readonly replace?: pulumi.Input<boolean>;
    /**
     * Timestamp (GMT) when the certificate was last updated.
     */
    readonly updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TlsPlatformCertificate resource.
 */
export interface TlsPlatformCertificateArgs {
    /**
     * Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
     */
    readonly allowUntrustedRoot?: pulumi.Input<boolean>;
    /**
     * PEM-formatted certificate.
     */
    readonly certificateBody: pulumi.Input<string>;
    /**
     * ID of TLS configuration to be used to terminate TLS traffic.
     */
    readonly configurationId: pulumi.Input<string>;
    /**
     * PEM-formatted certificate chain from the `certificateBody` to its root.
     */
    readonly intermediatesBlob: pulumi.Input<string>;
}
