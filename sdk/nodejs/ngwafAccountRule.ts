// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Fastly Next-Gen WAF Account Rule.\
 * Account-level rules apply across one or more workspaces and are useful for defining shared or global WAF logic.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const example = new fastly.NgwafAccountRule("example", {
 *     appliesTos: ["*"],
 *     type: "request",
 *     description: "example",
 *     enabled: true,
 *     requestLogging: "sampled",
 *     groupOperator: "all",
 *     actions: [{
 *         type: "block",
 *     }],
 *     conditions: [{
 *         field: "ip",
 *         operator: "equals",
 *         value: "1.2.3.4",
 *     }],
 *     groupConditions: [{
 *         groupOperator: "all",
 *         conditions: [{
 *             field: "method",
 *             operator: "equals",
 *             value: "POST",
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF account rules can be imported using just the rule ID, e.g.:
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafAccountRule:NgwafAccountRule demo <ruleID>
 * ```
 */
export class NgwafAccountRule extends pulumi.CustomResource {
    /**
     * Get an existing NgwafAccountRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafAccountRuleState, opts?: pulumi.CustomResourceOptions): NgwafAccountRule {
        return new NgwafAccountRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafAccountRule:NgwafAccountRule';

    /**
     * Returns true if the given object is an instance of NgwafAccountRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafAccountRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafAccountRule.__pulumiType;
    }

    /**
     * List of actions to perform when the rule matches.
     */
    declare public readonly actions: pulumi.Output<outputs.NgwafAccountRuleAction[]>;
    /**
     * The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
     */
    declare public readonly appliesTos: pulumi.Output<string[]>;
    /**
     * Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
     */
    declare public readonly conditions: pulumi.Output<outputs.NgwafAccountRuleCondition[] | undefined>;
    /**
     * The description of the rule.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Whether the rule is currently enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
     */
    declare public readonly groupConditions: pulumi.Output<outputs.NgwafAccountRuleGroupCondition[] | undefined>;
    /**
     * Logical operator to apply to group conditions. Accepted values are `any` and `all`.
     */
    declare public readonly groupOperator: pulumi.Output<string | undefined>;
    /**
     * Block specifically for rate*limit rules.
     */
    declare public readonly rateLimit: pulumi.Output<outputs.NgwafAccountRuleRateLimit | undefined>;
    /**
     * Logging behavior for matching requests. Accepted values are `sampled` and `none`.
     */
    declare public readonly requestLogging: pulumi.Output<string | undefined>;
    /**
     * The type of the rule. Accepted values are `request` and `signal`.
     */
    declare public readonly type: pulumi.Output<string>;

    /**
     * Create a NgwafAccountRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafAccountRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafAccountRuleArgs | NgwafAccountRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafAccountRuleState | undefined;
            resourceInputs["actions"] = state?.actions;
            resourceInputs["appliesTos"] = state?.appliesTos;
            resourceInputs["conditions"] = state?.conditions;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["groupConditions"] = state?.groupConditions;
            resourceInputs["groupOperator"] = state?.groupOperator;
            resourceInputs["rateLimit"] = state?.rateLimit;
            resourceInputs["requestLogging"] = state?.requestLogging;
            resourceInputs["type"] = state?.type;
        } else {
            const args = argsOrState as NgwafAccountRuleArgs | undefined;
            if (args?.actions === undefined && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if (args?.appliesTos === undefined && !opts.urn) {
                throw new Error("Missing required property 'appliesTos'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["actions"] = args?.actions;
            resourceInputs["appliesTos"] = args?.appliesTos;
            resourceInputs["conditions"] = args?.conditions;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["groupConditions"] = args?.groupConditions;
            resourceInputs["groupOperator"] = args?.groupOperator;
            resourceInputs["rateLimit"] = args?.rateLimit;
            resourceInputs["requestLogging"] = args?.requestLogging;
            resourceInputs["type"] = args?.type;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgwafAccountRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafAccountRule resources.
 */
export interface NgwafAccountRuleState {
    /**
     * List of actions to perform when the rule matches.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.NgwafAccountRuleAction>[]>;
    /**
     * The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
     */
    appliesTos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.NgwafAccountRuleCondition>[]>;
    /**
     * The description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the rule is currently enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
     */
    groupConditions?: pulumi.Input<pulumi.Input<inputs.NgwafAccountRuleGroupCondition>[]>;
    /**
     * Logical operator to apply to group conditions. Accepted values are `any` and `all`.
     */
    groupOperator?: pulumi.Input<string>;
    /**
     * Block specifically for rate*limit rules.
     */
    rateLimit?: pulumi.Input<inputs.NgwafAccountRuleRateLimit>;
    /**
     * Logging behavior for matching requests. Accepted values are `sampled` and `none`.
     */
    requestLogging?: pulumi.Input<string>;
    /**
     * The type of the rule. Accepted values are `request` and `signal`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafAccountRule resource.
 */
export interface NgwafAccountRuleArgs {
    /**
     * List of actions to perform when the rule matches.
     */
    actions: pulumi.Input<pulumi.Input<inputs.NgwafAccountRuleAction>[]>;
    /**
     * The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
     */
    appliesTos: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.NgwafAccountRuleCondition>[]>;
    /**
     * The description of the rule.
     */
    description: pulumi.Input<string>;
    /**
     * Whether the rule is currently enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
     */
    groupConditions?: pulumi.Input<pulumi.Input<inputs.NgwafAccountRuleGroupCondition>[]>;
    /**
     * Logical operator to apply to group conditions. Accepted values are `any` and `all`.
     */
    groupOperator?: pulumi.Input<string>;
    /**
     * Block specifically for rate*limit rules.
     */
    rateLimit?: pulumi.Input<inputs.NgwafAccountRuleRateLimit>;
    /**
     * Logging behavior for matching requests. Accepted values are `sampled` and `none`.
     */
    requestLogging?: pulumi.Input<string>;
    /**
     * The type of the rule. Accepted values are `request` and `signal`.
     */
    type: pulumi.Input<string>;
}
