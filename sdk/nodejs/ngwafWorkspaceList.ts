// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Fastly Next-Gen WAF **List** resource scoped to a specific **workspace**.
 *
 * Workspace-scoped lists are local to a workspace and typically used within workspace-specific rules.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const example = new fastly.NgwafWorkspace("example", {
 *     name: "example",
 *     description: "Workspace with custom list",
 *     mode: "block",
 *     ipAnonymization: "hashed",
 *     clientIpHeaders: [
 *         "X-Forwarded-For",
 *         "X-Real-IP",
 *     ],
 *     defaultBlockingResponseCode: 403,
 *     attackSignalThresholds: {
 *         oneMinute: 100,
 *         tenMinutes: 500,
 *         oneHour: 1000,
 *         immediate: true,
 *     },
 * });
 * const exampleNgwafWorkspaceList = new fastly.NgwafWorkspaceList("example", {
 *     workspaceId: example.id,
 *     name: "local-allowlist",
 *     description: "IP allowlist for this workspace",
 *     type: "ip",
 *     entries: [
 *         "192.168.0.1",
 *         "10.0.0.1",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF workspace-scoped lists can be imported using the format `<workspaceID>/<listID>`, e.g.:
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafWorkspaceList:NgwafWorkspaceList demo <workspaceID>/<listID>
 * ```
 */
export class NgwafWorkspaceList extends pulumi.CustomResource {
    /**
     * Get an existing NgwafWorkspaceList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafWorkspaceListState, opts?: pulumi.CustomResourceOptions): NgwafWorkspaceList {
        return new NgwafWorkspaceList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafWorkspaceList:NgwafWorkspaceList';

    /**
     * Returns true if the given object is an instance of NgwafWorkspaceList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafWorkspaceList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafWorkspaceList.__pulumiType;
    }

    /**
     * The description of the list.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The values in the list.
     */
    declare public readonly entries: pulumi.Output<string[]>;
    /**
     * The name of the list.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
     */
    declare public readonly type: pulumi.Output<string>;
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a NgwafWorkspaceList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafWorkspaceListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafWorkspaceListArgs | NgwafWorkspaceListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafWorkspaceListState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["entries"] = state?.entries;
            resourceInputs["name"] = state?.name;
            resourceInputs["type"] = state?.type;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as NgwafWorkspaceListArgs | undefined;
            if (args?.entries === undefined && !opts.urn) {
                throw new Error("Missing required property 'entries'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["entries"] = args?.entries;
            resourceInputs["name"] = args?.name;
            resourceInputs["type"] = args?.type;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgwafWorkspaceList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafWorkspaceList resources.
 */
export interface NgwafWorkspaceListState {
    /**
     * The description of the list.
     */
    description?: pulumi.Input<string>;
    /**
     * The values in the list.
     */
    entries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the list.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
     */
    type?: pulumi.Input<string>;
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafWorkspaceList resource.
 */
export interface NgwafWorkspaceListArgs {
    /**
     * The description of the list.
     */
    description?: pulumi.Input<string>;
    /**
     * The values in the list.
     */
    entries: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the list.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
     */
    type: pulumi.Input<string>;
    workspaceId: pulumi.Input<string>;
}
