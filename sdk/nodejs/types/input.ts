// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertDimensions {
    /**
     * Names of a subset of domains that the alert monitors.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Addresses of a subset of backends that the alert monitors.
     */
    origins?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface AlertEvaluationStrategy {
    /**
     * Threshold for the denominator value used in evaluations that calculate a rate or ratio. Usually used to filter out noise.
     */
    ignoreBelow?: pulumi.Input<number>;
    /**
     * The length of time to evaluate whether the conditions have been met. The data is polled every minute. One of: `2m`, `3m`, `5m`, `15m`, `30m`.
     */
    period: pulumi.Input<string>;
    /**
     * Threshold used to alert.
     */
    threshold: pulumi.Input<number>;
    /**
     * Type of strategy to use to evaluate. One of: `aboveThreshold`, `allAboveThreshold`, `belowThreshold`, `percentAbsolute`, `percentDecrease`, `percentIncrease`.
     */
    type: pulumi.Input<string>;
}

export interface CustomDashboardDashboardItem {
    /**
     * An object which describes the data to display.
     */
    dataSource: pulumi.Input<inputs.CustomDashboardDashboardItemDataSource>;
    /**
     * Dashboard item identifier (alphanumeric). Must be unique, relative to other items in the same dashboard.
     */
    id: pulumi.Input<string>;
    /**
     * The number of columns for the dashboard item to span. Dashboards are rendered on a 12-column grid on "desktop" screen sizes.
     */
    span?: pulumi.Input<number>;
    /**
     * A human-readable subtitle for the dashboard item. Often a description of the visualization.
     */
    subtitle: pulumi.Input<string>;
    /**
     * A human-readable title for the dashboard item.
     */
    title: pulumi.Input<string>;
    /**
     * An object which describes the data visualization to display.
     */
    visualization: pulumi.Input<inputs.CustomDashboardDashboardItemVisualization>;
}

export interface CustomDashboardDashboardItemDataSource {
    /**
     * Configuration options for the selected data source.
     */
    config: pulumi.Input<inputs.CustomDashboardDashboardItemDataSourceConfig>;
    /**
     * The source of the data to display. One of: `stats.edge`, `stats.domain`, `stats.origin`.
     */
    type: pulumi.Input<string>;
}

export interface CustomDashboardDashboardItemDataSourceConfig {
    /**
     * The metrics to visualize. Valid options are defined by the selected data source: [stats.edge](https://www.fastly.com/documentation/reference/api/observability/custom-dashboards/metrics/edge/), [stats.domain](https://www.fastly.com/documentation/reference/api/observability/custom-dashboards/metrics/domain/), [stats.origin](https://www.fastly.com/documentation/reference/api/observability/custom-dashboards/metrics/origin/).
     */
    metrics: pulumi.Input<pulumi.Input<string>[]>;
}

export interface CustomDashboardDashboardItemVisualization {
    /**
     * Configuration options for the selected data source.
     */
    config: pulumi.Input<inputs.CustomDashboardDashboardItemVisualizationConfig>;
    /**
     * The type of visualization to display. One of: `chart`.
     */
    type: pulumi.Input<string>;
}

export interface CustomDashboardDashboardItemVisualizationConfig {
    /**
     * The aggregation function to apply to the dataset. One of: `avg`, `sum`, `min`, `max`, `latest`, `p95`.
     */
    calculationMethod?: pulumi.Input<string>;
    /**
     * The units to use to format the data. One of: `number`, `bytes`, `percent`, `requests`, `responses`, `seconds`, `milliseconds`, `ratio`, `bitrate`.
     */
    format?: pulumi.Input<string>;
    /**
     * The type of chart to display. One of: `line`, `bar`, `single-metric`, `donut`.
     */
    plotType: pulumi.Input<string>;
}

export interface ServiceACLEntriesEntry {
    /**
     * A personal freeform descriptive note
     */
    comment?: pulumi.Input<string>;
    /**
     * The unique ID of the entry
     */
    id?: pulumi.Input<string>;
    /**
     * An IP address that is the focus for the ACL
     */
    ip: pulumi.Input<string>;
    /**
     * A boolean that will negate the match if true
     */
    negated?: pulumi.Input<boolean>;
    /**
     * An optional subnet mask applied to the IP address
     */
    subnet?: pulumi.Input<string>;
}

export interface ServiceComputeBackend {
    /**
     * An IPv4, hostname, or IPv6 address for the Backend
     */
    address: pulumi.Input<string>;
    /**
     * How long to wait between bytes in milliseconds. Default `10000`
     */
    betweenBytesTimeout?: pulumi.Input<number>;
    /**
     * How long to wait for a timeout in milliseconds. Default `1000`
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * Number of errors to allow before the Backend is marked as down. Default `0`
     */
    errorThreshold?: pulumi.Input<number>;
    /**
     * How long to wait for the first bytes in milliseconds. Default `15000`
     */
    firstByteTimeout?: pulumi.Input<number>;
    /**
     * Name of a defined `healthcheck` to assign to this backend
     */
    healthcheck?: pulumi.Input<string>;
    /**
     * How long in seconds to keep a persistent connection to the backend between requests.
     */
    keepaliveTime?: pulumi.Input<number>;
    /**
     * Maximum number of connections for this Backend. Default `200`
     */
    maxConn?: pulumi.Input<number>;
    /**
     * Maximum allowed TLS version on SSL connections to this backend.
     */
    maxTlsVersion?: pulumi.Input<string>;
    /**
     * Minimum allowed TLS version on SSL connections to this backend.
     */
    minTlsVersion?: pulumi.Input<string>;
    /**
     * Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The hostname to override the Host header
     */
    overrideHost?: pulumi.Input<string>;
    /**
     * The port number on which the Backend responds. Default `80`
     */
    port?: pulumi.Input<number>;
    /**
     * Value that when shared across backends will enable those backends to share the same health check.
     */
    shareKey?: pulumi.Input<string>;
    /**
     * The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
     */
    shield?: pulumi.Input<string>;
    /**
     * CA certificate attached to origin.
     */
    sslCaCert?: pulumi.Input<string>;
    /**
     * Configure certificate validation. Does not affect SNI at all
     */
    sslCertHostname?: pulumi.Input<string>;
    /**
     * Be strict about checking SSL certs. Default `true`
     */
    sslCheckCert?: pulumi.Input<boolean>;
    /**
     * Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
     */
    sslCiphers?: pulumi.Input<string>;
    /**
     * Client certificate attached to origin. Used when connecting to the backend
     */
    sslClientCert?: pulumi.Input<string>;
    /**
     * Client key attached to origin. Used when connecting to the backend
     */
    sslClientKey?: pulumi.Input<string>;
    /**
     * Configure SNI in the TLS handshake. Does not affect cert validation at all
     */
    sslSniHostname?: pulumi.Input<string>;
    /**
     * Whether or not to use SSL to reach the Backend. Default `false`
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
     */
    weight?: pulumi.Input<number>;
}

export interface ServiceComputeDictionary {
    /**
     * The ID of the dictionary
     */
    dictionaryId?: pulumi.Input<string>;
    /**
     * Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
     */
    name: pulumi.Input<string>;
    writeOnly?: pulumi.Input<boolean>;
}

export interface ServiceComputeDomain {
    /**
     * An optional comment about the Domain.
     */
    comment?: pulumi.Input<string>;
    /**
     * The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
     */
    name: pulumi.Input<string>;
}

export interface ServiceComputeImageOptimizerDefaultSettings {
    /**
     * Enables GIF to MP4 transformations on this service.
     */
    allowVideo?: pulumi.Input<boolean>;
    /**
     * The default quality to use with JPEG output. This can be overridden with the "quality" parameter on specific image optimizer requests.
     */
    jpegQuality?: pulumi.Input<number>;
    /**
     * The default type of JPEG output to use. This can be overridden with "format=bjpeg" and "format=pjpeg" on specific image optimizer requests. Valid values are `auto`, `baseline` and `progressive`.
     * 	- auto: Match the input JPEG type, or baseline if transforming from a non-JPEG input.
     * 	- baseline: Output baseline JPEG images
     * 	- progressive: Output progressive JPEG images
     */
    jpegType?: pulumi.Input<string>;
    /**
     * Used by the provider to identify modified settings. Changing this value will force the entire block to be deleted, then recreated.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of filter to use while resizing an image. Valid values are `lanczos3`, `lanczos2`, `bicubic`, `bilinear` and `nearest`.
     * 	- lanczos3: A Lanczos filter with a kernel size of 3. Lanczos filters can detect edges and linear features within an image, providing the best possible reconstruction.
     * 	- lanczos2: A Lanczos filter with a kernel size of 2.
     * 	- bicubic: A filter using an average of a 4x4 environment of pixels, weighing the innermost pixels higher.
     * 	- bilinear: A filter using an average of a 2x2 environment of pixels.
     * 	- nearest: A filter using the value of nearby translated pixel values. Preserves hard edges.
     */
    resizeFilter?: pulumi.Input<string>;
    /**
     * Whether or not we should allow output images to render at sizes larger than input.
     */
    upscale?: pulumi.Input<boolean>;
    /**
     * Controls whether or not to default to WebP output when the client supports it. This is equivalent to adding "auto=webp" to all image optimizer requests.
     */
    webp?: pulumi.Input<boolean>;
    /**
     * The default quality to use with WebP output. This can be overridden with the second option in the "quality" URL parameter on specific image optimizer requests.
     */
    webpQuality?: pulumi.Input<number>;
}

export interface ServiceComputeLoggingBigquery {
    /**
     * The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The ID of your BigQuery dataset
     */
    dataset: pulumi.Input<string>;
    /**
     * The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
     */
    email: pulumi.Input<string>;
    /**
     * A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The ID of your GCP project
     */
    projectId: pulumi.Input<string>;
    /**
     * The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
     */
    secretKey: pulumi.Input<string>;
    /**
     * The ID of your BigQuery table
     */
    table: pulumi.Input<string>;
    /**
     * BigQuery table name suffix template
     */
    template?: pulumi.Input<string>;
}

export interface ServiceComputeLoggingBlobstorage {
    /**
     * The unique Azure Blob Storage namespace in which your data objects are stored
     */
    accountName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * The name of the Azure Blob Storage container in which to store logs
     */
    container: pulumi.Input<string>;
    /**
     * Maximum size of an uploaded log file, if non-zero.
     */
    fileMaxBytes?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred in seconds. Default `3600`
     */
    period?: pulumi.Input<number>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
     */
    sasToken: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
}

export interface ServiceComputeLoggingCloudfile {
    /**
     * Your Cloud File account access key
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of your Cloud Files container
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The path to upload logs to
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: pulumi.Input<number>;
    /**
     * The PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
     */
    region?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * The username for your Cloud Files account
     */
    user: pulumi.Input<string>;
}

export interface ServiceComputeLoggingDatadog {
    /**
     * The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
     */
    region?: pulumi.Input<string>;
    /**
     * The API key from your Datadog account
     */
    token: pulumi.Input<string>;
}

export interface ServiceComputeLoggingDigitalocean {
    /**
     * Your DigitalOcean Spaces account access key
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of the DigitalOcean Space
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
     */
    domain?: pulumi.Input<string>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The path to upload logs to
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: pulumi.Input<number>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Your DigitalOcean Spaces account secret key
     */
    secretKey: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
}

export interface ServiceComputeLoggingElasticsearch {
    /**
     * The name of the Elasticsearch index to send documents (logs) to
     */
    index: pulumi.Input<string>;
    /**
     * The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * BasicAuth password for Elasticsearch
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
     */
    pipeline?: pulumi.Input<string>;
    /**
     * The maximum number of logs sent in one request. Defaults to `0` for unbounded
     */
    requestMaxBytes?: pulumi.Input<number>;
    /**
     * The maximum number of bytes sent in one request. Defaults to `0` for unbounded
     */
    requestMaxEntries?: pulumi.Input<number>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * The Elasticsearch URL to stream logs to
     */
    url: pulumi.Input<string>;
    /**
     * BasicAuth username for Elasticsearch
     */
    user?: pulumi.Input<string>;
}

export interface ServiceComputeLoggingFtp {
    /**
     * The FTP address to stream logs to
     */
    address: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The password for the server (for anonymous use an email address)
     */
    password: pulumi.Input<string>;
    /**
     * The path to upload log files to. If the path ends in `/` then it is treated as a directory
     */
    path: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred, in seconds (Default `3600`)
     */
    period?: pulumi.Input<number>;
    /**
     * The port number. Default: `21`
     */
    port?: pulumi.Input<number>;
    /**
     * The PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * The username for the server (can be `anonymous`)
     */
    user: pulumi.Input<string>;
}

export interface ServiceComputeLoggingGc {
    /**
     * The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The name of the bucket in which to store the logs
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred, in seconds (Default 3600)
     */
    period?: pulumi.Input<number>;
    /**
     * The ID of your Google Cloud Platform project
     */
    projectId?: pulumi.Input<string>;
    /**
     * The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.
     */
    user?: pulumi.Input<string>;
}

export interface ServiceComputeLoggingGooglepubsub {
    /**
     * The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The ID of your Google Cloud Platform project
     */
    projectId: pulumi.Input<string>;
    /**
     * Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
     */
    secretKey: pulumi.Input<string>;
    /**
     * The Google Cloud Pub/Sub topic to which logs will be published
     */
    topic: pulumi.Input<string>;
    /**
     * Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
     */
    user: pulumi.Input<string>;
}

export interface ServiceComputeLoggingGrafanacloudlog {
    /**
     * The stream identifier as a JSON string
     */
    index: pulumi.Input<string>;
    /**
     * The unique name of the GrafanaCloudLogs logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The Access Policy Token key for your GrafanaCloudLogs account
     */
    token: pulumi.Input<string>;
    /**
     * The URL to stream logs to
     */
    url: pulumi.Input<string>;
    /**
     * The Grafana User ID
     */
    user: pulumi.Input<string>;
}

export interface ServiceComputeLoggingHeroku {
    /**
     * The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
     */
    token: pulumi.Input<string>;
    /**
     * The URL to stream logs to
     */
    url: pulumi.Input<string>;
}

export interface ServiceComputeLoggingHoneycomb {
    /**
     * The Honeycomb Dataset you want to log to
     */
    dataset: pulumi.Input<string>;
    /**
     * The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The Write Key from the Account page of your Honeycomb account
     */
    token: pulumi.Input<string>;
}

export interface ServiceComputeLoggingHttp {
    /**
     * Value of the `Content-Type` header sent with the request
     */
    contentType?: pulumi.Input<string>;
    /**
     * Custom header sent with the request
     */
    headerName?: pulumi.Input<string>;
    /**
     * Value of the custom header sent with the request
     */
    headerValue?: pulumi.Input<string>;
    /**
     * Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
     */
    jsonFormat?: pulumi.Input<string>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
     */
    method?: pulumi.Input<string>;
    /**
     * The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The maximum number of bytes sent in one request
     */
    requestMaxBytes?: pulumi.Input<number>;
    /**
     * The maximum number of logs sent in one request
     */
    requestMaxEntries?: pulumi.Input<number>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * Used during the TLS handshake to validate the certificate
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * URL that log data will be sent to. Must use the https protocol
     */
    url: pulumi.Input<string>;
}

export interface ServiceComputeLoggingKafka {
    /**
     * SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
     */
    authMethod?: pulumi.Input<string>;
    /**
     * A comma-separated list of IP addresses or hostnames of Kafka brokers
     */
    brokers: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
     */
    parseLogKeyvals?: pulumi.Input<boolean>;
    /**
     * SASL Pass
     */
    password?: pulumi.Input<string>;
    /**
     * Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
     */
    requestMaxBytes?: pulumi.Input<number>;
    /**
     * The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
     */
    requiredAcks?: pulumi.Input<string>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * The Kafka topic to send logs to
     */
    topic: pulumi.Input<string>;
    /**
     * Whether to use TLS for secure logging. Can be either `true` or `false`
     */
    useTls?: pulumi.Input<boolean>;
    /**
     * SASL User
     */
    user?: pulumi.Input<string>;
}

export interface ServiceComputeLoggingKinese {
    /**
     * The AWS access key to be used to write to the stream
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `accessKey` and `secretKey` are provided.
     */
    iamRole?: pulumi.Input<string>;
    /**
     * The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The AWS region the stream resides in. (Default: `us-east-1`)
     */
    region?: pulumi.Input<string>;
    /**
     * The AWS secret access key to authenticate with
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The Kinesis stream name
     */
    topic: pulumi.Input<string>;
}

export interface ServiceComputeLoggingLogentry {
    /**
     * The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The port number configured in Logentries
     */
    port?: pulumi.Input<number>;
    /**
     * Use token based authentication (https://logentries.com/doc/input-token/)
     */
    token: pulumi.Input<string>;
    /**
     * Whether to use TLS for secure logging
     */
    useTls?: pulumi.Input<boolean>;
}

export interface ServiceComputeLoggingLoggly {
    /**
     * The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
     */
    token: pulumi.Input<string>;
}

export interface ServiceComputeLoggingLogshuttle {
    /**
     * The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The data authentication token associated with this endpoint
     */
    token: pulumi.Input<string>;
    /**
     * Your Log Shuttle endpoint URL
     */
    url: pulumi.Input<string>;
}

export interface ServiceComputeLoggingNewrelic {
    /**
     * The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The region that log data will be sent to. Default: `US`
     */
    region?: pulumi.Input<string>;
    /**
     * The Insert API key from the Account page of your New Relic account
     */
    token: pulumi.Input<string>;
}

export interface ServiceComputeLoggingOpenstack {
    /**
     * Your OpenStack account access key
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of your OpenStack container
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred, in seconds. Default `3600`
     */
    period?: pulumi.Input<number>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * Your OpenStack auth url
     */
    url: pulumi.Input<string>;
    /**
     * The username for your OpenStack account
     */
    user: pulumi.Input<string>;
}

export interface ServiceComputeLoggingPapertrail {
    /**
     * The address of the Papertrail endpoint
     */
    address: pulumi.Input<string>;
    /**
     * A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The port associated with the address where the Papertrail endpoint can be accessed
     */
    port: pulumi.Input<number>;
}

export interface ServiceComputeLoggingS3 {
    /**
     * The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
     */
    acl?: pulumi.Input<string>;
    /**
     * The name of the bucket in which to store the logs
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
     */
    domain?: pulumi.Input<string>;
    /**
     * Maximum size of an uploaded log file, if non-zero.
     */
    fileMaxBytes?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred, in seconds. Default `3600`
     */
    period?: pulumi.Input<number>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The S3 storage class (redundancy level). Should be one of: `standard`, `intelligentTiering`, `standardIa`, `onezoneIa`, `glacier`, `glacierIr`, `deepArchive`, or `reducedRedundancy`
     */
    redundancy?: pulumi.Input<string>;
    /**
     * AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
     */
    s3AccessKey?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `accessKey` and `secretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
     */
    s3IamRole?: pulumi.Input<string>;
    /**
     * AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
     */
    s3SecretKey?: pulumi.Input<string>;
    /**
     * Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
     */
    serverSideEncryption?: pulumi.Input<string>;
    /**
     * Optional server-side KMS Key Id. Must be set if serverSideEncryption is set to `aws:kms`
     */
    serverSideEncryptionKmsKeyId?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
}

export interface ServiceComputeLoggingScalyr {
    /**
     * The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The name of the logfile field sent to Scalyr
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
     */
    region?: pulumi.Input<string>;
    /**
     * The token to use for authentication (https://www.scalyr.com/keys)
     */
    token: pulumi.Input<string>;
}

export interface ServiceComputeLoggingSftp {
    /**
     * The SFTP address to stream logs to
     */
    address: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
     */
    password?: pulumi.Input<string>;
    /**
     * The path to upload log files to. If the path ends in `/` then it is treated as a directory
     */
    path: pulumi.Input<string>;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: pulumi.Input<number>;
    /**
     * The port the SFTP service listens on. (Default: `22`)
     */
    port?: pulumi.Input<number>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
     */
    secretKey?: pulumi.Input<string>;
    /**
     * A list of host keys for all hosts we can connect to over SFTP
     */
    sshKnownHosts: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * The username for the server
     */
    user: pulumi.Input<string>;
}

export interface ServiceComputeLoggingSplunk {
    /**
     * A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format.
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format.
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * The Splunk token to be used for authentication
     */
    token: pulumi.Input<string>;
    /**
     * The Splunk URL to stream logs to
     */
    url: pulumi.Input<string>;
    /**
     * Whether to use TLS for secure logging. Default: `false`
     */
    useTls?: pulumi.Input<boolean>;
}

export interface ServiceComputeLoggingSumologic {
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The URL to Sumologic collector endpoint
     */
    url: pulumi.Input<string>;
}

export interface ServiceComputeLoggingSyslog {
    /**
     * A hostname or IPv4 address of the Syslog endpoint
     */
    address: pulumi.Input<string>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The port associated with the address where the Syslog endpoint can be accessed. Default `514`
     */
    port?: pulumi.Input<number>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * Used during the TLS handshake to validate the certificate
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * Whether to prepend each message with a specific token
     */
    token?: pulumi.Input<string>;
    /**
     * Whether to use TLS for secure logging. Default `false`
     */
    useTls?: pulumi.Input<boolean>;
}

export interface ServiceComputePackage {
    /**
     * The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
     */
    content?: pulumi.Input<string>;
    /**
     * The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
     */
    filename?: pulumi.Input<string>;
    /**
     * Used to trigger updates. Must be set to a SHA512 hash of all files (in sorted order) within the package. The usual way to set this is using the fastly.getPackageHash data source.
     */
    sourceCodeHash?: pulumi.Input<string>;
}

export interface ServiceComputeProductEnablement {
    /**
     * DDoS Protection product
     */
    ddosProtection?: pulumi.Input<inputs.ServiceComputeProductEnablementDdosProtection>;
    /**
     * Enable Fanout support
     */
    fanout?: pulumi.Input<boolean>;
    /**
     * Enable Log Explorer & Insights
     */
    logExplorerInsights?: pulumi.Input<boolean>;
    /**
     * Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
     */
    name?: pulumi.Input<string>;
    /**
     * Next-Gen WAF product
     */
    ngwaf?: pulumi.Input<inputs.ServiceComputeProductEnablementNgwaf>;
    /**
     * Enable WebSockets support
     */
    websockets?: pulumi.Input<boolean>;
}

export interface ServiceComputeProductEnablementDdosProtection {
    /**
     * Enable DDoS Protection support
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Operation mode
     */
    mode: pulumi.Input<string>;
}

export interface ServiceComputeProductEnablementNgwaf {
    /**
     * Enable Next-Gen WAF support
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The percentage of traffic to inspect
     */
    trafficRamp?: pulumi.Input<number>;
    /**
     * The workspace to link
     */
    workspaceId: pulumi.Input<string>;
}

export interface ServiceComputeResourceLink {
    /**
     * An alphanumeric string identifying the resource link.
     */
    linkId?: pulumi.Input<string>;
    /**
     * The name of the resource link.
     */
    name: pulumi.Input<string>;
    /**
     * The ID of the underlying linked resource.
     */
    resourceId: pulumi.Input<string>;
}

export interface ServiceVclAcl {
    /**
     * The ID of the ACL
     */
    aclId?: pulumi.Input<string>;
    /**
     * Allow the ACL to be deleted, even if it contains entries. Defaults to false.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
     */
    name: pulumi.Input<string>;
}

export interface ServiceVclBackend {
    /**
     * An IPv4, hostname, or IPv6 address for the Backend
     */
    address: pulumi.Input<string>;
    /**
     * Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `false`
     */
    autoLoadbalance?: pulumi.Input<boolean>;
    /**
     * How long to wait between bytes in milliseconds. Default `10000`
     */
    betweenBytesTimeout?: pulumi.Input<number>;
    /**
     * How long to wait for a timeout in milliseconds. Default `1000`
     */
    connectTimeout?: pulumi.Input<number>;
    /**
     * Number of errors to allow before the Backend is marked as down. Default `0`
     */
    errorThreshold?: pulumi.Input<number>;
    /**
     * How long to wait for the first bytes in milliseconds. Default `15000`
     */
    firstByteTimeout?: pulumi.Input<number>;
    /**
     * Name of a defined `healthcheck` to assign to this backend
     */
    healthcheck?: pulumi.Input<string>;
    /**
     * How long in seconds to keep a persistent connection to the backend between requests.
     */
    keepaliveTime?: pulumi.Input<number>;
    /**
     * Maximum number of connections for this Backend. Default `200`
     */
    maxConn?: pulumi.Input<number>;
    /**
     * Maximum allowed TLS version on SSL connections to this backend.
     */
    maxTlsVersion?: pulumi.Input<string>;
    /**
     * Minimum allowed TLS version on SSL connections to this backend.
     */
    minTlsVersion?: pulumi.Input<string>;
    /**
     * Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The hostname to override the Host header
     */
    overrideHost?: pulumi.Input<string>;
    /**
     * The port number on which the Backend responds. Default `80`
     */
    port?: pulumi.Input<number>;
    /**
     * Name of a condition, which if met, will select this backend during a request.
     */
    requestCondition?: pulumi.Input<string>;
    /**
     * Value that when shared across backends will enable those backends to share the same health check.
     */
    shareKey?: pulumi.Input<string>;
    /**
     * The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
     */
    shield?: pulumi.Input<string>;
    /**
     * CA certificate attached to origin.
     */
    sslCaCert?: pulumi.Input<string>;
    /**
     * Configure certificate validation. Does not affect SNI at all
     */
    sslCertHostname?: pulumi.Input<string>;
    /**
     * Be strict about checking SSL certs. Default `true`
     */
    sslCheckCert?: pulumi.Input<boolean>;
    /**
     * Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
     */
    sslCiphers?: pulumi.Input<string>;
    /**
     * Client certificate attached to origin. Used when connecting to the backend
     */
    sslClientCert?: pulumi.Input<string>;
    /**
     * Client key attached to origin. Used when connecting to the backend
     */
    sslClientKey?: pulumi.Input<string>;
    /**
     * Configure SNI in the TLS handshake. Does not affect cert validation at all
     */
    sslSniHostname?: pulumi.Input<string>;
    /**
     * Whether or not to use SSL to reach the Backend. Default `false`
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
     */
    weight?: pulumi.Input<number>;
}

export interface ServiceVclCacheSetting {
    /**
     * One of cache, pass, or restart, as defined on Fastly's documentation under "[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)"
     */
    action?: pulumi.Input<string>;
    /**
     * Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
     */
    cacheCondition?: pulumi.Input<string>;
    /**
     * Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Max "Time To Live" for stale (unreachable) objects
     */
    staleTtl?: pulumi.Input<number>;
    /**
     * The Time-To-Live (TTL) for the object
     */
    ttl?: pulumi.Input<number>;
}

export interface ServiceVclCondition {
    /**
     * The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`
     */
    priority?: pulumi.Input<number>;
    /**
     * The statement used to determine if the condition is met
     */
    statement: pulumi.Input<string>;
    /**
     * Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)
     */
    type: pulumi.Input<string>;
}

export interface ServiceVclDictionary {
    /**
     * The ID of the dictionary
     */
    dictionaryId?: pulumi.Input<string>;
    /**
     * Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
     */
    forceDestroy?: pulumi.Input<boolean>;
    /**
     * A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
     */
    name: pulumi.Input<string>;
    writeOnly?: pulumi.Input<boolean>;
}

export interface ServiceVclDirector {
    /**
     * Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
     */
    backends: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An optional comment about the Director
     */
    comment?: pulumi.Input<string>;
    /**
     * Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
     */
    quorum?: pulumi.Input<number>;
    /**
     * How many backends to search if it fails. Default `5`
     */
    retries?: pulumi.Input<number>;
    /**
     * Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
     */
    shield?: pulumi.Input<string>;
    /**
     * Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
     */
    type?: pulumi.Input<number>;
}

export interface ServiceVclDomain {
    /**
     * An optional comment about the Domain.
     */
    comment?: pulumi.Input<string>;
    /**
     * The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
     */
    name: pulumi.Input<string>;
}

export interface ServiceVclDynamicsnippet {
    /**
     * The VCL code that specifies exactly what the snippet does
     */
    content?: pulumi.Input<string>;
    /**
     * A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
     */
    priority?: pulumi.Input<number>;
    /**
     * The ID of the dynamic snippet
     */
    snippetId?: pulumi.Input<string>;
    /**
     * The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
     */
    type: pulumi.Input<string>;
}

export interface ServiceVclGzip {
    /**
     * Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     */
    cacheCondition?: pulumi.Input<string>;
    /**
     * The content-type for each type of content you wish to have dynamically gzip'ed. Example: `["text/html", "text/css"]`
     */
    contentTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File extensions for each file type to dynamically gzip. Example: `["css", "js"]`
     */
    extensions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
}

export interface ServiceVclHeader {
    /**
     * The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regexRepeat`
     */
    action: pulumi.Input<string>;
    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
     */
    cacheCondition?: pulumi.Input<string>;
    /**
     * The name of the header that is going to be affected by the Action
     */
    destination: pulumi.Input<string>;
    /**
     * Don't add the header if it is already. (Only applies to `set` action.). Default `false`
     */
    ignoreIfSet?: pulumi.Input<boolean>;
    /**
     * Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Lower priorities execute first. Default: `100`
     */
    priority?: pulumi.Input<number>;
    /**
     * Regular expression to use (Only applies to `regex` and `regexRepeat` actions.)
     */
    regex?: pulumi.Input<string>;
    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
     */
    requestCondition?: pulumi.Input<string>;
    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * Variable to be used as a source for the header content (Does not apply to `delete` action.)
     */
    source?: pulumi.Input<string>;
    /**
     * Value to substitute in place of regular expression. (Only applies to `regex` and `regexRepeat`.)
     */
    substitution?: pulumi.Input<string>;
    /**
     * The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
     */
    type: pulumi.Input<string>;
}

export interface ServiceVclHealthcheck {
    /**
     * How often to run the Healthcheck in milliseconds. Default `5000`
     */
    checkInterval?: pulumi.Input<number>;
    /**
     * The status code expected from the host. Default `200`
     */
    expectedResponse?: pulumi.Input<number>;
    /**
     * Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
     */
    headers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Host header to send for this Healthcheck
     */
    host: pulumi.Input<string>;
    /**
     * Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
     */
    httpVersion?: pulumi.Input<string>;
    /**
     * When loading a config, the initial number of probes to be seen as OK. Default `3`
     */
    initial?: pulumi.Input<number>;
    /**
     * Which HTTP method to use. Default `HEAD`
     */
    method?: pulumi.Input<string>;
    /**
     * A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The path to check
     */
    path: pulumi.Input<string>;
    /**
     * How many Healthchecks must succeed to be considered healthy. Default `3`
     */
    threshold?: pulumi.Input<number>;
    /**
     * Timeout in milliseconds. Default `5000`
     */
    timeout?: pulumi.Input<number>;
    /**
     * The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
     */
    window?: pulumi.Input<number>;
}

export interface ServiceVclImageOptimizerDefaultSettings {
    /**
     * Enables GIF to MP4 transformations on this service.
     */
    allowVideo?: pulumi.Input<boolean>;
    /**
     * The default quality to use with JPEG output. This can be overridden with the "quality" parameter on specific image optimizer requests.
     */
    jpegQuality?: pulumi.Input<number>;
    /**
     * The default type of JPEG output to use. This can be overridden with "format=bjpeg" and "format=pjpeg" on specific image optimizer requests. Valid values are `auto`, `baseline` and `progressive`.
     * 	- auto: Match the input JPEG type, or baseline if transforming from a non-JPEG input.
     * 	- baseline: Output baseline JPEG images
     * 	- progressive: Output progressive JPEG images
     */
    jpegType?: pulumi.Input<string>;
    /**
     * Used by the provider to identify modified settings. Changing this value will force the entire block to be deleted, then recreated.
     */
    name?: pulumi.Input<string>;
    /**
     * The type of filter to use while resizing an image. Valid values are `lanczos3`, `lanczos2`, `bicubic`, `bilinear` and `nearest`.
     * 	- lanczos3: A Lanczos filter with a kernel size of 3. Lanczos filters can detect edges and linear features within an image, providing the best possible reconstruction.
     * 	- lanczos2: A Lanczos filter with a kernel size of 2.
     * 	- bicubic: A filter using an average of a 4x4 environment of pixels, weighing the innermost pixels higher.
     * 	- bilinear: A filter using an average of a 2x2 environment of pixels.
     * 	- nearest: A filter using the value of nearby translated pixel values. Preserves hard edges.
     */
    resizeFilter?: pulumi.Input<string>;
    /**
     * Whether or not we should allow output images to render at sizes larger than input.
     */
    upscale?: pulumi.Input<boolean>;
    /**
     * Controls whether or not to default to WebP output when the client supports it. This is equivalent to adding "auto=webp" to all image optimizer requests.
     */
    webp?: pulumi.Input<boolean>;
    /**
     * The default quality to use with WebP output. This can be overridden with the second option in the "quality" URL parameter on specific image optimizer requests.
     */
    webpQuality?: pulumi.Input<number>;
}

export interface ServiceVclLoggingBigquery {
    /**
     * The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The ID of your BigQuery dataset
     */
    dataset: pulumi.Input<string>;
    /**
     * The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
     */
    email: pulumi.Input<string>;
    /**
     * The logging format desired.
     */
    format?: pulumi.Input<string>;
    /**
     * A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The ID of your GCP project
     */
    projectId: pulumi.Input<string>;
    /**
     * Name of a condition to apply this logging.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
     */
    secretKey: pulumi.Input<string>;
    /**
     * The ID of your BigQuery table
     */
    table: pulumi.Input<string>;
    /**
     * BigQuery table name suffix template
     */
    template?: pulumi.Input<string>;
}

export interface ServiceVclLoggingBlobstorage {
    /**
     * The unique Azure Blob Storage namespace in which your data objects are stored
     */
    accountName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * The name of the Azure Blob Storage container in which to store logs
     */
    container: pulumi.Input<string>;
    /**
     * Maximum size of an uploaded log file, if non-zero.
     */
    fileMaxBytes?: pulumi.Input<number>;
    /**
     * Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred in seconds. Default `3600`
     */
    period?: pulumi.Input<number>;
    /**
     * Where in the generated VCL the logging call should be placed
     */
    placement?: pulumi.Input<string>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The name of the condition to apply
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
     */
    sasToken: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
}

export interface ServiceVclLoggingCloudfile {
    /**
     * Your Cloud File account access key
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of your Cloud Files container
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Apache style log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The path to upload logs to
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: pulumi.Input<number>;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `none`.
     */
    placement?: pulumi.Input<string>;
    /**
     * The PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
     */
    region?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * The username for your Cloud Files account
     */
    user: pulumi.Input<string>;
}

export interface ServiceVclLoggingDatadog {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
     */
    region?: pulumi.Input<string>;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The API key from your Datadog account
     */
    token: pulumi.Input<string>;
}

export interface ServiceVclLoggingDigitalocean {
    /**
     * Your DigitalOcean Spaces account access key
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of the DigitalOcean Space
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
     */
    domain?: pulumi.Input<string>;
    /**
     * Apache style log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The path to upload logs to
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: pulumi.Input<number>;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `none`.
     */
    placement?: pulumi.Input<string>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * Your DigitalOcean Spaces account secret key
     */
    secretKey: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
}

export interface ServiceVclLoggingElasticsearch {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The name of the Elasticsearch index to send documents (logs) to
     */
    index: pulumi.Input<string>;
    /**
     * The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * BasicAuth password for Elasticsearch
     */
    password?: pulumi.Input<string>;
    /**
     * The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
     */
    pipeline?: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The maximum number of logs sent in one request. Defaults to `0` for unbounded
     */
    requestMaxBytes?: pulumi.Input<number>;
    /**
     * The maximum number of bytes sent in one request. Defaults to `0` for unbounded
     */
    requestMaxEntries?: pulumi.Input<number>;
    /**
     * The name of the condition to apply
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * The Elasticsearch URL to stream logs to
     */
    url: pulumi.Input<string>;
    /**
     * BasicAuth username for Elasticsearch
     */
    user?: pulumi.Input<string>;
}

export interface ServiceVclLoggingFtp {
    /**
     * The FTP address to stream logs to
     */
    address: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The password for the server (for anonymous use an email address)
     */
    password: pulumi.Input<string>;
    /**
     * The path to upload log files to. If the path ends in `/` then it is treated as a directory
     */
    path: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred, in seconds (Default `3600`)
     */
    period?: pulumi.Input<number>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The port number. Default: `21`
     */
    port?: pulumi.Input<number>;
    /**
     * The PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * The username for the server (can be `anonymous`)
     */
    user: pulumi.Input<string>;
}

export interface ServiceVclLoggingGc {
    /**
     * The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The name of the bucket in which to store the logs
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Apache-style string or VCL variables to use for log formatting
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred, in seconds (Default 3600)
     */
    period?: pulumi.Input<number>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The ID of your Google Cloud Platform project
     */
    projectId?: pulumi.Input<string>;
    /**
     * Name of a condition to apply this logging.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.
     */
    user?: pulumi.Input<string>;
}

export interface ServiceVclLoggingGooglepubsub {
    /**
     * The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
     */
    accountName?: pulumi.Input<string>;
    /**
     * Apache style log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The ID of your Google Cloud Platform project
     */
    projectId: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
     */
    secretKey: pulumi.Input<string>;
    /**
     * The Google Cloud Pub/Sub topic to which logs will be published
     */
    topic: pulumi.Input<string>;
    /**
     * Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
     */
    user: pulumi.Input<string>;
}

export interface ServiceVclLoggingGrafanacloudlog {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The stream identifier as a JSON string
     */
    index: pulumi.Input<string>;
    /**
     * The unique name of the GrafanaCloudLogs logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The Access Policy Token key for your GrafanaCloudLogs account
     */
    token: pulumi.Input<string>;
    /**
     * The URL to stream logs to
     */
    url: pulumi.Input<string>;
    /**
     * The Grafana User ID
     */
    user: pulumi.Input<string>;
}

export interface ServiceVclLoggingHerokus {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `none`.
     */
    placement?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
     */
    token: pulumi.Input<string>;
    /**
     * The URL to stream logs to
     */
    url: pulumi.Input<string>;
}

export interface ServiceVclLoggingHoneycomb {
    /**
     * The Honeycomb Dataset you want to log to
     */
    dataset: pulumi.Input<string>;
    /**
     * Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `none`.
     */
    placement?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The Write Key from the Account page of your Honeycomb account
     */
    token: pulumi.Input<string>;
}

export interface ServiceVclLoggingHttp {
    /**
     * Value of the `Content-Type` header sent with the request
     */
    contentType?: pulumi.Input<string>;
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Custom header sent with the request
     */
    headerName?: pulumi.Input<string>;
    /**
     * Value of the custom header sent with the request
     */
    headerValue?: pulumi.Input<string>;
    /**
     * Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
     */
    jsonFormat?: pulumi.Input<string>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
     */
    method?: pulumi.Input<string>;
    /**
     * The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed
     */
    placement?: pulumi.Input<string>;
    /**
     * The maximum number of bytes sent in one request
     */
    requestMaxBytes?: pulumi.Input<number>;
    /**
     * The maximum number of logs sent in one request
     */
    requestMaxEntries?: pulumi.Input<number>;
    /**
     * The name of the condition to apply
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * Used during the TLS handshake to validate the certificate
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * URL that log data will be sent to. Must use the https protocol
     */
    url: pulumi.Input<string>;
}

export interface ServiceVclLoggingKafka {
    /**
     * SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
     */
    authMethod?: pulumi.Input<string>;
    /**
     * A comma-separated list of IP addresses or hostnames of Kafka brokers
     */
    brokers: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Apache style log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
     */
    parseLogKeyvals?: pulumi.Input<boolean>;
    /**
     * SASL Pass
     */
    password?: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
     */
    requestMaxBytes?: pulumi.Input<number>;
    /**
     * The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
     */
    requiredAcks?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * The Kafka topic to send logs to
     */
    topic: pulumi.Input<string>;
    /**
     * Whether to use TLS for secure logging. Can be either `true` or `false`
     */
    useTls?: pulumi.Input<boolean>;
    /**
     * SASL User
     */
    user?: pulumi.Input<string>;
}

export interface ServiceVclLoggingKinese {
    /**
     * The AWS access key to be used to write to the stream
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Apache style log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `accessKey` and `secretKey` are provided.
     */
    iamRole?: pulumi.Input<string>;
    /**
     * The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `none`.
     */
    placement?: pulumi.Input<string>;
    /**
     * The AWS region the stream resides in. (Default: `us-east-1`)
     */
    region?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The AWS secret access key to authenticate with
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The Kinesis stream name
     */
    topic: pulumi.Input<string>;
}

export interface ServiceVclLoggingLogentry {
    /**
     * Apache-style string or VCL variables to use for log formatting
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The port number configured in Logentries
     */
    port?: pulumi.Input<number>;
    /**
     * Name of blockAttributes condition to apply this logging.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * Use token based authentication (https://logentries.com/doc/input-token/)
     */
    token: pulumi.Input<string>;
    /**
     * Whether to use TLS for secure logging
     */
    useTls?: pulumi.Input<boolean>;
}

export interface ServiceVclLoggingLoggly {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `none`.
     */
    placement?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
     */
    token: pulumi.Input<string>;
}

export interface ServiceVclLoggingLogshuttle {
    /**
     * Apache style log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `none`.
     */
    placement?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The data authentication token associated with this endpoint
     */
    token: pulumi.Input<string>;
    /**
     * Your Log Shuttle endpoint URL
     */
    url: pulumi.Input<string>;
}

export interface ServiceVclLoggingNewrelic {
    /**
     * Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The region that log data will be sent to. Default: `US`
     */
    region?: pulumi.Input<string>;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The Insert API key from the Account page of your New Relic account
     */
    token: pulumi.Input<string>;
}

export interface ServiceVclLoggingNewrelicotlp {
    /**
     * Apache style log formatting. Your log must produce valid JSON that New Relic OTLP can ingest.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the New Relic OTLP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The region that log data will be sent to. Default: `US`
     */
    region?: pulumi.Input<string>;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The Insert API key from the Account page of your New Relic account
     */
    token: pulumi.Input<string>;
    /**
     * The optional New Relic Trace Observer URL to stream logs to for Infinite Tracing.
     */
    url?: pulumi.Input<string>;
}

export interface ServiceVclLoggingOpenstack {
    /**
     * Your OpenStack account access key
     */
    accessKey: pulumi.Input<string>;
    /**
     * The name of your OpenStack container
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Apache style log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred, in seconds. Default `3600`
     */
    period?: pulumi.Input<number>;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `none`.
     */
    placement?: pulumi.Input<string>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * Your OpenStack auth url
     */
    url: pulumi.Input<string>;
    /**
     * The username for your OpenStack account
     */
    user: pulumi.Input<string>;
}

export interface ServiceVclLoggingPapertrail {
    /**
     * The address of the Papertrail endpoint
     */
    address: pulumi.Input<string>;
    /**
     * A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed. If not set, endpoints with `formatVersion` of 2 are placed in `vclLog` and those with `formatVersion` of 1 are placed in `vclDeliver`
     */
    placement?: pulumi.Input<string>;
    /**
     * The port associated with the address where the Papertrail endpoint can be accessed
     */
    port: pulumi.Input<number>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute
     */
    responseCondition?: pulumi.Input<string>;
}

export interface ServiceVclLoggingS3 {
    /**
     * The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
     */
    acl?: pulumi.Input<string>;
    /**
     * The name of the bucket in which to store the logs
     */
    bucketName: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
     */
    domain?: pulumi.Input<string>;
    /**
     * Maximum size of an uploaded log file, if non-zero.
     */
    fileMaxBytes?: pulumi.Input<number>;
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: pulumi.Input<string>;
    /**
     * How frequently the logs should be transferred, in seconds. Default `3600`
     */
    period?: pulumi.Input<number>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The S3 storage class (redundancy level). Should be one of: `standard`, `intelligentTiering`, `standardIa`, `onezoneIa`, `glacier`, `glacierIr`, `deepArchive`, or `reducedRedundancy`
     */
    redundancy?: pulumi.Input<string>;
    /**
     * Name of blockAttributes condition to apply this logging.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
     */
    s3AccessKey?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `accessKey` and `secretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
     */
    s3IamRole?: pulumi.Input<string>;
    /**
     * AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
     */
    s3SecretKey?: pulumi.Input<string>;
    /**
     * Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
     */
    serverSideEncryption?: pulumi.Input<string>;
    /**
     * Optional server-side KMS Key Id. Must be set if serverSideEncryption is set to `aws:kms`
     */
    serverSideEncryptionKmsKeyId?: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
}

export interface ServiceVclLoggingScalyr {
    /**
     * Apache style log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The name of the logfile field sent to Scalyr
     */
    projectId?: pulumi.Input<string>;
    /**
     * The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
     */
    region?: pulumi.Input<string>;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The token to use for authentication (https://www.scalyr.com/keys)
     */
    token: pulumi.Input<string>;
}

export interface ServiceVclLoggingSftp {
    /**
     * The SFTP address to stream logs to
     */
    address: pulumi.Input<string>;
    /**
     * The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzipLevel will default to 3. To specify a different level, leave compressionCodec blank and explicitly set the level using gzip_level. Specifying both compressionCodec and gzipLevel in the same API request will result in an error.
     */
    compressionCodec?: pulumi.Input<string>;
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
     */
    password?: pulumi.Input<string>;
    /**
     * The path to upload log files to. If the path ends in `/` then it is treated as a directory
     */
    path: pulumi.Input<string>;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: pulumi.Input<number>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The port the SFTP service listens on. (Default: `22`)
     */
    port?: pulumi.Input<number>;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: pulumi.Input<string>;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
     */
    secretKey?: pulumi.Input<string>;
    /**
     * A list of host keys for all hosts we can connect to over SFTP
     */
    sshKnownHosts: pulumi.Input<string>;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: pulumi.Input<string>;
    /**
     * The username for the server
     */
    user: pulumi.Input<string>;
}

export interface ServiceVclLoggingSplunk {
    /**
     * Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed
     */
    placement?: pulumi.Input<string>;
    /**
     * The name of the condition to apply
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format.
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format.
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * The Splunk token to be used for authentication
     */
    token: pulumi.Input<string>;
    /**
     * The Splunk URL to stream logs to
     */
    url: pulumi.Input<string>;
    /**
     * Whether to use TLS for secure logging. Default: `false`
     */
    useTls?: pulumi.Input<boolean>;
}

export interface ServiceVclLoggingSumologic {
    /**
     * Apache-style string or VCL variables to use for log formatting
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * Name of blockAttributes condition to apply this logging.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * The URL to Sumologic collector endpoint
     */
    url: pulumi.Input<string>;
}

export interface ServiceVclLoggingSyslog {
    /**
     * A hostname or IPv4 address of the Syslog endpoint
     */
    address: pulumi.Input<string>;
    /**
     * Apache-style string or VCL variables to use for log formatting
     */
    format?: pulumi.Input<string>;
    /**
     * The version of the custom logging format. Can be either 1 or 2. (Default: 2)
     */
    formatVersion?: pulumi.Input<number>;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     */
    messageType?: pulumi.Input<string>;
    /**
     * A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: pulumi.Input<string>;
    /**
     * The port associated with the address where the Syslog endpoint can be accessed. Default `514`
     */
    port?: pulumi.Input<number>;
    /**
     * Name of blockAttributes condition to apply this logging.
     */
    responseCondition?: pulumi.Input<string>;
    /**
     * A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
     */
    tlsCaCert?: pulumi.Input<string>;
    /**
     * The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
     */
    tlsClientCert?: pulumi.Input<string>;
    /**
     * The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
     */
    tlsClientKey?: pulumi.Input<string>;
    /**
     * Used during the TLS handshake to validate the certificate
     */
    tlsHostname?: pulumi.Input<string>;
    /**
     * Whether to prepend each message with a specific token
     */
    token?: pulumi.Input<string>;
    /**
     * Whether to use TLS for secure logging. Default `false`
     */
    useTls?: pulumi.Input<boolean>;
}

export interface ServiceVclProductEnablement {
    /**
     * Enable Bot Management support
     */
    botManagement?: pulumi.Input<boolean>;
    /**
     * Enable Brotli Compression support
     */
    brotliCompression?: pulumi.Input<boolean>;
    /**
     * DDoS Protection product
     */
    ddosProtection?: pulumi.Input<inputs.ServiceVclProductEnablementDdosProtection>;
    /**
     * Enable Domain Inspector support
     */
    domainInspector?: pulumi.Input<boolean>;
    /**
     * Enable Image Optimizer support (all backends must have a `shield` attribute)
     */
    imageOptimizer?: pulumi.Input<boolean>;
    /**
     * Enable Log Explorer & Insights
     */
    logExplorerInsights?: pulumi.Input<boolean>;
    /**
     * Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
     */
    name?: pulumi.Input<string>;
    /**
     * Next-Gen WAF product
     */
    ngwaf?: pulumi.Input<inputs.ServiceVclProductEnablementNgwaf>;
    /**
     * Enable Origin Inspector support
     */
    originInspector?: pulumi.Input<boolean>;
    /**
     * Enable WebSockets support
     */
    websockets?: pulumi.Input<boolean>;
}

export interface ServiceVclProductEnablementDdosProtection {
    /**
     * Enable DDoS Protection support
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Operation mode
     */
    mode: pulumi.Input<string>;
}

export interface ServiceVclProductEnablementNgwaf {
    /**
     * Enable Next-Gen WAF support
     */
    enabled: pulumi.Input<boolean>;
    /**
     * The percentage of traffic to inspect
     */
    trafficRamp?: pulumi.Input<number>;
    /**
     * The workspace to link
     */
    workspaceId: pulumi.Input<string>;
}

export interface ServiceVclRateLimiter {
    /**
     * The action to take when a rate limiter violation is detected (one of: log_only, response, response_object)
     */
    action: pulumi.Input<string>;
    /**
     * Comma-separated list of VCL variables used to generate a counter key to identify a client
     */
    clientKey: pulumi.Input<string>;
    /**
     * Revision number of the rate limiting feature implementation
     */
    featureRevision?: pulumi.Input<number>;
    /**
     * Comma-separated list of HTTP methods to apply rate limiting to
     */
    httpMethods: pulumi.Input<string>;
    /**
     * Name of the type of logging endpoint to be used when action is logOnly (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
     */
    loggerType?: pulumi.Input<string>;
    /**
     * A unique human readable name for the rate limiting rule
     */
    name: pulumi.Input<string>;
    /**
     * Length of time in minutes that the rate limiter is in effect after the initial violation is detected
     */
    penaltyBoxDuration: pulumi.Input<number>;
    /**
     * Alphanumeric string identifying the rate limiter
     */
    ratelimiterId?: pulumi.Input<string>;
    /**
     * Custom response to be sent when the rate limit is exceeded. Required if action is response
     */
    response?: pulumi.Input<inputs.ServiceVclRateLimiterResponse>;
    /**
     * Name of existing response object. Required if action is response_object
     */
    responseObjectName?: pulumi.Input<string>;
    /**
     * Upper limit of requests per second allowed by the rate limiter
     */
    rpsLimit: pulumi.Input<number>;
    /**
     * The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
     */
    uriDictionaryName?: pulumi.Input<string>;
    /**
     * Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
     */
    windowSize: pulumi.Input<number>;
}

export interface ServiceVclRateLimiterResponse {
    /**
     * HTTP response body data
     */
    content: pulumi.Input<string>;
    /**
     * HTTP Content-Type (e.g. application/json)
     */
    contentType: pulumi.Input<string>;
    /**
     * HTTP response status code (e.g. 429)
     */
    status: pulumi.Input<number>;
}

export interface ServiceVclRequestSetting {
    /**
     * Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
     */
    action?: pulumi.Input<string>;
    /**
     * Disable collapsed forwarding, so you don't wait for other objects to origin
     */
    bypassBusyWait?: pulumi.Input<boolean>;
    /**
     * Sets the host header
     */
    defaultHost?: pulumi.Input<string>;
    /**
     * Force a cache miss for the request. If specified, can be `true` or `false`
     */
    forceMiss?: pulumi.Input<boolean>;
    /**
     * Forces the request to use SSL (Redirects a non-SSL request to SSL)
     */
    forceSsl?: pulumi.Input<boolean>;
    /**
     * Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers
     *
     * @deprecated 'geo_headers' attribute has been deprecated and will be removed in the next major version release
     */
    geoHeaders?: pulumi.Input<boolean>;
    /**
     * Comma separated list of varnish request object fields that should be in the hash key
     */
    hashKeys?: pulumi.Input<string>;
    /**
     * How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds
     */
    maxStaleAge?: pulumi.Input<number>;
    /**
     * Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `requestSetting`)
     */
    requestCondition?: pulumi.Input<string>;
    /**
     * Injects the X-Timer info into the request for viewing origin fetch durations
     */
    timerSupport?: pulumi.Input<boolean>;
    /**
     * X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
     */
    xff?: pulumi.Input<string>;
}

export interface ServiceVclResponseObject {
    /**
     * Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     */
    cacheCondition?: pulumi.Input<string>;
    /**
     * The content to deliver for the response object
     */
    content?: pulumi.Input<string>;
    /**
     * The MIME type of the content
     */
    contentType?: pulumi.Input<string>;
    /**
     * A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
     */
    requestCondition?: pulumi.Input<string>;
    /**
     * The HTTP Response. Default `OK`
     */
    response?: pulumi.Input<string>;
    /**
     * The HTTP Status Code. Default `200`
     */
    status?: pulumi.Input<number>;
}

export interface ServiceVclSnippet {
    /**
     * The VCL code that specifies exactly what the snippet does
     */
    content: pulumi.Input<string>;
    /**
     * A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
    /**
     * Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
     */
    priority?: pulumi.Input<number>;
    /**
     * The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
     */
    type: pulumi.Input<string>;
}

export interface ServiceVclVcl {
    /**
     * The custom VCL code to upload
     */
    content: pulumi.Input<string>;
    /**
     * If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
     */
    main?: pulumi.Input<boolean>;
    /**
     * A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: pulumi.Input<string>;
}

export interface TlsSubscriptionManagedDnsChallenge {
    /**
     * The name of the DNS record to add. For example `_acme-challenge.example.com`.
     */
    recordName?: pulumi.Input<string>;
    /**
     * The type of DNS record to add, e.g. `A`, or `CNAME`.
     */
    recordType?: pulumi.Input<string>;
    /**
     * The value to which the DNS record should point, e.g. `xxxxx.fastly-validations.com`.
     */
    recordValue?: pulumi.Input<string>;
}

export interface TlsSubscriptionManagedHttpChallenge {
    /**
     * The name of the DNS record to add. For example `example.com`. Best accessed through a `for` expression to filter the relevant record.
     */
    recordName?: pulumi.Input<string>;
    /**
     * The type of DNS record to add, e.g. `A`, or `CNAME`.
     */
    recordType?: pulumi.Input<string>;
    /**
     * A list with the value(s) to which the DNS record should point.
     */
    recordValues?: pulumi.Input<pulumi.Input<string>[]>;
}
