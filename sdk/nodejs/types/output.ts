// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface GetWafRulesRule {
    /**
     * The rule's latest revision.
     */
    latestRevisionNumber: number;
    /**
     * The rule's modsecurity ID.
     */
    modsecRuleId: number;
    /**
     * The rule's type.
     */
    type: string;
}

export interface ServiceACLEntriesv1Entry {
    /**
     * A personal freeform descriptive note
     */
    comment?: string;
    /**
     * The unique ID of the entry
     */
    id: string;
    /**
     * An IP address that is the focus for the ACL
     */
    ip: string;
    /**
     * A boolean that will negate the match if true
     */
    negated?: boolean;
    /**
     * An optional subnet mask applied to the IP address
     */
    subnet?: string;
}

export interface ServiceComputeBackend {
    /**
     * An IPv4, hostname, or IPv6 address for the Backend
     */
    address: string;
    /**
     * Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `true`
     */
    autoLoadbalance?: boolean;
    betweenBytesTimeout?: number;
    /**
     * How long to wait for a timeout in milliseconds. Default `1000`
     */
    connectTimeout?: number;
    /**
     * Number of errors to allow before the Backend is marked as down. Default `0`
     */
    errorThreshold?: number;
    firstByteTimeout?: number;
    /**
     * Name of a defined `healthcheck` to assign to this backend
     */
    healthcheck?: string;
    /**
     * Maximum number of connections for this Backend. Default `200`
     */
    maxConn?: number;
    maxTlsVersion?: string;
    minTlsVersion?: string;
    /**
     * Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The hostname to override the Host header
     */
    overrideHost?: string;
    /**
     * The port number on which the Backend responds. Default `80`
     */
    port?: number;
    /**
     * The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
     */
    shield?: string;
    sslCaCert?: string;
    sslCertHostname?: string;
    sslCheckCert?: boolean;
    /**
     * Comma separated list of OpenSSL Ciphers to try when negotiating to the backend
     */
    sslCiphers?: string;
    sslClientCert?: string;
    sslClientKey?: string;
    /**
     * Used for both SNI during the TLS handshake and to validate the cert
     *
     * @deprecated Use ssl_cert_hostname and ssl_sni_hostname instead.
     */
    sslHostname?: string;
    sslSniHostname?: string;
    /**
     * Whether or not to use SSL to reach the Backend. Default `false`
     */
    useSsl?: boolean;
    /**
     * The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
     */
    weight?: number;
}

export interface ServiceComputeBigquerylogging {
    /**
     * The ID of your BigQuery dataset
     */
    dataset: string;
    /**
     * The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
     */
    email: string;
    /**
     * A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The ID of your GCP project
     */
    projectId: string;
    /**
     * The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
     */
    secretKey: string;
    /**
     * The ID of your BigQuery table
     */
    table: string;
    /**
     * BigQuery table name suffix template
     */
    template?: string;
}

export interface ServiceComputeBlobstoragelogging {
    /**
     * The unique Azure Blob Storage namespace in which your data objects are stored
     */
    accountName: string;
    /**
     * The name of the Azure Blob Storage container in which to store logs
     */
    container: string;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default `classic`
     */
    messageType?: string;
    /**
     * A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
     */
    path?: string;
    /**
     * How frequently the logs should be transferred in seconds. Default `3600`
     */
    period?: number;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
     */
    sasToken: string;
    /**
     * `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`
     */
    timestampFormat?: string;
}

export interface ServiceComputeDictionary {
    /**
     * The ID of the dictionary
     */
    dictionaryId: string;
    /**
     * Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
     */
    forceDestroy?: boolean;
    /**
     * A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
     */
    name: string;
    writeOnly?: boolean;
}

export interface ServiceComputeDomain {
    /**
     * An optional comment about the Domain.
     */
    comment?: string;
    /**
     * The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
     */
    name: string;
}

export interface ServiceComputeGcslogging {
    /**
     * The name of the bucket in which to store the logs
     */
    bucketName: string;
    /**
     * The email address associated with the target GCS bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_EMAIL`
     */
    email?: string;
    /**
     * Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
     */
    messageType?: string;
    /**
     * A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: string;
    /**
     * How frequently the logs should be transferred, in seconds (Default 3600)
     */
    period?: number;
    /**
     * The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
     */
    secretKey?: string;
    /**
     * specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
}

export interface ServiceComputeHealthcheck {
    /**
     * How often to run the Healthcheck in milliseconds. Default `5000`
     */
    checkInterval?: number;
    /**
     * The status code expected from the host. Default `200`
     */
    expectedResponse?: number;
    /**
     * The Host header to send for this Healthcheck
     */
    host: string;
    /**
     * Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
     */
    httpVersion?: string;
    /**
     * When loading a config, the initial number of probes to be seen as OK. Default `2`
     */
    initial?: number;
    /**
     * Which HTTP method to use. Default `HEAD`
     */
    method?: string;
    /**
     * A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The path to check
     */
    path: string;
    /**
     * How many Healthchecks must succeed to be considered healthy. Default `3`
     */
    threshold?: number;
    /**
     * Timeout in milliseconds. Default `500`
     */
    timeout?: number;
    /**
     * The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
     */
    window?: number;
}

export interface ServiceComputeHttpslogging {
    /**
     * Value of the `Content-Type` header sent with the request
     */
    contentType?: string;
    /**
     * Custom header sent with the request
     */
    headerName?: string;
    /**
     * Value of the custom header sent with the request
     */
    headerValue?: string;
    /**
     * Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
     */
    jsonFormat?: string;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `blank`
     */
    messageType?: string;
    /**
     * HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
     */
    method?: string;
    /**
     * The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    requestMaxBytes?: number;
    requestMaxEntries?: number;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * Used during the TLS handshake to validate the certificate
     */
    tlsHostname?: string;
    /**
     * URL that log data will be sent to. Must use the https protocol
     */
    url: string;
}

export interface ServiceComputeLogentry {
    /**
     * The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The port number configured in Logentries
     */
    port?: number;
    /**
     * Use token based authentication (https://logentries.com/doc/input-token/)
     */
    token: string;
    /**
     * Whether to use TLS for secure logging
     */
    useTls?: boolean;
}

export interface ServiceComputeLoggingCloudfile {
    /**
     * Your Cloud File account access key
     */
    accessKey: string;
    /**
     * The name of your Cloud Files container
     */
    bucketName: string;
    /**
     * What level of GZIP encoding to have when dumping logs (default `0`, no compression)
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
     */
    messageType?: string;
    /**
     * The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The path to upload logs to
     */
    path?: string;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: number;
    /**
     * The PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
     */
    region?: string;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
    /**
     * The username for your Cloud Files account
     */
    user: string;
}

export interface ServiceComputeLoggingDatadog {
    /**
     * The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
     */
    region?: string;
    /**
     * The API key from your Datadog account
     */
    token: string;
}

export interface ServiceComputeLoggingDigitalocean {
    /**
     * Your DigitalOcean Spaces account access key
     */
    accessKey: string;
    /**
     * The name of the DigitalOcean Space
     */
    bucketName: string;
    /**
     * The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
     */
    domain?: string;
    /**
     * What level of Gzip encoding to have when dumping logs (default `0`, no compression)
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
     */
    messageType?: string;
    /**
     * The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The path to upload logs to
     */
    path?: string;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: number;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * Your DigitalOcean Spaces account secret key
     */
    secretKey: string;
    /**
     * `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
}

export interface ServiceComputeLoggingElasticsearch {
    /**
     * The name of the Elasticsearch index to send documents (logs) to
     */
    index: string;
    /**
     * The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * BasicAuth password for Elasticsearch
     */
    password?: string;
    /**
     * The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
     */
    pipeline?: string;
    requestMaxBytes?: number;
    requestMaxEntries?: number;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
     */
    tlsHostname?: string;
    /**
     * The Elasticsearch URL to stream logs to
     */
    url: string;
    /**
     * BasicAuth username for Elasticsearch
     */
    user?: string;
}

export interface ServiceComputeLoggingFtp {
    /**
     * The FTP address to stream logs to
     */
    address: string;
    /**
     * Gzip Compression level. Default `0`
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted (default: `classic`)
     */
    messageType?: string;
    /**
     * The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The password for the server (for anonymous use an email address)
     */
    password: string;
    /**
     * The path to upload log files to. If the path ends in `/` then it is treated as a directory
     */
    path: string;
    /**
     * How frequently the logs should be transferred, in seconds (Default `3600`)
     */
    period?: number;
    /**
     * The port number. Default: `21`
     */
    port?: number;
    /**
     * The PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
    /**
     * The username for the server (can be `anonymous`)
     */
    user: string;
}

export interface ServiceComputeLoggingGooglepubsub {
    /**
     * The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The ID of your Google Cloud Platform project
     */
    projectId: string;
    /**
     * Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
     */
    secretKey: string;
    /**
     * The Google Cloud Pub/Sub topic to which logs will be published
     */
    topic: string;
    /**
     * Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
     */
    user: string;
}

export interface ServiceComputeLoggingHeroku {
    /**
     * The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
     */
    token: string;
    /**
     * The URL to stream logs to
     */
    url: string;
}

export interface ServiceComputeLoggingHoneycomb {
    /**
     * The Honeycomb Dataset you want to log to
     */
    dataset: string;
    /**
     * The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The Write Key from the Account page of your Honeycomb account
     */
    token: string;
}

export interface ServiceComputeLoggingKafka {
    /**
     * SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
     */
    authMethod?: string;
    /**
     * A comma-separated list of IP addresses or hostnames of Kafka brokers
     */
    brokers: string;
    /**
     * The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
     */
    compressionCodec?: string;
    /**
     * The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    parseLogKeyvals?: boolean;
    /**
     * SASL Pass
     */
    password?: string;
    requestMaxBytes?: number;
    /**
     * The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1`	Wait for all in-sync replicas to respond
     */
    requiredAcks?: string;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     */
    tlsHostname?: string;
    /**
     * The Kafka topic to send logs to
     */
    topic: string;
    /**
     * Whether to use TLS for secure logging. Can be either `true` or `false`
     */
    useTls?: boolean;
    /**
     * SASL User
     */
    user?: string;
}

export interface ServiceComputeLoggingKinese {
    /**
     * The AWS access key to be used to write to the stream
     */
    accessKey: string;
    /**
     * The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The AWS region the stream resides in. (Default: `us-east-1`)
     */
    region?: string;
    /**
     * The AWS secret access key to authenticate with
     */
    secretKey: string;
    /**
     * The Kinesis stream name
     */
    topic: string;
}

export interface ServiceComputeLoggingLoggly {
    /**
     * The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
     */
    token: string;
}

export interface ServiceComputeLoggingLogshuttle {
    /**
     * The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The data authentication token associated with this endpoint
     */
    token: string;
    /**
     * Your Log Shuttle endpoint URL
     */
    url: string;
}

export interface ServiceComputeLoggingNewrelic {
    /**
     * The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The Insert API key from the Account page of your New Relic account
     */
    token: string;
}

export interface ServiceComputeLoggingOpenstack {
    /**
     * Your OpenStack account access key
     */
    accessKey: string;
    /**
     * The name of your OpenStack container
     */
    bucketName: string;
    /**
     * What level of Gzip encoding to have when dumping logs (default `0`, no compression)
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
     */
    messageType?: string;
    /**
     * The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: string;
    /**
     * How frequently the logs should be transferred, in seconds. Default `3600`
     */
    period?: number;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
    /**
     * Your OpenStack auth url
     */
    url: string;
    /**
     * The username for your OpenStack account
     */
    user: string;
}

export interface ServiceComputeLoggingScalyr {
    /**
     * The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
     */
    region?: string;
    /**
     * The token to use for authentication (https://www.scalyr.com/keys)
     */
    token: string;
}

export interface ServiceComputeLoggingSftp {
    /**
     * The SFTP address to stream logs to
     */
    address: string;
    /**
     * What level of Gzip encoding to have when dumping logs (default `0`, no compression)
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
     */
    messageType?: string;
    /**
     * The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
     */
    password?: string;
    /**
     * The path to upload log files to. If the path ends in `/` then it is treated as a directory
     */
    path: string;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: number;
    /**
     * The port the SFTP service listens on. (Default: `22`)
     */
    port?: number;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
     */
    secretKey?: string;
    sshKnownHosts: string;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
    /**
     * The username for the server
     */
    user: string;
}

export interface ServiceComputePackage {
    /**
     * The path to the Wasm deployment package within your local filesystem
     */
    filename: string;
    sourceCodeHash: string;
}

export interface ServiceComputePapertrail {
    /**
     * The address of the Papertrail endpoint
     */
    address: string;
    /**
     * A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The port associated with the address where the Papertrail endpoint can be accessed
     */
    port: number;
}

export interface ServiceComputeS3logging {
    /**
     * The name of the bucket in which to store the logs
     */
    bucketName: string;
    /**
     * If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
     */
    domain?: string;
    /**
     * Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
     */
    messageType?: string;
    /**
     * The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: string;
    /**
     * How frequently the logs should be transferred, in seconds. Default `3600`
     */
    period?: number;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`
     */
    redundancy?: string;
    s3AccessKey?: string;
    s3SecretKey?: string;
    serverSideEncryption?: string;
    serverSideEncryptionKmsKeyId?: string;
    /**
     * `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
}

export interface ServiceComputeSplunk {
    /**
     * A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     */
    tlsHostname?: string;
    /**
     * The Splunk token to be used for authentication
     */
    token: string;
    /**
     * The Splunk URL to stream logs to
     */
    url: string;
}

export interface ServiceComputeSumologic {
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. See [Fastly's Documentation on Sumologic](https://developer.fastly.com/reference/api/logging/sumologic/)
     */
    messageType?: string;
    /**
     * A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The URL to Sumologic collector endpoint
     */
    url: string;
}

export interface ServiceComputeSyslog {
    /**
     * A hostname or IPv4 address of the Syslog endpoint
     */
    address: string;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
     */
    messageType?: string;
    /**
     * A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The port associated with the address where the Syslog endpoint can be accessed. Default `514`
     */
    port?: number;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * Used during the TLS handshake to validate the certificate
     */
    tlsHostname?: string;
    /**
     * Whether to prepend each message with a specific token
     */
    token?: string;
    /**
     * Whether to use TLS for secure logging. Default `false`
     */
    useTls?: boolean;
}

export interface ServiceWafConfigurationRule {
    modsecRuleId: number;
    /**
     * The Web Application Firewall rule's revision. The latest revision will be used if this is not provided
     */
    revision: number;
    /**
     * The Web Application Firewall rule's status. Allowed values are (`log`, `block` and `score`)
     */
    status: string;
}

export interface ServiceWafConfigurationRuleExclusion {
    /**
     * A conditional expression in VCL used to determine if the condition is met
     */
    condition: string;
    /**
     * The type of rule exclusion. Values are `rule` to exclude the specified rule(s), or `waf` to disable the Web Application Firewall
     */
    exclusionType: string;
    modsecRuleIds?: number[];
    /**
     * The name of rule exclusion
     */
    name: string;
    /**
     * The numeric ID assigned to the WAF Rule Exclusion
     */
    number: number;
}

export interface Servicev1Acl {
    /**
     * The ID of the ACL
     */
    aclId: string;
    /**
     * Allow the ACL to be deleted, even if it contains entries. Defaults to false.
     */
    forceDestroy?: boolean;
    /**
     * A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
     */
    name: string;
}

export interface Servicev1Backend {
    /**
     * An IPv4, hostname, or IPv6 address for the Backend
     */
    address: string;
    /**
     * Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `true`
     */
    autoLoadbalance?: boolean;
    betweenBytesTimeout?: number;
    /**
     * How long to wait for a timeout in milliseconds. Default `1000`
     */
    connectTimeout?: number;
    /**
     * Number of errors to allow before the Backend is marked as down. Default `0`
     */
    errorThreshold?: number;
    firstByteTimeout?: number;
    /**
     * Name of a defined `healthcheck` to assign to this backend
     */
    healthcheck?: string;
    /**
     * Maximum number of connections for this Backend. Default `200`
     */
    maxConn?: number;
    maxTlsVersion?: string;
    minTlsVersion?: string;
    /**
     * Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The hostname to override the Host header
     */
    overrideHost?: string;
    /**
     * The port number on which the Backend responds. Default `80`
     */
    port?: number;
    /**
     * Name of a condition, which if met, will select this backend during a request.
     */
    requestCondition?: string;
    /**
     * The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
     */
    shield?: string;
    sslCaCert?: string;
    sslCertHostname?: string;
    sslCheckCert?: boolean;
    /**
     * Comma separated list of OpenSSL Ciphers to try when negotiating to the backend
     */
    sslCiphers?: string;
    sslClientCert?: string;
    sslClientKey?: string;
    /**
     * Used for both SNI during the TLS handshake and to validate the cert
     *
     * @deprecated Use ssl_cert_hostname and ssl_sni_hostname instead.
     */
    sslHostname?: string;
    sslSniHostname?: string;
    /**
     * Whether or not to use SSL to reach the Backend. Default `false`
     */
    useSsl?: boolean;
    /**
     * The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
     */
    weight?: number;
}

export interface Servicev1Bigquerylogging {
    /**
     * The ID of your BigQuery dataset
     */
    dataset: string;
    /**
     * The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
     */
    email: string;
    /**
     * The logging format desired.
     */
    format?: string;
    /**
     * A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The ID of your GCP project
     */
    projectId: string;
    /**
     * Name of a condition to apply this logging.
     */
    responseCondition?: string;
    /**
     * The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
     */
    secretKey: string;
    /**
     * The ID of your BigQuery table
     */
    table: string;
    /**
     * BigQuery table name suffix template
     */
    template?: string;
}

export interface Servicev1Blobstoragelogging {
    /**
     * The unique Azure Blob Storage namespace in which your data objects are stored
     */
    accountName: string;
    /**
     * The name of the Azure Blob Storage container in which to store logs
     */
    container: string;
    /**
     * Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
     */
    formatVersion?: number;
    /**
     * Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default `classic`
     */
    messageType?: string;
    /**
     * A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
     */
    path?: string;
    /**
     * How frequently the logs should be transferred in seconds. Default `3600`
     */
    period?: number;
    /**
     * Where in the generated VCL the logging call should be placed
     */
    placement?: string;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The name of the condition to apply
     */
    responseCondition?: string;
    /**
     * The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
     */
    sasToken: string;
    /**
     * `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`
     */
    timestampFormat?: string;
}

export interface Servicev1CacheSetting {
    /**
     * One of cache, pass, or restart, as defined on Fastly's documentation under "[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)"
     */
    action?: string;
    /**
     * Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
     */
    cacheCondition?: string;
    /**
     * Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Max "Time To Live" for stale (unreachable) objects
     */
    staleTtl?: number;
    /**
     * The Time-To-Live (TTL) for the object
     */
    ttl?: number;
}

export interface Servicev1Condition {
    /**
     * The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`
     */
    priority?: number;
    /**
     * The statement used to determine if the condition is met
     */
    statement: string;
    /**
     * Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)
     */
    type: string;
}

export interface Servicev1Dictionary {
    /**
     * The ID of the dictionary
     */
    dictionaryId: string;
    /**
     * Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
     */
    forceDestroy?: boolean;
    /**
     * A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
     */
    name: string;
    writeOnly?: boolean;
}

export interface Servicev1Director {
    /**
     * Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
     */
    backends: string[];
    /**
     * Load balancing weight for the backends. Default `100`
     */
    capacity?: number;
    /**
     * An optional comment about the Director
     */
    comment?: string;
    /**
     * Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
     */
    quorum?: number;
    /**
     * How many backends to search if it fails. Default `5`
     */
    retries?: number;
    /**
     * Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
     */
    shield?: string;
    /**
     * Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
     */
    type?: number;
}

export interface Servicev1Domain {
    /**
     * An optional comment about the Domain.
     */
    comment?: string;
    /**
     * The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
     */
    name: string;
}

export interface Servicev1Dynamicsnippet {
    /**
     * A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
     */
    priority?: number;
    /**
     * The ID of the dynamic snippet
     */
    snippetId: string;
    /**
     * The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
     */
    type: string;
}

export interface Servicev1Gcslogging {
    /**
     * The name of the bucket in which to store the logs
     */
    bucketName: string;
    /**
     * The email address associated with the target GCS bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_EMAIL`
     */
    email?: string;
    /**
     * Apache-style string or VCL variables to use for log formatting
     */
    format?: string;
    /**
     * Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
     */
    messageType?: string;
    /**
     * A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: string;
    /**
     * How frequently the logs should be transferred, in seconds (Default 3600)
     */
    period?: number;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * Name of a condition to apply this logging.
     */
    responseCondition?: string;
    /**
     * The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
     */
    secretKey?: string;
    /**
     * specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
}

export interface Servicev1Gzip {
    /**
     * Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     */
    cacheCondition?: string;
    /**
     * The content-type for each type of content you wish to have dynamically gzip'ed. Example: `["text/html", "text/css"]`
     */
    contentTypes?: string[];
    /**
     * File extensions for each file type to dynamically gzip. Example: `["css", "js"]`
     */
    extensions?: string[];
    /**
     * A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
}

export interface Servicev1Header {
    /**
     * The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regexRepeat`
     */
    action: string;
    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
     */
    cacheCondition?: string;
    /**
     * The name of the header that is going to be affected by the Action
     */
    destination: string;
    ignoreIfSet?: boolean;
    /**
     * Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Lower priorities execute first. Default: `100`
     */
    priority?: number;
    /**
     * Regular expression to use (Only applies to `regex` and `regexRepeat` actions.)
     */
    regex: string;
    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
     */
    requestCondition?: string;
    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     */
    responseCondition?: string;
    /**
     * Variable to be used as a source for the header content (Does not apply to `delete` action.)
     */
    source: string;
    /**
     * Value to substitute in place of regular expression. (Only applies to `regex` and `regexRepeat`.)
     */
    substitution: string;
    /**
     * The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
     */
    type: string;
}

export interface Servicev1Healthcheck {
    /**
     * How often to run the Healthcheck in milliseconds. Default `5000`
     */
    checkInterval?: number;
    /**
     * The status code expected from the host. Default `200`
     */
    expectedResponse?: number;
    /**
     * The Host header to send for this Healthcheck
     */
    host: string;
    /**
     * Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
     */
    httpVersion?: string;
    /**
     * When loading a config, the initial number of probes to be seen as OK. Default `2`
     */
    initial?: number;
    /**
     * Which HTTP method to use. Default `HEAD`
     */
    method?: string;
    /**
     * A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The path to check
     */
    path: string;
    /**
     * How many Healthchecks must succeed to be considered healthy. Default `3`
     */
    threshold?: number;
    /**
     * Timeout in milliseconds. Default `500`
     */
    timeout?: number;
    /**
     * The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
     */
    window?: number;
}

export interface Servicev1Httpslogging {
    /**
     * Value of the `Content-Type` header sent with the request
     */
    contentType?: string;
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
     */
    formatVersion?: number;
    /**
     * Custom header sent with the request
     */
    headerName?: string;
    /**
     * Value of the custom header sent with the request
     */
    headerValue?: string;
    /**
     * Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
     */
    jsonFormat?: string;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `blank`
     */
    messageType?: string;
    /**
     * HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
     */
    method?: string;
    /**
     * The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed
     */
    placement?: string;
    requestMaxBytes?: number;
    requestMaxEntries?: number;
    /**
     * The name of the condition to apply
     */
    responseCondition?: string;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * Used during the TLS handshake to validate the certificate
     */
    tlsHostname?: string;
    /**
     * URL that log data will be sent to. Must use the https protocol
     */
    url: string;
}

export interface Servicev1Logentry {
    /**
     * Apache-style string or VCL variables to use for log formatting
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1)
     */
    formatVersion?: number;
    /**
     * The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The port number configured in Logentries
     */
    port?: number;
    /**
     * Name of blockAttributes condition to apply this logging.
     */
    responseCondition?: string;
    /**
     * Use token based authentication (https://logentries.com/doc/input-token/)
     */
    token: string;
    /**
     * Whether to use TLS for secure logging
     */
    useTls?: boolean;
}

export interface Servicev1LoggingCloudfile {
    /**
     * Your Cloud File account access key
     */
    accessKey: string;
    /**
     * The name of your Cloud Files container
     */
    bucketName: string;
    /**
     * Apache style log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * What level of GZIP encoding to have when dumping logs (default `0`, no compression)
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
     */
    messageType?: string;
    /**
     * The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The path to upload logs to
     */
    path?: string;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: number;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
     */
    placement?: string;
    /**
     * The PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
     */
    region?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
    /**
     * The username for your Cloud Files account
     */
    user: string;
}

export interface Servicev1LoggingDatadog {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
     */
    region?: string;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: string;
    /**
     * The API key from your Datadog account
     */
    token: string;
}

export interface Servicev1LoggingDigitalocean {
    /**
     * Your DigitalOcean Spaces account access key
     */
    accessKey: string;
    /**
     * The name of the DigitalOcean Space
     */
    bucketName: string;
    /**
     * The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
     */
    domain?: string;
    /**
     * Apache style log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * What level of Gzip encoding to have when dumping logs (default `0`, no compression)
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
     */
    messageType?: string;
    /**
     * The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The path to upload logs to
     */
    path?: string;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: number;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
     */
    placement?: string;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * Your DigitalOcean Spaces account secret key
     */
    secretKey: string;
    /**
     * `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
}

export interface Servicev1LoggingElasticsearch {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: number;
    /**
     * The name of the Elasticsearch index to send documents (logs) to
     */
    index: string;
    /**
     * The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * BasicAuth password for Elasticsearch
     */
    password?: string;
    /**
     * The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
     */
    pipeline?: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    requestMaxBytes?: number;
    requestMaxEntries?: number;
    /**
     * The name of the condition to apply
     */
    responseCondition?: string;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
     */
    tlsHostname?: string;
    /**
     * The Elasticsearch URL to stream logs to
     */
    url: string;
    /**
     * BasicAuth username for Elasticsearch
     */
    user?: string;
}

export interface Servicev1LoggingFtp {
    /**
     * The FTP address to stream logs to
     */
    address: string;
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: number;
    /**
     * Gzip Compression level. Default `0`
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted (default: `classic`)
     */
    messageType?: string;
    /**
     * The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The password for the server (for anonymous use an email address)
     */
    password: string;
    /**
     * The path to upload log files to. If the path ends in `/` then it is treated as a directory
     */
    path: string;
    /**
     * How frequently the logs should be transferred, in seconds (Default `3600`)
     */
    period?: number;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The port number. Default: `21`
     */
    port?: number;
    /**
     * The PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: string;
    /**
     * specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
    /**
     * The username for the server (can be `anonymous`)
     */
    user: string;
}

export interface Servicev1LoggingGooglepubsub {
    /**
     * Apache style log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: number;
    /**
     * The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The ID of your Google Cloud Platform project
     */
    projectId: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
     */
    secretKey: string;
    /**
     * The Google Cloud Pub/Sub topic to which logs will be published
     */
    topic: string;
    /**
     * Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
     */
    user: string;
}

export interface Servicev1LoggingHeroku {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
     */
    placement?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
     */
    token: string;
    /**
     * The URL to stream logs to
     */
    url: string;
}

export interface Servicev1LoggingHoneycomb {
    /**
     * The Honeycomb Dataset you want to log to
     */
    dataset: string;
    /**
     * Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
     */
    placement?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * The Write Key from the Account page of your Honeycomb account
     */
    token: string;
}

export interface Servicev1LoggingKafka {
    /**
     * SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
     */
    authMethod?: string;
    /**
     * A comma-separated list of IP addresses or hostnames of Kafka brokers
     */
    brokers: string;
    /**
     * The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
     */
    compressionCodec?: string;
    /**
     * Apache style log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: number;
    /**
     * The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    parseLogKeyvals?: boolean;
    /**
     * SASL Pass
     */
    password?: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    requestMaxBytes?: number;
    /**
     * The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1`	Wait for all in-sync replicas to respond
     */
    requiredAcks?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     */
    tlsHostname?: string;
    /**
     * The Kafka topic to send logs to
     */
    topic: string;
    /**
     * Whether to use TLS for secure logging. Can be either `true` or `false`
     */
    useTls?: boolean;
    /**
     * SASL User
     */
    user?: string;
}

export interface Servicev1LoggingKinese {
    /**
     * The AWS access key to be used to write to the stream
     */
    accessKey: string;
    /**
     * Apache style log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
     */
    placement?: string;
    /**
     * The AWS region the stream resides in. (Default: `us-east-1`)
     */
    region?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * The AWS secret access key to authenticate with
     */
    secretKey: string;
    /**
     * The Kinesis stream name
     */
    topic: string;
}

export interface Servicev1LoggingLoggly {
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
     */
    placement?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
     */
    token: string;
}

export interface Servicev1LoggingLogshuttle {
    /**
     * Apache style log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
     */
    placement?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * The data authentication token associated with this endpoint
     */
    token: string;
    /**
     * Your Log Shuttle endpoint URL
     */
    url: string;
}

export interface Servicev1LoggingNewrelic {
    /**
     * Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: string;
    /**
     * The Insert API key from the Account page of your New Relic account
     */
    token: string;
}

export interface Servicev1LoggingOpenstack {
    /**
     * Your OpenStack account access key
     */
    accessKey: string;
    /**
     * The name of your OpenStack container
     */
    bucketName: string;
    /**
     * Apache style log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     */
    formatVersion?: number;
    /**
     * What level of Gzip encoding to have when dumping logs (default `0`, no compression)
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
     */
    messageType?: string;
    /**
     * The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: string;
    /**
     * How frequently the logs should be transferred, in seconds. Default `3600`
     */
    period?: number;
    /**
     * Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
     */
    placement?: string;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
    /**
     * Your OpenStack auth url
     */
    url: string;
    /**
     * The username for your OpenStack account
     */
    user: string;
}

export interface Servicev1LoggingScalyr {
    /**
     * Apache style log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: number;
    /**
     * The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
     */
    region?: string;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     */
    responseCondition?: string;
    /**
     * The token to use for authentication (https://www.scalyr.com/keys)
     */
    token: string;
}

export interface Servicev1LoggingSftp {
    /**
     * The SFTP address to stream logs to
     */
    address: string;
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     */
    formatVersion?: number;
    /**
     * What level of Gzip encoding to have when dumping logs (default `0`, no compression)
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
     */
    messageType?: string;
    /**
     * The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
     */
    password?: string;
    /**
     * The path to upload log files to. If the path ends in `/` then it is treated as a directory
     */
    path: string;
    /**
     * How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     */
    period?: number;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The port the SFTP service listens on. (Default: `22`)
     */
    port?: number;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The name of the condition to apply.
     */
    responseCondition?: string;
    /**
     * The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
     */
    secretKey?: string;
    sshKnownHosts: string;
    /**
     * The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
    /**
     * The username for the server
     */
    user: string;
}

export interface Servicev1Papertrail {
    /**
     * The address of the Papertrail endpoint
     */
    address: string;
    /**
     * A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`
     */
    formatVersion?: number;
    /**
     * A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed. If not set, endpoints with `formatVersion` of 2 are placed in `vclLog` and those with `formatVersion` of 1 are placed in `vclDeliver`
     */
    placement?: string;
    /**
     * The port associated with the address where the Papertrail endpoint can be accessed
     */
    port: number;
    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute
     */
    responseCondition?: string;
}

export interface Servicev1RequestSetting {
    /**
     * Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
     */
    action?: string;
    bypassBusyWait?: boolean;
    /**
     * Sets the host header
     */
    defaultHost?: string;
    /**
     * Force a cache miss for the request. If specified, can be `true` or `false`
     */
    forceMiss?: boolean;
    /**
     * Forces the request to use SSL (Redirects a non-SSL request to SSL)
     */
    forceSsl?: boolean;
    /**
     * Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers
     */
    geoHeaders?: boolean;
    /**
     * Comma separated list of varnish request object fields that should be in the hash key
     */
    hashKeys?: string;
    maxStaleAge?: number;
    /**
     * Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Name of already defined `condition` to determine if this request setting should be applied
     */
    requestCondition?: string;
    /**
     * Injects the X-Timer info into the request for viewing origin fetch durations
     */
    timerSupport?: boolean;
    /**
     * X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
     */
    xff?: string;
}

export interface Servicev1ResponseObject {
    /**
     * Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     */
    cacheCondition?: string;
    /**
     * The content to deliver for the response object
     */
    content?: string;
    /**
     * The MIME type of the content
     */
    contentType?: string;
    /**
     * A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
     */
    requestCondition?: string;
    /**
     * The HTTP Response. Default `OK`
     */
    response?: string;
    /**
     * The HTTP Status Code. Default `200`
     */
    status?: number;
}

export interface Servicev1S3logging {
    /**
     * The name of the bucket in which to store the logs
     */
    bucketName: string;
    /**
     * If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
     */
    domain?: string;
    /**
     * Apache-style string or VCL variables to use for log formatting.
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1).
     */
    formatVersion?: number;
    /**
     * Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
     */
    gzipLevel?: number;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
     */
    messageType?: string;
    /**
     * The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
     */
    path?: string;
    /**
     * How frequently the logs should be transferred, in seconds. Default `3600`
     */
    period?: number;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     */
    publicKey?: string;
    /**
     * The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`
     */
    redundancy?: string;
    /**
     * Name of blockAttributes condition to apply this logging.
     */
    responseCondition?: string;
    s3AccessKey?: string;
    s3SecretKey?: string;
    serverSideEncryption?: string;
    serverSideEncryptionKmsKeyId?: string;
    /**
     * `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     */
    timestampFormat?: string;
}

export interface Servicev1Snippet {
    /**
     * The VCL code that specifies exactly what the snippet does
     */
    content: string;
    /**
     * A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
     */
    priority?: number;
    /**
     * The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
     */
    type: string;
}

export interface Servicev1Splunk {
    /**
     * Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
     */
    formatVersion?: number;
    /**
     * A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed
     */
    placement?: string;
    /**
     * The name of the condition to apply
     */
    responseCondition?: string;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     */
    tlsHostname?: string;
    /**
     * The Splunk token to be used for authentication
     */
    token: string;
    /**
     * The Splunk URL to stream logs to
     */
    url: string;
}

export interface Servicev1Sumologic {
    /**
     * Apache-style string or VCL variables to use for log formatting
     */
    format?: string;
    /**
     * The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1)
     */
    formatVersion?: number;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. See [Fastly's Documentation on Sumologic](https://developer.fastly.com/reference/api/logging/sumologic/)
     */
    messageType?: string;
    /**
     * A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * Name of blockAttributes condition to apply this logging.
     */
    responseCondition?: string;
    /**
     * The URL to Sumologic collector endpoint
     */
    url: string;
}

export interface Servicev1Syslog {
    /**
     * A hostname or IPv4 address of the Syslog endpoint
     */
    address: string;
    /**
     * Apache-style string or VCL variables to use for log formatting
     */
    format?: string;
    /**
     * The version of the custom logging format. Can be either 1 or 2. (Default: 1)
     */
    formatVersion?: number;
    /**
     * How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
     */
    messageType?: string;
    /**
     * A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
    /**
     * Where in the generated VCL the logging call should be placed.
     */
    placement?: string;
    /**
     * The port associated with the address where the Syslog endpoint can be accessed. Default `514`
     */
    port?: number;
    /**
     * Name of blockAttributes condition to apply this logging.
     */
    responseCondition?: string;
    tlsCaCert?: string;
    tlsClientCert?: string;
    tlsClientKey?: string;
    /**
     * Used during the TLS handshake to validate the certificate
     */
    tlsHostname?: string;
    /**
     * Whether to prepend each message with a specific token
     */
    token?: string;
    /**
     * Whether to use TLS for secure logging. Default `false`
     */
    useTls?: boolean;
}

export interface Servicev1Vcl {
    /**
     * The custom VCL code to upload
     */
    content: string;
    /**
     * If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
     */
    main?: boolean;
    /**
     * A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
     */
    name: string;
}

export interface Servicev1Waf {
    /**
     * A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
     */
    disabled?: boolean;
    /**
     * The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     */
    prefetchCondition?: string;
    /**
     * The name of the response object used by the Web Application Firewall
     */
    responseObject: string;
    /**
     * The ID of the WAF
     */
    wafId: string;
}
