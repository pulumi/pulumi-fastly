// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Fastly Next-Gen WAF Workspace Signal, scoped to a specific NGWAF workspace.\
 * These signals define conditions and actions that trigger WAF enforcement at the workspace level.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const example = new fastly.NgwafWorkspace("example", {
 *     name: "example",
 *     description: "Test NGWAF Workspace",
 *     mode: "block",
 *     ipAnonymization: "hashed",
 *     clientIpHeaders: [
 *         "X-Forwarded-For",
 *         "X-Real-IP",
 *     ],
 *     defaultBlockingResponseCode: 429,
 *     attackSignalThresholds: {},
 * });
 * const exampleNgwafWorkspaceSignal = new fastly.NgwafWorkspaceSignal("example", {
 *     workspaceId: example.id,
 *     description: "example",
 *     name: "Test Name",
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF workspace signals can be imported using the format `<workspaceID>/<signalID>`, e.g.:
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal demo <workspaceID>/<signalID>
 * ```
 */
export class NgwafWorkspaceSignal extends pulumi.CustomResource {
    /**
     * Get an existing NgwafWorkspaceSignal resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafWorkspaceSignalState, opts?: pulumi.CustomResourceOptions): NgwafWorkspaceSignal {
        return new NgwafWorkspaceSignal(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal';

    /**
     * Returns true if the given object is an instance of NgwafWorkspaceSignal.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafWorkspaceSignal {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafWorkspaceSignal.__pulumiType;
    }

    /**
     * The description of the signal.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * The name of the signal. Special characters and periods are not accepted.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The generated reference ID of the signal.
     */
    declare public /*out*/ readonly referenceId: pulumi.Output<string>;
    /**
     * The ID of the workspace.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a NgwafWorkspaceSignal resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafWorkspaceSignalArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafWorkspaceSignalArgs | NgwafWorkspaceSignalState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafWorkspaceSignalState | undefined;
            resourceInputs["description"] = state?.description;
            resourceInputs["name"] = state?.name;
            resourceInputs["referenceId"] = state?.referenceId;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as NgwafWorkspaceSignalArgs | undefined;
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["name"] = args?.name;
            resourceInputs["workspaceId"] = args?.workspaceId;
            resourceInputs["referenceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgwafWorkspaceSignal.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafWorkspaceSignal resources.
 */
export interface NgwafWorkspaceSignalState {
    /**
     * The description of the signal.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the signal. Special characters and periods are not accepted.
     */
    name?: pulumi.Input<string>;
    /**
     * The generated reference ID of the signal.
     */
    referenceId?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafWorkspaceSignal resource.
 */
export interface NgwafWorkspaceSignalArgs {
    /**
     * The description of the signal.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the signal. Special characters and periods are not accepted.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId: pulumi.Input<string>;
}
