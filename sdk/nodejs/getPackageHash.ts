// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to generate a SHA512 hash of all files (in sorted order) within the package.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const examplePackageHash = fastly.getPackageHash({
 *     filename: "./path/to/package.tar.gz",
 * });
 * // ...
 * const exampleServiceCompute = new fastly.ServiceCompute("exampleServiceCompute", {"package": {
 *     filename: "./path/to/package.tar.gz",
 *     sourceCodeHash: examplePackageHash.then(examplePackageHash => examplePackageHash.hash),
 * }});
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getPackageHash(args?: GetPackageHashArgs, opts?: pulumi.InvokeOptions): Promise<GetPackageHashResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fastly:index/getPackageHash:getPackageHash", {
        "content": args.content,
        "filename": args.filename,
    }, opts);
}

/**
 * A collection of arguments for invoking getPackageHash.
 */
export interface GetPackageHashArgs {
    /**
     * The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
     */
    content?: string;
    /**
     * The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
     */
    filename?: string;
}

/**
 * A collection of values returned by getPackageHash.
 */
export interface GetPackageHashResult {
    /**
     * The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
     */
    readonly content?: string;
    /**
     * The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
     */
    readonly filename?: string;
    /**
     * A SHA512 hash of all files (in sorted order) within the package.
     */
    readonly hash: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
}
/**
 * Use this data source to generate a SHA512 hash of all files (in sorted order) within the package.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const examplePackageHash = fastly.getPackageHash({
 *     filename: "./path/to/package.tar.gz",
 * });
 * // ...
 * const exampleServiceCompute = new fastly.ServiceCompute("exampleServiceCompute", {"package": {
 *     filename: "./path/to/package.tar.gz",
 *     sourceCodeHash: examplePackageHash.then(examplePackageHash => examplePackageHash.hash),
 * }});
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getPackageHashOutput(args?: GetPackageHashOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPackageHashResult> {
    return pulumi.output(args).apply((a: any) => getPackageHash(a, opts))
}

/**
 * A collection of arguments for invoking getPackageHash.
 */
export interface GetPackageHashOutputArgs {
    /**
     * The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
     */
    content?: pulumi.Input<string>;
    /**
     * The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
     */
    filename?: pulumi.Input<string>;
}
