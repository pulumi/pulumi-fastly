// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Uploads a custom TLS certificate to Fastly to be used to terminate TLS traffic.
 *
 * > Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 * import * as tls from "@pulumi/tls";
 *
 * const keyPrivateKey = new tls.PrivateKey("keyPrivateKey", {algorithm: "RSA"});
 * const cert = new tls.SelfSignedCert("cert", {
 *     keyAlgorithm: keyPrivateKey.algorithm,
 *     privateKeyPem: keyPrivateKey.privateKeyPem,
 *     subjects: [{
 *         commonName: "example.com",
 *     }],
 *     isCaCertificate: true,
 *     validityPeriodHours: 360,
 *     allowedUses: [
 *         "cert_signing",
 *         "server_auth",
 *     ],
 *     dnsNames: ["example.com"],
 * });
 * const keyTlsPrivateKey = new fastly.TlsPrivateKey("keyTlsPrivateKey", {keyPem: keyPrivateKey.privateKeyPem});
 * const example = new fastly.TlsCertificate("example", {certificateBody: cert.certPem}, {
 *     dependsOn: [keyTlsPrivateKey],
 * });
 * // The private key has to be present before the certificate can be uploaded
 * ```
 *
 * ## Import
 *
 * A certificate can be imported using its Fastly certificate ID, e.g.
 *
 * ```sh
 *  $ pulumi import fastly:index/tlsCertificate:TlsCertificate demo xxxxxxxxxxx
 * ```
 */
export class TlsCertificate extends pulumi.CustomResource {
    /**
     * Get an existing TlsCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TlsCertificateState, opts?: pulumi.CustomResourceOptions): TlsCertificate {
        return new TlsCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/tlsCertificate:TlsCertificate';

    /**
     * Returns true if the given object is an instance of TlsCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TlsCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TlsCertificate.__pulumiType;
    }

    /**
     * PEM-formatted certificate, optionally including any intermediary certificates.
     */
    public readonly certificateBody!: pulumi.Output<string>;
    /**
     * Timestamp (GMT) when the certificate was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
     */
    public /*out*/ readonly domains!: pulumi.Output<string[]>;
    /**
     * The hostname for which a certificate was issued.
     */
    public /*out*/ readonly issuedTo!: pulumi.Output<string>;
    /**
     * The certificate authority that issued the certificate.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     */
    public /*out*/ readonly replace!: pulumi.Output<boolean>;
    /**
     * A value assigned by the issuer that is unique to a certificate.
     */
    public /*out*/ readonly serialNumber!: pulumi.Output<string>;
    /**
     * The algorithm used to sign the certificate.
     */
    public /*out*/ readonly signatureAlgorithm!: pulumi.Output<string>;
    /**
     * Timestamp (GMT) when the certificate was last updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a TlsCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TlsCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TlsCertificateArgs | TlsCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TlsCertificateState | undefined;
            resourceInputs["certificateBody"] = state ? state.certificateBody : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["issuedTo"] = state ? state.issuedTo : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["replace"] = state ? state.replace : undefined;
            resourceInputs["serialNumber"] = state ? state.serialNumber : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as TlsCertificateArgs | undefined;
            if ((!args || args.certificateBody === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateBody'");
            }
            resourceInputs["certificateBody"] = args ? args.certificateBody : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["domains"] = undefined /*out*/;
            resourceInputs["issuedTo"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["replace"] = undefined /*out*/;
            resourceInputs["serialNumber"] = undefined /*out*/;
            resourceInputs["signatureAlgorithm"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TlsCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TlsCertificate resources.
 */
export interface TlsCertificateState {
    /**
     * PEM-formatted certificate, optionally including any intermediary certificates.
     */
    certificateBody?: pulumi.Input<string>;
    /**
     * Timestamp (GMT) when the certificate was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The hostname for which a certificate was issued.
     */
    issuedTo?: pulumi.Input<string>;
    /**
     * The certificate authority that issued the certificate.
     */
    issuer?: pulumi.Input<string>;
    /**
     * Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
     */
    name?: pulumi.Input<string>;
    /**
     * A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     */
    replace?: pulumi.Input<boolean>;
    /**
     * A value assigned by the issuer that is unique to a certificate.
     */
    serialNumber?: pulumi.Input<string>;
    /**
     * The algorithm used to sign the certificate.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * Timestamp (GMT) when the certificate was last updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TlsCertificate resource.
 */
export interface TlsCertificateArgs {
    /**
     * PEM-formatted certificate, optionally including any intermediary certificates.
     */
    certificateBody: pulumi.Input<string>;
    /**
     * Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
     */
    name?: pulumi.Input<string>;
}
