// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * Fastly Services can be imported using their service ID, e.g.
 *
 * ```sh
 * $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx
 * ```
 *
 * By default, either the active version will be imported, or the latest version if no version is active.
 *
 * Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
 *
 * ```sh
 * $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2
 * ```
 */
export class ServiceVcl extends pulumi.CustomResource {
    /**
     * Get an existing ServiceVcl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceVclState, opts?: pulumi.CustomResourceOptions): ServiceVcl {
        return new ServiceVcl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/serviceVcl:ServiceVcl';

    /**
     * Returns true if the given object is an instance of ServiceVcl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceVcl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceVcl.__pulumiType;
    }

    declare public readonly acls: pulumi.Output<outputs.ServiceVclAcl[] | undefined>;
    /**
     * Conditionally prevents new service versions from being activated. The apply step will create a new draft version but will not activate it if this is set to `false`. Default `true`
     */
    declare public readonly activate: pulumi.Output<boolean | undefined>;
    /**
     * The currently active version of your Fastly Service
     */
    declare public /*out*/ readonly activeVersion: pulumi.Output<number>;
    declare public readonly backends: pulumi.Output<outputs.ServiceVclBackend[] | undefined>;
    declare public readonly cacheSettings: pulumi.Output<outputs.ServiceVclCacheSetting[] | undefined>;
    /**
     * The latest cloned version by the provider
     */
    declare public /*out*/ readonly clonedVersion: pulumi.Output<number>;
    declare public readonly comment: pulumi.Output<string | undefined>;
    declare public readonly conditions: pulumi.Output<outputs.ServiceVclCondition[] | undefined>;
    /**
     * The default hostname
     */
    declare public readonly defaultHost: pulumi.Output<string | undefined>;
    /**
     * The default Time-to-live (TTL) for requests
     */
    declare public readonly defaultTtl: pulumi.Output<number | undefined>;
    declare public readonly dictionaries: pulumi.Output<outputs.ServiceVclDictionary[] | undefined>;
    declare public readonly directors: pulumi.Output<outputs.ServiceVclDirector[] | undefined>;
    /**
     * A set of Domain names to serve as entry points for your Service
     */
    declare public readonly domains: pulumi.Output<outputs.ServiceVclDomain[]>;
    declare public readonly dynamicsnippets: pulumi.Output<outputs.ServiceVclDynamicsnippet[] | undefined>;
    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
     */
    declare public readonly forceDestroy: pulumi.Output<boolean | undefined>;
    declare public /*out*/ readonly forceRefresh: pulumi.Output<boolean>;
    declare public readonly gzips: pulumi.Output<outputs.ServiceVclGzip[] | undefined>;
    declare public readonly headers: pulumi.Output<outputs.ServiceVclHeader[] | undefined>;
    declare public readonly healthchecks: pulumi.Output<outputs.ServiceVclHealthcheck[] | undefined>;
    /**
     * Enables support for the HTTP/3 (QUIC) protocol
     */
    declare public readonly http3: pulumi.Output<boolean | undefined>;
    declare public readonly imageOptimizerDefaultSettings: pulumi.Output<outputs.ServiceVclImageOptimizerDefaultSettings | undefined>;
    /**
     * Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
     */
    declare public /*out*/ readonly imported: pulumi.Output<boolean>;
    declare public readonly loggingBigqueries: pulumi.Output<outputs.ServiceVclLoggingBigquery[] | undefined>;
    declare public readonly loggingBlobstorages: pulumi.Output<outputs.ServiceVclLoggingBlobstorage[] | undefined>;
    declare public readonly loggingCloudfiles: pulumi.Output<outputs.ServiceVclLoggingCloudfile[] | undefined>;
    declare public readonly loggingDatadogs: pulumi.Output<outputs.ServiceVclLoggingDatadog[] | undefined>;
    declare public readonly loggingDigitaloceans: pulumi.Output<outputs.ServiceVclLoggingDigitalocean[] | undefined>;
    declare public readonly loggingElasticsearches: pulumi.Output<outputs.ServiceVclLoggingElasticsearch[] | undefined>;
    declare public readonly loggingFtps: pulumi.Output<outputs.ServiceVclLoggingFtp[] | undefined>;
    declare public readonly loggingGcs: pulumi.Output<outputs.ServiceVclLoggingGc[] | undefined>;
    declare public readonly loggingGooglepubsubs: pulumi.Output<outputs.ServiceVclLoggingGooglepubsub[] | undefined>;
    declare public readonly loggingGrafanacloudlogs: pulumi.Output<outputs.ServiceVclLoggingGrafanacloudlog[] | undefined>;
    declare public readonly loggingHerokus: pulumi.Output<outputs.ServiceVclLoggingHerokus[] | undefined>;
    declare public readonly loggingHoneycombs: pulumi.Output<outputs.ServiceVclLoggingHoneycomb[] | undefined>;
    declare public readonly loggingHttps: pulumi.Output<outputs.ServiceVclLoggingHttp[] | undefined>;
    declare public readonly loggingKafkas: pulumi.Output<outputs.ServiceVclLoggingKafka[] | undefined>;
    declare public readonly loggingKineses: pulumi.Output<outputs.ServiceVclLoggingKinese[] | undefined>;
    declare public readonly loggingLogentries: pulumi.Output<outputs.ServiceVclLoggingLogentry[] | undefined>;
    declare public readonly loggingLogglies: pulumi.Output<outputs.ServiceVclLoggingLoggly[] | undefined>;
    declare public readonly loggingLogshuttles: pulumi.Output<outputs.ServiceVclLoggingLogshuttle[] | undefined>;
    declare public readonly loggingNewrelicotlps: pulumi.Output<outputs.ServiceVclLoggingNewrelicotlp[] | undefined>;
    declare public readonly loggingNewrelics: pulumi.Output<outputs.ServiceVclLoggingNewrelic[] | undefined>;
    declare public readonly loggingOpenstacks: pulumi.Output<outputs.ServiceVclLoggingOpenstack[] | undefined>;
    declare public readonly loggingPapertrails: pulumi.Output<outputs.ServiceVclLoggingPapertrail[] | undefined>;
    declare public readonly loggingS3s: pulumi.Output<outputs.ServiceVclLoggingS3[] | undefined>;
    declare public readonly loggingScalyrs: pulumi.Output<outputs.ServiceVclLoggingScalyr[] | undefined>;
    declare public readonly loggingSftps: pulumi.Output<outputs.ServiceVclLoggingSftp[] | undefined>;
    declare public readonly loggingSplunks: pulumi.Output<outputs.ServiceVclLoggingSplunk[] | undefined>;
    declare public readonly loggingSumologics: pulumi.Output<outputs.ServiceVclLoggingSumologic[] | undefined>;
    declare public readonly loggingSyslogs: pulumi.Output<outputs.ServiceVclLoggingSyslog[] | undefined>;
    /**
     * The unique name for the Service to create
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly productEnablement: pulumi.Output<outputs.ServiceVclProductEnablement | undefined>;
    declare public readonly rateLimiters: pulumi.Output<outputs.ServiceVclRateLimiter[] | undefined>;
    declare public readonly requestSettings: pulumi.Output<outputs.ServiceVclRequestSetting[] | undefined>;
    declare public readonly responseObjects: pulumi.Output<outputs.ServiceVclResponseObject[] | undefined>;
    declare public readonly reuse: pulumi.Output<boolean | undefined>;
    declare public readonly snippets: pulumi.Output<outputs.ServiceVclSnippet[] | undefined>;
    /**
     * Conditionally enables new service versions to be staged. If `set` to true, all changes made by an `apply` step will be staged, even if `apply` did not create a new draft version. Default `false`
     */
    declare public readonly stage: pulumi.Output<boolean | undefined>;
    /**
     * The currently staged version of your Fastly Service
     */
    declare public /*out*/ readonly stagedVersion: pulumi.Output<number>;
    /**
     * Enables serving a stale object if there is an error
     */
    declare public readonly staleIfError: pulumi.Output<boolean | undefined>;
    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     */
    declare public readonly staleIfErrorTtl: pulumi.Output<number | undefined>;
    declare public readonly vcls: pulumi.Output<outputs.ServiceVclVcl[] | undefined>;
    /**
     * Description field for the version
     */
    declare public readonly versionComment: pulumi.Output<string | undefined>;

    /**
     * Create a ServiceVcl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceVclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceVclArgs | ServiceVclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceVclState | undefined;
            resourceInputs["acls"] = state?.acls;
            resourceInputs["activate"] = state?.activate;
            resourceInputs["activeVersion"] = state?.activeVersion;
            resourceInputs["backends"] = state?.backends;
            resourceInputs["cacheSettings"] = state?.cacheSettings;
            resourceInputs["clonedVersion"] = state?.clonedVersion;
            resourceInputs["comment"] = state?.comment;
            resourceInputs["conditions"] = state?.conditions;
            resourceInputs["defaultHost"] = state?.defaultHost;
            resourceInputs["defaultTtl"] = state?.defaultTtl;
            resourceInputs["dictionaries"] = state?.dictionaries;
            resourceInputs["directors"] = state?.directors;
            resourceInputs["domains"] = state?.domains;
            resourceInputs["dynamicsnippets"] = state?.dynamicsnippets;
            resourceInputs["forceDestroy"] = state?.forceDestroy;
            resourceInputs["forceRefresh"] = state?.forceRefresh;
            resourceInputs["gzips"] = state?.gzips;
            resourceInputs["headers"] = state?.headers;
            resourceInputs["healthchecks"] = state?.healthchecks;
            resourceInputs["http3"] = state?.http3;
            resourceInputs["imageOptimizerDefaultSettings"] = state?.imageOptimizerDefaultSettings;
            resourceInputs["imported"] = state?.imported;
            resourceInputs["loggingBigqueries"] = state?.loggingBigqueries;
            resourceInputs["loggingBlobstorages"] = state?.loggingBlobstorages;
            resourceInputs["loggingCloudfiles"] = state?.loggingCloudfiles;
            resourceInputs["loggingDatadogs"] = state?.loggingDatadogs;
            resourceInputs["loggingDigitaloceans"] = state?.loggingDigitaloceans;
            resourceInputs["loggingElasticsearches"] = state?.loggingElasticsearches;
            resourceInputs["loggingFtps"] = state?.loggingFtps;
            resourceInputs["loggingGcs"] = state?.loggingGcs;
            resourceInputs["loggingGooglepubsubs"] = state?.loggingGooglepubsubs;
            resourceInputs["loggingGrafanacloudlogs"] = state?.loggingGrafanacloudlogs;
            resourceInputs["loggingHerokus"] = state?.loggingHerokus;
            resourceInputs["loggingHoneycombs"] = state?.loggingHoneycombs;
            resourceInputs["loggingHttps"] = state?.loggingHttps;
            resourceInputs["loggingKafkas"] = state?.loggingKafkas;
            resourceInputs["loggingKineses"] = state?.loggingKineses;
            resourceInputs["loggingLogentries"] = state?.loggingLogentries;
            resourceInputs["loggingLogglies"] = state?.loggingLogglies;
            resourceInputs["loggingLogshuttles"] = state?.loggingLogshuttles;
            resourceInputs["loggingNewrelicotlps"] = state?.loggingNewrelicotlps;
            resourceInputs["loggingNewrelics"] = state?.loggingNewrelics;
            resourceInputs["loggingOpenstacks"] = state?.loggingOpenstacks;
            resourceInputs["loggingPapertrails"] = state?.loggingPapertrails;
            resourceInputs["loggingS3s"] = state?.loggingS3s;
            resourceInputs["loggingScalyrs"] = state?.loggingScalyrs;
            resourceInputs["loggingSftps"] = state?.loggingSftps;
            resourceInputs["loggingSplunks"] = state?.loggingSplunks;
            resourceInputs["loggingSumologics"] = state?.loggingSumologics;
            resourceInputs["loggingSyslogs"] = state?.loggingSyslogs;
            resourceInputs["name"] = state?.name;
            resourceInputs["productEnablement"] = state?.productEnablement;
            resourceInputs["rateLimiters"] = state?.rateLimiters;
            resourceInputs["requestSettings"] = state?.requestSettings;
            resourceInputs["responseObjects"] = state?.responseObjects;
            resourceInputs["reuse"] = state?.reuse;
            resourceInputs["snippets"] = state?.snippets;
            resourceInputs["stage"] = state?.stage;
            resourceInputs["stagedVersion"] = state?.stagedVersion;
            resourceInputs["staleIfError"] = state?.staleIfError;
            resourceInputs["staleIfErrorTtl"] = state?.staleIfErrorTtl;
            resourceInputs["vcls"] = state?.vcls;
            resourceInputs["versionComment"] = state?.versionComment;
        } else {
            const args = argsOrState as ServiceVclArgs | undefined;
            if (args?.domains === undefined && !opts.urn) {
                throw new Error("Missing required property 'domains'");
            }
            resourceInputs["acls"] = args?.acls;
            resourceInputs["activate"] = args?.activate;
            resourceInputs["backends"] = args?.backends;
            resourceInputs["cacheSettings"] = args?.cacheSettings;
            resourceInputs["comment"] = args?.comment;
            resourceInputs["conditions"] = args?.conditions;
            resourceInputs["defaultHost"] = args?.defaultHost;
            resourceInputs["defaultTtl"] = args?.defaultTtl;
            resourceInputs["dictionaries"] = args?.dictionaries;
            resourceInputs["directors"] = args?.directors;
            resourceInputs["domains"] = args?.domains;
            resourceInputs["dynamicsnippets"] = args?.dynamicsnippets;
            resourceInputs["forceDestroy"] = args?.forceDestroy;
            resourceInputs["gzips"] = args?.gzips;
            resourceInputs["headers"] = args?.headers;
            resourceInputs["healthchecks"] = args?.healthchecks;
            resourceInputs["http3"] = args?.http3;
            resourceInputs["imageOptimizerDefaultSettings"] = args?.imageOptimizerDefaultSettings;
            resourceInputs["loggingBigqueries"] = args?.loggingBigqueries;
            resourceInputs["loggingBlobstorages"] = args?.loggingBlobstorages;
            resourceInputs["loggingCloudfiles"] = args?.loggingCloudfiles;
            resourceInputs["loggingDatadogs"] = args?.loggingDatadogs;
            resourceInputs["loggingDigitaloceans"] = args?.loggingDigitaloceans;
            resourceInputs["loggingElasticsearches"] = args?.loggingElasticsearches;
            resourceInputs["loggingFtps"] = args?.loggingFtps;
            resourceInputs["loggingGcs"] = args?.loggingGcs;
            resourceInputs["loggingGooglepubsubs"] = args?.loggingGooglepubsubs;
            resourceInputs["loggingGrafanacloudlogs"] = args?.loggingGrafanacloudlogs;
            resourceInputs["loggingHerokus"] = args?.loggingHerokus;
            resourceInputs["loggingHoneycombs"] = args?.loggingHoneycombs;
            resourceInputs["loggingHttps"] = args?.loggingHttps;
            resourceInputs["loggingKafkas"] = args?.loggingKafkas;
            resourceInputs["loggingKineses"] = args?.loggingKineses;
            resourceInputs["loggingLogentries"] = args?.loggingLogentries;
            resourceInputs["loggingLogglies"] = args?.loggingLogglies;
            resourceInputs["loggingLogshuttles"] = args?.loggingLogshuttles;
            resourceInputs["loggingNewrelicotlps"] = args?.loggingNewrelicotlps;
            resourceInputs["loggingNewrelics"] = args?.loggingNewrelics;
            resourceInputs["loggingOpenstacks"] = args?.loggingOpenstacks;
            resourceInputs["loggingPapertrails"] = args?.loggingPapertrails;
            resourceInputs["loggingS3s"] = args?.loggingS3s;
            resourceInputs["loggingScalyrs"] = args?.loggingScalyrs;
            resourceInputs["loggingSftps"] = args?.loggingSftps;
            resourceInputs["loggingSplunks"] = args?.loggingSplunks;
            resourceInputs["loggingSumologics"] = args?.loggingSumologics;
            resourceInputs["loggingSyslogs"] = args?.loggingSyslogs;
            resourceInputs["name"] = args?.name;
            resourceInputs["productEnablement"] = args?.productEnablement;
            resourceInputs["rateLimiters"] = args?.rateLimiters;
            resourceInputs["requestSettings"] = args?.requestSettings;
            resourceInputs["responseObjects"] = args?.responseObjects;
            resourceInputs["reuse"] = args?.reuse;
            resourceInputs["snippets"] = args?.snippets;
            resourceInputs["stage"] = args?.stage;
            resourceInputs["staleIfError"] = args?.staleIfError;
            resourceInputs["staleIfErrorTtl"] = args?.staleIfErrorTtl;
            resourceInputs["vcls"] = args?.vcls;
            resourceInputs["versionComment"] = args?.versionComment;
            resourceInputs["activeVersion"] = undefined /*out*/;
            resourceInputs["clonedVersion"] = undefined /*out*/;
            resourceInputs["forceRefresh"] = undefined /*out*/;
            resourceInputs["imported"] = undefined /*out*/;
            resourceInputs["stagedVersion"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceVcl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceVcl resources.
 */
export interface ServiceVclState {
    acls?: pulumi.Input<pulumi.Input<inputs.ServiceVclAcl>[]>;
    /**
     * Conditionally prevents new service versions from being activated. The apply step will create a new draft version but will not activate it if this is set to `false`. Default `true`
     */
    activate?: pulumi.Input<boolean>;
    /**
     * The currently active version of your Fastly Service
     */
    activeVersion?: pulumi.Input<number>;
    backends?: pulumi.Input<pulumi.Input<inputs.ServiceVclBackend>[]>;
    cacheSettings?: pulumi.Input<pulumi.Input<inputs.ServiceVclCacheSetting>[]>;
    /**
     * The latest cloned version by the provider
     */
    clonedVersion?: pulumi.Input<number>;
    comment?: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.ServiceVclCondition>[]>;
    /**
     * The default hostname
     */
    defaultHost?: pulumi.Input<string>;
    /**
     * The default Time-to-live (TTL) for requests
     */
    defaultTtl?: pulumi.Input<number>;
    dictionaries?: pulumi.Input<pulumi.Input<inputs.ServiceVclDictionary>[]>;
    directors?: pulumi.Input<pulumi.Input<inputs.ServiceVclDirector>[]>;
    /**
     * A set of Domain names to serve as entry points for your Service
     */
    domains?: pulumi.Input<pulumi.Input<inputs.ServiceVclDomain>[]>;
    dynamicsnippets?: pulumi.Input<pulumi.Input<inputs.ServiceVclDynamicsnippet>[]>;
    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
     */
    forceDestroy?: pulumi.Input<boolean>;
    forceRefresh?: pulumi.Input<boolean>;
    gzips?: pulumi.Input<pulumi.Input<inputs.ServiceVclGzip>[]>;
    headers?: pulumi.Input<pulumi.Input<inputs.ServiceVclHeader>[]>;
    healthchecks?: pulumi.Input<pulumi.Input<inputs.ServiceVclHealthcheck>[]>;
    /**
     * Enables support for the HTTP/3 (QUIC) protocol
     */
    http3?: pulumi.Input<boolean>;
    imageOptimizerDefaultSettings?: pulumi.Input<inputs.ServiceVclImageOptimizerDefaultSettings>;
    /**
     * Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
     */
    imported?: pulumi.Input<boolean>;
    loggingBigqueries?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingBigquery>[]>;
    loggingBlobstorages?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingBlobstorage>[]>;
    loggingCloudfiles?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingCloudfile>[]>;
    loggingDatadogs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingDatadog>[]>;
    loggingDigitaloceans?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingDigitalocean>[]>;
    loggingElasticsearches?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingElasticsearch>[]>;
    loggingFtps?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingFtp>[]>;
    loggingGcs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingGc>[]>;
    loggingGooglepubsubs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingGooglepubsub>[]>;
    loggingGrafanacloudlogs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingGrafanacloudlog>[]>;
    loggingHerokus?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingHerokus>[]>;
    loggingHoneycombs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingHoneycomb>[]>;
    loggingHttps?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingHttp>[]>;
    loggingKafkas?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingKafka>[]>;
    loggingKineses?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingKinese>[]>;
    loggingLogentries?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingLogentry>[]>;
    loggingLogglies?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingLoggly>[]>;
    loggingLogshuttles?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingLogshuttle>[]>;
    loggingNewrelicotlps?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingNewrelicotlp>[]>;
    loggingNewrelics?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingNewrelic>[]>;
    loggingOpenstacks?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingOpenstack>[]>;
    loggingPapertrails?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingPapertrail>[]>;
    loggingS3s?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingS3>[]>;
    loggingScalyrs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingScalyr>[]>;
    loggingSftps?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingSftp>[]>;
    loggingSplunks?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingSplunk>[]>;
    loggingSumologics?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingSumologic>[]>;
    loggingSyslogs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingSyslog>[]>;
    /**
     * The unique name for the Service to create
     */
    name?: pulumi.Input<string>;
    productEnablement?: pulumi.Input<inputs.ServiceVclProductEnablement>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ServiceVclRateLimiter>[]>;
    requestSettings?: pulumi.Input<pulumi.Input<inputs.ServiceVclRequestSetting>[]>;
    responseObjects?: pulumi.Input<pulumi.Input<inputs.ServiceVclResponseObject>[]>;
    reuse?: pulumi.Input<boolean>;
    snippets?: pulumi.Input<pulumi.Input<inputs.ServiceVclSnippet>[]>;
    /**
     * Conditionally enables new service versions to be staged. If `set` to true, all changes made by an `apply` step will be staged, even if `apply` did not create a new draft version. Default `false`
     */
    stage?: pulumi.Input<boolean>;
    /**
     * The currently staged version of your Fastly Service
     */
    stagedVersion?: pulumi.Input<number>;
    /**
     * Enables serving a stale object if there is an error
     */
    staleIfError?: pulumi.Input<boolean>;
    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     */
    staleIfErrorTtl?: pulumi.Input<number>;
    vcls?: pulumi.Input<pulumi.Input<inputs.ServiceVclVcl>[]>;
    /**
     * Description field for the version
     */
    versionComment?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceVcl resource.
 */
export interface ServiceVclArgs {
    acls?: pulumi.Input<pulumi.Input<inputs.ServiceVclAcl>[]>;
    /**
     * Conditionally prevents new service versions from being activated. The apply step will create a new draft version but will not activate it if this is set to `false`. Default `true`
     */
    activate?: pulumi.Input<boolean>;
    backends?: pulumi.Input<pulumi.Input<inputs.ServiceVclBackend>[]>;
    cacheSettings?: pulumi.Input<pulumi.Input<inputs.ServiceVclCacheSetting>[]>;
    comment?: pulumi.Input<string>;
    conditions?: pulumi.Input<pulumi.Input<inputs.ServiceVclCondition>[]>;
    /**
     * The default hostname
     */
    defaultHost?: pulumi.Input<string>;
    /**
     * The default Time-to-live (TTL) for requests
     */
    defaultTtl?: pulumi.Input<number>;
    dictionaries?: pulumi.Input<pulumi.Input<inputs.ServiceVclDictionary>[]>;
    directors?: pulumi.Input<pulumi.Input<inputs.ServiceVclDirector>[]>;
    /**
     * A set of Domain names to serve as entry points for your Service
     */
    domains: pulumi.Input<pulumi.Input<inputs.ServiceVclDomain>[]>;
    dynamicsnippets?: pulumi.Input<pulumi.Input<inputs.ServiceVclDynamicsnippet>[]>;
    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
     */
    forceDestroy?: pulumi.Input<boolean>;
    gzips?: pulumi.Input<pulumi.Input<inputs.ServiceVclGzip>[]>;
    headers?: pulumi.Input<pulumi.Input<inputs.ServiceVclHeader>[]>;
    healthchecks?: pulumi.Input<pulumi.Input<inputs.ServiceVclHealthcheck>[]>;
    /**
     * Enables support for the HTTP/3 (QUIC) protocol
     */
    http3?: pulumi.Input<boolean>;
    imageOptimizerDefaultSettings?: pulumi.Input<inputs.ServiceVclImageOptimizerDefaultSettings>;
    loggingBigqueries?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingBigquery>[]>;
    loggingBlobstorages?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingBlobstorage>[]>;
    loggingCloudfiles?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingCloudfile>[]>;
    loggingDatadogs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingDatadog>[]>;
    loggingDigitaloceans?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingDigitalocean>[]>;
    loggingElasticsearches?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingElasticsearch>[]>;
    loggingFtps?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingFtp>[]>;
    loggingGcs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingGc>[]>;
    loggingGooglepubsubs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingGooglepubsub>[]>;
    loggingGrafanacloudlogs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingGrafanacloudlog>[]>;
    loggingHerokus?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingHerokus>[]>;
    loggingHoneycombs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingHoneycomb>[]>;
    loggingHttps?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingHttp>[]>;
    loggingKafkas?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingKafka>[]>;
    loggingKineses?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingKinese>[]>;
    loggingLogentries?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingLogentry>[]>;
    loggingLogglies?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingLoggly>[]>;
    loggingLogshuttles?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingLogshuttle>[]>;
    loggingNewrelicotlps?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingNewrelicotlp>[]>;
    loggingNewrelics?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingNewrelic>[]>;
    loggingOpenstacks?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingOpenstack>[]>;
    loggingPapertrails?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingPapertrail>[]>;
    loggingS3s?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingS3>[]>;
    loggingScalyrs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingScalyr>[]>;
    loggingSftps?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingSftp>[]>;
    loggingSplunks?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingSplunk>[]>;
    loggingSumologics?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingSumologic>[]>;
    loggingSyslogs?: pulumi.Input<pulumi.Input<inputs.ServiceVclLoggingSyslog>[]>;
    /**
     * The unique name for the Service to create
     */
    name?: pulumi.Input<string>;
    productEnablement?: pulumi.Input<inputs.ServiceVclProductEnablement>;
    rateLimiters?: pulumi.Input<pulumi.Input<inputs.ServiceVclRateLimiter>[]>;
    requestSettings?: pulumi.Input<pulumi.Input<inputs.ServiceVclRequestSetting>[]>;
    responseObjects?: pulumi.Input<pulumi.Input<inputs.ServiceVclResponseObject>[]>;
    reuse?: pulumi.Input<boolean>;
    snippets?: pulumi.Input<pulumi.Input<inputs.ServiceVclSnippet>[]>;
    /**
     * Conditionally enables new service versions to be staged. If `set` to true, all changes made by an `apply` step will be staged, even if `apply` did not create a new draft version. Default `false`
     */
    stage?: pulumi.Input<boolean>;
    /**
     * Enables serving a stale object if there is an error
     */
    staleIfError?: pulumi.Input<boolean>;
    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     */
    staleIfErrorTtl?: pulumi.Input<number>;
    vcls?: pulumi.Input<pulumi.Input<inputs.ServiceVclVcl>[]>;
    /**
     * Description field for the version
     */
    versionComment?: pulumi.Input<string>;
}
