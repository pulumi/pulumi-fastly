// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get information on a TLS Private Key uploaded to Fastly.
 *
 * > **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
 *  of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
 *  with any of the others.
 *
 * > **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search
 *  is specific enough to return a single key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const demo = fastly.getTlsPrivateKey({
 *     name: "demo-private-key",
 * });
 * export const privateKeyNeedsReplacing = demo.then(demo => demo.replace);
 * ```
 */
export function getTlsPrivateKey(args?: GetTlsPrivateKeyArgs, opts?: pulumi.InvokeOptions): Promise<GetTlsPrivateKeyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("fastly:index/getTlsPrivateKey:getTlsPrivateKey", {
        "createdAt": args.createdAt,
        "id": args.id,
        "keyLength": args.keyLength,
        "keyType": args.keyType,
        "name": args.name,
        "publicKeySha1": args.publicKeySha1,
    }, opts);
}

/**
 * A collection of arguments for invoking getTlsPrivateKey.
 */
export interface GetTlsPrivateKeyArgs {
    /**
     * Timestamp (GMT) when the private key was created.
     */
    createdAt?: string;
    /**
     * Fastly private key ID. Conflicts with all the other filters
     */
    id?: string;
    /**
     * The key length used to generate the private key.
     */
    keyLength?: number;
    /**
     * The algorithm used to generate the private key. Must be RSA.
     */
    keyType?: string;
    /**
     * The human-readable name assigned to the private key when uploaded.
     */
    name?: string;
    /**
     * A hash of the associated public key, useful for safely identifying it.
     */
    publicKeySha1?: string;
}

/**
 * A collection of values returned by getTlsPrivateKey.
 */
export interface GetTlsPrivateKeyResult {
    /**
     * Timestamp (GMT) when the private key was created.
     */
    readonly createdAt: string;
    /**
     * Fastly private key ID. Conflicts with all the other filters
     */
    readonly id: string;
    /**
     * The key length used to generate the private key.
     */
    readonly keyLength: number;
    /**
     * The algorithm used to generate the private key. Must be RSA.
     */
    readonly keyType: string;
    /**
     * The human-readable name assigned to the private key when uploaded.
     */
    readonly name: string;
    /**
     * A hash of the associated public key, useful for safely identifying it.
     */
    readonly publicKeySha1: string;
    /**
     * Whether Fastly recommends replacing this private key.
     */
    readonly replace: boolean;
}
/**
 * Use this data source to get information on a TLS Private Key uploaded to Fastly.
 *
 * > **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
 *  of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
 *  with any of the others.
 *
 * > **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search
 *  is specific enough to return a single key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const demo = fastly.getTlsPrivateKey({
 *     name: "demo-private-key",
 * });
 * export const privateKeyNeedsReplacing = demo.then(demo => demo.replace);
 * ```
 */
export function getTlsPrivateKeyOutput(args?: GetTlsPrivateKeyOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTlsPrivateKeyResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("fastly:index/getTlsPrivateKey:getTlsPrivateKey", {
        "createdAt": args.createdAt,
        "id": args.id,
        "keyLength": args.keyLength,
        "keyType": args.keyType,
        "name": args.name,
        "publicKeySha1": args.publicKeySha1,
    }, opts);
}

/**
 * A collection of arguments for invoking getTlsPrivateKey.
 */
export interface GetTlsPrivateKeyOutputArgs {
    /**
     * Timestamp (GMT) when the private key was created.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Fastly private key ID. Conflicts with all the other filters
     */
    id?: pulumi.Input<string>;
    /**
     * The key length used to generate the private key.
     */
    keyLength?: pulumi.Input<number>;
    /**
     * The algorithm used to generate the private key. Must be RSA.
     */
    keyType?: pulumi.Input<string>;
    /**
     * The human-readable name assigned to the private key when uploaded.
     */
    name?: pulumi.Input<string>;
    /**
     * A hash of the associated public key, useful for safely identifying it.
     */
    publicKeySha1?: pulumi.Input<string>;
}
