// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Use this data source to get information of a Platform TLS certificate for use with other resources.
 *
 * > **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
 * of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
 * with any of the others.
 *
 * > **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const example = pulumi.output(fastly.getTlsPlatformCertificate({
 *     domains: ["example.com"],
 * }));
 * ```
 */
export function getTlsPlatformCertificate(args?: GetTlsPlatformCertificateArgs, opts?: pulumi.InvokeOptions): Promise<GetTlsPlatformCertificateResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("fastly:index/getTlsPlatformCertificate:getTlsPlatformCertificate", {
        "domains": args.domains,
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getTlsPlatformCertificate.
 */
export interface GetTlsPlatformCertificateArgs {
    /**
     * Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
     */
    domains?: string[];
    /**
     * Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
     */
    id?: string;
}

/**
 * A collection of values returned by getTlsPlatformCertificate.
 */
export interface GetTlsPlatformCertificateResult {
    /**
     * ID of TLS configuration used to terminate TLS traffic.
     */
    readonly configurationId: string;
    /**
     * Timestamp (GMT) when the certificate was created.
     */
    readonly createdAt: string;
    /**
     * Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
     */
    readonly domains: string[];
    /**
     * Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
     */
    readonly id: string;
    /**
     * Timestamp (GMT) when the certificate will expire.
     */
    readonly notAfter: string;
    /**
     * Timestamp (GMT) when the certificate will become valid.
     */
    readonly notBefore: string;
    /**
     * A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     */
    readonly replace: boolean;
    /**
     * Timestamp (GMT) when the certificate was last updated.
     */
    readonly updatedAt: string;
}

export function getTlsPlatformCertificateOutput(args?: GetTlsPlatformCertificateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTlsPlatformCertificateResult> {
    return pulumi.output(args).apply(a => getTlsPlatformCertificate(a, opts))
}

/**
 * A collection of arguments for invoking getTlsPlatformCertificate.
 */
export interface GetTlsPlatformCertificateOutputArgs {
    /**
     * Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
     */
    id?: pulumi.Input<string>;
}
