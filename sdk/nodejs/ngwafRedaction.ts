// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Provides a Fastly Next-Gen WAF Redaction, which can automatically redact known patterns of sensitive information.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const demoRedaction = new fastly.NgwafRedaction("demo_redaction", {
 *     field: "some field",
 *     type: "request_header",
 *     workspaceId: demo.id,
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF Redactions can be imported using their ID and the ID of the workspace they belong to.
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafRedaction:NgwafRedaction example <workspace_id>/<redaction_id>
 * ```
 */
export class NgwafRedaction extends pulumi.CustomResource {
    /**
     * Get an existing NgwafRedaction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafRedactionState, opts?: pulumi.CustomResourceOptions): NgwafRedaction {
        return new NgwafRedaction(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafRedaction:NgwafRedaction';

    /**
     * Returns true if the given object is an instance of NgwafRedaction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafRedaction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafRedaction.__pulumiType;
    }

    /**
     * The name of the field that should be redacted.
     */
    declare public readonly field: pulumi.Output<string>;
    /**
     * The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The ID of the workspace.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a NgwafRedaction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafRedactionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafRedactionArgs | NgwafRedactionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafRedactionState | undefined;
            resourceInputs["field"] = state?.field;
            resourceInputs["type"] = state?.type;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as NgwafRedactionArgs | undefined;
            if (args?.field === undefined && !opts.urn) {
                throw new Error("Missing required property 'field'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["field"] = args?.field;
            resourceInputs["type"] = args?.type;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgwafRedaction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafRedaction resources.
 */
export interface NgwafRedactionState {
    /**
     * The name of the field that should be redacted.
     */
    field?: pulumi.Input<string>;
    /**
     * The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
     */
    type?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafRedaction resource.
 */
export interface NgwafRedactionArgs {
    /**
     * The name of the field that should be redacted.
     */
    field: pulumi.Input<string>;
    /**
     * The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
     */
    type: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId: pulumi.Input<string>;
}
