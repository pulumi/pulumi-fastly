// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Provides a Fastly Next-Gen WAF Workspace Rule, scoped to a specific NGWAF workspace.\
 * These rules define conditions and actions that trigger WAF enforcement at the workspace level.
 *
 * ## Example Usage
 *
 * Basic usage:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fastly from "@pulumi/fastly";
 *
 * const example = new fastly.NgwafWorkspace("example", {
 *     name: "example",
 *     description: "Test NGWAF Workspace",
 *     mode: "block",
 *     ipAnonymization: "hashed",
 *     clientIpHeaders: [
 *         "X-Forwarded-For",
 *         "X-Real-IP",
 *     ],
 *     defaultBlockingResponseCode: 429,
 *     attackSignalThresholds: {},
 * });
 * const exampleNgwafWorkspaceRule = new fastly.NgwafWorkspaceRule("example", {
 *     workspaceId: example.id,
 *     type: "request",
 *     description: "example",
 *     enabled: true,
 *     requestLogging: "sampled",
 *     groupOperator: "all",
 *     actions: [{
 *         type: "block",
 *     }],
 *     conditions: [
 *         {
 *             field: "ip",
 *             operator: "equals",
 *             value: "127.0.0.1",
 *         },
 *         {
 *             field: "path",
 *             operator: "equals",
 *             value: "/login",
 *         },
 *         {
 *             field: "agent_name",
 *             operator: "equals",
 *             value: "host-001",
 *         },
 *     ],
 *     groupConditions: [
 *         {
 *             groupOperator: "all",
 *             conditions: [
 *                 {
 *                     field: "country",
 *                     operator: "equals",
 *                     value: "AD",
 *                 },
 *                 {
 *                     field: "method",
 *                     operator: "equals",
 *                     value: "POST",
 *                 },
 *             ],
 *         },
 *         {
 *             groupOperator: "any",
 *             conditions: [
 *                 {
 *                     field: "protocol_version",
 *                     operator: "equals",
 *                     value: "HTTP/1.0",
 *                 },
 *                 {
 *                     field: "method",
 *                     operator: "equals",
 *                     value: "HEAD",
 *                 },
 *                 {
 *                     field: "domain",
 *                     operator: "equals",
 *                     value: "example.com",
 *                 },
 *             ],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Fastly Next-Gen WAF workspace rules can be imported using the format `<workspaceID>/<ruleID>`, e.g.:
 *
 * ```sh
 * $ pulumi import fastly:index/ngwafWorkspaceRule:NgwafWorkspaceRule demo <workspaceID>/<ruleID>
 * ```
 */
export class NgwafWorkspaceRule extends pulumi.CustomResource {
    /**
     * Get an existing NgwafWorkspaceRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NgwafWorkspaceRuleState, opts?: pulumi.CustomResourceOptions): NgwafWorkspaceRule {
        return new NgwafWorkspaceRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'fastly:index/ngwafWorkspaceRule:NgwafWorkspaceRule';

    /**
     * Returns true if the given object is an instance of NgwafWorkspaceRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NgwafWorkspaceRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NgwafWorkspaceRule.__pulumiType;
    }

    /**
     * List of actions to perform when the rule matches.
     */
    declare public readonly actions: pulumi.Output<outputs.NgwafWorkspaceRuleAction[]>;
    /**
     * Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
     */
    declare public readonly conditions: pulumi.Output<outputs.NgwafWorkspaceRuleCondition[] | undefined>;
    /**
     * The description of the rule.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Whether the rule is currently enabled.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
     */
    declare public readonly groupConditions: pulumi.Output<outputs.NgwafWorkspaceRuleGroupCondition[] | undefined>;
    /**
     * Logical operator to apply to group conditions. Accepted values are `any` and `all`.
     */
    declare public readonly groupOperator: pulumi.Output<string | undefined>;
    /**
     * Block specifically for rate*limit rules.
     */
    declare public readonly rateLimit: pulumi.Output<outputs.NgwafWorkspaceRuleRateLimit | undefined>;
    /**
     * Logging behavior for matching requests. Accepted values are `sampled` and `none`.
     */
    declare public readonly requestLogging: pulumi.Output<string | undefined>;
    /**
     * The type of the rule. Accepted values are `request`, `signal`, `rateLimit`, and `templatedSignal`.
     */
    declare public readonly type: pulumi.Output<string>;
    /**
     * The ID of the workspace.
     */
    declare public readonly workspaceId: pulumi.Output<string>;

    /**
     * Create a NgwafWorkspaceRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NgwafWorkspaceRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NgwafWorkspaceRuleArgs | NgwafWorkspaceRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NgwafWorkspaceRuleState | undefined;
            resourceInputs["actions"] = state?.actions;
            resourceInputs["conditions"] = state?.conditions;
            resourceInputs["description"] = state?.description;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["groupConditions"] = state?.groupConditions;
            resourceInputs["groupOperator"] = state?.groupOperator;
            resourceInputs["rateLimit"] = state?.rateLimit;
            resourceInputs["requestLogging"] = state?.requestLogging;
            resourceInputs["type"] = state?.type;
            resourceInputs["workspaceId"] = state?.workspaceId;
        } else {
            const args = argsOrState as NgwafWorkspaceRuleArgs | undefined;
            if (args?.actions === undefined && !opts.urn) {
                throw new Error("Missing required property 'actions'");
            }
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.enabled === undefined && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if (args?.workspaceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["actions"] = args?.actions;
            resourceInputs["conditions"] = args?.conditions;
            resourceInputs["description"] = args?.description;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["groupConditions"] = args?.groupConditions;
            resourceInputs["groupOperator"] = args?.groupOperator;
            resourceInputs["rateLimit"] = args?.rateLimit;
            resourceInputs["requestLogging"] = args?.requestLogging;
            resourceInputs["type"] = args?.type;
            resourceInputs["workspaceId"] = args?.workspaceId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NgwafWorkspaceRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NgwafWorkspaceRule resources.
 */
export interface NgwafWorkspaceRuleState {
    /**
     * List of actions to perform when the rule matches.
     */
    actions?: pulumi.Input<pulumi.Input<inputs.NgwafWorkspaceRuleAction>[]>;
    /**
     * Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.NgwafWorkspaceRuleCondition>[]>;
    /**
     * The description of the rule.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the rule is currently enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
     */
    groupConditions?: pulumi.Input<pulumi.Input<inputs.NgwafWorkspaceRuleGroupCondition>[]>;
    /**
     * Logical operator to apply to group conditions. Accepted values are `any` and `all`.
     */
    groupOperator?: pulumi.Input<string>;
    /**
     * Block specifically for rate*limit rules.
     */
    rateLimit?: pulumi.Input<inputs.NgwafWorkspaceRuleRateLimit>;
    /**
     * Logging behavior for matching requests. Accepted values are `sampled` and `none`.
     */
    requestLogging?: pulumi.Input<string>;
    /**
     * The type of the rule. Accepted values are `request`, `signal`, `rateLimit`, and `templatedSignal`.
     */
    type?: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NgwafWorkspaceRule resource.
 */
export interface NgwafWorkspaceRuleArgs {
    /**
     * List of actions to perform when the rule matches.
     */
    actions: pulumi.Input<pulumi.Input<inputs.NgwafWorkspaceRuleAction>[]>;
    /**
     * Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.NgwafWorkspaceRuleCondition>[]>;
    /**
     * The description of the rule.
     */
    description: pulumi.Input<string>;
    /**
     * Whether the rule is currently enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
     */
    groupConditions?: pulumi.Input<pulumi.Input<inputs.NgwafWorkspaceRuleGroupCondition>[]>;
    /**
     * Logical operator to apply to group conditions. Accepted values are `any` and `all`.
     */
    groupOperator?: pulumi.Input<string>;
    /**
     * Block specifically for rate*limit rules.
     */
    rateLimit?: pulumi.Input<inputs.NgwafWorkspaceRuleRateLimit>;
    /**
     * Logging behavior for matching requests. Accepted values are `sampled` and `none`.
     */
    requestLogging?: pulumi.Input<string>;
    /**
     * The type of the rule. Accepted values are `request`, `signal`, `rateLimit`, and `templatedSignal`.
     */
    type: pulumi.Input<string>;
    /**
     * The ID of the workspace.
     */
    workspaceId: pulumi.Input<string>;
}
