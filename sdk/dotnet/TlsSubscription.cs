// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Enables TLS on a domain using a certificate managed by Fastly.
    /// 
    /// DNS records need to be modified on the domain being secured, in order to respond to the ACME domain ownership challenge.
    /// 
    /// There are two options for doing this: the `managed_dns_challenges`, which is the default method; and the `managed_http_challenges`, which points production traffic to Fastly.
    /// 
    /// &gt; See the [Fastly documentation](https://docs.fastly.com/en/guides/serving-https-traffic-using-fastly-managed-certificates#verifying-domain-ownership) for more information on verifying domain ownership.
    /// 
    /// The examples below demonstrate usage with AWS Route53 to configure DNS, and the `fastly.TlsSubscriptionValidation` resource to wait for validation to complete.
    /// 
    /// ## Import
    /// 
    /// A subscription can be imported using its Fastly subscription ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/tlsSubscription:TlsSubscription demo xxxxxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/tlsSubscription:TlsSubscription")]
    public partial class TlsSubscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt`, `globalsign` or `certainly`.
        /// </summary>
        [Output("certificateAuthority")]
        public Output<string> CertificateAuthority { get; private set; } = null!;

        /// <summary>
        /// The certificate ID associated with the subscription.
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
        /// </summary>
        [Output("commonName")]
        public Output<string> CommonName { get; private set; } = null!;

        /// <summary>
        /// The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
        /// </summary>
        [Output("configurationId")]
        public Output<string> ConfigurationId { get; private set; } = null!;

        /// <summary>
        /// Timestamp (GMT) when the subscription was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// List of domains on which to enable TLS.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// Force delete the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly. Defaults to false.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// Force update the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly.
        /// </summary>
        [Output("forceUpdate")]
        public Output<bool?> ForceUpdate { get; private set; } = null!;

        /// <summary>
        /// The details required to configure DNS to respond to ACME DNS challenge in order to verify domain ownership.
        /// </summary>
        [Output("managedDnsChallenge")]
        public Output<ImmutableDictionary<string, string>> ManagedDnsChallenge { get; private set; } = null!;

        /// <summary>
        /// A list of options for configuring DNS to respond to ACME DNS challenge in order to verify domain ownership.
        /// </summary>
        [Output("managedDnsChallenges")]
        public Output<ImmutableArray<Outputs.TlsSubscriptionManagedDnsChallenge>> ManagedDnsChallenges { get; private set; } = null!;

        /// <summary>
        /// A list of options for configuring DNS to respond to ACME HTTP challenge in order to verify domain ownership. Best accessed through a `for` expression to filter the relevant record.
        /// </summary>
        [Output("managedHttpChallenges")]
        public Output<ImmutableArray<Outputs.TlsSubscriptionManagedHttpChallenge>> ManagedHttpChallenges { get; private set; } = null!;

        /// <summary>
        /// The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Timestamp (GMT) when the subscription was updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a TlsSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsSubscription(string name, TlsSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/tlsSubscription:TlsSubscription", name, args ?? new TlsSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsSubscription(string name, Input<string> id, TlsSubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/tlsSubscription:TlsSubscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsSubscription Get(string name, Input<string> id, TlsSubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsSubscription(name, id, state, options);
        }
    }

    public sealed class TlsSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt`, `globalsign` or `certainly`.
        /// </summary>
        [Input("certificateAuthority", required: true)]
        public Input<string> CertificateAuthority { get; set; } = null!;

        /// <summary>
        /// The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        [Input("domains", required: true)]
        private InputList<string>? _domains;

        /// <summary>
        /// List of domains on which to enable TLS.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Force delete the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly. Defaults to false.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// Force update the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly.
        /// </summary>
        [Input("forceUpdate")]
        public Input<bool>? ForceUpdate { get; set; }

        public TlsSubscriptionArgs()
        {
        }
        public static new TlsSubscriptionArgs Empty => new TlsSubscriptionArgs();
    }

    public sealed class TlsSubscriptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt`, `globalsign` or `certainly`.
        /// </summary>
        [Input("certificateAuthority")]
        public Input<string>? CertificateAuthority { get; set; }

        /// <summary>
        /// The certificate ID associated with the subscription.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
        /// </summary>
        [Input("commonName")]
        public Input<string>? CommonName { get; set; }

        /// <summary>
        /// The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        /// <summary>
        /// Timestamp (GMT) when the subscription was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// List of domains on which to enable TLS.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Force delete the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly. Defaults to false.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// Force update the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly.
        /// </summary>
        [Input("forceUpdate")]
        public Input<bool>? ForceUpdate { get; set; }

        [Input("managedDnsChallenge")]
        private InputMap<string>? _managedDnsChallenge;

        /// <summary>
        /// The details required to configure DNS to respond to ACME DNS challenge in order to verify domain ownership.
        /// </summary>
        [Obsolete(@"Use 'managed_dns_challenges' attribute instead")]
        public InputMap<string> ManagedDnsChallenge
        {
            get => _managedDnsChallenge ?? (_managedDnsChallenge = new InputMap<string>());
            set => _managedDnsChallenge = value;
        }

        [Input("managedDnsChallenges")]
        private InputList<Inputs.TlsSubscriptionManagedDnsChallengeGetArgs>? _managedDnsChallenges;

        /// <summary>
        /// A list of options for configuring DNS to respond to ACME DNS challenge in order to verify domain ownership.
        /// </summary>
        public InputList<Inputs.TlsSubscriptionManagedDnsChallengeGetArgs> ManagedDnsChallenges
        {
            get => _managedDnsChallenges ?? (_managedDnsChallenges = new InputList<Inputs.TlsSubscriptionManagedDnsChallengeGetArgs>());
            set => _managedDnsChallenges = value;
        }

        [Input("managedHttpChallenges")]
        private InputList<Inputs.TlsSubscriptionManagedHttpChallengeGetArgs>? _managedHttpChallenges;

        /// <summary>
        /// A list of options for configuring DNS to respond to ACME HTTP challenge in order to verify domain ownership. Best accessed through a `for` expression to filter the relevant record.
        /// </summary>
        public InputList<Inputs.TlsSubscriptionManagedHttpChallengeGetArgs> ManagedHttpChallenges
        {
            get => _managedHttpChallenges ?? (_managedHttpChallenges = new InputList<Inputs.TlsSubscriptionManagedHttpChallengeGetArgs>());
            set => _managedHttpChallenges = value;
        }

        /// <summary>
        /// The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Timestamp (GMT) when the subscription was updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public TlsSubscriptionState()
        {
        }
        public static new TlsSubscriptionState Empty => new TlsSubscriptionState();
    }
}
