// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// layout: "fastly"
    /// page_title: "Fastly: tls_private_key"
    /// sidebar_current: "docs-fastly-resource-tls_private_key"
    /// description: |-
    /// Uploads a Custom TLS Private Key
    /// &lt;!-- yaml: line 6: could not find expected ':' --&gt;
    /// 
    /// # fastly.TlsPrivateKey
    /// 
    /// Uploads a Custom TLS Private Key to Fastly. This can be combined with a `fastly.TlsCertificate` resource to provide a TLS Certificate able to be applied to a Fastly Service.
    /// 
    /// The Private Key resource requires a key in PEM format, and a name to identify it.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// using Tls = Pulumi.Tls;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demo = new Tls.Index.PrivateKey("demo", new()
    ///     {
    ///         Algorithm = "RSA",
    ///     });
    /// 
    ///     var demoTlsPrivateKey = new Fastly.TlsPrivateKey("demo", new()
    ///     {
    ///         KeyPem = demo.PrivateKeyPem,
    ///         Name = "tf-demo",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// A Private Key can be imported using its ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/tlsPrivateKey:TlsPrivateKey demo xxxxxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/tlsPrivateKey:TlsPrivateKey")]
    public partial class TlsPrivateKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Time-stamp (GMT) when the private key was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The key length used to generate the private key.
        /// </summary>
        [Output("keyLength")]
        public Output<int> KeyLength { get; private set; } = null!;

        /// <summary>
        /// Private key in PEM format.
        /// </summary>
        [Output("keyPem")]
        public Output<string> KeyPem { get; private set; } = null!;

        /// <summary>
        /// The algorithm used to generate the private key. Must be RSA.
        /// </summary>
        [Output("keyType")]
        public Output<string> KeyType { get; private set; } = null!;

        /// <summary>
        /// Customisable name of the private key.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Useful for safely identifying the key.
        /// </summary>
        [Output("publicKeySha1")]
        public Output<string> PublicKeySha1 { get; private set; } = null!;

        /// <summary>
        /// Whether Fastly recommends replacing this private key.
        /// </summary>
        [Output("replace")]
        public Output<bool> Replace { get; private set; } = null!;


        /// <summary>
        /// Create a TlsPrivateKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsPrivateKey(string name, TlsPrivateKeyArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/tlsPrivateKey:TlsPrivateKey", name, args ?? new TlsPrivateKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsPrivateKey(string name, Input<string> id, TlsPrivateKeyState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/tlsPrivateKey:TlsPrivateKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "keyPem",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsPrivateKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsPrivateKey Get(string name, Input<string> id, TlsPrivateKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsPrivateKey(name, id, state, options);
        }
    }

    public sealed class TlsPrivateKeyArgs : global::Pulumi.ResourceArgs
    {
        [Input("keyPem", required: true)]
        private Input<string>? _keyPem;

        /// <summary>
        /// Private key in PEM format.
        /// </summary>
        public Input<string>? KeyPem
        {
            get => _keyPem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyPem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Customisable name of the private key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TlsPrivateKeyArgs()
        {
        }
        public static new TlsPrivateKeyArgs Empty => new TlsPrivateKeyArgs();
    }

    public sealed class TlsPrivateKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Time-stamp (GMT) when the private key was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The key length used to generate the private key.
        /// </summary>
        [Input("keyLength")]
        public Input<int>? KeyLength { get; set; }

        [Input("keyPem")]
        private Input<string>? _keyPem;

        /// <summary>
        /// Private key in PEM format.
        /// </summary>
        public Input<string>? KeyPem
        {
            get => _keyPem;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyPem = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The algorithm used to generate the private key. Must be RSA.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// Customisable name of the private key.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Useful for safely identifying the key.
        /// </summary>
        [Input("publicKeySha1")]
        public Input<string>? PublicKeySha1 { get; set; }

        /// <summary>
        /// Whether Fastly recommends replacing this private key.
        /// </summary>
        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        public TlsPrivateKeyState()
        {
        }
        public static new TlsPrivateKeyState Empty => new TlsPrivateKeyState();
    }
}
