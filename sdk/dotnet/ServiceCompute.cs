// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// ## Import
    /// 
    /// Fastly Services can be imported using their service ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// 
    ///  By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx@2
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/serviceCompute:ServiceCompute")]
    public partial class ServiceCompute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Output("activate")]
        public Output<bool?> Activate { get; private set; } = null!;

        /// <summary>
        /// The currently active version of your Fastly Service
        /// </summary>
        [Output("activeVersion")]
        public Output<int> ActiveVersion { get; private set; } = null!;

        [Output("backends")]
        public Output<ImmutableArray<Outputs.ServiceComputeBackend>> Backends { get; private set; } = null!;

        /// <summary>
        /// The latest cloned version by the provider
        /// </summary>
        [Output("clonedVersion")]
        public Output<int> ClonedVersion { get; private set; } = null!;

        /// <summary>
        /// Description field for the service. Default `Managed by Terraform`
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        [Output("dictionaries")]
        public Output<ImmutableArray<Outputs.ServiceComputeDictionary>> Dictionaries { get; private set; } = null!;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<Outputs.ServiceComputeDomain>> Domains { get; private set; } = null!;

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
        /// local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
        /// UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
        /// </summary>
        [Output("forceRefresh")]
        public Output<bool> ForceRefresh { get; private set; } = null!;

        /// <summary>
        /// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
        /// </summary>
        [Output("imported")]
        public Output<bool> Imported { get; private set; } = null!;

        [Output("loggingBigqueries")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingBigquery>> LoggingBigqueries { get; private set; } = null!;

        [Output("loggingBlobstorages")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingBlobstorage>> LoggingBlobstorages { get; private set; } = null!;

        [Output("loggingCloudfiles")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingCloudfile>> LoggingCloudfiles { get; private set; } = null!;

        [Output("loggingDatadogs")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingDatadog>> LoggingDatadogs { get; private set; } = null!;

        [Output("loggingDigitaloceans")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingDigitalocean>> LoggingDigitaloceans { get; private set; } = null!;

        [Output("loggingElasticsearches")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingElasticsearch>> LoggingElasticsearches { get; private set; } = null!;

        [Output("loggingFtps")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingFtp>> LoggingFtps { get; private set; } = null!;

        [Output("loggingGcs")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingGc>> LoggingGcs { get; private set; } = null!;

        [Output("loggingGooglepubsubs")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingGooglepubsub>> LoggingGooglepubsubs { get; private set; } = null!;

        [Output("loggingHeroku")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingHeroku>> LoggingHeroku { get; private set; } = null!;

        [Output("loggingHoneycombs")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingHoneycomb>> LoggingHoneycombs { get; private set; } = null!;

        [Output("loggingHttps")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingHttp>> LoggingHttps { get; private set; } = null!;

        [Output("loggingKafkas")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingKafka>> LoggingKafkas { get; private set; } = null!;

        [Output("loggingKineses")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingKinese>> LoggingKineses { get; private set; } = null!;

        [Output("loggingLogentries")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingLogentry>> LoggingLogentries { get; private set; } = null!;

        [Output("loggingLogglies")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingLoggly>> LoggingLogglies { get; private set; } = null!;

        [Output("loggingLogshuttles")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingLogshuttle>> LoggingLogshuttles { get; private set; } = null!;

        [Output("loggingNewrelics")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingNewrelic>> LoggingNewrelics { get; private set; } = null!;

        [Output("loggingOpenstacks")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingOpenstack>> LoggingOpenstacks { get; private set; } = null!;

        [Output("loggingPapertrails")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingPapertrail>> LoggingPapertrails { get; private set; } = null!;

        [Output("loggingS3s")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingS3>> LoggingS3s { get; private set; } = null!;

        [Output("loggingScalyrs")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingScalyr>> LoggingScalyrs { get; private set; } = null!;

        [Output("loggingSftps")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingSftp>> LoggingSftps { get; private set; } = null!;

        [Output("loggingSplunks")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingSplunk>> LoggingSplunks { get; private set; } = null!;

        [Output("loggingSumologics")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingSumologic>> LoggingSumologics { get; private set; } = null!;

        [Output("loggingSyslogs")]
        public Output<ImmutableArray<Outputs.ServiceComputeLoggingSyslog>> LoggingSyslogs { get; private set; } = null!;

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        /// </summary>
        [Output("package")]
        public Output<Outputs.ServiceComputePackage> Package { get; private set; } = null!;

        [Output("productEnablement")]
        public Output<Outputs.ServiceComputeProductEnablement?> ProductEnablement { get; private set; } = null!;

        /// <summary>
        /// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
        /// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
        /// an active service will cause an error. Default `false`
        /// </summary>
        [Output("reuse")]
        public Output<bool?> Reuse { get; private set; } = null!;

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Output("versionComment")]
        public Output<string?> VersionComment { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceCompute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceCompute(string name, ServiceComputeArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/serviceCompute:ServiceCompute", name, args ?? new ServiceComputeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceCompute(string name, Input<string> id, ServiceComputeState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/serviceCompute:ServiceCompute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceCompute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceCompute Get(string name, Input<string> id, ServiceComputeState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceCompute(name, id, state, options);
        }
    }

    public sealed class ServiceComputeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        [Input("backends")]
        private InputList<Inputs.ServiceComputeBackendArgs>? _backends;
        public InputList<Inputs.ServiceComputeBackendArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.ServiceComputeBackendArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// Description field for the service. Default `Managed by Terraform`
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.ServiceComputeDictionaryArgs>? _dictionaries;
        public InputList<Inputs.ServiceComputeDictionaryArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.ServiceComputeDictionaryArgs>());
            set => _dictionaries = value;
        }

        [Input("domains", required: true)]
        private InputList<Inputs.ServiceComputeDomainArgs>? _domains;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        public InputList<Inputs.ServiceComputeDomainArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.ServiceComputeDomainArgs>());
            set => _domains = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("loggingBigqueries")]
        private InputList<Inputs.ServiceComputeLoggingBigqueryArgs>? _loggingBigqueries;
        public InputList<Inputs.ServiceComputeLoggingBigqueryArgs> LoggingBigqueries
        {
            get => _loggingBigqueries ?? (_loggingBigqueries = new InputList<Inputs.ServiceComputeLoggingBigqueryArgs>());
            set => _loggingBigqueries = value;
        }

        [Input("loggingBlobstorages")]
        private InputList<Inputs.ServiceComputeLoggingBlobstorageArgs>? _loggingBlobstorages;
        public InputList<Inputs.ServiceComputeLoggingBlobstorageArgs> LoggingBlobstorages
        {
            get => _loggingBlobstorages ?? (_loggingBlobstorages = new InputList<Inputs.ServiceComputeLoggingBlobstorageArgs>());
            set => _loggingBlobstorages = value;
        }

        [Input("loggingCloudfiles")]
        private InputList<Inputs.ServiceComputeLoggingCloudfileArgs>? _loggingCloudfiles;
        public InputList<Inputs.ServiceComputeLoggingCloudfileArgs> LoggingCloudfiles
        {
            get => _loggingCloudfiles ?? (_loggingCloudfiles = new InputList<Inputs.ServiceComputeLoggingCloudfileArgs>());
            set => _loggingCloudfiles = value;
        }

        [Input("loggingDatadogs")]
        private InputList<Inputs.ServiceComputeLoggingDatadogArgs>? _loggingDatadogs;
        public InputList<Inputs.ServiceComputeLoggingDatadogArgs> LoggingDatadogs
        {
            get => _loggingDatadogs ?? (_loggingDatadogs = new InputList<Inputs.ServiceComputeLoggingDatadogArgs>());
            set => _loggingDatadogs = value;
        }

        [Input("loggingDigitaloceans")]
        private InputList<Inputs.ServiceComputeLoggingDigitaloceanArgs>? _loggingDigitaloceans;
        public InputList<Inputs.ServiceComputeLoggingDigitaloceanArgs> LoggingDigitaloceans
        {
            get => _loggingDigitaloceans ?? (_loggingDigitaloceans = new InputList<Inputs.ServiceComputeLoggingDigitaloceanArgs>());
            set => _loggingDigitaloceans = value;
        }

        [Input("loggingElasticsearches")]
        private InputList<Inputs.ServiceComputeLoggingElasticsearchArgs>? _loggingElasticsearches;
        public InputList<Inputs.ServiceComputeLoggingElasticsearchArgs> LoggingElasticsearches
        {
            get => _loggingElasticsearches ?? (_loggingElasticsearches = new InputList<Inputs.ServiceComputeLoggingElasticsearchArgs>());
            set => _loggingElasticsearches = value;
        }

        [Input("loggingFtps")]
        private InputList<Inputs.ServiceComputeLoggingFtpArgs>? _loggingFtps;
        public InputList<Inputs.ServiceComputeLoggingFtpArgs> LoggingFtps
        {
            get => _loggingFtps ?? (_loggingFtps = new InputList<Inputs.ServiceComputeLoggingFtpArgs>());
            set => _loggingFtps = value;
        }

        [Input("loggingGcs")]
        private InputList<Inputs.ServiceComputeLoggingGcArgs>? _loggingGcs;
        public InputList<Inputs.ServiceComputeLoggingGcArgs> LoggingGcs
        {
            get => _loggingGcs ?? (_loggingGcs = new InputList<Inputs.ServiceComputeLoggingGcArgs>());
            set => _loggingGcs = value;
        }

        [Input("loggingGooglepubsubs")]
        private InputList<Inputs.ServiceComputeLoggingGooglepubsubArgs>? _loggingGooglepubsubs;
        public InputList<Inputs.ServiceComputeLoggingGooglepubsubArgs> LoggingGooglepubsubs
        {
            get => _loggingGooglepubsubs ?? (_loggingGooglepubsubs = new InputList<Inputs.ServiceComputeLoggingGooglepubsubArgs>());
            set => _loggingGooglepubsubs = value;
        }

        [Input("loggingHeroku")]
        private InputList<Inputs.ServiceComputeLoggingHerokuArgs>? _loggingHeroku;
        public InputList<Inputs.ServiceComputeLoggingHerokuArgs> LoggingHeroku
        {
            get => _loggingHeroku ?? (_loggingHeroku = new InputList<Inputs.ServiceComputeLoggingHerokuArgs>());
            set => _loggingHeroku = value;
        }

        [Input("loggingHoneycombs")]
        private InputList<Inputs.ServiceComputeLoggingHoneycombArgs>? _loggingHoneycombs;
        public InputList<Inputs.ServiceComputeLoggingHoneycombArgs> LoggingHoneycombs
        {
            get => _loggingHoneycombs ?? (_loggingHoneycombs = new InputList<Inputs.ServiceComputeLoggingHoneycombArgs>());
            set => _loggingHoneycombs = value;
        }

        [Input("loggingHttps")]
        private InputList<Inputs.ServiceComputeLoggingHttpArgs>? _loggingHttps;
        public InputList<Inputs.ServiceComputeLoggingHttpArgs> LoggingHttps
        {
            get => _loggingHttps ?? (_loggingHttps = new InputList<Inputs.ServiceComputeLoggingHttpArgs>());
            set => _loggingHttps = value;
        }

        [Input("loggingKafkas")]
        private InputList<Inputs.ServiceComputeLoggingKafkaArgs>? _loggingKafkas;
        public InputList<Inputs.ServiceComputeLoggingKafkaArgs> LoggingKafkas
        {
            get => _loggingKafkas ?? (_loggingKafkas = new InputList<Inputs.ServiceComputeLoggingKafkaArgs>());
            set => _loggingKafkas = value;
        }

        [Input("loggingKineses")]
        private InputList<Inputs.ServiceComputeLoggingKineseArgs>? _loggingKineses;
        public InputList<Inputs.ServiceComputeLoggingKineseArgs> LoggingKineses
        {
            get => _loggingKineses ?? (_loggingKineses = new InputList<Inputs.ServiceComputeLoggingKineseArgs>());
            set => _loggingKineses = value;
        }

        [Input("loggingLogentries")]
        private InputList<Inputs.ServiceComputeLoggingLogentryArgs>? _loggingLogentries;
        public InputList<Inputs.ServiceComputeLoggingLogentryArgs> LoggingLogentries
        {
            get => _loggingLogentries ?? (_loggingLogentries = new InputList<Inputs.ServiceComputeLoggingLogentryArgs>());
            set => _loggingLogentries = value;
        }

        [Input("loggingLogglies")]
        private InputList<Inputs.ServiceComputeLoggingLogglyArgs>? _loggingLogglies;
        public InputList<Inputs.ServiceComputeLoggingLogglyArgs> LoggingLogglies
        {
            get => _loggingLogglies ?? (_loggingLogglies = new InputList<Inputs.ServiceComputeLoggingLogglyArgs>());
            set => _loggingLogglies = value;
        }

        [Input("loggingLogshuttles")]
        private InputList<Inputs.ServiceComputeLoggingLogshuttleArgs>? _loggingLogshuttles;
        public InputList<Inputs.ServiceComputeLoggingLogshuttleArgs> LoggingLogshuttles
        {
            get => _loggingLogshuttles ?? (_loggingLogshuttles = new InputList<Inputs.ServiceComputeLoggingLogshuttleArgs>());
            set => _loggingLogshuttles = value;
        }

        [Input("loggingNewrelics")]
        private InputList<Inputs.ServiceComputeLoggingNewrelicArgs>? _loggingNewrelics;
        public InputList<Inputs.ServiceComputeLoggingNewrelicArgs> LoggingNewrelics
        {
            get => _loggingNewrelics ?? (_loggingNewrelics = new InputList<Inputs.ServiceComputeLoggingNewrelicArgs>());
            set => _loggingNewrelics = value;
        }

        [Input("loggingOpenstacks")]
        private InputList<Inputs.ServiceComputeLoggingOpenstackArgs>? _loggingOpenstacks;
        public InputList<Inputs.ServiceComputeLoggingOpenstackArgs> LoggingOpenstacks
        {
            get => _loggingOpenstacks ?? (_loggingOpenstacks = new InputList<Inputs.ServiceComputeLoggingOpenstackArgs>());
            set => _loggingOpenstacks = value;
        }

        [Input("loggingPapertrails")]
        private InputList<Inputs.ServiceComputeLoggingPapertrailArgs>? _loggingPapertrails;
        public InputList<Inputs.ServiceComputeLoggingPapertrailArgs> LoggingPapertrails
        {
            get => _loggingPapertrails ?? (_loggingPapertrails = new InputList<Inputs.ServiceComputeLoggingPapertrailArgs>());
            set => _loggingPapertrails = value;
        }

        [Input("loggingS3s")]
        private InputList<Inputs.ServiceComputeLoggingS3Args>? _loggingS3s;
        public InputList<Inputs.ServiceComputeLoggingS3Args> LoggingS3s
        {
            get => _loggingS3s ?? (_loggingS3s = new InputList<Inputs.ServiceComputeLoggingS3Args>());
            set => _loggingS3s = value;
        }

        [Input("loggingScalyrs")]
        private InputList<Inputs.ServiceComputeLoggingScalyrArgs>? _loggingScalyrs;
        public InputList<Inputs.ServiceComputeLoggingScalyrArgs> LoggingScalyrs
        {
            get => _loggingScalyrs ?? (_loggingScalyrs = new InputList<Inputs.ServiceComputeLoggingScalyrArgs>());
            set => _loggingScalyrs = value;
        }

        [Input("loggingSftps")]
        private InputList<Inputs.ServiceComputeLoggingSftpArgs>? _loggingSftps;
        public InputList<Inputs.ServiceComputeLoggingSftpArgs> LoggingSftps
        {
            get => _loggingSftps ?? (_loggingSftps = new InputList<Inputs.ServiceComputeLoggingSftpArgs>());
            set => _loggingSftps = value;
        }

        [Input("loggingSplunks")]
        private InputList<Inputs.ServiceComputeLoggingSplunkArgs>? _loggingSplunks;
        public InputList<Inputs.ServiceComputeLoggingSplunkArgs> LoggingSplunks
        {
            get => _loggingSplunks ?? (_loggingSplunks = new InputList<Inputs.ServiceComputeLoggingSplunkArgs>());
            set => _loggingSplunks = value;
        }

        [Input("loggingSumologics")]
        private InputList<Inputs.ServiceComputeLoggingSumologicArgs>? _loggingSumologics;
        public InputList<Inputs.ServiceComputeLoggingSumologicArgs> LoggingSumologics
        {
            get => _loggingSumologics ?? (_loggingSumologics = new InputList<Inputs.ServiceComputeLoggingSumologicArgs>());
            set => _loggingSumologics = value;
        }

        [Input("loggingSyslogs")]
        private InputList<Inputs.ServiceComputeLoggingSyslogArgs>? _loggingSyslogs;
        public InputList<Inputs.ServiceComputeLoggingSyslogArgs> LoggingSyslogs
        {
            get => _loggingSyslogs ?? (_loggingSyslogs = new InputList<Inputs.ServiceComputeLoggingSyslogArgs>());
            set => _loggingSyslogs = value;
        }

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        /// </summary>
        [Input("package", required: true)]
        public Input<Inputs.ServiceComputePackageArgs> Package { get; set; } = null!;

        [Input("productEnablement")]
        public Input<Inputs.ServiceComputeProductEnablementArgs>? ProductEnablement { get; set; }

        /// <summary>
        /// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
        /// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
        /// an active service will cause an error. Default `false`
        /// </summary>
        [Input("reuse")]
        public Input<bool>? Reuse { get; set; }

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        public ServiceComputeArgs()
        {
        }
        public static new ServiceComputeArgs Empty => new ServiceComputeArgs();
    }

    public sealed class ServiceComputeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        /// <summary>
        /// The currently active version of your Fastly Service
        /// </summary>
        [Input("activeVersion")]
        public Input<int>? ActiveVersion { get; set; }

        [Input("backends")]
        private InputList<Inputs.ServiceComputeBackendGetArgs>? _backends;
        public InputList<Inputs.ServiceComputeBackendGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.ServiceComputeBackendGetArgs>());
            set => _backends = value;
        }

        /// <summary>
        /// The latest cloned version by the provider
        /// </summary>
        [Input("clonedVersion")]
        public Input<int>? ClonedVersion { get; set; }

        /// <summary>
        /// Description field for the service. Default `Managed by Terraform`
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.ServiceComputeDictionaryGetArgs>? _dictionaries;
        public InputList<Inputs.ServiceComputeDictionaryGetArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.ServiceComputeDictionaryGetArgs>());
            set => _dictionaries = value;
        }

        [Input("domains")]
        private InputList<Inputs.ServiceComputeDomainGetArgs>? _domains;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        public InputList<Inputs.ServiceComputeDomainGetArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.ServiceComputeDomainGetArgs>());
            set => _domains = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
        /// local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
        /// UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
        /// </summary>
        [Input("forceRefresh")]
        public Input<bool>? ForceRefresh { get; set; }

        /// <summary>
        /// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
        /// </summary>
        [Input("imported")]
        public Input<bool>? Imported { get; set; }

        [Input("loggingBigqueries")]
        private InputList<Inputs.ServiceComputeLoggingBigqueryGetArgs>? _loggingBigqueries;
        public InputList<Inputs.ServiceComputeLoggingBigqueryGetArgs> LoggingBigqueries
        {
            get => _loggingBigqueries ?? (_loggingBigqueries = new InputList<Inputs.ServiceComputeLoggingBigqueryGetArgs>());
            set => _loggingBigqueries = value;
        }

        [Input("loggingBlobstorages")]
        private InputList<Inputs.ServiceComputeLoggingBlobstorageGetArgs>? _loggingBlobstorages;
        public InputList<Inputs.ServiceComputeLoggingBlobstorageGetArgs> LoggingBlobstorages
        {
            get => _loggingBlobstorages ?? (_loggingBlobstorages = new InputList<Inputs.ServiceComputeLoggingBlobstorageGetArgs>());
            set => _loggingBlobstorages = value;
        }

        [Input("loggingCloudfiles")]
        private InputList<Inputs.ServiceComputeLoggingCloudfileGetArgs>? _loggingCloudfiles;
        public InputList<Inputs.ServiceComputeLoggingCloudfileGetArgs> LoggingCloudfiles
        {
            get => _loggingCloudfiles ?? (_loggingCloudfiles = new InputList<Inputs.ServiceComputeLoggingCloudfileGetArgs>());
            set => _loggingCloudfiles = value;
        }

        [Input("loggingDatadogs")]
        private InputList<Inputs.ServiceComputeLoggingDatadogGetArgs>? _loggingDatadogs;
        public InputList<Inputs.ServiceComputeLoggingDatadogGetArgs> LoggingDatadogs
        {
            get => _loggingDatadogs ?? (_loggingDatadogs = new InputList<Inputs.ServiceComputeLoggingDatadogGetArgs>());
            set => _loggingDatadogs = value;
        }

        [Input("loggingDigitaloceans")]
        private InputList<Inputs.ServiceComputeLoggingDigitaloceanGetArgs>? _loggingDigitaloceans;
        public InputList<Inputs.ServiceComputeLoggingDigitaloceanGetArgs> LoggingDigitaloceans
        {
            get => _loggingDigitaloceans ?? (_loggingDigitaloceans = new InputList<Inputs.ServiceComputeLoggingDigitaloceanGetArgs>());
            set => _loggingDigitaloceans = value;
        }

        [Input("loggingElasticsearches")]
        private InputList<Inputs.ServiceComputeLoggingElasticsearchGetArgs>? _loggingElasticsearches;
        public InputList<Inputs.ServiceComputeLoggingElasticsearchGetArgs> LoggingElasticsearches
        {
            get => _loggingElasticsearches ?? (_loggingElasticsearches = new InputList<Inputs.ServiceComputeLoggingElasticsearchGetArgs>());
            set => _loggingElasticsearches = value;
        }

        [Input("loggingFtps")]
        private InputList<Inputs.ServiceComputeLoggingFtpGetArgs>? _loggingFtps;
        public InputList<Inputs.ServiceComputeLoggingFtpGetArgs> LoggingFtps
        {
            get => _loggingFtps ?? (_loggingFtps = new InputList<Inputs.ServiceComputeLoggingFtpGetArgs>());
            set => _loggingFtps = value;
        }

        [Input("loggingGcs")]
        private InputList<Inputs.ServiceComputeLoggingGcGetArgs>? _loggingGcs;
        public InputList<Inputs.ServiceComputeLoggingGcGetArgs> LoggingGcs
        {
            get => _loggingGcs ?? (_loggingGcs = new InputList<Inputs.ServiceComputeLoggingGcGetArgs>());
            set => _loggingGcs = value;
        }

        [Input("loggingGooglepubsubs")]
        private InputList<Inputs.ServiceComputeLoggingGooglepubsubGetArgs>? _loggingGooglepubsubs;
        public InputList<Inputs.ServiceComputeLoggingGooglepubsubGetArgs> LoggingGooglepubsubs
        {
            get => _loggingGooglepubsubs ?? (_loggingGooglepubsubs = new InputList<Inputs.ServiceComputeLoggingGooglepubsubGetArgs>());
            set => _loggingGooglepubsubs = value;
        }

        [Input("loggingHeroku")]
        private InputList<Inputs.ServiceComputeLoggingHerokuGetArgs>? _loggingHeroku;
        public InputList<Inputs.ServiceComputeLoggingHerokuGetArgs> LoggingHeroku
        {
            get => _loggingHeroku ?? (_loggingHeroku = new InputList<Inputs.ServiceComputeLoggingHerokuGetArgs>());
            set => _loggingHeroku = value;
        }

        [Input("loggingHoneycombs")]
        private InputList<Inputs.ServiceComputeLoggingHoneycombGetArgs>? _loggingHoneycombs;
        public InputList<Inputs.ServiceComputeLoggingHoneycombGetArgs> LoggingHoneycombs
        {
            get => _loggingHoneycombs ?? (_loggingHoneycombs = new InputList<Inputs.ServiceComputeLoggingHoneycombGetArgs>());
            set => _loggingHoneycombs = value;
        }

        [Input("loggingHttps")]
        private InputList<Inputs.ServiceComputeLoggingHttpGetArgs>? _loggingHttps;
        public InputList<Inputs.ServiceComputeLoggingHttpGetArgs> LoggingHttps
        {
            get => _loggingHttps ?? (_loggingHttps = new InputList<Inputs.ServiceComputeLoggingHttpGetArgs>());
            set => _loggingHttps = value;
        }

        [Input("loggingKafkas")]
        private InputList<Inputs.ServiceComputeLoggingKafkaGetArgs>? _loggingKafkas;
        public InputList<Inputs.ServiceComputeLoggingKafkaGetArgs> LoggingKafkas
        {
            get => _loggingKafkas ?? (_loggingKafkas = new InputList<Inputs.ServiceComputeLoggingKafkaGetArgs>());
            set => _loggingKafkas = value;
        }

        [Input("loggingKineses")]
        private InputList<Inputs.ServiceComputeLoggingKineseGetArgs>? _loggingKineses;
        public InputList<Inputs.ServiceComputeLoggingKineseGetArgs> LoggingKineses
        {
            get => _loggingKineses ?? (_loggingKineses = new InputList<Inputs.ServiceComputeLoggingKineseGetArgs>());
            set => _loggingKineses = value;
        }

        [Input("loggingLogentries")]
        private InputList<Inputs.ServiceComputeLoggingLogentryGetArgs>? _loggingLogentries;
        public InputList<Inputs.ServiceComputeLoggingLogentryGetArgs> LoggingLogentries
        {
            get => _loggingLogentries ?? (_loggingLogentries = new InputList<Inputs.ServiceComputeLoggingLogentryGetArgs>());
            set => _loggingLogentries = value;
        }

        [Input("loggingLogglies")]
        private InputList<Inputs.ServiceComputeLoggingLogglyGetArgs>? _loggingLogglies;
        public InputList<Inputs.ServiceComputeLoggingLogglyGetArgs> LoggingLogglies
        {
            get => _loggingLogglies ?? (_loggingLogglies = new InputList<Inputs.ServiceComputeLoggingLogglyGetArgs>());
            set => _loggingLogglies = value;
        }

        [Input("loggingLogshuttles")]
        private InputList<Inputs.ServiceComputeLoggingLogshuttleGetArgs>? _loggingLogshuttles;
        public InputList<Inputs.ServiceComputeLoggingLogshuttleGetArgs> LoggingLogshuttles
        {
            get => _loggingLogshuttles ?? (_loggingLogshuttles = new InputList<Inputs.ServiceComputeLoggingLogshuttleGetArgs>());
            set => _loggingLogshuttles = value;
        }

        [Input("loggingNewrelics")]
        private InputList<Inputs.ServiceComputeLoggingNewrelicGetArgs>? _loggingNewrelics;
        public InputList<Inputs.ServiceComputeLoggingNewrelicGetArgs> LoggingNewrelics
        {
            get => _loggingNewrelics ?? (_loggingNewrelics = new InputList<Inputs.ServiceComputeLoggingNewrelicGetArgs>());
            set => _loggingNewrelics = value;
        }

        [Input("loggingOpenstacks")]
        private InputList<Inputs.ServiceComputeLoggingOpenstackGetArgs>? _loggingOpenstacks;
        public InputList<Inputs.ServiceComputeLoggingOpenstackGetArgs> LoggingOpenstacks
        {
            get => _loggingOpenstacks ?? (_loggingOpenstacks = new InputList<Inputs.ServiceComputeLoggingOpenstackGetArgs>());
            set => _loggingOpenstacks = value;
        }

        [Input("loggingPapertrails")]
        private InputList<Inputs.ServiceComputeLoggingPapertrailGetArgs>? _loggingPapertrails;
        public InputList<Inputs.ServiceComputeLoggingPapertrailGetArgs> LoggingPapertrails
        {
            get => _loggingPapertrails ?? (_loggingPapertrails = new InputList<Inputs.ServiceComputeLoggingPapertrailGetArgs>());
            set => _loggingPapertrails = value;
        }

        [Input("loggingS3s")]
        private InputList<Inputs.ServiceComputeLoggingS3GetArgs>? _loggingS3s;
        public InputList<Inputs.ServiceComputeLoggingS3GetArgs> LoggingS3s
        {
            get => _loggingS3s ?? (_loggingS3s = new InputList<Inputs.ServiceComputeLoggingS3GetArgs>());
            set => _loggingS3s = value;
        }

        [Input("loggingScalyrs")]
        private InputList<Inputs.ServiceComputeLoggingScalyrGetArgs>? _loggingScalyrs;
        public InputList<Inputs.ServiceComputeLoggingScalyrGetArgs> LoggingScalyrs
        {
            get => _loggingScalyrs ?? (_loggingScalyrs = new InputList<Inputs.ServiceComputeLoggingScalyrGetArgs>());
            set => _loggingScalyrs = value;
        }

        [Input("loggingSftps")]
        private InputList<Inputs.ServiceComputeLoggingSftpGetArgs>? _loggingSftps;
        public InputList<Inputs.ServiceComputeLoggingSftpGetArgs> LoggingSftps
        {
            get => _loggingSftps ?? (_loggingSftps = new InputList<Inputs.ServiceComputeLoggingSftpGetArgs>());
            set => _loggingSftps = value;
        }

        [Input("loggingSplunks")]
        private InputList<Inputs.ServiceComputeLoggingSplunkGetArgs>? _loggingSplunks;
        public InputList<Inputs.ServiceComputeLoggingSplunkGetArgs> LoggingSplunks
        {
            get => _loggingSplunks ?? (_loggingSplunks = new InputList<Inputs.ServiceComputeLoggingSplunkGetArgs>());
            set => _loggingSplunks = value;
        }

        [Input("loggingSumologics")]
        private InputList<Inputs.ServiceComputeLoggingSumologicGetArgs>? _loggingSumologics;
        public InputList<Inputs.ServiceComputeLoggingSumologicGetArgs> LoggingSumologics
        {
            get => _loggingSumologics ?? (_loggingSumologics = new InputList<Inputs.ServiceComputeLoggingSumologicGetArgs>());
            set => _loggingSumologics = value;
        }

        [Input("loggingSyslogs")]
        private InputList<Inputs.ServiceComputeLoggingSyslogGetArgs>? _loggingSyslogs;
        public InputList<Inputs.ServiceComputeLoggingSyslogGetArgs> LoggingSyslogs
        {
            get => _loggingSyslogs ?? (_loggingSyslogs = new InputList<Inputs.ServiceComputeLoggingSyslogGetArgs>());
            set => _loggingSyslogs = value;
        }

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
        /// </summary>
        [Input("package")]
        public Input<Inputs.ServiceComputePackageGetArgs>? Package { get; set; }

        [Input("productEnablement")]
        public Input<Inputs.ServiceComputeProductEnablementGetArgs>? ProductEnablement { get; set; }

        /// <summary>
        /// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
        /// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
        /// an active service will cause an error. Default `false`
        /// </summary>
        [Input("reuse")]
        public Input<bool>? Reuse { get; set; }

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        public ServiceComputeState()
        {
        }
        public static new ServiceComputeState Empty => new ServiceComputeState();
    }
}
