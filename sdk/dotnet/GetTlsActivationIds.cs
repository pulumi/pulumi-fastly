// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    public static class GetTlsActivationIds
    {
        /// <summary>
        /// Use this data source to get the list of TLS Activation identifiers in Fastly.
        /// </summary>
        public static Task<GetTlsActivationIdsResult> InvokeAsync(GetTlsActivationIdsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTlsActivationIdsResult>("fastly:index/getTlsActivationIds:getTlsActivationIds", args ?? new GetTlsActivationIdsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the list of TLS Activation identifiers in Fastly.
        /// </summary>
        public static Output<GetTlsActivationIdsResult> Invoke(GetTlsActivationIdsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTlsActivationIdsResult>("fastly:index/getTlsActivationIds:getTlsActivationIds", args ?? new GetTlsActivationIdsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsActivationIdsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of TLS certificate used to filter activations
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId { get; set; }

        public GetTlsActivationIdsArgs()
        {
        }
        public static new GetTlsActivationIdsArgs Empty => new GetTlsActivationIdsArgs();
    }

    public sealed class GetTlsActivationIdsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of TLS certificate used to filter activations
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        public GetTlsActivationIdsInvokeArgs()
        {
        }
        public static new GetTlsActivationIdsInvokeArgs Empty => new GetTlsActivationIdsInvokeArgs();
    }


    [OutputType]
    public sealed class GetTlsActivationIdsResult
    {
        /// <summary>
        /// ID of TLS certificate used to filter activations
        /// </summary>
        public readonly string? CertificateId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// List of IDs of the TLS Activations.
        /// </summary>
        public readonly ImmutableArray<string> Ids;

        [OutputConstructor]
        private GetTlsActivationIdsResult(
            string? certificateId,

            string id,

            ImmutableArray<string> ids)
        {
            CertificateId = certificateId;
            Id = id;
            Ids = ids;
        }
    }
}
