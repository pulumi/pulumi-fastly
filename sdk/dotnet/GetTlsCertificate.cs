// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    public static class GetTlsCertificate
    {
        /// <summary>
        /// Use this data source to get information of a TLS certificate for use with other resources.
        /// 
        /// &gt; **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
        /// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
        /// with any of the others.
        /// 
        /// &gt; **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Fastly.GetTlsCertificate.Invoke(new()
        ///     {
        ///         Name = "example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTlsCertificateResult> InvokeAsync(GetTlsCertificateArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTlsCertificateResult>("fastly:index/getTlsCertificate:getTlsCertificate", args ?? new GetTlsCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information of a TLS certificate for use with other resources.
        /// 
        /// &gt; **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
        /// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
        /// with any of the others.
        /// 
        /// &gt; **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Fastly.GetTlsCertificate.Invoke(new()
        ///     {
        ///         Name = "example.com",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTlsCertificateResult> Invoke(GetTlsCertificateInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTlsCertificateResult>("fastly:index/getTlsCertificate:getTlsCertificate", args ?? new GetTlsCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsCertificateArgs : global::Pulumi.InvokeArgs
    {
        [Input("domains")]
        private List<string>? _domains;

        /// <summary>
        /// Domains that are listed in any certificates' Subject Alternative Names (SAN) list.
        /// </summary>
        public List<string> Domains
        {
            get => _domains ?? (_domains = new List<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Unique ID assigned to certificate by Fastly
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The hostname for which a certificate was issued.
        /// </summary>
        [Input("issuedTo")]
        public string? IssuedTo { get; set; }

        /// <summary>
        /// The certificate authority that issued the certificate.
        /// </summary>
        [Input("issuer")]
        public string? Issuer { get; set; }

        /// <summary>
        /// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetTlsCertificateArgs()
        {
        }
        public static new GetTlsCertificateArgs Empty => new GetTlsCertificateArgs();
    }

    public sealed class GetTlsCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// Domains that are listed in any certificates' Subject Alternative Names (SAN) list.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Unique ID assigned to certificate by Fastly
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The hostname for which a certificate was issued.
        /// </summary>
        [Input("issuedTo")]
        public Input<string>? IssuedTo { get; set; }

        /// <summary>
        /// The certificate authority that issued the certificate.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetTlsCertificateInvokeArgs()
        {
        }
        public static new GetTlsCertificateInvokeArgs Empty => new GetTlsCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetTlsCertificateResult
    {
        /// <summary>
        /// Timestamp (GMT) when the certificate was created
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Domains that are listed in any certificates' Subject Alternative Names (SAN) list.
        /// </summary>
        public readonly ImmutableArray<string> Domains;
        /// <summary>
        /// Unique ID assigned to certificate by Fastly
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The hostname for which a certificate was issued.
        /// </summary>
        public readonly string IssuedTo;
        /// <summary>
        /// The certificate authority that issued the certificate.
        /// </summary>
        public readonly string Issuer;
        /// <summary>
        /// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation
        /// </summary>
        public readonly bool Replace;
        /// <summary>
        /// A value assigned by the issuer that is unique to a certificate
        /// </summary>
        public readonly string SerialNumber;
        /// <summary>
        /// The algorithm used to sign the certificate
        /// </summary>
        public readonly string SignatureAlgorithm;
        /// <summary>
        /// Timestamp (GMT) when the certificate was last updated
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetTlsCertificateResult(
            string createdAt,

            ImmutableArray<string> domains,

            string id,

            string issuedTo,

            string issuer,

            string name,

            bool replace,

            string serialNumber,

            string signatureAlgorithm,

            string updatedAt)
        {
            CreatedAt = createdAt;
            Domains = domains;
            Id = id;
            IssuedTo = issuedTo;
            Issuer = issuer;
            Name = name;
            Replace = replace;
            SerialNumber = serialNumber;
            SignatureAlgorithm = signatureAlgorithm;
            UpdatedAt = updatedAt;
        }
    }
}
