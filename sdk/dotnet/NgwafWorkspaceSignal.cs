// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Next-Gen WAF Workspace Signal, scoped to a specific NGWAF workspace.\
    /// These signals define conditions and actions that trigger WAF enforcement at the workspace level.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Fastly.NgwafWorkspace("example", new()
    ///     {
    ///         Name = "example",
    ///         Description = "Test NGWAF Workspace",
    ///         Mode = "block",
    ///         IpAnonymization = "hashed",
    ///         ClientIpHeaders = new[]
    ///         {
    ///             "X-Forwarded-For",
    ///             "X-Real-IP",
    ///         },
    ///         DefaultBlockingResponseCode = 429,
    ///         AttackSignalThresholds = null,
    ///     });
    /// 
    ///     var exampleNgwafWorkspaceSignal = new Fastly.NgwafWorkspaceSignal("example", new()
    ///     {
    ///         WorkspaceId = example.Id,
    ///         Description = "example",
    ///         Name = "Test Name",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Next-Gen WAF workspace signals can be imported using the format `&lt;workspaceID&gt;/&lt;signalID&gt;`, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal demo &lt;workspaceID&gt;/&lt;signalID&gt;
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal")]
    public partial class NgwafWorkspaceSignal : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the signal.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the signal. Special characters and periods are not accepted.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The generated reference ID of the signal.
        /// </summary>
        [Output("referenceId")]
        public Output<string> ReferenceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NgwafWorkspaceSignal resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NgwafWorkspaceSignal(string name, NgwafWorkspaceSignalArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal", name, args ?? new NgwafWorkspaceSignalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NgwafWorkspaceSignal(string name, Input<string> id, NgwafWorkspaceSignalState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NgwafWorkspaceSignal resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NgwafWorkspaceSignal Get(string name, Input<string> id, NgwafWorkspaceSignalState? state = null, CustomResourceOptions? options = null)
        {
            return new NgwafWorkspaceSignal(name, id, state, options);
        }
    }

    public sealed class NgwafWorkspaceSignalArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the signal.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the signal. Special characters and periods are not accepted.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public NgwafWorkspaceSignalArgs()
        {
        }
        public static new NgwafWorkspaceSignalArgs Empty => new NgwafWorkspaceSignalArgs();
    }

    public sealed class NgwafWorkspaceSignalState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the signal.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the signal. Special characters and periods are not accepted.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The generated reference ID of the signal.
        /// </summary>
        [Input("referenceId")]
        public Input<string>? ReferenceId { get; set; }

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public NgwafWorkspaceSignalState()
        {
        }
        public static new NgwafWorkspaceSignalState Empty => new NgwafWorkspaceSignalState();
    }
}
