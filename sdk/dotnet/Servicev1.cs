// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Service, representing the configuration for a website, app,
    /// API, or anything else to be served through Fastly. A Service encompasses Domains
    /// and Backends.
    /// 
    /// The Service resource requires a domain name that is correctly set up to direct
    /// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
    /// on their documentation site for guidance.
    /// 
    /// ## Example Usage
    /// ### Basic usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demo = new Fastly.Servicev1("demo", new Fastly.Servicev1Args
    ///         {
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.1",
    ///                     Name = "localhost",
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DomainArgs
    ///                 {
    ///                     Comment = "demo",
    ///                     Name = "demo.notexample.com",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Basic usage with custom VCL:
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demo = new Fastly.Servicev1("demo", new Fastly.Servicev1Args
    ///         {
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.1",
    ///                     Name = "localhost",
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DomainArgs
    ///                 {
    ///                     Comment = "demo",
    ///                     Name = "demo.notexample.com",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///             Vcls = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1VclArgs
    ///                 {
    ///                     Content = File.ReadAllText($"{path.Module}/my_custom_main.vcl"),
    ///                     Main = true,
    ///                     Name = "my_custom_main_vcl",
    ///                 },
    ///                 new Fastly.Inputs.Servicev1VclArgs
    ///                 {
    ///                     Content = File.ReadAllText($"{path.Module}/my_custom_library.vcl"),
    ///                     Name = "my_custom_library_vcl",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Basic usage with custom Director
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demo = new Fastly.Servicev1("demo", new Fastly.Servicev1Args
    ///         {
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.1",
    ///                     Name = "origin1",
    ///                     Port = 80,
    ///                 },
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.2",
    ///                     Name = "origin2",
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             Directors = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DirectorArgs
    ///                 {
    ///                     Backends = 
    ///                     {
    ///                         "origin1",
    ///                         "origin2",
    ///                     },
    ///                     Name = "mydirector",
    ///                     Quorum = 0,
    ///                     Type = 3,
    ///                 },
    ///             },
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DomainArgs
    ///                 {
    ///                     Comment = "demo",
    ///                     Name = "demo.notexample.com",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// &gt; **Note:** For an AWS S3 Bucket, the Backend address is
    /// `&lt;domain&gt;.s3-website-&lt;region&gt;.amazonaws.com`. The `default_host` attribute
    /// should be set to `&lt;bucket_name&gt;.s3-website-&lt;region&gt;.amazonaws.com`. See the
    /// Fastly documentation on [Amazon S3][fastly-s3].
    /// </summary>
    public partial class Servicev1 : Pulumi.CustomResource
    {
        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        [Output("acls")]
        public Output<ImmutableArray<Outputs.Servicev1Acl>> Acls { get; private set; } = null!;

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Output("activate")]
        public Output<bool?> Activate { get; private set; } = null!;

        /// <summary>
        /// The currently active version of your Fastly Service.
        /// </summary>
        [Output("activeVersion")]
        public Output<int> ActiveVersion { get; private set; } = null!;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<Outputs.Servicev1Backend>> Backends { get; private set; } = null!;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("bigqueryloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Bigquerylogging>> Bigqueryloggings { get; private set; } = null!;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("blobstorageloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Blobstoragelogging>> Blobstorageloggings { get; private set; } = null!;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        [Output("cacheSettings")]
        public Output<ImmutableArray<Outputs.Servicev1CacheSetting>> CacheSettings { get; private set; } = null!;

        /// <summary>
        /// The latest cloned version by the provider. The value gets only set after running `pulumi up`.
        /// </summary>
        [Output("clonedVersion")]
        public Output<int> ClonedVersion { get; private set; } = null!;

        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.Servicev1Condition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// Sets the host header.
        /// </summary>
        [Output("defaultHost")]
        public Output<string> DefaultHost { get; private set; } = null!;

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Output("defaultTtl")]
        public Output<int?> DefaultTtl { get; private set; } = null!;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        [Output("dictionaries")]
        public Output<ImmutableArray<Outputs.Servicev1Dictionary>> Dictionaries { get; private set; } = null!;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        [Output("directors")]
        public Output<ImmutableArray<Outputs.Servicev1Director>> Directors { get; private set; } = null!;

        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<Outputs.Servicev1Domain>> Domains { get; private set; } = null!;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        [Output("dynamicsnippets")]
        public Output<ImmutableArray<Outputs.Servicev1Dynamicsnippet>> Dynamicsnippets { get; private set; } = null!;

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("gcsloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Gcslogging>> Gcsloggings { get; private set; } = null!;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        [Output("gzips")]
        public Output<ImmutableArray<Outputs.Servicev1Gzip>> Gzips { get; private set; } = null!;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableArray<Outputs.Servicev1Header>> Headers { get; private set; } = null!;

        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        [Output("healthchecks")]
        public Output<ImmutableArray<Outputs.Servicev1Healthcheck>> Healthchecks { get; private set; } = null!;

        /// <summary>
        /// An HTTPS endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("httpsloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Httpslogging>> Httpsloggings { get; private set; } = null!;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("logentries")]
        public Output<ImmutableArray<Outputs.Servicev1Logentry>> Logentries { get; private set; } = null!;

        /// <summary>
        /// A Datadog endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingDatadogs")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingDatadog>> LoggingDatadogs { get; private set; } = null!;

        /// <summary>
        /// An Elasticsearch endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingElasticsearches")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingElasticsearch>> LoggingElasticsearches { get; private set; } = null!;

        /// <summary>
        /// An FTP endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingFtps")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingFtp>> LoggingFtps { get; private set; } = null!;

        /// <summary>
        /// A Google Cloud Pub/Sub endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingGooglepubsubs")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingGooglepubsub>> LoggingGooglepubsubs { get; private set; } = null!;

        /// <summary>
        /// A Kafka endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingKafkas")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingKafka>> LoggingKafkas { get; private set; } = null!;

        /// <summary>
        /// A Loggly endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingLogglies")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingLoggly>> LoggingLogglies { get; private set; } = null!;

        /// <summary>
        /// A New Relic endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingNewrelics")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingNewrelic>> LoggingNewrelics { get; private set; } = null!;

        /// <summary>
        /// A Scalyr endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingScalyrs")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingScalyr>> LoggingScalyrs { get; private set; } = null!;

        /// <summary>
        /// An SFTP endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        [Output("loggingSftps")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingSftp>> LoggingSftps { get; private set; } = null!;

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("papertrails")]
        public Output<ImmutableArray<Outputs.Servicev1Papertrail>> Papertrails { get; private set; } = null!;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        [Output("requestSettings")]
        public Output<ImmutableArray<Outputs.Servicev1RequestSetting>> RequestSettings { get; private set; } = null!;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        [Output("responseObjects")]
        public Output<ImmutableArray<Outputs.Servicev1ResponseObject>> ResponseObjects { get; private set; } = null!;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("s3loggings")]
        public Output<ImmutableArray<Outputs.Servicev1S3logging>> S3loggings { get; private set; } = null!;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        [Output("snippets")]
        public Output<ImmutableArray<Outputs.Servicev1Snippet>> Snippets { get; private set; } = null!;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("splunks")]
        public Output<ImmutableArray<Outputs.Servicev1Splunk>> Splunks { get; private set; } = null!;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("sumologics")]
        public Output<ImmutableArray<Outputs.Servicev1Sumologic>> Sumologics { get; private set; } = null!;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("syslogs")]
        public Output<ImmutableArray<Outputs.Servicev1Syslog>> Syslogs { get; private set; } = null!;

        /// <summary>
        /// A set of custom VCL configuration blocks. See the [Fastly documentation](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/) for more information on using custom VCL.
        /// </summary>
        [Output("vcls")]
        public Output<ImmutableArray<Outputs.Servicev1Vcl>> Vcls { get; private set; } = null!;

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Output("versionComment")]
        public Output<string?> VersionComment { get; private set; } = null!;


        /// <summary>
        /// Create a Servicev1 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Servicev1(string name, Servicev1Args args, CustomResourceOptions? options = null)
            : base("fastly:index/servicev1:Servicev1", name, args ?? new Servicev1Args(), MakeResourceOptions(options, ""))
        {
        }

        private Servicev1(string name, Input<string> id, Servicev1State? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/servicev1:Servicev1", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Servicev1 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Servicev1 Get(string name, Input<string> id, Servicev1State? state = null, CustomResourceOptions? options = null)
        {
            return new Servicev1(name, id, state, options);
        }
    }

    public sealed class Servicev1Args : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.Servicev1AclArgs>? _acls;

        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1AclArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.Servicev1AclArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        [Input("backends")]
        private InputList<Inputs.Servicev1BackendArgs>? _backends;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        public InputList<Inputs.Servicev1BackendArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.Servicev1BackendArgs>());
            set => _backends = value;
        }

        [Input("bigqueryloggings")]
        private InputList<Inputs.Servicev1BigqueryloggingArgs>? _bigqueryloggings;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BigqueryloggingArgs> Bigqueryloggings
        {
            get => _bigqueryloggings ?? (_bigqueryloggings = new InputList<Inputs.Servicev1BigqueryloggingArgs>());
            set => _bigqueryloggings = value;
        }

        [Input("blobstorageloggings")]
        private InputList<Inputs.Servicev1BlobstorageloggingArgs>? _blobstorageloggings;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BlobstorageloggingArgs> Blobstorageloggings
        {
            get => _blobstorageloggings ?? (_blobstorageloggings = new InputList<Inputs.Servicev1BlobstorageloggingArgs>());
            set => _blobstorageloggings = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.Servicev1CacheSettingArgs>? _cacheSettings;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        public InputList<Inputs.Servicev1CacheSettingArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.Servicev1CacheSettingArgs>());
            set => _cacheSettings = value;
        }

        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.Servicev1ConditionArgs>? _conditions;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1ConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.Servicev1ConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// Sets the host header.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.Servicev1DictionaryArgs>? _dictionaries;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DictionaryArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.Servicev1DictionaryArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.Servicev1DirectorArgs>? _directors;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1DirectorArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.Servicev1DirectorArgs>());
            set => _directors = value;
        }

        [Input("domains", required: true)]
        private InputList<Inputs.Servicev1DomainArgs>? _domains;

        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        public InputList<Inputs.Servicev1DomainArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.Servicev1DomainArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.Servicev1DynamicsnippetArgs>? _dynamicsnippets;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DynamicsnippetArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.Servicev1DynamicsnippetArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gcsloggings")]
        private InputList<Inputs.Servicev1GcsloggingArgs>? _gcsloggings;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GcsloggingArgs> Gcsloggings
        {
            get => _gcsloggings ?? (_gcsloggings = new InputList<Inputs.Servicev1GcsloggingArgs>());
            set => _gcsloggings = value;
        }

        [Input("gzips")]
        private InputList<Inputs.Servicev1GzipArgs>? _gzips;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GzipArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.Servicev1GzipArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.Servicev1HeaderArgs>? _headers;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        public InputList<Inputs.Servicev1HeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.Servicev1HeaderArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.Servicev1HealthcheckArgs>? _healthchecks;

        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        public InputList<Inputs.Servicev1HealthcheckArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.Servicev1HealthcheckArgs>());
            set => _healthchecks = value;
        }

        [Input("httpsloggings")]
        private InputList<Inputs.Servicev1HttpsloggingArgs>? _httpsloggings;

        /// <summary>
        /// An HTTPS endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1HttpsloggingArgs> Httpsloggings
        {
            get => _httpsloggings ?? (_httpsloggings = new InputList<Inputs.Servicev1HttpsloggingArgs>());
            set => _httpsloggings = value;
        }

        [Input("logentries")]
        private InputList<Inputs.Servicev1LogentryArgs>? _logentries;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LogentryArgs> Logentries
        {
            get => _logentries ?? (_logentries = new InputList<Inputs.Servicev1LogentryArgs>());
            set => _logentries = value;
        }

        [Input("loggingDatadogs")]
        private InputList<Inputs.Servicev1LoggingDatadogArgs>? _loggingDatadogs;

        /// <summary>
        /// A Datadog endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingDatadogArgs> LoggingDatadogs
        {
            get => _loggingDatadogs ?? (_loggingDatadogs = new InputList<Inputs.Servicev1LoggingDatadogArgs>());
            set => _loggingDatadogs = value;
        }

        [Input("loggingElasticsearches")]
        private InputList<Inputs.Servicev1LoggingElasticsearchArgs>? _loggingElasticsearches;

        /// <summary>
        /// An Elasticsearch endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingElasticsearchArgs> LoggingElasticsearches
        {
            get => _loggingElasticsearches ?? (_loggingElasticsearches = new InputList<Inputs.Servicev1LoggingElasticsearchArgs>());
            set => _loggingElasticsearches = value;
        }

        [Input("loggingFtps")]
        private InputList<Inputs.Servicev1LoggingFtpArgs>? _loggingFtps;

        /// <summary>
        /// An FTP endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingFtpArgs> LoggingFtps
        {
            get => _loggingFtps ?? (_loggingFtps = new InputList<Inputs.Servicev1LoggingFtpArgs>());
            set => _loggingFtps = value;
        }

        [Input("loggingGooglepubsubs")]
        private InputList<Inputs.Servicev1LoggingGooglepubsubArgs>? _loggingGooglepubsubs;

        /// <summary>
        /// A Google Cloud Pub/Sub endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingGooglepubsubArgs> LoggingGooglepubsubs
        {
            get => _loggingGooglepubsubs ?? (_loggingGooglepubsubs = new InputList<Inputs.Servicev1LoggingGooglepubsubArgs>());
            set => _loggingGooglepubsubs = value;
        }

        [Input("loggingKafkas")]
        private InputList<Inputs.Servicev1LoggingKafkaArgs>? _loggingKafkas;

        /// <summary>
        /// A Kafka endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingKafkaArgs> LoggingKafkas
        {
            get => _loggingKafkas ?? (_loggingKafkas = new InputList<Inputs.Servicev1LoggingKafkaArgs>());
            set => _loggingKafkas = value;
        }

        [Input("loggingLogglies")]
        private InputList<Inputs.Servicev1LoggingLogglyArgs>? _loggingLogglies;

        /// <summary>
        /// A Loggly endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingLogglyArgs> LoggingLogglies
        {
            get => _loggingLogglies ?? (_loggingLogglies = new InputList<Inputs.Servicev1LoggingLogglyArgs>());
            set => _loggingLogglies = value;
        }

        [Input("loggingNewrelics")]
        private InputList<Inputs.Servicev1LoggingNewrelicArgs>? _loggingNewrelics;

        /// <summary>
        /// A New Relic endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingNewrelicArgs> LoggingNewrelics
        {
            get => _loggingNewrelics ?? (_loggingNewrelics = new InputList<Inputs.Servicev1LoggingNewrelicArgs>());
            set => _loggingNewrelics = value;
        }

        [Input("loggingScalyrs")]
        private InputList<Inputs.Servicev1LoggingScalyrArgs>? _loggingScalyrs;

        /// <summary>
        /// A Scalyr endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingScalyrArgs> LoggingScalyrs
        {
            get => _loggingScalyrs ?? (_loggingScalyrs = new InputList<Inputs.Servicev1LoggingScalyrArgs>());
            set => _loggingScalyrs = value;
        }

        [Input("loggingSftps")]
        private InputList<Inputs.Servicev1LoggingSftpArgs>? _loggingSftps;

        /// <summary>
        /// An SFTP endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingSftpArgs> LoggingSftps
        {
            get => _loggingSftps ?? (_loggingSftps = new InputList<Inputs.Servicev1LoggingSftpArgs>());
            set => _loggingSftps = value;
        }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("papertrails")]
        private InputList<Inputs.Servicev1PapertrailArgs>? _papertrails;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1PapertrailArgs> Papertrails
        {
            get => _papertrails ?? (_papertrails = new InputList<Inputs.Servicev1PapertrailArgs>());
            set => _papertrails = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.Servicev1RequestSettingArgs>? _requestSettings;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1RequestSettingArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.Servicev1RequestSettingArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.Servicev1ResponseObjectArgs>? _responseObjects;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        public InputList<Inputs.Servicev1ResponseObjectArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.Servicev1ResponseObjectArgs>());
            set => _responseObjects = value;
        }

        [Input("s3loggings")]
        private InputList<Inputs.Servicev1S3loggingArgs>? _s3loggings;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1S3loggingArgs> S3loggings
        {
            get => _s3loggings ?? (_s3loggings = new InputList<Inputs.Servicev1S3loggingArgs>());
            set => _s3loggings = value;
        }

        [Input("snippets")]
        private InputList<Inputs.Servicev1SnippetArgs>? _snippets;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SnippetArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.Servicev1SnippetArgs>());
            set => _snippets = value;
        }

        [Input("splunks")]
        private InputList<Inputs.Servicev1SplunkArgs>? _splunks;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SplunkArgs> Splunks
        {
            get => _splunks ?? (_splunks = new InputList<Inputs.Servicev1SplunkArgs>());
            set => _splunks = value;
        }

        [Input("sumologics")]
        private InputList<Inputs.Servicev1SumologicArgs>? _sumologics;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SumologicArgs> Sumologics
        {
            get => _sumologics ?? (_sumologics = new InputList<Inputs.Servicev1SumologicArgs>());
            set => _sumologics = value;
        }

        [Input("syslogs")]
        private InputList<Inputs.Servicev1SyslogArgs>? _syslogs;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SyslogArgs> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<Inputs.Servicev1SyslogArgs>());
            set => _syslogs = value;
        }

        [Input("vcls")]
        private InputList<Inputs.Servicev1VclArgs>? _vcls;

        /// <summary>
        /// A set of custom VCL configuration blocks. See the [Fastly documentation](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/) for more information on using custom VCL.
        /// </summary>
        public InputList<Inputs.Servicev1VclArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.Servicev1VclArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        public Servicev1Args()
        {
        }
    }

    public sealed class Servicev1State : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.Servicev1AclGetArgs>? _acls;

        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1AclGetArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.Servicev1AclGetArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        /// <summary>
        /// The currently active version of your Fastly Service.
        /// </summary>
        [Input("activeVersion")]
        public Input<int>? ActiveVersion { get; set; }

        [Input("backends")]
        private InputList<Inputs.Servicev1BackendGetArgs>? _backends;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        public InputList<Inputs.Servicev1BackendGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.Servicev1BackendGetArgs>());
            set => _backends = value;
        }

        [Input("bigqueryloggings")]
        private InputList<Inputs.Servicev1BigqueryloggingGetArgs>? _bigqueryloggings;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BigqueryloggingGetArgs> Bigqueryloggings
        {
            get => _bigqueryloggings ?? (_bigqueryloggings = new InputList<Inputs.Servicev1BigqueryloggingGetArgs>());
            set => _bigqueryloggings = value;
        }

        [Input("blobstorageloggings")]
        private InputList<Inputs.Servicev1BlobstorageloggingGetArgs>? _blobstorageloggings;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BlobstorageloggingGetArgs> Blobstorageloggings
        {
            get => _blobstorageloggings ?? (_blobstorageloggings = new InputList<Inputs.Servicev1BlobstorageloggingGetArgs>());
            set => _blobstorageloggings = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.Servicev1CacheSettingGetArgs>? _cacheSettings;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        public InputList<Inputs.Servicev1CacheSettingGetArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.Servicev1CacheSettingGetArgs>());
            set => _cacheSettings = value;
        }

        /// <summary>
        /// The latest cloned version by the provider. The value gets only set after running `pulumi up`.
        /// </summary>
        [Input("clonedVersion")]
        public Input<int>? ClonedVersion { get; set; }

        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.Servicev1ConditionGetArgs>? _conditions;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1ConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.Servicev1ConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// Sets the host header.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.Servicev1DictionaryGetArgs>? _dictionaries;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DictionaryGetArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.Servicev1DictionaryGetArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.Servicev1DirectorGetArgs>? _directors;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1DirectorGetArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.Servicev1DirectorGetArgs>());
            set => _directors = value;
        }

        [Input("domains")]
        private InputList<Inputs.Servicev1DomainGetArgs>? _domains;

        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        public InputList<Inputs.Servicev1DomainGetArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.Servicev1DomainGetArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.Servicev1DynamicsnippetGetArgs>? _dynamicsnippets;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DynamicsnippetGetArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.Servicev1DynamicsnippetGetArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gcsloggings")]
        private InputList<Inputs.Servicev1GcsloggingGetArgs>? _gcsloggings;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GcsloggingGetArgs> Gcsloggings
        {
            get => _gcsloggings ?? (_gcsloggings = new InputList<Inputs.Servicev1GcsloggingGetArgs>());
            set => _gcsloggings = value;
        }

        [Input("gzips")]
        private InputList<Inputs.Servicev1GzipGetArgs>? _gzips;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GzipGetArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.Servicev1GzipGetArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.Servicev1HeaderGetArgs>? _headers;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        public InputList<Inputs.Servicev1HeaderGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.Servicev1HeaderGetArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.Servicev1HealthcheckGetArgs>? _healthchecks;

        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        public InputList<Inputs.Servicev1HealthcheckGetArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.Servicev1HealthcheckGetArgs>());
            set => _healthchecks = value;
        }

        [Input("httpsloggings")]
        private InputList<Inputs.Servicev1HttpsloggingGetArgs>? _httpsloggings;

        /// <summary>
        /// An HTTPS endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1HttpsloggingGetArgs> Httpsloggings
        {
            get => _httpsloggings ?? (_httpsloggings = new InputList<Inputs.Servicev1HttpsloggingGetArgs>());
            set => _httpsloggings = value;
        }

        [Input("logentries")]
        private InputList<Inputs.Servicev1LogentryGetArgs>? _logentries;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LogentryGetArgs> Logentries
        {
            get => _logentries ?? (_logentries = new InputList<Inputs.Servicev1LogentryGetArgs>());
            set => _logentries = value;
        }

        [Input("loggingDatadogs")]
        private InputList<Inputs.Servicev1LoggingDatadogGetArgs>? _loggingDatadogs;

        /// <summary>
        /// A Datadog endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingDatadogGetArgs> LoggingDatadogs
        {
            get => _loggingDatadogs ?? (_loggingDatadogs = new InputList<Inputs.Servicev1LoggingDatadogGetArgs>());
            set => _loggingDatadogs = value;
        }

        [Input("loggingElasticsearches")]
        private InputList<Inputs.Servicev1LoggingElasticsearchGetArgs>? _loggingElasticsearches;

        /// <summary>
        /// An Elasticsearch endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingElasticsearchGetArgs> LoggingElasticsearches
        {
            get => _loggingElasticsearches ?? (_loggingElasticsearches = new InputList<Inputs.Servicev1LoggingElasticsearchGetArgs>());
            set => _loggingElasticsearches = value;
        }

        [Input("loggingFtps")]
        private InputList<Inputs.Servicev1LoggingFtpGetArgs>? _loggingFtps;

        /// <summary>
        /// An FTP endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingFtpGetArgs> LoggingFtps
        {
            get => _loggingFtps ?? (_loggingFtps = new InputList<Inputs.Servicev1LoggingFtpGetArgs>());
            set => _loggingFtps = value;
        }

        [Input("loggingGooglepubsubs")]
        private InputList<Inputs.Servicev1LoggingGooglepubsubGetArgs>? _loggingGooglepubsubs;

        /// <summary>
        /// A Google Cloud Pub/Sub endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingGooglepubsubGetArgs> LoggingGooglepubsubs
        {
            get => _loggingGooglepubsubs ?? (_loggingGooglepubsubs = new InputList<Inputs.Servicev1LoggingGooglepubsubGetArgs>());
            set => _loggingGooglepubsubs = value;
        }

        [Input("loggingKafkas")]
        private InputList<Inputs.Servicev1LoggingKafkaGetArgs>? _loggingKafkas;

        /// <summary>
        /// A Kafka endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingKafkaGetArgs> LoggingKafkas
        {
            get => _loggingKafkas ?? (_loggingKafkas = new InputList<Inputs.Servicev1LoggingKafkaGetArgs>());
            set => _loggingKafkas = value;
        }

        [Input("loggingLogglies")]
        private InputList<Inputs.Servicev1LoggingLogglyGetArgs>? _loggingLogglies;

        /// <summary>
        /// A Loggly endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingLogglyGetArgs> LoggingLogglies
        {
            get => _loggingLogglies ?? (_loggingLogglies = new InputList<Inputs.Servicev1LoggingLogglyGetArgs>());
            set => _loggingLogglies = value;
        }

        [Input("loggingNewrelics")]
        private InputList<Inputs.Servicev1LoggingNewrelicGetArgs>? _loggingNewrelics;

        /// <summary>
        /// A New Relic endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingNewrelicGetArgs> LoggingNewrelics
        {
            get => _loggingNewrelics ?? (_loggingNewrelics = new InputList<Inputs.Servicev1LoggingNewrelicGetArgs>());
            set => _loggingNewrelics = value;
        }

        [Input("loggingScalyrs")]
        private InputList<Inputs.Servicev1LoggingScalyrGetArgs>? _loggingScalyrs;

        /// <summary>
        /// A Scalyr endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingScalyrGetArgs> LoggingScalyrs
        {
            get => _loggingScalyrs ?? (_loggingScalyrs = new InputList<Inputs.Servicev1LoggingScalyrGetArgs>());
            set => _loggingScalyrs = value;
        }

        [Input("loggingSftps")]
        private InputList<Inputs.Servicev1LoggingSftpGetArgs>? _loggingSftps;

        /// <summary>
        /// An SFTP endpoint to send streaming logs to.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LoggingSftpGetArgs> LoggingSftps
        {
            get => _loggingSftps ?? (_loggingSftps = new InputList<Inputs.Servicev1LoggingSftpGetArgs>());
            set => _loggingSftps = value;
        }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("papertrails")]
        private InputList<Inputs.Servicev1PapertrailGetArgs>? _papertrails;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1PapertrailGetArgs> Papertrails
        {
            get => _papertrails ?? (_papertrails = new InputList<Inputs.Servicev1PapertrailGetArgs>());
            set => _papertrails = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.Servicev1RequestSettingGetArgs>? _requestSettings;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1RequestSettingGetArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.Servicev1RequestSettingGetArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.Servicev1ResponseObjectGetArgs>? _responseObjects;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        public InputList<Inputs.Servicev1ResponseObjectGetArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.Servicev1ResponseObjectGetArgs>());
            set => _responseObjects = value;
        }

        [Input("s3loggings")]
        private InputList<Inputs.Servicev1S3loggingGetArgs>? _s3loggings;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1S3loggingGetArgs> S3loggings
        {
            get => _s3loggings ?? (_s3loggings = new InputList<Inputs.Servicev1S3loggingGetArgs>());
            set => _s3loggings = value;
        }

        [Input("snippets")]
        private InputList<Inputs.Servicev1SnippetGetArgs>? _snippets;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SnippetGetArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.Servicev1SnippetGetArgs>());
            set => _snippets = value;
        }

        [Input("splunks")]
        private InputList<Inputs.Servicev1SplunkGetArgs>? _splunks;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SplunkGetArgs> Splunks
        {
            get => _splunks ?? (_splunks = new InputList<Inputs.Servicev1SplunkGetArgs>());
            set => _splunks = value;
        }

        [Input("sumologics")]
        private InputList<Inputs.Servicev1SumologicGetArgs>? _sumologics;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SumologicGetArgs> Sumologics
        {
            get => _sumologics ?? (_sumologics = new InputList<Inputs.Servicev1SumologicGetArgs>());
            set => _sumologics = value;
        }

        [Input("syslogs")]
        private InputList<Inputs.Servicev1SyslogGetArgs>? _syslogs;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SyslogGetArgs> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<Inputs.Servicev1SyslogGetArgs>());
            set => _syslogs = value;
        }

        [Input("vcls")]
        private InputList<Inputs.Servicev1VclGetArgs>? _vcls;

        /// <summary>
        /// A set of custom VCL configuration blocks. See the [Fastly documentation](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/) for more information on using custom VCL.
        /// </summary>
        public InputList<Inputs.Servicev1VclGetArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.Servicev1VclGetArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        public Servicev1State()
        {
        }
    }
}
