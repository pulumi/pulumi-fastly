// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Service, representing the configuration for a website, app,
    /// API, or anything else to be served through Fastly. A Service encompasses Domains
    /// and Backends.
    /// 
    /// The Service resource requires a domain name that is correctly set up to direct
    /// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
    /// on their documentation site for guidance.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demo = new Fastly.Servicev1("demo", new Fastly.Servicev1Args
    ///         {
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.1",
    ///                     Name = "localhost",
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DomainArgs
    ///                 {
    ///                     Comment = "demo",
    ///                     Name = "demo.notexample.com",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Basic usage with an Amazon S3 Website and that removes the `x-amz-request-id` header:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demo = new Fastly.Servicev1("demo", new Fastly.Servicev1Args
    ///         {
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "demo.notexample.com.s3-website-us-west-2.amazonaws.com",
    ///                     Name = "AWS S3 hosting",
    ///                     OverrideHost = "demo.notexample.com.s3-website-us-west-2.amazonaws.com",
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DomainArgs
    ///                 {
    ///                     Comment = "demo",
    ///                     Name = "demo.notexample.com",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///             Gzips = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1GzipArgs
    ///                 {
    ///                     ContentTypes = 
    ///                     {
    ///                         "text/html",
    ///                         "text/css",
    ///                     },
    ///                     Extensions = 
    ///                     {
    ///                         "css",
    ///                         "js",
    ///                     },
    ///                     Name = "file extensions and content types",
    ///                 },
    ///             },
    ///             Headers = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1HeaderArgs
    ///                 {
    ///                     Action = "delete",
    ///                     Destination = "http.x-amz-request-id",
    ///                     Name = "remove x-amz-request-id",
    ///                     Type = "cache",
    ///                 },
    ///             },
    ///         });
    ///         var website = new Aws.S3.Bucket("website", new Aws.S3.BucketArgs
    ///         {
    ///             Acl = "public-read",
    ///             Website = new Aws.S3.Inputs.BucketWebsiteArgs
    ///             {
    ///                 ErrorDocument = "error.html",
    ///                 IndexDocument = "index.html",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Basic usage with [custom
    /// VCL](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/):
    /// 
    /// ```csharp
    /// using System.IO;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demo = new Fastly.Servicev1("demo", new Fastly.Servicev1Args
    ///         {
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.1",
    ///                     Name = "localhost",
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DomainArgs
    ///                 {
    ///                     Comment = "demo",
    ///                     Name = "demo.notexample.com",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///             Vcls = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1VclArgs
    ///                 {
    ///                     Content = File.ReadAllText($"{path.Module}/my_custom_main.vcl"),
    ///                     Main = true,
    ///                     Name = "my_custom_main_vcl",
    ///                 },
    ///                 new Fastly.Inputs.Servicev1VclArgs
    ///                 {
    ///                     Content = File.ReadAllText($"{path.Module}/my_custom_library.vcl"),
    ///                     Name = "my_custom_library_vcl",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Basic usage with [custom Director](https://developer.fastly.com/reference/api/load-balancing/directors/director/):
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demo = new Fastly.Servicev1("demo", new Fastly.Servicev1Args
    ///         {
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.1",
    ///                     Name = "origin1",
    ///                     Port = 80,
    ///                 },
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.2",
    ///                     Name = "origin2",
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             Directors = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DirectorArgs
    ///                 {
    ///                     Backends = 
    ///                     {
    ///                         "origin1",
    ///                         "origin2",
    ///                     },
    ///                     Name = "mydirector",
    ///                     Quorum = 0,
    ///                     Type = 3,
    ///                 },
    ///             },
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DomainArgs
    ///                 {
    ///                     Comment = "demo",
    ///                     Name = "demo.notexample.com",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// Basic usage with [Web Application Firewall](https://developer.fastly.com/reference/api/waf/):
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demo = new Fastly.Servicev1("demo", new Fastly.Servicev1Args
    ///         {
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1BackendArgs
    ///                 {
    ///                     Address = "127.0.0.1",
    ///                     Name = "origin1",
    ///                     Port = 80,
    ///                 },
    ///             },
    ///             Conditions = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1ConditionArgs
    ///                 {
    ///                     Name = "WAF_Prefetch",
    ///                     Statement = "req.backend.is_origin",
    ///                     Type = "PREFETCH",
    ///                 },
    ///                 new Fastly.Inputs.Servicev1ConditionArgs
    ///                 {
    ///                     Name = "WAF_always_false",
    ///                     Statement = "false",
    ///                     Type = "REQUEST",
    ///                 },
    ///             },
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1DomainArgs
    ///                 {
    ///                     Comment = "demo",
    ///                     Name = "example.com",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///             ResponseObjects = 
    ///             {
    ///                 new Fastly.Inputs.Servicev1ResponseObjectArgs
    ///                 {
    ///                     Content = "&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;",
    ///                     ContentType = "text/html",
    ///                     Name = "WAF_Response",
    ///                     RequestCondition = "WAF_always_false",
    ///                     Response = "Forbidden",
    ///                     Status = 403,
    ///                 },
    ///             },
    ///             Waf = new Fastly.Inputs.Servicev1WafArgs
    ///             {
    ///                 PrefetchCondition = "WAF_Prefetch",
    ///                 ResponseObject = "WAF_Response",
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// &gt; **Note:** For an AWS S3 Bucket, the Backend address is
    /// `&lt;domain&gt;.s3-website-&lt;region&gt;.amazonaws.com`. The `override_host` attribute
    /// should be set to `&lt;bucket_name&gt;.s3-website-&lt;region&gt;.amazonaws.com` in the `backend` block. See the
    /// Fastly documentation on [Amazon S3][fastly-s3].
    /// 
    /// [fastly-s3]: https://docs.fastly.com/en/guides/amazon-s3
    /// [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
    /// [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
    /// [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
    /// [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/
    /// 
    /// ## Import
    /// 
    /// Fastly Services can be imported using their service ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import fastly:index/servicev1:Servicev1 demo xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/servicev1:Servicev1")]
    public partial class Servicev1 : Pulumi.CustomResource
    {
        [Output("acls")]
        public Output<ImmutableArray<Outputs.Servicev1Acl>> Acls { get; private set; } = null!;

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Output("activate")]
        public Output<bool?> Activate { get; private set; } = null!;

        /// <summary>
        /// The currently active version of your Fastly Service
        /// </summary>
        [Output("activeVersion")]
        public Output<int> ActiveVersion { get; private set; } = null!;

        [Output("backends")]
        public Output<ImmutableArray<Outputs.Servicev1Backend>> Backends { get; private set; } = null!;

        [Output("bigqueryloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Bigquerylogging>> Bigqueryloggings { get; private set; } = null!;

        [Output("blobstorageloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Blobstoragelogging>> Blobstorageloggings { get; private set; } = null!;

        [Output("cacheSettings")]
        public Output<ImmutableArray<Outputs.Servicev1CacheSetting>> CacheSettings { get; private set; } = null!;

        /// <summary>
        /// The latest cloned version by the provider
        /// </summary>
        [Output("clonedVersion")]
        public Output<int> ClonedVersion { get; private set; } = null!;

        /// <summary>
        /// Description field for the service. Default `Managed by Terraform`
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        [Output("conditions")]
        public Output<ImmutableArray<Outputs.Servicev1Condition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// The default hostname
        /// </summary>
        [Output("defaultHost")]
        public Output<string?> DefaultHost { get; private set; } = null!;

        /// <summary>
        /// The default Time-to-live (TTL) for requests
        /// </summary>
        [Output("defaultTtl")]
        public Output<int?> DefaultTtl { get; private set; } = null!;

        [Output("dictionaries")]
        public Output<ImmutableArray<Outputs.Servicev1Dictionary>> Dictionaries { get; private set; } = null!;

        [Output("directors")]
        public Output<ImmutableArray<Outputs.Servicev1Director>> Directors { get; private set; } = null!;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<Outputs.Servicev1Domain>> Domains { get; private set; } = null!;

        [Output("dynamicsnippets")]
        public Output<ImmutableArray<Outputs.Servicev1Dynamicsnippet>> Dynamicsnippets { get; private set; } = null!;

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        [Output("gcsloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Gcslogging>> Gcsloggings { get; private set; } = null!;

        [Output("gzips")]
        public Output<ImmutableArray<Outputs.Servicev1Gzip>> Gzips { get; private set; } = null!;

        [Output("headers")]
        public Output<ImmutableArray<Outputs.Servicev1Header>> Headers { get; private set; } = null!;

        [Output("healthchecks")]
        public Output<ImmutableArray<Outputs.Servicev1Healthcheck>> Healthchecks { get; private set; } = null!;

        [Output("httpsloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Httpslogging>> Httpsloggings { get; private set; } = null!;

        [Output("logentries")]
        public Output<ImmutableArray<Outputs.Servicev1Logentry>> Logentries { get; private set; } = null!;

        [Output("loggingCloudfiles")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingCloudfile>> LoggingCloudfiles { get; private set; } = null!;

        [Output("loggingDatadogs")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingDatadog>> LoggingDatadogs { get; private set; } = null!;

        [Output("loggingDigitaloceans")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingDigitalocean>> LoggingDigitaloceans { get; private set; } = null!;

        [Output("loggingElasticsearches")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingElasticsearch>> LoggingElasticsearches { get; private set; } = null!;

        [Output("loggingFtps")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingFtp>> LoggingFtps { get; private set; } = null!;

        [Output("loggingGooglepubsubs")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingGooglepubsub>> LoggingGooglepubsubs { get; private set; } = null!;

        [Output("loggingHeroku")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingHeroku>> LoggingHeroku { get; private set; } = null!;

        [Output("loggingHoneycombs")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingHoneycomb>> LoggingHoneycombs { get; private set; } = null!;

        [Output("loggingKafkas")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingKafka>> LoggingKafkas { get; private set; } = null!;

        [Output("loggingKineses")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingKinese>> LoggingKineses { get; private set; } = null!;

        [Output("loggingLogglies")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingLoggly>> LoggingLogglies { get; private set; } = null!;

        [Output("loggingLogshuttles")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingLogshuttle>> LoggingLogshuttles { get; private set; } = null!;

        [Output("loggingNewrelics")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingNewrelic>> LoggingNewrelics { get; private set; } = null!;

        [Output("loggingOpenstacks")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingOpenstack>> LoggingOpenstacks { get; private set; } = null!;

        [Output("loggingScalyrs")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingScalyr>> LoggingScalyrs { get; private set; } = null!;

        [Output("loggingSftps")]
        public Output<ImmutableArray<Outputs.Servicev1LoggingSftp>> LoggingSftps { get; private set; } = null!;

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("papertrails")]
        public Output<ImmutableArray<Outputs.Servicev1Papertrail>> Papertrails { get; private set; } = null!;

        [Output("requestSettings")]
        public Output<ImmutableArray<Outputs.Servicev1RequestSetting>> RequestSettings { get; private set; } = null!;

        [Output("responseObjects")]
        public Output<ImmutableArray<Outputs.Servicev1ResponseObject>> ResponseObjects { get; private set; } = null!;

        [Output("s3loggings")]
        public Output<ImmutableArray<Outputs.Servicev1S3logging>> S3loggings { get; private set; } = null!;

        [Output("snippets")]
        public Output<ImmutableArray<Outputs.Servicev1Snippet>> Snippets { get; private set; } = null!;

        [Output("splunks")]
        public Output<ImmutableArray<Outputs.Servicev1Splunk>> Splunks { get; private set; } = null!;

        [Output("sumologics")]
        public Output<ImmutableArray<Outputs.Servicev1Sumologic>> Sumologics { get; private set; } = null!;

        [Output("syslogs")]
        public Output<ImmutableArray<Outputs.Servicev1Syslog>> Syslogs { get; private set; } = null!;

        [Output("vcls")]
        public Output<ImmutableArray<Outputs.Servicev1Vcl>> Vcls { get; private set; } = null!;

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Output("versionComment")]
        public Output<string?> VersionComment { get; private set; } = null!;

        [Output("waf")]
        public Output<Outputs.Servicev1Waf?> Waf { get; private set; } = null!;


        /// <summary>
        /// Create a Servicev1 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Servicev1(string name, Servicev1Args args, CustomResourceOptions? options = null)
            : base("fastly:index/servicev1:Servicev1", name, args ?? new Servicev1Args(), MakeResourceOptions(options, ""))
        {
        }

        private Servicev1(string name, Input<string> id, Servicev1State? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/servicev1:Servicev1", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Servicev1 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Servicev1 Get(string name, Input<string> id, Servicev1State? state = null, CustomResourceOptions? options = null)
        {
            return new Servicev1(name, id, state, options);
        }
    }

    public sealed class Servicev1Args : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.Servicev1AclArgs>? _acls;
        public InputList<Inputs.Servicev1AclArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.Servicev1AclArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        [Input("backends", required: true)]
        private InputList<Inputs.Servicev1BackendArgs>? _backends;
        public InputList<Inputs.Servicev1BackendArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.Servicev1BackendArgs>());
            set => _backends = value;
        }

        [Input("bigqueryloggings")]
        private InputList<Inputs.Servicev1BigqueryloggingArgs>? _bigqueryloggings;
        public InputList<Inputs.Servicev1BigqueryloggingArgs> Bigqueryloggings
        {
            get => _bigqueryloggings ?? (_bigqueryloggings = new InputList<Inputs.Servicev1BigqueryloggingArgs>());
            set => _bigqueryloggings = value;
        }

        [Input("blobstorageloggings")]
        private InputList<Inputs.Servicev1BlobstorageloggingArgs>? _blobstorageloggings;
        public InputList<Inputs.Servicev1BlobstorageloggingArgs> Blobstorageloggings
        {
            get => _blobstorageloggings ?? (_blobstorageloggings = new InputList<Inputs.Servicev1BlobstorageloggingArgs>());
            set => _blobstorageloggings = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.Servicev1CacheSettingArgs>? _cacheSettings;
        public InputList<Inputs.Servicev1CacheSettingArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.Servicev1CacheSettingArgs>());
            set => _cacheSettings = value;
        }

        /// <summary>
        /// Description field for the service. Default `Managed by Terraform`
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.Servicev1ConditionArgs>? _conditions;
        public InputList<Inputs.Servicev1ConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.Servicev1ConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The default hostname
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for requests
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.Servicev1DictionaryArgs>? _dictionaries;
        public InputList<Inputs.Servicev1DictionaryArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.Servicev1DictionaryArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.Servicev1DirectorArgs>? _directors;
        public InputList<Inputs.Servicev1DirectorArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.Servicev1DirectorArgs>());
            set => _directors = value;
        }

        [Input("domains", required: true)]
        private InputList<Inputs.Servicev1DomainArgs>? _domains;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        public InputList<Inputs.Servicev1DomainArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.Servicev1DomainArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.Servicev1DynamicsnippetArgs>? _dynamicsnippets;
        public InputList<Inputs.Servicev1DynamicsnippetArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.Servicev1DynamicsnippetArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gcsloggings")]
        private InputList<Inputs.Servicev1GcsloggingArgs>? _gcsloggings;
        public InputList<Inputs.Servicev1GcsloggingArgs> Gcsloggings
        {
            get => _gcsloggings ?? (_gcsloggings = new InputList<Inputs.Servicev1GcsloggingArgs>());
            set => _gcsloggings = value;
        }

        [Input("gzips")]
        private InputList<Inputs.Servicev1GzipArgs>? _gzips;
        public InputList<Inputs.Servicev1GzipArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.Servicev1GzipArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.Servicev1HeaderArgs>? _headers;
        public InputList<Inputs.Servicev1HeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.Servicev1HeaderArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.Servicev1HealthcheckArgs>? _healthchecks;
        public InputList<Inputs.Servicev1HealthcheckArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.Servicev1HealthcheckArgs>());
            set => _healthchecks = value;
        }

        [Input("httpsloggings")]
        private InputList<Inputs.Servicev1HttpsloggingArgs>? _httpsloggings;
        public InputList<Inputs.Servicev1HttpsloggingArgs> Httpsloggings
        {
            get => _httpsloggings ?? (_httpsloggings = new InputList<Inputs.Servicev1HttpsloggingArgs>());
            set => _httpsloggings = value;
        }

        [Input("logentries")]
        private InputList<Inputs.Servicev1LogentryArgs>? _logentries;
        public InputList<Inputs.Servicev1LogentryArgs> Logentries
        {
            get => _logentries ?? (_logentries = new InputList<Inputs.Servicev1LogentryArgs>());
            set => _logentries = value;
        }

        [Input("loggingCloudfiles")]
        private InputList<Inputs.Servicev1LoggingCloudfileArgs>? _loggingCloudfiles;
        public InputList<Inputs.Servicev1LoggingCloudfileArgs> LoggingCloudfiles
        {
            get => _loggingCloudfiles ?? (_loggingCloudfiles = new InputList<Inputs.Servicev1LoggingCloudfileArgs>());
            set => _loggingCloudfiles = value;
        }

        [Input("loggingDatadogs")]
        private InputList<Inputs.Servicev1LoggingDatadogArgs>? _loggingDatadogs;
        public InputList<Inputs.Servicev1LoggingDatadogArgs> LoggingDatadogs
        {
            get => _loggingDatadogs ?? (_loggingDatadogs = new InputList<Inputs.Servicev1LoggingDatadogArgs>());
            set => _loggingDatadogs = value;
        }

        [Input("loggingDigitaloceans")]
        private InputList<Inputs.Servicev1LoggingDigitaloceanArgs>? _loggingDigitaloceans;
        public InputList<Inputs.Servicev1LoggingDigitaloceanArgs> LoggingDigitaloceans
        {
            get => _loggingDigitaloceans ?? (_loggingDigitaloceans = new InputList<Inputs.Servicev1LoggingDigitaloceanArgs>());
            set => _loggingDigitaloceans = value;
        }

        [Input("loggingElasticsearches")]
        private InputList<Inputs.Servicev1LoggingElasticsearchArgs>? _loggingElasticsearches;
        public InputList<Inputs.Servicev1LoggingElasticsearchArgs> LoggingElasticsearches
        {
            get => _loggingElasticsearches ?? (_loggingElasticsearches = new InputList<Inputs.Servicev1LoggingElasticsearchArgs>());
            set => _loggingElasticsearches = value;
        }

        [Input("loggingFtps")]
        private InputList<Inputs.Servicev1LoggingFtpArgs>? _loggingFtps;
        public InputList<Inputs.Servicev1LoggingFtpArgs> LoggingFtps
        {
            get => _loggingFtps ?? (_loggingFtps = new InputList<Inputs.Servicev1LoggingFtpArgs>());
            set => _loggingFtps = value;
        }

        [Input("loggingGooglepubsubs")]
        private InputList<Inputs.Servicev1LoggingGooglepubsubArgs>? _loggingGooglepubsubs;
        public InputList<Inputs.Servicev1LoggingGooglepubsubArgs> LoggingGooglepubsubs
        {
            get => _loggingGooglepubsubs ?? (_loggingGooglepubsubs = new InputList<Inputs.Servicev1LoggingGooglepubsubArgs>());
            set => _loggingGooglepubsubs = value;
        }

        [Input("loggingHeroku")]
        private InputList<Inputs.Servicev1LoggingHerokuArgs>? _loggingHeroku;
        public InputList<Inputs.Servicev1LoggingHerokuArgs> LoggingHeroku
        {
            get => _loggingHeroku ?? (_loggingHeroku = new InputList<Inputs.Servicev1LoggingHerokuArgs>());
            set => _loggingHeroku = value;
        }

        [Input("loggingHoneycombs")]
        private InputList<Inputs.Servicev1LoggingHoneycombArgs>? _loggingHoneycombs;
        public InputList<Inputs.Servicev1LoggingHoneycombArgs> LoggingHoneycombs
        {
            get => _loggingHoneycombs ?? (_loggingHoneycombs = new InputList<Inputs.Servicev1LoggingHoneycombArgs>());
            set => _loggingHoneycombs = value;
        }

        [Input("loggingKafkas")]
        private InputList<Inputs.Servicev1LoggingKafkaArgs>? _loggingKafkas;
        public InputList<Inputs.Servicev1LoggingKafkaArgs> LoggingKafkas
        {
            get => _loggingKafkas ?? (_loggingKafkas = new InputList<Inputs.Servicev1LoggingKafkaArgs>());
            set => _loggingKafkas = value;
        }

        [Input("loggingKineses")]
        private InputList<Inputs.Servicev1LoggingKineseArgs>? _loggingKineses;
        public InputList<Inputs.Servicev1LoggingKineseArgs> LoggingKineses
        {
            get => _loggingKineses ?? (_loggingKineses = new InputList<Inputs.Servicev1LoggingKineseArgs>());
            set => _loggingKineses = value;
        }

        [Input("loggingLogglies")]
        private InputList<Inputs.Servicev1LoggingLogglyArgs>? _loggingLogglies;
        public InputList<Inputs.Servicev1LoggingLogglyArgs> LoggingLogglies
        {
            get => _loggingLogglies ?? (_loggingLogglies = new InputList<Inputs.Servicev1LoggingLogglyArgs>());
            set => _loggingLogglies = value;
        }

        [Input("loggingLogshuttles")]
        private InputList<Inputs.Servicev1LoggingLogshuttleArgs>? _loggingLogshuttles;
        public InputList<Inputs.Servicev1LoggingLogshuttleArgs> LoggingLogshuttles
        {
            get => _loggingLogshuttles ?? (_loggingLogshuttles = new InputList<Inputs.Servicev1LoggingLogshuttleArgs>());
            set => _loggingLogshuttles = value;
        }

        [Input("loggingNewrelics")]
        private InputList<Inputs.Servicev1LoggingNewrelicArgs>? _loggingNewrelics;
        public InputList<Inputs.Servicev1LoggingNewrelicArgs> LoggingNewrelics
        {
            get => _loggingNewrelics ?? (_loggingNewrelics = new InputList<Inputs.Servicev1LoggingNewrelicArgs>());
            set => _loggingNewrelics = value;
        }

        [Input("loggingOpenstacks")]
        private InputList<Inputs.Servicev1LoggingOpenstackArgs>? _loggingOpenstacks;
        public InputList<Inputs.Servicev1LoggingOpenstackArgs> LoggingOpenstacks
        {
            get => _loggingOpenstacks ?? (_loggingOpenstacks = new InputList<Inputs.Servicev1LoggingOpenstackArgs>());
            set => _loggingOpenstacks = value;
        }

        [Input("loggingScalyrs")]
        private InputList<Inputs.Servicev1LoggingScalyrArgs>? _loggingScalyrs;
        public InputList<Inputs.Servicev1LoggingScalyrArgs> LoggingScalyrs
        {
            get => _loggingScalyrs ?? (_loggingScalyrs = new InputList<Inputs.Servicev1LoggingScalyrArgs>());
            set => _loggingScalyrs = value;
        }

        [Input("loggingSftps")]
        private InputList<Inputs.Servicev1LoggingSftpArgs>? _loggingSftps;
        public InputList<Inputs.Servicev1LoggingSftpArgs> LoggingSftps
        {
            get => _loggingSftps ?? (_loggingSftps = new InputList<Inputs.Servicev1LoggingSftpArgs>());
            set => _loggingSftps = value;
        }

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("papertrails")]
        private InputList<Inputs.Servicev1PapertrailArgs>? _papertrails;
        public InputList<Inputs.Servicev1PapertrailArgs> Papertrails
        {
            get => _papertrails ?? (_papertrails = new InputList<Inputs.Servicev1PapertrailArgs>());
            set => _papertrails = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.Servicev1RequestSettingArgs>? _requestSettings;
        public InputList<Inputs.Servicev1RequestSettingArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.Servicev1RequestSettingArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.Servicev1ResponseObjectArgs>? _responseObjects;
        public InputList<Inputs.Servicev1ResponseObjectArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.Servicev1ResponseObjectArgs>());
            set => _responseObjects = value;
        }

        [Input("s3loggings")]
        private InputList<Inputs.Servicev1S3loggingArgs>? _s3loggings;
        public InputList<Inputs.Servicev1S3loggingArgs> S3loggings
        {
            get => _s3loggings ?? (_s3loggings = new InputList<Inputs.Servicev1S3loggingArgs>());
            set => _s3loggings = value;
        }

        [Input("snippets")]
        private InputList<Inputs.Servicev1SnippetArgs>? _snippets;
        public InputList<Inputs.Servicev1SnippetArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.Servicev1SnippetArgs>());
            set => _snippets = value;
        }

        [Input("splunks")]
        private InputList<Inputs.Servicev1SplunkArgs>? _splunks;
        public InputList<Inputs.Servicev1SplunkArgs> Splunks
        {
            get => _splunks ?? (_splunks = new InputList<Inputs.Servicev1SplunkArgs>());
            set => _splunks = value;
        }

        [Input("sumologics")]
        private InputList<Inputs.Servicev1SumologicArgs>? _sumologics;
        public InputList<Inputs.Servicev1SumologicArgs> Sumologics
        {
            get => _sumologics ?? (_sumologics = new InputList<Inputs.Servicev1SumologicArgs>());
            set => _sumologics = value;
        }

        [Input("syslogs")]
        private InputList<Inputs.Servicev1SyslogArgs>? _syslogs;
        public InputList<Inputs.Servicev1SyslogArgs> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<Inputs.Servicev1SyslogArgs>());
            set => _syslogs = value;
        }

        [Input("vcls")]
        private InputList<Inputs.Servicev1VclArgs>? _vcls;
        public InputList<Inputs.Servicev1VclArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.Servicev1VclArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        [Input("waf")]
        public Input<Inputs.Servicev1WafArgs>? Waf { get; set; }

        public Servicev1Args()
        {
        }
    }

    public sealed class Servicev1State : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.Servicev1AclGetArgs>? _acls;
        public InputList<Inputs.Servicev1AclGetArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.Servicev1AclGetArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        /// <summary>
        /// The currently active version of your Fastly Service
        /// </summary>
        [Input("activeVersion")]
        public Input<int>? ActiveVersion { get; set; }

        [Input("backends")]
        private InputList<Inputs.Servicev1BackendGetArgs>? _backends;
        public InputList<Inputs.Servicev1BackendGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.Servicev1BackendGetArgs>());
            set => _backends = value;
        }

        [Input("bigqueryloggings")]
        private InputList<Inputs.Servicev1BigqueryloggingGetArgs>? _bigqueryloggings;
        public InputList<Inputs.Servicev1BigqueryloggingGetArgs> Bigqueryloggings
        {
            get => _bigqueryloggings ?? (_bigqueryloggings = new InputList<Inputs.Servicev1BigqueryloggingGetArgs>());
            set => _bigqueryloggings = value;
        }

        [Input("blobstorageloggings")]
        private InputList<Inputs.Servicev1BlobstorageloggingGetArgs>? _blobstorageloggings;
        public InputList<Inputs.Servicev1BlobstorageloggingGetArgs> Blobstorageloggings
        {
            get => _blobstorageloggings ?? (_blobstorageloggings = new InputList<Inputs.Servicev1BlobstorageloggingGetArgs>());
            set => _blobstorageloggings = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.Servicev1CacheSettingGetArgs>? _cacheSettings;
        public InputList<Inputs.Servicev1CacheSettingGetArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.Servicev1CacheSettingGetArgs>());
            set => _cacheSettings = value;
        }

        /// <summary>
        /// The latest cloned version by the provider
        /// </summary>
        [Input("clonedVersion")]
        public Input<int>? ClonedVersion { get; set; }

        /// <summary>
        /// Description field for the service. Default `Managed by Terraform`
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.Servicev1ConditionGetArgs>? _conditions;
        public InputList<Inputs.Servicev1ConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.Servicev1ConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The default hostname
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for requests
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.Servicev1DictionaryGetArgs>? _dictionaries;
        public InputList<Inputs.Servicev1DictionaryGetArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.Servicev1DictionaryGetArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.Servicev1DirectorGetArgs>? _directors;
        public InputList<Inputs.Servicev1DirectorGetArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.Servicev1DirectorGetArgs>());
            set => _directors = value;
        }

        [Input("domains")]
        private InputList<Inputs.Servicev1DomainGetArgs>? _domains;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        public InputList<Inputs.Servicev1DomainGetArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.Servicev1DomainGetArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.Servicev1DynamicsnippetGetArgs>? _dynamicsnippets;
        public InputList<Inputs.Servicev1DynamicsnippetGetArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.Servicev1DynamicsnippetGetArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gcsloggings")]
        private InputList<Inputs.Servicev1GcsloggingGetArgs>? _gcsloggings;
        public InputList<Inputs.Servicev1GcsloggingGetArgs> Gcsloggings
        {
            get => _gcsloggings ?? (_gcsloggings = new InputList<Inputs.Servicev1GcsloggingGetArgs>());
            set => _gcsloggings = value;
        }

        [Input("gzips")]
        private InputList<Inputs.Servicev1GzipGetArgs>? _gzips;
        public InputList<Inputs.Servicev1GzipGetArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.Servicev1GzipGetArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.Servicev1HeaderGetArgs>? _headers;
        public InputList<Inputs.Servicev1HeaderGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.Servicev1HeaderGetArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.Servicev1HealthcheckGetArgs>? _healthchecks;
        public InputList<Inputs.Servicev1HealthcheckGetArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.Servicev1HealthcheckGetArgs>());
            set => _healthchecks = value;
        }

        [Input("httpsloggings")]
        private InputList<Inputs.Servicev1HttpsloggingGetArgs>? _httpsloggings;
        public InputList<Inputs.Servicev1HttpsloggingGetArgs> Httpsloggings
        {
            get => _httpsloggings ?? (_httpsloggings = new InputList<Inputs.Servicev1HttpsloggingGetArgs>());
            set => _httpsloggings = value;
        }

        [Input("logentries")]
        private InputList<Inputs.Servicev1LogentryGetArgs>? _logentries;
        public InputList<Inputs.Servicev1LogentryGetArgs> Logentries
        {
            get => _logentries ?? (_logentries = new InputList<Inputs.Servicev1LogentryGetArgs>());
            set => _logentries = value;
        }

        [Input("loggingCloudfiles")]
        private InputList<Inputs.Servicev1LoggingCloudfileGetArgs>? _loggingCloudfiles;
        public InputList<Inputs.Servicev1LoggingCloudfileGetArgs> LoggingCloudfiles
        {
            get => _loggingCloudfiles ?? (_loggingCloudfiles = new InputList<Inputs.Servicev1LoggingCloudfileGetArgs>());
            set => _loggingCloudfiles = value;
        }

        [Input("loggingDatadogs")]
        private InputList<Inputs.Servicev1LoggingDatadogGetArgs>? _loggingDatadogs;
        public InputList<Inputs.Servicev1LoggingDatadogGetArgs> LoggingDatadogs
        {
            get => _loggingDatadogs ?? (_loggingDatadogs = new InputList<Inputs.Servicev1LoggingDatadogGetArgs>());
            set => _loggingDatadogs = value;
        }

        [Input("loggingDigitaloceans")]
        private InputList<Inputs.Servicev1LoggingDigitaloceanGetArgs>? _loggingDigitaloceans;
        public InputList<Inputs.Servicev1LoggingDigitaloceanGetArgs> LoggingDigitaloceans
        {
            get => _loggingDigitaloceans ?? (_loggingDigitaloceans = new InputList<Inputs.Servicev1LoggingDigitaloceanGetArgs>());
            set => _loggingDigitaloceans = value;
        }

        [Input("loggingElasticsearches")]
        private InputList<Inputs.Servicev1LoggingElasticsearchGetArgs>? _loggingElasticsearches;
        public InputList<Inputs.Servicev1LoggingElasticsearchGetArgs> LoggingElasticsearches
        {
            get => _loggingElasticsearches ?? (_loggingElasticsearches = new InputList<Inputs.Servicev1LoggingElasticsearchGetArgs>());
            set => _loggingElasticsearches = value;
        }

        [Input("loggingFtps")]
        private InputList<Inputs.Servicev1LoggingFtpGetArgs>? _loggingFtps;
        public InputList<Inputs.Servicev1LoggingFtpGetArgs> LoggingFtps
        {
            get => _loggingFtps ?? (_loggingFtps = new InputList<Inputs.Servicev1LoggingFtpGetArgs>());
            set => _loggingFtps = value;
        }

        [Input("loggingGooglepubsubs")]
        private InputList<Inputs.Servicev1LoggingGooglepubsubGetArgs>? _loggingGooglepubsubs;
        public InputList<Inputs.Servicev1LoggingGooglepubsubGetArgs> LoggingGooglepubsubs
        {
            get => _loggingGooglepubsubs ?? (_loggingGooglepubsubs = new InputList<Inputs.Servicev1LoggingGooglepubsubGetArgs>());
            set => _loggingGooglepubsubs = value;
        }

        [Input("loggingHeroku")]
        private InputList<Inputs.Servicev1LoggingHerokuGetArgs>? _loggingHeroku;
        public InputList<Inputs.Servicev1LoggingHerokuGetArgs> LoggingHeroku
        {
            get => _loggingHeroku ?? (_loggingHeroku = new InputList<Inputs.Servicev1LoggingHerokuGetArgs>());
            set => _loggingHeroku = value;
        }

        [Input("loggingHoneycombs")]
        private InputList<Inputs.Servicev1LoggingHoneycombGetArgs>? _loggingHoneycombs;
        public InputList<Inputs.Servicev1LoggingHoneycombGetArgs> LoggingHoneycombs
        {
            get => _loggingHoneycombs ?? (_loggingHoneycombs = new InputList<Inputs.Servicev1LoggingHoneycombGetArgs>());
            set => _loggingHoneycombs = value;
        }

        [Input("loggingKafkas")]
        private InputList<Inputs.Servicev1LoggingKafkaGetArgs>? _loggingKafkas;
        public InputList<Inputs.Servicev1LoggingKafkaGetArgs> LoggingKafkas
        {
            get => _loggingKafkas ?? (_loggingKafkas = new InputList<Inputs.Servicev1LoggingKafkaGetArgs>());
            set => _loggingKafkas = value;
        }

        [Input("loggingKineses")]
        private InputList<Inputs.Servicev1LoggingKineseGetArgs>? _loggingKineses;
        public InputList<Inputs.Servicev1LoggingKineseGetArgs> LoggingKineses
        {
            get => _loggingKineses ?? (_loggingKineses = new InputList<Inputs.Servicev1LoggingKineseGetArgs>());
            set => _loggingKineses = value;
        }

        [Input("loggingLogglies")]
        private InputList<Inputs.Servicev1LoggingLogglyGetArgs>? _loggingLogglies;
        public InputList<Inputs.Servicev1LoggingLogglyGetArgs> LoggingLogglies
        {
            get => _loggingLogglies ?? (_loggingLogglies = new InputList<Inputs.Servicev1LoggingLogglyGetArgs>());
            set => _loggingLogglies = value;
        }

        [Input("loggingLogshuttles")]
        private InputList<Inputs.Servicev1LoggingLogshuttleGetArgs>? _loggingLogshuttles;
        public InputList<Inputs.Servicev1LoggingLogshuttleGetArgs> LoggingLogshuttles
        {
            get => _loggingLogshuttles ?? (_loggingLogshuttles = new InputList<Inputs.Servicev1LoggingLogshuttleGetArgs>());
            set => _loggingLogshuttles = value;
        }

        [Input("loggingNewrelics")]
        private InputList<Inputs.Servicev1LoggingNewrelicGetArgs>? _loggingNewrelics;
        public InputList<Inputs.Servicev1LoggingNewrelicGetArgs> LoggingNewrelics
        {
            get => _loggingNewrelics ?? (_loggingNewrelics = new InputList<Inputs.Servicev1LoggingNewrelicGetArgs>());
            set => _loggingNewrelics = value;
        }

        [Input("loggingOpenstacks")]
        private InputList<Inputs.Servicev1LoggingOpenstackGetArgs>? _loggingOpenstacks;
        public InputList<Inputs.Servicev1LoggingOpenstackGetArgs> LoggingOpenstacks
        {
            get => _loggingOpenstacks ?? (_loggingOpenstacks = new InputList<Inputs.Servicev1LoggingOpenstackGetArgs>());
            set => _loggingOpenstacks = value;
        }

        [Input("loggingScalyrs")]
        private InputList<Inputs.Servicev1LoggingScalyrGetArgs>? _loggingScalyrs;
        public InputList<Inputs.Servicev1LoggingScalyrGetArgs> LoggingScalyrs
        {
            get => _loggingScalyrs ?? (_loggingScalyrs = new InputList<Inputs.Servicev1LoggingScalyrGetArgs>());
            set => _loggingScalyrs = value;
        }

        [Input("loggingSftps")]
        private InputList<Inputs.Servicev1LoggingSftpGetArgs>? _loggingSftps;
        public InputList<Inputs.Servicev1LoggingSftpGetArgs> LoggingSftps
        {
            get => _loggingSftps ?? (_loggingSftps = new InputList<Inputs.Servicev1LoggingSftpGetArgs>());
            set => _loggingSftps = value;
        }

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("papertrails")]
        private InputList<Inputs.Servicev1PapertrailGetArgs>? _papertrails;
        public InputList<Inputs.Servicev1PapertrailGetArgs> Papertrails
        {
            get => _papertrails ?? (_papertrails = new InputList<Inputs.Servicev1PapertrailGetArgs>());
            set => _papertrails = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.Servicev1RequestSettingGetArgs>? _requestSettings;
        public InputList<Inputs.Servicev1RequestSettingGetArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.Servicev1RequestSettingGetArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.Servicev1ResponseObjectGetArgs>? _responseObjects;
        public InputList<Inputs.Servicev1ResponseObjectGetArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.Servicev1ResponseObjectGetArgs>());
            set => _responseObjects = value;
        }

        [Input("s3loggings")]
        private InputList<Inputs.Servicev1S3loggingGetArgs>? _s3loggings;
        public InputList<Inputs.Servicev1S3loggingGetArgs> S3loggings
        {
            get => _s3loggings ?? (_s3loggings = new InputList<Inputs.Servicev1S3loggingGetArgs>());
            set => _s3loggings = value;
        }

        [Input("snippets")]
        private InputList<Inputs.Servicev1SnippetGetArgs>? _snippets;
        public InputList<Inputs.Servicev1SnippetGetArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.Servicev1SnippetGetArgs>());
            set => _snippets = value;
        }

        [Input("splunks")]
        private InputList<Inputs.Servicev1SplunkGetArgs>? _splunks;
        public InputList<Inputs.Servicev1SplunkGetArgs> Splunks
        {
            get => _splunks ?? (_splunks = new InputList<Inputs.Servicev1SplunkGetArgs>());
            set => _splunks = value;
        }

        [Input("sumologics")]
        private InputList<Inputs.Servicev1SumologicGetArgs>? _sumologics;
        public InputList<Inputs.Servicev1SumologicGetArgs> Sumologics
        {
            get => _sumologics ?? (_sumologics = new InputList<Inputs.Servicev1SumologicGetArgs>());
            set => _sumologics = value;
        }

        [Input("syslogs")]
        private InputList<Inputs.Servicev1SyslogGetArgs>? _syslogs;
        public InputList<Inputs.Servicev1SyslogGetArgs> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<Inputs.Servicev1SyslogGetArgs>());
            set => _syslogs = value;
        }

        [Input("vcls")]
        private InputList<Inputs.Servicev1VclGetArgs>? _vcls;
        public InputList<Inputs.Servicev1VclGetArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.Servicev1VclGetArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        [Input("waf")]
        public Input<Inputs.Servicev1WafGetArgs>? Waf { get; set; }

        public Servicev1State()
        {
        }
    }
}
