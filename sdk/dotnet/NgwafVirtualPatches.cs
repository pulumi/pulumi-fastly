// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Next-Gen WAF Virtual Patch.  Virtual patching
    /// rules block or log requests matching specific vulnerabilities.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demo = new Fastly.Index.NgwafVirtualPatch("demo", new()
    ///     {
    ///         Action = "block",
    ///         Enabled = true,
    ///         VirtualPatchId = "CVE-2017-5638",
    ///         WorkspaceId = demoFastlyNgwafWorkspace.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Next-Gen WAF Virtual Patches can be imported using their workspace and Virtual Patch ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/ngwafVirtualPatches:NgwafVirtualPatches demo &lt;workspace_id&gt;/&lt;virtual_patch_id&gt;
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/ngwafVirtualPatches:NgwafVirtualPatches")]
    public partial class NgwafVirtualPatches : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Action to take when a signal for virtual patch is detected. Accepted values are `Log` and `Block`.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Control for enabling and disabling a virtual patch.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the virtual patch.
        /// </summary>
        [Output("virtualPatchId")]
        public Output<string> VirtualPatchId { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NgwafVirtualPatches resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NgwafVirtualPatches(string name, NgwafVirtualPatchesArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafVirtualPatches:NgwafVirtualPatches", name, args ?? new NgwafVirtualPatchesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NgwafVirtualPatches(string name, Input<string> id, NgwafVirtualPatchesState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafVirtualPatches:NgwafVirtualPatches", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NgwafVirtualPatches resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NgwafVirtualPatches Get(string name, Input<string> id, NgwafVirtualPatchesState? state = null, CustomResourceOptions? options = null)
        {
            return new NgwafVirtualPatches(name, id, state, options);
        }
    }

    public sealed class NgwafVirtualPatchesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to take when a signal for virtual patch is detected. Accepted values are `Log` and `Block`.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Control for enabling and disabling a virtual patch.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The ID of the virtual patch.
        /// </summary>
        [Input("virtualPatchId", required: true)]
        public Input<string> VirtualPatchId { get; set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public NgwafVirtualPatchesArgs()
        {
        }
        public static new NgwafVirtualPatchesArgs Empty => new NgwafVirtualPatchesArgs();
    }

    public sealed class NgwafVirtualPatchesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to take when a signal for virtual patch is detected. Accepted values are `Log` and `Block`.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Control for enabling and disabling a virtual patch.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The ID of the virtual patch.
        /// </summary>
        [Input("virtualPatchId")]
        public Input<string>? VirtualPatchId { get; set; }

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public NgwafVirtualPatchesState()
        {
        }
        public static new NgwafVirtualPatchesState Empty => new NgwafVirtualPatchesState();
    }
}
