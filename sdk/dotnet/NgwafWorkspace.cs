// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Next-Gen WAF Workspace, representing a container for
    /// rules, signals, and various other resources that are offered by the
    /// Next-Gen WAF product.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ## Import
    /// 
    /// Fastly Next-Gen WAF Workspaces can be imported using their workspace ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/ngwafWorkspace:NgwafWorkspace demo xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/ngwafWorkspace:NgwafWorkspace")]
    public partial class NgwafWorkspace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
        /// </summary>
        [Output("attackSignalThresholds")]
        public Output<Outputs.NgwafWorkspaceAttackSignalThresholds> AttackSignalThresholds { get; private set; } = null!;

        /// <summary>
        /// Specifies the request headers containing the client IP address. Maximum of 10 header names.
        /// </summary>
        [Output("clientIpHeaders")]
        public Output<ImmutableArray<string>> ClientIpHeaders { get; private set; } = null!;

        /// <summary>
        /// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
        /// </summary>
        [Output("defaultBlockingResponseCode")]
        public Output<int?> DefaultBlockingResponseCode { get; private set; } = null!;

        /// <summary>
        /// The description of the workspace
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Agents will anonymize IP addresses according to the option selected. Accepted value is `Hashed`.
        /// </summary>
        [Output("ipAnonymization")]
        public Output<string?> IpAnonymization { get; private set; } = null!;

        /// <summary>
        /// The operation mode of the workspace. Accepted values are `Off`, `Block`, and `Log`.
        /// </summary>
        [Output("mode")]
        public Output<string> Mode { get; private set; } = null!;

        /// <summary>
        /// The display name of the workspace.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a NgwafWorkspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NgwafWorkspace(string name, NgwafWorkspaceArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafWorkspace:NgwafWorkspace", name, args ?? new NgwafWorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NgwafWorkspace(string name, Input<string> id, NgwafWorkspaceState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafWorkspace:NgwafWorkspace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NgwafWorkspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NgwafWorkspace Get(string name, Input<string> id, NgwafWorkspaceState? state = null, CustomResourceOptions? options = null)
        {
            return new NgwafWorkspace(name, id, state, options);
        }
    }

    public sealed class NgwafWorkspaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
        /// </summary>
        [Input("attackSignalThresholds", required: true)]
        public Input<Inputs.NgwafWorkspaceAttackSignalThresholdsArgs> AttackSignalThresholds { get; set; } = null!;

        [Input("clientIpHeaders")]
        private InputList<string>? _clientIpHeaders;

        /// <summary>
        /// Specifies the request headers containing the client IP address. Maximum of 10 header names.
        /// </summary>
        public InputList<string> ClientIpHeaders
        {
            get => _clientIpHeaders ?? (_clientIpHeaders = new InputList<string>());
            set => _clientIpHeaders = value;
        }

        /// <summary>
        /// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
        /// </summary>
        [Input("defaultBlockingResponseCode")]
        public Input<int>? DefaultBlockingResponseCode { get; set; }

        /// <summary>
        /// The description of the workspace
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Agents will anonymize IP addresses according to the option selected. Accepted value is `Hashed`.
        /// </summary>
        [Input("ipAnonymization")]
        public Input<string>? IpAnonymization { get; set; }

        /// <summary>
        /// The operation mode of the workspace. Accepted values are `Off`, `Block`, and `Log`.
        /// </summary>
        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        /// <summary>
        /// The display name of the workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public NgwafWorkspaceArgs()
        {
        }
        public static new NgwafWorkspaceArgs Empty => new NgwafWorkspaceArgs();
    }

    public sealed class NgwafWorkspaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
        /// </summary>
        [Input("attackSignalThresholds")]
        public Input<Inputs.NgwafWorkspaceAttackSignalThresholdsGetArgs>? AttackSignalThresholds { get; set; }

        [Input("clientIpHeaders")]
        private InputList<string>? _clientIpHeaders;

        /// <summary>
        /// Specifies the request headers containing the client IP address. Maximum of 10 header names.
        /// </summary>
        public InputList<string> ClientIpHeaders
        {
            get => _clientIpHeaders ?? (_clientIpHeaders = new InputList<string>());
            set => _clientIpHeaders = value;
        }

        /// <summary>
        /// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
        /// </summary>
        [Input("defaultBlockingResponseCode")]
        public Input<int>? DefaultBlockingResponseCode { get; set; }

        /// <summary>
        /// The description of the workspace
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Agents will anonymize IP addresses according to the option selected. Accepted value is `Hashed`.
        /// </summary>
        [Input("ipAnonymization")]
        public Input<string>? IpAnonymization { get; set; }

        /// <summary>
        /// The operation mode of the workspace. Accepted values are `Off`, `Block`, and `Log`.
        /// </summary>
        [Input("mode")]
        public Input<string>? Mode { get; set; }

        /// <summary>
        /// The display name of the workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public NgwafWorkspaceState()
        {
        }
        public static new NgwafWorkspaceState Empty => new NgwafWorkspaceState();
    }
}
