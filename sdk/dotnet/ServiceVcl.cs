// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// ## Import
    /// 
    /// Fastly Services can be imported using their service ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// 
    /// By default, either the active version will be imported, or the latest version if no version is active.
    /// 
    /// Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/serviceVcl:ServiceVcl")]
    public partial class ServiceVcl : global::Pulumi.CustomResource
    {
        [Output("acls")]
        public Output<ImmutableArray<Outputs.ServiceVclAcl>> Acls { get; private set; } = null!;

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but
        /// will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Output("activate")]
        public Output<bool?> Activate { get; private set; } = null!;

        /// <summary>
        /// The currently active version of your Fastly Service
        /// </summary>
        [Output("activeVersion")]
        public Output<int> ActiveVersion { get; private set; } = null!;

        [Output("backends")]
        public Output<ImmutableArray<Outputs.ServiceVclBackend>> Backends { get; private set; } = null!;

        [Output("cacheSettings")]
        public Output<ImmutableArray<Outputs.ServiceVclCacheSetting>> CacheSettings { get; private set; } = null!;

        /// <summary>
        /// The latest cloned version by the provider
        /// </summary>
        [Output("clonedVersion")]
        public Output<int> ClonedVersion { get; private set; } = null!;

        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        [Output("conditions")]
        public Output<ImmutableArray<Outputs.ServiceVclCondition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// The default hostname
        /// </summary>
        [Output("defaultHost")]
        public Output<string?> DefaultHost { get; private set; } = null!;

        /// <summary>
        /// The default Time-to-live (TTL) for requests
        /// </summary>
        [Output("defaultTtl")]
        public Output<int?> DefaultTtl { get; private set; } = null!;

        [Output("dictionaries")]
        public Output<ImmutableArray<Outputs.ServiceVclDictionary>> Dictionaries { get; private set; } = null!;

        [Output("directors")]
        public Output<ImmutableArray<Outputs.ServiceVclDirector>> Directors { get; private set; } = null!;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<Outputs.ServiceVclDomain>> Domains { get; private set; } = null!;

        [Output("dynamicsnippets")]
        public Output<ImmutableArray<Outputs.ServiceVclDynamicsnippet>> Dynamicsnippets { get; private set; } = null!;

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default
        /// `false`
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        [Output("forceRefresh")]
        public Output<bool> ForceRefresh { get; private set; } = null!;

        [Output("gzips")]
        public Output<ImmutableArray<Outputs.ServiceVclGzip>> Gzips { get; private set; } = null!;

        [Output("headers")]
        public Output<ImmutableArray<Outputs.ServiceVclHeader>> Headers { get; private set; } = null!;

        [Output("healthchecks")]
        public Output<ImmutableArray<Outputs.ServiceVclHealthcheck>> Healthchecks { get; private set; } = null!;

        /// <summary>
        /// Enables support for the HTTP/3 (QUIC) protocol
        /// </summary>
        [Output("http3")]
        public Output<bool?> Http3 { get; private set; } = null!;

        [Output("imageOptimizerDefaultSettings")]
        public Output<Outputs.ServiceVclImageOptimizerDefaultSettings?> ImageOptimizerDefaultSettings { get; private set; } = null!;

        /// <summary>
        /// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the
        /// import is finished
        /// </summary>
        [Output("imported")]
        public Output<bool> Imported { get; private set; } = null!;

        [Output("loggingBigqueries")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingBigquery>> LoggingBigqueries { get; private set; } = null!;

        [Output("loggingBlobstorages")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingBlobstorage>> LoggingBlobstorages { get; private set; } = null!;

        [Output("loggingCloudfiles")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingCloudfile>> LoggingCloudfiles { get; private set; } = null!;

        [Output("loggingDatadogs")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingDatadog>> LoggingDatadogs { get; private set; } = null!;

        [Output("loggingDigitaloceans")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingDigitalocean>> LoggingDigitaloceans { get; private set; } = null!;

        [Output("loggingElasticsearches")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingElasticsearch>> LoggingElasticsearches { get; private set; } = null!;

        [Output("loggingFtps")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingFtp>> LoggingFtps { get; private set; } = null!;

        [Output("loggingGcs")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingGc>> LoggingGcs { get; private set; } = null!;

        [Output("loggingGooglepubsubs")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingGooglepubsub>> LoggingGooglepubsubs { get; private set; } = null!;

        [Output("loggingGrafanacloudlogs")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingGrafanacloudlog>> LoggingGrafanacloudlogs { get; private set; } = null!;

        [Output("loggingHerokus")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingHerokus>> LoggingHerokus { get; private set; } = null!;

        [Output("loggingHoneycombs")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingHoneycomb>> LoggingHoneycombs { get; private set; } = null!;

        [Output("loggingHttps")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingHttp>> LoggingHttps { get; private set; } = null!;

        [Output("loggingKafkas")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingKafka>> LoggingKafkas { get; private set; } = null!;

        [Output("loggingKineses")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingKinese>> LoggingKineses { get; private set; } = null!;

        [Output("loggingLogentries")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingLogentry>> LoggingLogentries { get; private set; } = null!;

        [Output("loggingLogglies")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingLoggly>> LoggingLogglies { get; private set; } = null!;

        [Output("loggingLogshuttles")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingLogshuttle>> LoggingLogshuttles { get; private set; } = null!;

        [Output("loggingNewrelicotlps")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingNewrelicotlp>> LoggingNewrelicotlps { get; private set; } = null!;

        [Output("loggingNewrelics")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingNewrelic>> LoggingNewrelics { get; private set; } = null!;

        [Output("loggingOpenstacks")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingOpenstack>> LoggingOpenstacks { get; private set; } = null!;

        [Output("loggingPapertrails")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingPapertrail>> LoggingPapertrails { get; private set; } = null!;

        [Output("loggingS3s")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingS3>> LoggingS3s { get; private set; } = null!;

        [Output("loggingScalyrs")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingScalyr>> LoggingScalyrs { get; private set; } = null!;

        [Output("loggingSftps")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingSftp>> LoggingSftps { get; private set; } = null!;

        [Output("loggingSplunks")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingSplunk>> LoggingSplunks { get; private set; } = null!;

        [Output("loggingSumologics")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingSumologic>> LoggingSumologics { get; private set; } = null!;

        [Output("loggingSyslogs")]
        public Output<ImmutableArray<Outputs.ServiceVclLoggingSyslog>> LoggingSyslogs { get; private set; } = null!;

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("productEnablement")]
        public Output<Outputs.ServiceVclProductEnablement?> ProductEnablement { get; private set; } = null!;

        [Output("rateLimiters")]
        public Output<ImmutableArray<Outputs.ServiceVclRateLimiter>> RateLimiters { get; private set; } = null!;

        [Output("requestSettings")]
        public Output<ImmutableArray<Outputs.ServiceVclRequestSetting>> RequestSettings { get; private set; } = null!;

        [Output("responseObjects")]
        public Output<ImmutableArray<Outputs.ServiceVclResponseObject>> ResponseObjects { get; private set; } = null!;

        [Output("reuse")]
        public Output<bool?> Reuse { get; private set; } = null!;

        [Output("snippets")]
        public Output<ImmutableArray<Outputs.ServiceVclSnippet>> Snippets { get; private set; } = null!;

        /// <summary>
        /// Enables serving a stale object if there is an error
        /// </summary>
        [Output("staleIfError")]
        public Output<bool?> StaleIfError { get; private set; } = null!;

        /// <summary>
        /// The default time-to-live (TTL) for serving the stale object for the version
        /// </summary>
        [Output("staleIfErrorTtl")]
        public Output<int?> StaleIfErrorTtl { get; private set; } = null!;

        [Output("vcls")]
        public Output<ImmutableArray<Outputs.ServiceVclVcl>> Vcls { get; private set; } = null!;

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Output("versionComment")]
        public Output<string?> VersionComment { get; private set; } = null!;

        [Output("waf")]
        public Output<Outputs.ServiceVclWaf?> Waf { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceVcl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceVcl(string name, ServiceVclArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/serviceVcl:ServiceVcl", name, args ?? new ServiceVclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceVcl(string name, Input<string> id, ServiceVclState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/serviceVcl:ServiceVcl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceVcl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceVcl Get(string name, Input<string> id, ServiceVclState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceVcl(name, id, state, options);
        }
    }

    public sealed class ServiceVclArgs : global::Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.ServiceVclAclArgs>? _acls;
        public InputList<Inputs.ServiceVclAclArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.ServiceVclAclArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but
        /// will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        [Input("backends")]
        private InputList<Inputs.ServiceVclBackendArgs>? _backends;
        public InputList<Inputs.ServiceVclBackendArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.ServiceVclBackendArgs>());
            set => _backends = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.ServiceVclCacheSettingArgs>? _cacheSettings;
        public InputList<Inputs.ServiceVclCacheSettingArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.ServiceVclCacheSettingArgs>());
            set => _cacheSettings = value;
        }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.ServiceVclConditionArgs>? _conditions;
        public InputList<Inputs.ServiceVclConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.ServiceVclConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The default hostname
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for requests
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.ServiceVclDictionaryArgs>? _dictionaries;
        public InputList<Inputs.ServiceVclDictionaryArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.ServiceVclDictionaryArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.ServiceVclDirectorArgs>? _directors;
        public InputList<Inputs.ServiceVclDirectorArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.ServiceVclDirectorArgs>());
            set => _directors = value;
        }

        [Input("domains", required: true)]
        private InputList<Inputs.ServiceVclDomainArgs>? _domains;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        public InputList<Inputs.ServiceVclDomainArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.ServiceVclDomainArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.ServiceVclDynamicsnippetArgs>? _dynamicsnippets;
        public InputList<Inputs.ServiceVclDynamicsnippetArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.ServiceVclDynamicsnippetArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default
        /// `false`
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gzips")]
        private InputList<Inputs.ServiceVclGzipArgs>? _gzips;
        public InputList<Inputs.ServiceVclGzipArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.ServiceVclGzipArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.ServiceVclHeaderArgs>? _headers;
        public InputList<Inputs.ServiceVclHeaderArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.ServiceVclHeaderArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.ServiceVclHealthcheckArgs>? _healthchecks;
        public InputList<Inputs.ServiceVclHealthcheckArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.ServiceVclHealthcheckArgs>());
            set => _healthchecks = value;
        }

        /// <summary>
        /// Enables support for the HTTP/3 (QUIC) protocol
        /// </summary>
        [Input("http3")]
        public Input<bool>? Http3 { get; set; }

        [Input("imageOptimizerDefaultSettings")]
        public Input<Inputs.ServiceVclImageOptimizerDefaultSettingsArgs>? ImageOptimizerDefaultSettings { get; set; }

        [Input("loggingBigqueries")]
        private InputList<Inputs.ServiceVclLoggingBigqueryArgs>? _loggingBigqueries;
        public InputList<Inputs.ServiceVclLoggingBigqueryArgs> LoggingBigqueries
        {
            get => _loggingBigqueries ?? (_loggingBigqueries = new InputList<Inputs.ServiceVclLoggingBigqueryArgs>());
            set => _loggingBigqueries = value;
        }

        [Input("loggingBlobstorages")]
        private InputList<Inputs.ServiceVclLoggingBlobstorageArgs>? _loggingBlobstorages;
        public InputList<Inputs.ServiceVclLoggingBlobstorageArgs> LoggingBlobstorages
        {
            get => _loggingBlobstorages ?? (_loggingBlobstorages = new InputList<Inputs.ServiceVclLoggingBlobstorageArgs>());
            set => _loggingBlobstorages = value;
        }

        [Input("loggingCloudfiles")]
        private InputList<Inputs.ServiceVclLoggingCloudfileArgs>? _loggingCloudfiles;
        public InputList<Inputs.ServiceVclLoggingCloudfileArgs> LoggingCloudfiles
        {
            get => _loggingCloudfiles ?? (_loggingCloudfiles = new InputList<Inputs.ServiceVclLoggingCloudfileArgs>());
            set => _loggingCloudfiles = value;
        }

        [Input("loggingDatadogs")]
        private InputList<Inputs.ServiceVclLoggingDatadogArgs>? _loggingDatadogs;
        public InputList<Inputs.ServiceVclLoggingDatadogArgs> LoggingDatadogs
        {
            get => _loggingDatadogs ?? (_loggingDatadogs = new InputList<Inputs.ServiceVclLoggingDatadogArgs>());
            set => _loggingDatadogs = value;
        }

        [Input("loggingDigitaloceans")]
        private InputList<Inputs.ServiceVclLoggingDigitaloceanArgs>? _loggingDigitaloceans;
        public InputList<Inputs.ServiceVclLoggingDigitaloceanArgs> LoggingDigitaloceans
        {
            get => _loggingDigitaloceans ?? (_loggingDigitaloceans = new InputList<Inputs.ServiceVclLoggingDigitaloceanArgs>());
            set => _loggingDigitaloceans = value;
        }

        [Input("loggingElasticsearches")]
        private InputList<Inputs.ServiceVclLoggingElasticsearchArgs>? _loggingElasticsearches;
        public InputList<Inputs.ServiceVclLoggingElasticsearchArgs> LoggingElasticsearches
        {
            get => _loggingElasticsearches ?? (_loggingElasticsearches = new InputList<Inputs.ServiceVclLoggingElasticsearchArgs>());
            set => _loggingElasticsearches = value;
        }

        [Input("loggingFtps")]
        private InputList<Inputs.ServiceVclLoggingFtpArgs>? _loggingFtps;
        public InputList<Inputs.ServiceVclLoggingFtpArgs> LoggingFtps
        {
            get => _loggingFtps ?? (_loggingFtps = new InputList<Inputs.ServiceVclLoggingFtpArgs>());
            set => _loggingFtps = value;
        }

        [Input("loggingGcs")]
        private InputList<Inputs.ServiceVclLoggingGcArgs>? _loggingGcs;
        public InputList<Inputs.ServiceVclLoggingGcArgs> LoggingGcs
        {
            get => _loggingGcs ?? (_loggingGcs = new InputList<Inputs.ServiceVclLoggingGcArgs>());
            set => _loggingGcs = value;
        }

        [Input("loggingGooglepubsubs")]
        private InputList<Inputs.ServiceVclLoggingGooglepubsubArgs>? _loggingGooglepubsubs;
        public InputList<Inputs.ServiceVclLoggingGooglepubsubArgs> LoggingGooglepubsubs
        {
            get => _loggingGooglepubsubs ?? (_loggingGooglepubsubs = new InputList<Inputs.ServiceVclLoggingGooglepubsubArgs>());
            set => _loggingGooglepubsubs = value;
        }

        [Input("loggingGrafanacloudlogs")]
        private InputList<Inputs.ServiceVclLoggingGrafanacloudlogArgs>? _loggingGrafanacloudlogs;
        public InputList<Inputs.ServiceVclLoggingGrafanacloudlogArgs> LoggingGrafanacloudlogs
        {
            get => _loggingGrafanacloudlogs ?? (_loggingGrafanacloudlogs = new InputList<Inputs.ServiceVclLoggingGrafanacloudlogArgs>());
            set => _loggingGrafanacloudlogs = value;
        }

        [Input("loggingHerokus")]
        private InputList<Inputs.ServiceVclLoggingHerokusArgs>? _loggingHerokus;
        public InputList<Inputs.ServiceVclLoggingHerokusArgs> LoggingHerokus
        {
            get => _loggingHerokus ?? (_loggingHerokus = new InputList<Inputs.ServiceVclLoggingHerokusArgs>());
            set => _loggingHerokus = value;
        }

        [Input("loggingHoneycombs")]
        private InputList<Inputs.ServiceVclLoggingHoneycombArgs>? _loggingHoneycombs;
        public InputList<Inputs.ServiceVclLoggingHoneycombArgs> LoggingHoneycombs
        {
            get => _loggingHoneycombs ?? (_loggingHoneycombs = new InputList<Inputs.ServiceVclLoggingHoneycombArgs>());
            set => _loggingHoneycombs = value;
        }

        [Input("loggingHttps")]
        private InputList<Inputs.ServiceVclLoggingHttpArgs>? _loggingHttps;
        public InputList<Inputs.ServiceVclLoggingHttpArgs> LoggingHttps
        {
            get => _loggingHttps ?? (_loggingHttps = new InputList<Inputs.ServiceVclLoggingHttpArgs>());
            set => _loggingHttps = value;
        }

        [Input("loggingKafkas")]
        private InputList<Inputs.ServiceVclLoggingKafkaArgs>? _loggingKafkas;
        public InputList<Inputs.ServiceVclLoggingKafkaArgs> LoggingKafkas
        {
            get => _loggingKafkas ?? (_loggingKafkas = new InputList<Inputs.ServiceVclLoggingKafkaArgs>());
            set => _loggingKafkas = value;
        }

        [Input("loggingKineses")]
        private InputList<Inputs.ServiceVclLoggingKineseArgs>? _loggingKineses;
        public InputList<Inputs.ServiceVclLoggingKineseArgs> LoggingKineses
        {
            get => _loggingKineses ?? (_loggingKineses = new InputList<Inputs.ServiceVclLoggingKineseArgs>());
            set => _loggingKineses = value;
        }

        [Input("loggingLogentries")]
        private InputList<Inputs.ServiceVclLoggingLogentryArgs>? _loggingLogentries;
        public InputList<Inputs.ServiceVclLoggingLogentryArgs> LoggingLogentries
        {
            get => _loggingLogentries ?? (_loggingLogentries = new InputList<Inputs.ServiceVclLoggingLogentryArgs>());
            set => _loggingLogentries = value;
        }

        [Input("loggingLogglies")]
        private InputList<Inputs.ServiceVclLoggingLogglyArgs>? _loggingLogglies;
        public InputList<Inputs.ServiceVclLoggingLogglyArgs> LoggingLogglies
        {
            get => _loggingLogglies ?? (_loggingLogglies = new InputList<Inputs.ServiceVclLoggingLogglyArgs>());
            set => _loggingLogglies = value;
        }

        [Input("loggingLogshuttles")]
        private InputList<Inputs.ServiceVclLoggingLogshuttleArgs>? _loggingLogshuttles;
        public InputList<Inputs.ServiceVclLoggingLogshuttleArgs> LoggingLogshuttles
        {
            get => _loggingLogshuttles ?? (_loggingLogshuttles = new InputList<Inputs.ServiceVclLoggingLogshuttleArgs>());
            set => _loggingLogshuttles = value;
        }

        [Input("loggingNewrelicotlps")]
        private InputList<Inputs.ServiceVclLoggingNewrelicotlpArgs>? _loggingNewrelicotlps;
        public InputList<Inputs.ServiceVclLoggingNewrelicotlpArgs> LoggingNewrelicotlps
        {
            get => _loggingNewrelicotlps ?? (_loggingNewrelicotlps = new InputList<Inputs.ServiceVclLoggingNewrelicotlpArgs>());
            set => _loggingNewrelicotlps = value;
        }

        [Input("loggingNewrelics")]
        private InputList<Inputs.ServiceVclLoggingNewrelicArgs>? _loggingNewrelics;
        public InputList<Inputs.ServiceVclLoggingNewrelicArgs> LoggingNewrelics
        {
            get => _loggingNewrelics ?? (_loggingNewrelics = new InputList<Inputs.ServiceVclLoggingNewrelicArgs>());
            set => _loggingNewrelics = value;
        }

        [Input("loggingOpenstacks")]
        private InputList<Inputs.ServiceVclLoggingOpenstackArgs>? _loggingOpenstacks;
        public InputList<Inputs.ServiceVclLoggingOpenstackArgs> LoggingOpenstacks
        {
            get => _loggingOpenstacks ?? (_loggingOpenstacks = new InputList<Inputs.ServiceVclLoggingOpenstackArgs>());
            set => _loggingOpenstacks = value;
        }

        [Input("loggingPapertrails")]
        private InputList<Inputs.ServiceVclLoggingPapertrailArgs>? _loggingPapertrails;
        public InputList<Inputs.ServiceVclLoggingPapertrailArgs> LoggingPapertrails
        {
            get => _loggingPapertrails ?? (_loggingPapertrails = new InputList<Inputs.ServiceVclLoggingPapertrailArgs>());
            set => _loggingPapertrails = value;
        }

        [Input("loggingS3s")]
        private InputList<Inputs.ServiceVclLoggingS3Args>? _loggingS3s;
        public InputList<Inputs.ServiceVclLoggingS3Args> LoggingS3s
        {
            get => _loggingS3s ?? (_loggingS3s = new InputList<Inputs.ServiceVclLoggingS3Args>());
            set => _loggingS3s = value;
        }

        [Input("loggingScalyrs")]
        private InputList<Inputs.ServiceVclLoggingScalyrArgs>? _loggingScalyrs;
        public InputList<Inputs.ServiceVclLoggingScalyrArgs> LoggingScalyrs
        {
            get => _loggingScalyrs ?? (_loggingScalyrs = new InputList<Inputs.ServiceVclLoggingScalyrArgs>());
            set => _loggingScalyrs = value;
        }

        [Input("loggingSftps")]
        private InputList<Inputs.ServiceVclLoggingSftpArgs>? _loggingSftps;
        public InputList<Inputs.ServiceVclLoggingSftpArgs> LoggingSftps
        {
            get => _loggingSftps ?? (_loggingSftps = new InputList<Inputs.ServiceVclLoggingSftpArgs>());
            set => _loggingSftps = value;
        }

        [Input("loggingSplunks")]
        private InputList<Inputs.ServiceVclLoggingSplunkArgs>? _loggingSplunks;
        public InputList<Inputs.ServiceVclLoggingSplunkArgs> LoggingSplunks
        {
            get => _loggingSplunks ?? (_loggingSplunks = new InputList<Inputs.ServiceVclLoggingSplunkArgs>());
            set => _loggingSplunks = value;
        }

        [Input("loggingSumologics")]
        private InputList<Inputs.ServiceVclLoggingSumologicArgs>? _loggingSumologics;
        public InputList<Inputs.ServiceVclLoggingSumologicArgs> LoggingSumologics
        {
            get => _loggingSumologics ?? (_loggingSumologics = new InputList<Inputs.ServiceVclLoggingSumologicArgs>());
            set => _loggingSumologics = value;
        }

        [Input("loggingSyslogs")]
        private InputList<Inputs.ServiceVclLoggingSyslogArgs>? _loggingSyslogs;
        public InputList<Inputs.ServiceVclLoggingSyslogArgs> LoggingSyslogs
        {
            get => _loggingSyslogs ?? (_loggingSyslogs = new InputList<Inputs.ServiceVclLoggingSyslogArgs>());
            set => _loggingSyslogs = value;
        }

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("productEnablement")]
        public Input<Inputs.ServiceVclProductEnablementArgs>? ProductEnablement { get; set; }

        [Input("rateLimiters")]
        private InputList<Inputs.ServiceVclRateLimiterArgs>? _rateLimiters;
        public InputList<Inputs.ServiceVclRateLimiterArgs> RateLimiters
        {
            get => _rateLimiters ?? (_rateLimiters = new InputList<Inputs.ServiceVclRateLimiterArgs>());
            set => _rateLimiters = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.ServiceVclRequestSettingArgs>? _requestSettings;
        public InputList<Inputs.ServiceVclRequestSettingArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.ServiceVclRequestSettingArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.ServiceVclResponseObjectArgs>? _responseObjects;
        public InputList<Inputs.ServiceVclResponseObjectArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.ServiceVclResponseObjectArgs>());
            set => _responseObjects = value;
        }

        [Input("reuse")]
        public Input<bool>? Reuse { get; set; }

        [Input("snippets")]
        private InputList<Inputs.ServiceVclSnippetArgs>? _snippets;
        public InputList<Inputs.ServiceVclSnippetArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.ServiceVclSnippetArgs>());
            set => _snippets = value;
        }

        /// <summary>
        /// Enables serving a stale object if there is an error
        /// </summary>
        [Input("staleIfError")]
        public Input<bool>? StaleIfError { get; set; }

        /// <summary>
        /// The default time-to-live (TTL) for serving the stale object for the version
        /// </summary>
        [Input("staleIfErrorTtl")]
        public Input<int>? StaleIfErrorTtl { get; set; }

        [Input("vcls")]
        private InputList<Inputs.ServiceVclVclArgs>? _vcls;
        public InputList<Inputs.ServiceVclVclArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.ServiceVclVclArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        [Input("waf")]
        public Input<Inputs.ServiceVclWafArgs>? Waf { get; set; }

        public ServiceVclArgs()
        {
        }
        public static new ServiceVclArgs Empty => new ServiceVclArgs();
    }

    public sealed class ServiceVclState : global::Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.ServiceVclAclGetArgs>? _acls;
        public InputList<Inputs.ServiceVclAclGetArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.ServiceVclAclGetArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but
        /// will not activate it if this is set to `false`. Default `true`
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        /// <summary>
        /// The currently active version of your Fastly Service
        /// </summary>
        [Input("activeVersion")]
        public Input<int>? ActiveVersion { get; set; }

        [Input("backends")]
        private InputList<Inputs.ServiceVclBackendGetArgs>? _backends;
        public InputList<Inputs.ServiceVclBackendGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.ServiceVclBackendGetArgs>());
            set => _backends = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.ServiceVclCacheSettingGetArgs>? _cacheSettings;
        public InputList<Inputs.ServiceVclCacheSettingGetArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.ServiceVclCacheSettingGetArgs>());
            set => _cacheSettings = value;
        }

        /// <summary>
        /// The latest cloned version by the provider
        /// </summary>
        [Input("clonedVersion")]
        public Input<int>? ClonedVersion { get; set; }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.ServiceVclConditionGetArgs>? _conditions;
        public InputList<Inputs.ServiceVclConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.ServiceVclConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The default hostname
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for requests
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.ServiceVclDictionaryGetArgs>? _dictionaries;
        public InputList<Inputs.ServiceVclDictionaryGetArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.ServiceVclDictionaryGetArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.ServiceVclDirectorGetArgs>? _directors;
        public InputList<Inputs.ServiceVclDirectorGetArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.ServiceVclDirectorGetArgs>());
            set => _directors = value;
        }

        [Input("domains")]
        private InputList<Inputs.ServiceVclDomainGetArgs>? _domains;

        /// <summary>
        /// A set of Domain names to serve as entry points for your Service
        /// </summary>
        public InputList<Inputs.ServiceVclDomainGetArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.ServiceVclDomainGetArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.ServiceVclDynamicsnippetGetArgs>? _dynamicsnippets;
        public InputList<Inputs.ServiceVclDynamicsnippetGetArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.ServiceVclDynamicsnippetGetArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default
        /// `false`
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("forceRefresh")]
        public Input<bool>? ForceRefresh { get; set; }

        [Input("gzips")]
        private InputList<Inputs.ServiceVclGzipGetArgs>? _gzips;
        public InputList<Inputs.ServiceVclGzipGetArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.ServiceVclGzipGetArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.ServiceVclHeaderGetArgs>? _headers;
        public InputList<Inputs.ServiceVclHeaderGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.ServiceVclHeaderGetArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.ServiceVclHealthcheckGetArgs>? _healthchecks;
        public InputList<Inputs.ServiceVclHealthcheckGetArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.ServiceVclHealthcheckGetArgs>());
            set => _healthchecks = value;
        }

        /// <summary>
        /// Enables support for the HTTP/3 (QUIC) protocol
        /// </summary>
        [Input("http3")]
        public Input<bool>? Http3 { get; set; }

        [Input("imageOptimizerDefaultSettings")]
        public Input<Inputs.ServiceVclImageOptimizerDefaultSettingsGetArgs>? ImageOptimizerDefaultSettings { get; set; }

        /// <summary>
        /// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the
        /// import is finished
        /// </summary>
        [Input("imported")]
        public Input<bool>? Imported { get; set; }

        [Input("loggingBigqueries")]
        private InputList<Inputs.ServiceVclLoggingBigqueryGetArgs>? _loggingBigqueries;
        public InputList<Inputs.ServiceVclLoggingBigqueryGetArgs> LoggingBigqueries
        {
            get => _loggingBigqueries ?? (_loggingBigqueries = new InputList<Inputs.ServiceVclLoggingBigqueryGetArgs>());
            set => _loggingBigqueries = value;
        }

        [Input("loggingBlobstorages")]
        private InputList<Inputs.ServiceVclLoggingBlobstorageGetArgs>? _loggingBlobstorages;
        public InputList<Inputs.ServiceVclLoggingBlobstorageGetArgs> LoggingBlobstorages
        {
            get => _loggingBlobstorages ?? (_loggingBlobstorages = new InputList<Inputs.ServiceVclLoggingBlobstorageGetArgs>());
            set => _loggingBlobstorages = value;
        }

        [Input("loggingCloudfiles")]
        private InputList<Inputs.ServiceVclLoggingCloudfileGetArgs>? _loggingCloudfiles;
        public InputList<Inputs.ServiceVclLoggingCloudfileGetArgs> LoggingCloudfiles
        {
            get => _loggingCloudfiles ?? (_loggingCloudfiles = new InputList<Inputs.ServiceVclLoggingCloudfileGetArgs>());
            set => _loggingCloudfiles = value;
        }

        [Input("loggingDatadogs")]
        private InputList<Inputs.ServiceVclLoggingDatadogGetArgs>? _loggingDatadogs;
        public InputList<Inputs.ServiceVclLoggingDatadogGetArgs> LoggingDatadogs
        {
            get => _loggingDatadogs ?? (_loggingDatadogs = new InputList<Inputs.ServiceVclLoggingDatadogGetArgs>());
            set => _loggingDatadogs = value;
        }

        [Input("loggingDigitaloceans")]
        private InputList<Inputs.ServiceVclLoggingDigitaloceanGetArgs>? _loggingDigitaloceans;
        public InputList<Inputs.ServiceVclLoggingDigitaloceanGetArgs> LoggingDigitaloceans
        {
            get => _loggingDigitaloceans ?? (_loggingDigitaloceans = new InputList<Inputs.ServiceVclLoggingDigitaloceanGetArgs>());
            set => _loggingDigitaloceans = value;
        }

        [Input("loggingElasticsearches")]
        private InputList<Inputs.ServiceVclLoggingElasticsearchGetArgs>? _loggingElasticsearches;
        public InputList<Inputs.ServiceVclLoggingElasticsearchGetArgs> LoggingElasticsearches
        {
            get => _loggingElasticsearches ?? (_loggingElasticsearches = new InputList<Inputs.ServiceVclLoggingElasticsearchGetArgs>());
            set => _loggingElasticsearches = value;
        }

        [Input("loggingFtps")]
        private InputList<Inputs.ServiceVclLoggingFtpGetArgs>? _loggingFtps;
        public InputList<Inputs.ServiceVclLoggingFtpGetArgs> LoggingFtps
        {
            get => _loggingFtps ?? (_loggingFtps = new InputList<Inputs.ServiceVclLoggingFtpGetArgs>());
            set => _loggingFtps = value;
        }

        [Input("loggingGcs")]
        private InputList<Inputs.ServiceVclLoggingGcGetArgs>? _loggingGcs;
        public InputList<Inputs.ServiceVclLoggingGcGetArgs> LoggingGcs
        {
            get => _loggingGcs ?? (_loggingGcs = new InputList<Inputs.ServiceVclLoggingGcGetArgs>());
            set => _loggingGcs = value;
        }

        [Input("loggingGooglepubsubs")]
        private InputList<Inputs.ServiceVclLoggingGooglepubsubGetArgs>? _loggingGooglepubsubs;
        public InputList<Inputs.ServiceVclLoggingGooglepubsubGetArgs> LoggingGooglepubsubs
        {
            get => _loggingGooglepubsubs ?? (_loggingGooglepubsubs = new InputList<Inputs.ServiceVclLoggingGooglepubsubGetArgs>());
            set => _loggingGooglepubsubs = value;
        }

        [Input("loggingGrafanacloudlogs")]
        private InputList<Inputs.ServiceVclLoggingGrafanacloudlogGetArgs>? _loggingGrafanacloudlogs;
        public InputList<Inputs.ServiceVclLoggingGrafanacloudlogGetArgs> LoggingGrafanacloudlogs
        {
            get => _loggingGrafanacloudlogs ?? (_loggingGrafanacloudlogs = new InputList<Inputs.ServiceVclLoggingGrafanacloudlogGetArgs>());
            set => _loggingGrafanacloudlogs = value;
        }

        [Input("loggingHerokus")]
        private InputList<Inputs.ServiceVclLoggingHerokusGetArgs>? _loggingHerokus;
        public InputList<Inputs.ServiceVclLoggingHerokusGetArgs> LoggingHerokus
        {
            get => _loggingHerokus ?? (_loggingHerokus = new InputList<Inputs.ServiceVclLoggingHerokusGetArgs>());
            set => _loggingHerokus = value;
        }

        [Input("loggingHoneycombs")]
        private InputList<Inputs.ServiceVclLoggingHoneycombGetArgs>? _loggingHoneycombs;
        public InputList<Inputs.ServiceVclLoggingHoneycombGetArgs> LoggingHoneycombs
        {
            get => _loggingHoneycombs ?? (_loggingHoneycombs = new InputList<Inputs.ServiceVclLoggingHoneycombGetArgs>());
            set => _loggingHoneycombs = value;
        }

        [Input("loggingHttps")]
        private InputList<Inputs.ServiceVclLoggingHttpGetArgs>? _loggingHttps;
        public InputList<Inputs.ServiceVclLoggingHttpGetArgs> LoggingHttps
        {
            get => _loggingHttps ?? (_loggingHttps = new InputList<Inputs.ServiceVclLoggingHttpGetArgs>());
            set => _loggingHttps = value;
        }

        [Input("loggingKafkas")]
        private InputList<Inputs.ServiceVclLoggingKafkaGetArgs>? _loggingKafkas;
        public InputList<Inputs.ServiceVclLoggingKafkaGetArgs> LoggingKafkas
        {
            get => _loggingKafkas ?? (_loggingKafkas = new InputList<Inputs.ServiceVclLoggingKafkaGetArgs>());
            set => _loggingKafkas = value;
        }

        [Input("loggingKineses")]
        private InputList<Inputs.ServiceVclLoggingKineseGetArgs>? _loggingKineses;
        public InputList<Inputs.ServiceVclLoggingKineseGetArgs> LoggingKineses
        {
            get => _loggingKineses ?? (_loggingKineses = new InputList<Inputs.ServiceVclLoggingKineseGetArgs>());
            set => _loggingKineses = value;
        }

        [Input("loggingLogentries")]
        private InputList<Inputs.ServiceVclLoggingLogentryGetArgs>? _loggingLogentries;
        public InputList<Inputs.ServiceVclLoggingLogentryGetArgs> LoggingLogentries
        {
            get => _loggingLogentries ?? (_loggingLogentries = new InputList<Inputs.ServiceVclLoggingLogentryGetArgs>());
            set => _loggingLogentries = value;
        }

        [Input("loggingLogglies")]
        private InputList<Inputs.ServiceVclLoggingLogglyGetArgs>? _loggingLogglies;
        public InputList<Inputs.ServiceVclLoggingLogglyGetArgs> LoggingLogglies
        {
            get => _loggingLogglies ?? (_loggingLogglies = new InputList<Inputs.ServiceVclLoggingLogglyGetArgs>());
            set => _loggingLogglies = value;
        }

        [Input("loggingLogshuttles")]
        private InputList<Inputs.ServiceVclLoggingLogshuttleGetArgs>? _loggingLogshuttles;
        public InputList<Inputs.ServiceVclLoggingLogshuttleGetArgs> LoggingLogshuttles
        {
            get => _loggingLogshuttles ?? (_loggingLogshuttles = new InputList<Inputs.ServiceVclLoggingLogshuttleGetArgs>());
            set => _loggingLogshuttles = value;
        }

        [Input("loggingNewrelicotlps")]
        private InputList<Inputs.ServiceVclLoggingNewrelicotlpGetArgs>? _loggingNewrelicotlps;
        public InputList<Inputs.ServiceVclLoggingNewrelicotlpGetArgs> LoggingNewrelicotlps
        {
            get => _loggingNewrelicotlps ?? (_loggingNewrelicotlps = new InputList<Inputs.ServiceVclLoggingNewrelicotlpGetArgs>());
            set => _loggingNewrelicotlps = value;
        }

        [Input("loggingNewrelics")]
        private InputList<Inputs.ServiceVclLoggingNewrelicGetArgs>? _loggingNewrelics;
        public InputList<Inputs.ServiceVclLoggingNewrelicGetArgs> LoggingNewrelics
        {
            get => _loggingNewrelics ?? (_loggingNewrelics = new InputList<Inputs.ServiceVclLoggingNewrelicGetArgs>());
            set => _loggingNewrelics = value;
        }

        [Input("loggingOpenstacks")]
        private InputList<Inputs.ServiceVclLoggingOpenstackGetArgs>? _loggingOpenstacks;
        public InputList<Inputs.ServiceVclLoggingOpenstackGetArgs> LoggingOpenstacks
        {
            get => _loggingOpenstacks ?? (_loggingOpenstacks = new InputList<Inputs.ServiceVclLoggingOpenstackGetArgs>());
            set => _loggingOpenstacks = value;
        }

        [Input("loggingPapertrails")]
        private InputList<Inputs.ServiceVclLoggingPapertrailGetArgs>? _loggingPapertrails;
        public InputList<Inputs.ServiceVclLoggingPapertrailGetArgs> LoggingPapertrails
        {
            get => _loggingPapertrails ?? (_loggingPapertrails = new InputList<Inputs.ServiceVclLoggingPapertrailGetArgs>());
            set => _loggingPapertrails = value;
        }

        [Input("loggingS3s")]
        private InputList<Inputs.ServiceVclLoggingS3GetArgs>? _loggingS3s;
        public InputList<Inputs.ServiceVclLoggingS3GetArgs> LoggingS3s
        {
            get => _loggingS3s ?? (_loggingS3s = new InputList<Inputs.ServiceVclLoggingS3GetArgs>());
            set => _loggingS3s = value;
        }

        [Input("loggingScalyrs")]
        private InputList<Inputs.ServiceVclLoggingScalyrGetArgs>? _loggingScalyrs;
        public InputList<Inputs.ServiceVclLoggingScalyrGetArgs> LoggingScalyrs
        {
            get => _loggingScalyrs ?? (_loggingScalyrs = new InputList<Inputs.ServiceVclLoggingScalyrGetArgs>());
            set => _loggingScalyrs = value;
        }

        [Input("loggingSftps")]
        private InputList<Inputs.ServiceVclLoggingSftpGetArgs>? _loggingSftps;
        public InputList<Inputs.ServiceVclLoggingSftpGetArgs> LoggingSftps
        {
            get => _loggingSftps ?? (_loggingSftps = new InputList<Inputs.ServiceVclLoggingSftpGetArgs>());
            set => _loggingSftps = value;
        }

        [Input("loggingSplunks")]
        private InputList<Inputs.ServiceVclLoggingSplunkGetArgs>? _loggingSplunks;
        public InputList<Inputs.ServiceVclLoggingSplunkGetArgs> LoggingSplunks
        {
            get => _loggingSplunks ?? (_loggingSplunks = new InputList<Inputs.ServiceVclLoggingSplunkGetArgs>());
            set => _loggingSplunks = value;
        }

        [Input("loggingSumologics")]
        private InputList<Inputs.ServiceVclLoggingSumologicGetArgs>? _loggingSumologics;
        public InputList<Inputs.ServiceVclLoggingSumologicGetArgs> LoggingSumologics
        {
            get => _loggingSumologics ?? (_loggingSumologics = new InputList<Inputs.ServiceVclLoggingSumologicGetArgs>());
            set => _loggingSumologics = value;
        }

        [Input("loggingSyslogs")]
        private InputList<Inputs.ServiceVclLoggingSyslogGetArgs>? _loggingSyslogs;
        public InputList<Inputs.ServiceVclLoggingSyslogGetArgs> LoggingSyslogs
        {
            get => _loggingSyslogs ?? (_loggingSyslogs = new InputList<Inputs.ServiceVclLoggingSyslogGetArgs>());
            set => _loggingSyslogs = value;
        }

        /// <summary>
        /// The unique name for the Service to create
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("productEnablement")]
        public Input<Inputs.ServiceVclProductEnablementGetArgs>? ProductEnablement { get; set; }

        [Input("rateLimiters")]
        private InputList<Inputs.ServiceVclRateLimiterGetArgs>? _rateLimiters;
        public InputList<Inputs.ServiceVclRateLimiterGetArgs> RateLimiters
        {
            get => _rateLimiters ?? (_rateLimiters = new InputList<Inputs.ServiceVclRateLimiterGetArgs>());
            set => _rateLimiters = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.ServiceVclRequestSettingGetArgs>? _requestSettings;
        public InputList<Inputs.ServiceVclRequestSettingGetArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.ServiceVclRequestSettingGetArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.ServiceVclResponseObjectGetArgs>? _responseObjects;
        public InputList<Inputs.ServiceVclResponseObjectGetArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.ServiceVclResponseObjectGetArgs>());
            set => _responseObjects = value;
        }

        [Input("reuse")]
        public Input<bool>? Reuse { get; set; }

        [Input("snippets")]
        private InputList<Inputs.ServiceVclSnippetGetArgs>? _snippets;
        public InputList<Inputs.ServiceVclSnippetGetArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.ServiceVclSnippetGetArgs>());
            set => _snippets = value;
        }

        /// <summary>
        /// Enables serving a stale object if there is an error
        /// </summary>
        [Input("staleIfError")]
        public Input<bool>? StaleIfError { get; set; }

        /// <summary>
        /// The default time-to-live (TTL) for serving the stale object for the version
        /// </summary>
        [Input("staleIfErrorTtl")]
        public Input<int>? StaleIfErrorTtl { get; set; }

        [Input("vcls")]
        private InputList<Inputs.ServiceVclVclGetArgs>? _vcls;
        public InputList<Inputs.ServiceVclVclGetArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.ServiceVclVclGetArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        [Input("waf")]
        public Input<Inputs.ServiceVclWafGetArgs>? Waf { get; set; }

        public ServiceVclState()
        {
        }
        public static new ServiceVclState Empty => new ServiceVclState();
    }
}
