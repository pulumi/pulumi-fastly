// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Next-Gen WAF Workspace Rule, scoped to a specific NGWAF workspace.\
    /// These rules define conditions and actions that trigger WAF enforcement at the workspace level.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Fastly.NgwafWorkspace("example", new()
    ///     {
    ///         Name = "example",
    ///         Description = "Test NGWAF Workspace",
    ///         Mode = "block",
    ///         IpAnonymization = "hashed",
    ///         ClientIpHeaders = new[]
    ///         {
    ///             "X-Forwarded-For",
    ///             "X-Real-IP",
    ///         },
    ///         DefaultBlockingResponseCode = 429,
    ///         AttackSignalThresholds = null,
    ///     });
    /// 
    ///     var exampleNgwafWorkspaceRule = new Fastly.NgwafWorkspaceRule("example", new()
    ///     {
    ///         WorkspaceId = example.Id,
    ///         Type = "request",
    ///         Description = "example",
    ///         Enabled = true,
    ///         RequestLogging = "sampled",
    ///         GroupOperator = "all",
    ///         Actions = new[]
    ///         {
    ///             new Fastly.Inputs.NgwafWorkspaceRuleActionArgs
    ///             {
    ///                 Type = "block",
    ///             },
    ///         },
    ///         Conditions = new[]
    ///         {
    ///             new Fastly.Inputs.NgwafWorkspaceRuleConditionArgs
    ///             {
    ///                 Field = "ip",
    ///                 Operator = "equals",
    ///                 Value = "127.0.0.1",
    ///             },
    ///             new Fastly.Inputs.NgwafWorkspaceRuleConditionArgs
    ///             {
    ///                 Field = "path",
    ///                 Operator = "equals",
    ///                 Value = "/login",
    ///             },
    ///             new Fastly.Inputs.NgwafWorkspaceRuleConditionArgs
    ///             {
    ///                 Field = "agent_name",
    ///                 Operator = "equals",
    ///                 Value = "host-001",
    ///             },
    ///         },
    ///         GroupConditions = new[]
    ///         {
    ///             new Fastly.Inputs.NgwafWorkspaceRuleGroupConditionArgs
    ///             {
    ///                 GroupOperator = "all",
    ///                 Conditions = new[]
    ///                 {
    ///                     new Fastly.Inputs.NgwafWorkspaceRuleGroupConditionConditionArgs
    ///                     {
    ///                         Field = "country",
    ///                         Operator = "equals",
    ///                         Value = "AD",
    ///                     },
    ///                     new Fastly.Inputs.NgwafWorkspaceRuleGroupConditionConditionArgs
    ///                     {
    ///                         Field = "method",
    ///                         Operator = "equals",
    ///                         Value = "POST",
    ///                     },
    ///                 },
    ///             },
    ///             new Fastly.Inputs.NgwafWorkspaceRuleGroupConditionArgs
    ///             {
    ///                 GroupOperator = "any",
    ///                 Conditions = new[]
    ///                 {
    ///                     new Fastly.Inputs.NgwafWorkspaceRuleGroupConditionConditionArgs
    ///                     {
    ///                         Field = "protocol_version",
    ///                         Operator = "equals",
    ///                         Value = "HTTP/1.0",
    ///                     },
    ///                     new Fastly.Inputs.NgwafWorkspaceRuleGroupConditionConditionArgs
    ///                     {
    ///                         Field = "method",
    ///                         Operator = "equals",
    ///                         Value = "HEAD",
    ///                     },
    ///                     new Fastly.Inputs.NgwafWorkspaceRuleGroupConditionConditionArgs
    ///                     {
    ///                         Field = "domain",
    ///                         Operator = "equals",
    ///                         Value = "example.com",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Next-Gen WAF workspace rules can be imported using the format `&lt;workspaceID&gt;/&lt;ruleID&gt;`, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/ngwafWorkspaceRule:NgwafWorkspaceRule demo &lt;workspaceID&gt;/&lt;ruleID&gt;
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/ngwafWorkspaceRule:NgwafWorkspaceRule")]
    public partial class NgwafWorkspaceRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of actions to perform when the rule matches.
        /// </summary>
        [Output("actions")]
        public Output<ImmutableArray<Outputs.NgwafWorkspaceRuleAction>> Actions { get; private set; } = null!;

        /// <summary>
        /// Flat list of individual conditions. Each must include `Field`, `Operator`, and `Value`.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.NgwafWorkspaceRuleCondition>> Conditions { get; private set; } = null!;

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the rule is currently enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// List of grouped conditions with nested logic. Each group must define a `GroupOperator` and at least one condition.
        /// </summary>
        [Output("groupConditions")]
        public Output<ImmutableArray<Outputs.NgwafWorkspaceRuleGroupCondition>> GroupConditions { get; private set; } = null!;

        /// <summary>
        /// Logical operator to apply to group conditions. Accepted values are `Any` and `All`.
        /// </summary>
        [Output("groupOperator")]
        public Output<string?> GroupOperator { get; private set; } = null!;

        /// <summary>
        /// Block specifically for rate*limit rules.
        /// </summary>
        [Output("rateLimit")]
        public Output<Outputs.NgwafWorkspaceRuleRateLimit?> RateLimit { get; private set; } = null!;

        /// <summary>
        /// Logging behavior for matching requests. Accepted values are `Sampled` and `None`.
        /// </summary>
        [Output("requestLogging")]
        public Output<string?> RequestLogging { get; private set; } = null!;

        /// <summary>
        /// The type of the rule. Accepted values are `Request`, `Signal`, `RateLimit`, and `TemplatedSignal`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NgwafWorkspaceRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NgwafWorkspaceRule(string name, NgwafWorkspaceRuleArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafWorkspaceRule:NgwafWorkspaceRule", name, args ?? new NgwafWorkspaceRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NgwafWorkspaceRule(string name, Input<string> id, NgwafWorkspaceRuleState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafWorkspaceRule:NgwafWorkspaceRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NgwafWorkspaceRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NgwafWorkspaceRule Get(string name, Input<string> id, NgwafWorkspaceRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new NgwafWorkspaceRule(name, id, state, options);
        }
    }

    public sealed class NgwafWorkspaceRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("actions", required: true)]
        private InputList<Inputs.NgwafWorkspaceRuleActionArgs>? _actions;

        /// <summary>
        /// List of actions to perform when the rule matches.
        /// </summary>
        public InputList<Inputs.NgwafWorkspaceRuleActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.NgwafWorkspaceRuleActionArgs>());
            set => _actions = value;
        }

        [Input("conditions")]
        private InputList<Inputs.NgwafWorkspaceRuleConditionArgs>? _conditions;

        /// <summary>
        /// Flat list of individual conditions. Each must include `Field`, `Operator`, and `Value`.
        /// </summary>
        public InputList<Inputs.NgwafWorkspaceRuleConditionArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.NgwafWorkspaceRuleConditionArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// Whether the rule is currently enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("groupConditions")]
        private InputList<Inputs.NgwafWorkspaceRuleGroupConditionArgs>? _groupConditions;

        /// <summary>
        /// List of grouped conditions with nested logic. Each group must define a `GroupOperator` and at least one condition.
        /// </summary>
        public InputList<Inputs.NgwafWorkspaceRuleGroupConditionArgs> GroupConditions
        {
            get => _groupConditions ?? (_groupConditions = new InputList<Inputs.NgwafWorkspaceRuleGroupConditionArgs>());
            set => _groupConditions = value;
        }

        /// <summary>
        /// Logical operator to apply to group conditions. Accepted values are `Any` and `All`.
        /// </summary>
        [Input("groupOperator")]
        public Input<string>? GroupOperator { get; set; }

        /// <summary>
        /// Block specifically for rate*limit rules.
        /// </summary>
        [Input("rateLimit")]
        public Input<Inputs.NgwafWorkspaceRuleRateLimitArgs>? RateLimit { get; set; }

        /// <summary>
        /// Logging behavior for matching requests. Accepted values are `Sampled` and `None`.
        /// </summary>
        [Input("requestLogging")]
        public Input<string>? RequestLogging { get; set; }

        /// <summary>
        /// The type of the rule. Accepted values are `Request`, `Signal`, `RateLimit`, and `TemplatedSignal`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public NgwafWorkspaceRuleArgs()
        {
        }
        public static new NgwafWorkspaceRuleArgs Empty => new NgwafWorkspaceRuleArgs();
    }

    public sealed class NgwafWorkspaceRuleState : global::Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.NgwafWorkspaceRuleActionGetArgs>? _actions;

        /// <summary>
        /// List of actions to perform when the rule matches.
        /// </summary>
        public InputList<Inputs.NgwafWorkspaceRuleActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.NgwafWorkspaceRuleActionGetArgs>());
            set => _actions = value;
        }

        [Input("conditions")]
        private InputList<Inputs.NgwafWorkspaceRuleConditionGetArgs>? _conditions;

        /// <summary>
        /// Flat list of individual conditions. Each must include `Field`, `Operator`, and `Value`.
        /// </summary>
        public InputList<Inputs.NgwafWorkspaceRuleConditionGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.NgwafWorkspaceRuleConditionGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the rule is currently enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("groupConditions")]
        private InputList<Inputs.NgwafWorkspaceRuleGroupConditionGetArgs>? _groupConditions;

        /// <summary>
        /// List of grouped conditions with nested logic. Each group must define a `GroupOperator` and at least one condition.
        /// </summary>
        public InputList<Inputs.NgwafWorkspaceRuleGroupConditionGetArgs> GroupConditions
        {
            get => _groupConditions ?? (_groupConditions = new InputList<Inputs.NgwafWorkspaceRuleGroupConditionGetArgs>());
            set => _groupConditions = value;
        }

        /// <summary>
        /// Logical operator to apply to group conditions. Accepted values are `Any` and `All`.
        /// </summary>
        [Input("groupOperator")]
        public Input<string>? GroupOperator { get; set; }

        /// <summary>
        /// Block specifically for rate*limit rules.
        /// </summary>
        [Input("rateLimit")]
        public Input<Inputs.NgwafWorkspaceRuleRateLimitGetArgs>? RateLimit { get; set; }

        /// <summary>
        /// Logging behavior for matching requests. Accepted values are `Sampled` and `None`.
        /// </summary>
        [Input("requestLogging")]
        public Input<string>? RequestLogging { get; set; }

        /// <summary>
        /// The type of the rule. Accepted values are `Request`, `Signal`, `RateLimit`, and `TemplatedSignal`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public NgwafWorkspaceRuleState()
        {
        }
        public static new NgwafWorkspaceRuleState Empty => new NgwafWorkspaceRuleState();
    }
}
