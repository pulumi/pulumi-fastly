// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Enables TLS on a domain using a specified custom TLS certificate.
    /// 
    /// &gt; **Note:** The Fastly service must be provisioned _prior_ to enabling TLS on it.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var demoServiceVcl = new Fastly.ServiceVcl("demoServiceVcl", new Fastly.ServiceVclArgs
    ///         {
    ///             Domains = 
    ///             {
    ///                 new Fastly.Inputs.ServiceVclDomainArgs
    ///                 {
    ///                     Name = "example.com",
    ///                 },
    ///             },
    ///             Backends = 
    ///             {
    ///                 new Fastly.Inputs.ServiceVclBackendArgs
    ///                 {
    ///                     Address = "127.0.0.1",
    ///                     Name = "localhost",
    ///                 },
    ///             },
    ///             ForceDestroy = true,
    ///         });
    ///         var demoTlsPrivateKey = new Fastly.TlsPrivateKey("demoTlsPrivateKey", new Fastly.TlsPrivateKeyArgs
    ///         {
    ///             KeyPem = "...",
    ///         });
    ///         var demoTlsCertificate = new Fastly.TlsCertificate("demoTlsCertificate", new Fastly.TlsCertificateArgs
    ///         {
    ///             CertificateBody = "...",
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 demoTlsPrivateKey,
    ///             },
    ///         });
    ///         var test = new Fastly.TlsActivation("test", new Fastly.TlsActivationArgs
    ///         {
    ///             CertificateId = demoTlsCertificate.Id,
    ///             Domain = "example.com",
    ///         }, new CustomResourceOptions
    ///         {
    ///             DependsOn = 
    ///             {
    ///                 demoServiceVcl,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// A TLS activation can be imported using its ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import fastly:index/tlsActivation:TlsActivation demo xxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/tlsActivation:TlsActivation")]
    public partial class TlsActivation : Pulumi.CustomResource
    {
        /// <summary>
        /// ID of certificate to use. Must have the `domain` specified in the certificate's Subject Alternative Names.
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// ID of TLS configuration to be used to terminate TLS traffic, or use the default one if missing.
        /// </summary>
        [Output("configurationId")]
        public Output<string> ConfigurationId { get; private set; } = null!;

        /// <summary>
        /// Time-stamp (GMT) when TLS was enabled.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Domain to enable TLS on. Must be assigned to an existing Fastly Service.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;


        /// <summary>
        /// Create a TlsActivation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsActivation(string name, TlsActivationArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/tlsActivation:TlsActivation", name, args ?? new TlsActivationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsActivation(string name, Input<string> id, TlsActivationState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/tlsActivation:TlsActivation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsActivation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsActivation Get(string name, Input<string> id, TlsActivationState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsActivation(name, id, state, options);
        }
    }

    public sealed class TlsActivationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of certificate to use. Must have the `domain` specified in the certificate's Subject Alternative Names.
        /// </summary>
        [Input("certificateId", required: true)]
        public Input<string> CertificateId { get; set; } = null!;

        /// <summary>
        /// ID of TLS configuration to be used to terminate TLS traffic, or use the default one if missing.
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        /// <summary>
        /// Domain to enable TLS on. Must be assigned to an existing Fastly Service.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        public TlsActivationArgs()
        {
        }
    }

    public sealed class TlsActivationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// ID of certificate to use. Must have the `domain` specified in the certificate's Subject Alternative Names.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// ID of TLS configuration to be used to terminate TLS traffic, or use the default one if missing.
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        /// <summary>
        /// Time-stamp (GMT) when TLS was enabled.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Domain to enable TLS on. Must be assigned to an existing Fastly Service.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        public TlsActivationState()
        {
        }
    }
}
