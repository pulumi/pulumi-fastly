// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    public static class GetTlsConfiguration
    {
        /// <summary>
        /// Use this data source to get the ID of a TLS configuration for use with other resources.
        /// 
        /// &gt; **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
        /// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
        /// with any of the others.
        /// 
        /// &gt; **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTlsConfiguration = Fastly.GetTlsConfiguration.Invoke(new()
        ///     {
        ///         Default = true,
        ///     });
        /// 
        ///     var exampleTlsActivation = new Fastly.TlsActivation("exampleTlsActivation", new()
        ///     {
        ///         ConfigurationId = exampleTlsConfiguration.Apply(getTlsConfigurationResult =&gt; getTlsConfigurationResult.Id),
        ///     });
        /// 
        ///     // ...
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTlsConfigurationResult> InvokeAsync(GetTlsConfigurationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTlsConfigurationResult>("fastly:index/getTlsConfiguration:getTlsConfiguration", args ?? new GetTlsConfigurationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the ID of a TLS configuration for use with other resources.
        /// 
        /// &gt; **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
        /// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
        /// with any of the others.
        /// 
        /// &gt; **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleTlsConfiguration = Fastly.GetTlsConfiguration.Invoke(new()
        ///     {
        ///         Default = true,
        ///     });
        /// 
        ///     var exampleTlsActivation = new Fastly.TlsActivation("exampleTlsActivation", new()
        ///     {
        ///         ConfigurationId = exampleTlsConfiguration.Apply(getTlsConfigurationResult =&gt; getTlsConfigurationResult.Id),
        ///     });
        /// 
        ///     // ...
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTlsConfigurationResult> Invoke(GetTlsConfigurationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTlsConfigurationResult>("fastly:index/getTlsConfiguration:getTlsConfiguration", args ?? new GetTlsConfigurationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsConfigurationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
        /// </summary>
        [Input("default")]
        public bool? Default { get; set; }

        [Input("httpProtocols")]
        private List<string>? _httpProtocols;

        /// <summary>
        /// HTTP protocols available on the TLS configuration.
        /// </summary>
        public List<string> HttpProtocols
        {
            get => _httpProtocols ?? (_httpProtocols = new List<string>());
            set => _httpProtocols = value;
        }

        /// <summary>
        /// ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Custom name of the TLS configuration.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("tlsProtocols")]
        private List<string>? _tlsProtocols;

        /// <summary>
        /// TLS protocols available on the TLS configuration.
        /// </summary>
        public List<string> TlsProtocols
        {
            get => _tlsProtocols ?? (_tlsProtocols = new List<string>());
            set => _tlsProtocols = value;
        }

        /// <summary>
        /// Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
        /// </summary>
        [Input("tlsService")]
        public string? TlsService { get; set; }

        public GetTlsConfigurationArgs()
        {
        }
        public static new GetTlsConfigurationArgs Empty => new GetTlsConfigurationArgs();
    }

    public sealed class GetTlsConfigurationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
        /// </summary>
        [Input("default")]
        public Input<bool>? Default { get; set; }

        [Input("httpProtocols")]
        private InputList<string>? _httpProtocols;

        /// <summary>
        /// HTTP protocols available on the TLS configuration.
        /// </summary>
        public InputList<string> HttpProtocols
        {
            get => _httpProtocols ?? (_httpProtocols = new InputList<string>());
            set => _httpProtocols = value;
        }

        /// <summary>
        /// ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Custom name of the TLS configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tlsProtocols")]
        private InputList<string>? _tlsProtocols;

        /// <summary>
        /// TLS protocols available on the TLS configuration.
        /// </summary>
        public InputList<string> TlsProtocols
        {
            get => _tlsProtocols ?? (_tlsProtocols = new InputList<string>());
            set => _tlsProtocols = value;
        }

        /// <summary>
        /// Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
        /// </summary>
        [Input("tlsService")]
        public Input<string>? TlsService { get; set; }

        public GetTlsConfigurationInvokeArgs()
        {
        }
        public static new GetTlsConfigurationInvokeArgs Empty => new GetTlsConfigurationInvokeArgs();
    }


    [OutputType]
    public sealed class GetTlsConfigurationResult
    {
        /// <summary>
        /// Timestamp (GMT) when the configuration was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
        /// </summary>
        public readonly bool Default;
        /// <summary>
        /// The available DNS addresses that can be used to enable TLS for a domain. DNS must be configured for a domain for TLS handshakes to succeed. If enabling TLS on an apex domain (e.g. `example.com`) you must create four A records (or four AAAA records for IPv6 support) using the displayed global A record's IP addresses with your DNS provider. For subdomains and wildcard domains (e.g. `www.example.com` or `*.example.com`) you will need to create a relevant CNAME record.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTlsConfigurationDnsRecordResult> DnsRecords;
        /// <summary>
        /// HTTP protocols available on the TLS configuration.
        /// </summary>
        public readonly ImmutableArray<string> HttpProtocols;
        /// <summary>
        /// ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Custom name of the TLS configuration.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// TLS protocols available on the TLS configuration.
        /// </summary>
        public readonly ImmutableArray<string> TlsProtocols;
        /// <summary>
        /// Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
        /// </summary>
        public readonly string TlsService;
        /// <summary>
        /// Timestamp (GMT) when the configuration was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetTlsConfigurationResult(
            string createdAt,

            bool @default,

            ImmutableArray<Outputs.GetTlsConfigurationDnsRecordResult> dnsRecords,

            ImmutableArray<string> httpProtocols,

            string id,

            string name,

            ImmutableArray<string> tlsProtocols,

            string tlsService,

            string updatedAt)
        {
            CreatedAt = createdAt;
            Default = @default;
            DnsRecords = dnsRecords;
            HttpProtocols = httpProtocols;
            Id = id;
            Name = name;
            TlsProtocols = tlsProtocols;
            TlsService = tlsService;
            UpdatedAt = updatedAt;
        }
    }
}
