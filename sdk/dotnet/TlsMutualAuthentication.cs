// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// The Mutual TLS API allows for client-to-server authentication using client-side X.509 authentication.
    /// 
    /// The main Mutual Authentication object represents the certificate bundle and other configurations which support Mutual TLS for your domains.
    /// 
    /// Mutual TLS can be added to existing TLS activations to allow for client-to-server authentication. In order to use mutual TLS, you must already have active server-side TLS using either custom certificates or an enabled Fastly-managed subscription.
    /// 
    /// The examples below demonstrate how to use Mutual Authentication along with a TLS Subscription. Refer to the `fastly.TlsSubscription` resource documentation for a deeper explanation of that code.
    /// </summary>
    [FastlyResourceType("fastly:index/tlsMutualAuthentication:TlsMutualAuthentication")]
    public partial class TlsMutualAuthentication : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of TLS Activation IDs
        /// </summary>
        [Output("activationIds")]
        public Output<ImmutableArray<string>> ActivationIds { get; private set; } = null!;

        /// <summary>
        /// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
        /// </summary>
        [Output("certBundle")]
        public Output<string> CertBundle { get; private set; } = null!;

        /// <summary>
        /// Date and time in ISO 8601 format.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `False`).
        /// </summary>
        [Output("enforced")]
        public Output<bool> Enforced { get; private set; } = null!;

        [Output("include")]
        public Output<string?> Include { get; private set; } = null!;

        /// <summary>
        /// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// List of alphanumeric strings identifying TLS activations.
        /// </summary>
        [Output("tlsActivations")]
        public Output<ImmutableArray<string>> TlsActivations { get; private set; } = null!;

        /// <summary>
        /// Date and time in ISO 8601 format.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a TlsMutualAuthentication resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsMutualAuthentication(string name, TlsMutualAuthenticationArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/tlsMutualAuthentication:TlsMutualAuthentication", name, args ?? new TlsMutualAuthenticationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsMutualAuthentication(string name, Input<string> id, TlsMutualAuthenticationState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/tlsMutualAuthentication:TlsMutualAuthentication", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsMutualAuthentication resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsMutualAuthentication Get(string name, Input<string> id, TlsMutualAuthenticationState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsMutualAuthentication(name, id, state, options);
        }
    }

    public sealed class TlsMutualAuthenticationArgs : global::Pulumi.ResourceArgs
    {
        [Input("activationIds")]
        private InputList<string>? _activationIds;

        /// <summary>
        /// List of TLS Activation IDs
        /// </summary>
        public InputList<string> ActivationIds
        {
            get => _activationIds ?? (_activationIds = new InputList<string>());
            set => _activationIds = value;
        }

        /// <summary>
        /// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
        /// </summary>
        [Input("certBundle", required: true)]
        public Input<string> CertBundle { get; set; } = null!;

        /// <summary>
        /// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `False`).
        /// </summary>
        [Input("enforced")]
        public Input<bool>? Enforced { get; set; }

        [Input("include")]
        public Input<string>? Include { get; set; }

        /// <summary>
        /// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TlsMutualAuthenticationArgs()
        {
        }
        public static new TlsMutualAuthenticationArgs Empty => new TlsMutualAuthenticationArgs();
    }

    public sealed class TlsMutualAuthenticationState : global::Pulumi.ResourceArgs
    {
        [Input("activationIds")]
        private InputList<string>? _activationIds;

        /// <summary>
        /// List of TLS Activation IDs
        /// </summary>
        public InputList<string> ActivationIds
        {
            get => _activationIds ?? (_activationIds = new InputList<string>());
            set => _activationIds = value;
        }

        /// <summary>
        /// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
        /// </summary>
        [Input("certBundle")]
        public Input<string>? CertBundle { get; set; }

        /// <summary>
        /// Date and time in ISO 8601 format.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `False`).
        /// </summary>
        [Input("enforced")]
        public Input<bool>? Enforced { get; set; }

        [Input("include")]
        public Input<string>? Include { get; set; }

        /// <summary>
        /// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tlsActivations")]
        private InputList<string>? _tlsActivations;

        /// <summary>
        /// List of alphanumeric strings identifying TLS activations.
        /// </summary>
        public InputList<string> TlsActivations
        {
            get => _tlsActivations ?? (_tlsActivations = new InputList<string>());
            set => _tlsActivations = value;
        }

        /// <summary>
        /// Date and time in ISO 8601 format.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public TlsMutualAuthenticationState()
        {
        }
        public static new TlsMutualAuthenticationState Empty => new TlsMutualAuthenticationState();
    }
}
