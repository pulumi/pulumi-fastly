// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    public static class GetTlsActivation
    {
        /// <summary>
        /// Use this data source to get information on a TLS activation, including the certificate used, and the domain on which TLS was enabled.
        /// 
        /// &gt; **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
        /// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
        /// with any of the others.
        /// 
        /// &gt; **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
        /// </summary>
        public static Task<GetTlsActivationResult> InvokeAsync(GetTlsActivationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTlsActivationResult>("fastly:index/getTlsActivation:getTlsActivation", args ?? new GetTlsActivationArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information on a TLS activation, including the certificate used, and the domain on which TLS was enabled.
        /// 
        /// &gt; **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
        /// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
        /// with any of the others.
        /// 
        /// &gt; **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
        /// </summary>
        public static Output<GetTlsActivationResult> Invoke(GetTlsActivationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTlsActivationResult>("fastly:index/getTlsActivation:getTlsActivation", args ?? new GetTlsActivationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsActivationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the TLS Certificate used.
        /// </summary>
        [Input("certificateId")]
        public string? CertificateId { get; set; }

        /// <summary>
        /// ID of the TLS Configuration used.
        /// </summary>
        [Input("configurationId")]
        public string? ConfigurationId { get; set; }

        /// <summary>
        /// Domain that TLS was enabled on.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// Fastly Activation ID. Conflicts with all other filters.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetTlsActivationArgs()
        {
        }
        public static new GetTlsActivationArgs Empty => new GetTlsActivationArgs();
    }

    public sealed class GetTlsActivationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the TLS Certificate used.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// ID of the TLS Configuration used.
        /// </summary>
        [Input("configurationId")]
        public Input<string>? ConfigurationId { get; set; }

        /// <summary>
        /// Domain that TLS was enabled on.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Fastly Activation ID. Conflicts with all other filters.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetTlsActivationInvokeArgs()
        {
        }
        public static new GetTlsActivationInvokeArgs Empty => new GetTlsActivationInvokeArgs();
    }


    [OutputType]
    public sealed class GetTlsActivationResult
    {
        /// <summary>
        /// ID of the TLS Certificate used.
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// ID of the TLS Configuration used.
        /// </summary>
        public readonly string ConfigurationId;
        /// <summary>
        /// Timestamp (GMT) when TLS was enabled.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Domain that TLS was enabled on.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Fastly Activation ID. Conflicts with all other filters.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetTlsActivationResult(
            string certificateId,

            string configurationId,

            string createdAt,

            string domain,

            string id)
        {
            CertificateId = certificateId;
            ConfigurationId = configurationId;
            CreatedAt = createdAt;
            Domain = domain;
            Id = id;
        }
    }
}
