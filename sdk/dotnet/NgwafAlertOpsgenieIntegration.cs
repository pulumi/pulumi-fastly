// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides Fastly Next-Gen WAF Alert Opsgenie integrations, which provide a connection to Opsgenie.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demoOpsgenieAlert = new Fastly.NgwafAlertOpsgenieIntegration("demo_opsgenie_alert", new()
    ///     {
    ///         Description = "A description",
    ///         Key = "123456789",
    ///         WorkspaceId = demo.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Next-Gen WAF Alert Opsgenie integrations can be imported using their ID and the ID of the workspace they belong to.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/ngwafAlertOpsgenieIntegration:NgwafAlertOpsgenieIntegration example &lt;workspace_id&gt;/&lt;alert_id&gt;
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/ngwafAlertOpsgenieIntegration:NgwafAlertOpsgenieIntegration")]
    public partial class NgwafAlertOpsgenieIntegration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the alert.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The Opsgenie key.
        /// </summary>
        [Output("key")]
        public Output<string> Key { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NgwafAlertOpsgenieIntegration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NgwafAlertOpsgenieIntegration(string name, NgwafAlertOpsgenieIntegrationArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafAlertOpsgenieIntegration:NgwafAlertOpsgenieIntegration", name, args ?? new NgwafAlertOpsgenieIntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NgwafAlertOpsgenieIntegration(string name, Input<string> id, NgwafAlertOpsgenieIntegrationState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafAlertOpsgenieIntegration:NgwafAlertOpsgenieIntegration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "key",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NgwafAlertOpsgenieIntegration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NgwafAlertOpsgenieIntegration Get(string name, Input<string> id, NgwafAlertOpsgenieIntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new NgwafAlertOpsgenieIntegration(name, id, state, options);
        }
    }

    public sealed class NgwafAlertOpsgenieIntegrationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("key", required: true)]
        private Input<string>? _key;

        /// <summary>
        /// The Opsgenie key.
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public NgwafAlertOpsgenieIntegrationArgs()
        {
        }
        public static new NgwafAlertOpsgenieIntegrationArgs Empty => new NgwafAlertOpsgenieIntegrationArgs();
    }

    public sealed class NgwafAlertOpsgenieIntegrationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the alert.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("key")]
        private Input<string>? _key;

        /// <summary>
        /// The Opsgenie key.
        /// </summary>
        public Input<string>? Key
        {
            get => _key;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _key = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public NgwafAlertOpsgenieIntegrationState()
        {
        }
        public static new NgwafAlertOpsgenieIntegrationState Empty => new NgwafAlertOpsgenieIntegrationState();
    }
}
