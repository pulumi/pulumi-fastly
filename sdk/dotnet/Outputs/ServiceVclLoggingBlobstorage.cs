// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceVclLoggingBlobstorage
    {
        /// <summary>
        /// The unique Azure Blob Storage namespace in which your data objects are stored
        /// </summary>
        public readonly string AccountName;
        /// <summary>
        /// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", GzipLevel will default to 3. To specify a different level, leave CompressionCodec blank and explicitly set the level using gzip_level. Specifying both CompressionCodec and GzipLevel in the same API request will result in an error.
        /// </summary>
        public readonly string? CompressionCodec;
        /// <summary>
        /// The name of the Azure Blob Storage container in which to store logs
        /// </summary>
        public readonly string Container;
        /// <summary>
        /// Maximum size of an uploaded log file, if non-zero.
        /// </summary>
        public readonly int? FileMaxBytes;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %&gt;s %b`)
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `Classic`, `Loggly`, `Logplex` or `Blank`. Default is `Classic`
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// Region where logs will be processed before streaming to BigQuery. Valid values are 'none', 'us' and 'eu'.
        /// </summary>
        public readonly string? ProcessingRegion;
        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The name of the condition to apply
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
        /// </summary>
        public readonly string SasToken;
        /// <summary>
        /// The `Strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
        /// </summary>
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private ServiceVclLoggingBlobstorage(
            string accountName,

            string? compressionCodec,

            string container,

            int? fileMaxBytes,

            string? format,

            int? formatVersion,

            int? gzipLevel,

            string? messageType,

            string name,

            string? path,

            int? period,

            string? placement,

            string? processingRegion,

            string? publicKey,

            string? responseCondition,

            string sasToken,

            string? timestampFormat)
        {
            AccountName = accountName;
            CompressionCodec = compressionCodec;
            Container = container;
            FileMaxBytes = fileMaxBytes;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            ProcessingRegion = processingRegion;
            PublicKey = publicKey;
            ResponseCondition = responseCondition;
            SasToken = sasToken;
            TimestampFormat = timestampFormat;
        }
    }
}
