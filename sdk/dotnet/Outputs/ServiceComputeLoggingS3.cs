// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceComputeLoggingS3
    {
        /// <summary>
        /// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `Private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
        /// </summary>
        public readonly string? Acl;
        /// <summary>
        /// The name of the bucket in which to store the logs
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", GzipLevel will default to 3. To specify a different level, leave CompressionCodec blank and explicitly set the level using gzip_level. Specifying both CompressionCodec and GzipLevel in the same API request will result in an error.
        /// </summary>
        public readonly string? CompressionCodec;
        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
        /// </summary>
        public readonly string? Domain;
        /// <summary>
        /// Maximum size of an uploaded log file, if non-zero.
        /// </summary>
        public readonly int? FileMaxBytes;
        /// <summary>
        /// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `Classic`, `Loggly`, `Logplex` or `Blank`. Default is `Classic`
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// How frequently the logs should be transferred, in seconds. Default `3600`
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Region where logs will be processed before streaming to BigQuery. Valid values are 'none', 'us' and 'eu'.
        /// </summary>
        public readonly string? ProcessingRegion;
        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The S3 storage class (redundancy level). Should be one of: `Standard`, `IntelligentTiering`, `StandardIa`, `OnezoneIa`, `Glacier`, `GlacierIr`, `DeepArchive`, or `ReducedRedundancy`
        /// </summary>
        public readonly string? Redundancy;
        /// <summary>
        /// AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `IamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
        /// </summary>
        public readonly string? S3AccessKey;
        /// <summary>
        /// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `AccessKey` and `SecretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
        /// </summary>
        public readonly string? S3IamRole;
        /// <summary>
        /// AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `IamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
        /// </summary>
        public readonly string? S3SecretKey;
        /// <summary>
        /// Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
        /// </summary>
        public readonly string? ServerSideEncryption;
        /// <summary>
        /// Optional server-side KMS Key Id. Must be set if ServerSideEncryption is set to `aws:kms`
        /// </summary>
        public readonly string? ServerSideEncryptionKmsKeyId;
        /// <summary>
        /// The `Strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
        /// </summary>
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private ServiceComputeLoggingS3(
            string? acl,

            string bucketName,

            string? compressionCodec,

            string? domain,

            int? fileMaxBytes,

            int? gzipLevel,

            string? messageType,

            string name,

            string? path,

            int? period,

            string? processingRegion,

            string? publicKey,

            string? redundancy,

            string? s3AccessKey,

            string? s3IamRole,

            string? s3SecretKey,

            string? serverSideEncryption,

            string? serverSideEncryptionKmsKeyId,

            string? timestampFormat)
        {
            Acl = acl;
            BucketName = bucketName;
            CompressionCodec = compressionCodec;
            Domain = domain;
            FileMaxBytes = fileMaxBytes;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            ProcessingRegion = processingRegion;
            PublicKey = publicKey;
            Redundancy = redundancy;
            S3AccessKey = s3AccessKey;
            S3IamRole = s3IamRole;
            S3SecretKey = s3SecretKey;
            ServerSideEncryption = serverSideEncryption;
            ServerSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            TimestampFormat = timestampFormat;
        }
    }
}
