// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class Servicev1S3logging
    {
        /// <summary>
        /// The name of the bucket in which to store the logs
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
        /// </summary>
        public readonly string? Domain;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1).
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// How frequently the logs should be transferred, in seconds. Default `3600`
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The S3 redundancy level. Should be formatted; one of: `standard`, `reduced_redundancy` or null. Default `null`
        /// </summary>
        public readonly string? Redundancy;
        /// <summary>
        /// Name of blockAttributes condition to apply this logging.
        /// </summary>
        public readonly string? ResponseCondition;
        public readonly string? S3AccessKey;
        public readonly string? S3SecretKey;
        public readonly string? ServerSideEncryption;
        public readonly string? ServerSideEncryptionKmsKeyId;
        /// <summary>
        /// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
        /// </summary>
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private Servicev1S3logging(
            string bucketName,

            string? domain,

            string? format,

            int? formatVersion,

            int? gzipLevel,

            string? messageType,

            string name,

            string? path,

            int? period,

            string? placement,

            string? publicKey,

            string? redundancy,

            string? responseCondition,

            string? s3AccessKey,

            string? s3SecretKey,

            string? serverSideEncryption,

            string? serverSideEncryptionKmsKeyId,

            string? timestampFormat)
        {
            BucketName = bucketName;
            Domain = domain;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            PublicKey = publicKey;
            Redundancy = redundancy;
            ResponseCondition = responseCondition;
            S3AccessKey = s3AccessKey;
            S3SecretKey = s3SecretKey;
            ServerSideEncryption = serverSideEncryption;
            ServerSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            TimestampFormat = timestampFormat;
        }
    }
}
