// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceComputeBackend
    {
        /// <summary>
        /// An IPv4, hostname, or IPv6 address for the Backend
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// How long to wait between bytes in milliseconds. Default `10000`
        /// </summary>
        public readonly int? BetweenBytesTimeout;
        /// <summary>
        /// How long to wait for a timeout in milliseconds. Default `1000`
        /// </summary>
        public readonly int? ConnectTimeout;
        /// <summary>
        /// Number of errors to allow before the Backend is marked as down. Default `0`
        /// </summary>
        public readonly int? ErrorThreshold;
        /// <summary>
        /// How long to wait for the first bytes in milliseconds. Default `15000`
        /// </summary>
        public readonly int? FirstByteTimeout;
        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend
        /// </summary>
        public readonly string? Healthcheck;
        /// <summary>
        /// How long in seconds to keep a persistent connection to the backend between requests.
        /// </summary>
        public readonly int? KeepaliveTime;
        /// <summary>
        /// Maximum number of connections for this Backend. Default `200`
        /// </summary>
        public readonly int? MaxConn;
        /// <summary>
        /// Maximum allowed TLS version on SSL connections to this backend.
        /// </summary>
        public readonly string? MaxTlsVersion;
        /// <summary>
        /// Minimum allowed TLS version on SSL connections to this backend.
        /// </summary>
        public readonly string? MinTlsVersion;
        /// <summary>
        /// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The hostname to override the Host header
        /// </summary>
        public readonly string? OverrideHost;
        /// <summary>
        /// The port number on which the Backend responds. Default `80`
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Value that when shared across backends will enable those backends to share the same health check.
        /// </summary>
        public readonly string? ShareKey;
        /// <summary>
        /// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
        /// </summary>
        public readonly string? Shield;
        /// <summary>
        /// CA certificate attached to origin.
        /// </summary>
        public readonly string? SslCaCert;
        /// <summary>
        /// Configure certificate validation. Does not affect SNI at all
        /// </summary>
        public readonly string? SslCertHostname;
        /// <summary>
        /// Be strict about checking SSL certs. Default `true`
        /// </summary>
        public readonly bool? SslCheckCert;
        /// <summary>
        /// Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
        /// </summary>
        public readonly string? SslCiphers;
        /// <summary>
        /// Client certificate attached to origin. Used when connecting to the backend
        /// </summary>
        public readonly string? SslClientCert;
        /// <summary>
        /// Client key attached to origin. Used when connecting to the backend
        /// </summary>
        public readonly string? SslClientKey;
        /// <summary>
        /// Configure SNI in the TLS handshake. Does not affect cert validation at all
        /// </summary>
        public readonly string? SslSniHostname;
        /// <summary>
        /// Whether or not to use SSL to reach the Backend. Default `false`
        /// </summary>
        public readonly bool? UseSsl;
        /// <summary>
        /// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
        /// </summary>
        public readonly int? Weight;

        [OutputConstructor]
        private ServiceComputeBackend(
            string address,

            int? betweenBytesTimeout,

            int? connectTimeout,

            int? errorThreshold,

            int? firstByteTimeout,

            string? healthcheck,

            int? keepaliveTime,

            int? maxConn,

            string? maxTlsVersion,

            string? minTlsVersion,

            string name,

            string? overrideHost,

            int? port,

            string? shareKey,

            string? shield,

            string? sslCaCert,

            string? sslCertHostname,

            bool? sslCheckCert,

            string? sslCiphers,

            string? sslClientCert,

            string? sslClientKey,

            string? sslSniHostname,

            bool? useSsl,

            int? weight)
        {
            Address = address;
            BetweenBytesTimeout = betweenBytesTimeout;
            ConnectTimeout = connectTimeout;
            ErrorThreshold = errorThreshold;
            FirstByteTimeout = firstByteTimeout;
            Healthcheck = healthcheck;
            KeepaliveTime = keepaliveTime;
            MaxConn = maxConn;
            MaxTlsVersion = maxTlsVersion;
            MinTlsVersion = minTlsVersion;
            Name = name;
            OverrideHost = overrideHost;
            Port = port;
            ShareKey = shareKey;
            Shield = shield;
            SslCaCert = sslCaCert;
            SslCertHostname = sslCertHostname;
            SslCheckCert = sslCheckCert;
            SslCiphers = sslCiphers;
            SslClientCert = sslClientCert;
            SslClientKey = sslClientKey;
            SslSniHostname = sslSniHostname;
            UseSsl = useSsl;
            Weight = weight;
        }
    }
}
