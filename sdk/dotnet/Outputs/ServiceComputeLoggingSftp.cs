// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceComputeLoggingSftp
    {
        /// <summary>
        /// The SFTP address to stream logs to
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", GzipLevel will default to 3. To specify a different level, leave CompressionCodec blank and explicitly set the level using gzip_level. Specifying both CompressionCodec and GzipLevel in the same API request will result in an error.
        /// </summary>
        public readonly string? CompressionCodec;
        /// <summary>
        /// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `Classic`, `Loggly`, `Logplex` or `Blank`. Default is `Classic`
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The password for the server. If both `Password` and `SecretKey` are passed, `SecretKey` will be preferred
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// The path to upload log files to. If the path ends in `/` then it is treated as a directory
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// The port the SFTP service listens on. (Default: `22`)
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Region where logs will be processed before streaming to BigQuery. Valid values are 'none', 'us' and 'eu'.
        /// </summary>
        public readonly string? ProcessingRegion;
        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The SSH private key for the server. If both `Password` and `SecretKey` are passed, `SecretKey` will be preferred
        /// </summary>
        public readonly string? SecretKey;
        /// <summary>
        /// A list of host keys for all hosts we can connect to over SFTP
        /// </summary>
        public readonly string SshKnownHosts;
        /// <summary>
        /// The `Strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
        /// </summary>
        public readonly string? TimestampFormat;
        /// <summary>
        /// The username for the server
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ServiceComputeLoggingSftp(
            string address,

            string? compressionCodec,

            int? gzipLevel,

            string? messageType,

            string name,

            string? password,

            string path,

            int? period,

            int? port,

            string? processingRegion,

            string? publicKey,

            string? secretKey,

            string sshKnownHosts,

            string? timestampFormat,

            string user)
        {
            Address = address;
            CompressionCodec = compressionCodec;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Password = password;
            Path = path;
            Period = period;
            Port = port;
            ProcessingRegion = processingRegion;
            PublicKey = publicKey;
            SecretKey = secretKey;
            SshKnownHosts = sshKnownHosts;
            TimestampFormat = timestampFormat;
            User = user;
        }
    }
}
