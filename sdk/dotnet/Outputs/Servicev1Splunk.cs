// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class Servicev1Splunk
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %&gt;s %b`)
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The name of the condition to apply
        /// </summary>
        public readonly string? ResponseCondition;
        public readonly string? TlsCaCert;
        public readonly string? TlsClientCert;
        public readonly string? TlsClientKey;
        /// <summary>
        /// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
        /// </summary>
        public readonly string? TlsHostname;
        /// <summary>
        /// The Splunk token to be used for authentication
        /// </summary>
        public readonly string Token;
        /// <summary>
        /// The Splunk URL to stream logs to
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private Servicev1Splunk(
            string? format,

            int? formatVersion,

            string name,

            string? placement,

            string? responseCondition,

            string? tlsCaCert,

            string? tlsClientCert,

            string? tlsClientKey,

            string? tlsHostname,

            string token,

            string url)
        {
            Format = format;
            FormatVersion = formatVersion;
            Name = name;
            Placement = placement;
            ResponseCondition = responseCondition;
            TlsCaCert = tlsCaCert;
            TlsClientCert = tlsClientCert;
            TlsClientKey = tlsClientKey;
            TlsHostname = tlsHostname;
            Token = token;
            Url = url;
        }
    }
}
