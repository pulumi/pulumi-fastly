// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceVclLoggingSftp
    {
        /// <summary>
        /// The SFTP address to stream logs to
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.
        /// </summary>
        public readonly string? CompressionCodec;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The password for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// The path to upload log files to. If the path ends in `/` then it is treated as a directory
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The port the SFTP service listens on. (Default: `22`)
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The name of the condition to apply.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The SSH private key for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred
        /// </summary>
        public readonly string? SecretKey;
        /// <summary>
        /// A list of host keys for all hosts we can connect to over SFTP
        /// </summary>
        public readonly string SshKnownHosts;
        /// <summary>
        /// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
        /// </summary>
        public readonly string? TimestampFormat;
        /// <summary>
        /// The username for the server
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ServiceVclLoggingSftp(
            string address,

            string? compressionCodec,

            string? format,

            int? formatVersion,

            int? gzipLevel,

            string? messageType,

            string name,

            string? password,

            string path,

            int? period,

            string? placement,

            int? port,

            string? publicKey,

            string? responseCondition,

            string? secretKey,

            string sshKnownHosts,

            string? timestampFormat,

            string user)
        {
            Address = address;
            CompressionCodec = compressionCodec;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Password = password;
            Path = path;
            Period = period;
            Placement = placement;
            Port = port;
            PublicKey = publicKey;
            ResponseCondition = responseCondition;
            SecretKey = secretKey;
            SshKnownHosts = sshKnownHosts;
            TimestampFormat = timestampFormat;
            User = user;
        }
    }
}
