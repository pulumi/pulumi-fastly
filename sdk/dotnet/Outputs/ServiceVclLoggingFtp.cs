// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceVclLoggingFtp
    {
        /// <summary>
        /// The FTP address to stream logs to
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip_level will default to 3. To specify a different level, leave compression_codec blank and explicitly set the level using gzip_level. Specifying both compression_codec and gzip_level in the same API request will result in an error.
        /// </summary>
        public readonly string? CompressionCodec;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The password for the server (for anonymous use an email address)
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// The path to upload log files to. If the path ends in `/` then it is treated as a directory
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// How frequently the logs should be transferred, in seconds (Default `3600`)
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The port number. Default: `21`
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Region where logs will be processed before streaming to BigQuery. Valid values are 'none', 'us' and 'eu'.
        /// </summary>
        public readonly string? ProcessingRegion;
        /// <summary>
        /// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The name of the condition to apply.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
        /// </summary>
        public readonly string? TimestampFormat;
        /// <summary>
        /// The username for the server (can be `anonymous`)
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ServiceVclLoggingFtp(
            string address,

            string? compressionCodec,

            string? format,

            int? formatVersion,

            int? gzipLevel,

            string? messageType,

            string name,

            string password,

            string path,

            int? period,

            string? placement,

            int? port,

            string? processingRegion,

            string? publicKey,

            string? responseCondition,

            string? timestampFormat,

            string user)
        {
            Address = address;
            CompressionCodec = compressionCodec;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Password = password;
            Path = path;
            Period = period;
            Placement = placement;
            Port = port;
            ProcessingRegion = processingRegion;
            PublicKey = publicKey;
            ResponseCondition = responseCondition;
            TimestampFormat = timestampFormat;
            User = user;
        }
    }
}
