// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceComputeLoggingSplunk
    {
        /// <summary>
        /// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
        /// </summary>
        public readonly string? TlsCaCert;
        /// <summary>
        /// The client certificate used to make authenticated requests. Must be in PEM format.
        /// </summary>
        public readonly string? TlsClientCert;
        /// <summary>
        /// The client private key used to make authenticated requests. Must be in PEM format.
        /// </summary>
        public readonly string? TlsClientKey;
        /// <summary>
        /// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
        /// </summary>
        public readonly string? TlsHostname;
        /// <summary>
        /// The Splunk token to be used for authentication
        /// </summary>
        public readonly string Token;
        /// <summary>
        /// The Splunk URL to stream logs to
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Whether to use TLS for secure logging. Default: `false`
        /// </summary>
        public readonly bool? UseTls;

        [OutputConstructor]
        private ServiceComputeLoggingSplunk(
            string name,

            string? tlsCaCert,

            string? tlsClientCert,

            string? tlsClientKey,

            string? tlsHostname,

            string token,

            string url,

            bool? useTls)
        {
            Name = name;
            TlsCaCert = tlsCaCert;
            TlsClientCert = tlsClientCert;
            TlsClientKey = tlsClientKey;
            TlsHostname = tlsHostname;
            Token = token;
            Url = url;
            UseTls = useTls;
        }
    }
}
