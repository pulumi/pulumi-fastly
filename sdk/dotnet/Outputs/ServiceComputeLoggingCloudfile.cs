// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceComputeLoggingCloudfile
    {
        /// <summary>
        /// Your Cloud File account access key
        /// </summary>
        public readonly string AccessKey;
        /// <summary>
        /// The name of your Cloud Files container
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", GzipLevel will default to 3. To specify a different level, leave CompressionCodec blank and explicitly set the level using gzip_level. Specifying both CompressionCodec and GzipLevel in the same API request will result in an error.
        /// </summary>
        public readonly string? CompressionCodec;
        /// <summary>
        /// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `Classic`, `Loggly`, `Logplex` or `Blank`. Default is `Classic`
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path to upload logs to
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Region where logs will be processed before streaming to BigQuery. Valid values are 'none', 'us' and 'eu'.
        /// </summary>
        public readonly string? ProcessingRegion;
        /// <summary>
        /// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
        /// </summary>
        public readonly string? Region;
        /// <summary>
        /// The `Strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
        /// </summary>
        public readonly string? TimestampFormat;
        /// <summary>
        /// The username for your Cloud Files account
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ServiceComputeLoggingCloudfile(
            string accessKey,

            string bucketName,

            string? compressionCodec,

            int? gzipLevel,

            string? messageType,

            string name,

            string? path,

            int? period,

            string? processingRegion,

            string? publicKey,

            string? region,

            string? timestampFormat,

            string user)
        {
            AccessKey = accessKey;
            BucketName = bucketName;
            CompressionCodec = compressionCodec;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            ProcessingRegion = processingRegion;
            PublicKey = publicKey;
            Region = region;
            TimestampFormat = timestampFormat;
            User = user;
        }
    }
}
