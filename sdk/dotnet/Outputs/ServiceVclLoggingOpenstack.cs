// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class ServiceVclLoggingOpenstack
    {
        /// <summary>
        /// Your OpenStack account access key
        /// </summary>
        public readonly string AccessKey;
        /// <summary>
        /// The name of your OpenStack container
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip_level will default to 3. To specify a different level, leave compression_codec blank and explicitly set the level using gzip_level. Specifying both compression_codec and gzip_level in the same API request will result in an error.
        /// </summary>
        public readonly string? CompressionCodec;
        /// <summary>
        /// Apache style log formatting.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// How frequently the logs should be transferred, in seconds. Default `3600`
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed (ignored).
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The name of an existing condition in the configured endpoint, or leave blank to always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
        /// </summary>
        public readonly string? TimestampFormat;
        /// <summary>
        /// Your OpenStack auth url
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// The username for your OpenStack account
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private ServiceVclLoggingOpenstack(
            string accessKey,

            string bucketName,

            string? compressionCodec,

            string? format,

            int? formatVersion,

            int? gzipLevel,

            string? messageType,

            string name,

            string? path,

            int? period,

            string? placement,

            string? publicKey,

            string? responseCondition,

            string? timestampFormat,

            string url,

            string user)
        {
            AccessKey = accessKey;
            BucketName = bucketName;
            CompressionCodec = compressionCodec;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            PublicKey = publicKey;
            ResponseCondition = responseCondition;
            TimestampFormat = timestampFormat;
            Url = url;
            User = user;
        }
    }
}
