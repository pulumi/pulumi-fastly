// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Uploads a custom TLS certificate to Fastly to be used to terminate TLS traffic.
    /// 
    /// &gt; Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate. This
    /// can be achieved in Pulumi using `depends_on`
    /// 
    /// ## Updating certificates
    /// 
    /// There are three scenarios for updating a certificate:
    /// 
    /// 1. The certificate is about to expire but the private key stays the same.
    /// 2. The certificate is about to expire but the private key is changing.
    /// 3. The domains on the certificate are changing.
    /// 
    /// In the first scenario you only need to update the `certificate_body` attribute of the `fastly.TlsCertificate` resource, while the other scenarios require a new private key (`fastly.TlsPrivateKey`) and certificate (`fastly.TlsCertificate`) to be generated.
    /// 
    /// When updating both the `fastly.TlsPrivateKey` and `fastly.TlsCertificate` resources, they should be done in multiple plan/apply steps to avoid potential downtime. The new certificate and associated private key must first be created so they exist alongside the currently active resources. Once the new resources have been created, then the `fastly.TlsActivation` can be updated to point to the new certificate. Finally, the original key/certificate resources can be deleted.
    /// 
    /// ## Import
    /// 
    /// A certificate can be imported using its Fastly certificate ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import fastly:index/tlsCertificate:TlsCertificate demo xxxxxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/tlsCertificate:TlsCertificate")]
    public partial class TlsCertificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// PEM-formatted certificate, optionally including any intermediary certificates.
        /// </summary>
        [Output("certificateBody")]
        public Output<string> CertificateBody { get; private set; } = null!;

        /// <summary>
        /// Timestamp (GMT) when the certificate was created.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<string>> Domains { get; private set; } = null!;

        /// <summary>
        /// The hostname for which a certificate was issued.
        /// </summary>
        [Output("issuedTo")]
        public Output<string> IssuedTo { get; private set; } = null!;

        /// <summary>
        /// The certificate authority that issued the certificate.
        /// </summary>
        [Output("issuer")]
        public Output<string> Issuer { get; private set; } = null!;

        /// <summary>
        /// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
        /// </summary>
        [Output("replace")]
        public Output<bool> Replace { get; private set; } = null!;

        /// <summary>
        /// A value assigned by the issuer that is unique to a certificate.
        /// </summary>
        [Output("serialNumber")]
        public Output<string> SerialNumber { get; private set; } = null!;

        /// <summary>
        /// The algorithm used to sign the certificate.
        /// </summary>
        [Output("signatureAlgorithm")]
        public Output<string> SignatureAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Timestamp (GMT) when the certificate was last updated.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a TlsCertificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TlsCertificate(string name, TlsCertificateArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/tlsCertificate:TlsCertificate", name, args ?? new TlsCertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TlsCertificate(string name, Input<string> id, TlsCertificateState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/tlsCertificate:TlsCertificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TlsCertificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TlsCertificate Get(string name, Input<string> id, TlsCertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new TlsCertificate(name, id, state, options);
        }
    }

    public sealed class TlsCertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// PEM-formatted certificate, optionally including any intermediary certificates.
        /// </summary>
        [Input("certificateBody", required: true)]
        public Input<string> CertificateBody { get; set; } = null!;

        /// <summary>
        /// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public TlsCertificateArgs()
        {
        }
        public static new TlsCertificateArgs Empty => new TlsCertificateArgs();
    }

    public sealed class TlsCertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// PEM-formatted certificate, optionally including any intermediary certificates.
        /// </summary>
        [Input("certificateBody")]
        public Input<string>? CertificateBody { get; set; }

        /// <summary>
        /// Timestamp (GMT) when the certificate was created.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// The hostname for which a certificate was issued.
        /// </summary>
        [Input("issuedTo")]
        public Input<string>? IssuedTo { get; set; }

        /// <summary>
        /// The certificate authority that issued the certificate.
        /// </summary>
        [Input("issuer")]
        public Input<string>? Issuer { get; set; }

        /// <summary>
        /// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
        /// </summary>
        [Input("replace")]
        public Input<bool>? Replace { get; set; }

        /// <summary>
        /// A value assigned by the issuer that is unique to a certificate.
        /// </summary>
        [Input("serialNumber")]
        public Input<string>? SerialNumber { get; set; }

        /// <summary>
        /// The algorithm used to sign the certificate.
        /// </summary>
        [Input("signatureAlgorithm")]
        public Input<string>? SignatureAlgorithm { get; set; }

        /// <summary>
        /// Timestamp (GMT) when the certificate was last updated.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public TlsCertificateState()
        {
        }
        public static new TlsCertificateState Empty => new TlsCertificateState();
    }
}
