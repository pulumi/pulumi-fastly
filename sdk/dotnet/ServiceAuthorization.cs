// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Configures authorization with granular permissions to services. Users can be granted rights for services on different levels.
    /// 
    /// The Service Authorization resource requires a user id, service id and an optional permission.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demo = new Fastly.ServiceVcl("demo");
    /// 
    ///     var user = new Fastly.User("user");
    /// 
    ///     var auth = new Fastly.ServiceAuthorization("auth", new()
    ///     {
    ///         ServiceId = demo.Id,
    ///         UserId = user.Id,
    ///         Permission = "purge_all",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// A Fastly Service Authorization can be imported using their user ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/serviceAuthorization:ServiceAuthorization demo xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/serviceAuthorization:ServiceAuthorization")]
    public partial class ServiceAuthorization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.
        /// </summary>
        [Output("permission")]
        public Output<string> Permission { get; private set; } = null!;

        /// <summary>
        /// The ID of the service to grant permissions for.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the user which will receive the granted permissions.
        /// </summary>
        [Output("userId")]
        public Output<string> UserId { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceAuthorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceAuthorization(string name, ServiceAuthorizationArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/serviceAuthorization:ServiceAuthorization", name, args ?? new ServiceAuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceAuthorization(string name, Input<string> id, ServiceAuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/serviceAuthorization:ServiceAuthorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceAuthorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceAuthorization Get(string name, Input<string> id, ServiceAuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceAuthorization(name, id, state, options);
        }
    }

    public sealed class ServiceAuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.
        /// </summary>
        [Input("permission", required: true)]
        public Input<string> Permission { get; set; } = null!;

        /// <summary>
        /// The ID of the service to grant permissions for.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// The ID of the user which will receive the granted permissions.
        /// </summary>
        [Input("userId", required: true)]
        public Input<string> UserId { get; set; } = null!;

        public ServiceAuthorizationArgs()
        {
        }
        public static new ServiceAuthorizationArgs Empty => new ServiceAuthorizationArgs();
    }

    public sealed class ServiceAuthorizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.
        /// </summary>
        [Input("permission")]
        public Input<string>? Permission { get; set; }

        /// <summary>
        /// The ID of the service to grant permissions for.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// The ID of the user which will receive the granted permissions.
        /// </summary>
        [Input("userId")]
        public Input<string>? UserId { get; set; }

        public ServiceAuthorizationState()
        {
        }
        public static new ServiceAuthorizationState Empty => new ServiceAuthorizationState();
    }
}
