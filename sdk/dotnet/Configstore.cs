// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a container that lets you store data in key-value pairs that are accessible to Compute services during request processing.
    /// 
    /// In order for a Config Store (`fastly.Configstore`) to be accessible to a [Compute](https://developer.fastly.com/learning/compute/) service you'll first need to define a Compute service (`fastly.ServiceCompute`) in your configuration, and then create a link to the Config Store from within the service using the `resource_link` block (shown in the below examples).
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // IMPORTANT: Deleting a Config Store requires first deleting its resource_link.
    ///     // This requires a two-step `pulumi up` as we can't guarantee deletion order.
    ///     // e.g. resource_link deletion within fastly_service_compute might not finish first.
    ///     var exampleConfigstore = new Fastly.Configstore("exampleConfigstore");
    /// 
    ///     var examplePackageHash = Fastly.GetPackageHash.Invoke(new()
    ///     {
    ///         Filename = "package.tar.gz",
    ///     });
    /// 
    ///     var exampleServiceCompute = new Fastly.ServiceCompute("exampleServiceCompute", new()
    ///     {
    ///         Domains = new[]
    ///         {
    ///             new Fastly.Inputs.ServiceComputeDomainArgs
    ///             {
    ///                 Name = "demo.example.com",
    ///             },
    ///         },
    ///         Package = new Fastly.Inputs.ServiceComputePackageArgs
    ///         {
    ///             Filename = "package.tar.gz",
    ///             SourceCodeHash = examplePackageHash.Apply(getPackageHashResult =&gt; getPackageHashResult.Hash),
    ///         },
    ///         ResourceLinks = new[]
    ///         {
    ///             new Fastly.Inputs.ServiceComputeResourceLinkArgs
    ///             {
    ///                 Name = "my_resource_link",
    ///                 ResourceId = exampleConfigstore.Id,
    ///             },
    ///         },
    ///         ForceDestroy = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Config Stores can be imported using their Store ID, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import fastly:index/configstore:Configstore example xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/configstore:Configstore")]
    public partial class Configstore : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow the Config Store to be deleted, even if it contains entries. Defaults to false.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// A unique name to identify the Config Store. It is important to note that changing this attribute will delete and recreate the Config Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Configstore resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Configstore(string name, ConfigstoreArgs? args = null, CustomResourceOptions? options = null)
            : base("fastly:index/configstore:Configstore", name, args ?? new ConfigstoreArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Configstore(string name, Input<string> id, ConfigstoreState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/configstore:Configstore", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Configstore resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Configstore Get(string name, Input<string> id, ConfigstoreState? state = null, CustomResourceOptions? options = null)
        {
            return new Configstore(name, id, state, options);
        }
    }

    public sealed class ConfigstoreArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow the Config Store to be deleted, even if it contains entries. Defaults to false.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// A unique name to identify the Config Store. It is important to note that changing this attribute will delete and recreate the Config Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ConfigstoreArgs()
        {
        }
        public static new ConfigstoreArgs Empty => new ConfigstoreArgs();
    }

    public sealed class ConfigstoreState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow the Config Store to be deleted, even if it contains entries. Defaults to false.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        /// <summary>
        /// A unique name to identify the Config Store. It is important to note that changing this attribute will delete and recreate the Config Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public ConfigstoreState()
        {
        }
        public static new ConfigstoreState Empty => new ConfigstoreState();
    }
}
