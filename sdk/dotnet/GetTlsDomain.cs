// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    public static class GetTlsDomain
    {
        /// <summary>
        /// Use this data source to get the IDs of activations, certificates and subscriptions associated with a domain.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var domain = Output.Create(Fastly.GetTlsDomain.InvokeAsync(new Fastly.GetTlsDomainArgs
        ///         {
        ///             Domain = "example.com",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTlsDomainResult> InvokeAsync(GetTlsDomainArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTlsDomainResult>("fastly:index/getTlsDomain:getTlsDomain", args ?? new GetTlsDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get the IDs of activations, certificates and subscriptions associated with a domain.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var domain = Output.Create(Fastly.GetTlsDomain.InvokeAsync(new Fastly.GetTlsDomainArgs
        ///         {
        ///             Domain = "example.com",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTlsDomainResult> Invoke(GetTlsDomainInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTlsDomainResult>("fastly:index/getTlsDomain:getTlsDomain", args ?? new GetTlsDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsDomainArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain name to look up activations, certificates and subscriptions for.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        public GetTlsDomainArgs()
        {
        }
    }

    public sealed class GetTlsDomainInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain name to look up activations, certificates and subscriptions for.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        public GetTlsDomainInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTlsDomainResult
    {
        /// <summary>
        /// Domain name to look up activations, certificates and subscriptions for.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IDs of the activations associated with the domain.
        /// </summary>
        public readonly ImmutableArray<string> TlsActivationIds;
        /// <summary>
        /// IDs of the certificates associated with the domain.
        /// </summary>
        public readonly ImmutableArray<string> TlsCertificateIds;
        /// <summary>
        /// IDs of the subscriptions associated with the domain.
        /// </summary>
        public readonly ImmutableArray<string> TlsSubscriptionIds;

        [OutputConstructor]
        private GetTlsDomainResult(
            string domain,

            string id,

            ImmutableArray<string> tlsActivationIds,

            ImmutableArray<string> tlsCertificateIds,

            ImmutableArray<string> tlsSubscriptionIds)
        {
            Domain = domain;
            Id = id;
            TlsActivationIds = tlsActivationIds;
            TlsCertificateIds = tlsCertificateIds;
            TlsSubscriptionIds = tlsSubscriptionIds;
        }
    }
}
