// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Next-Gen WAF Account Signal.\
    /// Account-level signals apply across one or more workspaces and are useful for defining shared or global WAF logic.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Fastly.NgwafAccountSignal("example", new()
    ///     {
    ///         AppliesTos = new[]
    ///         {
    ///             "*",
    ///         },
    ///         Description = "example",
    ///         Name = "Test Name",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Next-Gen WAF account signals can be imported using just the signal ID, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/ngwafAccountSignal:NgwafAccountSignal demo &lt;signalID&gt;
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/ngwafAccountSignal:NgwafAccountSignal")]
    public partial class NgwafAccountSignal : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
        /// </summary>
        [Output("appliesTos")]
        public Output<ImmutableArray<string>> AppliesTos { get; private set; } = null!;

        /// <summary>
        /// The description of the signal.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the signal. Special characters and periods are not accepted.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The generated reference ID of the signal.
        /// </summary>
        [Output("referenceId")]
        public Output<string> ReferenceId { get; private set; } = null!;


        /// <summary>
        /// Create a NgwafAccountSignal resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NgwafAccountSignal(string name, NgwafAccountSignalArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafAccountSignal:NgwafAccountSignal", name, args ?? new NgwafAccountSignalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NgwafAccountSignal(string name, Input<string> id, NgwafAccountSignalState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafAccountSignal:NgwafAccountSignal", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NgwafAccountSignal resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NgwafAccountSignal Get(string name, Input<string> id, NgwafAccountSignalState? state = null, CustomResourceOptions? options = null)
        {
            return new NgwafAccountSignal(name, id, state, options);
        }
    }

    public sealed class NgwafAccountSignalArgs : global::Pulumi.ResourceArgs
    {
        [Input("appliesTos", required: true)]
        private InputList<string>? _appliesTos;

        /// <summary>
        /// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
        /// </summary>
        public InputList<string> AppliesTos
        {
            get => _appliesTos ?? (_appliesTos = new InputList<string>());
            set => _appliesTos = value;
        }

        /// <summary>
        /// The description of the signal.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the signal. Special characters and periods are not accepted.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public NgwafAccountSignalArgs()
        {
        }
        public static new NgwafAccountSignalArgs Empty => new NgwafAccountSignalArgs();
    }

    public sealed class NgwafAccountSignalState : global::Pulumi.ResourceArgs
    {
        [Input("appliesTos")]
        private InputList<string>? _appliesTos;

        /// <summary>
        /// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
        /// </summary>
        public InputList<string> AppliesTos
        {
            get => _appliesTos ?? (_appliesTos = new InputList<string>());
            set => _appliesTos = value;
        }

        /// <summary>
        /// The description of the signal.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the signal. Special characters and periods are not accepted.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The generated reference ID of the signal.
        /// </summary>
        [Input("referenceId")]
        public Input<string>? ReferenceId { get; set; }

        public NgwafAccountSignalState()
        {
        }
        public static new NgwafAccountSignalState Empty => new NgwafAccountSignalState();
    }
}
