// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Alert. Alerts send notifications to custom integrations (e.g., Slack channels, PagerDuty, Microsoft Teams and New Relic) when an observed metric either exceeds or falls below a threshold.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Fastly.ServiceVcl("example", new()
    ///     {
    ///         Name = "my_vcl_service",
    ///     });
    /// 
    ///     var exampleAlert = new Fastly.Alert("example", new()
    ///     {
    ///         Name = "my_vcl_service errors",
    ///         ServiceId = example.Id,
    ///         Source = "stats",
    ///         Metric = "status_5xx",
    ///         EvaluationStrategy = new Fastly.Inputs.AlertEvaluationStrategyArgs
    ///         {
    ///             Type = "above_threshold",
    ///             Period = "5m",
    ///             Threshold = 10,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Alerts can be imported using their ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/alert:Alert example xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/alert:Alert")]
    public partial class Alert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Additional text that is included in the alert notification.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// More filters depending on the source type.
        /// </summary>
        [Output("dimensions")]
        public Output<Outputs.AlertDimensions?> Dimensions { get; private set; } = null!;

        /// <summary>
        /// Criteria on how to alert.
        /// </summary>
        [Output("evaluationStrategy")]
        public Output<Outputs.AlertEvaluationStrategy> EvaluationStrategy { get; private set; } = null!;

        /// <summary>
        /// List of integrations used to notify when alert fires.
        /// </summary>
        [Output("integrationIds")]
        public Output<ImmutableArray<string>> IntegrationIds { get; private set; } = null!;

        /// <summary>
        /// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
        /// </summary>
        [Output("metric")]
        public Output<string> Metric { get; private set; } = null!;

        /// <summary>
        /// The name of the alert.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The service which the alert monitors.
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
        /// </summary>
        [Output("source")]
        public Output<string> Source { get; private set; } = null!;


        /// <summary>
        /// Create a Alert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alert(string name, AlertArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/alert:Alert", name, args ?? new AlertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alert(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/alert:Alert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alert Get(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
        {
            return new Alert(name, id, state, options);
        }
    }

    public sealed class AlertArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional text that is included in the alert notification.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// More filters depending on the source type.
        /// </summary>
        [Input("dimensions")]
        public Input<Inputs.AlertDimensionsArgs>? Dimensions { get; set; }

        /// <summary>
        /// Criteria on how to alert.
        /// </summary>
        [Input("evaluationStrategy", required: true)]
        public Input<Inputs.AlertEvaluationStrategyArgs> EvaluationStrategy { get; set; } = null!;

        [Input("integrationIds")]
        private InputList<string>? _integrationIds;

        /// <summary>
        /// List of integrations used to notify when alert fires.
        /// </summary>
        public InputList<string> IntegrationIds
        {
            get => _integrationIds ?? (_integrationIds = new InputList<string>());
            set => _integrationIds = value;
        }

        /// <summary>
        /// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
        /// </summary>
        [Input("metric", required: true)]
        public Input<string> Metric { get; set; } = null!;

        /// <summary>
        /// The name of the alert.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The service which the alert monitors.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        public AlertArgs()
        {
        }
        public static new AlertArgs Empty => new AlertArgs();
    }

    public sealed class AlertState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Additional text that is included in the alert notification.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// More filters depending on the source type.
        /// </summary>
        [Input("dimensions")]
        public Input<Inputs.AlertDimensionsGetArgs>? Dimensions { get; set; }

        /// <summary>
        /// Criteria on how to alert.
        /// </summary>
        [Input("evaluationStrategy")]
        public Input<Inputs.AlertEvaluationStrategyGetArgs>? EvaluationStrategy { get; set; }

        [Input("integrationIds")]
        private InputList<string>? _integrationIds;

        /// <summary>
        /// List of integrations used to notify when alert fires.
        /// </summary>
        public InputList<string> IntegrationIds
        {
            get => _integrationIds ?? (_integrationIds = new InputList<string>());
            set => _integrationIds = value;
        }

        /// <summary>
        /// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
        /// </summary>
        [Input("metric")]
        public Input<string>? Metric { get; set; }

        /// <summary>
        /// The name of the alert.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The service which the alert monitors.
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public AlertState()
        {
        }
        public static new AlertState Empty => new AlertState();
    }
}
