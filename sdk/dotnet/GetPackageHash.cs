// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    public static class GetPackageHash
    {
        /// <summary>
        /// Use this data source to generate a SHA512 hash of all files (in sorted order) within the package.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Fastly.GetPackageHash.Invoke(new()
        ///     {
        ///         Filename = "./path/to/package.tar.gz",
        ///     });
        /// 
        ///     var exampleServiceCompute = new Fastly.ServiceCompute("example", new()
        ///     {
        ///         Package = new Fastly.Inputs.ServiceComputePackageArgs
        ///         {
        ///             Filename = "./path/to/package.tar.gz",
        ///             SourceCodeHash = example.Apply(getPackageHashResult =&gt; getPackageHashResult.Hash),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPackageHashResult> InvokeAsync(GetPackageHashArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPackageHashResult>("fastly:index/getPackageHash:getPackageHash", args ?? new GetPackageHashArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to generate a SHA512 hash of all files (in sorted order) within the package.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Fastly.GetPackageHash.Invoke(new()
        ///     {
        ///         Filename = "./path/to/package.tar.gz",
        ///     });
        /// 
        ///     var exampleServiceCompute = new Fastly.ServiceCompute("example", new()
        ///     {
        ///         Package = new Fastly.Inputs.ServiceComputePackageArgs
        ///         {
        ///             Filename = "./path/to/package.tar.gz",
        ///             SourceCodeHash = example.Apply(getPackageHashResult =&gt; getPackageHashResult.Hash),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPackageHashResult> Invoke(GetPackageHashInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPackageHashResult>("fastly:index/getPackageHash:getPackageHash", args ?? new GetPackageHashInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to generate a SHA512 hash of all files (in sorted order) within the package.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Fastly.GetPackageHash.Invoke(new()
        ///     {
        ///         Filename = "./path/to/package.tar.gz",
        ///     });
        /// 
        ///     var exampleServiceCompute = new Fastly.ServiceCompute("example", new()
        ///     {
        ///         Package = new Fastly.Inputs.ServiceComputePackageArgs
        ///         {
        ///             Filename = "./path/to/package.tar.gz",
        ///             SourceCodeHash = example.Apply(getPackageHashResult =&gt; getPackageHashResult.Hash),
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPackageHashResult> Invoke(GetPackageHashInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetPackageHashResult>("fastly:index/getPackageHash:getPackageHash", args ?? new GetPackageHashInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPackageHashArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
        /// </summary>
        [Input("content")]
        public string? Content { get; set; }

        /// <summary>
        /// The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
        /// </summary>
        [Input("filename")]
        public string? Filename { get; set; }

        public GetPackageHashArgs()
        {
        }
        public static new GetPackageHashArgs Empty => new GetPackageHashArgs();
    }

    public sealed class GetPackageHashInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
        /// </summary>
        [Input("filename")]
        public Input<string>? Filename { get; set; }

        public GetPackageHashInvokeArgs()
        {
        }
        public static new GetPackageHashInvokeArgs Empty => new GetPackageHashInvokeArgs();
    }


    [OutputType]
    public sealed class GetPackageHashResult
    {
        /// <summary>
        /// The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
        /// </summary>
        public readonly string? Content;
        /// <summary>
        /// The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
        /// </summary>
        public readonly string? Filename;
        /// <summary>
        /// A SHA512 hash of all files (in sorted order) within the package.
        /// </summary>
        public readonly string Hash;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetPackageHashResult(
            string? content,

            string? filename,

            string hash,

            string id)
        {
            Content = content;
            Filename = filename;
            Hash = hash;
            Id = id;
        }
    }
}
