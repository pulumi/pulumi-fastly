// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// ## Import
    /// 
    /// This is an example of the import command being applied to the resource named `fastly_service_dictionary_items.items` The resource ID is a combined value of the `service_id` and `dictionary_id` separated by a forward slash.
    /// 
    /// ```sh
    ///  $ pulumi import fastly:index/serviceDictionaryItems:ServiceDictionaryItems items xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// 
    ///  If Terraform is already managing remote dictionary items against a resource being imported then the user will be asked to remove it from the existing Terraform state. The following is an example of the Terraform state command to remove the resource named `fastly_service_dictionary_items.items` from the Terraform state file. $ terraform state rm fastly_service_dictionary_items.items
    /// </summary>
    [FastlyResourceType("fastly:index/serviceDictionaryItems:ServiceDictionaryItems")]
    public partial class ServiceDictionaryItems : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the dictionary that the items belong to
        /// </summary>
        [Output("dictionaryId")]
        public Output<string> DictionaryId { get; private set; } = null!;

        /// <summary>
        /// A map representing an entry in the dictionary, (key/value)
        /// </summary>
        [Output("items")]
        public Output<ImmutableDictionary<string, object>?> Items { get; private set; } = null!;

        /// <summary>
        /// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
        /// </summary>
        [Output("manageItems")]
        public Output<bool?> ManageItems { get; private set; } = null!;

        /// <summary>
        /// The ID of the service that the dictionary belongs to
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceDictionaryItems resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceDictionaryItems(string name, ServiceDictionaryItemsArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/serviceDictionaryItems:ServiceDictionaryItems", name, args ?? new ServiceDictionaryItemsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceDictionaryItems(string name, Input<string> id, ServiceDictionaryItemsState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/serviceDictionaryItems:ServiceDictionaryItems", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceDictionaryItems resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceDictionaryItems Get(string name, Input<string> id, ServiceDictionaryItemsState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceDictionaryItems(name, id, state, options);
        }
    }

    public sealed class ServiceDictionaryItemsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the dictionary that the items belong to
        /// </summary>
        [Input("dictionaryId", required: true)]
        public Input<string> DictionaryId { get; set; } = null!;

        [Input("items")]
        private InputMap<object>? _items;

        /// <summary>
        /// A map representing an entry in the dictionary, (key/value)
        /// </summary>
        public InputMap<object> Items
        {
            get => _items ?? (_items = new InputMap<object>());
            set => _items = value;
        }

        /// <summary>
        /// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
        /// </summary>
        [Input("manageItems")]
        public Input<bool>? ManageItems { get; set; }

        /// <summary>
        /// The ID of the service that the dictionary belongs to
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public ServiceDictionaryItemsArgs()
        {
        }
        public static new ServiceDictionaryItemsArgs Empty => new ServiceDictionaryItemsArgs();
    }

    public sealed class ServiceDictionaryItemsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the dictionary that the items belong to
        /// </summary>
        [Input("dictionaryId")]
        public Input<string>? DictionaryId { get; set; }

        [Input("items")]
        private InputMap<object>? _items;

        /// <summary>
        /// A map representing an entry in the dictionary, (key/value)
        /// </summary>
        public InputMap<object> Items
        {
            get => _items ?? (_items = new InputMap<object>());
            set => _items = value;
        }

        /// <summary>
        /// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
        /// </summary>
        [Input("manageItems")]
        public Input<bool>? ManageItems { get; set; }

        /// <summary>
        /// The ID of the service that the dictionary belongs to
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        public ServiceDictionaryItemsState()
        {
        }
        public static new ServiceDictionaryItemsState Empty => new ServiceDictionaryItemsState();
    }
}
