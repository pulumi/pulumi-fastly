// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    public static class GetTlsPlatformCertificate
    {
        /// <summary>
        /// Use this data source to get information of a Platform TLS certificate for use with other resources.
        /// 
        /// &gt; **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
        /// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
        /// with any of the others.
        /// 
        /// &gt; **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Fastly.GetTlsPlatformCertificate.InvokeAsync(new Fastly.GetTlsPlatformCertificateArgs
        ///         {
        ///             Domains = 
        ///             {
        ///                 "example.com",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTlsPlatformCertificateResult> InvokeAsync(GetTlsPlatformCertificateArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetTlsPlatformCertificateResult>("fastly:index/getTlsPlatformCertificate:getTlsPlatformCertificate", args ?? new GetTlsPlatformCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to get information of a Platform TLS certificate for use with other resources.
        /// 
        /// &gt; **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
        /// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
        /// with any of the others.
        /// 
        /// &gt; **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Fastly = Pulumi.Fastly;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Fastly.GetTlsPlatformCertificate.InvokeAsync(new Fastly.GetTlsPlatformCertificateArgs
        ///         {
        ///             Domains = 
        ///             {
        ///                 "example.com",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTlsPlatformCertificateResult> Invoke(GetTlsPlatformCertificateInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetTlsPlatformCertificateResult>("fastly:index/getTlsPlatformCertificate:getTlsPlatformCertificate", args ?? new GetTlsPlatformCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTlsPlatformCertificateArgs : Pulumi.InvokeArgs
    {
        [Input("domains")]
        private List<string>? _domains;

        /// <summary>
        /// Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
        /// </summary>
        public List<string> Domains
        {
            get => _domains ?? (_domains = new List<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetTlsPlatformCertificateArgs()
        {
        }
    }

    public sealed class GetTlsPlatformCertificateInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("domains")]
        private InputList<string>? _domains;

        /// <summary>
        /// Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
        /// </summary>
        public InputList<string> Domains
        {
            get => _domains ?? (_domains = new InputList<string>());
            set => _domains = value;
        }

        /// <summary>
        /// Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetTlsPlatformCertificateInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetTlsPlatformCertificateResult
    {
        /// <summary>
        /// ID of TLS configuration used to terminate TLS traffic.
        /// </summary>
        public readonly string ConfigurationId;
        /// <summary>
        /// Timestamp (GMT) when the certificate was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
        /// </summary>
        public readonly ImmutableArray<string> Domains;
        /// <summary>
        /// Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Timestamp (GMT) when the certificate will expire.
        /// </summary>
        public readonly string NotAfter;
        /// <summary>
        /// Timestamp (GMT) when the certificate will become valid.
        /// </summary>
        public readonly string NotBefore;
        /// <summary>
        /// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
        /// </summary>
        public readonly bool Replace;
        /// <summary>
        /// Timestamp (GMT) when the certificate was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetTlsPlatformCertificateResult(
            string configurationId,

            string createdAt,

            ImmutableArray<string> domains,

            string id,

            string notAfter,

            string notBefore,

            bool replace,

            string updatedAt)
        {
            ConfigurationId = configurationId;
            CreatedAt = createdAt;
            Domains = domains;
            Id = id;
            NotAfter = notAfter;
            NotBefore = notBefore;
            Replace = replace;
            UpdatedAt = updatedAt;
        }
    }
}
