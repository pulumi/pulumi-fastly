// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Next-Gen WAF **List** resource scoped to a specific **workspace**.
    /// 
    /// Workspace-scoped lists are local to a workspace and typically used within workspace-specific rules.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Fastly.NgwafWorkspace("example", new()
    ///     {
    ///         Name = "example",
    ///         Description = "Workspace with custom list",
    ///         Mode = "block",
    ///         IpAnonymization = "hashed",
    ///         ClientIpHeaders = new[]
    ///         {
    ///             "X-Forwarded-For",
    ///             "X-Real-IP",
    ///         },
    ///         DefaultBlockingResponseCode = 403,
    ///         AttackSignalThresholds = new Fastly.Inputs.NgwafWorkspaceAttackSignalThresholdsArgs
    ///         {
    ///             OneMinute = 100,
    ///             TenMinutes = 500,
    ///             OneHour = 1000,
    ///             Immediate = true,
    ///         },
    ///     });
    /// 
    ///     var exampleNgwafWorkspaceList = new Fastly.NgwafWorkspaceList("example", new()
    ///     {
    ///         WorkspaceId = example.Id,
    ///         Name = "local-allowlist",
    ///         Description = "IP allowlist for this workspace",
    ///         Type = "ip",
    ///         Entries = new[]
    ///         {
    ///             "192.168.0.1",
    ///             "10.0.0.1",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Next-Gen WAF workspace-scoped lists can be imported using the format `&lt;workspaceID&gt;/&lt;listID&gt;`, e.g.:
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/ngwafWorkspaceList:NgwafWorkspaceList demo &lt;workspaceID&gt;/&lt;listID&gt;
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/ngwafWorkspaceList:NgwafWorkspaceList")]
    public partial class NgwafWorkspaceList : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of the list.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The values in the list.
        /// </summary>
        [Output("entries")]
        public Output<ImmutableArray<string>> Entries { get; private set; } = null!;

        /// <summary>
        /// The name of the list.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NgwafWorkspaceList resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NgwafWorkspaceList(string name, NgwafWorkspaceListArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafWorkspaceList:NgwafWorkspaceList", name, args ?? new NgwafWorkspaceListArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NgwafWorkspaceList(string name, Input<string> id, NgwafWorkspaceListState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafWorkspaceList:NgwafWorkspaceList", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NgwafWorkspaceList resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NgwafWorkspaceList Get(string name, Input<string> id, NgwafWorkspaceListState? state = null, CustomResourceOptions? options = null)
        {
            return new NgwafWorkspaceList(name, id, state, options);
        }
    }

    public sealed class NgwafWorkspaceListArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the list.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("entries", required: true)]
        private InputList<string>? _entries;

        /// <summary>
        /// The values in the list.
        /// </summary>
        public InputList<string> Entries
        {
            get => _entries ?? (_entries = new InputList<string>());
            set => _entries = value;
        }

        /// <summary>
        /// The name of the list.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public NgwafWorkspaceListArgs()
        {
        }
        public static new NgwafWorkspaceListArgs Empty => new NgwafWorkspaceListArgs();
    }

    public sealed class NgwafWorkspaceListState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the list.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("entries")]
        private InputList<string>? _entries;

        /// <summary>
        /// The values in the list.
        /// </summary>
        public InputList<string> Entries
        {
            get => _entries ?? (_entries = new InputList<string>());
            set => _entries = value;
        }

        /// <summary>
        /// The name of the list.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public NgwafWorkspaceListState()
        {
        }
        public static new NgwafWorkspaceListState Empty => new NgwafWorkspaceListState();
    }
}
