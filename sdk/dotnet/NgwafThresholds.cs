// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Next-Gen WAF Threshold.  Operations related to managing workspace thresholds.
    /// 
    /// ## Example Usage
    /// 
    /// Basic usage:
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var demo = new Fastly.NgwafThresholds("demo", new()
    ///     {
    ///         Action = "block",
    ///         DontNotify = false,
    ///         Duration = 86400,
    ///         Enabled = true,
    ///         Interval = 3600,
    ///         Limit = 10,
    ///         Name = "%s",
    ///         Signal = "SQLI",
    ///         WorkspaceId = example.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Fastly Next-Gen WAF Thresholds can be imported using their workspace and Threshold ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/ngwafThresholds:NgwafThresholds example &lt;workspace_id&gt;/&lt;threshold_id&gt;
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/ngwafThresholds:NgwafThresholds")]
    public partial class NgwafThresholds : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Action to take when threshold is exceeded.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Whether to silence notifications when action is taken.
        /// </summary>
        [Output("dontNotify")]
        public Output<bool> DontNotify { get; private set; } = null!;

        /// <summary>
        /// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
        /// </summary>
        [Output("duration")]
        public Output<int> Duration { get; private set; } = null!;

        /// <summary>
        /// Whether this threshold is active.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
        /// </summary>
        [Output("interval")]
        public Output<int> Interval { get; private set; } = null!;

        /// <summary>
        /// Threshold limit. Minimum 1 and maximum 10,000.
        /// </summary>
        [Output("limit")]
        public Output<int> Limit { get; private set; } = null!;

        /// <summary>
        /// The name of the threshold.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the signal this threshold is acting on.
        /// </summary>
        [Output("signal")]
        public Output<string> Signal { get; private set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Output("workspaceId")]
        public Output<string> WorkspaceId { get; private set; } = null!;


        /// <summary>
        /// Create a NgwafThresholds resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NgwafThresholds(string name, NgwafThresholdsArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafThresholds:NgwafThresholds", name, args ?? new NgwafThresholdsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NgwafThresholds(string name, Input<string> id, NgwafThresholdsState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/ngwafThresholds:NgwafThresholds", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NgwafThresholds resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NgwafThresholds Get(string name, Input<string> id, NgwafThresholdsState? state = null, CustomResourceOptions? options = null)
        {
            return new NgwafThresholds(name, id, state, options);
        }
    }

    public sealed class NgwafThresholdsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to take when threshold is exceeded.
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Whether to silence notifications when action is taken.
        /// </summary>
        [Input("dontNotify", required: true)]
        public Input<bool> DontNotify { get; set; } = null!;

        /// <summary>
        /// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
        /// </summary>
        [Input("duration", required: true)]
        public Input<int> Duration { get; set; } = null!;

        /// <summary>
        /// Whether this threshold is active.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
        /// </summary>
        [Input("interval", required: true)]
        public Input<int> Interval { get; set; } = null!;

        /// <summary>
        /// Threshold limit. Minimum 1 and maximum 10,000.
        /// </summary>
        [Input("limit", required: true)]
        public Input<int> Limit { get; set; } = null!;

        /// <summary>
        /// The name of the threshold.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the signal this threshold is acting on.
        /// </summary>
        [Input("signal", required: true)]
        public Input<string> Signal { get; set; } = null!;

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public NgwafThresholdsArgs()
        {
        }
        public static new NgwafThresholdsArgs Empty => new NgwafThresholdsArgs();
    }

    public sealed class NgwafThresholdsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Action to take when threshold is exceeded.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Whether to silence notifications when action is taken.
        /// </summary>
        [Input("dontNotify")]
        public Input<bool>? DontNotify { get; set; }

        /// <summary>
        /// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
        /// </summary>
        [Input("duration")]
        public Input<int>? Duration { get; set; }

        /// <summary>
        /// Whether this threshold is active.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
        /// </summary>
        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// Threshold limit. Minimum 1 and maximum 10,000.
        /// </summary>
        [Input("limit")]
        public Input<int>? Limit { get; set; }

        /// <summary>
        /// The name of the threshold.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the signal this threshold is acting on.
        /// </summary>
        [Input("signal")]
        public Input<string>? Signal { get; set; }

        /// <summary>
        /// The ID of the workspace.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public NgwafThresholdsState()
        {
        }
        public static new NgwafThresholdsState Empty => new NgwafThresholdsState();
    }
}
