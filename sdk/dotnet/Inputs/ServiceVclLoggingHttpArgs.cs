// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Inputs
{

    public sealed class ServiceVclLoggingHttpArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Value of the `Content-Type` header sent with the request
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// Custom header sent with the request
        /// </summary>
        [Input("headerName")]
        public Input<string>? HeaderName { get; set; }

        /// <summary>
        /// Value of the custom header sent with the request
        /// </summary>
        [Input("headerValue")]
        public Input<string>? HeaderValue { get; set; }

        /// <summary>
        /// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
        /// </summary>
        [Input("jsonFormat")]
        public Input<string>? JsonFormat { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The maximum number of bytes sent in one request
        /// </summary>
        [Input("requestMaxBytes")]
        public Input<int>? RequestMaxBytes { get; set; }

        /// <summary>
        /// The maximum number of logs sent in one request
        /// </summary>
        [Input("requestMaxEntries")]
        public Input<int>? RequestMaxEntries { get; set; }

        /// <summary>
        /// The name of the condition to apply
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// A secure certificate to authenticate the server with. Must be in PEM format
        /// </summary>
        [Input("tlsCaCert")]
        public Input<string>? TlsCaCert { get; set; }

        /// <summary>
        /// The client certificate used to make authenticated requests. Must be in PEM format
        /// </summary>
        [Input("tlsClientCert")]
        public Input<string>? TlsClientCert { get; set; }

        [Input("tlsClientKey")]
        private Input<string>? _tlsClientKey;

        /// <summary>
        /// The client private key used to make authenticated requests. Must be in PEM format
        /// </summary>
        public Input<string>? TlsClientKey
        {
            get => _tlsClientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tlsClientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Used during the TLS handshake to validate the certificate
        /// </summary>
        [Input("tlsHostname")]
        public Input<string>? TlsHostname { get; set; }

        /// <summary>
        /// URL that log data will be sent to. Must use the https protocol
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public ServiceVclLoggingHttpArgs()
        {
        }
        public static new ServiceVclLoggingHttpArgs Empty => new ServiceVclLoggingHttpArgs();
    }
}
