// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Inputs
{

    public sealed class Servicev1GzipArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("contentTypes")]
        private InputList<string>? _contentTypes;

        /// <summary>
        /// The content-type for each type of content you wish to
        /// have dynamically gzip'ed. Example: `["text/html", "text/css"]`.
        /// </summary>
        public InputList<string> ContentTypes
        {
            get => _contentTypes ?? (_contentTypes = new InputList<string>());
            set => _contentTypes = value;
        }

        [Input("extensions")]
        private InputList<string>? _extensions;

        /// <summary>
        /// File extensions for each file type to dynamically
        /// gzip. Example: `["css", "js"]`.
        /// </summary>
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1GzipArgs()
        {
        }
    }
}
