// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Inputs
{

    public sealed class ServiceComputeBackendArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An IPv4, hostname, or IPv6 address for the Backend
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// How long to wait between bytes in milliseconds. Default `10000`
        /// </summary>
        [Input("betweenBytesTimeout")]
        public Input<int>? BetweenBytesTimeout { get; set; }

        /// <summary>
        /// How long to wait for a timeout in milliseconds. Default `1000`
        /// </summary>
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        /// <summary>
        /// Number of errors to allow before the Backend is marked as down. Default `0`
        /// </summary>
        [Input("errorThreshold")]
        public Input<int>? ErrorThreshold { get; set; }

        /// <summary>
        /// How long to wait for the first bytes in milliseconds. Default `15000`
        /// </summary>
        [Input("firstByteTimeout")]
        public Input<int>? FirstByteTimeout { get; set; }

        /// <summary>
        /// Name of a defined `Healthcheck` to assign to this backend
        /// </summary>
        [Input("healthcheck")]
        public Input<string>? Healthcheck { get; set; }

        /// <summary>
        /// How long in seconds to keep a persistent connection to the backend between requests.
        /// </summary>
        [Input("keepaliveTime")]
        public Input<int>? KeepaliveTime { get; set; }

        /// <summary>
        /// Maximum number of connections for this Backend. Default `200`
        /// </summary>
        [Input("maxConn")]
        public Input<int>? MaxConn { get; set; }

        /// <summary>
        /// Maximum allowed TLS version on SSL connections to this backend.
        /// </summary>
        [Input("maxTlsVersion")]
        public Input<string>? MaxTlsVersion { get; set; }

        /// <summary>
        /// Minimum allowed TLS version on SSL connections to this backend.
        /// </summary>
        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The hostname to override the Host header
        /// </summary>
        [Input("overrideHost")]
        public Input<string>? OverrideHost { get; set; }

        /// <summary>
        /// The port number on which the Backend responds. Default `80`
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Prefer IPv6 connections to origins for hostname backends. Default `True`
        /// </summary>
        [Input("preferIpv6")]
        public Input<bool>? PreferIpv6 { get; set; }

        /// <summary>
        /// Value that when shared across backends will enable those backends to share the same health check.
        /// </summary>
        [Input("shareKey")]
        public Input<string>? ShareKey { get; set; }

        /// <summary>
        /// The POP of the shield designated to reduce inbound load. Valid values for `Shield` are included in the `GET /datacenters` API response
        /// </summary>
        [Input("shield")]
        public Input<string>? Shield { get; set; }

        /// <summary>
        /// CA certificate attached to origin.
        /// </summary>
        [Input("sslCaCert")]
        public Input<string>? SslCaCert { get; set; }

        /// <summary>
        /// Configure certificate validation. Does not affect SNI at all
        /// </summary>
        [Input("sslCertHostname")]
        public Input<string>? SslCertHostname { get; set; }

        /// <summary>
        /// Be strict about checking SSL certs. Default `True`
        /// </summary>
        [Input("sslCheckCert")]
        public Input<bool>? SslCheckCert { get; set; }

        /// <summary>
        /// Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
        /// </summary>
        [Input("sslCiphers")]
        public Input<string>? SslCiphers { get; set; }

        [Input("sslClientCert")]
        private Input<string>? _sslClientCert;

        /// <summary>
        /// Client certificate attached to origin. Used when connecting to the backend
        /// </summary>
        public Input<string>? SslClientCert
        {
            get => _sslClientCert;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sslClientCert = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("sslClientKey")]
        private Input<string>? _sslClientKey;

        /// <summary>
        /// Client key attached to origin. Used when connecting to the backend
        /// </summary>
        public Input<string>? SslClientKey
        {
            get => _sslClientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _sslClientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Configure SNI in the TLS handshake. Does not affect cert validation at all
        /// </summary>
        [Input("sslSniHostname")]
        public Input<string>? SslSniHostname { get; set; }

        /// <summary>
        /// Whether or not to use SSL to reach the Backend. Default `False`
        /// </summary>
        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        /// <summary>
        /// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public ServiceComputeBackendArgs()
        {
        }
        public static new ServiceComputeBackendArgs Empty => new ServiceComputeBackendArgs();
    }
}
