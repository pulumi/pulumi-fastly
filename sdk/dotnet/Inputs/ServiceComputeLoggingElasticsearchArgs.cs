// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Inputs
{

    public sealed class ServiceComputeLoggingElasticsearchArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the Elasticsearch index to send documents (logs) to
        /// </summary>
        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        /// <summary>
        /// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// BasicAuth password for Elasticsearch
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
        /// </summary>
        [Input("pipeline")]
        public Input<string>? Pipeline { get; set; }

        /// <summary>
        /// Region where logs will be processed before streaming to BigQuery. Valid values are 'none', 'us' and 'eu'.
        /// </summary>
        [Input("processingRegion")]
        public Input<string>? ProcessingRegion { get; set; }

        /// <summary>
        /// The maximum number of logs sent in one request. Defaults to `0` for unbounded
        /// </summary>
        [Input("requestMaxBytes")]
        public Input<int>? RequestMaxBytes { get; set; }

        /// <summary>
        /// The maximum number of bytes sent in one request. Defaults to `0` for unbounded
        /// </summary>
        [Input("requestMaxEntries")]
        public Input<int>? RequestMaxEntries { get; set; }

        /// <summary>
        /// A secure certificate to authenticate the server with. Must be in PEM format
        /// </summary>
        [Input("tlsCaCert")]
        public Input<string>? TlsCaCert { get; set; }

        /// <summary>
        /// The client certificate used to make authenticated requests. Must be in PEM format
        /// </summary>
        [Input("tlsClientCert")]
        public Input<string>? TlsClientCert { get; set; }

        [Input("tlsClientKey")]
        private Input<string>? _tlsClientKey;

        /// <summary>
        /// The client private key used to make authenticated requests. Must be in PEM format
        /// </summary>
        public Input<string>? TlsClientKey
        {
            get => _tlsClientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tlsClientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
        /// </summary>
        [Input("tlsHostname")]
        public Input<string>? TlsHostname { get; set; }

        /// <summary>
        /// The Elasticsearch URL to stream logs to
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// BasicAuth username for Elasticsearch
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ServiceComputeLoggingElasticsearchArgs()
        {
        }
        public static new ServiceComputeLoggingElasticsearchArgs Empty => new ServiceComputeLoggingElasticsearchArgs();
    }
}
