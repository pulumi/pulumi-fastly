// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Inputs
{

    public sealed class ServiceComputeLoggingSplunkGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
        /// </summary>
        [Input("tlsCaCert")]
        public Input<string>? TlsCaCert { get; set; }

        /// <summary>
        /// The client certificate used to make authenticated requests. Must be in PEM format.
        /// </summary>
        [Input("tlsClientCert")]
        public Input<string>? TlsClientCert { get; set; }

        [Input("tlsClientKey")]
        private Input<string>? _tlsClientKey;

        /// <summary>
        /// The client private key used to make authenticated requests. Must be in PEM format.
        /// </summary>
        public Input<string>? TlsClientKey
        {
            get => _tlsClientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tlsClientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
        /// </summary>
        [Input("tlsHostname")]
        public Input<string>? TlsHostname { get; set; }

        [Input("token", required: true)]
        private Input<string>? _token;

        /// <summary>
        /// The Splunk token to be used for authentication
        /// </summary>
        public Input<string>? Token
        {
            get => _token;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _token = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The Splunk URL to stream logs to
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Whether to use TLS for secure logging. Default: `false`
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public ServiceComputeLoggingSplunkGetArgs()
        {
        }
        public static new ServiceComputeLoggingSplunkGetArgs Empty => new ServiceComputeLoggingSplunkGetArgs();
    }
}
