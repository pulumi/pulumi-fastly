// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Inputs
{

    public sealed class NgwafWorkspaceRuleRateLimitGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("clientIdentifiers", required: true)]
        private InputList<Inputs.NgwafWorkspaceRuleRateLimitClientIdentifierGetArgs>? _clientIdentifiers;

        /// <summary>
        /// List of client identifiers used for rate limiting. Can only be length 1 or 2.
        /// </summary>
        public InputList<Inputs.NgwafWorkspaceRuleRateLimitClientIdentifierGetArgs> ClientIdentifiers
        {
            get => _clientIdentifiers ?? (_clientIdentifiers = new InputList<Inputs.NgwafWorkspaceRuleRateLimitClientIdentifierGetArgs>());
            set => _clientIdentifiers = value;
        }

        /// <summary>
        /// Duration in seconds for the rate limit.
        /// </summary>
        [Input("duration", required: true)]
        public Input<int> Duration { get; set; } = null!;

        /// <summary>
        /// Time interval for the rate limit in seconds. Accepted values are 60, 600, and 3600.
        /// </summary>
        [Input("interval", required: true)]
        public Input<int> Interval { get; set; } = null!;

        /// <summary>
        /// Reference ID of the custom signal this rule uses to count requests.
        /// </summary>
        [Input("signal", required: true)]
        public Input<string> Signal { get; set; } = null!;

        /// <summary>
        /// Rate limit threshold. Minimum 1 and maximum 10,000.
        /// </summary>
        [Input("threshold", required: true)]
        public Input<int> Threshold { get; set; } = null!;

        public NgwafWorkspaceRuleRateLimitGetArgs()
        {
        }
        public static new NgwafWorkspaceRuleRateLimitGetArgs Empty => new NgwafWorkspaceRuleRateLimitGetArgs();
    }
}
