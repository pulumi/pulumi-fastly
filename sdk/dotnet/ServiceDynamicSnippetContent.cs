// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// ## Import
    /// 
    /// This is an example of the import command being applied to the resource named `fastly_service_dynamic_snippet_content.content`
    /// 
    /// The resource ID is a combined value of the `service_id` and `snippet_id` separated by a forward slash.
    /// 
    /// ```sh
    /// $ pulumi import fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent content xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
    /// ```
    /// 
    /// If Terraform is already managing remote content against a resource being imported then the user will be asked to remove it from the existing Terraform state.
    /// 
    /// The following is an example of the Terraform state command to remove the resource named `fastly_service_dynamic_snippet_content.content` from the Terraform state file.
    /// 
    /// $ terraform state rm fastly_service_dynamic_snippet_content.content
    /// </summary>
    [FastlyResourceType("fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent")]
    public partial class ServiceDynamicSnippetContent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The VCL code that specifies exactly what the snippet does
        /// </summary>
        [Output("content")]
        public Output<string> Content { get; private set; } = null!;

        /// <summary>
        /// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
        /// </summary>
        [Output("manageSnippets")]
        public Output<bool?> ManageSnippets { get; private set; } = null!;

        /// <summary>
        /// The ID of the service that the dynamic snippet belongs to
        /// </summary>
        [Output("serviceId")]
        public Output<string> ServiceId { get; private set; } = null!;

        /// <summary>
        /// The ID of the dynamic snippet that the content belong to
        /// </summary>
        [Output("snippetId")]
        public Output<string> SnippetId { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceDynamicSnippetContent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceDynamicSnippetContent(string name, ServiceDynamicSnippetContentArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent", name, args ?? new ServiceDynamicSnippetContentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServiceDynamicSnippetContent(string name, Input<string> id, ServiceDynamicSnippetContentState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceDynamicSnippetContent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceDynamicSnippetContent Get(string name, Input<string> id, ServiceDynamicSnippetContentState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceDynamicSnippetContent(name, id, state, options);
        }
    }

    public sealed class ServiceDynamicSnippetContentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The VCL code that specifies exactly what the snippet does
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
        /// </summary>
        [Input("manageSnippets")]
        public Input<bool>? ManageSnippets { get; set; }

        /// <summary>
        /// The ID of the service that the dynamic snippet belongs to
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        /// <summary>
        /// The ID of the dynamic snippet that the content belong to
        /// </summary>
        [Input("snippetId", required: true)]
        public Input<string> SnippetId { get; set; } = null!;

        public ServiceDynamicSnippetContentArgs()
        {
        }
        public static new ServiceDynamicSnippetContentArgs Empty => new ServiceDynamicSnippetContentArgs();
    }

    public sealed class ServiceDynamicSnippetContentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The VCL code that specifies exactly what the snippet does
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
        /// </summary>
        [Input("manageSnippets")]
        public Input<bool>? ManageSnippets { get; set; }

        /// <summary>
        /// The ID of the service that the dynamic snippet belongs to
        /// </summary>
        [Input("serviceId")]
        public Input<string>? ServiceId { get; set; }

        /// <summary>
        /// The ID of the dynamic snippet that the content belong to
        /// </summary>
        [Input("snippetId")]
        public Input<string>? SnippetId { get; set; }

        public ServiceDynamicSnippetContentState()
        {
        }
        public static new ServiceDynamicSnippetContentState Empty => new ServiceDynamicSnippetContentState();
    }
}
