// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Fastly = Pulumi.Fastly;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var mailinglistExample = new Fastly.Integration("mailinglist_example", new()
    ///     {
    ///         Name = "my mailing list integration",
    ///         Description = "example mailing list integration",
    ///         Type = "mailinglist",
    ///         Config = 
    ///         {
    ///             { "address", "incoming-hook@my.domain.com" },
    ///         },
    ///     });
    /// 
    ///     var microsoftteamsExample = new Fastly.Integration("microsoftteams_example", new()
    ///     {
    ///         Name = "my Microsoft Teams integration",
    ///         Description = "example Microsoft Teams integration",
    ///         Type = "microsoftteams",
    ///         Config = 
    ///         {
    ///             { "webhook", "https://m365x012345.webhook.office.com" },
    ///         },
    ///     });
    /// 
    ///     var newrelicExample = new Fastly.Integration("newrelic_example", new()
    ///     {
    ///         Name = "my New Relic integration",
    ///         Description = "example New Relic integration",
    ///         Type = "newrelic",
    ///         Config = 
    ///         {
    ///             { "account", "XXXXXXX" },
    ///             { "key", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" },
    ///         },
    ///     });
    /// 
    ///     var pagerdutyExample = new Fastly.Integration("pagerduty_example", new()
    ///     {
    ///         Name = "my PagerDuty integration",
    ///         Description = "example PagerDuty integration",
    ///         Type = "pagerduty",
    ///         Config = 
    ///         {
    ///             { "key", "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" },
    ///         },
    ///     });
    /// 
    ///     var slackExample = new Fastly.Integration("slack_example", new()
    ///     {
    ///         Name = "my Slack integration",
    ///         Description = "example Slack integration",
    ///         Type = "slack",
    ///         Config = 
    ///         {
    ///             { "webhook", "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX" },
    ///         },
    ///     });
    /// 
    ///     var webhookExample = new Fastly.Integration("webhook_example", new()
    ///     {
    ///         Name = "my webhook integration",
    ///         Description = "example webhook integration",
    ///         Type = "webhook",
    ///         Config = 
    ///         {
    ///             { "webhook", "https://my.domain.com/webhook" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [FastlyResourceType("fastly:index/integration:Integration")]
    public partial class Integration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration specific to the integration `type` (see documentation examples).
        /// </summary>
        [Output("config")]
        public Output<ImmutableDictionary<string, string>> Config { get; private set; } = null!;

        /// <summary>
        /// User submitted description of the integration.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// User submitted name of the integration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Type of the integration. One of: `mailinglist`, `microsoftteams`, `newrelic`, `pagerduty`, `slack`, `webhook`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Integration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Integration(string name, IntegrationArgs args, CustomResourceOptions? options = null)
            : base("fastly:index/integration:Integration", name, args ?? new IntegrationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Integration(string name, Input<string> id, IntegrationState? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/integration:Integration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "config",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Integration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Integration Get(string name, Input<string> id, IntegrationState? state = null, CustomResourceOptions? options = null)
        {
            return new Integration(name, id, state, options);
        }
    }

    public sealed class IntegrationArgs : global::Pulumi.ResourceArgs
    {
        [Input("config", required: true)]
        private InputMap<string>? _config;

        /// <summary>
        /// Configuration specific to the integration `type` (see documentation examples).
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _config = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// User submitted description of the integration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User submitted name of the integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of the integration. One of: `mailinglist`, `microsoftteams`, `newrelic`, `pagerduty`, `slack`, `webhook`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public IntegrationArgs()
        {
        }
        public static new IntegrationArgs Empty => new IntegrationArgs();
    }

    public sealed class IntegrationState : global::Pulumi.ResourceArgs
    {
        [Input("config")]
        private InputMap<string>? _config;

        /// <summary>
        /// Configuration specific to the integration `type` (see documentation examples).
        /// </summary>
        public InputMap<string> Config
        {
            get => _config ?? (_config = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _config = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// User submitted description of the integration.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// User submitted name of the integration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Type of the integration. One of: `mailinglist`, `microsoftteams`, `newrelic`, `pagerduty`, `slack`, `webhook`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public IntegrationState()
        {
        }
        public static new IntegrationState Empty => new IntegrationState();
    }
}
