// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceComputeDictionary {
    /**
     * @return The ID of the dictionary
     * 
     */
    private @Nullable String dictionaryId;
    /**
     * @return Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
     * 
     */
    private @Nullable Boolean forceDestroy;
    /**
     * @return A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
     * 
     */
    private String name;
    private @Nullable Boolean writeOnly;

    private ServiceComputeDictionary() {}
    /**
     * @return The ID of the dictionary
     * 
     */
    public Optional<String> dictionaryId() {
        return Optional.ofNullable(this.dictionaryId);
    }
    /**
     * @return Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
     * 
     */
    public Optional<Boolean> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }
    /**
     * @return A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
     * 
     */
    public String name() {
        return this.name;
    }
    public Optional<Boolean> writeOnly() {
        return Optional.ofNullable(this.writeOnly);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceComputeDictionary defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String dictionaryId;
        private @Nullable Boolean forceDestroy;
        private String name;
        private @Nullable Boolean writeOnly;
        public Builder() {}
        public Builder(ServiceComputeDictionary defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dictionaryId = defaults.dictionaryId;
    	      this.forceDestroy = defaults.forceDestroy;
    	      this.name = defaults.name;
    	      this.writeOnly = defaults.writeOnly;
        }

        @CustomType.Setter
        public Builder dictionaryId(@Nullable String dictionaryId) {

            this.dictionaryId = dictionaryId;
            return this;
        }
        @CustomType.Setter
        public Builder forceDestroy(@Nullable Boolean forceDestroy) {

            this.forceDestroy = forceDestroy;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceComputeDictionary", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder writeOnly(@Nullable Boolean writeOnly) {

            this.writeOnly = writeOnly;
            return this;
        }
        public ServiceComputeDictionary build() {
            final var _resultValue = new ServiceComputeDictionary();
            _resultValue.dictionaryId = dictionaryId;
            _resultValue.forceDestroy = forceDestroy;
            _resultValue.name = name;
            _resultValue.writeOnly = writeOnly;
            return _resultValue;
        }
    }
}
