// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;


public final class NgwafVirtualPatchesArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgwafVirtualPatchesArgs Empty = new NgwafVirtualPatchesArgs();

    /**
     * Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Control for enabling and disabling a virtual patch.
     * 
     */
    @Import(name="enabled", required=true)
    private Output<Boolean> enabled;

    /**
     * @return Control for enabling and disabling a virtual patch.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }

    /**
     * The ID of the virtual patch.
     * 
     */
    @Import(name="virtualPatchId", required=true)
    private Output<String> virtualPatchId;

    /**
     * @return The ID of the virtual patch.
     * 
     */
    public Output<String> virtualPatchId() {
        return this.virtualPatchId;
    }

    /**
     * The ID of the workspace.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private NgwafVirtualPatchesArgs() {}

    private NgwafVirtualPatchesArgs(NgwafVirtualPatchesArgs $) {
        this.action = $.action;
        this.enabled = $.enabled;
        this.virtualPatchId = $.virtualPatchId;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafVirtualPatchesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafVirtualPatchesArgs $;

        public Builder() {
            $ = new NgwafVirtualPatchesArgs();
        }

        public Builder(NgwafVirtualPatchesArgs defaults) {
            $ = new NgwafVirtualPatchesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param enabled Control for enabling and disabling a virtual patch.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Control for enabling and disabling a virtual patch.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param virtualPatchId The ID of the virtual patch.
         * 
         * @return builder
         * 
         */
        public Builder virtualPatchId(Output<String> virtualPatchId) {
            $.virtualPatchId = virtualPatchId;
            return this;
        }

        /**
         * @param virtualPatchId The ID of the virtual patch.
         * 
         * @return builder
         * 
         */
        public Builder virtualPatchId(String virtualPatchId) {
            return virtualPatchId(Output.of(virtualPatchId));
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public NgwafVirtualPatchesArgs build() {
            if ($.action == null) {
                throw new MissingRequiredPropertyException("NgwafVirtualPatchesArgs", "action");
            }
            if ($.enabled == null) {
                throw new MissingRequiredPropertyException("NgwafVirtualPatchesArgs", "enabled");
            }
            if ($.virtualPatchId == null) {
                throw new MissingRequiredPropertyException("NgwafVirtualPatchesArgs", "virtualPatchId");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("NgwafVirtualPatchesArgs", "workspaceId");
            }
            return $;
        }
    }

}
