// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgwafThresholdsState extends com.pulumi.resources.ResourceArgs {

    public static final NgwafThresholdsState Empty = new NgwafThresholdsState();

    /**
     * Action to take when threshold is exceeded.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Action to take when threshold is exceeded.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Whether to silence notifications when action is taken.
     * 
     */
    @Import(name="dontNotify")
    private @Nullable Output<Boolean> dontNotify;

    /**
     * @return Whether to silence notifications when action is taken.
     * 
     */
    public Optional<Output<Boolean>> dontNotify() {
        return Optional.ofNullable(this.dontNotify);
    }

    /**
     * Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
     * 
     */
    @Import(name="duration")
    private @Nullable Output<Integer> duration;

    /**
     * @return Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
     * 
     */
    public Optional<Output<Integer>> duration() {
        return Optional.ofNullable(this.duration);
    }

    /**
     * Whether this threshold is active.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether this threshold is active.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * Threshold limit. Minimum 1 and maximum 10,000.
     * 
     */
    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    /**
     * @return Threshold limit. Minimum 1 and maximum 10,000.
     * 
     */
    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    /**
     * The name of the threshold.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the threshold.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The name of the signal this threshold is acting on.
     * 
     */
    @Import(name="signal")
    private @Nullable Output<String> signal;

    /**
     * @return The name of the signal this threshold is acting on.
     * 
     */
    public Optional<Output<String>> signal() {
        return Optional.ofNullable(this.signal);
    }

    /**
     * The ID of the workspace.
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private NgwafThresholdsState() {}

    private NgwafThresholdsState(NgwafThresholdsState $) {
        this.action = $.action;
        this.dontNotify = $.dontNotify;
        this.duration = $.duration;
        this.enabled = $.enabled;
        this.interval = $.interval;
        this.limit = $.limit;
        this.name = $.name;
        this.signal = $.signal;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafThresholdsState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafThresholdsState $;

        public Builder() {
            $ = new NgwafThresholdsState();
        }

        public Builder(NgwafThresholdsState defaults) {
            $ = new NgwafThresholdsState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to take when threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to take when threshold is exceeded.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param dontNotify Whether to silence notifications when action is taken.
         * 
         * @return builder
         * 
         */
        public Builder dontNotify(@Nullable Output<Boolean> dontNotify) {
            $.dontNotify = dontNotify;
            return this;
        }

        /**
         * @param dontNotify Whether to silence notifications when action is taken.
         * 
         * @return builder
         * 
         */
        public Builder dontNotify(Boolean dontNotify) {
            return dontNotify(Output.of(dontNotify));
        }

        /**
         * @param duration Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
         * 
         * @return builder
         * 
         */
        public Builder duration(@Nullable Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param enabled Whether this threshold is active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether this threshold is active.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param interval Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param limit Threshold limit. Minimum 1 and maximum 10,000.
         * 
         * @return builder
         * 
         */
        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        /**
         * @param limit Threshold limit. Minimum 1 and maximum 10,000.
         * 
         * @return builder
         * 
         */
        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        /**
         * @param name The name of the threshold.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the threshold.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param signal The name of the signal this threshold is acting on.
         * 
         * @return builder
         * 
         */
        public Builder signal(@Nullable Output<String> signal) {
            $.signal = signal;
            return this;
        }

        /**
         * @param signal The name of the signal this threshold is acting on.
         * 
         * @return builder
         * 
         */
        public Builder signal(String signal) {
            return signal(Output.of(signal));
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public NgwafThresholdsState build() {
            return $;
        }
    }

}
