// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTlsActivationArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTlsActivationArgs Empty = new GetTlsActivationArgs();

    /**
     * ID of the TLS Certificate used.
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return ID of the TLS Certificate used.
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * ID of the TLS Configuration used.
     * 
     */
    @Import(name="configurationId")
    private @Nullable Output<String> configurationId;

    /**
     * @return ID of the TLS Configuration used.
     * 
     */
    public Optional<Output<String>> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * Domain that TLS was enabled on.
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return Domain that TLS was enabled on.
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * Fastly Activation ID. Conflicts with all other filters.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return Fastly Activation ID. Conflicts with all other filters.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    private GetTlsActivationArgs() {}

    private GetTlsActivationArgs(GetTlsActivationArgs $) {
        this.certificateId = $.certificateId;
        this.configurationId = $.configurationId;
        this.domain = $.domain;
        this.id = $.id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTlsActivationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTlsActivationArgs $;

        public Builder() {
            $ = new GetTlsActivationArgs();
        }

        public Builder(GetTlsActivationArgs defaults) {
            $ = new GetTlsActivationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId ID of the TLS Certificate used.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId ID of the TLS Certificate used.
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param configurationId ID of the TLS Configuration used.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId ID of the TLS Configuration used.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param domain Domain that TLS was enabled on.
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain Domain that TLS was enabled on.
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param id Fastly Activation ID. Conflicts with all other filters.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Fastly Activation ID. Conflicts with all other filters.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public GetTlsActivationArgs build() {
            return $;
        }
    }

}
