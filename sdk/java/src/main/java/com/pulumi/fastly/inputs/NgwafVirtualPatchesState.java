// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgwafVirtualPatchesState extends com.pulumi.resources.ResourceArgs {

    public static final NgwafVirtualPatchesState Empty = new NgwafVirtualPatchesState();

    /**
     * Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Control for enabling and disabling a virtual patch.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Control for enabling and disabling a virtual patch.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The ID of the virtual patch.
     * 
     */
    @Import(name="virtualPatchId")
    private @Nullable Output<String> virtualPatchId;

    /**
     * @return The ID of the virtual patch.
     * 
     */
    public Optional<Output<String>> virtualPatchId() {
        return Optional.ofNullable(this.virtualPatchId);
    }

    /**
     * The ID of the workspace.
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private NgwafVirtualPatchesState() {}

    private NgwafVirtualPatchesState(NgwafVirtualPatchesState $) {
        this.action = $.action;
        this.enabled = $.enabled;
        this.virtualPatchId = $.virtualPatchId;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafVirtualPatchesState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafVirtualPatchesState $;

        public Builder() {
            $ = new NgwafVirtualPatchesState();
        }

        public Builder(NgwafVirtualPatchesState defaults) {
            $ = new NgwafVirtualPatchesState(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param enabled Control for enabling and disabling a virtual patch.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Control for enabling and disabling a virtual patch.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param virtualPatchId The ID of the virtual patch.
         * 
         * @return builder
         * 
         */
        public Builder virtualPatchId(@Nullable Output<String> virtualPatchId) {
            $.virtualPatchId = virtualPatchId;
            return this;
        }

        /**
         * @param virtualPatchId The ID of the virtual patch.
         * 
         * @return builder
         * 
         */
        public Builder virtualPatchId(String virtualPatchId) {
            return virtualPatchId(Output.of(virtualPatchId));
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public NgwafVirtualPatchesState build() {
            return $;
        }
    }

}
