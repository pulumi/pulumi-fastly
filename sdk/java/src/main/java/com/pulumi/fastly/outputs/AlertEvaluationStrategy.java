// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AlertEvaluationStrategy {
    /**
     * @return Threshold for the denominator value used in evaluations that calculate a rate or ratio. Usually used to filter out noise.
     * 
     */
    private @Nullable Double ignoreBelow;
    /**
     * @return The length of time to evaluate whether the conditions have been met. The data is polled every minute. One of: `2m`, `3m`, `5m`, `15m`, `30m`.
     * 
     */
    private String period;
    /**
     * @return Threshold used to alert.
     * 
     */
    private Double threshold;
    /**
     * @return Type of strategy to use to evaluate. One of: `aboveThreshold`, `allAboveThreshold`, `belowThreshold`, `percentAbsolute`, `percentDecrease`, `percentIncrease`.
     * 
     */
    private String type;

    private AlertEvaluationStrategy() {}
    /**
     * @return Threshold for the denominator value used in evaluations that calculate a rate or ratio. Usually used to filter out noise.
     * 
     */
    public Optional<Double> ignoreBelow() {
        return Optional.ofNullable(this.ignoreBelow);
    }
    /**
     * @return The length of time to evaluate whether the conditions have been met. The data is polled every minute. One of: `2m`, `3m`, `5m`, `15m`, `30m`.
     * 
     */
    public String period() {
        return this.period;
    }
    /**
     * @return Threshold used to alert.
     * 
     */
    public Double threshold() {
        return this.threshold;
    }
    /**
     * @return Type of strategy to use to evaluate. One of: `aboveThreshold`, `allAboveThreshold`, `belowThreshold`, `percentAbsolute`, `percentDecrease`, `percentIncrease`.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AlertEvaluationStrategy defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double ignoreBelow;
        private String period;
        private Double threshold;
        private String type;
        public Builder() {}
        public Builder(AlertEvaluationStrategy defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ignoreBelow = defaults.ignoreBelow;
    	      this.period = defaults.period;
    	      this.threshold = defaults.threshold;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder ignoreBelow(@Nullable Double ignoreBelow) {

            this.ignoreBelow = ignoreBelow;
            return this;
        }
        @CustomType.Setter
        public Builder period(String period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("AlertEvaluationStrategy", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Double threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("AlertEvaluationStrategy", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("AlertEvaluationStrategy", "type");
            }
            this.type = type;
            return this;
        }
        public AlertEvaluationStrategy build() {
            final var _resultValue = new AlertEvaluationStrategy();
            _resultValue.ignoreBelow = ignoreBelow;
            _resultValue.period = period;
            _resultValue.threshold = threshold;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
