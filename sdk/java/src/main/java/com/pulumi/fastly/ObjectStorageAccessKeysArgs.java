// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ObjectStorageAccessKeysArgs extends com.pulumi.resources.ResourceArgs {

    public static final ObjectStorageAccessKeysArgs Empty = new ObjectStorageAccessKeysArgs();

    /**
     * Optional list of buckets the access key will be associated with.  Example: `[&#34;bucket1&#34;, &#34;bucket2&#34;]`
     * 
     */
    @Import(name="buckets")
    private @Nullable Output<List<String>> buckets;

    /**
     * @return Optional list of buckets the access key will be associated with.  Example: `[&#34;bucket1&#34;, &#34;bucket2&#34;]`
     * 
     */
    public Optional<Output<List<String>>> buckets() {
        return Optional.ofNullable(this.buckets);
    }

    /**
     * The description of the access key
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the access key
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * The permissions of the access key
     * 
     */
    @Import(name="permission", required=true)
    private Output<String> permission;

    /**
     * @return The permissions of the access key
     * 
     */
    public Output<String> permission() {
        return this.permission;
    }

    private ObjectStorageAccessKeysArgs() {}

    private ObjectStorageAccessKeysArgs(ObjectStorageAccessKeysArgs $) {
        this.buckets = $.buckets;
        this.description = $.description;
        this.permission = $.permission;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ObjectStorageAccessKeysArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ObjectStorageAccessKeysArgs $;

        public Builder() {
            $ = new ObjectStorageAccessKeysArgs();
        }

        public Builder(ObjectStorageAccessKeysArgs defaults) {
            $ = new ObjectStorageAccessKeysArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param buckets Optional list of buckets the access key will be associated with.  Example: `[&#34;bucket1&#34;, &#34;bucket2&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder buckets(@Nullable Output<List<String>> buckets) {
            $.buckets = buckets;
            return this;
        }

        /**
         * @param buckets Optional list of buckets the access key will be associated with.  Example: `[&#34;bucket1&#34;, &#34;bucket2&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder buckets(List<String> buckets) {
            return buckets(Output.of(buckets));
        }

        /**
         * @param buckets Optional list of buckets the access key will be associated with.  Example: `[&#34;bucket1&#34;, &#34;bucket2&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder buckets(String... buckets) {
            return buckets(List.of(buckets));
        }

        /**
         * @param description The description of the access key
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the access key
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param permission The permissions of the access key
         * 
         * @return builder
         * 
         */
        public Builder permission(Output<String> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission The permissions of the access key
         * 
         * @return builder
         * 
         */
        public Builder permission(String permission) {
            return permission(Output.of(permission));
        }

        public ObjectStorageAccessKeysArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("ObjectStorageAccessKeysArgs", "description");
            }
            if ($.permission == null) {
                throw new MissingRequiredPropertyException("ObjectStorageAccessKeysArgs", "permission");
            }
            return $;
        }
    }

}
