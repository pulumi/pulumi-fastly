// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.fastly.outputs.CustomDashboardDashboardItemDataSource;
import com.pulumi.fastly.outputs.CustomDashboardDashboardItemVisualization;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomDashboardDashboardItem {
    /**
     * @return An object which describes the data to display.
     * 
     */
    private CustomDashboardDashboardItemDataSource dataSource;
    /**
     * @return Dashboard item identifier (alphanumeric). Must be unique, relative to other items in the same dashboard.
     * 
     */
    private String id;
    /**
     * @return The number of columns for the dashboard item to span. Dashboards are rendered on a 12-column grid on &#34;desktop&#34; screen sizes.
     * 
     */
    private @Nullable Integer span;
    /**
     * @return A human-readable subtitle for the dashboard item. Often a description of the visualization.
     * 
     */
    private String subtitle;
    /**
     * @return A human-readable title for the dashboard item.
     * 
     */
    private String title;
    /**
     * @return An object which describes the data visualization to display.
     * 
     */
    private CustomDashboardDashboardItemVisualization visualization;

    private CustomDashboardDashboardItem() {}
    /**
     * @return An object which describes the data to display.
     * 
     */
    public CustomDashboardDashboardItemDataSource dataSource() {
        return this.dataSource;
    }
    /**
     * @return Dashboard item identifier (alphanumeric). Must be unique, relative to other items in the same dashboard.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The number of columns for the dashboard item to span. Dashboards are rendered on a 12-column grid on &#34;desktop&#34; screen sizes.
     * 
     */
    public Optional<Integer> span() {
        return Optional.ofNullable(this.span);
    }
    /**
     * @return A human-readable subtitle for the dashboard item. Often a description of the visualization.
     * 
     */
    public String subtitle() {
        return this.subtitle;
    }
    /**
     * @return A human-readable title for the dashboard item.
     * 
     */
    public String title() {
        return this.title;
    }
    /**
     * @return An object which describes the data visualization to display.
     * 
     */
    public CustomDashboardDashboardItemVisualization visualization() {
        return this.visualization;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomDashboardDashboardItem defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private CustomDashboardDashboardItemDataSource dataSource;
        private String id;
        private @Nullable Integer span;
        private String subtitle;
        private String title;
        private CustomDashboardDashboardItemVisualization visualization;
        public Builder() {}
        public Builder(CustomDashboardDashboardItem defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataSource = defaults.dataSource;
    	      this.id = defaults.id;
    	      this.span = defaults.span;
    	      this.subtitle = defaults.subtitle;
    	      this.title = defaults.title;
    	      this.visualization = defaults.visualization;
        }

        @CustomType.Setter
        public Builder dataSource(CustomDashboardDashboardItemDataSource dataSource) {
            if (dataSource == null) {
              throw new MissingRequiredPropertyException("CustomDashboardDashboardItem", "dataSource");
            }
            this.dataSource = dataSource;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("CustomDashboardDashboardItem", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder span(@Nullable Integer span) {

            this.span = span;
            return this;
        }
        @CustomType.Setter
        public Builder subtitle(String subtitle) {
            if (subtitle == null) {
              throw new MissingRequiredPropertyException("CustomDashboardDashboardItem", "subtitle");
            }
            this.subtitle = subtitle;
            return this;
        }
        @CustomType.Setter
        public Builder title(String title) {
            if (title == null) {
              throw new MissingRequiredPropertyException("CustomDashboardDashboardItem", "title");
            }
            this.title = title;
            return this;
        }
        @CustomType.Setter
        public Builder visualization(CustomDashboardDashboardItemVisualization visualization) {
            if (visualization == null) {
              throw new MissingRequiredPropertyException("CustomDashboardDashboardItem", "visualization");
            }
            this.visualization = visualization;
            return this;
        }
        public CustomDashboardDashboardItem build() {
            final var _resultValue = new CustomDashboardDashboardItem();
            _resultValue.dataSource = dataSource;
            _resultValue.id = id;
            _resultValue.span = span;
            _resultValue.subtitle = subtitle;
            _resultValue.title = title;
            _resultValue.visualization = visualization;
            return _resultValue;
        }
    }
}
