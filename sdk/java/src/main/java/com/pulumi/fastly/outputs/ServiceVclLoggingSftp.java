// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclLoggingSftp {
    /**
     * @return The SFTP address to stream logs to
     * 
     */
    private String address;
    /**
     * @return The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is &#34;gzip&#34;, gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.
     * 
     */
    private @Nullable String compressionCodec;
    /**
     * @return Apache-style string or VCL variables to use for log formatting.
     * 
     */
    private @Nullable String format;
    /**
     * @return The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     * 
     */
    private @Nullable Integer formatVersion;
    /**
     * @return Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     * 
     */
    private @Nullable Integer gzipLevel;
    /**
     * @return How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     * 
     */
    private @Nullable String messageType;
    /**
     * @return The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return The password for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred
     * 
     */
    private @Nullable String password;
    /**
     * @return The path to upload log files to. If the path ends in `/` then it is treated as a directory
     * 
     */
    private String path;
    /**
     * @return How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     * 
     */
    private @Nullable Integer period;
    /**
     * @return Where in the generated VCL the logging call should be placed.
     * 
     */
    private @Nullable String placement;
    /**
     * @return The port the SFTP service listens on. (Default: `22`)
     * 
     */
    private @Nullable Integer port;
    /**
     * @return A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     * 
     */
    private @Nullable String publicKey;
    /**
     * @return The name of the condition to apply.
     * 
     */
    private @Nullable String responseCondition;
    /**
     * @return The SSH private key for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred
     * 
     */
    private @Nullable String secretKey;
    /**
     * @return A list of host keys for all hosts we can connect to over SFTP
     * 
     */
    private String sshKnownHosts;
    /**
     * @return The `strftime` specified timestamp formatting (default `%!Y(MISSING)-%!m(MISSING)-%!d(MISSING)T%!H(MISSING):%!M(MISSING):%!S(MISSING).000`)
     * 
     */
    private @Nullable String timestampFormat;
    /**
     * @return The username for the server
     * 
     */
    private String user;

    private ServiceVclLoggingSftp() {}
    /**
     * @return The SFTP address to stream logs to
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is &#34;gzip&#34;, gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.
     * 
     */
    public Optional<String> compressionCodec() {
        return Optional.ofNullable(this.compressionCodec);
    }
    /**
     * @return Apache-style string or VCL variables to use for log formatting.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     * 
     */
    public Optional<Integer> formatVersion() {
        return Optional.ofNullable(this.formatVersion);
    }
    /**
     * @return Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     * 
     */
    public Optional<Integer> gzipLevel() {
        return Optional.ofNullable(this.gzipLevel);
    }
    /**
     * @return How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     * 
     */
    public Optional<String> messageType() {
        return Optional.ofNullable(this.messageType);
    }
    /**
     * @return The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The password for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The path to upload log files to. If the path ends in `/` then it is treated as a directory
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
     * 
     */
    public Optional<Integer> period() {
        return Optional.ofNullable(this.period);
    }
    /**
     * @return Where in the generated VCL the logging call should be placed.
     * 
     */
    public Optional<String> placement() {
        return Optional.ofNullable(this.placement);
    }
    /**
     * @return The port the SFTP service listens on. (Default: `22`)
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     * 
     */
    public Optional<String> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }
    /**
     * @return The name of the condition to apply.
     * 
     */
    public Optional<String> responseCondition() {
        return Optional.ofNullable(this.responseCondition);
    }
    /**
     * @return The SSH private key for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred
     * 
     */
    public Optional<String> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }
    /**
     * @return A list of host keys for all hosts we can connect to over SFTP
     * 
     */
    public String sshKnownHosts() {
        return this.sshKnownHosts;
    }
    /**
     * @return The `strftime` specified timestamp formatting (default `%!Y(MISSING)-%!m(MISSING)-%!d(MISSING)T%!H(MISSING):%!M(MISSING):%!S(MISSING).000`)
     * 
     */
    public Optional<String> timestampFormat() {
        return Optional.ofNullable(this.timestampFormat);
    }
    /**
     * @return The username for the server
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclLoggingSftp defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private @Nullable String compressionCodec;
        private @Nullable String format;
        private @Nullable Integer formatVersion;
        private @Nullable Integer gzipLevel;
        private @Nullable String messageType;
        private String name;
        private @Nullable String password;
        private String path;
        private @Nullable Integer period;
        private @Nullable String placement;
        private @Nullable Integer port;
        private @Nullable String publicKey;
        private @Nullable String responseCondition;
        private @Nullable String secretKey;
        private String sshKnownHosts;
        private @Nullable String timestampFormat;
        private String user;
        public Builder() {}
        public Builder(ServiceVclLoggingSftp defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.compressionCodec = defaults.compressionCodec;
    	      this.format = defaults.format;
    	      this.formatVersion = defaults.formatVersion;
    	      this.gzipLevel = defaults.gzipLevel;
    	      this.messageType = defaults.messageType;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.path = defaults.path;
    	      this.period = defaults.period;
    	      this.placement = defaults.placement;
    	      this.port = defaults.port;
    	      this.publicKey = defaults.publicKey;
    	      this.responseCondition = defaults.responseCondition;
    	      this.secretKey = defaults.secretKey;
    	      this.sshKnownHosts = defaults.sshKnownHosts;
    	      this.timestampFormat = defaults.timestampFormat;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingSftp", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder compressionCodec(@Nullable String compressionCodec) {

            this.compressionCodec = compressionCodec;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder formatVersion(@Nullable Integer formatVersion) {

            this.formatVersion = formatVersion;
            return this;
        }
        @CustomType.Setter
        public Builder gzipLevel(@Nullable Integer gzipLevel) {

            this.gzipLevel = gzipLevel;
            return this;
        }
        @CustomType.Setter
        public Builder messageType(@Nullable String messageType) {

            this.messageType = messageType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingSftp", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingSftp", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder period(@Nullable Integer period) {

            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder placement(@Nullable String placement) {

            this.placement = placement;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(@Nullable String publicKey) {

            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder responseCondition(@Nullable String responseCondition) {

            this.responseCondition = responseCondition;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(@Nullable String secretKey) {

            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder sshKnownHosts(String sshKnownHosts) {
            if (sshKnownHosts == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingSftp", "sshKnownHosts");
            }
            this.sshKnownHosts = sshKnownHosts;
            return this;
        }
        @CustomType.Setter
        public Builder timestampFormat(@Nullable String timestampFormat) {

            this.timestampFormat = timestampFormat;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingSftp", "user");
            }
            this.user = user;
            return this;
        }
        public ServiceVclLoggingSftp build() {
            final var _resultValue = new ServiceVclLoggingSftp();
            _resultValue.address = address;
            _resultValue.compressionCodec = compressionCodec;
            _resultValue.format = format;
            _resultValue.formatVersion = formatVersion;
            _resultValue.gzipLevel = gzipLevel;
            _resultValue.messageType = messageType;
            _resultValue.name = name;
            _resultValue.password = password;
            _resultValue.path = path;
            _resultValue.period = period;
            _resultValue.placement = placement;
            _resultValue.port = port;
            _resultValue.publicKey = publicKey;
            _resultValue.responseCondition = responseCondition;
            _resultValue.secretKey = secretKey;
            _resultValue.sshKnownHosts = sshKnownHosts;
            _resultValue.timestampFormat = timestampFormat;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
