// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.fastly.inputs.NgwafAccountRuleActionArgs;
import com.pulumi.fastly.inputs.NgwafAccountRuleConditionArgs;
import com.pulumi.fastly.inputs.NgwafAccountRuleGroupConditionArgs;
import com.pulumi.fastly.inputs.NgwafAccountRuleRateLimitArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgwafAccountRuleState extends com.pulumi.resources.ResourceArgs {

    public static final NgwafAccountRuleState Empty = new NgwafAccountRuleState();

    /**
     * List of actions to perform when the rule matches.
     * 
     */
    @Import(name="actions")
    private @Nullable Output<List<NgwafAccountRuleActionArgs>> actions;

    /**
     * @return List of actions to perform when the rule matches.
     * 
     */
    public Optional<Output<List<NgwafAccountRuleActionArgs>>> actions() {
        return Optional.ofNullable(this.actions);
    }

    /**
     * The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
     * 
     */
    @Import(name="appliesTos")
    private @Nullable Output<List<String>> appliesTos;

    /**
     * @return The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
     * 
     */
    public Optional<Output<List<String>>> appliesTos() {
        return Optional.ofNullable(this.appliesTos);
    }

    /**
     * Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
     * 
     */
    @Import(name="conditions")
    private @Nullable Output<List<NgwafAccountRuleConditionArgs>> conditions;

    /**
     * @return Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
     * 
     */
    public Optional<Output<List<NgwafAccountRuleConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The description of the rule.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the rule.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Whether the rule is currently enabled.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return Whether the rule is currently enabled.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * List of grouped conditions with nested logic. Each group must define a `group_operator` and at least one condition.
     * 
     */
    @Import(name="groupConditions")
    private @Nullable Output<List<NgwafAccountRuleGroupConditionArgs>> groupConditions;

    /**
     * @return List of grouped conditions with nested logic. Each group must define a `group_operator` and at least one condition.
     * 
     */
    public Optional<Output<List<NgwafAccountRuleGroupConditionArgs>>> groupConditions() {
        return Optional.ofNullable(this.groupConditions);
    }

    /**
     * Logical operator to apply to group conditions. Accepted values are `any` and `all`.
     * 
     */
    @Import(name="groupOperator")
    private @Nullable Output<String> groupOperator;

    /**
     * @return Logical operator to apply to group conditions. Accepted values are `any` and `all`.
     * 
     */
    public Optional<Output<String>> groupOperator() {
        return Optional.ofNullable(this.groupOperator);
    }

    /**
     * Block specifically for rate*limit rules.
     * 
     */
    @Import(name="rateLimit")
    private @Nullable Output<NgwafAccountRuleRateLimitArgs> rateLimit;

    /**
     * @return Block specifically for rate*limit rules.
     * 
     */
    public Optional<Output<NgwafAccountRuleRateLimitArgs>> rateLimit() {
        return Optional.ofNullable(this.rateLimit);
    }

    /**
     * Logging behavior for matching requests. Accepted values are `sampled` and `none`.
     * 
     */
    @Import(name="requestLogging")
    private @Nullable Output<String> requestLogging;

    /**
     * @return Logging behavior for matching requests. Accepted values are `sampled` and `none`.
     * 
     */
    public Optional<Output<String>> requestLogging() {
        return Optional.ofNullable(this.requestLogging);
    }

    /**
     * The type of the rule. Accepted values are `request` and `signal`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the rule. Accepted values are `request` and `signal`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private NgwafAccountRuleState() {}

    private NgwafAccountRuleState(NgwafAccountRuleState $) {
        this.actions = $.actions;
        this.appliesTos = $.appliesTos;
        this.conditions = $.conditions;
        this.description = $.description;
        this.enabled = $.enabled;
        this.groupConditions = $.groupConditions;
        this.groupOperator = $.groupOperator;
        this.rateLimit = $.rateLimit;
        this.requestLogging = $.requestLogging;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafAccountRuleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafAccountRuleState $;

        public Builder() {
            $ = new NgwafAccountRuleState();
        }

        public Builder(NgwafAccountRuleState defaults) {
            $ = new NgwafAccountRuleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param actions List of actions to perform when the rule matches.
         * 
         * @return builder
         * 
         */
        public Builder actions(@Nullable Output<List<NgwafAccountRuleActionArgs>> actions) {
            $.actions = actions;
            return this;
        }

        /**
         * @param actions List of actions to perform when the rule matches.
         * 
         * @return builder
         * 
         */
        public Builder actions(List<NgwafAccountRuleActionArgs> actions) {
            return actions(Output.of(actions));
        }

        /**
         * @param actions List of actions to perform when the rule matches.
         * 
         * @return builder
         * 
         */
        public Builder actions(NgwafAccountRuleActionArgs... actions) {
            return actions(List.of(actions));
        }

        /**
         * @param appliesTos The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
         * 
         * @return builder
         * 
         */
        public Builder appliesTos(@Nullable Output<List<String>> appliesTos) {
            $.appliesTos = appliesTos;
            return this;
        }

        /**
         * @param appliesTos The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
         * 
         * @return builder
         * 
         */
        public Builder appliesTos(List<String> appliesTos) {
            return appliesTos(Output.of(appliesTos));
        }

        /**
         * @param appliesTos The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
         * 
         * @return builder
         * 
         */
        public Builder appliesTos(String... appliesTos) {
            return appliesTos(List.of(appliesTos));
        }

        /**
         * @param conditions Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(@Nullable Output<List<NgwafAccountRuleConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        /**
         * @param conditions Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(List<NgwafAccountRuleConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        /**
         * @param conditions Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
         * 
         * @return builder
         * 
         */
        public Builder conditions(NgwafAccountRuleConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param description The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the rule.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled Whether the rule is currently enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled Whether the rule is currently enabled.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param groupConditions List of grouped conditions with nested logic. Each group must define a `group_operator` and at least one condition.
         * 
         * @return builder
         * 
         */
        public Builder groupConditions(@Nullable Output<List<NgwafAccountRuleGroupConditionArgs>> groupConditions) {
            $.groupConditions = groupConditions;
            return this;
        }

        /**
         * @param groupConditions List of grouped conditions with nested logic. Each group must define a `group_operator` and at least one condition.
         * 
         * @return builder
         * 
         */
        public Builder groupConditions(List<NgwafAccountRuleGroupConditionArgs> groupConditions) {
            return groupConditions(Output.of(groupConditions));
        }

        /**
         * @param groupConditions List of grouped conditions with nested logic. Each group must define a `group_operator` and at least one condition.
         * 
         * @return builder
         * 
         */
        public Builder groupConditions(NgwafAccountRuleGroupConditionArgs... groupConditions) {
            return groupConditions(List.of(groupConditions));
        }

        /**
         * @param groupOperator Logical operator to apply to group conditions. Accepted values are `any` and `all`.
         * 
         * @return builder
         * 
         */
        public Builder groupOperator(@Nullable Output<String> groupOperator) {
            $.groupOperator = groupOperator;
            return this;
        }

        /**
         * @param groupOperator Logical operator to apply to group conditions. Accepted values are `any` and `all`.
         * 
         * @return builder
         * 
         */
        public Builder groupOperator(String groupOperator) {
            return groupOperator(Output.of(groupOperator));
        }

        /**
         * @param rateLimit Block specifically for rate*limit rules.
         * 
         * @return builder
         * 
         */
        public Builder rateLimit(@Nullable Output<NgwafAccountRuleRateLimitArgs> rateLimit) {
            $.rateLimit = rateLimit;
            return this;
        }

        /**
         * @param rateLimit Block specifically for rate*limit rules.
         * 
         * @return builder
         * 
         */
        public Builder rateLimit(NgwafAccountRuleRateLimitArgs rateLimit) {
            return rateLimit(Output.of(rateLimit));
        }

        /**
         * @param requestLogging Logging behavior for matching requests. Accepted values are `sampled` and `none`.
         * 
         * @return builder
         * 
         */
        public Builder requestLogging(@Nullable Output<String> requestLogging) {
            $.requestLogging = requestLogging;
            return this;
        }

        /**
         * @param requestLogging Logging behavior for matching requests. Accepted values are `sampled` and `none`.
         * 
         * @return builder
         * 
         */
        public Builder requestLogging(String requestLogging) {
            return requestLogging(Output.of(requestLogging));
        }

        /**
         * @param type The type of the rule. Accepted values are `request` and `signal`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the rule. Accepted values are `request` and `signal`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NgwafAccountRuleState build() {
            return $;
        }
    }

}
