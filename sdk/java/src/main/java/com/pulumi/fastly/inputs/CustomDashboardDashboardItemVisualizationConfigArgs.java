// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDashboardDashboardItemVisualizationConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomDashboardDashboardItemVisualizationConfigArgs Empty = new CustomDashboardDashboardItemVisualizationConfigArgs();

    /**
     * The aggregation function to apply to the dataset. One of: `avg`, `sum`, `min`, `max`, `latest`, `p95`.
     * 
     */
    @Import(name="calculationMethod")
    private @Nullable Output<String> calculationMethod;

    /**
     * @return The aggregation function to apply to the dataset. One of: `avg`, `sum`, `min`, `max`, `latest`, `p95`.
     * 
     */
    public Optional<Output<String>> calculationMethod() {
        return Optional.ofNullable(this.calculationMethod);
    }

    /**
     * The units to use to format the data. One of: `number`, `bytes`, `percent`, `requests`, `responses`, `seconds`, `milliseconds`, `ratio`, `bitrate`.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return The units to use to format the data. One of: `number`, `bytes`, `percent`, `requests`, `responses`, `seconds`, `milliseconds`, `ratio`, `bitrate`.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * The type of chart to display. One of: `line`, `bar`, `single-metric`, `donut`.
     * 
     */
    @Import(name="plotType", required=true)
    private Output<String> plotType;

    /**
     * @return The type of chart to display. One of: `line`, `bar`, `single-metric`, `donut`.
     * 
     */
    public Output<String> plotType() {
        return this.plotType;
    }

    private CustomDashboardDashboardItemVisualizationConfigArgs() {}

    private CustomDashboardDashboardItemVisualizationConfigArgs(CustomDashboardDashboardItemVisualizationConfigArgs $) {
        this.calculationMethod = $.calculationMethod;
        this.format = $.format;
        this.plotType = $.plotType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDashboardDashboardItemVisualizationConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDashboardDashboardItemVisualizationConfigArgs $;

        public Builder() {
            $ = new CustomDashboardDashboardItemVisualizationConfigArgs();
        }

        public Builder(CustomDashboardDashboardItemVisualizationConfigArgs defaults) {
            $ = new CustomDashboardDashboardItemVisualizationConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param calculationMethod The aggregation function to apply to the dataset. One of: `avg`, `sum`, `min`, `max`, `latest`, `p95`.
         * 
         * @return builder
         * 
         */
        public Builder calculationMethod(@Nullable Output<String> calculationMethod) {
            $.calculationMethod = calculationMethod;
            return this;
        }

        /**
         * @param calculationMethod The aggregation function to apply to the dataset. One of: `avg`, `sum`, `min`, `max`, `latest`, `p95`.
         * 
         * @return builder
         * 
         */
        public Builder calculationMethod(String calculationMethod) {
            return calculationMethod(Output.of(calculationMethod));
        }

        /**
         * @param format The units to use to format the data. One of: `number`, `bytes`, `percent`, `requests`, `responses`, `seconds`, `milliseconds`, `ratio`, `bitrate`.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format The units to use to format the data. One of: `number`, `bytes`, `percent`, `requests`, `responses`, `seconds`, `milliseconds`, `ratio`, `bitrate`.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param plotType The type of chart to display. One of: `line`, `bar`, `single-metric`, `donut`.
         * 
         * @return builder
         * 
         */
        public Builder plotType(Output<String> plotType) {
            $.plotType = plotType;
            return this;
        }

        /**
         * @param plotType The type of chart to display. One of: `line`, `bar`, `single-metric`, `donut`.
         * 
         * @return builder
         * 
         */
        public Builder plotType(String plotType) {
            return plotType(Output.of(plotType));
        }

        public CustomDashboardDashboardItemVisualizationConfigArgs build() {
            if ($.plotType == null) {
                throw new MissingRequiredPropertyException("CustomDashboardDashboardItemVisualizationConfigArgs", "plotType");
            }
            return $;
        }
    }

}
