// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsPrivateKeyState extends com.pulumi.resources.ResourceArgs {

    public static final TlsPrivateKeyState Empty = new TlsPrivateKeyState();

    /**
     * Time-stamp (GMT) when the private key was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Time-stamp (GMT) when the private key was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The key length used to generate the private key.
     * 
     */
    @Import(name="keyLength")
    private @Nullable Output<Integer> keyLength;

    /**
     * @return The key length used to generate the private key.
     * 
     */
    public Optional<Output<Integer>> keyLength() {
        return Optional.ofNullable(this.keyLength);
    }

    /**
     * Private key in PEM format.
     * 
     */
    @Import(name="keyPem")
    private @Nullable Output<String> keyPem;

    /**
     * @return Private key in PEM format.
     * 
     */
    public Optional<Output<String>> keyPem() {
        return Optional.ofNullable(this.keyPem);
    }

    /**
     * The algorithm used to generate the private key. Must be RSA.
     * 
     */
    @Import(name="keyType")
    private @Nullable Output<String> keyType;

    /**
     * @return The algorithm used to generate the private key. Must be RSA.
     * 
     */
    public Optional<Output<String>> keyType() {
        return Optional.ofNullable(this.keyType);
    }

    /**
     * Customisable name of the private key.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Customisable name of the private key.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Useful for safely identifying the key.
     * 
     */
    @Import(name="publicKeySha1")
    private @Nullable Output<String> publicKeySha1;

    /**
     * @return Useful for safely identifying the key.
     * 
     */
    public Optional<Output<String>> publicKeySha1() {
        return Optional.ofNullable(this.publicKeySha1);
    }

    /**
     * Whether Fastly recommends replacing this private key.
     * 
     */
    @Import(name="replace")
    private @Nullable Output<Boolean> replace;

    /**
     * @return Whether Fastly recommends replacing this private key.
     * 
     */
    public Optional<Output<Boolean>> replace() {
        return Optional.ofNullable(this.replace);
    }

    private TlsPrivateKeyState() {}

    private TlsPrivateKeyState(TlsPrivateKeyState $) {
        this.createdAt = $.createdAt;
        this.keyLength = $.keyLength;
        this.keyPem = $.keyPem;
        this.keyType = $.keyType;
        this.name = $.name;
        this.publicKeySha1 = $.publicKeySha1;
        this.replace = $.replace;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsPrivateKeyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsPrivateKeyState $;

        public Builder() {
            $ = new TlsPrivateKeyState();
        }

        public Builder(TlsPrivateKeyState defaults) {
            $ = new TlsPrivateKeyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Time-stamp (GMT) when the private key was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Time-stamp (GMT) when the private key was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param keyLength The key length used to generate the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyLength(@Nullable Output<Integer> keyLength) {
            $.keyLength = keyLength;
            return this;
        }

        /**
         * @param keyLength The key length used to generate the private key.
         * 
         * @return builder
         * 
         */
        public Builder keyLength(Integer keyLength) {
            return keyLength(Output.of(keyLength));
        }

        /**
         * @param keyPem Private key in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder keyPem(@Nullable Output<String> keyPem) {
            $.keyPem = keyPem;
            return this;
        }

        /**
         * @param keyPem Private key in PEM format.
         * 
         * @return builder
         * 
         */
        public Builder keyPem(String keyPem) {
            return keyPem(Output.of(keyPem));
        }

        /**
         * @param keyType The algorithm used to generate the private key. Must be RSA.
         * 
         * @return builder
         * 
         */
        public Builder keyType(@Nullable Output<String> keyType) {
            $.keyType = keyType;
            return this;
        }

        /**
         * @param keyType The algorithm used to generate the private key. Must be RSA.
         * 
         * @return builder
         * 
         */
        public Builder keyType(String keyType) {
            return keyType(Output.of(keyType));
        }

        /**
         * @param name Customisable name of the private key.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Customisable name of the private key.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param publicKeySha1 Useful for safely identifying the key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeySha1(@Nullable Output<String> publicKeySha1) {
            $.publicKeySha1 = publicKeySha1;
            return this;
        }

        /**
         * @param publicKeySha1 Useful for safely identifying the key.
         * 
         * @return builder
         * 
         */
        public Builder publicKeySha1(String publicKeySha1) {
            return publicKeySha1(Output.of(publicKeySha1));
        }

        /**
         * @param replace Whether Fastly recommends replacing this private key.
         * 
         * @return builder
         * 
         */
        public Builder replace(@Nullable Output<Boolean> replace) {
            $.replace = replace;
            return this;
        }

        /**
         * @param replace Whether Fastly recommends replacing this private key.
         * 
         * @return builder
         * 
         */
        public Builder replace(Boolean replace) {
            return replace(Output.of(replace));
        }

        public TlsPrivateKeyState build() {
            return $;
        }
    }

}
