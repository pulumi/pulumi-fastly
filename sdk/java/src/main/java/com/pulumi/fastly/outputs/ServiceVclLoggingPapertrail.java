// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclLoggingPapertrail {
    /**
     * @return The address of the Papertrail endpoint
     * 
     */
    private String address;
    /**
     * @return A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
     * 
     */
    private @Nullable String format;
    /**
     * @return The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`
     * 
     */
    private @Nullable Integer formatVersion;
    /**
     * @return A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`
     * 
     */
    private @Nullable String placement;
    /**
     * @return The port associated with the address where the Papertrail endpoint can be accessed
     * 
     */
    private Integer port;
    /**
     * @return Region where logs will be processed before streaming to BigQuery. Valid values are &#39;none&#39;, &#39;us&#39; and &#39;eu&#39;.
     * 
     */
    private @Nullable String processingRegion;
    /**
     * @return The name of an existing condition in the configured endpoint, or leave blank to always execute
     * 
     */
    private @Nullable String responseCondition;

    private ServiceVclLoggingPapertrail() {}
    /**
     * @return The address of the Papertrail endpoint
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`
     * 
     */
    public Optional<Integer> formatVersion() {
        return Optional.ofNullable(this.formatVersion);
    }
    /**
     * @return A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`
     * 
     */
    public Optional<String> placement() {
        return Optional.ofNullable(this.placement);
    }
    /**
     * @return The port associated with the address where the Papertrail endpoint can be accessed
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return Region where logs will be processed before streaming to BigQuery. Valid values are &#39;none&#39;, &#39;us&#39; and &#39;eu&#39;.
     * 
     */
    public Optional<String> processingRegion() {
        return Optional.ofNullable(this.processingRegion);
    }
    /**
     * @return The name of an existing condition in the configured endpoint, or leave blank to always execute
     * 
     */
    public Optional<String> responseCondition() {
        return Optional.ofNullable(this.responseCondition);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclLoggingPapertrail defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private @Nullable String format;
        private @Nullable Integer formatVersion;
        private String name;
        private @Nullable String placement;
        private Integer port;
        private @Nullable String processingRegion;
        private @Nullable String responseCondition;
        public Builder() {}
        public Builder(ServiceVclLoggingPapertrail defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.format = defaults.format;
    	      this.formatVersion = defaults.formatVersion;
    	      this.name = defaults.name;
    	      this.placement = defaults.placement;
    	      this.port = defaults.port;
    	      this.processingRegion = defaults.processingRegion;
    	      this.responseCondition = defaults.responseCondition;
        }

        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingPapertrail", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder formatVersion(@Nullable Integer formatVersion) {

            this.formatVersion = formatVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingPapertrail", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder placement(@Nullable String placement) {

            this.placement = placement;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingPapertrail", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder processingRegion(@Nullable String processingRegion) {

            this.processingRegion = processingRegion;
            return this;
        }
        @CustomType.Setter
        public Builder responseCondition(@Nullable String responseCondition) {

            this.responseCondition = responseCondition;
            return this;
        }
        public ServiceVclLoggingPapertrail build() {
            final var _resultValue = new ServiceVclLoggingPapertrail();
            _resultValue.address = address;
            _resultValue.format = format;
            _resultValue.formatVersion = formatVersion;
            _resultValue.name = name;
            _resultValue.placement = placement;
            _resultValue.port = port;
            _resultValue.processingRegion = processingRegion;
            _resultValue.responseCondition = responseCondition;
            return _resultValue;
        }
    }
}
