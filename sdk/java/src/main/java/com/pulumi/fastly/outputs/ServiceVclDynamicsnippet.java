// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclDynamicsnippet {
    /**
     * @return The VCL code that specifies exactly what the snippet does
     * 
     */
    private @Nullable String content;
    /**
     * @return A name that is unique across &#34;regular&#34; and &#34;dynamic&#34; VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return The ID of the dynamic snippet
     * 
     */
    private @Nullable String snippetId;
    /**
     * @return The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
     * 
     */
    private String type;

    private ServiceVclDynamicsnippet() {}
    /**
     * @return The VCL code that specifies exactly what the snippet does
     * 
     */
    public Optional<String> content() {
        return Optional.ofNullable(this.content);
    }
    /**
     * @return A name that is unique across &#34;regular&#34; and &#34;dynamic&#34; VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return The ID of the dynamic snippet
     * 
     */
    public Optional<String> snippetId() {
        return Optional.ofNullable(this.snippetId);
    }
    /**
     * @return The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclDynamicsnippet defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String content;
        private String name;
        private @Nullable Integer priority;
        private @Nullable String snippetId;
        private String type;
        public Builder() {}
        public Builder(ServiceVclDynamicsnippet defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.content = defaults.content;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.snippetId = defaults.snippetId;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder content(@Nullable String content) {

            this.content = content;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceVclDynamicsnippet", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {

            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder snippetId(@Nullable String snippetId) {

            this.snippetId = snippetId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("ServiceVclDynamicsnippet", "type");
            }
            this.type = type;
            return this;
        }
        public ServiceVclDynamicsnippet build() {
            final var _resultValue = new ServiceVclDynamicsnippet();
            _resultValue.content = content;
            _resultValue.name = name;
            _resultValue.priority = priority;
            _resultValue.snippetId = snippetId;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
