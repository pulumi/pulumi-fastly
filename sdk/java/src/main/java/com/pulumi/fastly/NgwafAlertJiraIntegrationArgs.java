// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgwafAlertJiraIntegrationArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgwafAlertJiraIntegrationArgs Empty = new NgwafAlertJiraIntegrationArgs();

    /**
     * The description of the alert.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the alert.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The name of the Jira instance.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The name of the Jira instance.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The Jira issue type associated with the ticket.
     * 
     */
    @Import(name="issueType")
    private @Nullable Output<String> issueType;

    /**
     * @return The Jira issue type associated with the ticket.
     * 
     */
    public Optional<Output<String>> issueType() {
        return Optional.ofNullable(this.issueType);
    }

    /**
     * The Jira key.
     * 
     */
    @Import(name="key", required=true)
    private Output<String> key;

    /**
     * @return The Jira key.
     * 
     */
    public Output<String> key() {
        return this.key;
    }

    /**
     * The Jira project where the issue will be created.
     * 
     */
    @Import(name="project", required=true)
    private Output<String> project;

    /**
     * @return The Jira project where the issue will be created.
     * 
     */
    public Output<String> project() {
        return this.project;
    }

    /**
     * The Jira username of the user who created the ticket.
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The Jira username of the user who created the ticket.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     * The ID of the workspace.
     * 
     */
    @Import(name="workspaceId", required=true)
    private Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    private NgwafAlertJiraIntegrationArgs() {}

    private NgwafAlertJiraIntegrationArgs(NgwafAlertJiraIntegrationArgs $) {
        this.description = $.description;
        this.host = $.host;
        this.issueType = $.issueType;
        this.key = $.key;
        this.project = $.project;
        this.username = $.username;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafAlertJiraIntegrationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafAlertJiraIntegrationArgs $;

        public Builder() {
            $ = new NgwafAlertJiraIntegrationArgs();
        }

        public Builder(NgwafAlertJiraIntegrationArgs defaults) {
            $ = new NgwafAlertJiraIntegrationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description The description of the alert.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the alert.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param host The name of the Jira instance.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The name of the Jira instance.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param issueType The Jira issue type associated with the ticket.
         * 
         * @return builder
         * 
         */
        public Builder issueType(@Nullable Output<String> issueType) {
            $.issueType = issueType;
            return this;
        }

        /**
         * @param issueType The Jira issue type associated with the ticket.
         * 
         * @return builder
         * 
         */
        public Builder issueType(String issueType) {
            return issueType(Output.of(issueType));
        }

        /**
         * @param key The Jira key.
         * 
         * @return builder
         * 
         */
        public Builder key(Output<String> key) {
            $.key = key;
            return this;
        }

        /**
         * @param key The Jira key.
         * 
         * @return builder
         * 
         */
        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param project The Jira project where the issue will be created.
         * 
         * @return builder
         * 
         */
        public Builder project(Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project The Jira project where the issue will be created.
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param username The Jira username of the user who created the ticket.
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The Jira username of the user who created the ticket.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public NgwafAlertJiraIntegrationArgs build() {
            if ($.host == null) {
                throw new MissingRequiredPropertyException("NgwafAlertJiraIntegrationArgs", "host");
            }
            if ($.key == null) {
                throw new MissingRequiredPropertyException("NgwafAlertJiraIntegrationArgs", "key");
            }
            if ($.project == null) {
                throw new MissingRequiredPropertyException("NgwafAlertJiraIntegrationArgs", "project");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("NgwafAlertJiraIntegrationArgs", "username");
            }
            if ($.workspaceId == null) {
                throw new MissingRequiredPropertyException("NgwafAlertJiraIntegrationArgs", "workspaceId");
            }
            return $;
        }
    }

}
