// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTlsSubscriptionResult {
    /**
     * @return The entity that issues and certifies the TLS certificates for the subscription.
     * 
     */
    private String certificateAuthority;
    /**
     * @return List of certificate IDs associated with the Subscription.
     * 
     */
    private List<String> certificateIds;
    /**
     * @return The common name associated with the subscription generated by Fastly TLS.
     * 
     */
    private String commonName;
    /**
     * @return ID of TLS configuration used to terminate TLS traffic.
     * 
     */
    private String configurationId;
    /**
     * @return Timestamp (GMT) when subscription was created.
     * 
     */
    private String createdAt;
    /**
     * @return List of domains on which to enable TLS.
     * 
     */
    private List<String> domains;
    /**
     * @return ID of TLS subscription. Conflicts with all the other filters.
     * 
     */
    private String id;
    /**
     * @return The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.
     * 
     */
    private String state;
    /**
     * @return Timestamp (GMT) when subscription was last updated.
     * 
     */
    private String updatedAt;

    private GetTlsSubscriptionResult() {}
    /**
     * @return The entity that issues and certifies the TLS certificates for the subscription.
     * 
     */
    public String certificateAuthority() {
        return this.certificateAuthority;
    }
    /**
     * @return List of certificate IDs associated with the Subscription.
     * 
     */
    public List<String> certificateIds() {
        return this.certificateIds;
    }
    /**
     * @return The common name associated with the subscription generated by Fastly TLS.
     * 
     */
    public String commonName() {
        return this.commonName;
    }
    /**
     * @return ID of TLS configuration used to terminate TLS traffic.
     * 
     */
    public String configurationId() {
        return this.configurationId;
    }
    /**
     * @return Timestamp (GMT) when subscription was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return List of domains on which to enable TLS.
     * 
     */
    public List<String> domains() {
        return this.domains;
    }
    /**
     * @return ID of TLS subscription. Conflicts with all the other filters.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Timestamp (GMT) when subscription was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTlsSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateAuthority;
        private List<String> certificateIds;
        private String commonName;
        private String configurationId;
        private String createdAt;
        private List<String> domains;
        private String id;
        private String state;
        private String updatedAt;
        public Builder() {}
        public Builder(GetTlsSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateAuthority = defaults.certificateAuthority;
    	      this.certificateIds = defaults.certificateIds;
    	      this.commonName = defaults.commonName;
    	      this.configurationId = defaults.configurationId;
    	      this.createdAt = defaults.createdAt;
    	      this.domains = defaults.domains;
    	      this.id = defaults.id;
    	      this.state = defaults.state;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder certificateAuthority(String certificateAuthority) {
            if (certificateAuthority == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "certificateAuthority");
            }
            this.certificateAuthority = certificateAuthority;
            return this;
        }
        @CustomType.Setter
        public Builder certificateIds(List<String> certificateIds) {
            if (certificateIds == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "certificateIds");
            }
            this.certificateIds = certificateIds;
            return this;
        }
        public Builder certificateIds(String... certificateIds) {
            return certificateIds(List.of(certificateIds));
        }
        @CustomType.Setter
        public Builder commonName(String commonName) {
            if (commonName == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "commonName");
            }
            this.commonName = commonName;
            return this;
        }
        @CustomType.Setter
        public Builder configurationId(String configurationId) {
            if (configurationId == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "configurationId");
            }
            this.configurationId = configurationId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder domains(List<String> domains) {
            if (domains == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "domains");
            }
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetTlsSubscriptionResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetTlsSubscriptionResult build() {
            final var _resultValue = new GetTlsSubscriptionResult();
            _resultValue.certificateAuthority = certificateAuthority;
            _resultValue.certificateIds = certificateIds;
            _resultValue.commonName = commonName;
            _resultValue.configurationId = configurationId;
            _resultValue.createdAt = createdAt;
            _resultValue.domains = domains;
            _resultValue.id = id;
            _resultValue.state = state;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
