// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.fastly.inputs.NgwafWorkspaceAttackSignalThresholdsArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgwafWorkspaceArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgwafWorkspaceArgs Empty = new NgwafWorkspaceArgs();

    /**
     * Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
     * 
     */
    @Import(name="attackSignalThresholds", required=true)
    private Output<NgwafWorkspaceAttackSignalThresholdsArgs> attackSignalThresholds;

    /**
     * @return Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
     * 
     */
    public Output<NgwafWorkspaceAttackSignalThresholdsArgs> attackSignalThresholds() {
        return this.attackSignalThresholds;
    }

    /**
     * Specifies the request headers containing the client IP address. Maximum of 10 header names.
     * 
     */
    @Import(name="clientIpHeaders")
    private @Nullable Output<List<String>> clientIpHeaders;

    /**
     * @return Specifies the request headers containing the client IP address. Maximum of 10 header names.
     * 
     */
    public Optional<Output<List<String>>> clientIpHeaders() {
        return Optional.ofNullable(this.clientIpHeaders);
    }

    /**
     * The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
     * 
     */
    @Import(name="defaultBlockingResponseCode")
    private @Nullable Output<Integer> defaultBlockingResponseCode;

    /**
     * @return The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
     * 
     */
    public Optional<Output<Integer>> defaultBlockingResponseCode() {
        return Optional.ofNullable(this.defaultBlockingResponseCode);
    }

    /**
     * The description of the workspace
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return The description of the workspace
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
     * 
     */
    @Import(name="ipAnonymization")
    private @Nullable Output<String> ipAnonymization;

    /**
     * @return Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
     * 
     */
    public Optional<Output<String>> ipAnonymization() {
        return Optional.ofNullable(this.ipAnonymization);
    }

    /**
     * The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
     * 
     */
    @Import(name="mode", required=true)
    private Output<String> mode;

    /**
     * @return The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
     * 
     */
    public Output<String> mode() {
        return this.mode;
    }

    /**
     * The display name of the workspace.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The display name of the workspace.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private NgwafWorkspaceArgs() {}

    private NgwafWorkspaceArgs(NgwafWorkspaceArgs $) {
        this.attackSignalThresholds = $.attackSignalThresholds;
        this.clientIpHeaders = $.clientIpHeaders;
        this.defaultBlockingResponseCode = $.defaultBlockingResponseCode;
        this.description = $.description;
        this.ipAnonymization = $.ipAnonymization;
        this.mode = $.mode;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafWorkspaceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafWorkspaceArgs $;

        public Builder() {
            $ = new NgwafWorkspaceArgs();
        }

        public Builder(NgwafWorkspaceArgs defaults) {
            $ = new NgwafWorkspaceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attackSignalThresholds Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
         * 
         * @return builder
         * 
         */
        public Builder attackSignalThresholds(Output<NgwafWorkspaceAttackSignalThresholdsArgs> attackSignalThresholds) {
            $.attackSignalThresholds = attackSignalThresholds;
            return this;
        }

        /**
         * @param attackSignalThresholds Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
         * 
         * @return builder
         * 
         */
        public Builder attackSignalThresholds(NgwafWorkspaceAttackSignalThresholdsArgs attackSignalThresholds) {
            return attackSignalThresholds(Output.of(attackSignalThresholds));
        }

        /**
         * @param clientIpHeaders Specifies the request headers containing the client IP address. Maximum of 10 header names.
         * 
         * @return builder
         * 
         */
        public Builder clientIpHeaders(@Nullable Output<List<String>> clientIpHeaders) {
            $.clientIpHeaders = clientIpHeaders;
            return this;
        }

        /**
         * @param clientIpHeaders Specifies the request headers containing the client IP address. Maximum of 10 header names.
         * 
         * @return builder
         * 
         */
        public Builder clientIpHeaders(List<String> clientIpHeaders) {
            return clientIpHeaders(Output.of(clientIpHeaders));
        }

        /**
         * @param clientIpHeaders Specifies the request headers containing the client IP address. Maximum of 10 header names.
         * 
         * @return builder
         * 
         */
        public Builder clientIpHeaders(String... clientIpHeaders) {
            return clientIpHeaders(List.of(clientIpHeaders));
        }

        /**
         * @param defaultBlockingResponseCode The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
         * 
         * @return builder
         * 
         */
        public Builder defaultBlockingResponseCode(@Nullable Output<Integer> defaultBlockingResponseCode) {
            $.defaultBlockingResponseCode = defaultBlockingResponseCode;
            return this;
        }

        /**
         * @param defaultBlockingResponseCode The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
         * 
         * @return builder
         * 
         */
        public Builder defaultBlockingResponseCode(Integer defaultBlockingResponseCode) {
            return defaultBlockingResponseCode(Output.of(defaultBlockingResponseCode));
        }

        /**
         * @param description The description of the workspace
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the workspace
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipAnonymization Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
         * 
         * @return builder
         * 
         */
        public Builder ipAnonymization(@Nullable Output<String> ipAnonymization) {
            $.ipAnonymization = ipAnonymization;
            return this;
        }

        /**
         * @param ipAnonymization Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
         * 
         * @return builder
         * 
         */
        public Builder ipAnonymization(String ipAnonymization) {
            return ipAnonymization(Output.of(ipAnonymization));
        }

        /**
         * @param mode The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
         * 
         * @return builder
         * 
         */
        public Builder mode(Output<String> mode) {
            $.mode = mode;
            return this;
        }

        /**
         * @param mode The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
         * 
         * @return builder
         * 
         */
        public Builder mode(String mode) {
            return mode(Output.of(mode));
        }

        /**
         * @param name The display name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The display name of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public NgwafWorkspaceArgs build() {
            if ($.attackSignalThresholds == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceArgs", "attackSignalThresholds");
            }
            if ($.description == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceArgs", "description");
            }
            if ($.mode == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceArgs", "mode");
            }
            return $;
        }
    }

}
