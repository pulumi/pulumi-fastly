// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgwafWorkspaceRuleActionArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgwafWorkspaceRuleActionArgs Empty = new NgwafWorkspaceRuleActionArgs();

    /**
     * Redirect target (used when `type = redirect`).
     * 
     */
    @Import(name="redirectUrl")
    private @Nullable Output<String> redirectUrl;

    /**
     * @return Redirect target (used when `type = redirect`).
     * 
     */
    public Optional<Output<String>> redirectUrl() {
        return Optional.ofNullable(this.redirectUrl);
    }

    /**
     * Response code used with redirect.
     * 
     */
    @Import(name="responseCode")
    private @Nullable Output<Integer> responseCode;

    /**
     * @return Response code used with redirect.
     * 
     */
    public Optional<Output<Integer>> responseCode() {
        return Optional.ofNullable(this.responseCode);
    }

    /**
     * Signal name to exclude (used when `type = exclude_signal`).
     * 
     */
    @Import(name="signal")
    private @Nullable Output<String> signal;

    /**
     * @return Signal name to exclude (used when `type = exclude_signal`).
     * 
     */
    public Optional<Output<String>> signal() {
        return Optional.ofNullable(this.signal);
    }

    /**
     * The action type, e.g. `block`, `redirect`, `exclude_signal`.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The action type, e.g. `block`, `redirect`, `exclude_signal`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private NgwafWorkspaceRuleActionArgs() {}

    private NgwafWorkspaceRuleActionArgs(NgwafWorkspaceRuleActionArgs $) {
        this.redirectUrl = $.redirectUrl;
        this.responseCode = $.responseCode;
        this.signal = $.signal;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafWorkspaceRuleActionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafWorkspaceRuleActionArgs $;

        public Builder() {
            $ = new NgwafWorkspaceRuleActionArgs();
        }

        public Builder(NgwafWorkspaceRuleActionArgs defaults) {
            $ = new NgwafWorkspaceRuleActionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param redirectUrl Redirect target (used when `type = redirect`).
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(@Nullable Output<String> redirectUrl) {
            $.redirectUrl = redirectUrl;
            return this;
        }

        /**
         * @param redirectUrl Redirect target (used when `type = redirect`).
         * 
         * @return builder
         * 
         */
        public Builder redirectUrl(String redirectUrl) {
            return redirectUrl(Output.of(redirectUrl));
        }

        /**
         * @param responseCode Response code used with redirect.
         * 
         * @return builder
         * 
         */
        public Builder responseCode(@Nullable Output<Integer> responseCode) {
            $.responseCode = responseCode;
            return this;
        }

        /**
         * @param responseCode Response code used with redirect.
         * 
         * @return builder
         * 
         */
        public Builder responseCode(Integer responseCode) {
            return responseCode(Output.of(responseCode));
        }

        /**
         * @param signal Signal name to exclude (used when `type = exclude_signal`).
         * 
         * @return builder
         * 
         */
        public Builder signal(@Nullable Output<String> signal) {
            $.signal = signal;
            return this;
        }

        /**
         * @param signal Signal name to exclude (used when `type = exclude_signal`).
         * 
         * @return builder
         * 
         */
        public Builder signal(String signal) {
            return signal(Output.of(signal));
        }

        /**
         * @param type The action type, e.g. `block`, `redirect`, `exclude_signal`.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The action type, e.g. `block`, `redirect`, `exclude_signal`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public NgwafWorkspaceRuleActionArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceRuleActionArgs", "type");
            }
            return $;
        }
    }

}
