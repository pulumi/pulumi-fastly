// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.NgwafRedactionArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.NgwafRedactionState;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a Fastly Next-Gen WAF Redaction, which can automatically redact known patterns of sensitive information.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.NgwafRedaction;
 * import com.pulumi.fastly.NgwafRedactionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demoRedaction = new NgwafRedaction("demoRedaction", NgwafRedactionArgs.builder()
 *             .field("some field")
 *             .type("request_header")
 *             .workspaceId(demo.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Fastly Next-Gen WAF Redactions can be imported using their ID and the ID of the workspace they belong to.
 * 
 * ```sh
 * $ pulumi import fastly:index/ngwafRedaction:NgwafRedaction example &lt;workspace_id&gt;/&lt;redaction_id&gt;
 * ```
 * 
 */
@ResourceType(type="fastly:index/ngwafRedaction:NgwafRedaction")
public class NgwafRedaction extends com.pulumi.resources.CustomResource {
    /**
     * The name of the field that should be redacted.
     * 
     */
    @Export(name="field", refs={String.class}, tree="[0]")
    private Output<String> field;

    /**
     * @return The name of the field that should be redacted.
     * 
     */
    public Output<String> field() {
        return this.field;
    }
    /**
     * The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * The ID of the workspace.
     * 
     */
    @Export(name="workspaceId", refs={String.class}, tree="[0]")
    private Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NgwafRedaction(java.lang.String name) {
        this(name, NgwafRedactionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NgwafRedaction(java.lang.String name, NgwafRedactionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NgwafRedaction(java.lang.String name, NgwafRedactionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/ngwafRedaction:NgwafRedaction", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NgwafRedaction(java.lang.String name, Output<java.lang.String> id, @Nullable NgwafRedactionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/ngwafRedaction:NgwafRedaction", name, state, makeResourceOptions(options, id), false);
    }

    private static NgwafRedactionArgs makeArgs(NgwafRedactionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NgwafRedactionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NgwafRedaction get(java.lang.String name, Output<java.lang.String> id, @Nullable NgwafRedactionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NgwafRedaction(name, id, state, options);
    }
}
