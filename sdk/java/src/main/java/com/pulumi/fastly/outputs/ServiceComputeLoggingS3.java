// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceComputeLoggingS3 {
    /**
     * @return The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
     * 
     */
    private @Nullable String acl;
    /**
     * @return The name of the bucket in which to store the logs
     * 
     */
    private String bucketName;
    /**
     * @return The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is &#34;gzip&#34;, gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.
     * 
     */
    private @Nullable String compressionCodec;
    /**
     * @return If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
     * 
     */
    private @Nullable String domain;
    /**
     * @return Maximum size of an uploaded log file, if non-zero.
     * 
     */
    private @Nullable Integer fileMaxBytes;
    /**
     * @return Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     * 
     */
    private @Nullable Integer gzipLevel;
    /**
     * @return How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     * 
     */
    private @Nullable String messageType;
    /**
     * @return The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket&#39;s root path
     * 
     */
    private @Nullable String path;
    /**
     * @return How frequently the logs should be transferred, in seconds. Default `3600`
     * 
     */
    private @Nullable Integer period;
    /**
     * @return A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     * 
     */
    private @Nullable String publicKey;
    /**
     * @return The S3 storage class (redundancy level). Should be one of: `standard`, `intelligent_tiering`, `standard_ia`, `onezone_ia`, `glacier`, `glacier_ir`, `deep_archive`, or `reduced_redundancy`
     * 
     */
    private @Nullable String redundancy;
    /**
     * @return AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iam_role` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
     * 
     */
    private @Nullable String s3AccessKey;
    /**
     * @return The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `access_key` and `secret_key` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
     * 
     */
    private @Nullable String s3IamRole;
    /**
     * @return AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iam_role` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
     * 
     */
    private @Nullable String s3SecretKey;
    /**
     * @return Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
     * 
     */
    private @Nullable String serverSideEncryption;
    /**
     * @return Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`
     * 
     */
    private @Nullable String serverSideEncryptionKmsKeyId;
    /**
     * @return The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     * 
     */
    private @Nullable String timestampFormat;

    private ServiceComputeLoggingS3() {}
    /**
     * @return The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
     * 
     */
    public Optional<String> acl() {
        return Optional.ofNullable(this.acl);
    }
    /**
     * @return The name of the bucket in which to store the logs
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is &#34;gzip&#34;, gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzip_level in the same API request will result in an error.
     * 
     */
    public Optional<String> compressionCodec() {
        return Optional.ofNullable(this.compressionCodec);
    }
    /**
     * @return If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return Maximum size of an uploaded log file, if non-zero.
     * 
     */
    public Optional<Integer> fileMaxBytes() {
        return Optional.ofNullable(this.fileMaxBytes);
    }
    /**
     * @return Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     * 
     */
    public Optional<Integer> gzipLevel() {
        return Optional.ofNullable(this.gzipLevel);
    }
    /**
     * @return How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     * 
     */
    public Optional<String> messageType() {
        return Optional.ofNullable(this.messageType);
    }
    /**
     * @return The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket&#39;s root path
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return How frequently the logs should be transferred, in seconds. Default `3600`
     * 
     */
    public Optional<Integer> period() {
        return Optional.ofNullable(this.period);
    }
    /**
     * @return A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     * 
     */
    public Optional<String> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }
    /**
     * @return The S3 storage class (redundancy level). Should be one of: `standard`, `intelligent_tiering`, `standard_ia`, `onezone_ia`, `glacier`, `glacier_ir`, `deep_archive`, or `reduced_redundancy`
     * 
     */
    public Optional<String> redundancy() {
        return Optional.ofNullable(this.redundancy);
    }
    /**
     * @return AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iam_role` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
     * 
     */
    public Optional<String> s3AccessKey() {
        return Optional.ofNullable(this.s3AccessKey);
    }
    /**
     * @return The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `access_key` and `secret_key` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
     * 
     */
    public Optional<String> s3IamRole() {
        return Optional.ofNullable(this.s3IamRole);
    }
    /**
     * @return AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iam_role` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
     * 
     */
    public Optional<String> s3SecretKey() {
        return Optional.ofNullable(this.s3SecretKey);
    }
    /**
     * @return Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
     * 
     */
    public Optional<String> serverSideEncryption() {
        return Optional.ofNullable(this.serverSideEncryption);
    }
    /**
     * @return Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`
     * 
     */
    public Optional<String> serverSideEncryptionKmsKeyId() {
        return Optional.ofNullable(this.serverSideEncryptionKmsKeyId);
    }
    /**
     * @return The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     * 
     */
    public Optional<String> timestampFormat() {
        return Optional.ofNullable(this.timestampFormat);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceComputeLoggingS3 defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String acl;
        private String bucketName;
        private @Nullable String compressionCodec;
        private @Nullable String domain;
        private @Nullable Integer fileMaxBytes;
        private @Nullable Integer gzipLevel;
        private @Nullable String messageType;
        private String name;
        private @Nullable String path;
        private @Nullable Integer period;
        private @Nullable String publicKey;
        private @Nullable String redundancy;
        private @Nullable String s3AccessKey;
        private @Nullable String s3IamRole;
        private @Nullable String s3SecretKey;
        private @Nullable String serverSideEncryption;
        private @Nullable String serverSideEncryptionKmsKeyId;
        private @Nullable String timestampFormat;
        public Builder() {}
        public Builder(ServiceComputeLoggingS3 defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.bucketName = defaults.bucketName;
    	      this.compressionCodec = defaults.compressionCodec;
    	      this.domain = defaults.domain;
    	      this.fileMaxBytes = defaults.fileMaxBytes;
    	      this.gzipLevel = defaults.gzipLevel;
    	      this.messageType = defaults.messageType;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.period = defaults.period;
    	      this.publicKey = defaults.publicKey;
    	      this.redundancy = defaults.redundancy;
    	      this.s3AccessKey = defaults.s3AccessKey;
    	      this.s3IamRole = defaults.s3IamRole;
    	      this.s3SecretKey = defaults.s3SecretKey;
    	      this.serverSideEncryption = defaults.serverSideEncryption;
    	      this.serverSideEncryptionKmsKeyId = defaults.serverSideEncryptionKmsKeyId;
    	      this.timestampFormat = defaults.timestampFormat;
        }

        @CustomType.Setter
        public Builder acl(@Nullable String acl) {

            this.acl = acl;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingS3", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder compressionCodec(@Nullable String compressionCodec) {

            this.compressionCodec = compressionCodec;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder fileMaxBytes(@Nullable Integer fileMaxBytes) {

            this.fileMaxBytes = fileMaxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder gzipLevel(@Nullable Integer gzipLevel) {

            this.gzipLevel = gzipLevel;
            return this;
        }
        @CustomType.Setter
        public Builder messageType(@Nullable String messageType) {

            this.messageType = messageType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingS3", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder period(@Nullable Integer period) {

            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(@Nullable String publicKey) {

            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder redundancy(@Nullable String redundancy) {

            this.redundancy = redundancy;
            return this;
        }
        @CustomType.Setter
        public Builder s3AccessKey(@Nullable String s3AccessKey) {

            this.s3AccessKey = s3AccessKey;
            return this;
        }
        @CustomType.Setter
        public Builder s3IamRole(@Nullable String s3IamRole) {

            this.s3IamRole = s3IamRole;
            return this;
        }
        @CustomType.Setter
        public Builder s3SecretKey(@Nullable String s3SecretKey) {

            this.s3SecretKey = s3SecretKey;
            return this;
        }
        @CustomType.Setter
        public Builder serverSideEncryption(@Nullable String serverSideEncryption) {

            this.serverSideEncryption = serverSideEncryption;
            return this;
        }
        @CustomType.Setter
        public Builder serverSideEncryptionKmsKeyId(@Nullable String serverSideEncryptionKmsKeyId) {

            this.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder timestampFormat(@Nullable String timestampFormat) {

            this.timestampFormat = timestampFormat;
            return this;
        }
        public ServiceComputeLoggingS3 build() {
            final var _resultValue = new ServiceComputeLoggingS3();
            _resultValue.acl = acl;
            _resultValue.bucketName = bucketName;
            _resultValue.compressionCodec = compressionCodec;
            _resultValue.domain = domain;
            _resultValue.fileMaxBytes = fileMaxBytes;
            _resultValue.gzipLevel = gzipLevel;
            _resultValue.messageType = messageType;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.period = period;
            _resultValue.publicKey = publicKey;
            _resultValue.redundancy = redundancy;
            _resultValue.s3AccessKey = s3AccessKey;
            _resultValue.s3IamRole = s3IamRole;
            _resultValue.s3SecretKey = s3SecretKey;
            _resultValue.serverSideEncryption = serverSideEncryption;
            _resultValue.serverSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            _resultValue.timestampFormat = timestampFormat;
            return _resultValue;
        }
    }
}
