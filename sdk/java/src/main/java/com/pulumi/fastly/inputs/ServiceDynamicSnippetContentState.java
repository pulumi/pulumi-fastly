// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceDynamicSnippetContentState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceDynamicSnippetContentState Empty = new ServiceDynamicSnippetContentState();

    /**
     * The VCL code that specifies exactly what the snippet does
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return The VCL code that specifies exactly what the snippet does
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
     * 
     */
    @Import(name="manageSnippets")
    private @Nullable Output<Boolean> manageSnippets;

    /**
     * @return Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
     * 
     */
    public Optional<Output<Boolean>> manageSnippets() {
        return Optional.ofNullable(this.manageSnippets);
    }

    /**
     * The ID of the service that the dynamic snippet belongs to
     * 
     */
    @Import(name="serviceId")
    private @Nullable Output<String> serviceId;

    /**
     * @return The ID of the service that the dynamic snippet belongs to
     * 
     */
    public Optional<Output<String>> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * The ID of the dynamic snippet that the content belong to
     * 
     */
    @Import(name="snippetId")
    private @Nullable Output<String> snippetId;

    /**
     * @return The ID of the dynamic snippet that the content belong to
     * 
     */
    public Optional<Output<String>> snippetId() {
        return Optional.ofNullable(this.snippetId);
    }

    private ServiceDynamicSnippetContentState() {}

    private ServiceDynamicSnippetContentState(ServiceDynamicSnippetContentState $) {
        this.content = $.content;
        this.manageSnippets = $.manageSnippets;
        this.serviceId = $.serviceId;
        this.snippetId = $.snippetId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceDynamicSnippetContentState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceDynamicSnippetContentState $;

        public Builder() {
            $ = new ServiceDynamicSnippetContentState();
        }

        public Builder(ServiceDynamicSnippetContentState defaults) {
            $ = new ServiceDynamicSnippetContentState(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The VCL code that specifies exactly what the snippet does
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The VCL code that specifies exactly what the snippet does
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param manageSnippets Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
         * 
         * @return builder
         * 
         */
        public Builder manageSnippets(@Nullable Output<Boolean> manageSnippets) {
            $.manageSnippets = manageSnippets;
            return this;
        }

        /**
         * @param manageSnippets Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
         * 
         * @return builder
         * 
         */
        public Builder manageSnippets(Boolean manageSnippets) {
            return manageSnippets(Output.of(manageSnippets));
        }

        /**
         * @param serviceId The ID of the service that the dynamic snippet belongs to
         * 
         * @return builder
         * 
         */
        public Builder serviceId(@Nullable Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The ID of the service that the dynamic snippet belongs to
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        /**
         * @param snippetId The ID of the dynamic snippet that the content belong to
         * 
         * @return builder
         * 
         */
        public Builder snippetId(@Nullable Output<String> snippetId) {
            $.snippetId = snippetId;
            return this;
        }

        /**
         * @param snippetId The ID of the dynamic snippet that the content belong to
         * 
         * @return builder
         * 
         */
        public Builder snippetId(String snippetId) {
            return snippetId(Output.of(snippetId));
        }

        public ServiceDynamicSnippetContentState build() {
            return $;
        }
    }

}
