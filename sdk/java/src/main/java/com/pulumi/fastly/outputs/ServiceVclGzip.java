// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclGzip {
    /**
     * @return Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    private @Nullable String cacheCondition;
    /**
     * @return The content-type for each type of content you wish to have dynamically gzip&#39;ed. Example: `[&#34;text/html&#34;, &#34;text/css&#34;]`
     * 
     */
    private @Nullable List<String> contentTypes;
    /**
     * @return File extensions for each file type to dynamically gzip. Example: `[&#34;css&#34;, &#34;js&#34;]`
     * 
     */
    private @Nullable List<String> extensions;
    /**
     * @return A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;

    private ServiceVclGzip() {}
    /**
     * @return Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    public Optional<String> cacheCondition() {
        return Optional.ofNullable(this.cacheCondition);
    }
    /**
     * @return The content-type for each type of content you wish to have dynamically gzip&#39;ed. Example: `[&#34;text/html&#34;, &#34;text/css&#34;]`
     * 
     */
    public List<String> contentTypes() {
        return this.contentTypes == null ? List.of() : this.contentTypes;
    }
    /**
     * @return File extensions for each file type to dynamically gzip. Example: `[&#34;css&#34;, &#34;js&#34;]`
     * 
     */
    public List<String> extensions() {
        return this.extensions == null ? List.of() : this.extensions;
    }
    /**
     * @return A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclGzip defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String cacheCondition;
        private @Nullable List<String> contentTypes;
        private @Nullable List<String> extensions;
        private String name;
        public Builder() {}
        public Builder(ServiceVclGzip defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cacheCondition = defaults.cacheCondition;
    	      this.contentTypes = defaults.contentTypes;
    	      this.extensions = defaults.extensions;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder cacheCondition(@Nullable String cacheCondition) {

            this.cacheCondition = cacheCondition;
            return this;
        }
        @CustomType.Setter
        public Builder contentTypes(@Nullable List<String> contentTypes) {

            this.contentTypes = contentTypes;
            return this;
        }
        public Builder contentTypes(String... contentTypes) {
            return contentTypes(List.of(contentTypes));
        }
        @CustomType.Setter
        public Builder extensions(@Nullable List<String> extensions) {

            this.extensions = extensions;
            return this;
        }
        public Builder extensions(String... extensions) {
            return extensions(List.of(extensions));
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceVclGzip", "name");
            }
            this.name = name;
            return this;
        }
        public ServiceVclGzip build() {
            final var _resultValue = new ServiceVclGzip();
            _resultValue.cacheCondition = cacheCondition;
            _resultValue.contentTypes = contentTypes;
            _resultValue.extensions = extensions;
            _resultValue.name = name;
            return _resultValue;
        }
    }
}
