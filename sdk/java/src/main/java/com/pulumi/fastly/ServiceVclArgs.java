// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.fastly.inputs.ServiceVclAclArgs;
import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
import com.pulumi.fastly.inputs.ServiceVclCacheSettingArgs;
import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
import com.pulumi.fastly.inputs.ServiceVclDictionaryArgs;
import com.pulumi.fastly.inputs.ServiceVclDirectorArgs;
import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
import com.pulumi.fastly.inputs.ServiceVclDynamicsnippetArgs;
import com.pulumi.fastly.inputs.ServiceVclGzipArgs;
import com.pulumi.fastly.inputs.ServiceVclHeaderArgs;
import com.pulumi.fastly.inputs.ServiceVclHealthcheckArgs;
import com.pulumi.fastly.inputs.ServiceVclImageOptimizerDefaultSettingsArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingBigqueryArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingBlobstorageArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingCloudfileArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingDatadogArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingDigitaloceanArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingElasticsearchArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingFtpArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingGcArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingGooglepubsubArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingHerokusArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingHoneycombArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingHttpArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingKafkaArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingKineseArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingLogentryArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingLogglyArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingLogshuttleArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingNewrelicArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingNewrelicotlpArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingOpenstackArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingPapertrailArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingS3Args;
import com.pulumi.fastly.inputs.ServiceVclLoggingScalyrArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingSftpArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingSplunkArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingSumologicArgs;
import com.pulumi.fastly.inputs.ServiceVclLoggingSyslogArgs;
import com.pulumi.fastly.inputs.ServiceVclProductEnablementArgs;
import com.pulumi.fastly.inputs.ServiceVclRateLimiterArgs;
import com.pulumi.fastly.inputs.ServiceVclRequestSettingArgs;
import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
import com.pulumi.fastly.inputs.ServiceVclSnippetArgs;
import com.pulumi.fastly.inputs.ServiceVclVclArgs;
import com.pulumi.fastly.inputs.ServiceVclWafArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclArgs Empty = new ServiceVclArgs();

    @Import(name="acls")
    private @Nullable Output<List<ServiceVclAclArgs>> acls;

    public Optional<Output<List<ServiceVclAclArgs>>> acls() {
        return Optional.ofNullable(this.acls);
    }

    /**
     * Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but
     * will not activate it if this is set to `false`. Default `true`
     * 
     */
    @Import(name="activate")
    private @Nullable Output<Boolean> activate;

    /**
     * @return Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but
     * will not activate it if this is set to `false`. Default `true`
     * 
     */
    public Optional<Output<Boolean>> activate() {
        return Optional.ofNullable(this.activate);
    }

    @Import(name="backends")
    private @Nullable Output<List<ServiceVclBackendArgs>> backends;

    public Optional<Output<List<ServiceVclBackendArgs>>> backends() {
        return Optional.ofNullable(this.backends);
    }

    @Import(name="cacheSettings")
    private @Nullable Output<List<ServiceVclCacheSettingArgs>> cacheSettings;

    public Optional<Output<List<ServiceVclCacheSettingArgs>>> cacheSettings() {
        return Optional.ofNullable(this.cacheSettings);
    }

    @Import(name="comment")
    private @Nullable Output<String> comment;

    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="conditions")
    private @Nullable Output<List<ServiceVclConditionArgs>> conditions;

    public Optional<Output<List<ServiceVclConditionArgs>>> conditions() {
        return Optional.ofNullable(this.conditions);
    }

    /**
     * The default hostname
     * 
     */
    @Import(name="defaultHost")
    private @Nullable Output<String> defaultHost;

    /**
     * @return The default hostname
     * 
     */
    public Optional<Output<String>> defaultHost() {
        return Optional.ofNullable(this.defaultHost);
    }

    /**
     * The default Time-to-live (TTL) for requests
     * 
     */
    @Import(name="defaultTtl")
    private @Nullable Output<Integer> defaultTtl;

    /**
     * @return The default Time-to-live (TTL) for requests
     * 
     */
    public Optional<Output<Integer>> defaultTtl() {
        return Optional.ofNullable(this.defaultTtl);
    }

    @Import(name="dictionaries")
    private @Nullable Output<List<ServiceVclDictionaryArgs>> dictionaries;

    public Optional<Output<List<ServiceVclDictionaryArgs>>> dictionaries() {
        return Optional.ofNullable(this.dictionaries);
    }

    @Import(name="directors")
    private @Nullable Output<List<ServiceVclDirectorArgs>> directors;

    public Optional<Output<List<ServiceVclDirectorArgs>>> directors() {
        return Optional.ofNullable(this.directors);
    }

    /**
     * A set of Domain names to serve as entry points for your Service
     * 
     */
    @Import(name="domains", required=true)
    private Output<List<ServiceVclDomainArgs>> domains;

    /**
     * @return A set of Domain names to serve as entry points for your Service
     * 
     */
    public Output<List<ServiceVclDomainArgs>> domains() {
        return this.domains;
    }

    @Import(name="dynamicsnippets")
    private @Nullable Output<List<ServiceVclDynamicsnippetArgs>> dynamicsnippets;

    public Optional<Output<List<ServiceVclDynamicsnippetArgs>>> dynamicsnippets() {
        return Optional.ofNullable(this.dynamicsnippets);
    }

    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default
     * `false`
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default
     * `false`
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    @Import(name="gzips")
    private @Nullable Output<List<ServiceVclGzipArgs>> gzips;

    public Optional<Output<List<ServiceVclGzipArgs>>> gzips() {
        return Optional.ofNullable(this.gzips);
    }

    @Import(name="headers")
    private @Nullable Output<List<ServiceVclHeaderArgs>> headers;

    public Optional<Output<List<ServiceVclHeaderArgs>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    @Import(name="healthchecks")
    private @Nullable Output<List<ServiceVclHealthcheckArgs>> healthchecks;

    public Optional<Output<List<ServiceVclHealthcheckArgs>>> healthchecks() {
        return Optional.ofNullable(this.healthchecks);
    }

    /**
     * Enables support for the HTTP/3 (QUIC) protocol
     * 
     */
    @Import(name="http3")
    private @Nullable Output<Boolean> http3;

    /**
     * @return Enables support for the HTTP/3 (QUIC) protocol
     * 
     */
    public Optional<Output<Boolean>> http3() {
        return Optional.ofNullable(this.http3);
    }

    @Import(name="imageOptimizerDefaultSettings")
    private @Nullable Output<ServiceVclImageOptimizerDefaultSettingsArgs> imageOptimizerDefaultSettings;

    public Optional<Output<ServiceVclImageOptimizerDefaultSettingsArgs>> imageOptimizerDefaultSettings() {
        return Optional.ofNullable(this.imageOptimizerDefaultSettings);
    }

    @Import(name="loggingBigqueries")
    private @Nullable Output<List<ServiceVclLoggingBigqueryArgs>> loggingBigqueries;

    public Optional<Output<List<ServiceVclLoggingBigqueryArgs>>> loggingBigqueries() {
        return Optional.ofNullable(this.loggingBigqueries);
    }

    @Import(name="loggingBlobstorages")
    private @Nullable Output<List<ServiceVclLoggingBlobstorageArgs>> loggingBlobstorages;

    public Optional<Output<List<ServiceVclLoggingBlobstorageArgs>>> loggingBlobstorages() {
        return Optional.ofNullable(this.loggingBlobstorages);
    }

    @Import(name="loggingCloudfiles")
    private @Nullable Output<List<ServiceVclLoggingCloudfileArgs>> loggingCloudfiles;

    public Optional<Output<List<ServiceVclLoggingCloudfileArgs>>> loggingCloudfiles() {
        return Optional.ofNullable(this.loggingCloudfiles);
    }

    @Import(name="loggingDatadogs")
    private @Nullable Output<List<ServiceVclLoggingDatadogArgs>> loggingDatadogs;

    public Optional<Output<List<ServiceVclLoggingDatadogArgs>>> loggingDatadogs() {
        return Optional.ofNullable(this.loggingDatadogs);
    }

    @Import(name="loggingDigitaloceans")
    private @Nullable Output<List<ServiceVclLoggingDigitaloceanArgs>> loggingDigitaloceans;

    public Optional<Output<List<ServiceVclLoggingDigitaloceanArgs>>> loggingDigitaloceans() {
        return Optional.ofNullable(this.loggingDigitaloceans);
    }

    @Import(name="loggingElasticsearches")
    private @Nullable Output<List<ServiceVclLoggingElasticsearchArgs>> loggingElasticsearches;

    public Optional<Output<List<ServiceVclLoggingElasticsearchArgs>>> loggingElasticsearches() {
        return Optional.ofNullable(this.loggingElasticsearches);
    }

    @Import(name="loggingFtps")
    private @Nullable Output<List<ServiceVclLoggingFtpArgs>> loggingFtps;

    public Optional<Output<List<ServiceVclLoggingFtpArgs>>> loggingFtps() {
        return Optional.ofNullable(this.loggingFtps);
    }

    @Import(name="loggingGcs")
    private @Nullable Output<List<ServiceVclLoggingGcArgs>> loggingGcs;

    public Optional<Output<List<ServiceVclLoggingGcArgs>>> loggingGcs() {
        return Optional.ofNullable(this.loggingGcs);
    }

    @Import(name="loggingGooglepubsubs")
    private @Nullable Output<List<ServiceVclLoggingGooglepubsubArgs>> loggingGooglepubsubs;

    public Optional<Output<List<ServiceVclLoggingGooglepubsubArgs>>> loggingGooglepubsubs() {
        return Optional.ofNullable(this.loggingGooglepubsubs);
    }

    @Import(name="loggingHerokus")
    private @Nullable Output<List<ServiceVclLoggingHerokusArgs>> loggingHerokus;

    public Optional<Output<List<ServiceVclLoggingHerokusArgs>>> loggingHerokus() {
        return Optional.ofNullable(this.loggingHerokus);
    }

    @Import(name="loggingHoneycombs")
    private @Nullable Output<List<ServiceVclLoggingHoneycombArgs>> loggingHoneycombs;

    public Optional<Output<List<ServiceVclLoggingHoneycombArgs>>> loggingHoneycombs() {
        return Optional.ofNullable(this.loggingHoneycombs);
    }

    @Import(name="loggingHttps")
    private @Nullable Output<List<ServiceVclLoggingHttpArgs>> loggingHttps;

    public Optional<Output<List<ServiceVclLoggingHttpArgs>>> loggingHttps() {
        return Optional.ofNullable(this.loggingHttps);
    }

    @Import(name="loggingKafkas")
    private @Nullable Output<List<ServiceVclLoggingKafkaArgs>> loggingKafkas;

    public Optional<Output<List<ServiceVclLoggingKafkaArgs>>> loggingKafkas() {
        return Optional.ofNullable(this.loggingKafkas);
    }

    @Import(name="loggingKineses")
    private @Nullable Output<List<ServiceVclLoggingKineseArgs>> loggingKineses;

    public Optional<Output<List<ServiceVclLoggingKineseArgs>>> loggingKineses() {
        return Optional.ofNullable(this.loggingKineses);
    }

    @Import(name="loggingLogentries")
    private @Nullable Output<List<ServiceVclLoggingLogentryArgs>> loggingLogentries;

    public Optional<Output<List<ServiceVclLoggingLogentryArgs>>> loggingLogentries() {
        return Optional.ofNullable(this.loggingLogentries);
    }

    @Import(name="loggingLogglies")
    private @Nullable Output<List<ServiceVclLoggingLogglyArgs>> loggingLogglies;

    public Optional<Output<List<ServiceVclLoggingLogglyArgs>>> loggingLogglies() {
        return Optional.ofNullable(this.loggingLogglies);
    }

    @Import(name="loggingLogshuttles")
    private @Nullable Output<List<ServiceVclLoggingLogshuttleArgs>> loggingLogshuttles;

    public Optional<Output<List<ServiceVclLoggingLogshuttleArgs>>> loggingLogshuttles() {
        return Optional.ofNullable(this.loggingLogshuttles);
    }

    @Import(name="loggingNewrelicotlps")
    private @Nullable Output<List<ServiceVclLoggingNewrelicotlpArgs>> loggingNewrelicotlps;

    public Optional<Output<List<ServiceVclLoggingNewrelicotlpArgs>>> loggingNewrelicotlps() {
        return Optional.ofNullable(this.loggingNewrelicotlps);
    }

    @Import(name="loggingNewrelics")
    private @Nullable Output<List<ServiceVclLoggingNewrelicArgs>> loggingNewrelics;

    public Optional<Output<List<ServiceVclLoggingNewrelicArgs>>> loggingNewrelics() {
        return Optional.ofNullable(this.loggingNewrelics);
    }

    @Import(name="loggingOpenstacks")
    private @Nullable Output<List<ServiceVclLoggingOpenstackArgs>> loggingOpenstacks;

    public Optional<Output<List<ServiceVclLoggingOpenstackArgs>>> loggingOpenstacks() {
        return Optional.ofNullable(this.loggingOpenstacks);
    }

    @Import(name="loggingPapertrails")
    private @Nullable Output<List<ServiceVclLoggingPapertrailArgs>> loggingPapertrails;

    public Optional<Output<List<ServiceVclLoggingPapertrailArgs>>> loggingPapertrails() {
        return Optional.ofNullable(this.loggingPapertrails);
    }

    @Import(name="loggingS3s")
    private @Nullable Output<List<ServiceVclLoggingS3Args>> loggingS3s;

    public Optional<Output<List<ServiceVclLoggingS3Args>>> loggingS3s() {
        return Optional.ofNullable(this.loggingS3s);
    }

    @Import(name="loggingScalyrs")
    private @Nullable Output<List<ServiceVclLoggingScalyrArgs>> loggingScalyrs;

    public Optional<Output<List<ServiceVclLoggingScalyrArgs>>> loggingScalyrs() {
        return Optional.ofNullable(this.loggingScalyrs);
    }

    @Import(name="loggingSftps")
    private @Nullable Output<List<ServiceVclLoggingSftpArgs>> loggingSftps;

    public Optional<Output<List<ServiceVclLoggingSftpArgs>>> loggingSftps() {
        return Optional.ofNullable(this.loggingSftps);
    }

    @Import(name="loggingSplunks")
    private @Nullable Output<List<ServiceVclLoggingSplunkArgs>> loggingSplunks;

    public Optional<Output<List<ServiceVclLoggingSplunkArgs>>> loggingSplunks() {
        return Optional.ofNullable(this.loggingSplunks);
    }

    @Import(name="loggingSumologics")
    private @Nullable Output<List<ServiceVclLoggingSumologicArgs>> loggingSumologics;

    public Optional<Output<List<ServiceVclLoggingSumologicArgs>>> loggingSumologics() {
        return Optional.ofNullable(this.loggingSumologics);
    }

    @Import(name="loggingSyslogs")
    private @Nullable Output<List<ServiceVclLoggingSyslogArgs>> loggingSyslogs;

    public Optional<Output<List<ServiceVclLoggingSyslogArgs>>> loggingSyslogs() {
        return Optional.ofNullable(this.loggingSyslogs);
    }

    /**
     * The unique name for the Service to create
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name for the Service to create
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="productEnablement")
    private @Nullable Output<ServiceVclProductEnablementArgs> productEnablement;

    public Optional<Output<ServiceVclProductEnablementArgs>> productEnablement() {
        return Optional.ofNullable(this.productEnablement);
    }

    @Import(name="rateLimiters")
    private @Nullable Output<List<ServiceVclRateLimiterArgs>> rateLimiters;

    public Optional<Output<List<ServiceVclRateLimiterArgs>>> rateLimiters() {
        return Optional.ofNullable(this.rateLimiters);
    }

    @Import(name="requestSettings")
    private @Nullable Output<List<ServiceVclRequestSettingArgs>> requestSettings;

    public Optional<Output<List<ServiceVclRequestSettingArgs>>> requestSettings() {
        return Optional.ofNullable(this.requestSettings);
    }

    @Import(name="responseObjects")
    private @Nullable Output<List<ServiceVclResponseObjectArgs>> responseObjects;

    public Optional<Output<List<ServiceVclResponseObjectArgs>>> responseObjects() {
        return Optional.ofNullable(this.responseObjects);
    }

    @Import(name="reuse")
    private @Nullable Output<Boolean> reuse;

    public Optional<Output<Boolean>> reuse() {
        return Optional.ofNullable(this.reuse);
    }

    @Import(name="snippets")
    private @Nullable Output<List<ServiceVclSnippetArgs>> snippets;

    public Optional<Output<List<ServiceVclSnippetArgs>>> snippets() {
        return Optional.ofNullable(this.snippets);
    }

    /**
     * Enables serving a stale object if there is an error
     * 
     */
    @Import(name="staleIfError")
    private @Nullable Output<Boolean> staleIfError;

    /**
     * @return Enables serving a stale object if there is an error
     * 
     */
    public Optional<Output<Boolean>> staleIfError() {
        return Optional.ofNullable(this.staleIfError);
    }

    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     * 
     */
    @Import(name="staleIfErrorTtl")
    private @Nullable Output<Integer> staleIfErrorTtl;

    /**
     * @return The default time-to-live (TTL) for serving the stale object for the version
     * 
     */
    public Optional<Output<Integer>> staleIfErrorTtl() {
        return Optional.ofNullable(this.staleIfErrorTtl);
    }

    @Import(name="vcls")
    private @Nullable Output<List<ServiceVclVclArgs>> vcls;

    public Optional<Output<List<ServiceVclVclArgs>>> vcls() {
        return Optional.ofNullable(this.vcls);
    }

    /**
     * Description field for the version
     * 
     */
    @Import(name="versionComment")
    private @Nullable Output<String> versionComment;

    /**
     * @return Description field for the version
     * 
     */
    public Optional<Output<String>> versionComment() {
        return Optional.ofNullable(this.versionComment);
    }

    @Import(name="waf")
    private @Nullable Output<ServiceVclWafArgs> waf;

    public Optional<Output<ServiceVclWafArgs>> waf() {
        return Optional.ofNullable(this.waf);
    }

    private ServiceVclArgs() {}

    private ServiceVclArgs(ServiceVclArgs $) {
        this.acls = $.acls;
        this.activate = $.activate;
        this.backends = $.backends;
        this.cacheSettings = $.cacheSettings;
        this.comment = $.comment;
        this.conditions = $.conditions;
        this.defaultHost = $.defaultHost;
        this.defaultTtl = $.defaultTtl;
        this.dictionaries = $.dictionaries;
        this.directors = $.directors;
        this.domains = $.domains;
        this.dynamicsnippets = $.dynamicsnippets;
        this.forceDestroy = $.forceDestroy;
        this.gzips = $.gzips;
        this.headers = $.headers;
        this.healthchecks = $.healthchecks;
        this.http3 = $.http3;
        this.imageOptimizerDefaultSettings = $.imageOptimizerDefaultSettings;
        this.loggingBigqueries = $.loggingBigqueries;
        this.loggingBlobstorages = $.loggingBlobstorages;
        this.loggingCloudfiles = $.loggingCloudfiles;
        this.loggingDatadogs = $.loggingDatadogs;
        this.loggingDigitaloceans = $.loggingDigitaloceans;
        this.loggingElasticsearches = $.loggingElasticsearches;
        this.loggingFtps = $.loggingFtps;
        this.loggingGcs = $.loggingGcs;
        this.loggingGooglepubsubs = $.loggingGooglepubsubs;
        this.loggingHerokus = $.loggingHerokus;
        this.loggingHoneycombs = $.loggingHoneycombs;
        this.loggingHttps = $.loggingHttps;
        this.loggingKafkas = $.loggingKafkas;
        this.loggingKineses = $.loggingKineses;
        this.loggingLogentries = $.loggingLogentries;
        this.loggingLogglies = $.loggingLogglies;
        this.loggingLogshuttles = $.loggingLogshuttles;
        this.loggingNewrelicotlps = $.loggingNewrelicotlps;
        this.loggingNewrelics = $.loggingNewrelics;
        this.loggingOpenstacks = $.loggingOpenstacks;
        this.loggingPapertrails = $.loggingPapertrails;
        this.loggingS3s = $.loggingS3s;
        this.loggingScalyrs = $.loggingScalyrs;
        this.loggingSftps = $.loggingSftps;
        this.loggingSplunks = $.loggingSplunks;
        this.loggingSumologics = $.loggingSumologics;
        this.loggingSyslogs = $.loggingSyslogs;
        this.name = $.name;
        this.productEnablement = $.productEnablement;
        this.rateLimiters = $.rateLimiters;
        this.requestSettings = $.requestSettings;
        this.responseObjects = $.responseObjects;
        this.reuse = $.reuse;
        this.snippets = $.snippets;
        this.staleIfError = $.staleIfError;
        this.staleIfErrorTtl = $.staleIfErrorTtl;
        this.vcls = $.vcls;
        this.versionComment = $.versionComment;
        this.waf = $.waf;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclArgs $;

        public Builder() {
            $ = new ServiceVclArgs();
        }

        public Builder(ServiceVclArgs defaults) {
            $ = new ServiceVclArgs(Objects.requireNonNull(defaults));
        }

        public Builder acls(@Nullable Output<List<ServiceVclAclArgs>> acls) {
            $.acls = acls;
            return this;
        }

        public Builder acls(List<ServiceVclAclArgs> acls) {
            return acls(Output.of(acls));
        }

        public Builder acls(ServiceVclAclArgs... acls) {
            return acls(List.of(acls));
        }

        /**
         * @param activate Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but
         * will not activate it if this is set to `false`. Default `true`
         * 
         * @return builder
         * 
         */
        public Builder activate(@Nullable Output<Boolean> activate) {
            $.activate = activate;
            return this;
        }

        /**
         * @param activate Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but
         * will not activate it if this is set to `false`. Default `true`
         * 
         * @return builder
         * 
         */
        public Builder activate(Boolean activate) {
            return activate(Output.of(activate));
        }

        public Builder backends(@Nullable Output<List<ServiceVclBackendArgs>> backends) {
            $.backends = backends;
            return this;
        }

        public Builder backends(List<ServiceVclBackendArgs> backends) {
            return backends(Output.of(backends));
        }

        public Builder backends(ServiceVclBackendArgs... backends) {
            return backends(List.of(backends));
        }

        public Builder cacheSettings(@Nullable Output<List<ServiceVclCacheSettingArgs>> cacheSettings) {
            $.cacheSettings = cacheSettings;
            return this;
        }

        public Builder cacheSettings(List<ServiceVclCacheSettingArgs> cacheSettings) {
            return cacheSettings(Output.of(cacheSettings));
        }

        public Builder cacheSettings(ServiceVclCacheSettingArgs... cacheSettings) {
            return cacheSettings(List.of(cacheSettings));
        }

        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder conditions(@Nullable Output<List<ServiceVclConditionArgs>> conditions) {
            $.conditions = conditions;
            return this;
        }

        public Builder conditions(List<ServiceVclConditionArgs> conditions) {
            return conditions(Output.of(conditions));
        }

        public Builder conditions(ServiceVclConditionArgs... conditions) {
            return conditions(List.of(conditions));
        }

        /**
         * @param defaultHost The default hostname
         * 
         * @return builder
         * 
         */
        public Builder defaultHost(@Nullable Output<String> defaultHost) {
            $.defaultHost = defaultHost;
            return this;
        }

        /**
         * @param defaultHost The default hostname
         * 
         * @return builder
         * 
         */
        public Builder defaultHost(String defaultHost) {
            return defaultHost(Output.of(defaultHost));
        }

        /**
         * @param defaultTtl The default Time-to-live (TTL) for requests
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(@Nullable Output<Integer> defaultTtl) {
            $.defaultTtl = defaultTtl;
            return this;
        }

        /**
         * @param defaultTtl The default Time-to-live (TTL) for requests
         * 
         * @return builder
         * 
         */
        public Builder defaultTtl(Integer defaultTtl) {
            return defaultTtl(Output.of(defaultTtl));
        }

        public Builder dictionaries(@Nullable Output<List<ServiceVclDictionaryArgs>> dictionaries) {
            $.dictionaries = dictionaries;
            return this;
        }

        public Builder dictionaries(List<ServiceVclDictionaryArgs> dictionaries) {
            return dictionaries(Output.of(dictionaries));
        }

        public Builder dictionaries(ServiceVclDictionaryArgs... dictionaries) {
            return dictionaries(List.of(dictionaries));
        }

        public Builder directors(@Nullable Output<List<ServiceVclDirectorArgs>> directors) {
            $.directors = directors;
            return this;
        }

        public Builder directors(List<ServiceVclDirectorArgs> directors) {
            return directors(Output.of(directors));
        }

        public Builder directors(ServiceVclDirectorArgs... directors) {
            return directors(List.of(directors));
        }

        /**
         * @param domains A set of Domain names to serve as entry points for your Service
         * 
         * @return builder
         * 
         */
        public Builder domains(Output<List<ServiceVclDomainArgs>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains A set of Domain names to serve as entry points for your Service
         * 
         * @return builder
         * 
         */
        public Builder domains(List<ServiceVclDomainArgs> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains A set of Domain names to serve as entry points for your Service
         * 
         * @return builder
         * 
         */
        public Builder domains(ServiceVclDomainArgs... domains) {
            return domains(List.of(domains));
        }

        public Builder dynamicsnippets(@Nullable Output<List<ServiceVclDynamicsnippetArgs>> dynamicsnippets) {
            $.dynamicsnippets = dynamicsnippets;
            return this;
        }

        public Builder dynamicsnippets(List<ServiceVclDynamicsnippetArgs> dynamicsnippets) {
            return dynamicsnippets(Output.of(dynamicsnippets));
        }

        public Builder dynamicsnippets(ServiceVclDynamicsnippetArgs... dynamicsnippets) {
            return dynamicsnippets(List.of(dynamicsnippets));
        }

        /**
         * @param forceDestroy Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default
         * `false`
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default
         * `false`
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        public Builder gzips(@Nullable Output<List<ServiceVclGzipArgs>> gzips) {
            $.gzips = gzips;
            return this;
        }

        public Builder gzips(List<ServiceVclGzipArgs> gzips) {
            return gzips(Output.of(gzips));
        }

        public Builder gzips(ServiceVclGzipArgs... gzips) {
            return gzips(List.of(gzips));
        }

        public Builder headers(@Nullable Output<List<ServiceVclHeaderArgs>> headers) {
            $.headers = headers;
            return this;
        }

        public Builder headers(List<ServiceVclHeaderArgs> headers) {
            return headers(Output.of(headers));
        }

        public Builder headers(ServiceVclHeaderArgs... headers) {
            return headers(List.of(headers));
        }

        public Builder healthchecks(@Nullable Output<List<ServiceVclHealthcheckArgs>> healthchecks) {
            $.healthchecks = healthchecks;
            return this;
        }

        public Builder healthchecks(List<ServiceVclHealthcheckArgs> healthchecks) {
            return healthchecks(Output.of(healthchecks));
        }

        public Builder healthchecks(ServiceVclHealthcheckArgs... healthchecks) {
            return healthchecks(List.of(healthchecks));
        }

        /**
         * @param http3 Enables support for the HTTP/3 (QUIC) protocol
         * 
         * @return builder
         * 
         */
        public Builder http3(@Nullable Output<Boolean> http3) {
            $.http3 = http3;
            return this;
        }

        /**
         * @param http3 Enables support for the HTTP/3 (QUIC) protocol
         * 
         * @return builder
         * 
         */
        public Builder http3(Boolean http3) {
            return http3(Output.of(http3));
        }

        public Builder imageOptimizerDefaultSettings(@Nullable Output<ServiceVclImageOptimizerDefaultSettingsArgs> imageOptimizerDefaultSettings) {
            $.imageOptimizerDefaultSettings = imageOptimizerDefaultSettings;
            return this;
        }

        public Builder imageOptimizerDefaultSettings(ServiceVclImageOptimizerDefaultSettingsArgs imageOptimizerDefaultSettings) {
            return imageOptimizerDefaultSettings(Output.of(imageOptimizerDefaultSettings));
        }

        public Builder loggingBigqueries(@Nullable Output<List<ServiceVclLoggingBigqueryArgs>> loggingBigqueries) {
            $.loggingBigqueries = loggingBigqueries;
            return this;
        }

        public Builder loggingBigqueries(List<ServiceVclLoggingBigqueryArgs> loggingBigqueries) {
            return loggingBigqueries(Output.of(loggingBigqueries));
        }

        public Builder loggingBigqueries(ServiceVclLoggingBigqueryArgs... loggingBigqueries) {
            return loggingBigqueries(List.of(loggingBigqueries));
        }

        public Builder loggingBlobstorages(@Nullable Output<List<ServiceVclLoggingBlobstorageArgs>> loggingBlobstorages) {
            $.loggingBlobstorages = loggingBlobstorages;
            return this;
        }

        public Builder loggingBlobstorages(List<ServiceVclLoggingBlobstorageArgs> loggingBlobstorages) {
            return loggingBlobstorages(Output.of(loggingBlobstorages));
        }

        public Builder loggingBlobstorages(ServiceVclLoggingBlobstorageArgs... loggingBlobstorages) {
            return loggingBlobstorages(List.of(loggingBlobstorages));
        }

        public Builder loggingCloudfiles(@Nullable Output<List<ServiceVclLoggingCloudfileArgs>> loggingCloudfiles) {
            $.loggingCloudfiles = loggingCloudfiles;
            return this;
        }

        public Builder loggingCloudfiles(List<ServiceVclLoggingCloudfileArgs> loggingCloudfiles) {
            return loggingCloudfiles(Output.of(loggingCloudfiles));
        }

        public Builder loggingCloudfiles(ServiceVclLoggingCloudfileArgs... loggingCloudfiles) {
            return loggingCloudfiles(List.of(loggingCloudfiles));
        }

        public Builder loggingDatadogs(@Nullable Output<List<ServiceVclLoggingDatadogArgs>> loggingDatadogs) {
            $.loggingDatadogs = loggingDatadogs;
            return this;
        }

        public Builder loggingDatadogs(List<ServiceVclLoggingDatadogArgs> loggingDatadogs) {
            return loggingDatadogs(Output.of(loggingDatadogs));
        }

        public Builder loggingDatadogs(ServiceVclLoggingDatadogArgs... loggingDatadogs) {
            return loggingDatadogs(List.of(loggingDatadogs));
        }

        public Builder loggingDigitaloceans(@Nullable Output<List<ServiceVclLoggingDigitaloceanArgs>> loggingDigitaloceans) {
            $.loggingDigitaloceans = loggingDigitaloceans;
            return this;
        }

        public Builder loggingDigitaloceans(List<ServiceVclLoggingDigitaloceanArgs> loggingDigitaloceans) {
            return loggingDigitaloceans(Output.of(loggingDigitaloceans));
        }

        public Builder loggingDigitaloceans(ServiceVclLoggingDigitaloceanArgs... loggingDigitaloceans) {
            return loggingDigitaloceans(List.of(loggingDigitaloceans));
        }

        public Builder loggingElasticsearches(@Nullable Output<List<ServiceVclLoggingElasticsearchArgs>> loggingElasticsearches) {
            $.loggingElasticsearches = loggingElasticsearches;
            return this;
        }

        public Builder loggingElasticsearches(List<ServiceVclLoggingElasticsearchArgs> loggingElasticsearches) {
            return loggingElasticsearches(Output.of(loggingElasticsearches));
        }

        public Builder loggingElasticsearches(ServiceVclLoggingElasticsearchArgs... loggingElasticsearches) {
            return loggingElasticsearches(List.of(loggingElasticsearches));
        }

        public Builder loggingFtps(@Nullable Output<List<ServiceVclLoggingFtpArgs>> loggingFtps) {
            $.loggingFtps = loggingFtps;
            return this;
        }

        public Builder loggingFtps(List<ServiceVclLoggingFtpArgs> loggingFtps) {
            return loggingFtps(Output.of(loggingFtps));
        }

        public Builder loggingFtps(ServiceVclLoggingFtpArgs... loggingFtps) {
            return loggingFtps(List.of(loggingFtps));
        }

        public Builder loggingGcs(@Nullable Output<List<ServiceVclLoggingGcArgs>> loggingGcs) {
            $.loggingGcs = loggingGcs;
            return this;
        }

        public Builder loggingGcs(List<ServiceVclLoggingGcArgs> loggingGcs) {
            return loggingGcs(Output.of(loggingGcs));
        }

        public Builder loggingGcs(ServiceVclLoggingGcArgs... loggingGcs) {
            return loggingGcs(List.of(loggingGcs));
        }

        public Builder loggingGooglepubsubs(@Nullable Output<List<ServiceVclLoggingGooglepubsubArgs>> loggingGooglepubsubs) {
            $.loggingGooglepubsubs = loggingGooglepubsubs;
            return this;
        }

        public Builder loggingGooglepubsubs(List<ServiceVclLoggingGooglepubsubArgs> loggingGooglepubsubs) {
            return loggingGooglepubsubs(Output.of(loggingGooglepubsubs));
        }

        public Builder loggingGooglepubsubs(ServiceVclLoggingGooglepubsubArgs... loggingGooglepubsubs) {
            return loggingGooglepubsubs(List.of(loggingGooglepubsubs));
        }

        public Builder loggingHerokus(@Nullable Output<List<ServiceVclLoggingHerokusArgs>> loggingHerokus) {
            $.loggingHerokus = loggingHerokus;
            return this;
        }

        public Builder loggingHerokus(List<ServiceVclLoggingHerokusArgs> loggingHerokus) {
            return loggingHerokus(Output.of(loggingHerokus));
        }

        public Builder loggingHerokus(ServiceVclLoggingHerokusArgs... loggingHerokus) {
            return loggingHerokus(List.of(loggingHerokus));
        }

        public Builder loggingHoneycombs(@Nullable Output<List<ServiceVclLoggingHoneycombArgs>> loggingHoneycombs) {
            $.loggingHoneycombs = loggingHoneycombs;
            return this;
        }

        public Builder loggingHoneycombs(List<ServiceVclLoggingHoneycombArgs> loggingHoneycombs) {
            return loggingHoneycombs(Output.of(loggingHoneycombs));
        }

        public Builder loggingHoneycombs(ServiceVclLoggingHoneycombArgs... loggingHoneycombs) {
            return loggingHoneycombs(List.of(loggingHoneycombs));
        }

        public Builder loggingHttps(@Nullable Output<List<ServiceVclLoggingHttpArgs>> loggingHttps) {
            $.loggingHttps = loggingHttps;
            return this;
        }

        public Builder loggingHttps(List<ServiceVclLoggingHttpArgs> loggingHttps) {
            return loggingHttps(Output.of(loggingHttps));
        }

        public Builder loggingHttps(ServiceVclLoggingHttpArgs... loggingHttps) {
            return loggingHttps(List.of(loggingHttps));
        }

        public Builder loggingKafkas(@Nullable Output<List<ServiceVclLoggingKafkaArgs>> loggingKafkas) {
            $.loggingKafkas = loggingKafkas;
            return this;
        }

        public Builder loggingKafkas(List<ServiceVclLoggingKafkaArgs> loggingKafkas) {
            return loggingKafkas(Output.of(loggingKafkas));
        }

        public Builder loggingKafkas(ServiceVclLoggingKafkaArgs... loggingKafkas) {
            return loggingKafkas(List.of(loggingKafkas));
        }

        public Builder loggingKineses(@Nullable Output<List<ServiceVclLoggingKineseArgs>> loggingKineses) {
            $.loggingKineses = loggingKineses;
            return this;
        }

        public Builder loggingKineses(List<ServiceVclLoggingKineseArgs> loggingKineses) {
            return loggingKineses(Output.of(loggingKineses));
        }

        public Builder loggingKineses(ServiceVclLoggingKineseArgs... loggingKineses) {
            return loggingKineses(List.of(loggingKineses));
        }

        public Builder loggingLogentries(@Nullable Output<List<ServiceVclLoggingLogentryArgs>> loggingLogentries) {
            $.loggingLogentries = loggingLogentries;
            return this;
        }

        public Builder loggingLogentries(List<ServiceVclLoggingLogentryArgs> loggingLogentries) {
            return loggingLogentries(Output.of(loggingLogentries));
        }

        public Builder loggingLogentries(ServiceVclLoggingLogentryArgs... loggingLogentries) {
            return loggingLogentries(List.of(loggingLogentries));
        }

        public Builder loggingLogglies(@Nullable Output<List<ServiceVclLoggingLogglyArgs>> loggingLogglies) {
            $.loggingLogglies = loggingLogglies;
            return this;
        }

        public Builder loggingLogglies(List<ServiceVclLoggingLogglyArgs> loggingLogglies) {
            return loggingLogglies(Output.of(loggingLogglies));
        }

        public Builder loggingLogglies(ServiceVclLoggingLogglyArgs... loggingLogglies) {
            return loggingLogglies(List.of(loggingLogglies));
        }

        public Builder loggingLogshuttles(@Nullable Output<List<ServiceVclLoggingLogshuttleArgs>> loggingLogshuttles) {
            $.loggingLogshuttles = loggingLogshuttles;
            return this;
        }

        public Builder loggingLogshuttles(List<ServiceVclLoggingLogshuttleArgs> loggingLogshuttles) {
            return loggingLogshuttles(Output.of(loggingLogshuttles));
        }

        public Builder loggingLogshuttles(ServiceVclLoggingLogshuttleArgs... loggingLogshuttles) {
            return loggingLogshuttles(List.of(loggingLogshuttles));
        }

        public Builder loggingNewrelicotlps(@Nullable Output<List<ServiceVclLoggingNewrelicotlpArgs>> loggingNewrelicotlps) {
            $.loggingNewrelicotlps = loggingNewrelicotlps;
            return this;
        }

        public Builder loggingNewrelicotlps(List<ServiceVclLoggingNewrelicotlpArgs> loggingNewrelicotlps) {
            return loggingNewrelicotlps(Output.of(loggingNewrelicotlps));
        }

        public Builder loggingNewrelicotlps(ServiceVclLoggingNewrelicotlpArgs... loggingNewrelicotlps) {
            return loggingNewrelicotlps(List.of(loggingNewrelicotlps));
        }

        public Builder loggingNewrelics(@Nullable Output<List<ServiceVclLoggingNewrelicArgs>> loggingNewrelics) {
            $.loggingNewrelics = loggingNewrelics;
            return this;
        }

        public Builder loggingNewrelics(List<ServiceVclLoggingNewrelicArgs> loggingNewrelics) {
            return loggingNewrelics(Output.of(loggingNewrelics));
        }

        public Builder loggingNewrelics(ServiceVclLoggingNewrelicArgs... loggingNewrelics) {
            return loggingNewrelics(List.of(loggingNewrelics));
        }

        public Builder loggingOpenstacks(@Nullable Output<List<ServiceVclLoggingOpenstackArgs>> loggingOpenstacks) {
            $.loggingOpenstacks = loggingOpenstacks;
            return this;
        }

        public Builder loggingOpenstacks(List<ServiceVclLoggingOpenstackArgs> loggingOpenstacks) {
            return loggingOpenstacks(Output.of(loggingOpenstacks));
        }

        public Builder loggingOpenstacks(ServiceVclLoggingOpenstackArgs... loggingOpenstacks) {
            return loggingOpenstacks(List.of(loggingOpenstacks));
        }

        public Builder loggingPapertrails(@Nullable Output<List<ServiceVclLoggingPapertrailArgs>> loggingPapertrails) {
            $.loggingPapertrails = loggingPapertrails;
            return this;
        }

        public Builder loggingPapertrails(List<ServiceVclLoggingPapertrailArgs> loggingPapertrails) {
            return loggingPapertrails(Output.of(loggingPapertrails));
        }

        public Builder loggingPapertrails(ServiceVclLoggingPapertrailArgs... loggingPapertrails) {
            return loggingPapertrails(List.of(loggingPapertrails));
        }

        public Builder loggingS3s(@Nullable Output<List<ServiceVclLoggingS3Args>> loggingS3s) {
            $.loggingS3s = loggingS3s;
            return this;
        }

        public Builder loggingS3s(List<ServiceVclLoggingS3Args> loggingS3s) {
            return loggingS3s(Output.of(loggingS3s));
        }

        public Builder loggingS3s(ServiceVclLoggingS3Args... loggingS3s) {
            return loggingS3s(List.of(loggingS3s));
        }

        public Builder loggingScalyrs(@Nullable Output<List<ServiceVclLoggingScalyrArgs>> loggingScalyrs) {
            $.loggingScalyrs = loggingScalyrs;
            return this;
        }

        public Builder loggingScalyrs(List<ServiceVclLoggingScalyrArgs> loggingScalyrs) {
            return loggingScalyrs(Output.of(loggingScalyrs));
        }

        public Builder loggingScalyrs(ServiceVclLoggingScalyrArgs... loggingScalyrs) {
            return loggingScalyrs(List.of(loggingScalyrs));
        }

        public Builder loggingSftps(@Nullable Output<List<ServiceVclLoggingSftpArgs>> loggingSftps) {
            $.loggingSftps = loggingSftps;
            return this;
        }

        public Builder loggingSftps(List<ServiceVclLoggingSftpArgs> loggingSftps) {
            return loggingSftps(Output.of(loggingSftps));
        }

        public Builder loggingSftps(ServiceVclLoggingSftpArgs... loggingSftps) {
            return loggingSftps(List.of(loggingSftps));
        }

        public Builder loggingSplunks(@Nullable Output<List<ServiceVclLoggingSplunkArgs>> loggingSplunks) {
            $.loggingSplunks = loggingSplunks;
            return this;
        }

        public Builder loggingSplunks(List<ServiceVclLoggingSplunkArgs> loggingSplunks) {
            return loggingSplunks(Output.of(loggingSplunks));
        }

        public Builder loggingSplunks(ServiceVclLoggingSplunkArgs... loggingSplunks) {
            return loggingSplunks(List.of(loggingSplunks));
        }

        public Builder loggingSumologics(@Nullable Output<List<ServiceVclLoggingSumologicArgs>> loggingSumologics) {
            $.loggingSumologics = loggingSumologics;
            return this;
        }

        public Builder loggingSumologics(List<ServiceVclLoggingSumologicArgs> loggingSumologics) {
            return loggingSumologics(Output.of(loggingSumologics));
        }

        public Builder loggingSumologics(ServiceVclLoggingSumologicArgs... loggingSumologics) {
            return loggingSumologics(List.of(loggingSumologics));
        }

        public Builder loggingSyslogs(@Nullable Output<List<ServiceVclLoggingSyslogArgs>> loggingSyslogs) {
            $.loggingSyslogs = loggingSyslogs;
            return this;
        }

        public Builder loggingSyslogs(List<ServiceVclLoggingSyslogArgs> loggingSyslogs) {
            return loggingSyslogs(Output.of(loggingSyslogs));
        }

        public Builder loggingSyslogs(ServiceVclLoggingSyslogArgs... loggingSyslogs) {
            return loggingSyslogs(List.of(loggingSyslogs));
        }

        /**
         * @param name The unique name for the Service to create
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name for the Service to create
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder productEnablement(@Nullable Output<ServiceVclProductEnablementArgs> productEnablement) {
            $.productEnablement = productEnablement;
            return this;
        }

        public Builder productEnablement(ServiceVclProductEnablementArgs productEnablement) {
            return productEnablement(Output.of(productEnablement));
        }

        public Builder rateLimiters(@Nullable Output<List<ServiceVclRateLimiterArgs>> rateLimiters) {
            $.rateLimiters = rateLimiters;
            return this;
        }

        public Builder rateLimiters(List<ServiceVclRateLimiterArgs> rateLimiters) {
            return rateLimiters(Output.of(rateLimiters));
        }

        public Builder rateLimiters(ServiceVclRateLimiterArgs... rateLimiters) {
            return rateLimiters(List.of(rateLimiters));
        }

        public Builder requestSettings(@Nullable Output<List<ServiceVclRequestSettingArgs>> requestSettings) {
            $.requestSettings = requestSettings;
            return this;
        }

        public Builder requestSettings(List<ServiceVclRequestSettingArgs> requestSettings) {
            return requestSettings(Output.of(requestSettings));
        }

        public Builder requestSettings(ServiceVclRequestSettingArgs... requestSettings) {
            return requestSettings(List.of(requestSettings));
        }

        public Builder responseObjects(@Nullable Output<List<ServiceVclResponseObjectArgs>> responseObjects) {
            $.responseObjects = responseObjects;
            return this;
        }

        public Builder responseObjects(List<ServiceVclResponseObjectArgs> responseObjects) {
            return responseObjects(Output.of(responseObjects));
        }

        public Builder responseObjects(ServiceVclResponseObjectArgs... responseObjects) {
            return responseObjects(List.of(responseObjects));
        }

        public Builder reuse(@Nullable Output<Boolean> reuse) {
            $.reuse = reuse;
            return this;
        }

        public Builder reuse(Boolean reuse) {
            return reuse(Output.of(reuse));
        }

        public Builder snippets(@Nullable Output<List<ServiceVclSnippetArgs>> snippets) {
            $.snippets = snippets;
            return this;
        }

        public Builder snippets(List<ServiceVclSnippetArgs> snippets) {
            return snippets(Output.of(snippets));
        }

        public Builder snippets(ServiceVclSnippetArgs... snippets) {
            return snippets(List.of(snippets));
        }

        /**
         * @param staleIfError Enables serving a stale object if there is an error
         * 
         * @return builder
         * 
         */
        public Builder staleIfError(@Nullable Output<Boolean> staleIfError) {
            $.staleIfError = staleIfError;
            return this;
        }

        /**
         * @param staleIfError Enables serving a stale object if there is an error
         * 
         * @return builder
         * 
         */
        public Builder staleIfError(Boolean staleIfError) {
            return staleIfError(Output.of(staleIfError));
        }

        /**
         * @param staleIfErrorTtl The default time-to-live (TTL) for serving the stale object for the version
         * 
         * @return builder
         * 
         */
        public Builder staleIfErrorTtl(@Nullable Output<Integer> staleIfErrorTtl) {
            $.staleIfErrorTtl = staleIfErrorTtl;
            return this;
        }

        /**
         * @param staleIfErrorTtl The default time-to-live (TTL) for serving the stale object for the version
         * 
         * @return builder
         * 
         */
        public Builder staleIfErrorTtl(Integer staleIfErrorTtl) {
            return staleIfErrorTtl(Output.of(staleIfErrorTtl));
        }

        public Builder vcls(@Nullable Output<List<ServiceVclVclArgs>> vcls) {
            $.vcls = vcls;
            return this;
        }

        public Builder vcls(List<ServiceVclVclArgs> vcls) {
            return vcls(Output.of(vcls));
        }

        public Builder vcls(ServiceVclVclArgs... vcls) {
            return vcls(List.of(vcls));
        }

        /**
         * @param versionComment Description field for the version
         * 
         * @return builder
         * 
         */
        public Builder versionComment(@Nullable Output<String> versionComment) {
            $.versionComment = versionComment;
            return this;
        }

        /**
         * @param versionComment Description field for the version
         * 
         * @return builder
         * 
         */
        public Builder versionComment(String versionComment) {
            return versionComment(Output.of(versionComment));
        }

        public Builder waf(@Nullable Output<ServiceVclWafArgs> waf) {
            $.waf = waf;
            return this;
        }

        public Builder waf(ServiceVclWafArgs waf) {
            return waf(Output.of(waf));
        }

        public ServiceVclArgs build() {
            if ($.domains == null) {
                throw new MissingRequiredPropertyException("ServiceVclArgs", "domains");
            }
            return $;
        }
    }

}
