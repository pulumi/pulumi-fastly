// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class ServiceAuthorizationArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceAuthorizationArgs Empty = new ServiceAuthorizationArgs();

    /**
     * The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.
     * 
     */
    @Import(name="permission", required=true)
    private Output<String> permission;

    /**
     * @return The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.
     * 
     */
    public Output<String> permission() {
        return this.permission;
    }

    /**
     * The ID of the service to grant permissions for.
     * 
     */
    @Import(name="serviceId", required=true)
    private Output<String> serviceId;

    /**
     * @return The ID of the service to grant permissions for.
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }

    /**
     * The ID of the user which will receive the granted permissions.
     * 
     */
    @Import(name="userId", required=true)
    private Output<String> userId;

    /**
     * @return The ID of the user which will receive the granted permissions.
     * 
     */
    public Output<String> userId() {
        return this.userId;
    }

    private ServiceAuthorizationArgs() {}

    private ServiceAuthorizationArgs(ServiceAuthorizationArgs $) {
        this.permission = $.permission;
        this.serviceId = $.serviceId;
        this.userId = $.userId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceAuthorizationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceAuthorizationArgs $;

        public Builder() {
            $ = new ServiceAuthorizationArgs();
        }

        public Builder(ServiceAuthorizationArgs defaults) {
            $ = new ServiceAuthorizationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param permission The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.
         * 
         * @return builder
         * 
         */
        public Builder permission(Output<String> permission) {
            $.permission = permission;
            return this;
        }

        /**
         * @param permission The permissions to grant the user. Can be `full`, `read_only`, `purge_select` or `purge_all`.
         * 
         * @return builder
         * 
         */
        public Builder permission(String permission) {
            return permission(Output.of(permission));
        }

        /**
         * @param serviceId The ID of the service to grant permissions for.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The ID of the service to grant permissions for.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        /**
         * @param userId The ID of the user which will receive the granted permissions.
         * 
         * @return builder
         * 
         */
        public Builder userId(Output<String> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId The ID of the user which will receive the granted permissions.
         * 
         * @return builder
         * 
         */
        public Builder userId(String userId) {
            return userId(Output.of(userId));
        }

        public ServiceAuthorizationArgs build() {
            if ($.permission == null) {
                throw new MissingRequiredPropertyException("ServiceAuthorizationArgs", "permission");
            }
            if ($.serviceId == null) {
                throw new MissingRequiredPropertyException("ServiceAuthorizationArgs", "serviceId");
            }
            if ($.userId == null) {
                throw new MissingRequiredPropertyException("ServiceAuthorizationArgs", "userId");
            }
            return $;
        }
    }

}
