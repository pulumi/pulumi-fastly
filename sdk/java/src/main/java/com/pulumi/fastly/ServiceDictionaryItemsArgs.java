// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceDictionaryItemsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceDictionaryItemsArgs Empty = new ServiceDictionaryItemsArgs();

    /**
     * The ID of the dictionary that the items belong to
     * 
     */
    @Import(name="dictionaryId", required=true)
    private Output<String> dictionaryId;

    /**
     * @return The ID of the dictionary that the items belong to
     * 
     */
    public Output<String> dictionaryId() {
        return this.dictionaryId;
    }

    /**
     * A map representing an entry in the dictionary, (key/value)
     * 
     */
    @Import(name="items")
    private @Nullable Output<Map<String,Object>> items;

    /**
     * @return A map representing an entry in the dictionary, (key/value)
     * 
     */
    public Optional<Output<Map<String,Object>>> items() {
        return Optional.ofNullable(this.items);
    }

    /**
     * Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
     * 
     */
    @Import(name="manageItems")
    private @Nullable Output<Boolean> manageItems;

    /**
     * @return Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
     * 
     */
    public Optional<Output<Boolean>> manageItems() {
        return Optional.ofNullable(this.manageItems);
    }

    /**
     * The ID of the service that the dictionary belongs to
     * 
     */
    @Import(name="serviceId", required=true)
    private Output<String> serviceId;

    /**
     * @return The ID of the service that the dictionary belongs to
     * 
     */
    public Output<String> serviceId() {
        return this.serviceId;
    }

    private ServiceDictionaryItemsArgs() {}

    private ServiceDictionaryItemsArgs(ServiceDictionaryItemsArgs $) {
        this.dictionaryId = $.dictionaryId;
        this.items = $.items;
        this.manageItems = $.manageItems;
        this.serviceId = $.serviceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceDictionaryItemsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceDictionaryItemsArgs $;

        public Builder() {
            $ = new ServiceDictionaryItemsArgs();
        }

        public Builder(ServiceDictionaryItemsArgs defaults) {
            $ = new ServiceDictionaryItemsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dictionaryId The ID of the dictionary that the items belong to
         * 
         * @return builder
         * 
         */
        public Builder dictionaryId(Output<String> dictionaryId) {
            $.dictionaryId = dictionaryId;
            return this;
        }

        /**
         * @param dictionaryId The ID of the dictionary that the items belong to
         * 
         * @return builder
         * 
         */
        public Builder dictionaryId(String dictionaryId) {
            return dictionaryId(Output.of(dictionaryId));
        }

        /**
         * @param items A map representing an entry in the dictionary, (key/value)
         * 
         * @return builder
         * 
         */
        public Builder items(@Nullable Output<Map<String,Object>> items) {
            $.items = items;
            return this;
        }

        /**
         * @param items A map representing an entry in the dictionary, (key/value)
         * 
         * @return builder
         * 
         */
        public Builder items(Map<String,Object> items) {
            return items(Output.of(items));
        }

        /**
         * @param manageItems Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
         * 
         * @return builder
         * 
         */
        public Builder manageItems(@Nullable Output<Boolean> manageItems) {
            $.manageItems = manageItems;
            return this;
        }

        /**
         * @param manageItems Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
         * 
         * @return builder
         * 
         */
        public Builder manageItems(Boolean manageItems) {
            return manageItems(Output.of(manageItems));
        }

        /**
         * @param serviceId The ID of the service that the dictionary belongs to
         * 
         * @return builder
         * 
         */
        public Builder serviceId(Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The ID of the service that the dictionary belongs to
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        public ServiceDictionaryItemsArgs build() {
            if ($.dictionaryId == null) {
                throw new MissingRequiredPropertyException("ServiceDictionaryItemsArgs", "dictionaryId");
            }
            if ($.serviceId == null) {
                throw new MissingRequiredPropertyException("ServiceDictionaryItemsArgs", "serviceId");
            }
            return $;
        }
    }

}
