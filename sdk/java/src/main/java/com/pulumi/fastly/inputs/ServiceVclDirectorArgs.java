// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclDirectorArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclDirectorArgs Empty = new ServiceVclDirectorArgs();

    /**
     * Names of defined backends to map the director to. Example: `[ &#34;origin1&#34;, &#34;origin2&#34; ]`
     * 
     */
    @Import(name="backends", required=true)
    private Output<List<String>> backends;

    /**
     * @return Names of defined backends to map the director to. Example: `[ &#34;origin1&#34;, &#34;origin2&#34; ]`
     * 
     */
    public Output<List<String>> backends() {
        return this.backends;
    }

    /**
     * An optional comment about the Director
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return An optional comment about the Director
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
     * 
     */
    @Import(name="quorum")
    private @Nullable Output<Integer> quorum;

    /**
     * @return Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
     * 
     */
    public Optional<Output<Integer>> quorum() {
        return Optional.ofNullable(this.quorum);
    }

    /**
     * How many backends to search if it fails. Default `5`
     * 
     */
    @Import(name="retries")
    private @Nullable Output<Integer> retries;

    /**
     * @return How many backends to search if it fails. Default `5`
     * 
     */
    public Optional<Output<Integer>> retries() {
        return Optional.ofNullable(this.retries);
    }

    /**
     * Selected POP to serve as a &#34;shield&#34; for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
     * 
     */
    @Import(name="shield")
    private @Nullable Output<String> shield;

    /**
     * @return Selected POP to serve as a &#34;shield&#34; for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
     * 
     */
    public Optional<Output<String>> shield() {
        return Optional.ofNullable(this.shield);
    }

    /**
     * Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
     * 
     */
    @Import(name="type")
    private @Nullable Output<Integer> type;

    /**
     * @return Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
     * 
     */
    public Optional<Output<Integer>> type() {
        return Optional.ofNullable(this.type);
    }

    private ServiceVclDirectorArgs() {}

    private ServiceVclDirectorArgs(ServiceVclDirectorArgs $) {
        this.backends = $.backends;
        this.comment = $.comment;
        this.name = $.name;
        this.quorum = $.quorum;
        this.retries = $.retries;
        this.shield = $.shield;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclDirectorArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclDirectorArgs $;

        public Builder() {
            $ = new ServiceVclDirectorArgs();
        }

        public Builder(ServiceVclDirectorArgs defaults) {
            $ = new ServiceVclDirectorArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param backends Names of defined backends to map the director to. Example: `[ &#34;origin1&#34;, &#34;origin2&#34; ]`
         * 
         * @return builder
         * 
         */
        public Builder backends(Output<List<String>> backends) {
            $.backends = backends;
            return this;
        }

        /**
         * @param backends Names of defined backends to map the director to. Example: `[ &#34;origin1&#34;, &#34;origin2&#34; ]`
         * 
         * @return builder
         * 
         */
        public Builder backends(List<String> backends) {
            return backends(Output.of(backends));
        }

        /**
         * @param backends Names of defined backends to map the director to. Example: `[ &#34;origin1&#34;, &#34;origin2&#34; ]`
         * 
         * @return builder
         * 
         */
        public Builder backends(String... backends) {
            return backends(List.of(backends));
        }

        /**
         * @param comment An optional comment about the Director
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment An optional comment about the Director
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param name Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param quorum Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
         * 
         * @return builder
         * 
         */
        public Builder quorum(@Nullable Output<Integer> quorum) {
            $.quorum = quorum;
            return this;
        }

        /**
         * @param quorum Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
         * 
         * @return builder
         * 
         */
        public Builder quorum(Integer quorum) {
            return quorum(Output.of(quorum));
        }

        /**
         * @param retries How many backends to search if it fails. Default `5`
         * 
         * @return builder
         * 
         */
        public Builder retries(@Nullable Output<Integer> retries) {
            $.retries = retries;
            return this;
        }

        /**
         * @param retries How many backends to search if it fails. Default `5`
         * 
         * @return builder
         * 
         */
        public Builder retries(Integer retries) {
            return retries(Output.of(retries));
        }

        /**
         * @param shield Selected POP to serve as a &#34;shield&#34; for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
         * 
         * @return builder
         * 
         */
        public Builder shield(@Nullable Output<String> shield) {
            $.shield = shield;
            return this;
        }

        /**
         * @param shield Selected POP to serve as a &#34;shield&#34; for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
         * 
         * @return builder
         * 
         */
        public Builder shield(String shield) {
            return shield(Output.of(shield));
        }

        /**
         * @param type Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<Integer> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
         * 
         * @return builder
         * 
         */
        public Builder type(Integer type) {
            return type(Output.of(type));
        }

        public ServiceVclDirectorArgs build() {
            if ($.backends == null) {
                throw new MissingRequiredPropertyException("ServiceVclDirectorArgs", "backends");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceVclDirectorArgs", "name");
            }
            return $;
        }
    }

}
