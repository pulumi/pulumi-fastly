// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsMutualAuthenticationState extends com.pulumi.resources.ResourceArgs {

    public static final TlsMutualAuthenticationState Empty = new TlsMutualAuthenticationState();

    /**
     * One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
     * 
     */
    @Import(name="certBundle")
    private @Nullable Output<String> certBundle;

    /**
     * @return One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
     * 
     */
    public Optional<Output<String>> certBundle() {
        return Optional.ofNullable(this.certBundle);
    }

    /**
     * Date and time in ISO 8601 format.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Date and time in ISO 8601 format.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
     * 
     */
    @Import(name="enforced")
    private @Nullable Output<Boolean> enforced;

    /**
     * @return Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
     * 
     */
    public Optional<Output<Boolean>> enforced() {
        return Optional.ofNullable(this.enforced);
    }

    /**
     * Comma-separated list of related objects to include (e.g. `tls_activations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
     * 
     */
    @Import(name="include")
    private @Nullable Output<String> include;

    /**
     * @return Comma-separated list of related objects to include (e.g. `tls_activations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
     * 
     */
    public Optional<Output<String>> include() {
        return Optional.ofNullable(this.include);
    }

    /**
     * A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * List of alphanumeric strings identifying TLS activations.
     * 
     */
    @Import(name="tlsActivations")
    private @Nullable Output<List<String>> tlsActivations;

    /**
     * @return List of alphanumeric strings identifying TLS activations.
     * 
     */
    public Optional<Output<List<String>>> tlsActivations() {
        return Optional.ofNullable(this.tlsActivations);
    }

    /**
     * Date and time in ISO 8601 format.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Date and time in ISO 8601 format.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private TlsMutualAuthenticationState() {}

    private TlsMutualAuthenticationState(TlsMutualAuthenticationState $) {
        this.certBundle = $.certBundle;
        this.createdAt = $.createdAt;
        this.enforced = $.enforced;
        this.include = $.include;
        this.name = $.name;
        this.tlsActivations = $.tlsActivations;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsMutualAuthenticationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsMutualAuthenticationState $;

        public Builder() {
            $ = new TlsMutualAuthenticationState();
        }

        public Builder(TlsMutualAuthenticationState defaults) {
            $ = new TlsMutualAuthenticationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certBundle One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
         * 
         * @return builder
         * 
         */
        public Builder certBundle(@Nullable Output<String> certBundle) {
            $.certBundle = certBundle;
            return this;
        }

        /**
         * @param certBundle One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
         * 
         * @return builder
         * 
         */
        public Builder certBundle(String certBundle) {
            return certBundle(Output.of(certBundle));
        }

        /**
         * @param createdAt Date and time in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Date and time in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param enforced Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
         * 
         * @return builder
         * 
         */
        public Builder enforced(@Nullable Output<Boolean> enforced) {
            $.enforced = enforced;
            return this;
        }

        /**
         * @param enforced Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
         * 
         * @return builder
         * 
         */
        public Builder enforced(Boolean enforced) {
            return enforced(Output.of(enforced));
        }

        /**
         * @param include Comma-separated list of related objects to include (e.g. `tls_activations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
         * 
         * @return builder
         * 
         */
        public Builder include(@Nullable Output<String> include) {
            $.include = include;
            return this;
        }

        /**
         * @param include Comma-separated list of related objects to include (e.g. `tls_activations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
         * 
         * @return builder
         * 
         */
        public Builder include(String include) {
            return include(Output.of(include));
        }

        /**
         * @param name A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param tlsActivations List of alphanumeric strings identifying TLS activations.
         * 
         * @return builder
         * 
         */
        public Builder tlsActivations(@Nullable Output<List<String>> tlsActivations) {
            $.tlsActivations = tlsActivations;
            return this;
        }

        /**
         * @param tlsActivations List of alphanumeric strings identifying TLS activations.
         * 
         * @return builder
         * 
         */
        public Builder tlsActivations(List<String> tlsActivations) {
            return tlsActivations(Output.of(tlsActivations));
        }

        /**
         * @param tlsActivations List of alphanumeric strings identifying TLS activations.
         * 
         * @return builder
         * 
         */
        public Builder tlsActivations(String... tlsActivations) {
            return tlsActivations(List.of(tlsActivations));
        }

        /**
         * @param updatedAt Date and time in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Date and time in ISO 8601 format.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public TlsMutualAuthenticationState build() {
            return $;
        }
    }

}
