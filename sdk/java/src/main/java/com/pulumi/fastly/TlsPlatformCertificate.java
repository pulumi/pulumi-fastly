// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.TlsPlatformCertificateArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.TlsPlatformCertificateState;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Uploads a TLS certificate to the Fastly Platform TLS service.
 * 
 * &gt; Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate. This
 * can be achieved in Pulumi using `depends_on`
 * 
 * ## Example Usage
 * 
 * Basic usage with self-signed CA:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.tls.privateKey;
 * import com.pulumi.tls.privateKeyArgs;
 * import com.pulumi.tls.selfSignedCert;
 * import com.pulumi.tls.selfSignedCertArgs;
 * import com.pulumi.tls.certRequest;
 * import com.pulumi.tls.certRequestArgs;
 * import com.pulumi.tls.locallySignedCert;
 * import com.pulumi.tls.locallySignedCertArgs;
 * import com.pulumi.fastly.FastlyFunctions;
 * import com.pulumi.fastly.inputs.GetTlsConfigurationArgs;
 * import com.pulumi.fastly.TlsPrivateKey;
 * import com.pulumi.fastly.TlsPrivateKeyArgs;
 * import com.pulumi.fastly.TlsPlatformCertificate;
 * import com.pulumi.fastly.TlsPlatformCertificateArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var caKey = new PrivateKey("caKey", PrivateKeyArgs.builder()
 *             .algorithm("RSA")
 *             .build());
 * 
 *         var key = new PrivateKey("key", PrivateKeyArgs.builder()
 *             .algorithm("RSA")
 *             .build());
 * 
 *         var ca = new SelfSignedCert("ca", SelfSignedCertArgs.builder()
 *             .keyAlgorithm(caKey.algorithm())
 *             .privateKeyPem(caKey.privateKeyPem())
 *             .subject(List.of(Map.of("commonName", "Example CA")))
 *             .isCaCertificate(true)
 *             .validityPeriodHours(360)
 *             .allowedUses(List.of(            
 *                 "cert_signing",
 *                 "server_auth"))
 *             .build());
 * 
 *         var example = new CertRequest("example", CertRequestArgs.builder()
 *             .keyAlgorithm(key.algorithm())
 *             .privateKeyPem(key.privateKeyPem())
 *             .subject(List.of(Map.of("commonName", "example.com")))
 *             .dnsNames(List.of(            
 *                 "example.com",
 *                 "www.example.com"))
 *             .build());
 * 
 *         var cert = new LocallySignedCert("cert", LocallySignedCertArgs.builder()
 *             .certRequestPem(example.certRequestPem())
 *             .caKeyAlgorithm(caKey.algorithm())
 *             .caPrivateKeyPem(caKey.privateKeyPem())
 *             .caCertPem(ca.certPem())
 *             .validityPeriodHours(360)
 *             .allowedUses(List.of(            
 *                 "cert_signing",
 *                 "server_auth"))
 *             .build());
 * 
 *         final var config = FastlyFunctions.getTlsConfiguration(GetTlsConfigurationArgs.builder()
 *             .tlsService("PLATFORM")
 *             .build());
 * 
 *         var keyTlsPrivateKey = new TlsPrivateKey("keyTlsPrivateKey", TlsPrivateKeyArgs.builder()
 *             .keyPem(key.privateKeyPem())
 *             .name("tf-demo")
 *             .build());
 * 
 *         var certTlsPlatformCertificate = new TlsPlatformCertificate("certTlsPlatformCertificate", TlsPlatformCertificateArgs.builder()
 *             .certificateBody(cert.certPem())
 *             .intermediatesBlob(ca.certPem())
 *             .configurationId(config.id())
 *             .allowUntrustedRoot(true)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(keyTlsPrivateKey)
 *                 .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A certificate can be imported using its Fastly certificate ID, e.g.
 * 
 * ```sh
 * $ pulumi import fastly:index/tlsPlatformCertificate:TlsPlatformCertificate demo xxxxxxxxxxx
 * ```
 * 
 */
@ResourceType(type="fastly:index/tlsPlatformCertificate:TlsPlatformCertificate")
public class TlsPlatformCertificate extends com.pulumi.resources.CustomResource {
    /**
     * Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
     * 
     */
    @Export(name="allowUntrustedRoot", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> allowUntrustedRoot;

    /**
     * @return Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
     * 
     */
    public Output<Optional<Boolean>> allowUntrustedRoot() {
        return Codegen.optional(this.allowUntrustedRoot);
    }
    /**
     * PEM-formatted certificate.
     * 
     */
    @Export(name="certificateBody", refs={String.class}, tree="[0]")
    private Output<String> certificateBody;

    /**
     * @return PEM-formatted certificate.
     * 
     */
    public Output<String> certificateBody() {
        return this.certificateBody;
    }
    /**
     * ID of TLS configuration to be used to terminate TLS traffic.
     * 
     */
    @Export(name="configurationId", refs={String.class}, tree="[0]")
    private Output<String> configurationId;

    /**
     * @return ID of TLS configuration to be used to terminate TLS traffic.
     * 
     */
    public Output<String> configurationId() {
        return this.configurationId;
    }
    /**
     * Timestamp (GMT) when the certificate was created.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Timestamp (GMT) when the certificate was created.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * All the domains (including wildcard domains) that are listed in any certificate&#39;s Subject Alternative Names (SAN) list.
     * 
     */
    @Export(name="domains", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> domains;

    /**
     * @return All the domains (including wildcard domains) that are listed in any certificate&#39;s Subject Alternative Names (SAN) list.
     * 
     */
    public Output<List<String>> domains() {
        return this.domains;
    }
    /**
     * PEM-formatted certificate chain from the `certificate_body` to its root.
     * 
     */
    @Export(name="intermediatesBlob", refs={String.class}, tree="[0]")
    private Output<String> intermediatesBlob;

    /**
     * @return PEM-formatted certificate chain from the `certificate_body` to its root.
     * 
     */
    public Output<String> intermediatesBlob() {
        return this.intermediatesBlob;
    }
    /**
     * Timestamp (GMT) when the certificate will expire.
     * 
     */
    @Export(name="notAfter", refs={String.class}, tree="[0]")
    private Output<String> notAfter;

    /**
     * @return Timestamp (GMT) when the certificate will expire.
     * 
     */
    public Output<String> notAfter() {
        return this.notAfter;
    }
    /**
     * Timestamp (GMT) when the certificate will become valid.
     * 
     */
    @Export(name="notBefore", refs={String.class}, tree="[0]")
    private Output<String> notBefore;

    /**
     * @return Timestamp (GMT) when the certificate will become valid.
     * 
     */
    public Output<String> notBefore() {
        return this.notBefore;
    }
    /**
     * A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     * 
     */
    @Export(name="replace", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> replace;

    /**
     * @return A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     * 
     */
    public Output<Boolean> replace() {
        return this.replace;
    }
    /**
     * Timestamp (GMT) when the certificate was last updated.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return Timestamp (GMT) when the certificate was last updated.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TlsPlatformCertificate(java.lang.String name) {
        this(name, TlsPlatformCertificateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TlsPlatformCertificate(java.lang.String name, TlsPlatformCertificateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TlsPlatformCertificate(java.lang.String name, TlsPlatformCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/tlsPlatformCertificate:TlsPlatformCertificate", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private TlsPlatformCertificate(java.lang.String name, Output<java.lang.String> id, @Nullable TlsPlatformCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/tlsPlatformCertificate:TlsPlatformCertificate", name, state, makeResourceOptions(options, id), false);
    }

    private static TlsPlatformCertificateArgs makeArgs(TlsPlatformCertificateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TlsPlatformCertificateArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TlsPlatformCertificate get(java.lang.String name, Output<java.lang.String> id, @Nullable TlsPlatformCertificateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TlsPlatformCertificate(name, id, state, options);
    }
}
