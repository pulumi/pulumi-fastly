// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclLoggingPapertrailArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclLoggingPapertrailArgs Empty = new ServiceVclLoggingPapertrailArgs();

    /**
     * The address of the Papertrail endpoint
     * 
     */
    @Import(name="address", required=true)
    private Output<String> address;

    /**
     * @return The address of the Papertrail endpoint
     * 
     */
    public Output<String> address() {
        return this.address;
    }

    /**
     * A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`
     * 
     */
    @Import(name="formatVersion")
    private @Nullable Output<Integer> formatVersion;

    /**
     * @return The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`
     * 
     */
    public Optional<Output<Integer>> formatVersion() {
        return Optional.ofNullable(this.formatVersion);
    }

    /**
     * A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`
     * 
     */
    @Import(name="placement")
    private @Nullable Output<String> placement;

    /**
     * @return Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`
     * 
     */
    public Optional<Output<String>> placement() {
        return Optional.ofNullable(this.placement);
    }

    /**
     * The port associated with the address where the Papertrail endpoint can be accessed
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port associated with the address where the Papertrail endpoint can be accessed
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute
     * 
     */
    @Import(name="responseCondition")
    private @Nullable Output<String> responseCondition;

    /**
     * @return The name of an existing condition in the configured endpoint, or leave blank to always execute
     * 
     */
    public Optional<Output<String>> responseCondition() {
        return Optional.ofNullable(this.responseCondition);
    }

    private ServiceVclLoggingPapertrailArgs() {}

    private ServiceVclLoggingPapertrailArgs(ServiceVclLoggingPapertrailArgs $) {
        this.address = $.address;
        this.format = $.format;
        this.formatVersion = $.formatVersion;
        this.name = $.name;
        this.placement = $.placement;
        this.port = $.port;
        this.responseCondition = $.responseCondition;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclLoggingPapertrailArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclLoggingPapertrailArgs $;

        public Builder() {
            $ = new ServiceVclLoggingPapertrailArgs();
        }

        public Builder(ServiceVclLoggingPapertrailArgs defaults) {
            $ = new ServiceVclLoggingPapertrailArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param address The address of the Papertrail endpoint
         * 
         * @return builder
         * 
         */
        public Builder address(Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address The address of the Papertrail endpoint
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param formatVersion The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`
         * 
         * @return builder
         * 
         */
        public Builder formatVersion(@Nullable Output<Integer> formatVersion) {
            $.formatVersion = formatVersion;
            return this;
        }

        /**
         * @param formatVersion The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`
         * 
         * @return builder
         * 
         */
        public Builder formatVersion(Integer formatVersion) {
            return formatVersion(Output.of(formatVersion));
        }

        /**
         * @param name A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param placement Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`
         * 
         * @return builder
         * 
         */
        public Builder placement(@Nullable Output<String> placement) {
            $.placement = placement;
            return this;
        }

        /**
         * @param placement Where in the generated VCL the logging call should be placed. If not set, endpoints with `format_version` of 2 are placed in `vcl_log` and those with `format_version` of 1 are placed in `vcl_deliver`
         * 
         * @return builder
         * 
         */
        public Builder placement(String placement) {
            return placement(Output.of(placement));
        }

        /**
         * @param port The port associated with the address where the Papertrail endpoint can be accessed
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port associated with the address where the Papertrail endpoint can be accessed
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param responseCondition The name of an existing condition in the configured endpoint, or leave blank to always execute
         * 
         * @return builder
         * 
         */
        public Builder responseCondition(@Nullable Output<String> responseCondition) {
            $.responseCondition = responseCondition;
            return this;
        }

        /**
         * @param responseCondition The name of an existing condition in the configured endpoint, or leave blank to always execute
         * 
         * @return builder
         * 
         */
        public Builder responseCondition(String responseCondition) {
            return responseCondition(Output.of(responseCondition));
        }

        public ServiceVclLoggingPapertrailArgs build() {
            if ($.address == null) {
                throw new MissingRequiredPropertyException("ServiceVclLoggingPapertrailArgs", "address");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceVclLoggingPapertrailArgs", "name");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("ServiceVclLoggingPapertrailArgs", "port");
            }
            return $;
        }
    }

}
