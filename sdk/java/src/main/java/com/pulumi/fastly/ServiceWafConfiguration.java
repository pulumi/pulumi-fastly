// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.ServiceWafConfigurationArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.ServiceWafConfigurationState;
import com.pulumi.fastly.outputs.ServiceWafConfigurationRule;
import com.pulumi.fastly.outputs.ServiceWafConfigurationRuleExclusion;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Defines a set of Web Application Firewall configuration options that can be used to populate a service WAF. This resource will configure rules, thresholds and other settings for a WAF.
 * 
 * &gt; **Warning:** This provider will take precedence over any changes you make in the UI or API. Such changes are likely to be reversed if you run the provider again.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
 * import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
 * import com.pulumi.fastly.inputs.ServiceVclWafArgs;
 * import com.pulumi.fastly.ServiceWafConfiguration;
 * import com.pulumi.fastly.ServiceWafConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .name(&#34;example.com&#34;)
 *                 .comment(&#34;demo&#34;)
 *                 .build())
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;origin1&#34;)
 *                 .port(80)
 *                 .build())
 *             .conditions(            
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_Prefetch&#34;)
 *                     .type(&#34;PREFETCH&#34;)
 *                     .statement(&#34;req.backend.is_origin&#34;)
 *                     .build(),
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_always_false&#34;)
 *                     .statement(&#34;false&#34;)
 *                     .type(&#34;REQUEST&#34;)
 *                     .build())
 *             .responseObjects(ServiceVclResponseObjectArgs.builder()
 *                 .name(&#34;WAF_Response&#34;)
 *                 .status(&#34;403&#34;)
 *                 .response(&#34;Forbidden&#34;)
 *                 .contentType(&#34;text/html&#34;)
 *                 .content(&#34;&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;&#34;)
 *                 .requestCondition(&#34;WAF_always_false&#34;)
 *                 .build())
 *             .waf(ServiceVclWafArgs.builder()
 *                 .prefetchCondition(&#34;WAF_Prefetch&#34;)
 *                 .responseObject(&#34;WAF_Response&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var waf = new ServiceWafConfiguration(&#34;waf&#34;, ServiceWafConfigurationArgs.builder()        
 *             .wafId(demo.waf().applyValue(waf -&gt; waf.wafId()))
 *             .httpViolationScoreThreshold(100)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Usage with rules:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
 * import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
 * import com.pulumi.fastly.inputs.ServiceVclWafArgs;
 * import com.pulumi.fastly.ServiceWafConfiguration;
 * import com.pulumi.fastly.ServiceWafConfigurationArgs;
 * import com.pulumi.fastly.inputs.ServiceWafConfigurationRuleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .name(&#34;example.com&#34;)
 *                 .comment(&#34;demo&#34;)
 *                 .build())
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;origin1&#34;)
 *                 .port(80)
 *                 .build())
 *             .conditions(            
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_Prefetch&#34;)
 *                     .type(&#34;PREFETCH&#34;)
 *                     .statement(&#34;req.backend.is_origin&#34;)
 *                     .build(),
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_always_false&#34;)
 *                     .statement(&#34;false&#34;)
 *                     .type(&#34;REQUEST&#34;)
 *                     .build())
 *             .responseObjects(ServiceVclResponseObjectArgs.builder()
 *                 .name(&#34;WAF_Response&#34;)
 *                 .status(&#34;403&#34;)
 *                 .response(&#34;Forbidden&#34;)
 *                 .contentType(&#34;text/html&#34;)
 *                 .content(&#34;&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;&#34;)
 *                 .requestCondition(&#34;WAF_always_false&#34;)
 *                 .build())
 *             .waf(ServiceVclWafArgs.builder()
 *                 .prefetchCondition(&#34;WAF_Prefetch&#34;)
 *                 .responseObject(&#34;WAF_Response&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var waf = new ServiceWafConfiguration(&#34;waf&#34;, ServiceWafConfigurationArgs.builder()        
 *             .wafId(demo.waf().applyValue(waf -&gt; waf.wafId()))
 *             .httpViolationScoreThreshold(100)
 *             .rules(ServiceWafConfigurationRuleArgs.builder()
 *                 .modsecRuleId(1010090)
 *                 .revision(1)
 *                 .status(&#34;log&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Usage with rule exclusions:
 * 
 * &gt; **Warning:** Rule exclusions are part of a **beta release**, which may be subject to breaking changes and improvements over time. For more information, see our [product and feature lifecycle](https://docs.fastly.com/products/fastly-product-lifecycle#beta) descriptions.
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
 * import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
 * import com.pulumi.fastly.inputs.ServiceVclWafArgs;
 * import com.pulumi.fastly.ServiceWafConfiguration;
 * import com.pulumi.fastly.ServiceWafConfigurationArgs;
 * import com.pulumi.fastly.inputs.ServiceWafConfigurationRuleArgs;
 * import com.pulumi.fastly.inputs.ServiceWafConfigurationRuleExclusionArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .name(&#34;example.com&#34;)
 *                 .comment(&#34;demo&#34;)
 *                 .build())
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;origin1&#34;)
 *                 .port(80)
 *                 .build())
 *             .conditions(            
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_Prefetch&#34;)
 *                     .type(&#34;PREFETCH&#34;)
 *                     .statement(&#34;req.backend.is_origin&#34;)
 *                     .build(),
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_always_false&#34;)
 *                     .statement(&#34;false&#34;)
 *                     .type(&#34;REQUEST&#34;)
 *                     .build())
 *             .responseObjects(ServiceVclResponseObjectArgs.builder()
 *                 .name(&#34;WAF_Response&#34;)
 *                 .status(&#34;403&#34;)
 *                 .response(&#34;Forbidden&#34;)
 *                 .contentType(&#34;text/html&#34;)
 *                 .content(&#34;&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;&#34;)
 *                 .requestCondition(&#34;WAF_always_false&#34;)
 *                 .build())
 *             .waf(ServiceVclWafArgs.builder()
 *                 .prefetchCondition(&#34;WAF_Prefetch&#34;)
 *                 .responseObject(&#34;WAF_Response&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var waf = new ServiceWafConfiguration(&#34;waf&#34;, ServiceWafConfigurationArgs.builder()        
 *             .wafId(demo.waf().applyValue(waf -&gt; waf.wafId()))
 *             .httpViolationScoreThreshold(100)
 *             .rules(ServiceWafConfigurationRuleArgs.builder()
 *                 .modsecRuleId(2029718)
 *                 .revision(1)
 *                 .status(&#34;log&#34;)
 *                 .build())
 *             .ruleExclusions(ServiceWafConfigurationRuleExclusionArgs.builder()
 *                 .name(&#34;index page&#34;)
 *                 .exclusionType(&#34;rule&#34;)
 *                 .condition(&#34;req.url.basename == \&#34;index.html\&#34;&#34;)
 *                 .modsecRuleIds(2029718)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Usage with rules from data source:
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
 * import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
 * import com.pulumi.fastly.inputs.ServiceVclWafArgs;
 * import com.pulumi.fastly.FastlyFunctions;
 * import com.pulumi.fastly.inputs.GetWafRulesArgs;
 * import com.pulumi.fastly.ServiceWafConfiguration;
 * import com.pulumi.fastly.ServiceWafConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var typeStatus = config.get(&#34;typeStatus&#34;).orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .name(&#34;example.com&#34;)
 *                 .comment(&#34;demo&#34;)
 *                 .build())
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;origin1&#34;)
 *                 .port(80)
 *                 .build())
 *             .conditions(            
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_Prefetch&#34;)
 *                     .type(&#34;PREFETCH&#34;)
 *                     .statement(&#34;req.backend.is_origin&#34;)
 *                     .build(),
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_always_false&#34;)
 *                     .statement(&#34;false&#34;)
 *                     .type(&#34;REQUEST&#34;)
 *                     .build())
 *             .responseObjects(ServiceVclResponseObjectArgs.builder()
 *                 .name(&#34;WAF_Response&#34;)
 *                 .status(&#34;403&#34;)
 *                 .response(&#34;Forbidden&#34;)
 *                 .contentType(&#34;text/html&#34;)
 *                 .content(&#34;&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;&#34;)
 *                 .requestCondition(&#34;WAF_always_false&#34;)
 *                 .build())
 *             .waf(ServiceVclWafArgs.builder()
 *                 .prefetchCondition(&#34;WAF_Prefetch&#34;)
 *                 .responseObject(&#34;WAF_Response&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *         final var owasp = FastlyFunctions.getWafRules(GetWafRulesArgs.builder()
 *             .publishers(&#34;owasp&#34;)
 *             .build());
 * 
 *         var waf = new ServiceWafConfiguration(&#34;waf&#34;, ServiceWafConfigurationArgs.builder()        
 *             .wafId(demo.waf().applyValue(waf -&gt; waf.wafId()))
 *             .httpViolationScoreThreshold(100)
 *             .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Usage with support for individual rule configuration (this is the suggested pattern):
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
 * import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
 * import com.pulumi.fastly.inputs.ServiceVclWafArgs;
 * import com.pulumi.fastly.FastlyFunctions;
 * import com.pulumi.fastly.inputs.GetWafRulesArgs;
 * import com.pulumi.fastly.ServiceWafConfiguration;
 * import com.pulumi.fastly.ServiceWafConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var typeStatus = config.get(&#34;typeStatus&#34;).orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));
 *         final var individualRules = config.get(&#34;individualRules&#34;).orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .name(&#34;example.com&#34;)
 *                 .comment(&#34;demo&#34;)
 *                 .build())
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;origin1&#34;)
 *                 .port(80)
 *                 .build())
 *             .conditions(            
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_Prefetch&#34;)
 *                     .type(&#34;PREFETCH&#34;)
 *                     .statement(&#34;req.backend.is_origin&#34;)
 *                     .build(),
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_always_false&#34;)
 *                     .statement(&#34;false&#34;)
 *                     .type(&#34;REQUEST&#34;)
 *                     .build())
 *             .responseObjects(ServiceVclResponseObjectArgs.builder()
 *                 .name(&#34;WAF_Response&#34;)
 *                 .status(&#34;403&#34;)
 *                 .response(&#34;Forbidden&#34;)
 *                 .contentType(&#34;text/html&#34;)
 *                 .content(&#34;&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;&#34;)
 *                 .requestCondition(&#34;WAF_always_false&#34;)
 *                 .build())
 *             .waf(ServiceVclWafArgs.builder()
 *                 .prefetchCondition(&#34;WAF_Prefetch&#34;)
 *                 .responseObject(&#34;WAF_Response&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *         final var owasp = FastlyFunctions.getWafRules(GetWafRulesArgs.builder()
 *             .publishers(&#34;owasp&#34;)
 *             .build());
 * 
 *         var waf = new ServiceWafConfiguration(&#34;waf&#34;, ServiceWafConfigurationArgs.builder()        
 *             .wafId(demo.waf().applyValue(waf -&gt; waf.wafId()))
 *             .httpViolationScoreThreshold(202)
 *             .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Usage with support for specific rule revision configuration:
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
 * import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
 * import com.pulumi.fastly.inputs.ServiceVclWafArgs;
 * import com.pulumi.fastly.FastlyFunctions;
 * import com.pulumi.fastly.inputs.GetWafRulesArgs;
 * import com.pulumi.fastly.ServiceWafConfiguration;
 * import com.pulumi.fastly.ServiceWafConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var typeStatus = config.get(&#34;typeStatus&#34;).orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));
 *         final var specificRuleRevisions = config.get(&#34;specificRuleRevisions&#34;).orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .name(&#34;example.com&#34;)
 *                 .comment(&#34;demo&#34;)
 *                 .build())
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;origin1&#34;)
 *                 .port(80)
 *                 .build())
 *             .conditions(            
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_Prefetch&#34;)
 *                     .type(&#34;PREFETCH&#34;)
 *                     .statement(&#34;req.backend.is_origin&#34;)
 *                     .build(),
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_always_false&#34;)
 *                     .statement(&#34;false&#34;)
 *                     .type(&#34;REQUEST&#34;)
 *                     .build())
 *             .responseObjects(ServiceVclResponseObjectArgs.builder()
 *                 .name(&#34;WAF_Response&#34;)
 *                 .status(&#34;403&#34;)
 *                 .response(&#34;Forbidden&#34;)
 *                 .contentType(&#34;text/html&#34;)
 *                 .content(&#34;&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;&#34;)
 *                 .requestCondition(&#34;WAF_always_false&#34;)
 *                 .build())
 *             .waf(ServiceVclWafArgs.builder()
 *                 .prefetchCondition(&#34;WAF_Prefetch&#34;)
 *                 .responseObject(&#34;WAF_Response&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *         final var owasp = FastlyFunctions.getWafRules(GetWafRulesArgs.builder()
 *             .publishers(&#34;owasp&#34;)
 *             .build());
 * 
 *         var waf = new ServiceWafConfiguration(&#34;waf&#34;, ServiceWafConfigurationArgs.builder()        
 *             .wafId(demo.waf().applyValue(waf -&gt; waf.wafId()))
 *             .httpViolationScoreThreshold(202)
 *             .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Usage omitting rule revision field. The first time this provider is applied, the latest rule revisions are associated with the WAF. Any subsequent apply would not alter the rule revisions.
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
 * import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
 * import com.pulumi.fastly.inputs.ServiceVclWafArgs;
 * import com.pulumi.fastly.FastlyFunctions;
 * import com.pulumi.fastly.inputs.GetWafRulesArgs;
 * import com.pulumi.fastly.ServiceWafConfiguration;
 * import com.pulumi.fastly.ServiceWafConfigurationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         final var config = ctx.config();
 *         final var typeStatus = config.get(&#34;typeStatus&#34;).orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));
 *         final var individualRules = config.get(&#34;individualRules&#34;).orElse(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference));
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .name(&#34;example.com&#34;)
 *                 .comment(&#34;demo&#34;)
 *                 .build())
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;origin1&#34;)
 *                 .port(80)
 *                 .build())
 *             .conditions(            
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_Prefetch&#34;)
 *                     .type(&#34;PREFETCH&#34;)
 *                     .statement(&#34;req.backend.is_origin&#34;)
 *                     .build(),
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_always_false&#34;)
 *                     .statement(&#34;false&#34;)
 *                     .type(&#34;REQUEST&#34;)
 *                     .build())
 *             .responseObjects(ServiceVclResponseObjectArgs.builder()
 *                 .name(&#34;WAF_Response&#34;)
 *                 .status(&#34;403&#34;)
 *                 .response(&#34;Forbidden&#34;)
 *                 .contentType(&#34;text/html&#34;)
 *                 .content(&#34;&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;&#34;)
 *                 .requestCondition(&#34;WAF_always_false&#34;)
 *                 .build())
 *             .waf(ServiceVclWafArgs.builder()
 *                 .prefetchCondition(&#34;WAF_Prefetch&#34;)
 *                 .responseObject(&#34;WAF_Response&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *         final var owasp = FastlyFunctions.getWafRules(GetWafRulesArgs.builder()
 *             .publishers(&#34;owasp&#34;)
 *             .build());
 * 
 *         var waf = new ServiceWafConfiguration(&#34;waf&#34;, ServiceWafConfigurationArgs.builder()        
 *             .wafId(demo.waf().applyValue(waf -&gt; waf.wafId()))
 *             .httpViolationScoreThreshold(202)
 *             .dynamic(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *         ctx.export(&#34;rules&#34;, waf.rules());
 *     }
 * }
 * ```
 * ## Adding a WAF to an existing service
 * 
 * &gt; **Warning:** A two-phase change is required when adding a WAF to an existing service
 * 
 * When adding a `waf` to an existing `fastly.ServiceVcl` and at the same time adding a `fastly.ServiceWafConfiguration`
 * resource with `waf_id = fastly_service_vcl.demo.waf[0].waf_id` might result with the in the following error:
 * 
 * &gt; fastly_service_vcl.demo.waf is empty list of object
 * 
 * For this scenario, it&#39;s recommended to split the changes into two distinct steps:
 * 
 * 1. Add the `waf` block to the `fastly.ServiceVcl` and apply the changes
 * 2. Add the `fastly.ServiceWafConfiguration` to the HCL and apply the changes
 * 
 * ## Import
 * 
 * This is an example of the import command being applied to the resource named `fastly_service_waf_configuration.waf` The resource ID should be the WAF ID.
 * 
 * ```sh
 *  $ pulumi import fastly:index/serviceWafConfiguration:ServiceWafConfiguration waf xxxxxxxxxxxxxxxxxxxx
 * ```
 * 
 */
@ResourceType(type="fastly:index/serviceWafConfiguration:ServiceWafConfiguration")
public class ServiceWafConfiguration extends com.pulumi.resources.CustomResource {
    /**
     * Conditionally prevents a new firewall version from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     * 
     */
    @Export(name="activate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> activate;

    /**
     * @return Conditionally prevents a new firewall version from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     * 
     */
    public Output<Optional<Boolean>> activate() {
        return Codegen.optional(this.activate);
    }
    /**
     * Whether a specific firewall version is currently deployed
     * 
     */
    @Export(name="active", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> active;

    /**
     * @return Whether a specific firewall version is currently deployed
     * 
     */
    public Output<Boolean> active() {
        return this.active;
    }
    /**
     * Allowed HTTP versions
     * 
     */
    @Export(name="allowedHttpVersions", refs={String.class}, tree="[0]")
    private Output<String> allowedHttpVersions;

    /**
     * @return Allowed HTTP versions
     * 
     */
    public Output<String> allowedHttpVersions() {
        return this.allowedHttpVersions;
    }
    /**
     * A space-separated list of HTTP method names
     * 
     */
    @Export(name="allowedMethods", refs={String.class}, tree="[0]")
    private Output<String> allowedMethods;

    /**
     * @return A space-separated list of HTTP method names
     * 
     */
    public Output<String> allowedMethods() {
        return this.allowedMethods;
    }
    /**
     * Allowed request content types
     * 
     */
    @Export(name="allowedRequestContentType", refs={String.class}, tree="[0]")
    private Output<String> allowedRequestContentType;

    /**
     * @return Allowed request content types
     * 
     */
    public Output<String> allowedRequestContentType() {
        return this.allowedRequestContentType;
    }
    /**
     * Allowed request content type charset
     * 
     */
    @Export(name="allowedRequestContentTypeCharset", refs={String.class}, tree="[0]")
    private Output<String> allowedRequestContentTypeCharset;

    /**
     * @return Allowed request content type charset
     * 
     */
    public Output<String> allowedRequestContentTypeCharset() {
        return this.allowedRequestContentTypeCharset;
    }
    /**
     * The maximum number of arguments allowed
     * 
     */
    @Export(name="argLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> argLength;

    /**
     * @return The maximum number of arguments allowed
     * 
     */
    public Output<Integer> argLength() {
        return this.argLength;
    }
    /**
     * The maximum allowed argument name length
     * 
     */
    @Export(name="argNameLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> argNameLength;

    /**
     * @return The maximum allowed argument name length
     * 
     */
    public Output<Integer> argNameLength() {
        return this.argNameLength;
    }
    /**
     * The latest cloned firewall version by the provider
     * 
     */
    @Export(name="clonedVersion", refs={Integer.class}, tree="[0]")
    private Output<Integer> clonedVersion;

    /**
     * @return The latest cloned firewall version by the provider
     * 
     */
    public Output<Integer> clonedVersion() {
        return this.clonedVersion;
    }
    /**
     * The maximum allowed size of all files
     * 
     */
    @Export(name="combinedFileSizes", refs={Integer.class}, tree="[0]")
    private Output<Integer> combinedFileSizes;

    /**
     * @return The maximum allowed size of all files
     * 
     */
    public Output<Integer> combinedFileSizes() {
        return this.combinedFileSizes;
    }
    /**
     * Score value to add for critical anomalies
     * 
     */
    @Export(name="criticalAnomalyScore", refs={Integer.class}, tree="[0]")
    private Output<Integer> criticalAnomalyScore;

    /**
     * @return Score value to add for critical anomalies
     * 
     */
    public Output<Integer> criticalAnomalyScore() {
        return this.criticalAnomalyScore;
    }
    /**
     * CRS validate UTF8 encoding
     * 
     */
    @Export(name="crsValidateUtf8Encoding", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> crsValidateUtf8Encoding;

    /**
     * @return CRS validate UTF8 encoding
     * 
     */
    public Output<Boolean> crsValidateUtf8Encoding() {
        return this.crsValidateUtf8Encoding;
    }
    /**
     * Score value to add for error anomalies
     * 
     */
    @Export(name="errorAnomalyScore", refs={Integer.class}, tree="[0]")
    private Output<Integer> errorAnomalyScore;

    /**
     * @return Score value to add for error anomalies
     * 
     */
    public Output<Integer> errorAnomalyScore() {
        return this.errorAnomalyScore;
    }
    /**
     * A space-separated list of country codes in ISO 3166-1 (two-letter) format
     * 
     */
    @Export(name="highRiskCountryCodes", refs={String.class}, tree="[0]")
    private Output<String> highRiskCountryCodes;

    /**
     * @return A space-separated list of country codes in ISO 3166-1 (two-letter) format
     * 
     */
    public Output<String> highRiskCountryCodes() {
        return this.highRiskCountryCodes;
    }
    /**
     * HTTP violation threshold
     * 
     */
    @Export(name="httpViolationScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> httpViolationScoreThreshold;

    /**
     * @return HTTP violation threshold
     * 
     */
    public Output<Integer> httpViolationScoreThreshold() {
        return this.httpViolationScoreThreshold;
    }
    /**
     * Inbound anomaly threshold
     * 
     */
    @Export(name="inboundAnomalyScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> inboundAnomalyScoreThreshold;

    /**
     * @return Inbound anomaly threshold
     * 
     */
    public Output<Integer> inboundAnomalyScoreThreshold() {
        return this.inboundAnomalyScoreThreshold;
    }
    /**
     * Local file inclusion attack threshold
     * 
     */
    @Export(name="lfiScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> lfiScoreThreshold;

    /**
     * @return Local file inclusion attack threshold
     * 
     */
    public Output<Integer> lfiScoreThreshold() {
        return this.lfiScoreThreshold;
    }
    /**
     * The maximum allowed file size, in bytes
     * 
     */
    @Export(name="maxFileSize", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxFileSize;

    /**
     * @return The maximum allowed file size, in bytes
     * 
     */
    public Output<Integer> maxFileSize() {
        return this.maxFileSize;
    }
    /**
     * The maximum number of arguments allowed
     * 
     */
    @Export(name="maxNumArgs", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxNumArgs;

    /**
     * @return The maximum number of arguments allowed
     * 
     */
    public Output<Integer> maxNumArgs() {
        return this.maxNumArgs;
    }
    /**
     * Score value to add for notice anomalies
     * 
     */
    @Export(name="noticeAnomalyScore", refs={Integer.class}, tree="[0]")
    private Output<Integer> noticeAnomalyScore;

    /**
     * @return Score value to add for notice anomalies
     * 
     */
    public Output<Integer> noticeAnomalyScore() {
        return this.noticeAnomalyScore;
    }
    /**
     * The numeric ID assigned to the WAF Rule Exclusion
     * 
     */
    @Export(name="number", refs={Integer.class}, tree="[0]")
    private Output<Integer> number;

    /**
     * @return The numeric ID assigned to the WAF Rule Exclusion
     * 
     */
    public Output<Integer> number() {
        return this.number;
    }
    /**
     * The configured paranoia level
     * 
     */
    @Export(name="paranoiaLevel", refs={Integer.class}, tree="[0]")
    private Output<Integer> paranoiaLevel;

    /**
     * @return The configured paranoia level
     * 
     */
    public Output<Integer> paranoiaLevel() {
        return this.paranoiaLevel;
    }
    /**
     * PHP injection threshold
     * 
     */
    @Export(name="phpInjectionScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> phpInjectionScoreThreshold;

    /**
     * @return PHP injection threshold
     * 
     */
    public Output<Integer> phpInjectionScoreThreshold() {
        return this.phpInjectionScoreThreshold;
    }
    /**
     * Remote code execution threshold
     * 
     */
    @Export(name="rceScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> rceScoreThreshold;

    /**
     * @return Remote code execution threshold
     * 
     */
    public Output<Integer> rceScoreThreshold() {
        return this.rceScoreThreshold;
    }
    /**
     * A space-separated list of allowed file extensions
     * 
     */
    @Export(name="restrictedExtensions", refs={String.class}, tree="[0]")
    private Output<String> restrictedExtensions;

    /**
     * @return A space-separated list of allowed file extensions
     * 
     */
    public Output<String> restrictedExtensions() {
        return this.restrictedExtensions;
    }
    /**
     * A space-separated list of allowed header names
     * 
     */
    @Export(name="restrictedHeaders", refs={String.class}, tree="[0]")
    private Output<String> restrictedHeaders;

    /**
     * @return A space-separated list of allowed header names
     * 
     */
    public Output<String> restrictedHeaders() {
        return this.restrictedHeaders;
    }
    /**
     * Remote file inclusion attack threshold
     * 
     */
    @Export(name="rfiScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> rfiScoreThreshold;

    /**
     * @return Remote file inclusion attack threshold
     * 
     */
    public Output<Integer> rfiScoreThreshold() {
        return this.rfiScoreThreshold;
    }
    @Export(name="ruleExclusions", refs={List.class,ServiceWafConfigurationRuleExclusion.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceWafConfigurationRuleExclusion>> ruleExclusions;

    public Output<Optional<List<ServiceWafConfigurationRuleExclusion>>> ruleExclusions() {
        return Codegen.optional(this.ruleExclusions);
    }
    @Export(name="rules", refs={List.class,ServiceWafConfigurationRule.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceWafConfigurationRule>> rules;

    public Output<Optional<List<ServiceWafConfigurationRule>>> rules() {
        return Codegen.optional(this.rules);
    }
    /**
     * Session fixation attack threshold
     * 
     */
    @Export(name="sessionFixationScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> sessionFixationScoreThreshold;

    /**
     * @return Session fixation attack threshold
     * 
     */
    public Output<Integer> sessionFixationScoreThreshold() {
        return this.sessionFixationScoreThreshold;
    }
    /**
     * SQL injection attack threshold
     * 
     */
    @Export(name="sqlInjectionScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> sqlInjectionScoreThreshold;

    /**
     * @return SQL injection attack threshold
     * 
     */
    public Output<Integer> sqlInjectionScoreThreshold() {
        return this.sqlInjectionScoreThreshold;
    }
    /**
     * The maximum size of argument names and values
     * 
     */
    @Export(name="totalArgLength", refs={Integer.class}, tree="[0]")
    private Output<Integer> totalArgLength;

    /**
     * @return The maximum size of argument names and values
     * 
     */
    public Output<Integer> totalArgLength() {
        return this.totalArgLength;
    }
    /**
     * The ID of the Web Application Firewall that the configuration belongs to
     * 
     */
    @Export(name="wafId", refs={String.class}, tree="[0]")
    private Output<String> wafId;

    /**
     * @return The ID of the Web Application Firewall that the configuration belongs to
     * 
     */
    public Output<String> wafId() {
        return this.wafId;
    }
    /**
     * Score value to add for warning anomalies
     * 
     */
    @Export(name="warningAnomalyScore", refs={Integer.class}, tree="[0]")
    private Output<Integer> warningAnomalyScore;

    /**
     * @return Score value to add for warning anomalies
     * 
     */
    public Output<Integer> warningAnomalyScore() {
        return this.warningAnomalyScore;
    }
    /**
     * XSS attack threshold
     * 
     */
    @Export(name="xssScoreThreshold", refs={Integer.class}, tree="[0]")
    private Output<Integer> xssScoreThreshold;

    /**
     * @return XSS attack threshold
     * 
     */
    public Output<Integer> xssScoreThreshold() {
        return this.xssScoreThreshold;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceWafConfiguration(String name) {
        this(name, ServiceWafConfigurationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceWafConfiguration(String name, ServiceWafConfigurationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceWafConfiguration(String name, ServiceWafConfigurationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/serviceWafConfiguration:ServiceWafConfiguration", name, args == null ? ServiceWafConfigurationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServiceWafConfiguration(String name, Output<String> id, @Nullable ServiceWafConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/serviceWafConfiguration:ServiceWafConfiguration", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceWafConfiguration get(String name, Output<String> id, @Nullable ServiceWafConfigurationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceWafConfiguration(name, id, state, options);
    }
}
