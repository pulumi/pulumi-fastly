// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclGzipArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclGzipArgs Empty = new ServiceVclGzipArgs();

    /**
     * Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    @Import(name="cacheCondition")
    private @Nullable Output<String> cacheCondition;

    /**
     * @return Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    public Optional<Output<String>> cacheCondition() {
        return Optional.ofNullable(this.cacheCondition);
    }

    /**
     * The content-type for each type of content you wish to have dynamically gzip&#39;ed. Example: `[&#34;text/html&#34;, &#34;text/css&#34;]`
     * 
     */
    @Import(name="contentTypes")
    private @Nullable Output<List<String>> contentTypes;

    /**
     * @return The content-type for each type of content you wish to have dynamically gzip&#39;ed. Example: `[&#34;text/html&#34;, &#34;text/css&#34;]`
     * 
     */
    public Optional<Output<List<String>>> contentTypes() {
        return Optional.ofNullable(this.contentTypes);
    }

    /**
     * File extensions for each file type to dynamically gzip. Example: `[&#34;css&#34;, &#34;js&#34;]`
     * 
     */
    @Import(name="extensions")
    private @Nullable Output<List<String>> extensions;

    /**
     * @return File extensions for each file type to dynamically gzip. Example: `[&#34;css&#34;, &#34;js&#34;]`
     * 
     */
    public Optional<Output<List<String>>> extensions() {
        return Optional.ofNullable(this.extensions);
    }

    /**
     * A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ServiceVclGzipArgs() {}

    private ServiceVclGzipArgs(ServiceVclGzipArgs $) {
        this.cacheCondition = $.cacheCondition;
        this.contentTypes = $.contentTypes;
        this.extensions = $.extensions;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclGzipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclGzipArgs $;

        public Builder() {
            $ = new ServiceVclGzipArgs();
        }

        public Builder(ServiceVclGzipArgs defaults) {
            $ = new ServiceVclGzipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheCondition Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
         * 
         * @return builder
         * 
         */
        public Builder cacheCondition(@Nullable Output<String> cacheCondition) {
            $.cacheCondition = cacheCondition;
            return this;
        }

        /**
         * @param cacheCondition Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
         * 
         * @return builder
         * 
         */
        public Builder cacheCondition(String cacheCondition) {
            return cacheCondition(Output.of(cacheCondition));
        }

        /**
         * @param contentTypes The content-type for each type of content you wish to have dynamically gzip&#39;ed. Example: `[&#34;text/html&#34;, &#34;text/css&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(@Nullable Output<List<String>> contentTypes) {
            $.contentTypes = contentTypes;
            return this;
        }

        /**
         * @param contentTypes The content-type for each type of content you wish to have dynamically gzip&#39;ed. Example: `[&#34;text/html&#34;, &#34;text/css&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(List<String> contentTypes) {
            return contentTypes(Output.of(contentTypes));
        }

        /**
         * @param contentTypes The content-type for each type of content you wish to have dynamically gzip&#39;ed. Example: `[&#34;text/html&#34;, &#34;text/css&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder contentTypes(String... contentTypes) {
            return contentTypes(List.of(contentTypes));
        }

        /**
         * @param extensions File extensions for each file type to dynamically gzip. Example: `[&#34;css&#34;, &#34;js&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder extensions(@Nullable Output<List<String>> extensions) {
            $.extensions = extensions;
            return this;
        }

        /**
         * @param extensions File extensions for each file type to dynamically gzip. Example: `[&#34;css&#34;, &#34;js&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder extensions(List<String> extensions) {
            return extensions(Output.of(extensions));
        }

        /**
         * @param extensions File extensions for each file type to dynamically gzip. Example: `[&#34;css&#34;, &#34;js&#34;]`
         * 
         * @return builder
         * 
         */
        public Builder extensions(String... extensions) {
            return extensions(List.of(extensions));
        }

        /**
         * @param name A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ServiceVclGzipArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceVclGzipArgs", "name");
            }
            return $;
        }
    }

}
