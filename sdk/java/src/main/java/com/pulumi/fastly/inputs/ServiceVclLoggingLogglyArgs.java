// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclLoggingLogglyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclLoggingLogglyArgs Empty = new ServiceVclLoggingLogglyArgs();

    /**
     * Apache-style string or VCL variables to use for log formatting.
     * 
     */
    @Import(name="format")
    private @Nullable Output<String> format;

    /**
     * @return Apache-style string or VCL variables to use for log formatting.
     * 
     */
    public Optional<Output<String>> format() {
        return Optional.ofNullable(this.format);
    }

    /**
     * The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     * 
     */
    @Import(name="formatVersion")
    private @Nullable Output<Integer> formatVersion;

    /**
     * @return The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
     * 
     */
    public Optional<Output<Integer>> formatVersion() {
        return Optional.ofNullable(this.formatVersion);
    }

    /**
     * The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Where in the generated VCL the logging call should be placed (ignored).
     * 
     */
    @Import(name="placement")
    private @Nullable Output<String> placement;

    /**
     * @return Where in the generated VCL the logging call should be placed (ignored).
     * 
     */
    public Optional<Output<String>> placement() {
        return Optional.ofNullable(this.placement);
    }

    /**
     * The name of an existing condition in the configured endpoint, or leave blank to always execute.
     * 
     */
    @Import(name="responseCondition")
    private @Nullable Output<String> responseCondition;

    /**
     * @return The name of an existing condition in the configured endpoint, or leave blank to always execute.
     * 
     */
    public Optional<Output<String>> responseCondition() {
        return Optional.ofNullable(this.responseCondition);
    }

    /**
     * The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
     * 
     */
    @Import(name="token", required=true)
    private Output<String> token;

    /**
     * @return The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    private ServiceVclLoggingLogglyArgs() {}

    private ServiceVclLoggingLogglyArgs(ServiceVclLoggingLogglyArgs $) {
        this.format = $.format;
        this.formatVersion = $.formatVersion;
        this.name = $.name;
        this.placement = $.placement;
        this.responseCondition = $.responseCondition;
        this.token = $.token;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclLoggingLogglyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclLoggingLogglyArgs $;

        public Builder() {
            $ = new ServiceVclLoggingLogglyArgs();
        }

        public Builder(ServiceVclLoggingLogglyArgs defaults) {
            $ = new ServiceVclLoggingLogglyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param format Apache-style string or VCL variables to use for log formatting.
         * 
         * @return builder
         * 
         */
        public Builder format(@Nullable Output<String> format) {
            $.format = format;
            return this;
        }

        /**
         * @param format Apache-style string or VCL variables to use for log formatting.
         * 
         * @return builder
         * 
         */
        public Builder format(String format) {
            return format(Output.of(format));
        }

        /**
         * @param formatVersion The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
         * 
         * @return builder
         * 
         */
        public Builder formatVersion(@Nullable Output<Integer> formatVersion) {
            $.formatVersion = formatVersion;
            return this;
        }

        /**
         * @param formatVersion The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
         * 
         * @return builder
         * 
         */
        public Builder formatVersion(Integer formatVersion) {
            return formatVersion(Output.of(formatVersion));
        }

        /**
         * @param name The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param placement Where in the generated VCL the logging call should be placed (ignored).
         * 
         * @return builder
         * 
         */
        public Builder placement(@Nullable Output<String> placement) {
            $.placement = placement;
            return this;
        }

        /**
         * @param placement Where in the generated VCL the logging call should be placed (ignored).
         * 
         * @return builder
         * 
         */
        public Builder placement(String placement) {
            return placement(Output.of(placement));
        }

        /**
         * @param responseCondition The name of an existing condition in the configured endpoint, or leave blank to always execute.
         * 
         * @return builder
         * 
         */
        public Builder responseCondition(@Nullable Output<String> responseCondition) {
            $.responseCondition = responseCondition;
            return this;
        }

        /**
         * @param responseCondition The name of an existing condition in the configured endpoint, or leave blank to always execute.
         * 
         * @return builder
         * 
         */
        public Builder responseCondition(String responseCondition) {
            return responseCondition(Output.of(responseCondition));
        }

        /**
         * @param token The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
         * 
         * @return builder
         * 
         */
        public Builder token(Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        public ServiceVclLoggingLogglyArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceVclLoggingLogglyArgs", "name");
            }
            if ($.token == null) {
                throw new MissingRequiredPropertyException("ServiceVclLoggingLogglyArgs", "token");
            }
            return $;
        }
    }

}
