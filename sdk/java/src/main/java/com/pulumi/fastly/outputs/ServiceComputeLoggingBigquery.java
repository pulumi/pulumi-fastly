// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceComputeLoggingBigquery {
    /**
     * @return The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
     * 
     */
    private @Nullable String accountName;
    /**
     * @return The ID of your BigQuery dataset
     * 
     */
    private String dataset;
    /**
     * @return The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
     * 
     */
    private String email;
    /**
     * @return A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return Region where logs will be processed before streaming to BigQuery. Valid values are &#39;none&#39;, &#39;us&#39; and &#39;eu&#39;.
     * 
     */
    private @Nullable String processingRegion;
    /**
     * @return The ID of your GCP project
     * 
     */
    private String projectId;
    /**
     * @return The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
     * 
     */
    private String secretKey;
    /**
     * @return The ID of your BigQuery table
     * 
     */
    private String table;
    /**
     * @return BigQuery table name suffix template
     * 
     */
    private @Nullable String template;

    private ServiceComputeLoggingBigquery() {}
    /**
     * @return The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
     * 
     */
    public Optional<String> accountName() {
        return Optional.ofNullable(this.accountName);
    }
    /**
     * @return The ID of your BigQuery dataset
     * 
     */
    public String dataset() {
        return this.dataset;
    }
    /**
     * @return The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Region where logs will be processed before streaming to BigQuery. Valid values are &#39;none&#39;, &#39;us&#39; and &#39;eu&#39;.
     * 
     */
    public Optional<String> processingRegion() {
        return Optional.ofNullable(this.processingRegion);
    }
    /**
     * @return The ID of your GCP project
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
     * 
     */
    public String secretKey() {
        return this.secretKey;
    }
    /**
     * @return The ID of your BigQuery table
     * 
     */
    public String table() {
        return this.table;
    }
    /**
     * @return BigQuery table name suffix template
     * 
     */
    public Optional<String> template() {
        return Optional.ofNullable(this.template);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceComputeLoggingBigquery defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String accountName;
        private String dataset;
        private String email;
        private String name;
        private @Nullable String processingRegion;
        private String projectId;
        private String secretKey;
        private String table;
        private @Nullable String template;
        public Builder() {}
        public Builder(ServiceComputeLoggingBigquery defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.dataset = defaults.dataset;
    	      this.email = defaults.email;
    	      this.name = defaults.name;
    	      this.processingRegion = defaults.processingRegion;
    	      this.projectId = defaults.projectId;
    	      this.secretKey = defaults.secretKey;
    	      this.table = defaults.table;
    	      this.template = defaults.template;
        }

        @CustomType.Setter
        public Builder accountName(@Nullable String accountName) {

            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder dataset(String dataset) {
            if (dataset == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingBigquery", "dataset");
            }
            this.dataset = dataset;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingBigquery", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingBigquery", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder processingRegion(@Nullable String processingRegion) {

            this.processingRegion = processingRegion;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingBigquery", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder secretKey(String secretKey) {
            if (secretKey == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingBigquery", "secretKey");
            }
            this.secretKey = secretKey;
            return this;
        }
        @CustomType.Setter
        public Builder table(String table) {
            if (table == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingBigquery", "table");
            }
            this.table = table;
            return this;
        }
        @CustomType.Setter
        public Builder template(@Nullable String template) {

            this.template = template;
            return this;
        }
        public ServiceComputeLoggingBigquery build() {
            final var _resultValue = new ServiceComputeLoggingBigquery();
            _resultValue.accountName = accountName;
            _resultValue.dataset = dataset;
            _resultValue.email = email;
            _resultValue.name = name;
            _resultValue.processingRegion = processingRegion;
            _resultValue.projectId = projectId;
            _resultValue.secretKey = secretKey;
            _resultValue.table = table;
            _resultValue.template = template;
            return _resultValue;
        }
    }
}
