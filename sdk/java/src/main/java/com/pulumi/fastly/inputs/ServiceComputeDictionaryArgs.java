// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceComputeDictionaryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceComputeDictionaryArgs Empty = new ServiceComputeDictionaryArgs();

    /**
     * The ID of the dictionary
     * 
     */
    @Import(name="dictionaryId")
    private @Nullable Output<String> dictionaryId;

    /**
     * @return The ID of the dictionary
     * 
     */
    public Optional<Output<String>> dictionaryId() {
        return Optional.ofNullable(this.dictionaryId);
    }

    /**
     * Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="writeOnly")
    private @Nullable Output<Boolean> writeOnly;

    public Optional<Output<Boolean>> writeOnly() {
        return Optional.ofNullable(this.writeOnly);
    }

    private ServiceComputeDictionaryArgs() {}

    private ServiceComputeDictionaryArgs(ServiceComputeDictionaryArgs $) {
        this.dictionaryId = $.dictionaryId;
        this.forceDestroy = $.forceDestroy;
        this.name = $.name;
        this.writeOnly = $.writeOnly;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceComputeDictionaryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceComputeDictionaryArgs $;

        public Builder() {
            $ = new ServiceComputeDictionaryArgs();
        }

        public Builder(ServiceComputeDictionaryArgs defaults) {
            $ = new ServiceComputeDictionaryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dictionaryId The ID of the dictionary
         * 
         * @return builder
         * 
         */
        public Builder dictionaryId(@Nullable Output<String> dictionaryId) {
            $.dictionaryId = dictionaryId;
            return this;
        }

        /**
         * @param dictionaryId The ID of the dictionary
         * 
         * @return builder
         * 
         */
        public Builder dictionaryId(String dictionaryId) {
            return dictionaryId(Output.of(dictionaryId));
        }

        /**
         * @param forceDestroy Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param name A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder writeOnly(@Nullable Output<Boolean> writeOnly) {
            $.writeOnly = writeOnly;
            return this;
        }

        public Builder writeOnly(Boolean writeOnly) {
            return writeOnly(Output.of(writeOnly));
        }

        public ServiceComputeDictionaryArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceComputeDictionaryArgs", "name");
            }
            return $;
        }
    }

}
