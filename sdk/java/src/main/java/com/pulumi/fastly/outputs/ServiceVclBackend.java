// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclBackend {
    /**
     * @return An IPv4, hostname, or IPv6 address for the Backend
     * 
     */
    private String address;
    /**
     * @return Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `false`
     * 
     */
    private @Nullable Boolean autoLoadbalance;
    /**
     * @return How long to wait between bytes in milliseconds. Default `10000`
     * 
     */
    private @Nullable Integer betweenBytesTimeout;
    /**
     * @return How long to wait for a timeout in milliseconds. Default `1000`
     * 
     */
    private @Nullable Integer connectTimeout;
    /**
     * @return Number of errors to allow before the Backend is marked as down. Default `0`
     * 
     */
    private @Nullable Integer errorThreshold;
    /**
     * @return How long to wait for the first bytes in milliseconds. Default `15000`
     * 
     */
    private @Nullable Integer firstByteTimeout;
    /**
     * @return Name of a defined `healthcheck` to assign to this backend
     * 
     */
    private @Nullable String healthcheck;
    /**
     * @return Maximum number of connections for this Backend. Default `200`
     * 
     */
    private @Nullable Integer maxConn;
    /**
     * @return Maximum allowed TLS version on SSL connections to this backend.
     * 
     */
    private @Nullable String maxTlsVersion;
    /**
     * @return Minimum allowed TLS version on SSL connections to this backend.
     * 
     */
    private @Nullable String minTlsVersion;
    /**
     * @return Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return The hostname to override the Host header
     * 
     */
    private @Nullable String overrideHost;
    /**
     * @return The port number on which the Backend responds. Default `80`
     * 
     */
    private @Nullable Integer port;
    /**
     * @return Name of a condition, which if met, will select this backend during a request.
     * 
     */
    private @Nullable String requestCondition;
    /**
     * @return The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
     * 
     */
    private @Nullable String shield;
    /**
     * @return CA certificate attached to origin.
     * 
     */
    private @Nullable String sslCaCert;
    /**
     * @return Configure certificate validation. Does not affect SNI at all
     * 
     */
    private @Nullable String sslCertHostname;
    /**
     * @return Be strict about checking SSL certs. Default `true`
     * 
     */
    private @Nullable Boolean sslCheckCert;
    /**
     * @return Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
     * 
     */
    private @Nullable String sslCiphers;
    /**
     * @return Client certificate attached to origin. Used when connecting to the backend
     * 
     */
    private @Nullable String sslClientCert;
    /**
     * @return Client key attached to origin. Used when connecting to the backend
     * 
     */
    private @Nullable String sslClientKey;
    /**
     * @return Configure SNI in the TLS handshake. Does not affect cert validation at all
     * 
     */
    private @Nullable String sslSniHostname;
    /**
     * @return Whether or not to use SSL to reach the Backend. Default `false`
     * 
     */
    private @Nullable Boolean useSsl;
    /**
     * @return The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
     * 
     */
    private @Nullable Integer weight;

    private ServiceVclBackend() {}
    /**
     * @return An IPv4, hostname, or IPv6 address for the Backend
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `false`
     * 
     */
    public Optional<Boolean> autoLoadbalance() {
        return Optional.ofNullable(this.autoLoadbalance);
    }
    /**
     * @return How long to wait between bytes in milliseconds. Default `10000`
     * 
     */
    public Optional<Integer> betweenBytesTimeout() {
        return Optional.ofNullable(this.betweenBytesTimeout);
    }
    /**
     * @return How long to wait for a timeout in milliseconds. Default `1000`
     * 
     */
    public Optional<Integer> connectTimeout() {
        return Optional.ofNullable(this.connectTimeout);
    }
    /**
     * @return Number of errors to allow before the Backend is marked as down. Default `0`
     * 
     */
    public Optional<Integer> errorThreshold() {
        return Optional.ofNullable(this.errorThreshold);
    }
    /**
     * @return How long to wait for the first bytes in milliseconds. Default `15000`
     * 
     */
    public Optional<Integer> firstByteTimeout() {
        return Optional.ofNullable(this.firstByteTimeout);
    }
    /**
     * @return Name of a defined `healthcheck` to assign to this backend
     * 
     */
    public Optional<String> healthcheck() {
        return Optional.ofNullable(this.healthcheck);
    }
    /**
     * @return Maximum number of connections for this Backend. Default `200`
     * 
     */
    public Optional<Integer> maxConn() {
        return Optional.ofNullable(this.maxConn);
    }
    /**
     * @return Maximum allowed TLS version on SSL connections to this backend.
     * 
     */
    public Optional<String> maxTlsVersion() {
        return Optional.ofNullable(this.maxTlsVersion);
    }
    /**
     * @return Minimum allowed TLS version on SSL connections to this backend.
     * 
     */
    public Optional<String> minTlsVersion() {
        return Optional.ofNullable(this.minTlsVersion);
    }
    /**
     * @return Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The hostname to override the Host header
     * 
     */
    public Optional<String> overrideHost() {
        return Optional.ofNullable(this.overrideHost);
    }
    /**
     * @return The port number on which the Backend responds. Default `80`
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return Name of a condition, which if met, will select this backend during a request.
     * 
     */
    public Optional<String> requestCondition() {
        return Optional.ofNullable(this.requestCondition);
    }
    /**
     * @return The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
     * 
     */
    public Optional<String> shield() {
        return Optional.ofNullable(this.shield);
    }
    /**
     * @return CA certificate attached to origin.
     * 
     */
    public Optional<String> sslCaCert() {
        return Optional.ofNullable(this.sslCaCert);
    }
    /**
     * @return Configure certificate validation. Does not affect SNI at all
     * 
     */
    public Optional<String> sslCertHostname() {
        return Optional.ofNullable(this.sslCertHostname);
    }
    /**
     * @return Be strict about checking SSL certs. Default `true`
     * 
     */
    public Optional<Boolean> sslCheckCert() {
        return Optional.ofNullable(this.sslCheckCert);
    }
    /**
     * @return Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
     * 
     */
    public Optional<String> sslCiphers() {
        return Optional.ofNullable(this.sslCiphers);
    }
    /**
     * @return Client certificate attached to origin. Used when connecting to the backend
     * 
     */
    public Optional<String> sslClientCert() {
        return Optional.ofNullable(this.sslClientCert);
    }
    /**
     * @return Client key attached to origin. Used when connecting to the backend
     * 
     */
    public Optional<String> sslClientKey() {
        return Optional.ofNullable(this.sslClientKey);
    }
    /**
     * @return Configure SNI in the TLS handshake. Does not affect cert validation at all
     * 
     */
    public Optional<String> sslSniHostname() {
        return Optional.ofNullable(this.sslSniHostname);
    }
    /**
     * @return Whether or not to use SSL to reach the Backend. Default `false`
     * 
     */
    public Optional<Boolean> useSsl() {
        return Optional.ofNullable(this.useSsl);
    }
    /**
     * @return The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
     * 
     */
    public Optional<Integer> weight() {
        return Optional.ofNullable(this.weight);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclBackend defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String address;
        private @Nullable Boolean autoLoadbalance;
        private @Nullable Integer betweenBytesTimeout;
        private @Nullable Integer connectTimeout;
        private @Nullable Integer errorThreshold;
        private @Nullable Integer firstByteTimeout;
        private @Nullable String healthcheck;
        private @Nullable Integer maxConn;
        private @Nullable String maxTlsVersion;
        private @Nullable String minTlsVersion;
        private String name;
        private @Nullable String overrideHost;
        private @Nullable Integer port;
        private @Nullable String requestCondition;
        private @Nullable String shield;
        private @Nullable String sslCaCert;
        private @Nullable String sslCertHostname;
        private @Nullable Boolean sslCheckCert;
        private @Nullable String sslCiphers;
        private @Nullable String sslClientCert;
        private @Nullable String sslClientKey;
        private @Nullable String sslSniHostname;
        private @Nullable Boolean useSsl;
        private @Nullable Integer weight;
        public Builder() {}
        public Builder(ServiceVclBackend defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.address = defaults.address;
    	      this.autoLoadbalance = defaults.autoLoadbalance;
    	      this.betweenBytesTimeout = defaults.betweenBytesTimeout;
    	      this.connectTimeout = defaults.connectTimeout;
    	      this.errorThreshold = defaults.errorThreshold;
    	      this.firstByteTimeout = defaults.firstByteTimeout;
    	      this.healthcheck = defaults.healthcheck;
    	      this.maxConn = defaults.maxConn;
    	      this.maxTlsVersion = defaults.maxTlsVersion;
    	      this.minTlsVersion = defaults.minTlsVersion;
    	      this.name = defaults.name;
    	      this.overrideHost = defaults.overrideHost;
    	      this.port = defaults.port;
    	      this.requestCondition = defaults.requestCondition;
    	      this.shield = defaults.shield;
    	      this.sslCaCert = defaults.sslCaCert;
    	      this.sslCertHostname = defaults.sslCertHostname;
    	      this.sslCheckCert = defaults.sslCheckCert;
    	      this.sslCiphers = defaults.sslCiphers;
    	      this.sslClientCert = defaults.sslClientCert;
    	      this.sslClientKey = defaults.sslClientKey;
    	      this.sslSniHostname = defaults.sslSniHostname;
    	      this.useSsl = defaults.useSsl;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder address(String address) {
            this.address = Objects.requireNonNull(address);
            return this;
        }
        @CustomType.Setter
        public Builder autoLoadbalance(@Nullable Boolean autoLoadbalance) {
            this.autoLoadbalance = autoLoadbalance;
            return this;
        }
        @CustomType.Setter
        public Builder betweenBytesTimeout(@Nullable Integer betweenBytesTimeout) {
            this.betweenBytesTimeout = betweenBytesTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder connectTimeout(@Nullable Integer connectTimeout) {
            this.connectTimeout = connectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder errorThreshold(@Nullable Integer errorThreshold) {
            this.errorThreshold = errorThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder firstByteTimeout(@Nullable Integer firstByteTimeout) {
            this.firstByteTimeout = firstByteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder healthcheck(@Nullable String healthcheck) {
            this.healthcheck = healthcheck;
            return this;
        }
        @CustomType.Setter
        public Builder maxConn(@Nullable Integer maxConn) {
            this.maxConn = maxConn;
            return this;
        }
        @CustomType.Setter
        public Builder maxTlsVersion(@Nullable String maxTlsVersion) {
            this.maxTlsVersion = maxTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder minTlsVersion(@Nullable String minTlsVersion) {
            this.minTlsVersion = minTlsVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder overrideHost(@Nullable String overrideHost) {
            this.overrideHost = overrideHost;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder requestCondition(@Nullable String requestCondition) {
            this.requestCondition = requestCondition;
            return this;
        }
        @CustomType.Setter
        public Builder shield(@Nullable String shield) {
            this.shield = shield;
            return this;
        }
        @CustomType.Setter
        public Builder sslCaCert(@Nullable String sslCaCert) {
            this.sslCaCert = sslCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder sslCertHostname(@Nullable String sslCertHostname) {
            this.sslCertHostname = sslCertHostname;
            return this;
        }
        @CustomType.Setter
        public Builder sslCheckCert(@Nullable Boolean sslCheckCert) {
            this.sslCheckCert = sslCheckCert;
            return this;
        }
        @CustomType.Setter
        public Builder sslCiphers(@Nullable String sslCiphers) {
            this.sslCiphers = sslCiphers;
            return this;
        }
        @CustomType.Setter
        public Builder sslClientCert(@Nullable String sslClientCert) {
            this.sslClientCert = sslClientCert;
            return this;
        }
        @CustomType.Setter
        public Builder sslClientKey(@Nullable String sslClientKey) {
            this.sslClientKey = sslClientKey;
            return this;
        }
        @CustomType.Setter
        public Builder sslSniHostname(@Nullable String sslSniHostname) {
            this.sslSniHostname = sslSniHostname;
            return this;
        }
        @CustomType.Setter
        public Builder useSsl(@Nullable Boolean useSsl) {
            this.useSsl = useSsl;
            return this;
        }
        @CustomType.Setter
        public Builder weight(@Nullable Integer weight) {
            this.weight = weight;
            return this;
        }
        public ServiceVclBackend build() {
            final var o = new ServiceVclBackend();
            o.address = address;
            o.autoLoadbalance = autoLoadbalance;
            o.betweenBytesTimeout = betweenBytesTimeout;
            o.connectTimeout = connectTimeout;
            o.errorThreshold = errorThreshold;
            o.firstByteTimeout = firstByteTimeout;
            o.healthcheck = healthcheck;
            o.maxConn = maxConn;
            o.maxTlsVersion = maxTlsVersion;
            o.minTlsVersion = minTlsVersion;
            o.name = name;
            o.overrideHost = overrideHost;
            o.port = port;
            o.requestCondition = requestCondition;
            o.shield = shield;
            o.sslCaCert = sslCaCert;
            o.sslCertHostname = sslCertHostname;
            o.sslCheckCert = sslCheckCert;
            o.sslCiphers = sslCiphers;
            o.sslClientCert = sslClientCert;
            o.sslClientKey = sslClientKey;
            o.sslSniHostname = sslSniHostname;
            o.useSsl = useSsl;
            o.weight = weight;
            return o;
        }
    }
}
