// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.fastly.inputs.ServiceComputeBackendArgs;
import com.pulumi.fastly.inputs.ServiceComputeDictionaryArgs;
import com.pulumi.fastly.inputs.ServiceComputeDomainArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingBigqueryArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingBlobstorageArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingCloudfileArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingDatadogArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingDigitaloceanArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingElasticsearchArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingFtpArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingGcArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingGooglepubsubArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingHerokuArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingHoneycombArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingHttpArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingKafkaArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingKineseArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingLogentryArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingLogglyArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingLogshuttleArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingNewrelicArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingOpenstackArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingPapertrailArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingS3Args;
import com.pulumi.fastly.inputs.ServiceComputeLoggingScalyrArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingSftpArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingSplunkArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingSumologicArgs;
import com.pulumi.fastly.inputs.ServiceComputeLoggingSyslogArgs;
import com.pulumi.fastly.inputs.ServiceComputePackageArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceComputeState extends com.pulumi.resources.ResourceArgs {

    public static final ServiceComputeState Empty = new ServiceComputeState();

    /**
     * Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     * 
     */
    @Import(name="activate")
    private @Nullable Output<Boolean> activate;

    /**
     * @return Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     * 
     */
    public Optional<Output<Boolean>> activate() {
        return Optional.ofNullable(this.activate);
    }

    /**
     * The currently active version of your Fastly Service
     * 
     */
    @Import(name="activeVersion")
    private @Nullable Output<Integer> activeVersion;

    /**
     * @return The currently active version of your Fastly Service
     * 
     */
    public Optional<Output<Integer>> activeVersion() {
        return Optional.ofNullable(this.activeVersion);
    }

    @Import(name="backends")
    private @Nullable Output<List<ServiceComputeBackendArgs>> backends;

    public Optional<Output<List<ServiceComputeBackendArgs>>> backends() {
        return Optional.ofNullable(this.backends);
    }

    /**
     * The latest cloned version by the provider
     * 
     */
    @Import(name="clonedVersion")
    private @Nullable Output<Integer> clonedVersion;

    /**
     * @return The latest cloned version by the provider
     * 
     */
    public Optional<Output<Integer>> clonedVersion() {
        return Optional.ofNullable(this.clonedVersion);
    }

    /**
     * Description field for the service. Default `Managed by Terraform`
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return Description field for the service. Default `Managed by Terraform`
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    @Import(name="dictionaries")
    private @Nullable Output<List<ServiceComputeDictionaryArgs>> dictionaries;

    public Optional<Output<List<ServiceComputeDictionaryArgs>>> dictionaries() {
        return Optional.ofNullable(this.dictionaries);
    }

    /**
     * A set of Domain names to serve as entry points for your Service
     * 
     */
    @Import(name="domains")
    private @Nullable Output<List<ServiceComputeDomainArgs>> domains;

    /**
     * @return A set of Domain names to serve as entry points for your Service
     * 
     */
    public Optional<Output<List<ServiceComputeDomainArgs>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    @Import(name="loggingBigqueries")
    private @Nullable Output<List<ServiceComputeLoggingBigqueryArgs>> loggingBigqueries;

    public Optional<Output<List<ServiceComputeLoggingBigqueryArgs>>> loggingBigqueries() {
        return Optional.ofNullable(this.loggingBigqueries);
    }

    @Import(name="loggingBlobstorages")
    private @Nullable Output<List<ServiceComputeLoggingBlobstorageArgs>> loggingBlobstorages;

    public Optional<Output<List<ServiceComputeLoggingBlobstorageArgs>>> loggingBlobstorages() {
        return Optional.ofNullable(this.loggingBlobstorages);
    }

    @Import(name="loggingCloudfiles")
    private @Nullable Output<List<ServiceComputeLoggingCloudfileArgs>> loggingCloudfiles;

    public Optional<Output<List<ServiceComputeLoggingCloudfileArgs>>> loggingCloudfiles() {
        return Optional.ofNullable(this.loggingCloudfiles);
    }

    @Import(name="loggingDatadogs")
    private @Nullable Output<List<ServiceComputeLoggingDatadogArgs>> loggingDatadogs;

    public Optional<Output<List<ServiceComputeLoggingDatadogArgs>>> loggingDatadogs() {
        return Optional.ofNullable(this.loggingDatadogs);
    }

    @Import(name="loggingDigitaloceans")
    private @Nullable Output<List<ServiceComputeLoggingDigitaloceanArgs>> loggingDigitaloceans;

    public Optional<Output<List<ServiceComputeLoggingDigitaloceanArgs>>> loggingDigitaloceans() {
        return Optional.ofNullable(this.loggingDigitaloceans);
    }

    @Import(name="loggingElasticsearches")
    private @Nullable Output<List<ServiceComputeLoggingElasticsearchArgs>> loggingElasticsearches;

    public Optional<Output<List<ServiceComputeLoggingElasticsearchArgs>>> loggingElasticsearches() {
        return Optional.ofNullable(this.loggingElasticsearches);
    }

    @Import(name="loggingFtps")
    private @Nullable Output<List<ServiceComputeLoggingFtpArgs>> loggingFtps;

    public Optional<Output<List<ServiceComputeLoggingFtpArgs>>> loggingFtps() {
        return Optional.ofNullable(this.loggingFtps);
    }

    @Import(name="loggingGcs")
    private @Nullable Output<List<ServiceComputeLoggingGcArgs>> loggingGcs;

    public Optional<Output<List<ServiceComputeLoggingGcArgs>>> loggingGcs() {
        return Optional.ofNullable(this.loggingGcs);
    }

    @Import(name="loggingGooglepubsubs")
    private @Nullable Output<List<ServiceComputeLoggingGooglepubsubArgs>> loggingGooglepubsubs;

    public Optional<Output<List<ServiceComputeLoggingGooglepubsubArgs>>> loggingGooglepubsubs() {
        return Optional.ofNullable(this.loggingGooglepubsubs);
    }

    @Import(name="loggingHeroku")
    private @Nullable Output<List<ServiceComputeLoggingHerokuArgs>> loggingHeroku;

    public Optional<Output<List<ServiceComputeLoggingHerokuArgs>>> loggingHeroku() {
        return Optional.ofNullable(this.loggingHeroku);
    }

    @Import(name="loggingHoneycombs")
    private @Nullable Output<List<ServiceComputeLoggingHoneycombArgs>> loggingHoneycombs;

    public Optional<Output<List<ServiceComputeLoggingHoneycombArgs>>> loggingHoneycombs() {
        return Optional.ofNullable(this.loggingHoneycombs);
    }

    @Import(name="loggingHttps")
    private @Nullable Output<List<ServiceComputeLoggingHttpArgs>> loggingHttps;

    public Optional<Output<List<ServiceComputeLoggingHttpArgs>>> loggingHttps() {
        return Optional.ofNullable(this.loggingHttps);
    }

    @Import(name="loggingKafkas")
    private @Nullable Output<List<ServiceComputeLoggingKafkaArgs>> loggingKafkas;

    public Optional<Output<List<ServiceComputeLoggingKafkaArgs>>> loggingKafkas() {
        return Optional.ofNullable(this.loggingKafkas);
    }

    @Import(name="loggingKineses")
    private @Nullable Output<List<ServiceComputeLoggingKineseArgs>> loggingKineses;

    public Optional<Output<List<ServiceComputeLoggingKineseArgs>>> loggingKineses() {
        return Optional.ofNullable(this.loggingKineses);
    }

    @Import(name="loggingLogentries")
    private @Nullable Output<List<ServiceComputeLoggingLogentryArgs>> loggingLogentries;

    public Optional<Output<List<ServiceComputeLoggingLogentryArgs>>> loggingLogentries() {
        return Optional.ofNullable(this.loggingLogentries);
    }

    @Import(name="loggingLogglies")
    private @Nullable Output<List<ServiceComputeLoggingLogglyArgs>> loggingLogglies;

    public Optional<Output<List<ServiceComputeLoggingLogglyArgs>>> loggingLogglies() {
        return Optional.ofNullable(this.loggingLogglies);
    }

    @Import(name="loggingLogshuttles")
    private @Nullable Output<List<ServiceComputeLoggingLogshuttleArgs>> loggingLogshuttles;

    public Optional<Output<List<ServiceComputeLoggingLogshuttleArgs>>> loggingLogshuttles() {
        return Optional.ofNullable(this.loggingLogshuttles);
    }

    @Import(name="loggingNewrelics")
    private @Nullable Output<List<ServiceComputeLoggingNewrelicArgs>> loggingNewrelics;

    public Optional<Output<List<ServiceComputeLoggingNewrelicArgs>>> loggingNewrelics() {
        return Optional.ofNullable(this.loggingNewrelics);
    }

    @Import(name="loggingOpenstacks")
    private @Nullable Output<List<ServiceComputeLoggingOpenstackArgs>> loggingOpenstacks;

    public Optional<Output<List<ServiceComputeLoggingOpenstackArgs>>> loggingOpenstacks() {
        return Optional.ofNullable(this.loggingOpenstacks);
    }

    @Import(name="loggingPapertrails")
    private @Nullable Output<List<ServiceComputeLoggingPapertrailArgs>> loggingPapertrails;

    public Optional<Output<List<ServiceComputeLoggingPapertrailArgs>>> loggingPapertrails() {
        return Optional.ofNullable(this.loggingPapertrails);
    }

    @Import(name="loggingS3s")
    private @Nullable Output<List<ServiceComputeLoggingS3Args>> loggingS3s;

    public Optional<Output<List<ServiceComputeLoggingS3Args>>> loggingS3s() {
        return Optional.ofNullable(this.loggingS3s);
    }

    @Import(name="loggingScalyrs")
    private @Nullable Output<List<ServiceComputeLoggingScalyrArgs>> loggingScalyrs;

    public Optional<Output<List<ServiceComputeLoggingScalyrArgs>>> loggingScalyrs() {
        return Optional.ofNullable(this.loggingScalyrs);
    }

    @Import(name="loggingSftps")
    private @Nullable Output<List<ServiceComputeLoggingSftpArgs>> loggingSftps;

    public Optional<Output<List<ServiceComputeLoggingSftpArgs>>> loggingSftps() {
        return Optional.ofNullable(this.loggingSftps);
    }

    @Import(name="loggingSplunks")
    private @Nullable Output<List<ServiceComputeLoggingSplunkArgs>> loggingSplunks;

    public Optional<Output<List<ServiceComputeLoggingSplunkArgs>>> loggingSplunks() {
        return Optional.ofNullable(this.loggingSplunks);
    }

    @Import(name="loggingSumologics")
    private @Nullable Output<List<ServiceComputeLoggingSumologicArgs>> loggingSumologics;

    public Optional<Output<List<ServiceComputeLoggingSumologicArgs>>> loggingSumologics() {
        return Optional.ofNullable(this.loggingSumologics);
    }

    @Import(name="loggingSyslogs")
    private @Nullable Output<List<ServiceComputeLoggingSyslogArgs>> loggingSyslogs;

    public Optional<Output<List<ServiceComputeLoggingSyslogArgs>>> loggingSyslogs() {
        return Optional.ofNullable(this.loggingSyslogs);
    }

    /**
     * The unique name for the Service to create
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The unique name for the Service to create
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly&#39;s documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
     * 
     */
    @Import(name="package")
    private @Nullable Output<ServiceComputePackageArgs> package_;

    /**
     * @return The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly&#39;s documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
     * 
     */
    public Optional<Output<ServiceComputePackageArgs>> package_() {
        return Optional.ofNullable(this.package_);
    }

    /**
     * Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
     * deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
     * an active service will cause an error. Default `false`
     * 
     */
    @Import(name="reuse")
    private @Nullable Output<Boolean> reuse;

    /**
     * @return Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
     * deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
     * an active service will cause an error. Default `false`
     * 
     */
    public Optional<Output<Boolean>> reuse() {
        return Optional.ofNullable(this.reuse);
    }

    /**
     * Description field for the version
     * 
     */
    @Import(name="versionComment")
    private @Nullable Output<String> versionComment;

    /**
     * @return Description field for the version
     * 
     */
    public Optional<Output<String>> versionComment() {
        return Optional.ofNullable(this.versionComment);
    }

    private ServiceComputeState() {}

    private ServiceComputeState(ServiceComputeState $) {
        this.activate = $.activate;
        this.activeVersion = $.activeVersion;
        this.backends = $.backends;
        this.clonedVersion = $.clonedVersion;
        this.comment = $.comment;
        this.dictionaries = $.dictionaries;
        this.domains = $.domains;
        this.forceDestroy = $.forceDestroy;
        this.loggingBigqueries = $.loggingBigqueries;
        this.loggingBlobstorages = $.loggingBlobstorages;
        this.loggingCloudfiles = $.loggingCloudfiles;
        this.loggingDatadogs = $.loggingDatadogs;
        this.loggingDigitaloceans = $.loggingDigitaloceans;
        this.loggingElasticsearches = $.loggingElasticsearches;
        this.loggingFtps = $.loggingFtps;
        this.loggingGcs = $.loggingGcs;
        this.loggingGooglepubsubs = $.loggingGooglepubsubs;
        this.loggingHeroku = $.loggingHeroku;
        this.loggingHoneycombs = $.loggingHoneycombs;
        this.loggingHttps = $.loggingHttps;
        this.loggingKafkas = $.loggingKafkas;
        this.loggingKineses = $.loggingKineses;
        this.loggingLogentries = $.loggingLogentries;
        this.loggingLogglies = $.loggingLogglies;
        this.loggingLogshuttles = $.loggingLogshuttles;
        this.loggingNewrelics = $.loggingNewrelics;
        this.loggingOpenstacks = $.loggingOpenstacks;
        this.loggingPapertrails = $.loggingPapertrails;
        this.loggingS3s = $.loggingS3s;
        this.loggingScalyrs = $.loggingScalyrs;
        this.loggingSftps = $.loggingSftps;
        this.loggingSplunks = $.loggingSplunks;
        this.loggingSumologics = $.loggingSumologics;
        this.loggingSyslogs = $.loggingSyslogs;
        this.name = $.name;
        this.package_ = $.package_;
        this.reuse = $.reuse;
        this.versionComment = $.versionComment;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceComputeState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceComputeState $;

        public Builder() {
            $ = new ServiceComputeState();
        }

        public Builder(ServiceComputeState defaults) {
            $ = new ServiceComputeState(Objects.requireNonNull(defaults));
        }

        /**
         * @param activate Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
         * 
         * @return builder
         * 
         */
        public Builder activate(@Nullable Output<Boolean> activate) {
            $.activate = activate;
            return this;
        }

        /**
         * @param activate Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
         * 
         * @return builder
         * 
         */
        public Builder activate(Boolean activate) {
            return activate(Output.of(activate));
        }

        /**
         * @param activeVersion The currently active version of your Fastly Service
         * 
         * @return builder
         * 
         */
        public Builder activeVersion(@Nullable Output<Integer> activeVersion) {
            $.activeVersion = activeVersion;
            return this;
        }

        /**
         * @param activeVersion The currently active version of your Fastly Service
         * 
         * @return builder
         * 
         */
        public Builder activeVersion(Integer activeVersion) {
            return activeVersion(Output.of(activeVersion));
        }

        public Builder backends(@Nullable Output<List<ServiceComputeBackendArgs>> backends) {
            $.backends = backends;
            return this;
        }

        public Builder backends(List<ServiceComputeBackendArgs> backends) {
            return backends(Output.of(backends));
        }

        public Builder backends(ServiceComputeBackendArgs... backends) {
            return backends(List.of(backends));
        }

        /**
         * @param clonedVersion The latest cloned version by the provider
         * 
         * @return builder
         * 
         */
        public Builder clonedVersion(@Nullable Output<Integer> clonedVersion) {
            $.clonedVersion = clonedVersion;
            return this;
        }

        /**
         * @param clonedVersion The latest cloned version by the provider
         * 
         * @return builder
         * 
         */
        public Builder clonedVersion(Integer clonedVersion) {
            return clonedVersion(Output.of(clonedVersion));
        }

        /**
         * @param comment Description field for the service. Default `Managed by Terraform`
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment Description field for the service. Default `Managed by Terraform`
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        public Builder dictionaries(@Nullable Output<List<ServiceComputeDictionaryArgs>> dictionaries) {
            $.dictionaries = dictionaries;
            return this;
        }

        public Builder dictionaries(List<ServiceComputeDictionaryArgs> dictionaries) {
            return dictionaries(Output.of(dictionaries));
        }

        public Builder dictionaries(ServiceComputeDictionaryArgs... dictionaries) {
            return dictionaries(List.of(dictionaries));
        }

        /**
         * @param domains A set of Domain names to serve as entry points for your Service
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable Output<List<ServiceComputeDomainArgs>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains A set of Domain names to serve as entry points for your Service
         * 
         * @return builder
         * 
         */
        public Builder domains(List<ServiceComputeDomainArgs> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains A set of Domain names to serve as entry points for your Service
         * 
         * @return builder
         * 
         */
        public Builder domains(ServiceComputeDomainArgs... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param forceDestroy Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        public Builder loggingBigqueries(@Nullable Output<List<ServiceComputeLoggingBigqueryArgs>> loggingBigqueries) {
            $.loggingBigqueries = loggingBigqueries;
            return this;
        }

        public Builder loggingBigqueries(List<ServiceComputeLoggingBigqueryArgs> loggingBigqueries) {
            return loggingBigqueries(Output.of(loggingBigqueries));
        }

        public Builder loggingBigqueries(ServiceComputeLoggingBigqueryArgs... loggingBigqueries) {
            return loggingBigqueries(List.of(loggingBigqueries));
        }

        public Builder loggingBlobstorages(@Nullable Output<List<ServiceComputeLoggingBlobstorageArgs>> loggingBlobstorages) {
            $.loggingBlobstorages = loggingBlobstorages;
            return this;
        }

        public Builder loggingBlobstorages(List<ServiceComputeLoggingBlobstorageArgs> loggingBlobstorages) {
            return loggingBlobstorages(Output.of(loggingBlobstorages));
        }

        public Builder loggingBlobstorages(ServiceComputeLoggingBlobstorageArgs... loggingBlobstorages) {
            return loggingBlobstorages(List.of(loggingBlobstorages));
        }

        public Builder loggingCloudfiles(@Nullable Output<List<ServiceComputeLoggingCloudfileArgs>> loggingCloudfiles) {
            $.loggingCloudfiles = loggingCloudfiles;
            return this;
        }

        public Builder loggingCloudfiles(List<ServiceComputeLoggingCloudfileArgs> loggingCloudfiles) {
            return loggingCloudfiles(Output.of(loggingCloudfiles));
        }

        public Builder loggingCloudfiles(ServiceComputeLoggingCloudfileArgs... loggingCloudfiles) {
            return loggingCloudfiles(List.of(loggingCloudfiles));
        }

        public Builder loggingDatadogs(@Nullable Output<List<ServiceComputeLoggingDatadogArgs>> loggingDatadogs) {
            $.loggingDatadogs = loggingDatadogs;
            return this;
        }

        public Builder loggingDatadogs(List<ServiceComputeLoggingDatadogArgs> loggingDatadogs) {
            return loggingDatadogs(Output.of(loggingDatadogs));
        }

        public Builder loggingDatadogs(ServiceComputeLoggingDatadogArgs... loggingDatadogs) {
            return loggingDatadogs(List.of(loggingDatadogs));
        }

        public Builder loggingDigitaloceans(@Nullable Output<List<ServiceComputeLoggingDigitaloceanArgs>> loggingDigitaloceans) {
            $.loggingDigitaloceans = loggingDigitaloceans;
            return this;
        }

        public Builder loggingDigitaloceans(List<ServiceComputeLoggingDigitaloceanArgs> loggingDigitaloceans) {
            return loggingDigitaloceans(Output.of(loggingDigitaloceans));
        }

        public Builder loggingDigitaloceans(ServiceComputeLoggingDigitaloceanArgs... loggingDigitaloceans) {
            return loggingDigitaloceans(List.of(loggingDigitaloceans));
        }

        public Builder loggingElasticsearches(@Nullable Output<List<ServiceComputeLoggingElasticsearchArgs>> loggingElasticsearches) {
            $.loggingElasticsearches = loggingElasticsearches;
            return this;
        }

        public Builder loggingElasticsearches(List<ServiceComputeLoggingElasticsearchArgs> loggingElasticsearches) {
            return loggingElasticsearches(Output.of(loggingElasticsearches));
        }

        public Builder loggingElasticsearches(ServiceComputeLoggingElasticsearchArgs... loggingElasticsearches) {
            return loggingElasticsearches(List.of(loggingElasticsearches));
        }

        public Builder loggingFtps(@Nullable Output<List<ServiceComputeLoggingFtpArgs>> loggingFtps) {
            $.loggingFtps = loggingFtps;
            return this;
        }

        public Builder loggingFtps(List<ServiceComputeLoggingFtpArgs> loggingFtps) {
            return loggingFtps(Output.of(loggingFtps));
        }

        public Builder loggingFtps(ServiceComputeLoggingFtpArgs... loggingFtps) {
            return loggingFtps(List.of(loggingFtps));
        }

        public Builder loggingGcs(@Nullable Output<List<ServiceComputeLoggingGcArgs>> loggingGcs) {
            $.loggingGcs = loggingGcs;
            return this;
        }

        public Builder loggingGcs(List<ServiceComputeLoggingGcArgs> loggingGcs) {
            return loggingGcs(Output.of(loggingGcs));
        }

        public Builder loggingGcs(ServiceComputeLoggingGcArgs... loggingGcs) {
            return loggingGcs(List.of(loggingGcs));
        }

        public Builder loggingGooglepubsubs(@Nullable Output<List<ServiceComputeLoggingGooglepubsubArgs>> loggingGooglepubsubs) {
            $.loggingGooglepubsubs = loggingGooglepubsubs;
            return this;
        }

        public Builder loggingGooglepubsubs(List<ServiceComputeLoggingGooglepubsubArgs> loggingGooglepubsubs) {
            return loggingGooglepubsubs(Output.of(loggingGooglepubsubs));
        }

        public Builder loggingGooglepubsubs(ServiceComputeLoggingGooglepubsubArgs... loggingGooglepubsubs) {
            return loggingGooglepubsubs(List.of(loggingGooglepubsubs));
        }

        public Builder loggingHeroku(@Nullable Output<List<ServiceComputeLoggingHerokuArgs>> loggingHeroku) {
            $.loggingHeroku = loggingHeroku;
            return this;
        }

        public Builder loggingHeroku(List<ServiceComputeLoggingHerokuArgs> loggingHeroku) {
            return loggingHeroku(Output.of(loggingHeroku));
        }

        public Builder loggingHeroku(ServiceComputeLoggingHerokuArgs... loggingHeroku) {
            return loggingHeroku(List.of(loggingHeroku));
        }

        public Builder loggingHoneycombs(@Nullable Output<List<ServiceComputeLoggingHoneycombArgs>> loggingHoneycombs) {
            $.loggingHoneycombs = loggingHoneycombs;
            return this;
        }

        public Builder loggingHoneycombs(List<ServiceComputeLoggingHoneycombArgs> loggingHoneycombs) {
            return loggingHoneycombs(Output.of(loggingHoneycombs));
        }

        public Builder loggingHoneycombs(ServiceComputeLoggingHoneycombArgs... loggingHoneycombs) {
            return loggingHoneycombs(List.of(loggingHoneycombs));
        }

        public Builder loggingHttps(@Nullable Output<List<ServiceComputeLoggingHttpArgs>> loggingHttps) {
            $.loggingHttps = loggingHttps;
            return this;
        }

        public Builder loggingHttps(List<ServiceComputeLoggingHttpArgs> loggingHttps) {
            return loggingHttps(Output.of(loggingHttps));
        }

        public Builder loggingHttps(ServiceComputeLoggingHttpArgs... loggingHttps) {
            return loggingHttps(List.of(loggingHttps));
        }

        public Builder loggingKafkas(@Nullable Output<List<ServiceComputeLoggingKafkaArgs>> loggingKafkas) {
            $.loggingKafkas = loggingKafkas;
            return this;
        }

        public Builder loggingKafkas(List<ServiceComputeLoggingKafkaArgs> loggingKafkas) {
            return loggingKafkas(Output.of(loggingKafkas));
        }

        public Builder loggingKafkas(ServiceComputeLoggingKafkaArgs... loggingKafkas) {
            return loggingKafkas(List.of(loggingKafkas));
        }

        public Builder loggingKineses(@Nullable Output<List<ServiceComputeLoggingKineseArgs>> loggingKineses) {
            $.loggingKineses = loggingKineses;
            return this;
        }

        public Builder loggingKineses(List<ServiceComputeLoggingKineseArgs> loggingKineses) {
            return loggingKineses(Output.of(loggingKineses));
        }

        public Builder loggingKineses(ServiceComputeLoggingKineseArgs... loggingKineses) {
            return loggingKineses(List.of(loggingKineses));
        }

        public Builder loggingLogentries(@Nullable Output<List<ServiceComputeLoggingLogentryArgs>> loggingLogentries) {
            $.loggingLogentries = loggingLogentries;
            return this;
        }

        public Builder loggingLogentries(List<ServiceComputeLoggingLogentryArgs> loggingLogentries) {
            return loggingLogentries(Output.of(loggingLogentries));
        }

        public Builder loggingLogentries(ServiceComputeLoggingLogentryArgs... loggingLogentries) {
            return loggingLogentries(List.of(loggingLogentries));
        }

        public Builder loggingLogglies(@Nullable Output<List<ServiceComputeLoggingLogglyArgs>> loggingLogglies) {
            $.loggingLogglies = loggingLogglies;
            return this;
        }

        public Builder loggingLogglies(List<ServiceComputeLoggingLogglyArgs> loggingLogglies) {
            return loggingLogglies(Output.of(loggingLogglies));
        }

        public Builder loggingLogglies(ServiceComputeLoggingLogglyArgs... loggingLogglies) {
            return loggingLogglies(List.of(loggingLogglies));
        }

        public Builder loggingLogshuttles(@Nullable Output<List<ServiceComputeLoggingLogshuttleArgs>> loggingLogshuttles) {
            $.loggingLogshuttles = loggingLogshuttles;
            return this;
        }

        public Builder loggingLogshuttles(List<ServiceComputeLoggingLogshuttleArgs> loggingLogshuttles) {
            return loggingLogshuttles(Output.of(loggingLogshuttles));
        }

        public Builder loggingLogshuttles(ServiceComputeLoggingLogshuttleArgs... loggingLogshuttles) {
            return loggingLogshuttles(List.of(loggingLogshuttles));
        }

        public Builder loggingNewrelics(@Nullable Output<List<ServiceComputeLoggingNewrelicArgs>> loggingNewrelics) {
            $.loggingNewrelics = loggingNewrelics;
            return this;
        }

        public Builder loggingNewrelics(List<ServiceComputeLoggingNewrelicArgs> loggingNewrelics) {
            return loggingNewrelics(Output.of(loggingNewrelics));
        }

        public Builder loggingNewrelics(ServiceComputeLoggingNewrelicArgs... loggingNewrelics) {
            return loggingNewrelics(List.of(loggingNewrelics));
        }

        public Builder loggingOpenstacks(@Nullable Output<List<ServiceComputeLoggingOpenstackArgs>> loggingOpenstacks) {
            $.loggingOpenstacks = loggingOpenstacks;
            return this;
        }

        public Builder loggingOpenstacks(List<ServiceComputeLoggingOpenstackArgs> loggingOpenstacks) {
            return loggingOpenstacks(Output.of(loggingOpenstacks));
        }

        public Builder loggingOpenstacks(ServiceComputeLoggingOpenstackArgs... loggingOpenstacks) {
            return loggingOpenstacks(List.of(loggingOpenstacks));
        }

        public Builder loggingPapertrails(@Nullable Output<List<ServiceComputeLoggingPapertrailArgs>> loggingPapertrails) {
            $.loggingPapertrails = loggingPapertrails;
            return this;
        }

        public Builder loggingPapertrails(List<ServiceComputeLoggingPapertrailArgs> loggingPapertrails) {
            return loggingPapertrails(Output.of(loggingPapertrails));
        }

        public Builder loggingPapertrails(ServiceComputeLoggingPapertrailArgs... loggingPapertrails) {
            return loggingPapertrails(List.of(loggingPapertrails));
        }

        public Builder loggingS3s(@Nullable Output<List<ServiceComputeLoggingS3Args>> loggingS3s) {
            $.loggingS3s = loggingS3s;
            return this;
        }

        public Builder loggingS3s(List<ServiceComputeLoggingS3Args> loggingS3s) {
            return loggingS3s(Output.of(loggingS3s));
        }

        public Builder loggingS3s(ServiceComputeLoggingS3Args... loggingS3s) {
            return loggingS3s(List.of(loggingS3s));
        }

        public Builder loggingScalyrs(@Nullable Output<List<ServiceComputeLoggingScalyrArgs>> loggingScalyrs) {
            $.loggingScalyrs = loggingScalyrs;
            return this;
        }

        public Builder loggingScalyrs(List<ServiceComputeLoggingScalyrArgs> loggingScalyrs) {
            return loggingScalyrs(Output.of(loggingScalyrs));
        }

        public Builder loggingScalyrs(ServiceComputeLoggingScalyrArgs... loggingScalyrs) {
            return loggingScalyrs(List.of(loggingScalyrs));
        }

        public Builder loggingSftps(@Nullable Output<List<ServiceComputeLoggingSftpArgs>> loggingSftps) {
            $.loggingSftps = loggingSftps;
            return this;
        }

        public Builder loggingSftps(List<ServiceComputeLoggingSftpArgs> loggingSftps) {
            return loggingSftps(Output.of(loggingSftps));
        }

        public Builder loggingSftps(ServiceComputeLoggingSftpArgs... loggingSftps) {
            return loggingSftps(List.of(loggingSftps));
        }

        public Builder loggingSplunks(@Nullable Output<List<ServiceComputeLoggingSplunkArgs>> loggingSplunks) {
            $.loggingSplunks = loggingSplunks;
            return this;
        }

        public Builder loggingSplunks(List<ServiceComputeLoggingSplunkArgs> loggingSplunks) {
            return loggingSplunks(Output.of(loggingSplunks));
        }

        public Builder loggingSplunks(ServiceComputeLoggingSplunkArgs... loggingSplunks) {
            return loggingSplunks(List.of(loggingSplunks));
        }

        public Builder loggingSumologics(@Nullable Output<List<ServiceComputeLoggingSumologicArgs>> loggingSumologics) {
            $.loggingSumologics = loggingSumologics;
            return this;
        }

        public Builder loggingSumologics(List<ServiceComputeLoggingSumologicArgs> loggingSumologics) {
            return loggingSumologics(Output.of(loggingSumologics));
        }

        public Builder loggingSumologics(ServiceComputeLoggingSumologicArgs... loggingSumologics) {
            return loggingSumologics(List.of(loggingSumologics));
        }

        public Builder loggingSyslogs(@Nullable Output<List<ServiceComputeLoggingSyslogArgs>> loggingSyslogs) {
            $.loggingSyslogs = loggingSyslogs;
            return this;
        }

        public Builder loggingSyslogs(List<ServiceComputeLoggingSyslogArgs> loggingSyslogs) {
            return loggingSyslogs(Output.of(loggingSyslogs));
        }

        public Builder loggingSyslogs(ServiceComputeLoggingSyslogArgs... loggingSyslogs) {
            return loggingSyslogs(List.of(loggingSyslogs));
        }

        /**
         * @param name The unique name for the Service to create
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name for the Service to create
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param package_ The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly&#39;s documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
         * 
         * @return builder
         * 
         */
        public Builder package_(@Nullable Output<ServiceComputePackageArgs> package_) {
            $.package_ = package_;
            return this;
        }

        /**
         * @param package_ The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly&#39;s documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
         * 
         * @return builder
         * 
         */
        public Builder package_(ServiceComputePackageArgs package_) {
            return package_(Output.of(package_));
        }

        /**
         * @param reuse Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
         * deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
         * an active service will cause an error. Default `false`
         * 
         * @return builder
         * 
         */
        public Builder reuse(@Nullable Output<Boolean> reuse) {
            $.reuse = reuse;
            return this;
        }

        /**
         * @param reuse Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
         * deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
         * an active service will cause an error. Default `false`
         * 
         * @return builder
         * 
         */
        public Builder reuse(Boolean reuse) {
            return reuse(Output.of(reuse));
        }

        /**
         * @param versionComment Description field for the version
         * 
         * @return builder
         * 
         */
        public Builder versionComment(@Nullable Output<String> versionComment) {
            $.versionComment = versionComment;
            return this;
        }

        /**
         * @param versionComment Description field for the version
         * 
         * @return builder
         * 
         */
        public Builder versionComment(String versionComment) {
            return versionComment(Output.of(versionComment));
        }

        public ServiceComputeState build() {
            return $;
        }
    }

}
