// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclHeaderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclHeaderArgs Empty = new ServiceVclHeaderArgs();

    /**
     * The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regex_repeat`
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regex_repeat`
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
     * 
     */
    @Import(name="cacheCondition")
    private @Nullable Output<String> cacheCondition;

    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
     * 
     */
    public Optional<Output<String>> cacheCondition() {
        return Optional.ofNullable(this.cacheCondition);
    }

    /**
     * The name of the header that is going to be affected by the Action
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return The name of the header that is going to be affected by the Action
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * Don&#39;t add the header if it is already. (Only applies to `set` action.). Default `false`
     * 
     */
    @Import(name="ignoreIfSet")
    private @Nullable Output<Boolean> ignoreIfSet;

    /**
     * @return Don&#39;t add the header if it is already. (Only applies to `set` action.). Default `false`
     * 
     */
    public Optional<Output<Boolean>> ignoreIfSet() {
        return Optional.ofNullable(this.ignoreIfSet);
    }

    /**
     * Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Lower priorities execute first. Default: `100`
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return Lower priorities execute first. Default: `100`
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * Regular expression to use (Only applies to `regex` and `regex_repeat` actions.)
     * 
     */
    @Import(name="regex")
    private @Nullable Output<String> regex;

    /**
     * @return Regular expression to use (Only applies to `regex` and `regex_repeat` actions.)
     * 
     */
    public Optional<Output<String>> regex() {
        return Optional.ofNullable(this.regex);
    }

    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
     * 
     */
    @Import(name="requestCondition")
    private @Nullable Output<String> requestCondition;

    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
     * 
     */
    public Optional<Output<String>> requestCondition() {
        return Optional.ofNullable(this.requestCondition);
    }

    /**
     * Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    @Import(name="responseCondition")
    private @Nullable Output<String> responseCondition;

    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    public Optional<Output<String>> responseCondition() {
        return Optional.ofNullable(this.responseCondition);
    }

    /**
     * Variable to be used as a source for the header content (Does not apply to `delete` action.)
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return Variable to be used as a source for the header content (Does not apply to `delete` action.)
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Value to substitute in place of regular expression. (Only applies to `regex` and `regex_repeat`.)
     * 
     */
    @Import(name="substitution")
    private @Nullable Output<String> substitution;

    /**
     * @return Value to substitute in place of regular expression. (Only applies to `regex` and `regex_repeat`.)
     * 
     */
    public Optional<Output<String>> substitution() {
        return Optional.ofNullable(this.substitution);
    }

    /**
     * The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ServiceVclHeaderArgs() {}

    private ServiceVclHeaderArgs(ServiceVclHeaderArgs $) {
        this.action = $.action;
        this.cacheCondition = $.cacheCondition;
        this.destination = $.destination;
        this.ignoreIfSet = $.ignoreIfSet;
        this.name = $.name;
        this.priority = $.priority;
        this.regex = $.regex;
        this.requestCondition = $.requestCondition;
        this.responseCondition = $.responseCondition;
        this.source = $.source;
        this.substitution = $.substitution;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclHeaderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclHeaderArgs $;

        public Builder() {
            $ = new ServiceVclHeaderArgs();
        }

        public Builder(ServiceVclHeaderArgs defaults) {
            $ = new ServiceVclHeaderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regex_repeat`
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regex_repeat`
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param cacheCondition Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
         * 
         * @return builder
         * 
         */
        public Builder cacheCondition(@Nullable Output<String> cacheCondition) {
            $.cacheCondition = cacheCondition;
            return this;
        }

        /**
         * @param cacheCondition Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
         * 
         * @return builder
         * 
         */
        public Builder cacheCondition(String cacheCondition) {
            return cacheCondition(Output.of(cacheCondition));
        }

        /**
         * @param destination The name of the header that is going to be affected by the Action
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The name of the header that is going to be affected by the Action
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param ignoreIfSet Don&#39;t add the header if it is already. (Only applies to `set` action.). Default `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreIfSet(@Nullable Output<Boolean> ignoreIfSet) {
            $.ignoreIfSet = ignoreIfSet;
            return this;
        }

        /**
         * @param ignoreIfSet Don&#39;t add the header if it is already. (Only applies to `set` action.). Default `false`
         * 
         * @return builder
         * 
         */
        public Builder ignoreIfSet(Boolean ignoreIfSet) {
            return ignoreIfSet(Output.of(ignoreIfSet));
        }

        /**
         * @param name Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param priority Lower priorities execute first. Default: `100`
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority Lower priorities execute first. Default: `100`
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param regex Regular expression to use (Only applies to `regex` and `regex_repeat` actions.)
         * 
         * @return builder
         * 
         */
        public Builder regex(@Nullable Output<String> regex) {
            $.regex = regex;
            return this;
        }

        /**
         * @param regex Regular expression to use (Only applies to `regex` and `regex_repeat` actions.)
         * 
         * @return builder
         * 
         */
        public Builder regex(String regex) {
            return regex(Output.of(regex));
        }

        /**
         * @param requestCondition Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
         * 
         * @return builder
         * 
         */
        public Builder requestCondition(@Nullable Output<String> requestCondition) {
            $.requestCondition = requestCondition;
            return this;
        }

        /**
         * @param requestCondition Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
         * 
         * @return builder
         * 
         */
        public Builder requestCondition(String requestCondition) {
            return requestCondition(Output.of(requestCondition));
        }

        /**
         * @param responseCondition Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
         * 
         * @return builder
         * 
         */
        public Builder responseCondition(@Nullable Output<String> responseCondition) {
            $.responseCondition = responseCondition;
            return this;
        }

        /**
         * @param responseCondition Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
         * 
         * @return builder
         * 
         */
        public Builder responseCondition(String responseCondition) {
            return responseCondition(Output.of(responseCondition));
        }

        /**
         * @param source Variable to be used as a source for the header content (Does not apply to `delete` action.)
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source Variable to be used as a source for the header content (Does not apply to `delete` action.)
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param substitution Value to substitute in place of regular expression. (Only applies to `regex` and `regex_repeat`.)
         * 
         * @return builder
         * 
         */
        public Builder substitution(@Nullable Output<String> substitution) {
            $.substitution = substitution;
            return this;
        }

        /**
         * @param substitution Value to substitute in place of regular expression. (Only applies to `regex` and `regex_repeat`.)
         * 
         * @return builder
         * 
         */
        public Builder substitution(String substitution) {
            return substitution(Output.of(substitution));
        }

        /**
         * @param type The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ServiceVclHeaderArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
