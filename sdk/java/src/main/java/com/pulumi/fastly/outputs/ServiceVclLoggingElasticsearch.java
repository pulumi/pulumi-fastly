// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclLoggingElasticsearch {
    /**
     * @return Apache-style string or VCL variables to use for log formatting.
     * 
     */
    private @Nullable String format;
    /**
     * @return The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     * 
     */
    private @Nullable Integer formatVersion;
    /**
     * @return The name of the Elasticsearch index to send documents (logs) to
     * 
     */
    private String index;
    /**
     * @return The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return BasicAuth password for Elasticsearch
     * 
     */
    private @Nullable String password;
    /**
     * @return The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
     * 
     */
    private @Nullable String pipeline;
    /**
     * @return Where in the generated VCL the logging call should be placed (ignored).
     * 
     */
    private @Nullable String placement;
    /**
     * @return The maximum number of logs sent in one request. Defaults to `0` for unbounded
     * 
     */
    private @Nullable Integer requestMaxBytes;
    /**
     * @return The maximum number of bytes sent in one request. Defaults to `0` for unbounded
     * 
     */
    private @Nullable Integer requestMaxEntries;
    /**
     * @return The name of the condition to apply
     * 
     */
    private @Nullable String responseCondition;
    /**
     * @return A secure certificate to authenticate the server with. Must be in PEM format
     * 
     */
    private @Nullable String tlsCaCert;
    /**
     * @return The client certificate used to make authenticated requests. Must be in PEM format
     * 
     */
    private @Nullable String tlsClientCert;
    /**
     * @return The client private key used to make authenticated requests. Must be in PEM format
     * 
     */
    private @Nullable String tlsClientKey;
    /**
     * @return The hostname used to verify the server&#39;s certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
     * 
     */
    private @Nullable String tlsHostname;
    /**
     * @return The Elasticsearch URL to stream logs to
     * 
     */
    private String url;
    /**
     * @return BasicAuth username for Elasticsearch
     * 
     */
    private @Nullable String user;

    private ServiceVclLoggingElasticsearch() {}
    /**
     * @return Apache-style string or VCL variables to use for log formatting.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
     * 
     */
    public Optional<Integer> formatVersion() {
        return Optional.ofNullable(this.formatVersion);
    }
    /**
     * @return The name of the Elasticsearch index to send documents (logs) to
     * 
     */
    public String index() {
        return this.index;
    }
    /**
     * @return The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return BasicAuth password for Elasticsearch
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
     * 
     */
    public Optional<String> pipeline() {
        return Optional.ofNullable(this.pipeline);
    }
    /**
     * @return Where in the generated VCL the logging call should be placed (ignored).
     * 
     */
    public Optional<String> placement() {
        return Optional.ofNullable(this.placement);
    }
    /**
     * @return The maximum number of logs sent in one request. Defaults to `0` for unbounded
     * 
     */
    public Optional<Integer> requestMaxBytes() {
        return Optional.ofNullable(this.requestMaxBytes);
    }
    /**
     * @return The maximum number of bytes sent in one request. Defaults to `0` for unbounded
     * 
     */
    public Optional<Integer> requestMaxEntries() {
        return Optional.ofNullable(this.requestMaxEntries);
    }
    /**
     * @return The name of the condition to apply
     * 
     */
    public Optional<String> responseCondition() {
        return Optional.ofNullable(this.responseCondition);
    }
    /**
     * @return A secure certificate to authenticate the server with. Must be in PEM format
     * 
     */
    public Optional<String> tlsCaCert() {
        return Optional.ofNullable(this.tlsCaCert);
    }
    /**
     * @return The client certificate used to make authenticated requests. Must be in PEM format
     * 
     */
    public Optional<String> tlsClientCert() {
        return Optional.ofNullable(this.tlsClientCert);
    }
    /**
     * @return The client private key used to make authenticated requests. Must be in PEM format
     * 
     */
    public Optional<String> tlsClientKey() {
        return Optional.ofNullable(this.tlsClientKey);
    }
    /**
     * @return The hostname used to verify the server&#39;s certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
     * 
     */
    public Optional<String> tlsHostname() {
        return Optional.ofNullable(this.tlsHostname);
    }
    /**
     * @return The Elasticsearch URL to stream logs to
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return BasicAuth username for Elasticsearch
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclLoggingElasticsearch defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String format;
        private @Nullable Integer formatVersion;
        private String index;
        private String name;
        private @Nullable String password;
        private @Nullable String pipeline;
        private @Nullable String placement;
        private @Nullable Integer requestMaxBytes;
        private @Nullable Integer requestMaxEntries;
        private @Nullable String responseCondition;
        private @Nullable String tlsCaCert;
        private @Nullable String tlsClientCert;
        private @Nullable String tlsClientKey;
        private @Nullable String tlsHostname;
        private String url;
        private @Nullable String user;
        public Builder() {}
        public Builder(ServiceVclLoggingElasticsearch defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.format = defaults.format;
    	      this.formatVersion = defaults.formatVersion;
    	      this.index = defaults.index;
    	      this.name = defaults.name;
    	      this.password = defaults.password;
    	      this.pipeline = defaults.pipeline;
    	      this.placement = defaults.placement;
    	      this.requestMaxBytes = defaults.requestMaxBytes;
    	      this.requestMaxEntries = defaults.requestMaxEntries;
    	      this.responseCondition = defaults.responseCondition;
    	      this.tlsCaCert = defaults.tlsCaCert;
    	      this.tlsClientCert = defaults.tlsClientCert;
    	      this.tlsClientKey = defaults.tlsClientKey;
    	      this.tlsHostname = defaults.tlsHostname;
    	      this.url = defaults.url;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder formatVersion(@Nullable Integer formatVersion) {

            this.formatVersion = formatVersion;
            return this;
        }
        @CustomType.Setter
        public Builder index(String index) {
            if (index == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingElasticsearch", "index");
            }
            this.index = index;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingElasticsearch", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder pipeline(@Nullable String pipeline) {

            this.pipeline = pipeline;
            return this;
        }
        @CustomType.Setter
        public Builder placement(@Nullable String placement) {

            this.placement = placement;
            return this;
        }
        @CustomType.Setter
        public Builder requestMaxBytes(@Nullable Integer requestMaxBytes) {

            this.requestMaxBytes = requestMaxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder requestMaxEntries(@Nullable Integer requestMaxEntries) {

            this.requestMaxEntries = requestMaxEntries;
            return this;
        }
        @CustomType.Setter
        public Builder responseCondition(@Nullable String responseCondition) {

            this.responseCondition = responseCondition;
            return this;
        }
        @CustomType.Setter
        public Builder tlsCaCert(@Nullable String tlsCaCert) {

            this.tlsCaCert = tlsCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCert(@Nullable String tlsClientCert) {

            this.tlsClientCert = tlsClientCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientKey(@Nullable String tlsClientKey) {

            this.tlsClientKey = tlsClientKey;
            return this;
        }
        @CustomType.Setter
        public Builder tlsHostname(@Nullable String tlsHostname) {

            this.tlsHostname = tlsHostname;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("ServiceVclLoggingElasticsearch", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {

            this.user = user;
            return this;
        }
        public ServiceVclLoggingElasticsearch build() {
            final var _resultValue = new ServiceVclLoggingElasticsearch();
            _resultValue.format = format;
            _resultValue.formatVersion = formatVersion;
            _resultValue.index = index;
            _resultValue.name = name;
            _resultValue.password = password;
            _resultValue.pipeline = pipeline;
            _resultValue.placement = placement;
            _resultValue.requestMaxBytes = requestMaxBytes;
            _resultValue.requestMaxEntries = requestMaxEntries;
            _resultValue.responseCondition = responseCondition;
            _resultValue.tlsCaCert = tlsCaCert;
            _resultValue.tlsClientCert = tlsClientCert;
            _resultValue.tlsClientKey = tlsClientKey;
            _resultValue.tlsHostname = tlsHostname;
            _resultValue.url = url;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
