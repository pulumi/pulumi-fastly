// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclHeader {
    /**
     * @return The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regex_repeat`
     * 
     */
    private String action;
    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
     * 
     */
    private @Nullable String cacheCondition;
    /**
     * @return The name of the header that is going to be affected by the Action
     * 
     */
    private String destination;
    /**
     * @return Don&#39;t add the header if it is already. (Only applies to `set` action.). Default `false`
     * 
     */
    private @Nullable Boolean ignoreIfSet;
    /**
     * @return Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return Lower priorities execute first. Default: `100`
     * 
     */
    private @Nullable Integer priority;
    /**
     * @return Regular expression to use (Only applies to `regex` and `regex_repeat` actions.)
     * 
     */
    private @Nullable String regex;
    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
     * 
     */
    private @Nullable String requestCondition;
    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    private @Nullable String responseCondition;
    /**
     * @return Variable to be used as a source for the header content (Does not apply to `delete` action.)
     * 
     */
    private @Nullable String source;
    /**
     * @return Value to substitute in place of regular expression. (Only applies to `regex` and `regex_repeat`.)
     * 
     */
    private @Nullable String substitution;
    /**
     * @return The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
     * 
     */
    private String type;

    private ServiceVclHeader() {}
    /**
     * @return The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regex_repeat`
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
     * 
     */
    public Optional<String> cacheCondition() {
        return Optional.ofNullable(this.cacheCondition);
    }
    /**
     * @return The name of the header that is going to be affected by the Action
     * 
     */
    public String destination() {
        return this.destination;
    }
    /**
     * @return Don&#39;t add the header if it is already. (Only applies to `set` action.). Default `false`
     * 
     */
    public Optional<Boolean> ignoreIfSet() {
        return Optional.ofNullable(this.ignoreIfSet);
    }
    /**
     * @return Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Lower priorities execute first. Default: `100`
     * 
     */
    public Optional<Integer> priority() {
        return Optional.ofNullable(this.priority);
    }
    /**
     * @return Regular expression to use (Only applies to `regex` and `regex_repeat` actions.)
     * 
     */
    public Optional<String> regex() {
        return Optional.ofNullable(this.regex);
    }
    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
     * 
     */
    public Optional<String> requestCondition() {
        return Optional.ofNullable(this.requestCondition);
    }
    /**
     * @return Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    public Optional<String> responseCondition() {
        return Optional.ofNullable(this.responseCondition);
    }
    /**
     * @return Variable to be used as a source for the header content (Does not apply to `delete` action.)
     * 
     */
    public Optional<String> source() {
        return Optional.ofNullable(this.source);
    }
    /**
     * @return Value to substitute in place of regular expression. (Only applies to `regex` and `regex_repeat`.)
     * 
     */
    public Optional<String> substitution() {
        return Optional.ofNullable(this.substitution);
    }
    /**
     * @return The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclHeader defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private @Nullable String cacheCondition;
        private String destination;
        private @Nullable Boolean ignoreIfSet;
        private String name;
        private @Nullable Integer priority;
        private @Nullable String regex;
        private @Nullable String requestCondition;
        private @Nullable String responseCondition;
        private @Nullable String source;
        private @Nullable String substitution;
        private String type;
        public Builder() {}
        public Builder(ServiceVclHeader defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.cacheCondition = defaults.cacheCondition;
    	      this.destination = defaults.destination;
    	      this.ignoreIfSet = defaults.ignoreIfSet;
    	      this.name = defaults.name;
    	      this.priority = defaults.priority;
    	      this.regex = defaults.regex;
    	      this.requestCondition = defaults.requestCondition;
    	      this.responseCondition = defaults.responseCondition;
    	      this.source = defaults.source;
    	      this.substitution = defaults.substitution;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder action(String action) {
            this.action = Objects.requireNonNull(action);
            return this;
        }
        @CustomType.Setter
        public Builder cacheCondition(@Nullable String cacheCondition) {
            this.cacheCondition = cacheCondition;
            return this;
        }
        @CustomType.Setter
        public Builder destination(String destination) {
            this.destination = Objects.requireNonNull(destination);
            return this;
        }
        @CustomType.Setter
        public Builder ignoreIfSet(@Nullable Boolean ignoreIfSet) {
            this.ignoreIfSet = ignoreIfSet;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder priority(@Nullable Integer priority) {
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder regex(@Nullable String regex) {
            this.regex = regex;
            return this;
        }
        @CustomType.Setter
        public Builder requestCondition(@Nullable String requestCondition) {
            this.requestCondition = requestCondition;
            return this;
        }
        @CustomType.Setter
        public Builder responseCondition(@Nullable String responseCondition) {
            this.responseCondition = responseCondition;
            return this;
        }
        @CustomType.Setter
        public Builder source(@Nullable String source) {
            this.source = source;
            return this;
        }
        @CustomType.Setter
        public Builder substitution(@Nullable String substitution) {
            this.substitution = substitution;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public ServiceVclHeader build() {
            final var _resultValue = new ServiceVclHeader();
            _resultValue.action = action;
            _resultValue.cacheCondition = cacheCondition;
            _resultValue.destination = destination;
            _resultValue.ignoreIfSet = ignoreIfSet;
            _resultValue.name = name;
            _resultValue.priority = priority;
            _resultValue.regex = regex;
            _resultValue.requestCondition = requestCondition;
            _resultValue.responseCondition = responseCondition;
            _resultValue.source = source;
            _resultValue.substitution = substitution;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
