// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsSubscriptionArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsSubscriptionArgs Empty = new TlsSubscriptionArgs();

    /**
     * The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt` or `globalsign`.
     * 
     */
    @Import(name="certificateAuthority", required=true)
    private Output<String> certificateAuthority;

    /**
     * @return The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt` or `globalsign`.
     * 
     */
    public Output<String> certificateAuthority() {
        return this.certificateAuthority;
    }

    /**
     * The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
     * 
     */
    @Import(name="commonName")
    private @Nullable Output<String> commonName;

    /**
     * @return The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
     * 
     */
    public Optional<Output<String>> commonName() {
        return Optional.ofNullable(this.commonName);
    }

    /**
     * The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
     * 
     */
    @Import(name="configurationId")
    private @Nullable Output<String> configurationId;

    /**
     * @return The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
     * 
     */
    public Optional<Output<String>> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * List of domains on which to enable TLS.
     * 
     */
    @Import(name="domains", required=true)
    private Output<List<String>> domains;

    /**
     * @return List of domains on which to enable TLS.
     * 
     */
    public Output<List<String>> domains() {
        return this.domains;
    }

    /**
     * Always delete subscription, even when active domains are present. Defaults to false.
     * 
     * !&gt; **Warning:** by default, the Fastly API protects you from disabling production traffic by preventing updating or deleting subscriptions with active domains. The use of `force_update` and `force_destroy` will override these protections. Take extra care using these options if you are handling production traffic.
     * 
     */
    @Import(name="forceDestroy")
    private @Nullable Output<Boolean> forceDestroy;

    /**
     * @return Always delete subscription, even when active domains are present. Defaults to false.
     * 
     * !&gt; **Warning:** by default, the Fastly API protects you from disabling production traffic by preventing updating or deleting subscriptions with active domains. The use of `force_update` and `force_destroy` will override these protections. Take extra care using these options if you are handling production traffic.
     * 
     */
    public Optional<Output<Boolean>> forceDestroy() {
        return Optional.ofNullable(this.forceDestroy);
    }

    /**
     * Always update subscription, even when active domains are present. Defaults to false.
     * 
     */
    @Import(name="forceUpdate")
    private @Nullable Output<Boolean> forceUpdate;

    /**
     * @return Always update subscription, even when active domains are present. Defaults to false.
     * 
     */
    public Optional<Output<Boolean>> forceUpdate() {
        return Optional.ofNullable(this.forceUpdate);
    }

    private TlsSubscriptionArgs() {}

    private TlsSubscriptionArgs(TlsSubscriptionArgs $) {
        this.certificateAuthority = $.certificateAuthority;
        this.commonName = $.commonName;
        this.configurationId = $.configurationId;
        this.domains = $.domains;
        this.forceDestroy = $.forceDestroy;
        this.forceUpdate = $.forceUpdate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsSubscriptionArgs $;

        public Builder() {
            $ = new TlsSubscriptionArgs();
        }

        public Builder(TlsSubscriptionArgs defaults) {
            $ = new TlsSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthority The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt` or `globalsign`.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(Output<String> certificateAuthority) {
            $.certificateAuthority = certificateAuthority;
            return this;
        }

        /**
         * @param certificateAuthority The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt` or `globalsign`.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(String certificateAuthority) {
            return certificateAuthority(Output.of(certificateAuthority));
        }

        /**
         * @param commonName The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
         * 
         * @return builder
         * 
         */
        public Builder commonName(@Nullable Output<String> commonName) {
            $.commonName = commonName;
            return this;
        }

        /**
         * @param commonName The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
         * 
         * @return builder
         * 
         */
        public Builder commonName(String commonName) {
            return commonName(Output.of(commonName));
        }

        /**
         * @param configurationId The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param domains List of domains on which to enable TLS.
         * 
         * @return builder
         * 
         */
        public Builder domains(Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains List of domains on which to enable TLS.
         * 
         * @return builder
         * 
         */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains List of domains on which to enable TLS.
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param forceDestroy Always delete subscription, even when active domains are present. Defaults to false.
         * 
         * !&gt; **Warning:** by default, the Fastly API protects you from disabling production traffic by preventing updating or deleting subscriptions with active domains. The use of `force_update` and `force_destroy` will override these protections. Take extra care using these options if you are handling production traffic.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(@Nullable Output<Boolean> forceDestroy) {
            $.forceDestroy = forceDestroy;
            return this;
        }

        /**
         * @param forceDestroy Always delete subscription, even when active domains are present. Defaults to false.
         * 
         * !&gt; **Warning:** by default, the Fastly API protects you from disabling production traffic by preventing updating or deleting subscriptions with active domains. The use of `force_update` and `force_destroy` will override these protections. Take extra care using these options if you are handling production traffic.
         * 
         * @return builder
         * 
         */
        public Builder forceDestroy(Boolean forceDestroy) {
            return forceDestroy(Output.of(forceDestroy));
        }

        /**
         * @param forceUpdate Always update subscription, even when active domains are present. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdate(@Nullable Output<Boolean> forceUpdate) {
            $.forceUpdate = forceUpdate;
            return this;
        }

        /**
         * @param forceUpdate Always update subscription, even when active domains are present. Defaults to false.
         * 
         * @return builder
         * 
         */
        public Builder forceUpdate(Boolean forceUpdate) {
            return forceUpdate(Output.of(forceUpdate));
        }

        public TlsSubscriptionArgs build() {
            $.certificateAuthority = Objects.requireNonNull($.certificateAuthority, "expected parameter 'certificateAuthority' to be non-null");
            $.domains = Objects.requireNonNull($.domains, "expected parameter 'domains' to be non-null");
            return $;
        }
    }

}
