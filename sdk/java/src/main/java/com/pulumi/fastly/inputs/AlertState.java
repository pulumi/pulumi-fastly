// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.fastly.inputs.AlertDimensionsArgs;
import com.pulumi.fastly.inputs.AlertEvaluationStrategyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertState extends com.pulumi.resources.ResourceArgs {

    public static final AlertState Empty = new AlertState();

    /**
     * Additional text that is included in the alert notification.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Additional text that is included in the alert notification.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * More filters depending on the source type.
     * 
     */
    @Import(name="dimensions")
    private @Nullable Output<AlertDimensionsArgs> dimensions;

    /**
     * @return More filters depending on the source type.
     * 
     */
    public Optional<Output<AlertDimensionsArgs>> dimensions() {
        return Optional.ofNullable(this.dimensions);
    }

    /**
     * Criteria on how to alert.
     * 
     */
    @Import(name="evaluationStrategy")
    private @Nullable Output<AlertEvaluationStrategyArgs> evaluationStrategy;

    /**
     * @return Criteria on how to alert.
     * 
     */
    public Optional<Output<AlertEvaluationStrategyArgs>> evaluationStrategy() {
        return Optional.ofNullable(this.evaluationStrategy);
    }

    /**
     * List of integrations used to notify when alert fires.
     * 
     */
    @Import(name="integrationIds")
    private @Nullable Output<List<String>> integrationIds;

    /**
     * @return List of integrations used to notify when alert fires.
     * 
     */
    public Optional<Output<List<String>>> integrationIds() {
        return Optional.ofNullable(this.integrationIds);
    }

    /**
     * The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
     * 
     */
    @Import(name="metric")
    private @Nullable Output<String> metric;

    /**
     * @return The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
     * 
     */
    public Optional<Output<String>> metric() {
        return Optional.ofNullable(this.metric);
    }

    /**
     * The name of the alert.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the alert.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The service which the alert monitors.
     * 
     */
    @Import(name="serviceId")
    private @Nullable Output<String> serviceId;

    /**
     * @return The service which the alert monitors.
     * 
     */
    public Optional<Output<String>> serviceId() {
        return Optional.ofNullable(this.serviceId);
    }

    /**
     * The source where the metric comes from. One of: `domains`, `origins`, `stats`.
     * 
     */
    @Import(name="source")
    private @Nullable Output<String> source;

    /**
     * @return The source where the metric comes from. One of: `domains`, `origins`, `stats`.
     * 
     */
    public Optional<Output<String>> source() {
        return Optional.ofNullable(this.source);
    }

    private AlertState() {}

    private AlertState(AlertState $) {
        this.description = $.description;
        this.dimensions = $.dimensions;
        this.evaluationStrategy = $.evaluationStrategy;
        this.integrationIds = $.integrationIds;
        this.metric = $.metric;
        this.name = $.name;
        this.serviceId = $.serviceId;
        this.source = $.source;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertState $;

        public Builder() {
            $ = new AlertState();
        }

        public Builder(AlertState defaults) {
            $ = new AlertState(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Additional text that is included in the alert notification.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Additional text that is included in the alert notification.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param dimensions More filters depending on the source type.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(@Nullable Output<AlertDimensionsArgs> dimensions) {
            $.dimensions = dimensions;
            return this;
        }

        /**
         * @param dimensions More filters depending on the source type.
         * 
         * @return builder
         * 
         */
        public Builder dimensions(AlertDimensionsArgs dimensions) {
            return dimensions(Output.of(dimensions));
        }

        /**
         * @param evaluationStrategy Criteria on how to alert.
         * 
         * @return builder
         * 
         */
        public Builder evaluationStrategy(@Nullable Output<AlertEvaluationStrategyArgs> evaluationStrategy) {
            $.evaluationStrategy = evaluationStrategy;
            return this;
        }

        /**
         * @param evaluationStrategy Criteria on how to alert.
         * 
         * @return builder
         * 
         */
        public Builder evaluationStrategy(AlertEvaluationStrategyArgs evaluationStrategy) {
            return evaluationStrategy(Output.of(evaluationStrategy));
        }

        /**
         * @param integrationIds List of integrations used to notify when alert fires.
         * 
         * @return builder
         * 
         */
        public Builder integrationIds(@Nullable Output<List<String>> integrationIds) {
            $.integrationIds = integrationIds;
            return this;
        }

        /**
         * @param integrationIds List of integrations used to notify when alert fires.
         * 
         * @return builder
         * 
         */
        public Builder integrationIds(List<String> integrationIds) {
            return integrationIds(Output.of(integrationIds));
        }

        /**
         * @param integrationIds List of integrations used to notify when alert fires.
         * 
         * @return builder
         * 
         */
        public Builder integrationIds(String... integrationIds) {
            return integrationIds(List.of(integrationIds));
        }

        /**
         * @param metric The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
         * 
         * @return builder
         * 
         */
        public Builder metric(@Nullable Output<String> metric) {
            $.metric = metric;
            return this;
        }

        /**
         * @param metric The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
         * 
         * @return builder
         * 
         */
        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        /**
         * @param name The name of the alert.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the alert.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param serviceId The service which the alert monitors.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(@Nullable Output<String> serviceId) {
            $.serviceId = serviceId;
            return this;
        }

        /**
         * @param serviceId The service which the alert monitors.
         * 
         * @return builder
         * 
         */
        public Builder serviceId(String serviceId) {
            return serviceId(Output.of(serviceId));
        }

        /**
         * @param source The source where the metric comes from. One of: `domains`, `origins`, `stats`.
         * 
         * @return builder
         * 
         */
        public Builder source(@Nullable Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source where the metric comes from. One of: `domains`, `origins`, `stats`.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        public AlertState build() {
            return $;
        }
    }

}
