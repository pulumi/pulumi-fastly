// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.fastly.inputs.ServiceVclRateLimiterResponseArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclRateLimiterArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclRateLimiterArgs Empty = new ServiceVclRateLimiterArgs();

    /**
     * The action to take when a rate limiter violation is detected (one of: log*only, log*only, response_object)
     * 
     */
    @Import(name="action", required=true)
    private Output<String> action;

    /**
     * @return The action to take when a rate limiter violation is detected (one of: log*only, log*only, response_object)
     * 
     */
    public Output<String> action() {
        return this.action;
    }

    /**
     * Comma-separated list of VCL variables used to generate a counter key to identify a client
     * 
     */
    @Import(name="clientKey", required=true)
    private Output<String> clientKey;

    /**
     * @return Comma-separated list of VCL variables used to generate a counter key to identify a client
     * 
     */
    public Output<String> clientKey() {
        return this.clientKey;
    }

    /**
     * Revision number of the rate limiting feature implementation
     * 
     */
    @Import(name="featureRevision")
    private @Nullable Output<Integer> featureRevision;

    /**
     * @return Revision number of the rate limiting feature implementation
     * 
     */
    public Optional<Output<Integer>> featureRevision() {
        return Optional.ofNullable(this.featureRevision);
    }

    /**
     * Comma-separated list of HTTP methods to apply rate limiting to
     * 
     */
    @Import(name="httpMethods", required=true)
    private Output<String> httpMethods;

    /**
     * @return Comma-separated list of HTTP methods to apply rate limiting to
     * 
     */
    public Output<String> httpMethods() {
        return this.httpMethods;
    }

    /**
     * Name of the type of logging endpoint to be used when action is log_only (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
     * 
     */
    @Import(name="loggerType")
    private @Nullable Output<String> loggerType;

    /**
     * @return Name of the type of logging endpoint to be used when action is log_only (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
     * 
     */
    public Optional<Output<String>> loggerType() {
        return Optional.ofNullable(this.loggerType);
    }

    /**
     * A unique human readable name for the rate limiting rule
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique human readable name for the rate limiting rule
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Length of time in minutes that the rate limiter is in effect after the initial violation is detected
     * 
     */
    @Import(name="penaltyBoxDuration", required=true)
    private Output<Integer> penaltyBoxDuration;

    /**
     * @return Length of time in minutes that the rate limiter is in effect after the initial violation is detected
     * 
     */
    public Output<Integer> penaltyBoxDuration() {
        return this.penaltyBoxDuration;
    }

    /**
     * Alphanumeric string identifying the rate limiter
     * 
     */
    @Import(name="ratelimiterId")
    private @Nullable Output<String> ratelimiterId;

    /**
     * @return Alphanumeric string identifying the rate limiter
     * 
     */
    public Optional<Output<String>> ratelimiterId() {
        return Optional.ofNullable(this.ratelimiterId);
    }

    /**
     * Custom response to be sent when the rate limit is exceeded. Required if action is response
     * 
     */
    @Import(name="response")
    private @Nullable Output<ServiceVclRateLimiterResponseArgs> response;

    /**
     * @return Custom response to be sent when the rate limit is exceeded. Required if action is response
     * 
     */
    public Optional<Output<ServiceVclRateLimiterResponseArgs>> response() {
        return Optional.ofNullable(this.response);
    }

    /**
     * Name of existing response object. Required if action is response_object
     * 
     */
    @Import(name="responseObjectName")
    private @Nullable Output<String> responseObjectName;

    /**
     * @return Name of existing response object. Required if action is response_object
     * 
     */
    public Optional<Output<String>> responseObjectName() {
        return Optional.ofNullable(this.responseObjectName);
    }

    /**
     * Upper limit of requests per second allowed by the rate limiter
     * 
     */
    @Import(name="rpsLimit", required=true)
    private Output<Integer> rpsLimit;

    /**
     * @return Upper limit of requests per second allowed by the rate limiter
     * 
     */
    public Output<Integer> rpsLimit() {
        return this.rpsLimit;
    }

    /**
     * The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
     * 
     */
    @Import(name="uriDictionaryName")
    private @Nullable Output<String> uriDictionaryName;

    /**
     * @return The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
     * 
     */
    public Optional<Output<String>> uriDictionaryName() {
        return Optional.ofNullable(this.uriDictionaryName);
    }

    /**
     * Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
     * 
     */
    @Import(name="windowSize", required=true)
    private Output<Integer> windowSize;

    /**
     * @return Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
     * 
     */
    public Output<Integer> windowSize() {
        return this.windowSize;
    }

    private ServiceVclRateLimiterArgs() {}

    private ServiceVclRateLimiterArgs(ServiceVclRateLimiterArgs $) {
        this.action = $.action;
        this.clientKey = $.clientKey;
        this.featureRevision = $.featureRevision;
        this.httpMethods = $.httpMethods;
        this.loggerType = $.loggerType;
        this.name = $.name;
        this.penaltyBoxDuration = $.penaltyBoxDuration;
        this.ratelimiterId = $.ratelimiterId;
        this.response = $.response;
        this.responseObjectName = $.responseObjectName;
        this.rpsLimit = $.rpsLimit;
        this.uriDictionaryName = $.uriDictionaryName;
        this.windowSize = $.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclRateLimiterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclRateLimiterArgs $;

        public Builder() {
            $ = new ServiceVclRateLimiterArgs();
        }

        public Builder(ServiceVclRateLimiterArgs defaults) {
            $ = new ServiceVclRateLimiterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action The action to take when a rate limiter violation is detected (one of: log*only, log*only, response_object)
         * 
         * @return builder
         * 
         */
        public Builder action(Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action The action to take when a rate limiter violation is detected (one of: log*only, log*only, response_object)
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param clientKey Comma-separated list of VCL variables used to generate a counter key to identify a client
         * 
         * @return builder
         * 
         */
        public Builder clientKey(Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey Comma-separated list of VCL variables used to generate a counter key to identify a client
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param featureRevision Revision number of the rate limiting feature implementation
         * 
         * @return builder
         * 
         */
        public Builder featureRevision(@Nullable Output<Integer> featureRevision) {
            $.featureRevision = featureRevision;
            return this;
        }

        /**
         * @param featureRevision Revision number of the rate limiting feature implementation
         * 
         * @return builder
         * 
         */
        public Builder featureRevision(Integer featureRevision) {
            return featureRevision(Output.of(featureRevision));
        }

        /**
         * @param httpMethods Comma-separated list of HTTP methods to apply rate limiting to
         * 
         * @return builder
         * 
         */
        public Builder httpMethods(Output<String> httpMethods) {
            $.httpMethods = httpMethods;
            return this;
        }

        /**
         * @param httpMethods Comma-separated list of HTTP methods to apply rate limiting to
         * 
         * @return builder
         * 
         */
        public Builder httpMethods(String httpMethods) {
            return httpMethods(Output.of(httpMethods));
        }

        /**
         * @param loggerType Name of the type of logging endpoint to be used when action is log_only (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
         * 
         * @return builder
         * 
         */
        public Builder loggerType(@Nullable Output<String> loggerType) {
            $.loggerType = loggerType;
            return this;
        }

        /**
         * @param loggerType Name of the type of logging endpoint to be used when action is log_only (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
         * 
         * @return builder
         * 
         */
        public Builder loggerType(String loggerType) {
            return loggerType(Output.of(loggerType));
        }

        /**
         * @param name A unique human readable name for the rate limiting rule
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique human readable name for the rate limiting rule
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param penaltyBoxDuration Length of time in minutes that the rate limiter is in effect after the initial violation is detected
         * 
         * @return builder
         * 
         */
        public Builder penaltyBoxDuration(Output<Integer> penaltyBoxDuration) {
            $.penaltyBoxDuration = penaltyBoxDuration;
            return this;
        }

        /**
         * @param penaltyBoxDuration Length of time in minutes that the rate limiter is in effect after the initial violation is detected
         * 
         * @return builder
         * 
         */
        public Builder penaltyBoxDuration(Integer penaltyBoxDuration) {
            return penaltyBoxDuration(Output.of(penaltyBoxDuration));
        }

        /**
         * @param ratelimiterId Alphanumeric string identifying the rate limiter
         * 
         * @return builder
         * 
         */
        public Builder ratelimiterId(@Nullable Output<String> ratelimiterId) {
            $.ratelimiterId = ratelimiterId;
            return this;
        }

        /**
         * @param ratelimiterId Alphanumeric string identifying the rate limiter
         * 
         * @return builder
         * 
         */
        public Builder ratelimiterId(String ratelimiterId) {
            return ratelimiterId(Output.of(ratelimiterId));
        }

        /**
         * @param response Custom response to be sent when the rate limit is exceeded. Required if action is response
         * 
         * @return builder
         * 
         */
        public Builder response(@Nullable Output<ServiceVclRateLimiterResponseArgs> response) {
            $.response = response;
            return this;
        }

        /**
         * @param response Custom response to be sent when the rate limit is exceeded. Required if action is response
         * 
         * @return builder
         * 
         */
        public Builder response(ServiceVclRateLimiterResponseArgs response) {
            return response(Output.of(response));
        }

        /**
         * @param responseObjectName Name of existing response object. Required if action is response_object
         * 
         * @return builder
         * 
         */
        public Builder responseObjectName(@Nullable Output<String> responseObjectName) {
            $.responseObjectName = responseObjectName;
            return this;
        }

        /**
         * @param responseObjectName Name of existing response object. Required if action is response_object
         * 
         * @return builder
         * 
         */
        public Builder responseObjectName(String responseObjectName) {
            return responseObjectName(Output.of(responseObjectName));
        }

        /**
         * @param rpsLimit Upper limit of requests per second allowed by the rate limiter
         * 
         * @return builder
         * 
         */
        public Builder rpsLimit(Output<Integer> rpsLimit) {
            $.rpsLimit = rpsLimit;
            return this;
        }

        /**
         * @param rpsLimit Upper limit of requests per second allowed by the rate limiter
         * 
         * @return builder
         * 
         */
        public Builder rpsLimit(Integer rpsLimit) {
            return rpsLimit(Output.of(rpsLimit));
        }

        /**
         * @param uriDictionaryName The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
         * 
         * @return builder
         * 
         */
        public Builder uriDictionaryName(@Nullable Output<String> uriDictionaryName) {
            $.uriDictionaryName = uriDictionaryName;
            return this;
        }

        /**
         * @param uriDictionaryName The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
         * 
         * @return builder
         * 
         */
        public Builder uriDictionaryName(String uriDictionaryName) {
            return uriDictionaryName(Output.of(uriDictionaryName));
        }

        /**
         * @param windowSize Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
         * 
         * @return builder
         * 
         */
        public Builder windowSize(Output<Integer> windowSize) {
            $.windowSize = windowSize;
            return this;
        }

        /**
         * @param windowSize Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
         * 
         * @return builder
         * 
         */
        public Builder windowSize(Integer windowSize) {
            return windowSize(Output.of(windowSize));
        }

        public ServiceVclRateLimiterArgs build() {
            $.action = Objects.requireNonNull($.action, "expected parameter 'action' to be non-null");
            $.clientKey = Objects.requireNonNull($.clientKey, "expected parameter 'clientKey' to be non-null");
            $.httpMethods = Objects.requireNonNull($.httpMethods, "expected parameter 'httpMethods' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.penaltyBoxDuration = Objects.requireNonNull($.penaltyBoxDuration, "expected parameter 'penaltyBoxDuration' to be non-null");
            $.rpsLimit = Objects.requireNonNull($.rpsLimit, "expected parameter 'rpsLimit' to be non-null");
            $.windowSize = Objects.requireNonNull($.windowSize, "expected parameter 'windowSize' to be non-null");
            return $;
        }
    }

}
