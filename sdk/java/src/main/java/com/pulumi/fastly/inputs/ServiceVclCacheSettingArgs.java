// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclCacheSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclCacheSettingArgs Empty = new ServiceVclCacheSettingArgs();

    /**
     * One of cache, pass, or restart, as defined on Fastly&#39;s documentation under &#34;[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)&#34;
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return One of cache, pass, or restart, as defined on Fastly&#39;s documentation under &#34;[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)&#34;
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
     * 
     */
    @Import(name="cacheCondition")
    private @Nullable Output<String> cacheCondition;

    /**
     * @return Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
     * 
     */
    public Optional<Output<String>> cacheCondition() {
        return Optional.ofNullable(this.cacheCondition);
    }

    /**
     * Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Max &#34;Time To Live&#34; for stale (unreachable) objects
     * 
     */
    @Import(name="staleTtl")
    private @Nullable Output<Integer> staleTtl;

    /**
     * @return Max &#34;Time To Live&#34; for stale (unreachable) objects
     * 
     */
    public Optional<Output<Integer>> staleTtl() {
        return Optional.ofNullable(this.staleTtl);
    }

    /**
     * The Time-To-Live (TTL) for the object
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return The Time-To-Live (TTL) for the object
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    private ServiceVclCacheSettingArgs() {}

    private ServiceVclCacheSettingArgs(ServiceVclCacheSettingArgs $) {
        this.action = $.action;
        this.cacheCondition = $.cacheCondition;
        this.name = $.name;
        this.staleTtl = $.staleTtl;
        this.ttl = $.ttl;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclCacheSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclCacheSettingArgs $;

        public Builder() {
            $ = new ServiceVclCacheSettingArgs();
        }

        public Builder(ServiceVclCacheSettingArgs defaults) {
            $ = new ServiceVclCacheSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action One of cache, pass, or restart, as defined on Fastly&#39;s documentation under &#34;[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)&#34;
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action One of cache, pass, or restart, as defined on Fastly&#39;s documentation under &#34;[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)&#34;
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param cacheCondition Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
         * 
         * @return builder
         * 
         */
        public Builder cacheCondition(@Nullable Output<String> cacheCondition) {
            $.cacheCondition = cacheCondition;
            return this;
        }

        /**
         * @param cacheCondition Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
         * 
         * @return builder
         * 
         */
        public Builder cacheCondition(String cacheCondition) {
            return cacheCondition(Output.of(cacheCondition));
        }

        /**
         * @param name Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param staleTtl Max &#34;Time To Live&#34; for stale (unreachable) objects
         * 
         * @return builder
         * 
         */
        public Builder staleTtl(@Nullable Output<Integer> staleTtl) {
            $.staleTtl = staleTtl;
            return this;
        }

        /**
         * @param staleTtl Max &#34;Time To Live&#34; for stale (unreachable) objects
         * 
         * @return builder
         * 
         */
        public Builder staleTtl(Integer staleTtl) {
            return staleTtl(Output.of(staleTtl));
        }

        /**
         * @param ttl The Time-To-Live (TTL) for the object
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl The Time-To-Live (TTL) for the object
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        public ServiceVclCacheSettingArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
