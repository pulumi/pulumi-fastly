// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.TlsActivationArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.TlsActivationState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Enables TLS on a domain using a specified custom TLS certificate.
 * 
 * &gt; **Note:** The Fastly service must be provisioned _prior_ to enabling TLS on it.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.TlsPrivateKey;
 * import com.pulumi.fastly.TlsPrivateKeyArgs;
 * import com.pulumi.fastly.TlsCertificate;
 * import com.pulumi.fastly.TlsCertificateArgs;
 * import com.pulumi.fastly.TlsActivation;
 * import com.pulumi.fastly.TlsActivationArgs;
 * import com.pulumi.resources.CustomResourceOptions;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demoServiceVcl = new ServiceVcl(&#34;demoServiceVcl&#34;, ServiceVclArgs.builder()        
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .name(&#34;example.com&#34;)
 *                 .build())
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;localhost&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *         var demoTlsPrivateKey = new TlsPrivateKey(&#34;demoTlsPrivateKey&#34;, TlsPrivateKeyArgs.builder()        
 *             .keyPem(&#34;...&#34;)
 *             .build());
 * 
 *         var demoTlsCertificate = new TlsCertificate(&#34;demoTlsCertificate&#34;, TlsCertificateArgs.builder()        
 *             .certificateBody(&#34;...&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(demoTlsPrivateKey)
 *                 .build());
 * 
 *         var test = new TlsActivation(&#34;test&#34;, TlsActivationArgs.builder()        
 *             .certificateId(demoTlsCertificate.id())
 *             .domain(&#34;example.com&#34;)
 *             .build(), CustomResourceOptions.builder()
 *                 .dependsOn(demoServiceVcl)
 *                 .build());
 * 
 *     }
 * }
 * ```
 * 
 * &gt; **Warning:** Updating the `fastly.TlsPrivateKey`/`fastly.TlsCertificate` resources should be done in multiple plan/apply steps to avoid potential downtime. The new certificate and associated private key must first be created so they exist alongside the currently active resources. Once the new resources have been created, then the `fastly.TlsActivation` can be updated to point to the new certificate. Finally, the original key/certificate resources can be deleted.
 * 
 * ## Import
 * 
 * A TLS activation can be imported using its ID, e.g.
 * 
 * ```sh
 *  $ pulumi import fastly:index/tlsActivation:TlsActivation demo xxxxxxxx
 * ```
 * 
 */
@ResourceType(type="fastly:index/tlsActivation:TlsActivation")
public class TlsActivation extends com.pulumi.resources.CustomResource {
    /**
     * ID of certificate to use. Must have the `domain` specified in the certificate&#39;s Subject Alternative Names.
     * 
     */
    @Export(name="certificateId", type=String.class, parameters={})
    private Output<String> certificateId;

    /**
     * @return ID of certificate to use. Must have the `domain` specified in the certificate&#39;s Subject Alternative Names.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }
    /**
     * ID of TLS configuration to be used to terminate TLS traffic, or use the default one if missing.
     * 
     */
    @Export(name="configurationId", type=String.class, parameters={})
    private Output<String> configurationId;

    /**
     * @return ID of TLS configuration to be used to terminate TLS traffic, or use the default one if missing.
     * 
     */
    public Output<String> configurationId() {
        return this.configurationId;
    }
    /**
     * Time-stamp (GMT) when TLS was enabled.
     * 
     */
    @Export(name="createdAt", type=String.class, parameters={})
    private Output<String> createdAt;

    /**
     * @return Time-stamp (GMT) when TLS was enabled.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Domain to enable TLS on. Must be assigned to an existing Fastly Service.
     * 
     */
    @Export(name="domain", type=String.class, parameters={})
    private Output<String> domain;

    /**
     * @return Domain to enable TLS on. Must be assigned to an existing Fastly Service.
     * 
     */
    public Output<String> domain() {
        return this.domain;
    }
    /**
     * An alphanumeric string identifying a mutual authentication.
     * 
     */
    @Export(name="mutualAuthenticationId", type=String.class, parameters={})
    private Output</* @Nullable */ String> mutualAuthenticationId;

    /**
     * @return An alphanumeric string identifying a mutual authentication.
     * 
     */
    public Output<Optional<String>> mutualAuthenticationId() {
        return Codegen.optional(this.mutualAuthenticationId);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TlsActivation(String name) {
        this(name, TlsActivationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TlsActivation(String name, TlsActivationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TlsActivation(String name, TlsActivationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/tlsActivation:TlsActivation", name, args == null ? TlsActivationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private TlsActivation(String name, Output<String> id, @Nullable TlsActivationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/tlsActivation:TlsActivation", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TlsActivation get(String name, Output<String> id, @Nullable TlsActivationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TlsActivation(name, id, state, options);
    }
}
