// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.fastly.outputs.ServiceVclRateLimiterResponse;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclRateLimiter {
    /**
     * @return The action to take when a rate limiter violation is detected (one of: log_only, response, response_object)
     * 
     */
    private String action;
    /**
     * @return Comma-separated list of VCL variables used to generate a counter key to identify a client
     * 
     */
    private String clientKey;
    /**
     * @return Revision number of the rate limiting feature implementation
     * 
     */
    private @Nullable Integer featureRevision;
    /**
     * @return Comma-separated list of HTTP methods to apply rate limiting to
     * 
     */
    private String httpMethods;
    /**
     * @return Name of the type of logging endpoint to be used when action is log_only (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
     * 
     */
    private @Nullable String loggerType;
    /**
     * @return A unique human readable name for the rate limiting rule
     * 
     */
    private String name;
    /**
     * @return Length of time in minutes that the rate limiter is in effect after the initial violation is detected
     * 
     */
    private Integer penaltyBoxDuration;
    /**
     * @return Alphanumeric string identifying the rate limiter
     * 
     */
    private @Nullable String ratelimiterId;
    /**
     * @return Custom response to be sent when the rate limit is exceeded. Required if action is response
     * 
     */
    private @Nullable ServiceVclRateLimiterResponse response;
    /**
     * @return Name of existing response object. Required if action is response_object
     * 
     */
    private @Nullable String responseObjectName;
    /**
     * @return Upper limit of requests per second allowed by the rate limiter
     * 
     */
    private Integer rpsLimit;
    /**
     * @return The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
     * 
     */
    private @Nullable String uriDictionaryName;
    /**
     * @return Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
     * 
     */
    private Integer windowSize;

    private ServiceVclRateLimiter() {}
    /**
     * @return The action to take when a rate limiter violation is detected (one of: log_only, response, response_object)
     * 
     */
    public String action() {
        return this.action;
    }
    /**
     * @return Comma-separated list of VCL variables used to generate a counter key to identify a client
     * 
     */
    public String clientKey() {
        return this.clientKey;
    }
    /**
     * @return Revision number of the rate limiting feature implementation
     * 
     */
    public Optional<Integer> featureRevision() {
        return Optional.ofNullable(this.featureRevision);
    }
    /**
     * @return Comma-separated list of HTTP methods to apply rate limiting to
     * 
     */
    public String httpMethods() {
        return this.httpMethods;
    }
    /**
     * @return Name of the type of logging endpoint to be used when action is log_only (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
     * 
     */
    public Optional<String> loggerType() {
        return Optional.ofNullable(this.loggerType);
    }
    /**
     * @return A unique human readable name for the rate limiting rule
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Length of time in minutes that the rate limiter is in effect after the initial violation is detected
     * 
     */
    public Integer penaltyBoxDuration() {
        return this.penaltyBoxDuration;
    }
    /**
     * @return Alphanumeric string identifying the rate limiter
     * 
     */
    public Optional<String> ratelimiterId() {
        return Optional.ofNullable(this.ratelimiterId);
    }
    /**
     * @return Custom response to be sent when the rate limit is exceeded. Required if action is response
     * 
     */
    public Optional<ServiceVclRateLimiterResponse> response() {
        return Optional.ofNullable(this.response);
    }
    /**
     * @return Name of existing response object. Required if action is response_object
     * 
     */
    public Optional<String> responseObjectName() {
        return Optional.ofNullable(this.responseObjectName);
    }
    /**
     * @return Upper limit of requests per second allowed by the rate limiter
     * 
     */
    public Integer rpsLimit() {
        return this.rpsLimit;
    }
    /**
     * @return The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
     * 
     */
    public Optional<String> uriDictionaryName() {
        return Optional.ofNullable(this.uriDictionaryName);
    }
    /**
     * @return Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
     * 
     */
    public Integer windowSize() {
        return this.windowSize;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclRateLimiter defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String action;
        private String clientKey;
        private @Nullable Integer featureRevision;
        private String httpMethods;
        private @Nullable String loggerType;
        private String name;
        private Integer penaltyBoxDuration;
        private @Nullable String ratelimiterId;
        private @Nullable ServiceVclRateLimiterResponse response;
        private @Nullable String responseObjectName;
        private Integer rpsLimit;
        private @Nullable String uriDictionaryName;
        private Integer windowSize;
        public Builder() {}
        public Builder(ServiceVclRateLimiter defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.action = defaults.action;
    	      this.clientKey = defaults.clientKey;
    	      this.featureRevision = defaults.featureRevision;
    	      this.httpMethods = defaults.httpMethods;
    	      this.loggerType = defaults.loggerType;
    	      this.name = defaults.name;
    	      this.penaltyBoxDuration = defaults.penaltyBoxDuration;
    	      this.ratelimiterId = defaults.ratelimiterId;
    	      this.response = defaults.response;
    	      this.responseObjectName = defaults.responseObjectName;
    	      this.rpsLimit = defaults.rpsLimit;
    	      this.uriDictionaryName = defaults.uriDictionaryName;
    	      this.windowSize = defaults.windowSize;
        }

        @CustomType.Setter
        public Builder action(String action) {
            if (action == null) {
              throw new MissingRequiredPropertyException("ServiceVclRateLimiter", "action");
            }
            this.action = action;
            return this;
        }
        @CustomType.Setter
        public Builder clientKey(String clientKey) {
            if (clientKey == null) {
              throw new MissingRequiredPropertyException("ServiceVclRateLimiter", "clientKey");
            }
            this.clientKey = clientKey;
            return this;
        }
        @CustomType.Setter
        public Builder featureRevision(@Nullable Integer featureRevision) {

            this.featureRevision = featureRevision;
            return this;
        }
        @CustomType.Setter
        public Builder httpMethods(String httpMethods) {
            if (httpMethods == null) {
              throw new MissingRequiredPropertyException("ServiceVclRateLimiter", "httpMethods");
            }
            this.httpMethods = httpMethods;
            return this;
        }
        @CustomType.Setter
        public Builder loggerType(@Nullable String loggerType) {

            this.loggerType = loggerType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceVclRateLimiter", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder penaltyBoxDuration(Integer penaltyBoxDuration) {
            if (penaltyBoxDuration == null) {
              throw new MissingRequiredPropertyException("ServiceVclRateLimiter", "penaltyBoxDuration");
            }
            this.penaltyBoxDuration = penaltyBoxDuration;
            return this;
        }
        @CustomType.Setter
        public Builder ratelimiterId(@Nullable String ratelimiterId) {

            this.ratelimiterId = ratelimiterId;
            return this;
        }
        @CustomType.Setter
        public Builder response(@Nullable ServiceVclRateLimiterResponse response) {

            this.response = response;
            return this;
        }
        @CustomType.Setter
        public Builder responseObjectName(@Nullable String responseObjectName) {

            this.responseObjectName = responseObjectName;
            return this;
        }
        @CustomType.Setter
        public Builder rpsLimit(Integer rpsLimit) {
            if (rpsLimit == null) {
              throw new MissingRequiredPropertyException("ServiceVclRateLimiter", "rpsLimit");
            }
            this.rpsLimit = rpsLimit;
            return this;
        }
        @CustomType.Setter
        public Builder uriDictionaryName(@Nullable String uriDictionaryName) {

            this.uriDictionaryName = uriDictionaryName;
            return this;
        }
        @CustomType.Setter
        public Builder windowSize(Integer windowSize) {
            if (windowSize == null) {
              throw new MissingRequiredPropertyException("ServiceVclRateLimiter", "windowSize");
            }
            this.windowSize = windowSize;
            return this;
        }
        public ServiceVclRateLimiter build() {
            final var _resultValue = new ServiceVclRateLimiter();
            _resultValue.action = action;
            _resultValue.clientKey = clientKey;
            _resultValue.featureRevision = featureRevision;
            _resultValue.httpMethods = httpMethods;
            _resultValue.loggerType = loggerType;
            _resultValue.name = name;
            _resultValue.penaltyBoxDuration = penaltyBoxDuration;
            _resultValue.ratelimiterId = ratelimiterId;
            _resultValue.response = response;
            _resultValue.responseObjectName = responseObjectName;
            _resultValue.rpsLimit = rpsLimit;
            _resultValue.uriDictionaryName = uriDictionaryName;
            _resultValue.windowSize = windowSize;
            return _resultValue;
        }
    }
}
