// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclRequestSettingArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclRequestSettingArgs Empty = new ServiceVclRequestSettingArgs();

    /**
     * Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
     * 
     */
    @Import(name="action")
    private @Nullable Output<String> action;

    /**
     * @return Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
     * 
     */
    public Optional<Output<String>> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * Disable collapsed forwarding, so you don&#39;t wait for other objects to origin
     * 
     */
    @Import(name="bypassBusyWait")
    private @Nullable Output<Boolean> bypassBusyWait;

    /**
     * @return Disable collapsed forwarding, so you don&#39;t wait for other objects to origin
     * 
     */
    public Optional<Output<Boolean>> bypassBusyWait() {
        return Optional.ofNullable(this.bypassBusyWait);
    }

    /**
     * Sets the host header
     * 
     */
    @Import(name="defaultHost")
    private @Nullable Output<String> defaultHost;

    /**
     * @return Sets the host header
     * 
     */
    public Optional<Output<String>> defaultHost() {
        return Optional.ofNullable(this.defaultHost);
    }

    /**
     * Force a cache miss for the request. If specified, can be `true` or `false`
     * 
     */
    @Import(name="forceMiss")
    private @Nullable Output<Boolean> forceMiss;

    /**
     * @return Force a cache miss for the request. If specified, can be `true` or `false`
     * 
     */
    public Optional<Output<Boolean>> forceMiss() {
        return Optional.ofNullable(this.forceMiss);
    }

    /**
     * Forces the request to use SSL (Redirects a non-SSL request to SSL)
     * 
     */
    @Import(name="forceSsl")
    private @Nullable Output<Boolean> forceSsl;

    /**
     * @return Forces the request to use SSL (Redirects a non-SSL request to SSL)
     * 
     */
    public Optional<Output<Boolean>> forceSsl() {
        return Optional.ofNullable(this.forceSsl);
    }

    /**
     * Comma separated list of varnish request object fields that should be in the hash key
     * 
     */
    @Import(name="hashKeys")
    private @Nullable Output<String> hashKeys;

    /**
     * @return Comma separated list of varnish request object fields that should be in the hash key
     * 
     */
    public Optional<Output<String>> hashKeys() {
        return Optional.ofNullable(this.hashKeys);
    }

    /**
     * How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds
     * 
     */
    @Import(name="maxStaleAge")
    private @Nullable Output<Integer> maxStaleAge;

    /**
     * @return How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds
     * 
     */
    public Optional<Output<Integer>> maxStaleAge() {
        return Optional.ofNullable(this.maxStaleAge);
    }

    /**
     * Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `requestSetting`)
     * 
     */
    @Import(name="requestCondition")
    private @Nullable Output<String> requestCondition;

    /**
     * @return Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `requestSetting`)
     * 
     */
    public Optional<Output<String>> requestCondition() {
        return Optional.ofNullable(this.requestCondition);
    }

    /**
     * Injects the X-Timer info into the request for viewing origin fetch durations
     * 
     */
    @Import(name="timerSupport")
    private @Nullable Output<Boolean> timerSupport;

    /**
     * @return Injects the X-Timer info into the request for viewing origin fetch durations
     * 
     */
    public Optional<Output<Boolean>> timerSupport() {
        return Optional.ofNullable(this.timerSupport);
    }

    /**
     * X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
     * 
     */
    @Import(name="xff")
    private @Nullable Output<String> xff;

    /**
     * @return X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
     * 
     */
    public Optional<Output<String>> xff() {
        return Optional.ofNullable(this.xff);
    }

    private ServiceVclRequestSettingArgs() {}

    private ServiceVclRequestSettingArgs(ServiceVclRequestSettingArgs $) {
        this.action = $.action;
        this.bypassBusyWait = $.bypassBusyWait;
        this.defaultHost = $.defaultHost;
        this.forceMiss = $.forceMiss;
        this.forceSsl = $.forceSsl;
        this.hashKeys = $.hashKeys;
        this.maxStaleAge = $.maxStaleAge;
        this.name = $.name;
        this.requestCondition = $.requestCondition;
        this.timerSupport = $.timerSupport;
        this.xff = $.xff;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclRequestSettingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclRequestSettingArgs $;

        public Builder() {
            $ = new ServiceVclRequestSettingArgs();
        }

        public Builder(ServiceVclRequestSettingArgs defaults) {
            $ = new ServiceVclRequestSettingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param action Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
         * 
         * @return builder
         * 
         */
        public Builder action(@Nullable Output<String> action) {
            $.action = action;
            return this;
        }

        /**
         * @param action Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
         * 
         * @return builder
         * 
         */
        public Builder action(String action) {
            return action(Output.of(action));
        }

        /**
         * @param bypassBusyWait Disable collapsed forwarding, so you don&#39;t wait for other objects to origin
         * 
         * @return builder
         * 
         */
        public Builder bypassBusyWait(@Nullable Output<Boolean> bypassBusyWait) {
            $.bypassBusyWait = bypassBusyWait;
            return this;
        }

        /**
         * @param bypassBusyWait Disable collapsed forwarding, so you don&#39;t wait for other objects to origin
         * 
         * @return builder
         * 
         */
        public Builder bypassBusyWait(Boolean bypassBusyWait) {
            return bypassBusyWait(Output.of(bypassBusyWait));
        }

        /**
         * @param defaultHost Sets the host header
         * 
         * @return builder
         * 
         */
        public Builder defaultHost(@Nullable Output<String> defaultHost) {
            $.defaultHost = defaultHost;
            return this;
        }

        /**
         * @param defaultHost Sets the host header
         * 
         * @return builder
         * 
         */
        public Builder defaultHost(String defaultHost) {
            return defaultHost(Output.of(defaultHost));
        }

        /**
         * @param forceMiss Force a cache miss for the request. If specified, can be `true` or `false`
         * 
         * @return builder
         * 
         */
        public Builder forceMiss(@Nullable Output<Boolean> forceMiss) {
            $.forceMiss = forceMiss;
            return this;
        }

        /**
         * @param forceMiss Force a cache miss for the request. If specified, can be `true` or `false`
         * 
         * @return builder
         * 
         */
        public Builder forceMiss(Boolean forceMiss) {
            return forceMiss(Output.of(forceMiss));
        }

        /**
         * @param forceSsl Forces the request to use SSL (Redirects a non-SSL request to SSL)
         * 
         * @return builder
         * 
         */
        public Builder forceSsl(@Nullable Output<Boolean> forceSsl) {
            $.forceSsl = forceSsl;
            return this;
        }

        /**
         * @param forceSsl Forces the request to use SSL (Redirects a non-SSL request to SSL)
         * 
         * @return builder
         * 
         */
        public Builder forceSsl(Boolean forceSsl) {
            return forceSsl(Output.of(forceSsl));
        }

        /**
         * @param hashKeys Comma separated list of varnish request object fields that should be in the hash key
         * 
         * @return builder
         * 
         */
        public Builder hashKeys(@Nullable Output<String> hashKeys) {
            $.hashKeys = hashKeys;
            return this;
        }

        /**
         * @param hashKeys Comma separated list of varnish request object fields that should be in the hash key
         * 
         * @return builder
         * 
         */
        public Builder hashKeys(String hashKeys) {
            return hashKeys(Output.of(hashKeys));
        }

        /**
         * @param maxStaleAge How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxStaleAge(@Nullable Output<Integer> maxStaleAge) {
            $.maxStaleAge = maxStaleAge;
            return this;
        }

        /**
         * @param maxStaleAge How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds
         * 
         * @return builder
         * 
         */
        public Builder maxStaleAge(Integer maxStaleAge) {
            return maxStaleAge(Output.of(maxStaleAge));
        }

        /**
         * @param name Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requestCondition Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `requestSetting`)
         * 
         * @return builder
         * 
         */
        public Builder requestCondition(@Nullable Output<String> requestCondition) {
            $.requestCondition = requestCondition;
            return this;
        }

        /**
         * @param requestCondition Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `requestSetting`)
         * 
         * @return builder
         * 
         */
        public Builder requestCondition(String requestCondition) {
            return requestCondition(Output.of(requestCondition));
        }

        /**
         * @param timerSupport Injects the X-Timer info into the request for viewing origin fetch durations
         * 
         * @return builder
         * 
         */
        public Builder timerSupport(@Nullable Output<Boolean> timerSupport) {
            $.timerSupport = timerSupport;
            return this;
        }

        /**
         * @param timerSupport Injects the X-Timer info into the request for viewing origin fetch durations
         * 
         * @return builder
         * 
         */
        public Builder timerSupport(Boolean timerSupport) {
            return timerSupport(Output.of(timerSupport));
        }

        /**
         * @param xff X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
         * 
         * @return builder
         * 
         */
        public Builder xff(@Nullable Output<String> xff) {
            $.xff = xff;
            return this;
        }

        /**
         * @param xff X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
         * 
         * @return builder
         * 
         */
        public Builder xff(String xff) {
            return xff(Output.of(xff));
        }

        public ServiceVclRequestSettingArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceVclRequestSettingArgs", "name");
            }
            return $;
        }
    }

}
