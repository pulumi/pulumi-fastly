// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.NgwafThresholdsArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.NgwafThresholdsState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * Provides a Fastly Next-Gen WAF Threshold.  Operations related to managing workspace thresholds.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.NgwafThresholds;
 * import com.pulumi.fastly.NgwafThresholdsArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new NgwafThresholds("demo", NgwafThresholdsArgs.builder()
 *             .action("block")
 *             .dontNotify(false)
 *             .duration(86400)
 *             .enabled(true)
 *             .interval(3600)
 *             .limit(10)
 *             .name("%s")
 *             .signal("SQLI")
 *             .workspaceId(example.id())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Fastly Next-Gen WAF Thresholds can be imported using their workspace and Threshold ID, e.g.
 * 
 * ```sh
 * $ pulumi import fastly:index/ngwafThresholds:NgwafThresholds example &lt;workspace_id&gt;/&lt;threshold_id&gt;
 * ```
 * 
 */
@ResourceType(type="fastly:index/ngwafThresholds:NgwafThresholds")
public class NgwafThresholds extends com.pulumi.resources.CustomResource {
    /**
     * Action to take when threshold is exceeded.
     * 
     */
    @Export(name="action", refs={String.class}, tree="[0]")
    private Output<String> action;

    /**
     * @return Action to take when threshold is exceeded.
     * 
     */
    public Output<String> action() {
        return this.action;
    }
    /**
     * Whether to silence notifications when action is taken.
     * 
     */
    @Export(name="dontNotify", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> dontNotify;

    /**
     * @return Whether to silence notifications when action is taken.
     * 
     */
    public Output<Boolean> dontNotify() {
        return this.dontNotify;
    }
    /**
     * Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
     * 
     */
    @Export(name="duration", refs={Integer.class}, tree="[0]")
    private Output<Integer> duration;

    /**
     * @return Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
     * 
     */
    public Output<Integer> duration() {
        return this.duration;
    }
    /**
     * Whether this threshold is active.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Whether this threshold is active.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
     * 
     */
    @Export(name="interval", refs={Integer.class}, tree="[0]")
    private Output<Integer> interval;

    /**
     * @return Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }
    /**
     * Threshold limit. Minimum 1 and maximum 10,000.
     * 
     */
    @Export(name="limit", refs={Integer.class}, tree="[0]")
    private Output<Integer> limit;

    /**
     * @return Threshold limit. Minimum 1 and maximum 10,000.
     * 
     */
    public Output<Integer> limit() {
        return this.limit;
    }
    /**
     * The name of the threshold.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the threshold.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The name of the signal this threshold is acting on.
     * 
     */
    @Export(name="signal", refs={String.class}, tree="[0]")
    private Output<String> signal;

    /**
     * @return The name of the signal this threshold is acting on.
     * 
     */
    public Output<String> signal() {
        return this.signal;
    }
    /**
     * The ID of the workspace.
     * 
     */
    @Export(name="workspaceId", refs={String.class}, tree="[0]")
    private Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Output<String> workspaceId() {
        return this.workspaceId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public NgwafThresholds(java.lang.String name) {
        this(name, NgwafThresholdsArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public NgwafThresholds(java.lang.String name, NgwafThresholdsArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public NgwafThresholds(java.lang.String name, NgwafThresholdsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/ngwafThresholds:NgwafThresholds", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private NgwafThresholds(java.lang.String name, Output<java.lang.String> id, @Nullable NgwafThresholdsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/ngwafThresholds:NgwafThresholds", name, state, makeResourceOptions(options, id), false);
    }

    private static NgwafThresholdsArgs makeArgs(NgwafThresholdsArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? NgwafThresholdsArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static NgwafThresholds get(java.lang.String name, Output<java.lang.String> id, @Nullable NgwafThresholdsState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new NgwafThresholds(name, id, state, options);
    }
}
