// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.fastly.outputs.NgwafWorkspaceRuleRateLimitClientIdentifier;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class NgwafWorkspaceRuleRateLimit {
    /**
     * @return List of client identifiers used for rate limiting. Can only be length 1 or 2.
     * 
     */
    private List<NgwafWorkspaceRuleRateLimitClientIdentifier> clientIdentifiers;
    /**
     * @return Duration in seconds for the rate limit.
     * 
     */
    private Integer duration;
    /**
     * @return Time interval for the rate limit in seconds. Accepted values are 60, 600, and 3600.
     * 
     */
    private Integer interval;
    /**
     * @return Reference ID of the custom signal this rule uses to count requests.
     * 
     */
    private String signal;
    /**
     * @return Rate limit threshold. Minimum 1 and maximum 10,000.
     * 
     */
    private Integer threshold;

    private NgwafWorkspaceRuleRateLimit() {}
    /**
     * @return List of client identifiers used for rate limiting. Can only be length 1 or 2.
     * 
     */
    public List<NgwafWorkspaceRuleRateLimitClientIdentifier> clientIdentifiers() {
        return this.clientIdentifiers;
    }
    /**
     * @return Duration in seconds for the rate limit.
     * 
     */
    public Integer duration() {
        return this.duration;
    }
    /**
     * @return Time interval for the rate limit in seconds. Accepted values are 60, 600, and 3600.
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return Reference ID of the custom signal this rule uses to count requests.
     * 
     */
    public String signal() {
        return this.signal;
    }
    /**
     * @return Rate limit threshold. Minimum 1 and maximum 10,000.
     * 
     */
    public Integer threshold() {
        return this.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NgwafWorkspaceRuleRateLimit defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<NgwafWorkspaceRuleRateLimitClientIdentifier> clientIdentifiers;
        private Integer duration;
        private Integer interval;
        private String signal;
        private Integer threshold;
        public Builder() {}
        public Builder(NgwafWorkspaceRuleRateLimit defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clientIdentifiers = defaults.clientIdentifiers;
    	      this.duration = defaults.duration;
    	      this.interval = defaults.interval;
    	      this.signal = defaults.signal;
    	      this.threshold = defaults.threshold;
        }

        @CustomType.Setter
        public Builder clientIdentifiers(List<NgwafWorkspaceRuleRateLimitClientIdentifier> clientIdentifiers) {
            if (clientIdentifiers == null) {
              throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimit", "clientIdentifiers");
            }
            this.clientIdentifiers = clientIdentifiers;
            return this;
        }
        public Builder clientIdentifiers(NgwafWorkspaceRuleRateLimitClientIdentifier... clientIdentifiers) {
            return clientIdentifiers(List.of(clientIdentifiers));
        }
        @CustomType.Setter
        public Builder duration(Integer duration) {
            if (duration == null) {
              throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimit", "duration");
            }
            this.duration = duration;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimit", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder signal(String signal) {
            if (signal == null) {
              throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimit", "signal");
            }
            this.signal = signal;
            return this;
        }
        @CustomType.Setter
        public Builder threshold(Integer threshold) {
            if (threshold == null) {
              throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimit", "threshold");
            }
            this.threshold = threshold;
            return this;
        }
        public NgwafWorkspaceRuleRateLimit build() {
            final var _resultValue = new NgwafWorkspaceRuleRateLimit();
            _resultValue.clientIdentifiers = clientIdentifiers;
            _resultValue.duration = duration;
            _resultValue.interval = interval;
            _resultValue.signal = signal;
            _resultValue.threshold = threshold;
            return _resultValue;
        }
    }
}
