// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceACLEntriesEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceACLEntriesEntryArgs Empty = new ServiceACLEntriesEntryArgs();

    /**
     * A personal freeform descriptive note
     * 
     */
    @Import(name="comment")
    private @Nullable Output<String> comment;

    /**
     * @return A personal freeform descriptive note
     * 
     */
    public Optional<Output<String>> comment() {
        return Optional.ofNullable(this.comment);
    }

    /**
     * The unique ID of the entry
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return The unique ID of the entry
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * An IP address that is the focus for the ACL
     * 
     */
    @Import(name="ip", required=true)
    private Output<String> ip;

    /**
     * @return An IP address that is the focus for the ACL
     * 
     */
    public Output<String> ip() {
        return this.ip;
    }

    /**
     * A boolean that will negate the match if true
     * 
     */
    @Import(name="negated")
    private @Nullable Output<Boolean> negated;

    /**
     * @return A boolean that will negate the match if true
     * 
     */
    public Optional<Output<Boolean>> negated() {
        return Optional.ofNullable(this.negated);
    }

    /**
     * An optional subnet mask applied to the IP address
     * 
     */
    @Import(name="subnet")
    private @Nullable Output<String> subnet;

    /**
     * @return An optional subnet mask applied to the IP address
     * 
     */
    public Optional<Output<String>> subnet() {
        return Optional.ofNullable(this.subnet);
    }

    private ServiceACLEntriesEntryArgs() {}

    private ServiceACLEntriesEntryArgs(ServiceACLEntriesEntryArgs $) {
        this.comment = $.comment;
        this.id = $.id;
        this.ip = $.ip;
        this.negated = $.negated;
        this.subnet = $.subnet;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceACLEntriesEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceACLEntriesEntryArgs $;

        public Builder() {
            $ = new ServiceACLEntriesEntryArgs();
        }

        public Builder(ServiceACLEntriesEntryArgs defaults) {
            $ = new ServiceACLEntriesEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comment A personal freeform descriptive note
         * 
         * @return builder
         * 
         */
        public Builder comment(@Nullable Output<String> comment) {
            $.comment = comment;
            return this;
        }

        /**
         * @param comment A personal freeform descriptive note
         * 
         * @return builder
         * 
         */
        public Builder comment(String comment) {
            return comment(Output.of(comment));
        }

        /**
         * @param id The unique ID of the entry
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id The unique ID of the entry
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param ip An IP address that is the focus for the ACL
         * 
         * @return builder
         * 
         */
        public Builder ip(Output<String> ip) {
            $.ip = ip;
            return this;
        }

        /**
         * @param ip An IP address that is the focus for the ACL
         * 
         * @return builder
         * 
         */
        public Builder ip(String ip) {
            return ip(Output.of(ip));
        }

        /**
         * @param negated A boolean that will negate the match if true
         * 
         * @return builder
         * 
         */
        public Builder negated(@Nullable Output<Boolean> negated) {
            $.negated = negated;
            return this;
        }

        /**
         * @param negated A boolean that will negate the match if true
         * 
         * @return builder
         * 
         */
        public Builder negated(Boolean negated) {
            return negated(Output.of(negated));
        }

        /**
         * @param subnet An optional subnet mask applied to the IP address
         * 
         * @return builder
         * 
         */
        public Builder subnet(@Nullable Output<String> subnet) {
            $.subnet = subnet;
            return this;
        }

        /**
         * @param subnet An optional subnet mask applied to the IP address
         * 
         * @return builder
         * 
         */
        public Builder subnet(String subnet) {
            return subnet(Output.of(subnet));
        }

        public ServiceACLEntriesEntryArgs build() {
            if ($.ip == null) {
                throw new MissingRequiredPropertyException("ServiceACLEntriesEntryArgs", "ip");
            }
            return $;
        }
    }

}
