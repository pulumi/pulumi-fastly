// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ConfigstoreEntriesArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConfigstoreEntriesArgs Empty = new ConfigstoreEntriesArgs();

    /**
     * A map representing an entry in the Config Store, (key/value)
     * 
     */
    @Import(name="entries", required=true)
    private Output<Map<String,String>> entries;

    /**
     * @return A map representing an entry in the Config Store, (key/value)
     * 
     */
    public Output<Map<String,String>> entries() {
        return this.entries;
    }

    @Import(name="manageEntries")
    private @Nullable Output<Boolean> manageEntries;

    public Optional<Output<Boolean>> manageEntries() {
        return Optional.ofNullable(this.manageEntries);
    }

    /**
     * An alphanumeric string identifying the Config Store.
     * 
     */
    @Import(name="storeId", required=true)
    private Output<String> storeId;

    /**
     * @return An alphanumeric string identifying the Config Store.
     * 
     */
    public Output<String> storeId() {
        return this.storeId;
    }

    private ConfigstoreEntriesArgs() {}

    private ConfigstoreEntriesArgs(ConfigstoreEntriesArgs $) {
        this.entries = $.entries;
        this.manageEntries = $.manageEntries;
        this.storeId = $.storeId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConfigstoreEntriesArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConfigstoreEntriesArgs $;

        public Builder() {
            $ = new ConfigstoreEntriesArgs();
        }

        public Builder(ConfigstoreEntriesArgs defaults) {
            $ = new ConfigstoreEntriesArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param entries A map representing an entry in the Config Store, (key/value)
         * 
         * @return builder
         * 
         */
        public Builder entries(Output<Map<String,String>> entries) {
            $.entries = entries;
            return this;
        }

        /**
         * @param entries A map representing an entry in the Config Store, (key/value)
         * 
         * @return builder
         * 
         */
        public Builder entries(Map<String,String> entries) {
            return entries(Output.of(entries));
        }

        public Builder manageEntries(@Nullable Output<Boolean> manageEntries) {
            $.manageEntries = manageEntries;
            return this;
        }

        public Builder manageEntries(Boolean manageEntries) {
            return manageEntries(Output.of(manageEntries));
        }

        /**
         * @param storeId An alphanumeric string identifying the Config Store.
         * 
         * @return builder
         * 
         */
        public Builder storeId(Output<String> storeId) {
            $.storeId = storeId;
            return this;
        }

        /**
         * @param storeId An alphanumeric string identifying the Config Store.
         * 
         * @return builder
         * 
         */
        public Builder storeId(String storeId) {
            return storeId(Output.of(storeId));
        }

        public ConfigstoreEntriesArgs build() {
            if ($.entries == null) {
                throw new MissingRequiredPropertyException("ConfigstoreEntriesArgs", "entries");
            }
            if ($.storeId == null) {
                throw new MissingRequiredPropertyException("ConfigstoreEntriesArgs", "storeId");
            }
            return $;
        }
    }

}
