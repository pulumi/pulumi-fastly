// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclDirector {
    /**
     * @return Names of defined backends to map the director to. Example: `[ &#34;origin1&#34;, &#34;origin2&#34; ]`
     * 
     */
    private List<String> backends;
    /**
     * @return An optional comment about the Director
     * 
     */
    private @Nullable String comment;
    /**
     * @return Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
     * 
     */
    private @Nullable Integer quorum;
    /**
     * @return How many backends to search if it fails. Default `5`
     * 
     */
    private @Nullable Integer retries;
    /**
     * @return Selected POP to serve as a &#34;shield&#34; for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
     * 
     */
    private @Nullable String shield;
    /**
     * @return Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
     * 
     */
    private @Nullable Integer type;

    private ServiceVclDirector() {}
    /**
     * @return Names of defined backends to map the director to. Example: `[ &#34;origin1&#34;, &#34;origin2&#34; ]`
     * 
     */
    public List<String> backends() {
        return this.backends;
    }
    /**
     * @return An optional comment about the Director
     * 
     */
    public Optional<String> comment() {
        return Optional.ofNullable(this.comment);
    }
    /**
     * @return Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
     * 
     */
    public Optional<Integer> quorum() {
        return Optional.ofNullable(this.quorum);
    }
    /**
     * @return How many backends to search if it fails. Default `5`
     * 
     */
    public Optional<Integer> retries() {
        return Optional.ofNullable(this.retries);
    }
    /**
     * @return Selected POP to serve as a &#34;shield&#34; for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
     * 
     */
    public Optional<String> shield() {
        return Optional.ofNullable(this.shield);
    }
    /**
     * @return Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
     * 
     */
    public Optional<Integer> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclDirector defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> backends;
        private @Nullable String comment;
        private String name;
        private @Nullable Integer quorum;
        private @Nullable Integer retries;
        private @Nullable String shield;
        private @Nullable Integer type;
        public Builder() {}
        public Builder(ServiceVclDirector defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backends = defaults.backends;
    	      this.comment = defaults.comment;
    	      this.name = defaults.name;
    	      this.quorum = defaults.quorum;
    	      this.retries = defaults.retries;
    	      this.shield = defaults.shield;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder backends(List<String> backends) {
            if (backends == null) {
              throw new MissingRequiredPropertyException("ServiceVclDirector", "backends");
            }
            this.backends = backends;
            return this;
        }
        public Builder backends(String... backends) {
            return backends(List.of(backends));
        }
        @CustomType.Setter
        public Builder comment(@Nullable String comment) {

            this.comment = comment;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceVclDirector", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder quorum(@Nullable Integer quorum) {

            this.quorum = quorum;
            return this;
        }
        @CustomType.Setter
        public Builder retries(@Nullable Integer retries) {

            this.retries = retries;
            return this;
        }
        @CustomType.Setter
        public Builder shield(@Nullable String shield) {

            this.shield = shield;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable Integer type) {

            this.type = type;
            return this;
        }
        public ServiceVclDirector build() {
            final var _resultValue = new ServiceVclDirector();
            _resultValue.backends = backends;
            _resultValue.comment = comment;
            _resultValue.name = name;
            _resultValue.quorum = quorum;
            _resultValue.retries = retries;
            _resultValue.shield = shield;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
