// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsCertificateArgs Empty = new TlsCertificateArgs();

    /**
     * PEM-formatted certificate, optionally including any intermediary certificates.
     * 
     */
    @Import(name="certificateBody", required=true)
    private Output<String> certificateBody;

    /**
     * @return PEM-formatted certificate, optionally including any intermediary certificates.
     * 
     */
    public Output<String> certificateBody() {
        return this.certificateBody;
    }

    /**
     * Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private TlsCertificateArgs() {}

    private TlsCertificateArgs(TlsCertificateArgs $) {
        this.certificateBody = $.certificateBody;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsCertificateArgs $;

        public Builder() {
            $ = new TlsCertificateArgs();
        }

        public Builder(TlsCertificateArgs defaults) {
            $ = new TlsCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateBody PEM-formatted certificate, optionally including any intermediary certificates.
         * 
         * @return builder
         * 
         */
        public Builder certificateBody(Output<String> certificateBody) {
            $.certificateBody = certificateBody;
            return this;
        }

        /**
         * @param certificateBody PEM-formatted certificate, optionally including any intermediary certificates.
         * 
         * @return builder
         * 
         */
        public Builder certificateBody(String certificateBody) {
            return certificateBody(Output.of(certificateBody));
        }

        /**
         * @param name Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public TlsCertificateArgs build() {
            if ($.certificateBody == null) {
                throw new MissingRequiredPropertyException("TlsCertificateArgs", "certificateBody");
            }
            return $;
        }
    }

}
