// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsCertificateState extends com.pulumi.resources.ResourceArgs {

    public static final TlsCertificateState Empty = new TlsCertificateState();

    /**
     * PEM-formatted certificate, optionally including any intermediary certificates.
     * 
     */
    @Import(name="certificateBody")
    private @Nullable Output<String> certificateBody;

    /**
     * @return PEM-formatted certificate, optionally including any intermediary certificates.
     * 
     */
    public Optional<Output<String>> certificateBody() {
        return Optional.ofNullable(this.certificateBody);
    }

    /**
     * Timestamp (GMT) when the certificate was created.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp (GMT) when the certificate was created.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * All the domains (including wildcard domains) that are listed in the certificate&#39;s Subject Alternative Names (SAN) list.
     * 
     */
    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    /**
     * @return All the domains (including wildcard domains) that are listed in the certificate&#39;s Subject Alternative Names (SAN) list.
     * 
     */
    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * The hostname for which a certificate was issued.
     * 
     */
    @Import(name="issuedTo")
    private @Nullable Output<String> issuedTo;

    /**
     * @return The hostname for which a certificate was issued.
     * 
     */
    public Optional<Output<String>> issuedTo() {
        return Optional.ofNullable(this.issuedTo);
    }

    /**
     * The certificate authority that issued the certificate.
     * 
     */
    @Import(name="issuer")
    private @Nullable Output<String> issuer;

    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    public Optional<Output<String>> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     * 
     */
    @Import(name="replace")
    private @Nullable Output<Boolean> replace;

    /**
     * @return A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     * 
     */
    public Optional<Output<Boolean>> replace() {
        return Optional.ofNullable(this.replace);
    }

    /**
     * A value assigned by the issuer that is unique to a certificate.
     * 
     */
    @Import(name="serialNumber")
    private @Nullable Output<String> serialNumber;

    /**
     * @return A value assigned by the issuer that is unique to a certificate.
     * 
     */
    public Optional<Output<String>> serialNumber() {
        return Optional.ofNullable(this.serialNumber);
    }

    /**
     * The algorithm used to sign the certificate.
     * 
     */
    @Import(name="signatureAlgorithm")
    private @Nullable Output<String> signatureAlgorithm;

    /**
     * @return The algorithm used to sign the certificate.
     * 
     */
    public Optional<Output<String>> signatureAlgorithm() {
        return Optional.ofNullable(this.signatureAlgorithm);
    }

    /**
     * Timestamp (GMT) when the certificate was last updated.
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return Timestamp (GMT) when the certificate was last updated.
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    private TlsCertificateState() {}

    private TlsCertificateState(TlsCertificateState $) {
        this.certificateBody = $.certificateBody;
        this.createdAt = $.createdAt;
        this.domains = $.domains;
        this.issuedTo = $.issuedTo;
        this.issuer = $.issuer;
        this.name = $.name;
        this.replace = $.replace;
        this.serialNumber = $.serialNumber;
        this.signatureAlgorithm = $.signatureAlgorithm;
        this.updatedAt = $.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsCertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsCertificateState $;

        public Builder() {
            $ = new TlsCertificateState();
        }

        public Builder(TlsCertificateState defaults) {
            $ = new TlsCertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateBody PEM-formatted certificate, optionally including any intermediary certificates.
         * 
         * @return builder
         * 
         */
        public Builder certificateBody(@Nullable Output<String> certificateBody) {
            $.certificateBody = certificateBody;
            return this;
        }

        /**
         * @param certificateBody PEM-formatted certificate, optionally including any intermediary certificates.
         * 
         * @return builder
         * 
         */
        public Builder certificateBody(String certificateBody) {
            return certificateBody(Output.of(certificateBody));
        }

        /**
         * @param createdAt Timestamp (GMT) when the certificate was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp (GMT) when the certificate was created.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param domains All the domains (including wildcard domains) that are listed in the certificate&#39;s Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains All the domains (including wildcard domains) that are listed in the certificate&#39;s Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains All the domains (including wildcard domains) that are listed in the certificate&#39;s Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param issuedTo The hostname for which a certificate was issued.
         * 
         * @return builder
         * 
         */
        public Builder issuedTo(@Nullable Output<String> issuedTo) {
            $.issuedTo = issuedTo;
            return this;
        }

        /**
         * @param issuedTo The hostname for which a certificate was issued.
         * 
         * @return builder
         * 
         */
        public Builder issuedTo(String issuedTo) {
            return issuedTo(Output.of(issuedTo));
        }

        /**
         * @param issuer The certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable Output<String> issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param issuer The certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuer(String issuer) {
            return issuer(Output.of(issuer));
        }

        /**
         * @param name Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param replace A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
         * 
         * @return builder
         * 
         */
        public Builder replace(@Nullable Output<Boolean> replace) {
            $.replace = replace;
            return this;
        }

        /**
         * @param replace A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
         * 
         * @return builder
         * 
         */
        public Builder replace(Boolean replace) {
            return replace(Output.of(replace));
        }

        /**
         * @param serialNumber A value assigned by the issuer that is unique to a certificate.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(@Nullable Output<String> serialNumber) {
            $.serialNumber = serialNumber;
            return this;
        }

        /**
         * @param serialNumber A value assigned by the issuer that is unique to a certificate.
         * 
         * @return builder
         * 
         */
        public Builder serialNumber(String serialNumber) {
            return serialNumber(Output.of(serialNumber));
        }

        /**
         * @param signatureAlgorithm The algorithm used to sign the certificate.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(@Nullable Output<String> signatureAlgorithm) {
            $.signatureAlgorithm = signatureAlgorithm;
            return this;
        }

        /**
         * @param signatureAlgorithm The algorithm used to sign the certificate.
         * 
         * @return builder
         * 
         */
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            return signatureAlgorithm(Output.of(signatureAlgorithm));
        }

        /**
         * @param updatedAt Timestamp (GMT) when the certificate was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt Timestamp (GMT) when the certificate was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        public TlsCertificateState build() {
            return $;
        }
    }

}
