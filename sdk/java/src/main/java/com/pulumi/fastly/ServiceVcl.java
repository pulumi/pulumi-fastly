// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.ServiceVclArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.ServiceVclState;
import com.pulumi.fastly.outputs.ServiceVclAcl;
import com.pulumi.fastly.outputs.ServiceVclBackend;
import com.pulumi.fastly.outputs.ServiceVclCacheSetting;
import com.pulumi.fastly.outputs.ServiceVclCondition;
import com.pulumi.fastly.outputs.ServiceVclDictionary;
import com.pulumi.fastly.outputs.ServiceVclDirector;
import com.pulumi.fastly.outputs.ServiceVclDomain;
import com.pulumi.fastly.outputs.ServiceVclDynamicsnippet;
import com.pulumi.fastly.outputs.ServiceVclGzip;
import com.pulumi.fastly.outputs.ServiceVclHeader;
import com.pulumi.fastly.outputs.ServiceVclHealthcheck;
import com.pulumi.fastly.outputs.ServiceVclLoggingBigquery;
import com.pulumi.fastly.outputs.ServiceVclLoggingBlobstorage;
import com.pulumi.fastly.outputs.ServiceVclLoggingCloudfile;
import com.pulumi.fastly.outputs.ServiceVclLoggingDatadog;
import com.pulumi.fastly.outputs.ServiceVclLoggingDigitalocean;
import com.pulumi.fastly.outputs.ServiceVclLoggingElasticsearch;
import com.pulumi.fastly.outputs.ServiceVclLoggingFtp;
import com.pulumi.fastly.outputs.ServiceVclLoggingGc;
import com.pulumi.fastly.outputs.ServiceVclLoggingGooglepubsub;
import com.pulumi.fastly.outputs.ServiceVclLoggingHerokus;
import com.pulumi.fastly.outputs.ServiceVclLoggingHoneycomb;
import com.pulumi.fastly.outputs.ServiceVclLoggingHttp;
import com.pulumi.fastly.outputs.ServiceVclLoggingKafka;
import com.pulumi.fastly.outputs.ServiceVclLoggingKinese;
import com.pulumi.fastly.outputs.ServiceVclLoggingLogentry;
import com.pulumi.fastly.outputs.ServiceVclLoggingLoggly;
import com.pulumi.fastly.outputs.ServiceVclLoggingLogshuttle;
import com.pulumi.fastly.outputs.ServiceVclLoggingNewrelic;
import com.pulumi.fastly.outputs.ServiceVclLoggingOpenstack;
import com.pulumi.fastly.outputs.ServiceVclLoggingPapertrail;
import com.pulumi.fastly.outputs.ServiceVclLoggingS3;
import com.pulumi.fastly.outputs.ServiceVclLoggingScalyr;
import com.pulumi.fastly.outputs.ServiceVclLoggingSftp;
import com.pulumi.fastly.outputs.ServiceVclLoggingSplunk;
import com.pulumi.fastly.outputs.ServiceVclLoggingSumologic;
import com.pulumi.fastly.outputs.ServiceVclLoggingSyslog;
import com.pulumi.fastly.outputs.ServiceVclRequestSetting;
import com.pulumi.fastly.outputs.ServiceVclResponseObject;
import com.pulumi.fastly.outputs.ServiceVclSnippet;
import com.pulumi.fastly.outputs.ServiceVclVcl;
import com.pulumi.fastly.outputs.ServiceVclWaf;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a Fastly Service, representing the configuration for a website, app,
 * API, or anything else to be served through Fastly. A Service encompasses Domains
 * and Backends.
 * 
 * The Service resource requires a domain name that is correctly set up to direct
 * traffic to the Fastly service. See Fastly&#39;s guide on [Adding CNAME Records][fastly-cname]
 * on their documentation site for guidance.
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;localhost&#34;)
 *                 .port(80)
 *                 .build())
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .comment(&#34;demo&#34;)
 *                 .name(&#34;demo.notexample.com&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Basic usage with an Amazon S3 Website and that removes the `x-amz-request-id` header:
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclGzipArgs;
 * import com.pulumi.fastly.inputs.ServiceVclHeaderArgs;
 * import com.pulumi.aws.s3.BucketV2;
 * import com.pulumi.aws.s3.BucketV2Args;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;demo.notexample.com.s3-website-us-west-2.amazonaws.com&#34;)
 *                 .name(&#34;AWS S3 hosting&#34;)
 *                 .overrideHost(&#34;demo.notexample.com.s3-website-us-west-2.amazonaws.com&#34;)
 *                 .port(80)
 *                 .build())
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .comment(&#34;demo&#34;)
 *                 .name(&#34;demo.notexample.com&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .gzips(ServiceVclGzipArgs.builder()
 *                 .contentTypes(                
 *                     &#34;text/html&#34;,
 *                     &#34;text/css&#34;)
 *                 .extensions(                
 *                     &#34;css&#34;,
 *                     &#34;js&#34;)
 *                 .name(&#34;file extensions and content types&#34;)
 *                 .build())
 *             .headers(ServiceVclHeaderArgs.builder()
 *                 .action(&#34;delete&#34;)
 *                 .destination(&#34;http.x-amz-request-id&#34;)
 *                 .name(&#34;remove x-amz-request-id&#34;)
 *                 .type(&#34;cache&#34;)
 *                 .build())
 *             .build());
 * 
 *         var website = new BucketV2(&#34;website&#34;, BucketV2Args.builder()        
 *             .acl(&#34;public-read&#34;)
 *             .websites(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Basic usage with [custom
 * VCL](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/):
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclVclArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;localhost&#34;)
 *                 .port(80)
 *                 .build())
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .comment(&#34;demo&#34;)
 *                 .name(&#34;demo.notexample.com&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .vcls(            
 *                 ServiceVclVclArgs.builder()
 *                     .content(Files.readString(Paths.get(String.format(&#34;%s/my_custom_main.vcl&#34;, path.module()))))
 *                     .main(true)
 *                     .name(&#34;my_custom_main_vcl&#34;)
 *                     .build(),
 *                 ServiceVclVclArgs.builder()
 *                     .content(Files.readString(Paths.get(String.format(&#34;%s/my_custom_library.vcl&#34;, path.module()))))
 *                     .name(&#34;my_custom_library_vcl&#34;)
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Basic usage with [custom Director](https://developer.fastly.com/reference/api/load-balancing/directors/director/):
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDirectorArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .backends(            
 *                 ServiceVclBackendArgs.builder()
 *                     .address(&#34;127.0.0.1&#34;)
 *                     .name(&#34;origin1&#34;)
 *                     .port(80)
 *                     .build(),
 *                 ServiceVclBackendArgs.builder()
 *                     .address(&#34;127.0.0.2&#34;)
 *                     .name(&#34;origin2&#34;)
 *                     .port(80)
 *                     .build())
 *             .directors(ServiceVclDirectorArgs.builder()
 *                 .backends(                
 *                     &#34;origin1&#34;,
 *                     &#34;origin2&#34;)
 *                 .name(&#34;mydirector&#34;)
 *                 .quorum(0)
 *                 .type(3)
 *                 .build())
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .comment(&#34;demo&#34;)
 *                 .name(&#34;demo.notexample.com&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * Basic usage with [Web Application Firewall](https://developer.fastly.com/reference/api/waf/):
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.ServiceVcl;
 * import com.pulumi.fastly.ServiceVclArgs;
 * import com.pulumi.fastly.inputs.ServiceVclBackendArgs;
 * import com.pulumi.fastly.inputs.ServiceVclConditionArgs;
 * import com.pulumi.fastly.inputs.ServiceVclDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceVclResponseObjectArgs;
 * import com.pulumi.fastly.inputs.ServiceVclWafArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var demo = new ServiceVcl(&#34;demo&#34;, ServiceVclArgs.builder()        
 *             .backends(ServiceVclBackendArgs.builder()
 *                 .address(&#34;127.0.0.1&#34;)
 *                 .name(&#34;origin1&#34;)
 *                 .port(80)
 *                 .build())
 *             .conditions(            
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_Prefetch&#34;)
 *                     .statement(&#34;req.backend.is_origin&#34;)
 *                     .type(&#34;PREFETCH&#34;)
 *                     .build(),
 *                 ServiceVclConditionArgs.builder()
 *                     .name(&#34;WAF_always_false&#34;)
 *                     .statement(&#34;false&#34;)
 *                     .type(&#34;REQUEST&#34;)
 *                     .build())
 *             .domains(ServiceVclDomainArgs.builder()
 *                 .comment(&#34;demo&#34;)
 *                 .name(&#34;example.com&#34;)
 *                 .build())
 *             .forceDestroy(true)
 *             .responseObjects(ServiceVclResponseObjectArgs.builder()
 *                 .content(&#34;&lt;html&gt;&lt;body&gt;Forbidden&lt;/body&gt;&lt;/html&gt;&#34;)
 *                 .contentType(&#34;text/html&#34;)
 *                 .name(&#34;WAF_Response&#34;)
 *                 .requestCondition(&#34;WAF_always_false&#34;)
 *                 .response(&#34;Forbidden&#34;)
 *                 .status(&#34;403&#34;)
 *                 .build())
 *             .waf(ServiceVclWafArgs.builder()
 *                 .prefetchCondition(&#34;WAF_Prefetch&#34;)
 *                 .responseObject(&#34;WAF_Response&#34;)
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * &gt; **Note:** For an AWS S3 Bucket, the Backend address is
 * `&lt;domain&gt;.s3-website-&lt;region&gt;.amazonaws.com`. The `override_host` attribute
 * should be set to `&lt;bucket_name&gt;.s3-website-&lt;region&gt;.amazonaws.com` in the `backend` block. See the
 * Fastly documentation on [Amazon S3][fastly-s3].
 * 
 * [fastly-s3]: https://docs.fastly.com/en/guides/amazon-s3
 * [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
 * [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
 * [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
 * [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/
 * 
 * ## Import
 * 
 * Fastly Services can be imported using their service ID, e.g.
 * 
 * ```sh
 *  $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx
 * ```
 * 
 *  By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
 * 
 * ```sh
 *  $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2
 * ```
 * 
 */
@ResourceType(type="fastly:index/serviceVcl:ServiceVcl")
public class ServiceVcl extends com.pulumi.resources.CustomResource {
    @Export(name="acls", type=List.class, parameters={ServiceVclAcl.class})
    private Output</* @Nullable */ List<ServiceVclAcl>> acls;

    public Output<Optional<List<ServiceVclAcl>>> acls() {
        return Codegen.optional(this.acls);
    }
    /**
     * Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     * 
     */
    @Export(name="activate", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> activate;

    /**
     * @return Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     * 
     */
    public Output<Optional<Boolean>> activate() {
        return Codegen.optional(this.activate);
    }
    /**
     * The currently active version of your Fastly Service
     * 
     */
    @Export(name="activeVersion", type=Integer.class, parameters={})
    private Output<Integer> activeVersion;

    /**
     * @return The currently active version of your Fastly Service
     * 
     */
    public Output<Integer> activeVersion() {
        return this.activeVersion;
    }
    @Export(name="backends", type=List.class, parameters={ServiceVclBackend.class})
    private Output</* @Nullable */ List<ServiceVclBackend>> backends;

    public Output<Optional<List<ServiceVclBackend>>> backends() {
        return Codegen.optional(this.backends);
    }
    @Export(name="cacheSettings", type=List.class, parameters={ServiceVclCacheSetting.class})
    private Output</* @Nullable */ List<ServiceVclCacheSetting>> cacheSettings;

    public Output<Optional<List<ServiceVclCacheSetting>>> cacheSettings() {
        return Codegen.optional(this.cacheSettings);
    }
    /**
     * The latest cloned version by the provider
     * 
     */
    @Export(name="clonedVersion", type=Integer.class, parameters={})
    private Output<Integer> clonedVersion;

    /**
     * @return The latest cloned version by the provider
     * 
     */
    public Output<Integer> clonedVersion() {
        return this.clonedVersion;
    }
    /**
     * Description field for the service. Default `Managed by Terraform`
     * 
     */
    @Export(name="comment", type=String.class, parameters={})
    private Output</* @Nullable */ String> comment;

    /**
     * @return Description field for the service. Default `Managed by Terraform`
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    @Export(name="conditions", type=List.class, parameters={ServiceVclCondition.class})
    private Output</* @Nullable */ List<ServiceVclCondition>> conditions;

    public Output<Optional<List<ServiceVclCondition>>> conditions() {
        return Codegen.optional(this.conditions);
    }
    /**
     * The default hostname
     * 
     */
    @Export(name="defaultHost", type=String.class, parameters={})
    private Output</* @Nullable */ String> defaultHost;

    /**
     * @return The default hostname
     * 
     */
    public Output<Optional<String>> defaultHost() {
        return Codegen.optional(this.defaultHost);
    }
    /**
     * The default Time-to-live (TTL) for requests
     * 
     */
    @Export(name="defaultTtl", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> defaultTtl;

    /**
     * @return The default Time-to-live (TTL) for requests
     * 
     */
    public Output<Optional<Integer>> defaultTtl() {
        return Codegen.optional(this.defaultTtl);
    }
    @Export(name="dictionaries", type=List.class, parameters={ServiceVclDictionary.class})
    private Output</* @Nullable */ List<ServiceVclDictionary>> dictionaries;

    public Output<Optional<List<ServiceVclDictionary>>> dictionaries() {
        return Codegen.optional(this.dictionaries);
    }
    @Export(name="directors", type=List.class, parameters={ServiceVclDirector.class})
    private Output</* @Nullable */ List<ServiceVclDirector>> directors;

    public Output<Optional<List<ServiceVclDirector>>> directors() {
        return Codegen.optional(this.directors);
    }
    /**
     * A set of Domain names to serve as entry points for your Service
     * 
     */
    @Export(name="domains", type=List.class, parameters={ServiceVclDomain.class})
    private Output<List<ServiceVclDomain>> domains;

    /**
     * @return A set of Domain names to serve as entry points for your Service
     * 
     */
    public Output<List<ServiceVclDomain>> domains() {
        return this.domains;
    }
    @Export(name="dynamicsnippets", type=List.class, parameters={ServiceVclDynamicsnippet.class})
    private Output</* @Nullable */ List<ServiceVclDynamicsnippet>> dynamicsnippets;

    public Output<Optional<List<ServiceVclDynamicsnippet>>> dynamicsnippets() {
        return Codegen.optional(this.dynamicsnippets);
    }
    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
     * 
     */
    @Export(name="forceDestroy", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
     * 
     */
    public Output<Optional<Boolean>> forceDestroy() {
        return Codegen.optional(this.forceDestroy);
    }
    @Export(name="gzips", type=List.class, parameters={ServiceVclGzip.class})
    private Output</* @Nullable */ List<ServiceVclGzip>> gzips;

    public Output<Optional<List<ServiceVclGzip>>> gzips() {
        return Codegen.optional(this.gzips);
    }
    @Export(name="headers", type=List.class, parameters={ServiceVclHeader.class})
    private Output</* @Nullable */ List<ServiceVclHeader>> headers;

    public Output<Optional<List<ServiceVclHeader>>> headers() {
        return Codegen.optional(this.headers);
    }
    @Export(name="healthchecks", type=List.class, parameters={ServiceVclHealthcheck.class})
    private Output</* @Nullable */ List<ServiceVclHealthcheck>> healthchecks;

    public Output<Optional<List<ServiceVclHealthcheck>>> healthchecks() {
        return Codegen.optional(this.healthchecks);
    }
    /**
     * Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
     * 
     */
    @Export(name="imported", type=Boolean.class, parameters={})
    private Output<Boolean> imported;

    /**
     * @return Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
     * 
     */
    public Output<Boolean> imported() {
        return this.imported;
    }
    @Export(name="loggingBigqueries", type=List.class, parameters={ServiceVclLoggingBigquery.class})
    private Output</* @Nullable */ List<ServiceVclLoggingBigquery>> loggingBigqueries;

    public Output<Optional<List<ServiceVclLoggingBigquery>>> loggingBigqueries() {
        return Codegen.optional(this.loggingBigqueries);
    }
    @Export(name="loggingBlobstorages", type=List.class, parameters={ServiceVclLoggingBlobstorage.class})
    private Output</* @Nullable */ List<ServiceVclLoggingBlobstorage>> loggingBlobstorages;

    public Output<Optional<List<ServiceVclLoggingBlobstorage>>> loggingBlobstorages() {
        return Codegen.optional(this.loggingBlobstorages);
    }
    @Export(name="loggingCloudfiles", type=List.class, parameters={ServiceVclLoggingCloudfile.class})
    private Output</* @Nullable */ List<ServiceVclLoggingCloudfile>> loggingCloudfiles;

    public Output<Optional<List<ServiceVclLoggingCloudfile>>> loggingCloudfiles() {
        return Codegen.optional(this.loggingCloudfiles);
    }
    @Export(name="loggingDatadogs", type=List.class, parameters={ServiceVclLoggingDatadog.class})
    private Output</* @Nullable */ List<ServiceVclLoggingDatadog>> loggingDatadogs;

    public Output<Optional<List<ServiceVclLoggingDatadog>>> loggingDatadogs() {
        return Codegen.optional(this.loggingDatadogs);
    }
    @Export(name="loggingDigitaloceans", type=List.class, parameters={ServiceVclLoggingDigitalocean.class})
    private Output</* @Nullable */ List<ServiceVclLoggingDigitalocean>> loggingDigitaloceans;

    public Output<Optional<List<ServiceVclLoggingDigitalocean>>> loggingDigitaloceans() {
        return Codegen.optional(this.loggingDigitaloceans);
    }
    @Export(name="loggingElasticsearches", type=List.class, parameters={ServiceVclLoggingElasticsearch.class})
    private Output</* @Nullable */ List<ServiceVclLoggingElasticsearch>> loggingElasticsearches;

    public Output<Optional<List<ServiceVclLoggingElasticsearch>>> loggingElasticsearches() {
        return Codegen.optional(this.loggingElasticsearches);
    }
    @Export(name="loggingFtps", type=List.class, parameters={ServiceVclLoggingFtp.class})
    private Output</* @Nullable */ List<ServiceVclLoggingFtp>> loggingFtps;

    public Output<Optional<List<ServiceVclLoggingFtp>>> loggingFtps() {
        return Codegen.optional(this.loggingFtps);
    }
    @Export(name="loggingGcs", type=List.class, parameters={ServiceVclLoggingGc.class})
    private Output</* @Nullable */ List<ServiceVclLoggingGc>> loggingGcs;

    public Output<Optional<List<ServiceVclLoggingGc>>> loggingGcs() {
        return Codegen.optional(this.loggingGcs);
    }
    @Export(name="loggingGooglepubsubs", type=List.class, parameters={ServiceVclLoggingGooglepubsub.class})
    private Output</* @Nullable */ List<ServiceVclLoggingGooglepubsub>> loggingGooglepubsubs;

    public Output<Optional<List<ServiceVclLoggingGooglepubsub>>> loggingGooglepubsubs() {
        return Codegen.optional(this.loggingGooglepubsubs);
    }
    @Export(name="loggingHerokus", type=List.class, parameters={ServiceVclLoggingHerokus.class})
    private Output</* @Nullable */ List<ServiceVclLoggingHerokus>> loggingHerokus;

    public Output<Optional<List<ServiceVclLoggingHerokus>>> loggingHerokus() {
        return Codegen.optional(this.loggingHerokus);
    }
    @Export(name="loggingHoneycombs", type=List.class, parameters={ServiceVclLoggingHoneycomb.class})
    private Output</* @Nullable */ List<ServiceVclLoggingHoneycomb>> loggingHoneycombs;

    public Output<Optional<List<ServiceVclLoggingHoneycomb>>> loggingHoneycombs() {
        return Codegen.optional(this.loggingHoneycombs);
    }
    @Export(name="loggingHttps", type=List.class, parameters={ServiceVclLoggingHttp.class})
    private Output</* @Nullable */ List<ServiceVclLoggingHttp>> loggingHttps;

    public Output<Optional<List<ServiceVclLoggingHttp>>> loggingHttps() {
        return Codegen.optional(this.loggingHttps);
    }
    @Export(name="loggingKafkas", type=List.class, parameters={ServiceVclLoggingKafka.class})
    private Output</* @Nullable */ List<ServiceVclLoggingKafka>> loggingKafkas;

    public Output<Optional<List<ServiceVclLoggingKafka>>> loggingKafkas() {
        return Codegen.optional(this.loggingKafkas);
    }
    @Export(name="loggingKineses", type=List.class, parameters={ServiceVclLoggingKinese.class})
    private Output</* @Nullable */ List<ServiceVclLoggingKinese>> loggingKineses;

    public Output<Optional<List<ServiceVclLoggingKinese>>> loggingKineses() {
        return Codegen.optional(this.loggingKineses);
    }
    @Export(name="loggingLogentries", type=List.class, parameters={ServiceVclLoggingLogentry.class})
    private Output</* @Nullable */ List<ServiceVclLoggingLogentry>> loggingLogentries;

    public Output<Optional<List<ServiceVclLoggingLogentry>>> loggingLogentries() {
        return Codegen.optional(this.loggingLogentries);
    }
    @Export(name="loggingLogglies", type=List.class, parameters={ServiceVclLoggingLoggly.class})
    private Output</* @Nullable */ List<ServiceVclLoggingLoggly>> loggingLogglies;

    public Output<Optional<List<ServiceVclLoggingLoggly>>> loggingLogglies() {
        return Codegen.optional(this.loggingLogglies);
    }
    @Export(name="loggingLogshuttles", type=List.class, parameters={ServiceVclLoggingLogshuttle.class})
    private Output</* @Nullable */ List<ServiceVclLoggingLogshuttle>> loggingLogshuttles;

    public Output<Optional<List<ServiceVclLoggingLogshuttle>>> loggingLogshuttles() {
        return Codegen.optional(this.loggingLogshuttles);
    }
    @Export(name="loggingNewrelics", type=List.class, parameters={ServiceVclLoggingNewrelic.class})
    private Output</* @Nullable */ List<ServiceVclLoggingNewrelic>> loggingNewrelics;

    public Output<Optional<List<ServiceVclLoggingNewrelic>>> loggingNewrelics() {
        return Codegen.optional(this.loggingNewrelics);
    }
    @Export(name="loggingOpenstacks", type=List.class, parameters={ServiceVclLoggingOpenstack.class})
    private Output</* @Nullable */ List<ServiceVclLoggingOpenstack>> loggingOpenstacks;

    public Output<Optional<List<ServiceVclLoggingOpenstack>>> loggingOpenstacks() {
        return Codegen.optional(this.loggingOpenstacks);
    }
    @Export(name="loggingPapertrails", type=List.class, parameters={ServiceVclLoggingPapertrail.class})
    private Output</* @Nullable */ List<ServiceVclLoggingPapertrail>> loggingPapertrails;

    public Output<Optional<List<ServiceVclLoggingPapertrail>>> loggingPapertrails() {
        return Codegen.optional(this.loggingPapertrails);
    }
    @Export(name="loggingS3s", type=List.class, parameters={ServiceVclLoggingS3.class})
    private Output</* @Nullable */ List<ServiceVclLoggingS3>> loggingS3s;

    public Output<Optional<List<ServiceVclLoggingS3>>> loggingS3s() {
        return Codegen.optional(this.loggingS3s);
    }
    @Export(name="loggingScalyrs", type=List.class, parameters={ServiceVclLoggingScalyr.class})
    private Output</* @Nullable */ List<ServiceVclLoggingScalyr>> loggingScalyrs;

    public Output<Optional<List<ServiceVclLoggingScalyr>>> loggingScalyrs() {
        return Codegen.optional(this.loggingScalyrs);
    }
    @Export(name="loggingSftps", type=List.class, parameters={ServiceVclLoggingSftp.class})
    private Output</* @Nullable */ List<ServiceVclLoggingSftp>> loggingSftps;

    public Output<Optional<List<ServiceVclLoggingSftp>>> loggingSftps() {
        return Codegen.optional(this.loggingSftps);
    }
    @Export(name="loggingSplunks", type=List.class, parameters={ServiceVclLoggingSplunk.class})
    private Output</* @Nullable */ List<ServiceVclLoggingSplunk>> loggingSplunks;

    public Output<Optional<List<ServiceVclLoggingSplunk>>> loggingSplunks() {
        return Codegen.optional(this.loggingSplunks);
    }
    @Export(name="loggingSumologics", type=List.class, parameters={ServiceVclLoggingSumologic.class})
    private Output</* @Nullable */ List<ServiceVclLoggingSumologic>> loggingSumologics;

    public Output<Optional<List<ServiceVclLoggingSumologic>>> loggingSumologics() {
        return Codegen.optional(this.loggingSumologics);
    }
    @Export(name="loggingSyslogs", type=List.class, parameters={ServiceVclLoggingSyslog.class})
    private Output</* @Nullable */ List<ServiceVclLoggingSyslog>> loggingSyslogs;

    public Output<Optional<List<ServiceVclLoggingSyslog>>> loggingSyslogs() {
        return Codegen.optional(this.loggingSyslogs);
    }
    /**
     * The unique name for the Service to create
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The unique name for the Service to create
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="requestSettings", type=List.class, parameters={ServiceVclRequestSetting.class})
    private Output</* @Nullable */ List<ServiceVclRequestSetting>> requestSettings;

    public Output<Optional<List<ServiceVclRequestSetting>>> requestSettings() {
        return Codegen.optional(this.requestSettings);
    }
    @Export(name="responseObjects", type=List.class, parameters={ServiceVclResponseObject.class})
    private Output</* @Nullable */ List<ServiceVclResponseObject>> responseObjects;

    public Output<Optional<List<ServiceVclResponseObject>>> responseObjects() {
        return Codegen.optional(this.responseObjects);
    }
    /**
     * Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
     * deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
     * an active service will cause an error. Default `false`
     * 
     */
    @Export(name="reuse", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> reuse;

    /**
     * @return Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
     * deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
     * an active service will cause an error. Default `false`
     * 
     */
    public Output<Optional<Boolean>> reuse() {
        return Codegen.optional(this.reuse);
    }
    @Export(name="snippets", type=List.class, parameters={ServiceVclSnippet.class})
    private Output</* @Nullable */ List<ServiceVclSnippet>> snippets;

    public Output<Optional<List<ServiceVclSnippet>>> snippets() {
        return Codegen.optional(this.snippets);
    }
    /**
     * Enables serving a stale object if there is an error
     * 
     */
    @Export(name="staleIfError", type=Boolean.class, parameters={})
    private Output</* @Nullable */ Boolean> staleIfError;

    /**
     * @return Enables serving a stale object if there is an error
     * 
     */
    public Output<Optional<Boolean>> staleIfError() {
        return Codegen.optional(this.staleIfError);
    }
    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     * 
     */
    @Export(name="staleIfErrorTtl", type=Integer.class, parameters={})
    private Output</* @Nullable */ Integer> staleIfErrorTtl;

    /**
     * @return The default time-to-live (TTL) for serving the stale object for the version
     * 
     */
    public Output<Optional<Integer>> staleIfErrorTtl() {
        return Codegen.optional(this.staleIfErrorTtl);
    }
    @Export(name="vcls", type=List.class, parameters={ServiceVclVcl.class})
    private Output</* @Nullable */ List<ServiceVclVcl>> vcls;

    public Output<Optional<List<ServiceVclVcl>>> vcls() {
        return Codegen.optional(this.vcls);
    }
    /**
     * Description field for the version
     * 
     */
    @Export(name="versionComment", type=String.class, parameters={})
    private Output</* @Nullable */ String> versionComment;

    /**
     * @return Description field for the version
     * 
     */
    public Output<Optional<String>> versionComment() {
        return Codegen.optional(this.versionComment);
    }
    @Export(name="waf", type=ServiceVclWaf.class, parameters={})
    private Output</* @Nullable */ ServiceVclWaf> waf;

    public Output<Optional<ServiceVclWaf>> waf() {
        return Codegen.optional(this.waf);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceVcl(String name) {
        this(name, ServiceVclArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceVcl(String name, ServiceVclArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceVcl(String name, ServiceVclArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/serviceVcl:ServiceVcl", name, args == null ? ServiceVclArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServiceVcl(String name, Output<String> id, @Nullable ServiceVclState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/serviceVcl:ServiceVcl", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceVcl get(String name, Output<String> id, @Nullable ServiceVclState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceVcl(name, id, state, options);
    }
}
