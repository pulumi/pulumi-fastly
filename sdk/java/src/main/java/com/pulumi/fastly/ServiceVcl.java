// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.ServiceVclArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.ServiceVclState;
import com.pulumi.fastly.outputs.ServiceVclAcl;
import com.pulumi.fastly.outputs.ServiceVclBackend;
import com.pulumi.fastly.outputs.ServiceVclCacheSetting;
import com.pulumi.fastly.outputs.ServiceVclCondition;
import com.pulumi.fastly.outputs.ServiceVclDictionary;
import com.pulumi.fastly.outputs.ServiceVclDirector;
import com.pulumi.fastly.outputs.ServiceVclDomain;
import com.pulumi.fastly.outputs.ServiceVclDynamicsnippet;
import com.pulumi.fastly.outputs.ServiceVclGzip;
import com.pulumi.fastly.outputs.ServiceVclHeader;
import com.pulumi.fastly.outputs.ServiceVclHealthcheck;
import com.pulumi.fastly.outputs.ServiceVclLoggingBigquery;
import com.pulumi.fastly.outputs.ServiceVclLoggingBlobstorage;
import com.pulumi.fastly.outputs.ServiceVclLoggingCloudfile;
import com.pulumi.fastly.outputs.ServiceVclLoggingDatadog;
import com.pulumi.fastly.outputs.ServiceVclLoggingDigitalocean;
import com.pulumi.fastly.outputs.ServiceVclLoggingElasticsearch;
import com.pulumi.fastly.outputs.ServiceVclLoggingFtp;
import com.pulumi.fastly.outputs.ServiceVclLoggingGc;
import com.pulumi.fastly.outputs.ServiceVclLoggingGooglepubsub;
import com.pulumi.fastly.outputs.ServiceVclLoggingHerokus;
import com.pulumi.fastly.outputs.ServiceVclLoggingHoneycomb;
import com.pulumi.fastly.outputs.ServiceVclLoggingHttp;
import com.pulumi.fastly.outputs.ServiceVclLoggingKafka;
import com.pulumi.fastly.outputs.ServiceVclLoggingKinese;
import com.pulumi.fastly.outputs.ServiceVclLoggingLogentry;
import com.pulumi.fastly.outputs.ServiceVclLoggingLoggly;
import com.pulumi.fastly.outputs.ServiceVclLoggingLogshuttle;
import com.pulumi.fastly.outputs.ServiceVclLoggingNewrelic;
import com.pulumi.fastly.outputs.ServiceVclLoggingNewrelicotlp;
import com.pulumi.fastly.outputs.ServiceVclLoggingOpenstack;
import com.pulumi.fastly.outputs.ServiceVclLoggingPapertrail;
import com.pulumi.fastly.outputs.ServiceVclLoggingS3;
import com.pulumi.fastly.outputs.ServiceVclLoggingScalyr;
import com.pulumi.fastly.outputs.ServiceVclLoggingSftp;
import com.pulumi.fastly.outputs.ServiceVclLoggingSplunk;
import com.pulumi.fastly.outputs.ServiceVclLoggingSumologic;
import com.pulumi.fastly.outputs.ServiceVclLoggingSyslog;
import com.pulumi.fastly.outputs.ServiceVclProductEnablement;
import com.pulumi.fastly.outputs.ServiceVclRateLimiter;
import com.pulumi.fastly.outputs.ServiceVclRequestSetting;
import com.pulumi.fastly.outputs.ServiceVclResponseObject;
import com.pulumi.fastly.outputs.ServiceVclSnippet;
import com.pulumi.fastly.outputs.ServiceVclVcl;
import com.pulumi.fastly.outputs.ServiceVclWaf;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * Fastly Services can be imported using their service ID, e.g.
 * 
 * ```sh
 * $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx
 * ```
 * 
 * By default, either the active version will be imported, or the latest version if no version is active.
 * 
 * Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
 * 
 * ```sh
 * $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2
 * ```
 * 
 */
@ResourceType(type="fastly:index/serviceVcl:ServiceVcl")
public class ServiceVcl extends com.pulumi.resources.CustomResource {
    @Export(name="acls", refs={List.class,ServiceVclAcl.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclAcl>> acls;

    public Output<Optional<List<ServiceVclAcl>>> acls() {
        return Codegen.optional(this.acls);
    }
    /**
     * Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     * 
     */
    @Export(name="activate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> activate;

    /**
     * @return Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
     * 
     */
    public Output<Optional<Boolean>> activate() {
        return Codegen.optional(this.activate);
    }
    /**
     * The currently active version of your Fastly Service
     * 
     */
    @Export(name="activeVersion", refs={Integer.class}, tree="[0]")
    private Output<Integer> activeVersion;

    /**
     * @return The currently active version of your Fastly Service
     * 
     */
    public Output<Integer> activeVersion() {
        return this.activeVersion;
    }
    @Export(name="backends", refs={List.class,ServiceVclBackend.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclBackend>> backends;

    public Output<Optional<List<ServiceVclBackend>>> backends() {
        return Codegen.optional(this.backends);
    }
    @Export(name="cacheSettings", refs={List.class,ServiceVclCacheSetting.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclCacheSetting>> cacheSettings;

    public Output<Optional<List<ServiceVclCacheSetting>>> cacheSettings() {
        return Codegen.optional(this.cacheSettings);
    }
    /**
     * The latest cloned version by the provider
     * 
     */
    @Export(name="clonedVersion", refs={Integer.class}, tree="[0]")
    private Output<Integer> clonedVersion;

    /**
     * @return The latest cloned version by the provider
     * 
     */
    public Output<Integer> clonedVersion() {
        return this.clonedVersion;
    }
    /**
     * Description field for the service. Default `Managed by Terraform`
     * 
     */
    @Export(name="comment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> comment;

    /**
     * @return Description field for the service. Default `Managed by Terraform`
     * 
     */
    public Output<Optional<String>> comment() {
        return Codegen.optional(this.comment);
    }
    @Export(name="conditions", refs={List.class,ServiceVclCondition.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclCondition>> conditions;

    public Output<Optional<List<ServiceVclCondition>>> conditions() {
        return Codegen.optional(this.conditions);
    }
    /**
     * The default hostname
     * 
     */
    @Export(name="defaultHost", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultHost;

    /**
     * @return The default hostname
     * 
     */
    public Output<Optional<String>> defaultHost() {
        return Codegen.optional(this.defaultHost);
    }
    /**
     * The default Time-to-live (TTL) for requests
     * 
     */
    @Export(name="defaultTtl", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> defaultTtl;

    /**
     * @return The default Time-to-live (TTL) for requests
     * 
     */
    public Output<Optional<Integer>> defaultTtl() {
        return Codegen.optional(this.defaultTtl);
    }
    @Export(name="dictionaries", refs={List.class,ServiceVclDictionary.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclDictionary>> dictionaries;

    public Output<Optional<List<ServiceVclDictionary>>> dictionaries() {
        return Codegen.optional(this.dictionaries);
    }
    @Export(name="directors", refs={List.class,ServiceVclDirector.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclDirector>> directors;

    public Output<Optional<List<ServiceVclDirector>>> directors() {
        return Codegen.optional(this.directors);
    }
    /**
     * A set of Domain names to serve as entry points for your Service
     * 
     */
    @Export(name="domains", refs={List.class,ServiceVclDomain.class}, tree="[0,1]")
    private Output<List<ServiceVclDomain>> domains;

    /**
     * @return A set of Domain names to serve as entry points for your Service
     * 
     */
    public Output<List<ServiceVclDomain>> domains() {
        return this.domains;
    }
    @Export(name="dynamicsnippets", refs={List.class,ServiceVclDynamicsnippet.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclDynamicsnippet>> dynamicsnippets;

    public Output<Optional<List<ServiceVclDynamicsnippet>>> dynamicsnippets() {
        return Codegen.optional(this.dynamicsnippets);
    }
    /**
     * Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
     * 
     */
    @Export(name="forceDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Services that are active cannot be destroyed. In order to destroy the Service, set `force_destroy` to `true`. Default `false`
     * 
     */
    public Output<Optional<Boolean>> forceDestroy() {
        return Codegen.optional(this.forceDestroy);
    }
    /**
     * Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
     * local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
     * UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
     * 
     */
    @Export(name="forceRefresh", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> forceRefresh;

    /**
     * @return Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
     * local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
     * UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
     * 
     */
    public Output<Boolean> forceRefresh() {
        return this.forceRefresh;
    }
    @Export(name="gzips", refs={List.class,ServiceVclGzip.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclGzip>> gzips;

    public Output<Optional<List<ServiceVclGzip>>> gzips() {
        return Codegen.optional(this.gzips);
    }
    @Export(name="headers", refs={List.class,ServiceVclHeader.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclHeader>> headers;

    public Output<Optional<List<ServiceVclHeader>>> headers() {
        return Codegen.optional(this.headers);
    }
    @Export(name="healthchecks", refs={List.class,ServiceVclHealthcheck.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclHealthcheck>> healthchecks;

    public Output<Optional<List<ServiceVclHealthcheck>>> healthchecks() {
        return Codegen.optional(this.healthchecks);
    }
    /**
     * Enables support for the HTTP/3 (QUIC) protocol
     * 
     */
    @Export(name="http3", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> http3;

    /**
     * @return Enables support for the HTTP/3 (QUIC) protocol
     * 
     */
    public Output<Optional<Boolean>> http3() {
        return Codegen.optional(this.http3);
    }
    /**
     * Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
     * 
     */
    @Export(name="imported", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> imported;

    /**
     * @return Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
     * 
     */
    public Output<Boolean> imported() {
        return this.imported;
    }
    @Export(name="loggingBigqueries", refs={List.class,ServiceVclLoggingBigquery.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingBigquery>> loggingBigqueries;

    public Output<Optional<List<ServiceVclLoggingBigquery>>> loggingBigqueries() {
        return Codegen.optional(this.loggingBigqueries);
    }
    @Export(name="loggingBlobstorages", refs={List.class,ServiceVclLoggingBlobstorage.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingBlobstorage>> loggingBlobstorages;

    public Output<Optional<List<ServiceVclLoggingBlobstorage>>> loggingBlobstorages() {
        return Codegen.optional(this.loggingBlobstorages);
    }
    @Export(name="loggingCloudfiles", refs={List.class,ServiceVclLoggingCloudfile.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingCloudfile>> loggingCloudfiles;

    public Output<Optional<List<ServiceVclLoggingCloudfile>>> loggingCloudfiles() {
        return Codegen.optional(this.loggingCloudfiles);
    }
    @Export(name="loggingDatadogs", refs={List.class,ServiceVclLoggingDatadog.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingDatadog>> loggingDatadogs;

    public Output<Optional<List<ServiceVclLoggingDatadog>>> loggingDatadogs() {
        return Codegen.optional(this.loggingDatadogs);
    }
    @Export(name="loggingDigitaloceans", refs={List.class,ServiceVclLoggingDigitalocean.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingDigitalocean>> loggingDigitaloceans;

    public Output<Optional<List<ServiceVclLoggingDigitalocean>>> loggingDigitaloceans() {
        return Codegen.optional(this.loggingDigitaloceans);
    }
    @Export(name="loggingElasticsearches", refs={List.class,ServiceVclLoggingElasticsearch.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingElasticsearch>> loggingElasticsearches;

    public Output<Optional<List<ServiceVclLoggingElasticsearch>>> loggingElasticsearches() {
        return Codegen.optional(this.loggingElasticsearches);
    }
    @Export(name="loggingFtps", refs={List.class,ServiceVclLoggingFtp.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingFtp>> loggingFtps;

    public Output<Optional<List<ServiceVclLoggingFtp>>> loggingFtps() {
        return Codegen.optional(this.loggingFtps);
    }
    @Export(name="loggingGcs", refs={List.class,ServiceVclLoggingGc.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingGc>> loggingGcs;

    public Output<Optional<List<ServiceVclLoggingGc>>> loggingGcs() {
        return Codegen.optional(this.loggingGcs);
    }
    @Export(name="loggingGooglepubsubs", refs={List.class,ServiceVclLoggingGooglepubsub.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingGooglepubsub>> loggingGooglepubsubs;

    public Output<Optional<List<ServiceVclLoggingGooglepubsub>>> loggingGooglepubsubs() {
        return Codegen.optional(this.loggingGooglepubsubs);
    }
    @Export(name="loggingHerokus", refs={List.class,ServiceVclLoggingHerokus.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingHerokus>> loggingHerokus;

    public Output<Optional<List<ServiceVclLoggingHerokus>>> loggingHerokus() {
        return Codegen.optional(this.loggingHerokus);
    }
    @Export(name="loggingHoneycombs", refs={List.class,ServiceVclLoggingHoneycomb.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingHoneycomb>> loggingHoneycombs;

    public Output<Optional<List<ServiceVclLoggingHoneycomb>>> loggingHoneycombs() {
        return Codegen.optional(this.loggingHoneycombs);
    }
    @Export(name="loggingHttps", refs={List.class,ServiceVclLoggingHttp.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingHttp>> loggingHttps;

    public Output<Optional<List<ServiceVclLoggingHttp>>> loggingHttps() {
        return Codegen.optional(this.loggingHttps);
    }
    @Export(name="loggingKafkas", refs={List.class,ServiceVclLoggingKafka.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingKafka>> loggingKafkas;

    public Output<Optional<List<ServiceVclLoggingKafka>>> loggingKafkas() {
        return Codegen.optional(this.loggingKafkas);
    }
    @Export(name="loggingKineses", refs={List.class,ServiceVclLoggingKinese.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingKinese>> loggingKineses;

    public Output<Optional<List<ServiceVclLoggingKinese>>> loggingKineses() {
        return Codegen.optional(this.loggingKineses);
    }
    @Export(name="loggingLogentries", refs={List.class,ServiceVclLoggingLogentry.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingLogentry>> loggingLogentries;

    public Output<Optional<List<ServiceVclLoggingLogentry>>> loggingLogentries() {
        return Codegen.optional(this.loggingLogentries);
    }
    @Export(name="loggingLogglies", refs={List.class,ServiceVclLoggingLoggly.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingLoggly>> loggingLogglies;

    public Output<Optional<List<ServiceVclLoggingLoggly>>> loggingLogglies() {
        return Codegen.optional(this.loggingLogglies);
    }
    @Export(name="loggingLogshuttles", refs={List.class,ServiceVclLoggingLogshuttle.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingLogshuttle>> loggingLogshuttles;

    public Output<Optional<List<ServiceVclLoggingLogshuttle>>> loggingLogshuttles() {
        return Codegen.optional(this.loggingLogshuttles);
    }
    @Export(name="loggingNewrelicotlps", refs={List.class,ServiceVclLoggingNewrelicotlp.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingNewrelicotlp>> loggingNewrelicotlps;

    public Output<Optional<List<ServiceVclLoggingNewrelicotlp>>> loggingNewrelicotlps() {
        return Codegen.optional(this.loggingNewrelicotlps);
    }
    @Export(name="loggingNewrelics", refs={List.class,ServiceVclLoggingNewrelic.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingNewrelic>> loggingNewrelics;

    public Output<Optional<List<ServiceVclLoggingNewrelic>>> loggingNewrelics() {
        return Codegen.optional(this.loggingNewrelics);
    }
    @Export(name="loggingOpenstacks", refs={List.class,ServiceVclLoggingOpenstack.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingOpenstack>> loggingOpenstacks;

    public Output<Optional<List<ServiceVclLoggingOpenstack>>> loggingOpenstacks() {
        return Codegen.optional(this.loggingOpenstacks);
    }
    @Export(name="loggingPapertrails", refs={List.class,ServiceVclLoggingPapertrail.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingPapertrail>> loggingPapertrails;

    public Output<Optional<List<ServiceVclLoggingPapertrail>>> loggingPapertrails() {
        return Codegen.optional(this.loggingPapertrails);
    }
    @Export(name="loggingS3s", refs={List.class,ServiceVclLoggingS3.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingS3>> loggingS3s;

    public Output<Optional<List<ServiceVclLoggingS3>>> loggingS3s() {
        return Codegen.optional(this.loggingS3s);
    }
    @Export(name="loggingScalyrs", refs={List.class,ServiceVclLoggingScalyr.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingScalyr>> loggingScalyrs;

    public Output<Optional<List<ServiceVclLoggingScalyr>>> loggingScalyrs() {
        return Codegen.optional(this.loggingScalyrs);
    }
    @Export(name="loggingSftps", refs={List.class,ServiceVclLoggingSftp.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingSftp>> loggingSftps;

    public Output<Optional<List<ServiceVclLoggingSftp>>> loggingSftps() {
        return Codegen.optional(this.loggingSftps);
    }
    @Export(name="loggingSplunks", refs={List.class,ServiceVclLoggingSplunk.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingSplunk>> loggingSplunks;

    public Output<Optional<List<ServiceVclLoggingSplunk>>> loggingSplunks() {
        return Codegen.optional(this.loggingSplunks);
    }
    @Export(name="loggingSumologics", refs={List.class,ServiceVclLoggingSumologic.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingSumologic>> loggingSumologics;

    public Output<Optional<List<ServiceVclLoggingSumologic>>> loggingSumologics() {
        return Codegen.optional(this.loggingSumologics);
    }
    @Export(name="loggingSyslogs", refs={List.class,ServiceVclLoggingSyslog.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclLoggingSyslog>> loggingSyslogs;

    public Output<Optional<List<ServiceVclLoggingSyslog>>> loggingSyslogs() {
        return Codegen.optional(this.loggingSyslogs);
    }
    /**
     * The unique name for the Service to create
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The unique name for the Service to create
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="productEnablement", refs={ServiceVclProductEnablement.class}, tree="[0]")
    private Output</* @Nullable */ ServiceVclProductEnablement> productEnablement;

    public Output<Optional<ServiceVclProductEnablement>> productEnablement() {
        return Codegen.optional(this.productEnablement);
    }
    @Export(name="rateLimiters", refs={List.class,ServiceVclRateLimiter.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclRateLimiter>> rateLimiters;

    public Output<Optional<List<ServiceVclRateLimiter>>> rateLimiters() {
        return Codegen.optional(this.rateLimiters);
    }
    @Export(name="requestSettings", refs={List.class,ServiceVclRequestSetting.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclRequestSetting>> requestSettings;

    public Output<Optional<List<ServiceVclRequestSetting>>> requestSettings() {
        return Codegen.optional(this.requestSettings);
    }
    @Export(name="responseObjects", refs={List.class,ServiceVclResponseObject.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclResponseObject>> responseObjects;

    public Output<Optional<List<ServiceVclResponseObject>>> responseObjects() {
        return Codegen.optional(this.responseObjects);
    }
    /**
     * Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
     * deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
     * an active service will cause an error. Default `false`
     * 
     */
    @Export(name="reuse", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> reuse;

    /**
     * @return Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
     * deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
     * an active service will cause an error. Default `false`
     * 
     */
    public Output<Optional<Boolean>> reuse() {
        return Codegen.optional(this.reuse);
    }
    @Export(name="snippets", refs={List.class,ServiceVclSnippet.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclSnippet>> snippets;

    public Output<Optional<List<ServiceVclSnippet>>> snippets() {
        return Codegen.optional(this.snippets);
    }
    /**
     * Enables serving a stale object if there is an error
     * 
     */
    @Export(name="staleIfError", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> staleIfError;

    /**
     * @return Enables serving a stale object if there is an error
     * 
     */
    public Output<Optional<Boolean>> staleIfError() {
        return Codegen.optional(this.staleIfError);
    }
    /**
     * The default time-to-live (TTL) for serving the stale object for the version
     * 
     */
    @Export(name="staleIfErrorTtl", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> staleIfErrorTtl;

    /**
     * @return The default time-to-live (TTL) for serving the stale object for the version
     * 
     */
    public Output<Optional<Integer>> staleIfErrorTtl() {
        return Codegen.optional(this.staleIfErrorTtl);
    }
    @Export(name="vcls", refs={List.class,ServiceVclVcl.class}, tree="[0,1]")
    private Output</* @Nullable */ List<ServiceVclVcl>> vcls;

    public Output<Optional<List<ServiceVclVcl>>> vcls() {
        return Codegen.optional(this.vcls);
    }
    /**
     * Description field for the version
     * 
     */
    @Export(name="versionComment", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> versionComment;

    /**
     * @return Description field for the version
     * 
     */
    public Output<Optional<String>> versionComment() {
        return Codegen.optional(this.versionComment);
    }
    @Export(name="waf", refs={ServiceVclWaf.class}, tree="[0]")
    private Output</* @Nullable */ ServiceVclWaf> waf;

    public Output<Optional<ServiceVclWaf>> waf() {
        return Codegen.optional(this.waf);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ServiceVcl(String name) {
        this(name, ServiceVclArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ServiceVcl(String name, ServiceVclArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ServiceVcl(String name, ServiceVclArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/serviceVcl:ServiceVcl", name, args == null ? ServiceVclArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ServiceVcl(String name, Output<String> id, @Nullable ServiceVclState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/serviceVcl:ServiceVcl", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ServiceVcl get(String name, Output<String> id, @Nullable ServiceVclState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ServiceVcl(name, id, state, options);
    }
}
