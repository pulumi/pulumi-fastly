// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceVclHealthcheck {
    /**
     * @return How often to run the Healthcheck in milliseconds. Default `5000`
     * 
     */
    private @Nullable Integer checkInterval;
    /**
     * @return The status code expected from the host. Default `200`
     * 
     */
    private @Nullable Integer expectedResponse;
    /**
     * @return Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
     * 
     */
    private @Nullable List<String> headers;
    /**
     * @return The Host header to send for this Healthcheck
     * 
     */
    private String host;
    /**
     * @return Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
     * 
     */
    private @Nullable String httpVersion;
    /**
     * @return When loading a config, the initial number of probes to be seen as OK. Default `3`
     * 
     */
    private @Nullable Integer initial;
    /**
     * @return Which HTTP method to use. Default `HEAD`
     * 
     */
    private @Nullable String method;
    /**
     * @return A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return The path to check
     * 
     */
    private String path;
    /**
     * @return How many Healthchecks must succeed to be considered healthy. Default `3`
     * 
     */
    private @Nullable Integer threshold;
    /**
     * @return Timeout in milliseconds. Default `500`
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
     * 
     */
    private @Nullable Integer window;

    private ServiceVclHealthcheck() {}
    /**
     * @return How often to run the Healthcheck in milliseconds. Default `5000`
     * 
     */
    public Optional<Integer> checkInterval() {
        return Optional.ofNullable(this.checkInterval);
    }
    /**
     * @return The status code expected from the host. Default `200`
     * 
     */
    public Optional<Integer> expectedResponse() {
        return Optional.ofNullable(this.expectedResponse);
    }
    /**
     * @return Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
     * 
     */
    public List<String> headers() {
        return this.headers == null ? List.of() : this.headers;
    }
    /**
     * @return The Host header to send for this Healthcheck
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
     * 
     */
    public Optional<String> httpVersion() {
        return Optional.ofNullable(this.httpVersion);
    }
    /**
     * @return When loading a config, the initial number of probes to be seen as OK. Default `3`
     * 
     */
    public Optional<Integer> initial() {
        return Optional.ofNullable(this.initial);
    }
    /**
     * @return Which HTTP method to use. Default `HEAD`
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return The path to check
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return How many Healthchecks must succeed to be considered healthy. Default `3`
     * 
     */
    public Optional<Integer> threshold() {
        return Optional.ofNullable(this.threshold);
    }
    /**
     * @return Timeout in milliseconds. Default `500`
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
     * 
     */
    public Optional<Integer> window() {
        return Optional.ofNullable(this.window);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceVclHealthcheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer checkInterval;
        private @Nullable Integer expectedResponse;
        private @Nullable List<String> headers;
        private String host;
        private @Nullable String httpVersion;
        private @Nullable Integer initial;
        private @Nullable String method;
        private String name;
        private String path;
        private @Nullable Integer threshold;
        private @Nullable Integer timeout;
        private @Nullable Integer window;
        public Builder() {}
        public Builder(ServiceVclHealthcheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.checkInterval = defaults.checkInterval;
    	      this.expectedResponse = defaults.expectedResponse;
    	      this.headers = defaults.headers;
    	      this.host = defaults.host;
    	      this.httpVersion = defaults.httpVersion;
    	      this.initial = defaults.initial;
    	      this.method = defaults.method;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.threshold = defaults.threshold;
    	      this.timeout = defaults.timeout;
    	      this.window = defaults.window;
        }

        @CustomType.Setter
        public Builder checkInterval(@Nullable Integer checkInterval) {
            this.checkInterval = checkInterval;
            return this;
        }
        @CustomType.Setter
        public Builder expectedResponse(@Nullable Integer expectedResponse) {
            this.expectedResponse = expectedResponse;
            return this;
        }
        @CustomType.Setter
        public Builder headers(@Nullable List<String> headers) {
            this.headers = headers;
            return this;
        }
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder httpVersion(@Nullable String httpVersion) {
            this.httpVersion = httpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder initial(@Nullable Integer initial) {
            this.initial = initial;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder threshold(@Nullable Integer threshold) {
            this.threshold = threshold;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder window(@Nullable Integer window) {
            this.window = window;
            return this;
        }
        public ServiceVclHealthcheck build() {
            final var _resultValue = new ServiceVclHealthcheck();
            _resultValue.checkInterval = checkInterval;
            _resultValue.expectedResponse = expectedResponse;
            _resultValue.headers = headers;
            _resultValue.host = host;
            _resultValue.httpVersion = httpVersion;
            _resultValue.initial = initial;
            _resultValue.method = method;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.threshold = threshold;
            _resultValue.timeout = timeout;
            _resultValue.window = window;
            return _resultValue;
        }
    }
}
