// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTlsConfigurationPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTlsConfigurationPlainArgs Empty = new GetTlsConfigurationPlainArgs();

    /**
     * Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
     * 
     */
    @Import(name="default")
    private @Nullable Boolean default_;

    /**
     * @return Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
     * 
     */
    public Optional<Boolean> default_() {
        return Optional.ofNullable(this.default_);
    }

    /**
     * HTTP protocols available on the TLS configuration.
     * 
     */
    @Import(name="httpProtocols")
    private @Nullable List<String> httpProtocols;

    /**
     * @return HTTP protocols available on the TLS configuration.
     * 
     */
    public Optional<List<String>> httpProtocols() {
        return Optional.ofNullable(this.httpProtocols);
    }

    /**
     * ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * Custom name of the TLS configuration.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Custom name of the TLS configuration.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * TLS protocols available on the TLS configuration.
     * 
     */
    @Import(name="tlsProtocols")
    private @Nullable List<String> tlsProtocols;

    /**
     * @return TLS protocols available on the TLS configuration.
     * 
     */
    public Optional<List<String>> tlsProtocols() {
        return Optional.ofNullable(this.tlsProtocols);
    }

    /**
     * Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
     * 
     */
    @Import(name="tlsService")
    private @Nullable String tlsService;

    /**
     * @return Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
     * 
     */
    public Optional<String> tlsService() {
        return Optional.ofNullable(this.tlsService);
    }

    private GetTlsConfigurationPlainArgs() {}

    private GetTlsConfigurationPlainArgs(GetTlsConfigurationPlainArgs $) {
        this.default_ = $.default_;
        this.httpProtocols = $.httpProtocols;
        this.id = $.id;
        this.name = $.name;
        this.tlsProtocols = $.tlsProtocols;
        this.tlsService = $.tlsService;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTlsConfigurationPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTlsConfigurationPlainArgs $;

        public Builder() {
            $ = new GetTlsConfigurationPlainArgs();
        }

        public Builder(GetTlsConfigurationPlainArgs defaults) {
            $ = new GetTlsConfigurationPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param default_ Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
         * 
         * @return builder
         * 
         */
        public Builder default_(@Nullable Boolean default_) {
            $.default_ = default_;
            return this;
        }

        /**
         * @param httpProtocols HTTP protocols available on the TLS configuration.
         * 
         * @return builder
         * 
         */
        public Builder httpProtocols(@Nullable List<String> httpProtocols) {
            $.httpProtocols = httpProtocols;
            return this;
        }

        /**
         * @param httpProtocols HTTP protocols available on the TLS configuration.
         * 
         * @return builder
         * 
         */
        public Builder httpProtocols(String... httpProtocols) {
            return httpProtocols(List.of(httpProtocols));
        }

        /**
         * @param id ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param name Custom name of the TLS configuration.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        /**
         * @param tlsProtocols TLS protocols available on the TLS configuration.
         * 
         * @return builder
         * 
         */
        public Builder tlsProtocols(@Nullable List<String> tlsProtocols) {
            $.tlsProtocols = tlsProtocols;
            return this;
        }

        /**
         * @param tlsProtocols TLS protocols available on the TLS configuration.
         * 
         * @return builder
         * 
         */
        public Builder tlsProtocols(String... tlsProtocols) {
            return tlsProtocols(List.of(tlsProtocols));
        }

        /**
         * @param tlsService Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
         * 
         * @return builder
         * 
         */
        public Builder tlsService(@Nullable String tlsService) {
            $.tlsService = tlsService;
            return this;
        }

        public GetTlsConfigurationPlainArgs build() {
            return $;
        }
    }

}
