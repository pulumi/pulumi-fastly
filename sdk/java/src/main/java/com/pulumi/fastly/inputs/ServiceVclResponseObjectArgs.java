// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclResponseObjectArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclResponseObjectArgs Empty = new ServiceVclResponseObjectArgs();

    /**
     * Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    @Import(name="cacheCondition")
    private @Nullable Output<String> cacheCondition;

    /**
     * @return Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
     * 
     */
    public Optional<Output<String>> cacheCondition() {
        return Optional.ofNullable(this.cacheCondition);
    }

    /**
     * The content to deliver for the response object
     * 
     */
    @Import(name="content")
    private @Nullable Output<String> content;

    /**
     * @return The content to deliver for the response object
     * 
     */
    public Optional<Output<String>> content() {
        return Optional.ofNullable(this.content);
    }

    /**
     * The MIME type of the content
     * 
     */
    @Import(name="contentType")
    private @Nullable Output<String> contentType;

    /**
     * @return The MIME type of the content
     * 
     */
    public Optional<Output<String>> contentType() {
        return Optional.ofNullable(this.contentType);
    }

    /**
     * A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
     * 
     */
    @Import(name="requestCondition")
    private @Nullable Output<String> requestCondition;

    /**
     * @return Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
     * 
     */
    public Optional<Output<String>> requestCondition() {
        return Optional.ofNullable(this.requestCondition);
    }

    /**
     * The HTTP Response. Default `OK`
     * 
     */
    @Import(name="response")
    private @Nullable Output<String> response;

    /**
     * @return The HTTP Response. Default `OK`
     * 
     */
    public Optional<Output<String>> response() {
        return Optional.ofNullable(this.response);
    }

    /**
     * The HTTP Status Code. Default `200`
     * 
     */
    @Import(name="status")
    private @Nullable Output<Integer> status;

    /**
     * @return The HTTP Status Code. Default `200`
     * 
     */
    public Optional<Output<Integer>> status() {
        return Optional.ofNullable(this.status);
    }

    private ServiceVclResponseObjectArgs() {}

    private ServiceVclResponseObjectArgs(ServiceVclResponseObjectArgs $) {
        this.cacheCondition = $.cacheCondition;
        this.content = $.content;
        this.contentType = $.contentType;
        this.name = $.name;
        this.requestCondition = $.requestCondition;
        this.response = $.response;
        this.status = $.status;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclResponseObjectArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclResponseObjectArgs $;

        public Builder() {
            $ = new ServiceVclResponseObjectArgs();
        }

        public Builder(ServiceVclResponseObjectArgs defaults) {
            $ = new ServiceVclResponseObjectArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheCondition Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
         * 
         * @return builder
         * 
         */
        public Builder cacheCondition(@Nullable Output<String> cacheCondition) {
            $.cacheCondition = cacheCondition;
            return this;
        }

        /**
         * @param cacheCondition Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly&#39;s Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
         * 
         * @return builder
         * 
         */
        public Builder cacheCondition(String cacheCondition) {
            return cacheCondition(Output.of(cacheCondition));
        }

        /**
         * @param content The content to deliver for the response object
         * 
         * @return builder
         * 
         */
        public Builder content(@Nullable Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The content to deliver for the response object
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param contentType The MIME type of the content
         * 
         * @return builder
         * 
         */
        public Builder contentType(@Nullable Output<String> contentType) {
            $.contentType = contentType;
            return this;
        }

        /**
         * @param contentType The MIME type of the content
         * 
         * @return builder
         * 
         */
        public Builder contentType(String contentType) {
            return contentType(Output.of(contentType));
        }

        /**
         * @param name A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param requestCondition Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
         * 
         * @return builder
         * 
         */
        public Builder requestCondition(@Nullable Output<String> requestCondition) {
            $.requestCondition = requestCondition;
            return this;
        }

        /**
         * @param requestCondition Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
         * 
         * @return builder
         * 
         */
        public Builder requestCondition(String requestCondition) {
            return requestCondition(Output.of(requestCondition));
        }

        /**
         * @param response The HTTP Response. Default `OK`
         * 
         * @return builder
         * 
         */
        public Builder response(@Nullable Output<String> response) {
            $.response = response;
            return this;
        }

        /**
         * @param response The HTTP Response. Default `OK`
         * 
         * @return builder
         * 
         */
        public Builder response(String response) {
            return response(Output.of(response));
        }

        /**
         * @param status The HTTP Status Code. Default `200`
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<Integer> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The HTTP Status Code. Default `200`
         * 
         * @return builder
         * 
         */
        public Builder status(Integer status) {
            return status(Output.of(status));
        }

        public ServiceVclResponseObjectArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceVclResponseObjectArgs", "name");
            }
            return $;
        }
    }

}
