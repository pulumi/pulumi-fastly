// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.TlsSubscriptionArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.TlsSubscriptionState;
import com.pulumi.fastly.outputs.TlsSubscriptionManagedDnsChallenge;
import com.pulumi.fastly.outputs.TlsSubscriptionManagedHttpChallenge;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Enables TLS on a domain using a certificate managed by Fastly.
 * 
 * DNS records need to be modified on the domain being secured, in order to respond to the ACME domain ownership challenge.
 * 
 * There are two options for doing this: the `managedDnsChallenges`, which is the default method; and the `managedHttpChallenges`, which points production traffic to Fastly.
 * 
 * &gt; See the [Fastly documentation](https://docs.fastly.com/en/guides/serving-https-traffic-using-fastly-managed-certificates#verifying-domain-ownership) for more information on verifying domain ownership.
 * 
 * The examples below demonstrate usage with AWS Route53 to configure DNS, and the `fastly.TlsSubscriptionValidation` resource to wait for validation to complete.
 * 
 * ## Import
 * 
 * A subscription can be imported using its Fastly subscription ID, e.g.
 * 
 * ```sh
 * $ pulumi import fastly:index/tlsSubscription:TlsSubscription demo xxxxxxxxxxx
 * ```
 * 
 */
@ResourceType(type="fastly:index/tlsSubscription:TlsSubscription")
public class TlsSubscription extends com.pulumi.resources.CustomResource {
    /**
     * The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt`, `globalsign` or `certainly`.
     * 
     */
    @Export(name="certificateAuthority", refs={String.class}, tree="[0]")
    private Output<String> certificateAuthority;

    /**
     * @return The entity that issues and certifies the TLS certificates for your subscription. Valid values are `lets-encrypt`, `globalsign` or `certainly`.
     * 
     */
    public Output<String> certificateAuthority() {
        return this.certificateAuthority;
    }
    /**
     * The certificate ID associated with the subscription.
     * 
     */
    @Export(name="certificateId", refs={String.class}, tree="[0]")
    private Output<String> certificateId;

    /**
     * @return The certificate ID associated with the subscription.
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }
    /**
     * The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
     * 
     */
    @Export(name="commonName", refs={String.class}, tree="[0]")
    private Output<String> commonName;

    /**
     * @return The common name associated with the subscription generated by Fastly TLS. If you do not pass a common name on create, we will default to the first TLS domain included. If provided, the domain chosen as the common name must be included in TLS domains.
     * 
     */
    public Output<String> commonName() {
        return this.commonName;
    }
    /**
     * The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
     * 
     */
    @Export(name="configurationId", refs={String.class}, tree="[0]")
    private Output<String> configurationId;

    /**
     * @return The ID of the set of TLS configuration options that apply to the enabled domains on this subscription.
     * 
     */
    public Output<String> configurationId() {
        return this.configurationId;
    }
    /**
     * Timestamp (GMT) when the subscription was created.
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return Timestamp (GMT) when the subscription was created.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * List of domains on which to enable TLS.
     * 
     */
    @Export(name="domains", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> domains;

    /**
     * @return List of domains on which to enable TLS.
     * 
     */
    public Output<List<String>> domains() {
        return this.domains;
    }
    /**
     * Force delete the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly. Defaults to false.
     * 
     */
    @Export(name="forceDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Force delete the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> forceDestroy() {
        return Codegen.optional(this.forceDestroy);
    }
    /**
     * Force update the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly.
     * 
     */
    @Export(name="forceUpdate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceUpdate;

    /**
     * @return Force update the subscription even if it has active domains. Warning: this can disable production traffic if used incorrectly.
     * 
     */
    public Output<Optional<Boolean>> forceUpdate() {
        return Codegen.optional(this.forceUpdate);
    }
    /**
     * The details required to configure DNS to respond to ACME DNS challenge in order to verify domain ownership.
     * 
     * @deprecated
     * Use &#39;managed_dns_challenges&#39; attribute instead
     * 
     */
    @Deprecated /* Use 'managed_dns_challenges' attribute instead */
    @Export(name="managedDnsChallenge", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> managedDnsChallenge;

    /**
     * @return The details required to configure DNS to respond to ACME DNS challenge in order to verify domain ownership.
     * 
     */
    public Output<Map<String,String>> managedDnsChallenge() {
        return this.managedDnsChallenge;
    }
    /**
     * A list of options for configuring DNS to respond to ACME DNS challenge in order to verify domain ownership.
     * 
     */
    @Export(name="managedDnsChallenges", refs={List.class,TlsSubscriptionManagedDnsChallenge.class}, tree="[0,1]")
    private Output<List<TlsSubscriptionManagedDnsChallenge>> managedDnsChallenges;

    /**
     * @return A list of options for configuring DNS to respond to ACME DNS challenge in order to verify domain ownership.
     * 
     */
    public Output<List<TlsSubscriptionManagedDnsChallenge>> managedDnsChallenges() {
        return this.managedDnsChallenges;
    }
    /**
     * A list of options for configuring DNS to respond to ACME HTTP challenge in order to verify domain ownership. Best accessed through a `for` expression to filter the relevant record.
     * 
     */
    @Export(name="managedHttpChallenges", refs={List.class,TlsSubscriptionManagedHttpChallenge.class}, tree="[0,1]")
    private Output<List<TlsSubscriptionManagedHttpChallenge>> managedHttpChallenges;

    /**
     * @return A list of options for configuring DNS to respond to ACME HTTP challenge in order to verify domain ownership. Best accessed through a `for` expression to filter the relevant record.
     * 
     */
    public Output<List<TlsSubscriptionManagedHttpChallenge>> managedHttpChallenges() {
        return this.managedHttpChallenges;
    }
    /**
     * The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    /**
     * Timestamp (GMT) when the subscription was updated.
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return Timestamp (GMT) when the subscription was updated.
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public TlsSubscription(java.lang.String name) {
        this(name, TlsSubscriptionArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public TlsSubscription(java.lang.String name, TlsSubscriptionArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public TlsSubscription(java.lang.String name, TlsSubscriptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/tlsSubscription:TlsSubscription", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private TlsSubscription(java.lang.String name, Output<java.lang.String> id, @Nullable TlsSubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/tlsSubscription:TlsSubscription", name, state, makeResourceOptions(options, id), false);
    }

    private static TlsSubscriptionArgs makeArgs(TlsSubscriptionArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TlsSubscriptionArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static TlsSubscription get(java.lang.String name, Output<java.lang.String> id, @Nullable TlsSubscriptionState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new TlsSubscription(name, id, state, options);
    }
}
