// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceComputeLoggingSplunk {
    /**
     * @return A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
     * 
     */
    private @Nullable String tlsCaCert;
    /**
     * @return The client certificate used to make authenticated requests. Must be in PEM format.
     * 
     */
    private @Nullable String tlsClientCert;
    /**
     * @return The client private key used to make authenticated requests. Must be in PEM format.
     * 
     */
    private @Nullable String tlsClientKey;
    /**
     * @return The hostname used to verify the server&#39;s certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     * 
     */
    private @Nullable String tlsHostname;
    /**
     * @return The Splunk token to be used for authentication
     * 
     */
    private String token;
    /**
     * @return The Splunk URL to stream logs to
     * 
     */
    private String url;
    /**
     * @return Whether to use TLS for secure logging. Default: `false`
     * 
     */
    private @Nullable Boolean useTls;

    private ServiceComputeLoggingSplunk() {}
    /**
     * @return A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
     * 
     */
    public Optional<String> tlsCaCert() {
        return Optional.ofNullable(this.tlsCaCert);
    }
    /**
     * @return The client certificate used to make authenticated requests. Must be in PEM format.
     * 
     */
    public Optional<String> tlsClientCert() {
        return Optional.ofNullable(this.tlsClientCert);
    }
    /**
     * @return The client private key used to make authenticated requests. Must be in PEM format.
     * 
     */
    public Optional<String> tlsClientKey() {
        return Optional.ofNullable(this.tlsClientKey);
    }
    /**
     * @return The hostname used to verify the server&#39;s certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     * 
     */
    public Optional<String> tlsHostname() {
        return Optional.ofNullable(this.tlsHostname);
    }
    /**
     * @return The Splunk token to be used for authentication
     * 
     */
    public String token() {
        return this.token;
    }
    /**
     * @return The Splunk URL to stream logs to
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return Whether to use TLS for secure logging. Default: `false`
     * 
     */
    public Optional<Boolean> useTls() {
        return Optional.ofNullable(this.useTls);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceComputeLoggingSplunk defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String name;
        private @Nullable String tlsCaCert;
        private @Nullable String tlsClientCert;
        private @Nullable String tlsClientKey;
        private @Nullable String tlsHostname;
        private String token;
        private String url;
        private @Nullable Boolean useTls;
        public Builder() {}
        public Builder(ServiceComputeLoggingSplunk defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.name = defaults.name;
    	      this.tlsCaCert = defaults.tlsCaCert;
    	      this.tlsClientCert = defaults.tlsClientCert;
    	      this.tlsClientKey = defaults.tlsClientKey;
    	      this.tlsHostname = defaults.tlsHostname;
    	      this.token = defaults.token;
    	      this.url = defaults.url;
    	      this.useTls = defaults.useTls;
        }

        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder tlsCaCert(@Nullable String tlsCaCert) {
            this.tlsCaCert = tlsCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCert(@Nullable String tlsClientCert) {
            this.tlsClientCert = tlsClientCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientKey(@Nullable String tlsClientKey) {
            this.tlsClientKey = tlsClientKey;
            return this;
        }
        @CustomType.Setter
        public Builder tlsHostname(@Nullable String tlsHostname) {
            this.tlsHostname = tlsHostname;
            return this;
        }
        @CustomType.Setter
        public Builder token(String token) {
            this.token = Objects.requireNonNull(token);
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            this.url = Objects.requireNonNull(url);
            return this;
        }
        @CustomType.Setter
        public Builder useTls(@Nullable Boolean useTls) {
            this.useTls = useTls;
            return this;
        }
        public ServiceComputeLoggingSplunk build() {
            final var o = new ServiceComputeLoggingSplunk();
            o.name = name;
            o.tlsCaCert = tlsCaCert;
            o.tlsClientCert = tlsClientCert;
            o.tlsClientKey = tlsClientKey;
            o.tlsHostname = tlsHostname;
            o.token = token;
            o.url = url;
            o.useTls = useTls;
            return o;
        }
    }
}
