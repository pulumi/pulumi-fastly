// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTlsSubscriptionArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTlsSubscriptionArgs Empty = new GetTlsSubscriptionArgs();

    /**
     * The entity that issues and certifies the TLS certificates for the subscription.
     * 
     */
    @Import(name="certificateAuthority")
    private @Nullable Output<String> certificateAuthority;

    /**
     * @return The entity that issues and certifies the TLS certificates for the subscription.
     * 
     */
    public Optional<Output<String>> certificateAuthority() {
        return Optional.ofNullable(this.certificateAuthority);
    }

    /**
     * ID of TLS configuration used to terminate TLS traffic.
     * 
     */
    @Import(name="configurationId")
    private @Nullable Output<String> configurationId;

    /**
     * @return ID of TLS configuration used to terminate TLS traffic.
     * 
     */
    public Optional<Output<String>> configurationId() {
        return Optional.ofNullable(this.configurationId);
    }

    /**
     * List of domains on which to enable TLS.
     * 
     */
    @Import(name="domains")
    private @Nullable Output<List<String>> domains;

    /**
     * @return List of domains on which to enable TLS.
     * 
     */
    public Optional<Output<List<String>>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * ID of TLS subscription. Conflicts with all the other filters.
     * 
     */
    @Import(name="id")
    private @Nullable Output<String> id;

    /**
     * @return ID of TLS subscription. Conflicts with all the other filters.
     * 
     */
    public Optional<Output<String>> id() {
        return Optional.ofNullable(this.id);
    }

    private GetTlsSubscriptionArgs() {}

    private GetTlsSubscriptionArgs(GetTlsSubscriptionArgs $) {
        this.certificateAuthority = $.certificateAuthority;
        this.configurationId = $.configurationId;
        this.domains = $.domains;
        this.id = $.id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTlsSubscriptionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTlsSubscriptionArgs $;

        public Builder() {
            $ = new GetTlsSubscriptionArgs();
        }

        public Builder(GetTlsSubscriptionArgs defaults) {
            $ = new GetTlsSubscriptionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateAuthority The entity that issues and certifies the TLS certificates for the subscription.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(@Nullable Output<String> certificateAuthority) {
            $.certificateAuthority = certificateAuthority;
            return this;
        }

        /**
         * @param certificateAuthority The entity that issues and certifies the TLS certificates for the subscription.
         * 
         * @return builder
         * 
         */
        public Builder certificateAuthority(String certificateAuthority) {
            return certificateAuthority(Output.of(certificateAuthority));
        }

        /**
         * @param configurationId ID of TLS configuration used to terminate TLS traffic.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(@Nullable Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId ID of TLS configuration used to terminate TLS traffic.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param domains List of domains on which to enable TLS.
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable Output<List<String>> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains List of domains on which to enable TLS.
         * 
         * @return builder
         * 
         */
        public Builder domains(List<String> domains) {
            return domains(Output.of(domains));
        }

        /**
         * @param domains List of domains on which to enable TLS.
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param id ID of TLS subscription. Conflicts with all the other filters.
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id ID of TLS subscription. Conflicts with all the other filters.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        public GetTlsSubscriptionArgs build() {
            return $;
        }
    }

}
