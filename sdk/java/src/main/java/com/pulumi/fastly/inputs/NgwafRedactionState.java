// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NgwafRedactionState extends com.pulumi.resources.ResourceArgs {

    public static final NgwafRedactionState Empty = new NgwafRedactionState();

    /**
     * The name of the field that should be redacted.
     * 
     */
    @Import(name="field")
    private @Nullable Output<String> field;

    /**
     * @return The name of the field that should be redacted.
     * 
     */
    public Optional<Output<String>> field() {
        return Optional.ofNullable(this.field);
    }

    /**
     * The type of field that is being redacted. Accepted values are `request_parameter`, `request_header`, and `response_header`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of field that is being redacted. Accepted values are `request_parameter`, `request_header`, and `response_header`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * The ID of the workspace.
     * 
     */
    @Import(name="workspaceId")
    private @Nullable Output<String> workspaceId;

    /**
     * @return The ID of the workspace.
     * 
     */
    public Optional<Output<String>> workspaceId() {
        return Optional.ofNullable(this.workspaceId);
    }

    private NgwafRedactionState() {}

    private NgwafRedactionState(NgwafRedactionState $) {
        this.field = $.field;
        this.type = $.type;
        this.workspaceId = $.workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafRedactionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafRedactionState $;

        public Builder() {
            $ = new NgwafRedactionState();
        }

        public Builder(NgwafRedactionState defaults) {
            $ = new NgwafRedactionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param field The name of the field that should be redacted.
         * 
         * @return builder
         * 
         */
        public Builder field(@Nullable Output<String> field) {
            $.field = field;
            return this;
        }

        /**
         * @param field The name of the field that should be redacted.
         * 
         * @return builder
         * 
         */
        public Builder field(String field) {
            return field(Output.of(field));
        }

        /**
         * @param type The type of field that is being redacted. Accepted values are `request_parameter`, `request_header`, and `response_header`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of field that is being redacted. Accepted values are `request_parameter`, `request_header`, and `response_header`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(@Nullable Output<String> workspaceId) {
            $.workspaceId = workspaceId;
            return this;
        }

        /**
         * @param workspaceId The ID of the workspace.
         * 
         * @return builder
         * 
         */
        public Builder workspaceId(String workspaceId) {
            return workspaceId(Output.of(workspaceId));
        }

        public NgwafRedactionState build() {
            return $;
        }
    }

}
