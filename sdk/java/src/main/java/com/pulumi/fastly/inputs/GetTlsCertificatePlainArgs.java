// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetTlsCertificatePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetTlsCertificatePlainArgs Empty = new GetTlsCertificatePlainArgs();

    /**
     * Domains that are listed in any certificates&#39; Subject Alternative Names (SAN) list.
     * 
     */
    @Import(name="domains")
    private @Nullable List<String> domains;

    /**
     * @return Domains that are listed in any certificates&#39; Subject Alternative Names (SAN) list.
     * 
     */
    public Optional<List<String>> domains() {
        return Optional.ofNullable(this.domains);
    }

    /**
     * Unique ID assigned to certificate by Fastly
     * 
     */
    @Import(name="id")
    private @Nullable String id;

    /**
     * @return Unique ID assigned to certificate by Fastly
     * 
     */
    public Optional<String> id() {
        return Optional.ofNullable(this.id);
    }

    /**
     * The hostname for which a certificate was issued.
     * 
     */
    @Import(name="issuedTo")
    private @Nullable String issuedTo;

    /**
     * @return The hostname for which a certificate was issued.
     * 
     */
    public Optional<String> issuedTo() {
        return Optional.ofNullable(this.issuedTo);
    }

    /**
     * The certificate authority that issued the certificate.
     * 
     */
    @Import(name="issuer")
    private @Nullable String issuer;

    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    public Optional<String> issuer() {
        return Optional.ofNullable(this.issuer);
    }

    /**
     * Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
     * 
     */
    @Import(name="name")
    private @Nullable String name;

    /**
     * @return Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    private GetTlsCertificatePlainArgs() {}

    private GetTlsCertificatePlainArgs(GetTlsCertificatePlainArgs $) {
        this.domains = $.domains;
        this.id = $.id;
        this.issuedTo = $.issuedTo;
        this.issuer = $.issuer;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetTlsCertificatePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetTlsCertificatePlainArgs $;

        public Builder() {
            $ = new GetTlsCertificatePlainArgs();
        }

        public Builder(GetTlsCertificatePlainArgs defaults) {
            $ = new GetTlsCertificatePlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domains Domains that are listed in any certificates&#39; Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder domains(@Nullable List<String> domains) {
            $.domains = domains;
            return this;
        }

        /**
         * @param domains Domains that are listed in any certificates&#39; Subject Alternative Names (SAN) list.
         * 
         * @return builder
         * 
         */
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }

        /**
         * @param id Unique ID assigned to certificate by Fastly
         * 
         * @return builder
         * 
         */
        public Builder id(@Nullable String id) {
            $.id = id;
            return this;
        }

        /**
         * @param issuedTo The hostname for which a certificate was issued.
         * 
         * @return builder
         * 
         */
        public Builder issuedTo(@Nullable String issuedTo) {
            $.issuedTo = issuedTo;
            return this;
        }

        /**
         * @param issuer The certificate authority that issued the certificate.
         * 
         * @return builder
         * 
         */
        public Builder issuer(@Nullable String issuer) {
            $.issuer = issuer;
            return this;
        }

        /**
         * @param name Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable String name) {
            $.name = name;
            return this;
        }

        public GetTlsCertificatePlainArgs build() {
            return $;
        }
    }

}
