// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.fastly.inputs.NgwafWorkspaceRuleRateLimitClientIdentifierArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class NgwafWorkspaceRuleRateLimitArgs extends com.pulumi.resources.ResourceArgs {

    public static final NgwafWorkspaceRuleRateLimitArgs Empty = new NgwafWorkspaceRuleRateLimitArgs();

    /**
     * List of client identifiers used for rate limiting. Can only be length 1 or 2.
     * 
     */
    @Import(name="clientIdentifiers", required=true)
    private Output<List<NgwafWorkspaceRuleRateLimitClientIdentifierArgs>> clientIdentifiers;

    /**
     * @return List of client identifiers used for rate limiting. Can only be length 1 or 2.
     * 
     */
    public Output<List<NgwafWorkspaceRuleRateLimitClientIdentifierArgs>> clientIdentifiers() {
        return this.clientIdentifiers;
    }

    /**
     * Duration in seconds for the rate limit.
     * 
     */
    @Import(name="duration", required=true)
    private Output<Integer> duration;

    /**
     * @return Duration in seconds for the rate limit.
     * 
     */
    public Output<Integer> duration() {
        return this.duration;
    }

    /**
     * Time interval for the rate limit in seconds. Accepted values are 60, 600, and 3600.
     * 
     */
    @Import(name="interval", required=true)
    private Output<Integer> interval;

    /**
     * @return Time interval for the rate limit in seconds. Accepted values are 60, 600, and 3600.
     * 
     */
    public Output<Integer> interval() {
        return this.interval;
    }

    /**
     * Reference ID of the custom signal this rule uses to count requests.
     * 
     */
    @Import(name="signal", required=true)
    private Output<String> signal;

    /**
     * @return Reference ID of the custom signal this rule uses to count requests.
     * 
     */
    public Output<String> signal() {
        return this.signal;
    }

    /**
     * Rate limit threshold. Minimum 1 and maximum 10,000.
     * 
     */
    @Import(name="threshold", required=true)
    private Output<Integer> threshold;

    /**
     * @return Rate limit threshold. Minimum 1 and maximum 10,000.
     * 
     */
    public Output<Integer> threshold() {
        return this.threshold;
    }

    private NgwafWorkspaceRuleRateLimitArgs() {}

    private NgwafWorkspaceRuleRateLimitArgs(NgwafWorkspaceRuleRateLimitArgs $) {
        this.clientIdentifiers = $.clientIdentifiers;
        this.duration = $.duration;
        this.interval = $.interval;
        this.signal = $.signal;
        this.threshold = $.threshold;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NgwafWorkspaceRuleRateLimitArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NgwafWorkspaceRuleRateLimitArgs $;

        public Builder() {
            $ = new NgwafWorkspaceRuleRateLimitArgs();
        }

        public Builder(NgwafWorkspaceRuleRateLimitArgs defaults) {
            $ = new NgwafWorkspaceRuleRateLimitArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientIdentifiers List of client identifiers used for rate limiting. Can only be length 1 or 2.
         * 
         * @return builder
         * 
         */
        public Builder clientIdentifiers(Output<List<NgwafWorkspaceRuleRateLimitClientIdentifierArgs>> clientIdentifiers) {
            $.clientIdentifiers = clientIdentifiers;
            return this;
        }

        /**
         * @param clientIdentifiers List of client identifiers used for rate limiting. Can only be length 1 or 2.
         * 
         * @return builder
         * 
         */
        public Builder clientIdentifiers(List<NgwafWorkspaceRuleRateLimitClientIdentifierArgs> clientIdentifiers) {
            return clientIdentifiers(Output.of(clientIdentifiers));
        }

        /**
         * @param clientIdentifiers List of client identifiers used for rate limiting. Can only be length 1 or 2.
         * 
         * @return builder
         * 
         */
        public Builder clientIdentifiers(NgwafWorkspaceRuleRateLimitClientIdentifierArgs... clientIdentifiers) {
            return clientIdentifiers(List.of(clientIdentifiers));
        }

        /**
         * @param duration Duration in seconds for the rate limit.
         * 
         * @return builder
         * 
         */
        public Builder duration(Output<Integer> duration) {
            $.duration = duration;
            return this;
        }

        /**
         * @param duration Duration in seconds for the rate limit.
         * 
         * @return builder
         * 
         */
        public Builder duration(Integer duration) {
            return duration(Output.of(duration));
        }

        /**
         * @param interval Time interval for the rate limit in seconds. Accepted values are 60, 600, and 3600.
         * 
         * @return builder
         * 
         */
        public Builder interval(Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval Time interval for the rate limit in seconds. Accepted values are 60, 600, and 3600.
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param signal Reference ID of the custom signal this rule uses to count requests.
         * 
         * @return builder
         * 
         */
        public Builder signal(Output<String> signal) {
            $.signal = signal;
            return this;
        }

        /**
         * @param signal Reference ID of the custom signal this rule uses to count requests.
         * 
         * @return builder
         * 
         */
        public Builder signal(String signal) {
            return signal(Output.of(signal));
        }

        /**
         * @param threshold Rate limit threshold. Minimum 1 and maximum 10,000.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Rate limit threshold. Minimum 1 and maximum 10,000.
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        public NgwafWorkspaceRuleRateLimitArgs build() {
            if ($.clientIdentifiers == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimitArgs", "clientIdentifiers");
            }
            if ($.duration == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimitArgs", "duration");
            }
            if ($.interval == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimitArgs", "interval");
            }
            if ($.signal == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimitArgs", "signal");
            }
            if ($.threshold == null) {
                throw new MissingRequiredPropertyException("NgwafWorkspaceRuleRateLimitArgs", "threshold");
            }
            return $;
        }
    }

}
