// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TlsPlatformCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final TlsPlatformCertificateArgs Empty = new TlsPlatformCertificateArgs();

    /**
     * Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
     * 
     */
    @Import(name="allowUntrustedRoot")
    private @Nullable Output<Boolean> allowUntrustedRoot;

    /**
     * @return Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
     * 
     */
    public Optional<Output<Boolean>> allowUntrustedRoot() {
        return Optional.ofNullable(this.allowUntrustedRoot);
    }

    /**
     * PEM-formatted certificate.
     * 
     */
    @Import(name="certificateBody", required=true)
    private Output<String> certificateBody;

    /**
     * @return PEM-formatted certificate.
     * 
     */
    public Output<String> certificateBody() {
        return this.certificateBody;
    }

    /**
     * ID of TLS configuration to be used to terminate TLS traffic.
     * 
     */
    @Import(name="configurationId", required=true)
    private Output<String> configurationId;

    /**
     * @return ID of TLS configuration to be used to terminate TLS traffic.
     * 
     */
    public Output<String> configurationId() {
        return this.configurationId;
    }

    /**
     * PEM-formatted certificate chain from the `certificate_body` to its root.
     * 
     */
    @Import(name="intermediatesBlob", required=true)
    private Output<String> intermediatesBlob;

    /**
     * @return PEM-formatted certificate chain from the `certificate_body` to its root.
     * 
     */
    public Output<String> intermediatesBlob() {
        return this.intermediatesBlob;
    }

    private TlsPlatformCertificateArgs() {}

    private TlsPlatformCertificateArgs(TlsPlatformCertificateArgs $) {
        this.allowUntrustedRoot = $.allowUntrustedRoot;
        this.certificateBody = $.certificateBody;
        this.configurationId = $.configurationId;
        this.intermediatesBlob = $.intermediatesBlob;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TlsPlatformCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TlsPlatformCertificateArgs $;

        public Builder() {
            $ = new TlsPlatformCertificateArgs();
        }

        public Builder(TlsPlatformCertificateArgs defaults) {
            $ = new TlsPlatformCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowUntrustedRoot Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
         * 
         * @return builder
         * 
         */
        public Builder allowUntrustedRoot(@Nullable Output<Boolean> allowUntrustedRoot) {
            $.allowUntrustedRoot = allowUntrustedRoot;
            return this;
        }

        /**
         * @param allowUntrustedRoot Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
         * 
         * @return builder
         * 
         */
        public Builder allowUntrustedRoot(Boolean allowUntrustedRoot) {
            return allowUntrustedRoot(Output.of(allowUntrustedRoot));
        }

        /**
         * @param certificateBody PEM-formatted certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateBody(Output<String> certificateBody) {
            $.certificateBody = certificateBody;
            return this;
        }

        /**
         * @param certificateBody PEM-formatted certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificateBody(String certificateBody) {
            return certificateBody(Output.of(certificateBody));
        }

        /**
         * @param configurationId ID of TLS configuration to be used to terminate TLS traffic.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(Output<String> configurationId) {
            $.configurationId = configurationId;
            return this;
        }

        /**
         * @param configurationId ID of TLS configuration to be used to terminate TLS traffic.
         * 
         * @return builder
         * 
         */
        public Builder configurationId(String configurationId) {
            return configurationId(Output.of(configurationId));
        }

        /**
         * @param intermediatesBlob PEM-formatted certificate chain from the `certificate_body` to its root.
         * 
         * @return builder
         * 
         */
        public Builder intermediatesBlob(Output<String> intermediatesBlob) {
            $.intermediatesBlob = intermediatesBlob;
            return this;
        }

        /**
         * @param intermediatesBlob PEM-formatted certificate chain from the `certificate_body` to its root.
         * 
         * @return builder
         * 
         */
        public Builder intermediatesBlob(String intermediatesBlob) {
            return intermediatesBlob(Output.of(intermediatesBlob));
        }

        public TlsPlatformCertificateArgs build() {
            if ($.certificateBody == null) {
                throw new MissingRequiredPropertyException("TlsPlatformCertificateArgs", "certificateBody");
            }
            if ($.configurationId == null) {
                throw new MissingRequiredPropertyException("TlsPlatformCertificateArgs", "configurationId");
            }
            if ($.intermediatesBlob == null) {
                throw new MissingRequiredPropertyException("TlsPlatformCertificateArgs", "intermediatesBlob");
            }
            return $;
        }
    }

}
