// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceComputeLoggingLogentryArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceComputeLoggingLogentryArgs Empty = new ServiceComputeLoggingLogentryArgs();

    /**
     * The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The port number configured in Logentries
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port number configured in Logentries
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * Use token based authentication (https://logentries.com/doc/input-token/)
     * 
     */
    @Import(name="token", required=true)
    private Output<String> token;

    /**
     * @return Use token based authentication (https://logentries.com/doc/input-token/)
     * 
     */
    public Output<String> token() {
        return this.token;
    }

    /**
     * Whether to use TLS for secure logging
     * 
     */
    @Import(name="useTls")
    private @Nullable Output<Boolean> useTls;

    /**
     * @return Whether to use TLS for secure logging
     * 
     */
    public Optional<Output<Boolean>> useTls() {
        return Optional.ofNullable(this.useTls);
    }

    private ServiceComputeLoggingLogentryArgs() {}

    private ServiceComputeLoggingLogentryArgs(ServiceComputeLoggingLogentryArgs $) {
        this.name = $.name;
        this.port = $.port;
        this.token = $.token;
        this.useTls = $.useTls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceComputeLoggingLogentryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceComputeLoggingLogentryArgs $;

        public Builder() {
            $ = new ServiceComputeLoggingLogentryArgs();
        }

        public Builder(ServiceComputeLoggingLogentryArgs defaults) {
            $ = new ServiceComputeLoggingLogentryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param port The port number configured in Logentries
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port number configured in Logentries
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param token Use token based authentication (https://logentries.com/doc/input-token/)
         * 
         * @return builder
         * 
         */
        public Builder token(Output<String> token) {
            $.token = token;
            return this;
        }

        /**
         * @param token Use token based authentication (https://logentries.com/doc/input-token/)
         * 
         * @return builder
         * 
         */
        public Builder token(String token) {
            return token(Output.of(token));
        }

        /**
         * @param useTls Whether to use TLS for secure logging
         * 
         * @return builder
         * 
         */
        public Builder useTls(@Nullable Output<Boolean> useTls) {
            $.useTls = useTls;
            return this;
        }

        /**
         * @param useTls Whether to use TLS for secure logging
         * 
         * @return builder
         * 
         */
        public Builder useTls(Boolean useTls) {
            return useTls(Output.of(useTls));
        }

        public ServiceComputeLoggingLogentryArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.token = Objects.requireNonNull($.token, "expected parameter 'token' to be non-null");
            return $;
        }
    }

}
