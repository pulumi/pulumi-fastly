// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.fastly.inputs.CustomDashboardDashboardItemDataSourceArgs;
import com.pulumi.fastly.inputs.CustomDashboardDashboardItemVisualizationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDashboardDashboardItemArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomDashboardDashboardItemArgs Empty = new CustomDashboardDashboardItemArgs();

    /**
     * An object which describes the data to display.
     * 
     */
    @Import(name="dataSource", required=true)
    private Output<CustomDashboardDashboardItemDataSourceArgs> dataSource;

    /**
     * @return An object which describes the data to display.
     * 
     */
    public Output<CustomDashboardDashboardItemDataSourceArgs> dataSource() {
        return this.dataSource;
    }

    /**
     * Dashboard item identifier (alphanumeric). Must be unique, relative to other items in the same dashboard.
     * 
     */
    @Import(name="id", required=true)
    private Output<String> id;

    /**
     * @return Dashboard item identifier (alphanumeric). Must be unique, relative to other items in the same dashboard.
     * 
     */
    public Output<String> id() {
        return this.id;
    }

    /**
     * The number of columns for the dashboard item to span. Dashboards are rendered on a 12-column grid on &#34;desktop&#34; screen sizes.
     * 
     */
    @Import(name="span")
    private @Nullable Output<Integer> span;

    /**
     * @return The number of columns for the dashboard item to span. Dashboards are rendered on a 12-column grid on &#34;desktop&#34; screen sizes.
     * 
     */
    public Optional<Output<Integer>> span() {
        return Optional.ofNullable(this.span);
    }

    /**
     * A human-readable subtitle for the dashboard item. Often a description of the visualization.
     * 
     */
    @Import(name="subtitle", required=true)
    private Output<String> subtitle;

    /**
     * @return A human-readable subtitle for the dashboard item. Often a description of the visualization.
     * 
     */
    public Output<String> subtitle() {
        return this.subtitle;
    }

    /**
     * A human-readable title for the dashboard item.
     * 
     */
    @Import(name="title", required=true)
    private Output<String> title;

    /**
     * @return A human-readable title for the dashboard item.
     * 
     */
    public Output<String> title() {
        return this.title;
    }

    /**
     * An object which describes the data visualization to display.
     * 
     */
    @Import(name="visualization", required=true)
    private Output<CustomDashboardDashboardItemVisualizationArgs> visualization;

    /**
     * @return An object which describes the data visualization to display.
     * 
     */
    public Output<CustomDashboardDashboardItemVisualizationArgs> visualization() {
        return this.visualization;
    }

    private CustomDashboardDashboardItemArgs() {}

    private CustomDashboardDashboardItemArgs(CustomDashboardDashboardItemArgs $) {
        this.dataSource = $.dataSource;
        this.id = $.id;
        this.span = $.span;
        this.subtitle = $.subtitle;
        this.title = $.title;
        this.visualization = $.visualization;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDashboardDashboardItemArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDashboardDashboardItemArgs $;

        public Builder() {
            $ = new CustomDashboardDashboardItemArgs();
        }

        public Builder(CustomDashboardDashboardItemArgs defaults) {
            $ = new CustomDashboardDashboardItemArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataSource An object which describes the data to display.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(Output<CustomDashboardDashboardItemDataSourceArgs> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        /**
         * @param dataSource An object which describes the data to display.
         * 
         * @return builder
         * 
         */
        public Builder dataSource(CustomDashboardDashboardItemDataSourceArgs dataSource) {
            return dataSource(Output.of(dataSource));
        }

        /**
         * @param id Dashboard item identifier (alphanumeric). Must be unique, relative to other items in the same dashboard.
         * 
         * @return builder
         * 
         */
        public Builder id(Output<String> id) {
            $.id = id;
            return this;
        }

        /**
         * @param id Dashboard item identifier (alphanumeric). Must be unique, relative to other items in the same dashboard.
         * 
         * @return builder
         * 
         */
        public Builder id(String id) {
            return id(Output.of(id));
        }

        /**
         * @param span The number of columns for the dashboard item to span. Dashboards are rendered on a 12-column grid on &#34;desktop&#34; screen sizes.
         * 
         * @return builder
         * 
         */
        public Builder span(@Nullable Output<Integer> span) {
            $.span = span;
            return this;
        }

        /**
         * @param span The number of columns for the dashboard item to span. Dashboards are rendered on a 12-column grid on &#34;desktop&#34; screen sizes.
         * 
         * @return builder
         * 
         */
        public Builder span(Integer span) {
            return span(Output.of(span));
        }

        /**
         * @param subtitle A human-readable subtitle for the dashboard item. Often a description of the visualization.
         * 
         * @return builder
         * 
         */
        public Builder subtitle(Output<String> subtitle) {
            $.subtitle = subtitle;
            return this;
        }

        /**
         * @param subtitle A human-readable subtitle for the dashboard item. Often a description of the visualization.
         * 
         * @return builder
         * 
         */
        public Builder subtitle(String subtitle) {
            return subtitle(Output.of(subtitle));
        }

        /**
         * @param title A human-readable title for the dashboard item.
         * 
         * @return builder
         * 
         */
        public Builder title(Output<String> title) {
            $.title = title;
            return this;
        }

        /**
         * @param title A human-readable title for the dashboard item.
         * 
         * @return builder
         * 
         */
        public Builder title(String title) {
            return title(Output.of(title));
        }

        /**
         * @param visualization An object which describes the data visualization to display.
         * 
         * @return builder
         * 
         */
        public Builder visualization(Output<CustomDashboardDashboardItemVisualizationArgs> visualization) {
            $.visualization = visualization;
            return this;
        }

        /**
         * @param visualization An object which describes the data visualization to display.
         * 
         * @return builder
         * 
         */
        public Builder visualization(CustomDashboardDashboardItemVisualizationArgs visualization) {
            return visualization(Output.of(visualization));
        }

        public CustomDashboardDashboardItemArgs build() {
            if ($.dataSource == null) {
                throw new MissingRequiredPropertyException("CustomDashboardDashboardItemArgs", "dataSource");
            }
            if ($.id == null) {
                throw new MissingRequiredPropertyException("CustomDashboardDashboardItemArgs", "id");
            }
            if ($.subtitle == null) {
                throw new MissingRequiredPropertyException("CustomDashboardDashboardItemArgs", "subtitle");
            }
            if ($.title == null) {
                throw new MissingRequiredPropertyException("CustomDashboardDashboardItemArgs", "title");
            }
            if ($.visualization == null) {
                throw new MissingRequiredPropertyException("CustomDashboardDashboardItemArgs", "visualization");
            }
            return $;
        }
    }

}
