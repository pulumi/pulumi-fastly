// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclVclArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclVclArgs Empty = new ServiceVclVclArgs();

    /**
     * The custom VCL code to upload
     * 
     */
    @Import(name="content", required=true)
    private Output<String> content;

    /**
     * @return The custom VCL code to upload
     * 
     */
    public Output<String> content() {
        return this.content;
    }

    /**
     * If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
     * 
     */
    @Import(name="main")
    private @Nullable Output<Boolean> main;

    /**
     * @return If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
     * 
     */
    public Optional<Output<Boolean>> main() {
        return Optional.ofNullable(this.main);
    }

    /**
     * A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private ServiceVclVclArgs() {}

    private ServiceVclVclArgs(ServiceVclVclArgs $) {
        this.content = $.content;
        this.main = $.main;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclVclArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclVclArgs $;

        public Builder() {
            $ = new ServiceVclVclArgs();
        }

        public Builder(ServiceVclVclArgs defaults) {
            $ = new ServiceVclVclArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param content The custom VCL code to upload
         * 
         * @return builder
         * 
         */
        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        /**
         * @param content The custom VCL code to upload
         * 
         * @return builder
         * 
         */
        public Builder content(String content) {
            return content(Output.of(content));
        }

        /**
         * @param main If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
         * 
         * @return builder
         * 
         */
        public Builder main(@Nullable Output<Boolean> main) {
            $.main = main;
            return this;
        }

        /**
         * @param main If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
         * 
         * @return builder
         * 
         */
        public Builder main(Boolean main) {
            return main(Output.of(main));
        }

        /**
         * @param name A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public ServiceVclVclArgs build() {
            if ($.content == null) {
                throw new MissingRequiredPropertyException("ServiceVclVclArgs", "content");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("ServiceVclVclArgs", "name");
            }
            return $;
        }
    }

}
