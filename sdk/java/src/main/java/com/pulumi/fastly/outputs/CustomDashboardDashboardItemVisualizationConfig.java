// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class CustomDashboardDashboardItemVisualizationConfig {
    /**
     * @return The aggregation function to apply to the dataset. One of: `avg`, `sum`, `min`, `max`, `latest`, `p95`.
     * 
     */
    private @Nullable String calculationMethod;
    /**
     * @return The units to use to format the data. One of: `number`, `bytes`, `percent`, `requests`, `responses`, `seconds`, `milliseconds`, `ratio`, `bitrate`.
     * 
     */
    private @Nullable String format;
    /**
     * @return The type of chart to display. One of: `line`, `bar`, `single-metric`, `donut`.
     * 
     */
    private String plotType;

    private CustomDashboardDashboardItemVisualizationConfig() {}
    /**
     * @return The aggregation function to apply to the dataset. One of: `avg`, `sum`, `min`, `max`, `latest`, `p95`.
     * 
     */
    public Optional<String> calculationMethod() {
        return Optional.ofNullable(this.calculationMethod);
    }
    /**
     * @return The units to use to format the data. One of: `number`, `bytes`, `percent`, `requests`, `responses`, `seconds`, `milliseconds`, `ratio`, `bitrate`.
     * 
     */
    public Optional<String> format() {
        return Optional.ofNullable(this.format);
    }
    /**
     * @return The type of chart to display. One of: `line`, `bar`, `single-metric`, `donut`.
     * 
     */
    public String plotType() {
        return this.plotType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(CustomDashboardDashboardItemVisualizationConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String calculationMethod;
        private @Nullable String format;
        private String plotType;
        public Builder() {}
        public Builder(CustomDashboardDashboardItemVisualizationConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.calculationMethod = defaults.calculationMethod;
    	      this.format = defaults.format;
    	      this.plotType = defaults.plotType;
        }

        @CustomType.Setter
        public Builder calculationMethod(@Nullable String calculationMethod) {

            this.calculationMethod = calculationMethod;
            return this;
        }
        @CustomType.Setter
        public Builder format(@Nullable String format) {

            this.format = format;
            return this;
        }
        @CustomType.Setter
        public Builder plotType(String plotType) {
            if (plotType == null) {
              throw new MissingRequiredPropertyException("CustomDashboardDashboardItemVisualizationConfig", "plotType");
            }
            this.plotType = plotType;
            return this;
        }
        public CustomDashboardDashboardItemVisualizationConfig build() {
            final var _resultValue = new CustomDashboardDashboardItemVisualizationConfig();
            _resultValue.calculationMethod = calculationMethod;
            _resultValue.format = format;
            _resultValue.plotType = plotType;
            return _resultValue;
        }
    }
}
