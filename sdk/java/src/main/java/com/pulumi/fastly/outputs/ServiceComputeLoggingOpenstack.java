// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceComputeLoggingOpenstack {
    /**
     * @return Your OpenStack account access key
     * 
     */
    private String accessKey;
    /**
     * @return The name of your OpenStack container
     * 
     */
    private String bucketName;
    /**
     * @return The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is &#34;gzip&#34;, gzip_level will default to 3. To specify a different level, leave compression_codec blank and explicitly set the level using gzip_level. Specifying both compression_codec and gzip_level in the same API request will result in an error.
     * 
     */
    private @Nullable String compressionCodec;
    /**
     * @return Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     * 
     */
    private @Nullable Integer gzipLevel;
    /**
     * @return How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     * 
     */
    private @Nullable String messageType;
    /**
     * @return The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket&#39;s root path
     * 
     */
    private @Nullable String path;
    /**
     * @return How frequently the logs should be transferred, in seconds. Default `3600`
     * 
     */
    private @Nullable Integer period;
    /**
     * @return A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     * 
     */
    private @Nullable String publicKey;
    /**
     * @return The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     * 
     */
    private @Nullable String timestampFormat;
    /**
     * @return Your OpenStack auth url
     * 
     */
    private String url;
    /**
     * @return The username for your OpenStack account
     * 
     */
    private String user;

    private ServiceComputeLoggingOpenstack() {}
    /**
     * @return Your OpenStack account access key
     * 
     */
    public String accessKey() {
        return this.accessKey;
    }
    /**
     * @return The name of your OpenStack container
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is &#34;gzip&#34;, gzip_level will default to 3. To specify a different level, leave compression_codec blank and explicitly set the level using gzip_level. Specifying both compression_codec and gzip_level in the same API request will result in an error.
     * 
     */
    public Optional<String> compressionCodec() {
        return Optional.ofNullable(this.compressionCodec);
    }
    /**
     * @return Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
     * 
     */
    public Optional<Integer> gzipLevel() {
        return Optional.ofNullable(this.gzipLevel);
    }
    /**
     * @return How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
     * 
     */
    public Optional<String> messageType() {
        return Optional.ofNullable(this.messageType);
    }
    /**
     * @return The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket&#39;s root path
     * 
     */
    public Optional<String> path() {
        return Optional.ofNullable(this.path);
    }
    /**
     * @return How frequently the logs should be transferred, in seconds. Default `3600`
     * 
     */
    public Optional<Integer> period() {
        return Optional.ofNullable(this.period);
    }
    /**
     * @return A PGP public key that Fastly will use to encrypt your log files before writing them to disk
     * 
     */
    public Optional<String> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }
    /**
     * @return The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
     * 
     */
    public Optional<String> timestampFormat() {
        return Optional.ofNullable(this.timestampFormat);
    }
    /**
     * @return Your OpenStack auth url
     * 
     */
    public String url() {
        return this.url;
    }
    /**
     * @return The username for your OpenStack account
     * 
     */
    public String user() {
        return this.user;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceComputeLoggingOpenstack defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessKey;
        private String bucketName;
        private @Nullable String compressionCodec;
        private @Nullable Integer gzipLevel;
        private @Nullable String messageType;
        private String name;
        private @Nullable String path;
        private @Nullable Integer period;
        private @Nullable String publicKey;
        private @Nullable String timestampFormat;
        private String url;
        private String user;
        public Builder() {}
        public Builder(ServiceComputeLoggingOpenstack defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessKey = defaults.accessKey;
    	      this.bucketName = defaults.bucketName;
    	      this.compressionCodec = defaults.compressionCodec;
    	      this.gzipLevel = defaults.gzipLevel;
    	      this.messageType = defaults.messageType;
    	      this.name = defaults.name;
    	      this.path = defaults.path;
    	      this.period = defaults.period;
    	      this.publicKey = defaults.publicKey;
    	      this.timestampFormat = defaults.timestampFormat;
    	      this.url = defaults.url;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder accessKey(String accessKey) {
            if (accessKey == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingOpenstack", "accessKey");
            }
            this.accessKey = accessKey;
            return this;
        }
        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingOpenstack", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder compressionCodec(@Nullable String compressionCodec) {

            this.compressionCodec = compressionCodec;
            return this;
        }
        @CustomType.Setter
        public Builder gzipLevel(@Nullable Integer gzipLevel) {

            this.gzipLevel = gzipLevel;
            return this;
        }
        @CustomType.Setter
        public Builder messageType(@Nullable String messageType) {

            this.messageType = messageType;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingOpenstack", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder path(@Nullable String path) {

            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder period(@Nullable Integer period) {

            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(@Nullable String publicKey) {

            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder timestampFormat(@Nullable String timestampFormat) {

            this.timestampFormat = timestampFormat;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingOpenstack", "url");
            }
            this.url = url;
            return this;
        }
        @CustomType.Setter
        public Builder user(String user) {
            if (user == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingOpenstack", "user");
            }
            this.user = user;
            return this;
        }
        public ServiceComputeLoggingOpenstack build() {
            final var _resultValue = new ServiceComputeLoggingOpenstack();
            _resultValue.accessKey = accessKey;
            _resultValue.bucketName = bucketName;
            _resultValue.compressionCodec = compressionCodec;
            _resultValue.gzipLevel = gzipLevel;
            _resultValue.messageType = messageType;
            _resultValue.name = name;
            _resultValue.path = path;
            _resultValue.period = period;
            _resultValue.publicKey = publicKey;
            _resultValue.timestampFormat = timestampFormat;
            _resultValue.url = url;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
