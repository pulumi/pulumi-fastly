// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.fastly.outputs.GetTlsConfigurationDnsRecord;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTlsConfigurationResult {
    /**
     * @return Timestamp (GMT) when the configuration was created.
     * 
     */
    private String createdAt;
    /**
     * @return Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
     * 
     */
    private Boolean default_;
    /**
     * @return The available DNS addresses that can be used to enable TLS for a domain. DNS must be configured for a domain for TLS handshakes to succeed. If enabling TLS on an apex domain (e.g. `example.com`) you must create four A records (or four AAAA records for IPv6 support) using the displayed global A record&#39;s IP addresses with your DNS provider. For subdomains and wildcard domains (e.g. `www.example.com` or `*.example.com`) you will need to create a relevant CNAME record.
     * 
     */
    private List<GetTlsConfigurationDnsRecord> dnsRecords;
    /**
     * @return HTTP protocols available on the TLS configuration.
     * 
     */
    private List<String> httpProtocols;
    /**
     * @return ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
     * 
     */
    private String id;
    /**
     * @return Custom name of the TLS configuration.
     * 
     */
    private String name;
    /**
     * @return TLS protocols available on the TLS configuration.
     * 
     */
    private List<String> tlsProtocols;
    /**
     * @return Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
     * 
     */
    private String tlsService;
    /**
     * @return Timestamp (GMT) when the configuration was last updated.
     * 
     */
    private String updatedAt;

    private GetTlsConfigurationResult() {}
    /**
     * @return Timestamp (GMT) when the configuration was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
     * 
     */
    public Boolean default_() {
        return this.default_;
    }
    /**
     * @return The available DNS addresses that can be used to enable TLS for a domain. DNS must be configured for a domain for TLS handshakes to succeed. If enabling TLS on an apex domain (e.g. `example.com`) you must create four A records (or four AAAA records for IPv6 support) using the displayed global A record&#39;s IP addresses with your DNS provider. For subdomains and wildcard domains (e.g. `www.example.com` or `*.example.com`) you will need to create a relevant CNAME record.
     * 
     */
    public List<GetTlsConfigurationDnsRecord> dnsRecords() {
        return this.dnsRecords;
    }
    /**
     * @return HTTP protocols available on the TLS configuration.
     * 
     */
    public List<String> httpProtocols() {
        return this.httpProtocols;
    }
    /**
     * @return ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Custom name of the TLS configuration.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return TLS protocols available on the TLS configuration.
     * 
     */
    public List<String> tlsProtocols() {
        return this.tlsProtocols;
    }
    /**
     * @return Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
     * 
     */
    public String tlsService() {
        return this.tlsService;
    }
    /**
     * @return Timestamp (GMT) when the configuration was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTlsConfigurationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private Boolean default_;
        private List<GetTlsConfigurationDnsRecord> dnsRecords;
        private List<String> httpProtocols;
        private String id;
        private String name;
        private List<String> tlsProtocols;
        private String tlsService;
        private String updatedAt;
        public Builder() {}
        public Builder(GetTlsConfigurationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.default_ = defaults.default_;
    	      this.dnsRecords = defaults.dnsRecords;
    	      this.httpProtocols = defaults.httpProtocols;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.tlsProtocols = defaults.tlsProtocols;
    	      this.tlsService = defaults.tlsService;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter("default")
        public Builder default_(Boolean default_) {
            this.default_ = Objects.requireNonNull(default_);
            return this;
        }
        @CustomType.Setter
        public Builder dnsRecords(List<GetTlsConfigurationDnsRecord> dnsRecords) {
            this.dnsRecords = Objects.requireNonNull(dnsRecords);
            return this;
        }
        public Builder dnsRecords(GetTlsConfigurationDnsRecord... dnsRecords) {
            return dnsRecords(List.of(dnsRecords));
        }
        @CustomType.Setter
        public Builder httpProtocols(List<String> httpProtocols) {
            this.httpProtocols = Objects.requireNonNull(httpProtocols);
            return this;
        }
        public Builder httpProtocols(String... httpProtocols) {
            return httpProtocols(List.of(httpProtocols));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder tlsProtocols(List<String> tlsProtocols) {
            this.tlsProtocols = Objects.requireNonNull(tlsProtocols);
            return this;
        }
        public Builder tlsProtocols(String... tlsProtocols) {
            return tlsProtocols(List.of(tlsProtocols));
        }
        @CustomType.Setter
        public Builder tlsService(String tlsService) {
            this.tlsService = Objects.requireNonNull(tlsService);
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            this.updatedAt = Objects.requireNonNull(updatedAt);
            return this;
        }
        public GetTlsConfigurationResult build() {
            final var o = new GetTlsConfigurationResult();
            o.createdAt = createdAt;
            o.default_ = default_;
            o.dnsRecords = dnsRecords;
            o.httpProtocols = httpProtocols;
            o.id = id;
            o.name = name;
            o.tlsProtocols = tlsProtocols;
            o.tlsService = tlsService;
            o.updatedAt = updatedAt;
            return o;
        }
    }
}
