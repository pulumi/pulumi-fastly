// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceVclHealthcheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceVclHealthcheckArgs Empty = new ServiceVclHealthcheckArgs();

    /**
     * How often to run the Healthcheck in milliseconds. Default `5000`
     * 
     */
    @Import(name="checkInterval")
    private @Nullable Output<Integer> checkInterval;

    /**
     * @return How often to run the Healthcheck in milliseconds. Default `5000`
     * 
     */
    public Optional<Output<Integer>> checkInterval() {
        return Optional.ofNullable(this.checkInterval);
    }

    /**
     * The status code expected from the host. Default `200`
     * 
     */
    @Import(name="expectedResponse")
    private @Nullable Output<Integer> expectedResponse;

    /**
     * @return The status code expected from the host. Default `200`
     * 
     */
    public Optional<Output<Integer>> expectedResponse() {
        return Optional.ofNullable(this.expectedResponse);
    }

    /**
     * Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
     * 
     */
    @Import(name="headers")
    private @Nullable Output<List<String>> headers;

    /**
     * @return Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
     * 
     */
    public Optional<Output<List<String>>> headers() {
        return Optional.ofNullable(this.headers);
    }

    /**
     * The Host header to send for this Healthcheck
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The Host header to send for this Healthcheck
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
     * 
     */
    @Import(name="httpVersion")
    private @Nullable Output<String> httpVersion;

    /**
     * @return Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
     * 
     */
    public Optional<Output<String>> httpVersion() {
        return Optional.ofNullable(this.httpVersion);
    }

    /**
     * When loading a config, the initial number of probes to be seen as OK. Default `3`
     * 
     */
    @Import(name="initial")
    private @Nullable Output<Integer> initial;

    /**
     * @return When loading a config, the initial number of probes to be seen as OK. Default `3`
     * 
     */
    public Optional<Output<Integer>> initial() {
        return Optional.ofNullable(this.initial);
    }

    /**
     * Which HTTP method to use. Default `HEAD`
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return Which HTTP method to use. Default `HEAD`
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * The path to check
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return The path to check
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     * How many Healthchecks must succeed to be considered healthy. Default `3`
     * 
     */
    @Import(name="threshold")
    private @Nullable Output<Integer> threshold;

    /**
     * @return How many Healthchecks must succeed to be considered healthy. Default `3`
     * 
     */
    public Optional<Output<Integer>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    /**
     * Timeout in milliseconds. Default `500`
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return Timeout in milliseconds. Default `500`
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
     * 
     */
    @Import(name="window")
    private @Nullable Output<Integer> window;

    /**
     * @return The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
     * 
     */
    public Optional<Output<Integer>> window() {
        return Optional.ofNullable(this.window);
    }

    private ServiceVclHealthcheckArgs() {}

    private ServiceVclHealthcheckArgs(ServiceVclHealthcheckArgs $) {
        this.checkInterval = $.checkInterval;
        this.expectedResponse = $.expectedResponse;
        this.headers = $.headers;
        this.host = $.host;
        this.httpVersion = $.httpVersion;
        this.initial = $.initial;
        this.method = $.method;
        this.name = $.name;
        this.path = $.path;
        this.threshold = $.threshold;
        this.timeout = $.timeout;
        this.window = $.window;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceVclHealthcheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceVclHealthcheckArgs $;

        public Builder() {
            $ = new ServiceVclHealthcheckArgs();
        }

        public Builder(ServiceVclHealthcheckArgs defaults) {
            $ = new ServiceVclHealthcheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param checkInterval How often to run the Healthcheck in milliseconds. Default `5000`
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(@Nullable Output<Integer> checkInterval) {
            $.checkInterval = checkInterval;
            return this;
        }

        /**
         * @param checkInterval How often to run the Healthcheck in milliseconds. Default `5000`
         * 
         * @return builder
         * 
         */
        public Builder checkInterval(Integer checkInterval) {
            return checkInterval(Output.of(checkInterval));
        }

        /**
         * @param expectedResponse The status code expected from the host. Default `200`
         * 
         * @return builder
         * 
         */
        public Builder expectedResponse(@Nullable Output<Integer> expectedResponse) {
            $.expectedResponse = expectedResponse;
            return this;
        }

        /**
         * @param expectedResponse The status code expected from the host. Default `200`
         * 
         * @return builder
         * 
         */
        public Builder expectedResponse(Integer expectedResponse) {
            return expectedResponse(Output.of(expectedResponse));
        }

        /**
         * @param headers Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
         * 
         * @return builder
         * 
         */
        public Builder headers(@Nullable Output<List<String>> headers) {
            $.headers = headers;
            return this;
        }

        /**
         * @param headers Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
         * 
         * @return builder
         * 
         */
        public Builder headers(List<String> headers) {
            return headers(Output.of(headers));
        }

        /**
         * @param headers Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
         * 
         * @return builder
         * 
         */
        public Builder headers(String... headers) {
            return headers(List.of(headers));
        }

        /**
         * @param host The Host header to send for this Healthcheck
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The Host header to send for this Healthcheck
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param httpVersion Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
         * 
         * @return builder
         * 
         */
        public Builder httpVersion(@Nullable Output<String> httpVersion) {
            $.httpVersion = httpVersion;
            return this;
        }

        /**
         * @param httpVersion Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
         * 
         * @return builder
         * 
         */
        public Builder httpVersion(String httpVersion) {
            return httpVersion(Output.of(httpVersion));
        }

        /**
         * @param initial When loading a config, the initial number of probes to be seen as OK. Default `3`
         * 
         * @return builder
         * 
         */
        public Builder initial(@Nullable Output<Integer> initial) {
            $.initial = initial;
            return this;
        }

        /**
         * @param initial When loading a config, the initial number of probes to be seen as OK. Default `3`
         * 
         * @return builder
         * 
         */
        public Builder initial(Integer initial) {
            return initial(Output.of(initial));
        }

        /**
         * @param method Which HTTP method to use. Default `HEAD`
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method Which HTTP method to use. Default `HEAD`
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param name A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param path The path to check
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path The path to check
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        /**
         * @param threshold How many Healthchecks must succeed to be considered healthy. Default `3`
         * 
         * @return builder
         * 
         */
        public Builder threshold(@Nullable Output<Integer> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold How many Healthchecks must succeed to be considered healthy. Default `3`
         * 
         * @return builder
         * 
         */
        public Builder threshold(Integer threshold) {
            return threshold(Output.of(threshold));
        }

        /**
         * @param timeout Timeout in milliseconds. Default `500`
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Timeout in milliseconds. Default `500`
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param window The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
         * 
         * @return builder
         * 
         */
        public Builder window(@Nullable Output<Integer> window) {
            $.window = window;
            return this;
        }

        /**
         * @param window The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
         * 
         * @return builder
         * 
         */
        public Builder window(Integer window) {
            return window(Output.of(window));
        }

        public ServiceVclHealthcheckArgs build() {
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
