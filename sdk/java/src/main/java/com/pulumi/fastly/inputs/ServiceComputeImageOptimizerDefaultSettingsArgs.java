// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceComputeImageOptimizerDefaultSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceComputeImageOptimizerDefaultSettingsArgs Empty = new ServiceComputeImageOptimizerDefaultSettingsArgs();

    /**
     * Enables GIF to MP4 transformations on this service.
     * 
     */
    @Import(name="allowVideo")
    private @Nullable Output<Boolean> allowVideo;

    /**
     * @return Enables GIF to MP4 transformations on this service.
     * 
     */
    public Optional<Output<Boolean>> allowVideo() {
        return Optional.ofNullable(this.allowVideo);
    }

    /**
     * The default quality to use with JPEG output. This can be overridden with the &#34;quality&#34; parameter on specific image optimizer requests.
     * 
     */
    @Import(name="jpegQuality")
    private @Nullable Output<Integer> jpegQuality;

    /**
     * @return The default quality to use with JPEG output. This can be overridden with the &#34;quality&#34; parameter on specific image optimizer requests.
     * 
     */
    public Optional<Output<Integer>> jpegQuality() {
        return Optional.ofNullable(this.jpegQuality);
    }

    /**
     * The default type of JPEG output to use. This can be overridden with &#34;format=bjpeg&#34; and &#34;format=pjpeg&#34; on specific image optimizer requests. Valid values are `auto`, `baseline` and `progressive`.
     * 	- auto: Match the input JPEG type, or baseline if transforming from a non-JPEG input.
     * 	- baseline: Output baseline JPEG images
     * 	- progressive: Output progressive JPEG images
     * 
     */
    @Import(name="jpegType")
    private @Nullable Output<String> jpegType;

    /**
     * @return The default type of JPEG output to use. This can be overridden with &#34;format=bjpeg&#34; and &#34;format=pjpeg&#34; on specific image optimizer requests. Valid values are `auto`, `baseline` and `progressive`.
     * 	- auto: Match the input JPEG type, or baseline if transforming from a non-JPEG input.
     * 	- baseline: Output baseline JPEG images
     * 	- progressive: Output progressive JPEG images
     * 
     */
    public Optional<Output<String>> jpegType() {
        return Optional.ofNullable(this.jpegType);
    }

    /**
     * Used by the provider to identify modified settings. Changing this value will force the entire block to be deleted, then recreated.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Used by the provider to identify modified settings. Changing this value will force the entire block to be deleted, then recreated.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The type of filter to use while resizing an image. Valid values are `lanczos3`, `lanczos2`, `bicubic`, `bilinear` and `nearest`.
     * 	- lanczos3: A Lanczos filter with a kernel size of 3. Lanczos filters can detect edges and linear features within an image, providing the best possible reconstruction.
     * 	- lanczos2: A Lanczos filter with a kernel size of 2.
     * 	- bicubic: A filter using an average of a 4x4 environment of pixels, weighing the innermost pixels higher.
     * 	- bilinear: A filter using an average of a 2x2 environment of pixels.
     * 	- nearest: A filter using the value of nearby translated pixel values. Preserves hard edges.
     * 
     */
    @Import(name="resizeFilter")
    private @Nullable Output<String> resizeFilter;

    /**
     * @return The type of filter to use while resizing an image. Valid values are `lanczos3`, `lanczos2`, `bicubic`, `bilinear` and `nearest`.
     * 	- lanczos3: A Lanczos filter with a kernel size of 3. Lanczos filters can detect edges and linear features within an image, providing the best possible reconstruction.
     * 	- lanczos2: A Lanczos filter with a kernel size of 2.
     * 	- bicubic: A filter using an average of a 4x4 environment of pixels, weighing the innermost pixels higher.
     * 	- bilinear: A filter using an average of a 2x2 environment of pixels.
     * 	- nearest: A filter using the value of nearby translated pixel values. Preserves hard edges.
     * 
     */
    public Optional<Output<String>> resizeFilter() {
        return Optional.ofNullable(this.resizeFilter);
    }

    /**
     * Whether or not we should allow output images to render at sizes larger than input.
     * 
     */
    @Import(name="upscale")
    private @Nullable Output<Boolean> upscale;

    /**
     * @return Whether or not we should allow output images to render at sizes larger than input.
     * 
     */
    public Optional<Output<Boolean>> upscale() {
        return Optional.ofNullable(this.upscale);
    }

    /**
     * Controls whether or not to default to WebP output when the client supports it. This is equivalent to adding &#34;auto=webp&#34; to all image optimizer requests.
     * 
     */
    @Import(name="webp")
    private @Nullable Output<Boolean> webp;

    /**
     * @return Controls whether or not to default to WebP output when the client supports it. This is equivalent to adding &#34;auto=webp&#34; to all image optimizer requests.
     * 
     */
    public Optional<Output<Boolean>> webp() {
        return Optional.ofNullable(this.webp);
    }

    /**
     * The default quality to use with WebP output. This can be overridden with the second option in the &#34;quality&#34; URL parameter on specific image optimizer requests.
     * 
     */
    @Import(name="webpQuality")
    private @Nullable Output<Integer> webpQuality;

    /**
     * @return The default quality to use with WebP output. This can be overridden with the second option in the &#34;quality&#34; URL parameter on specific image optimizer requests.
     * 
     */
    public Optional<Output<Integer>> webpQuality() {
        return Optional.ofNullable(this.webpQuality);
    }

    private ServiceComputeImageOptimizerDefaultSettingsArgs() {}

    private ServiceComputeImageOptimizerDefaultSettingsArgs(ServiceComputeImageOptimizerDefaultSettingsArgs $) {
        this.allowVideo = $.allowVideo;
        this.jpegQuality = $.jpegQuality;
        this.jpegType = $.jpegType;
        this.name = $.name;
        this.resizeFilter = $.resizeFilter;
        this.upscale = $.upscale;
        this.webp = $.webp;
        this.webpQuality = $.webpQuality;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceComputeImageOptimizerDefaultSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceComputeImageOptimizerDefaultSettingsArgs $;

        public Builder() {
            $ = new ServiceComputeImageOptimizerDefaultSettingsArgs();
        }

        public Builder(ServiceComputeImageOptimizerDefaultSettingsArgs defaults) {
            $ = new ServiceComputeImageOptimizerDefaultSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowVideo Enables GIF to MP4 transformations on this service.
         * 
         * @return builder
         * 
         */
        public Builder allowVideo(@Nullable Output<Boolean> allowVideo) {
            $.allowVideo = allowVideo;
            return this;
        }

        /**
         * @param allowVideo Enables GIF to MP4 transformations on this service.
         * 
         * @return builder
         * 
         */
        public Builder allowVideo(Boolean allowVideo) {
            return allowVideo(Output.of(allowVideo));
        }

        /**
         * @param jpegQuality The default quality to use with JPEG output. This can be overridden with the &#34;quality&#34; parameter on specific image optimizer requests.
         * 
         * @return builder
         * 
         */
        public Builder jpegQuality(@Nullable Output<Integer> jpegQuality) {
            $.jpegQuality = jpegQuality;
            return this;
        }

        /**
         * @param jpegQuality The default quality to use with JPEG output. This can be overridden with the &#34;quality&#34; parameter on specific image optimizer requests.
         * 
         * @return builder
         * 
         */
        public Builder jpegQuality(Integer jpegQuality) {
            return jpegQuality(Output.of(jpegQuality));
        }

        /**
         * @param jpegType The default type of JPEG output to use. This can be overridden with &#34;format=bjpeg&#34; and &#34;format=pjpeg&#34; on specific image optimizer requests. Valid values are `auto`, `baseline` and `progressive`.
         * 	- auto: Match the input JPEG type, or baseline if transforming from a non-JPEG input.
         * 	- baseline: Output baseline JPEG images
         * 	- progressive: Output progressive JPEG images
         * 
         * @return builder
         * 
         */
        public Builder jpegType(@Nullable Output<String> jpegType) {
            $.jpegType = jpegType;
            return this;
        }

        /**
         * @param jpegType The default type of JPEG output to use. This can be overridden with &#34;format=bjpeg&#34; and &#34;format=pjpeg&#34; on specific image optimizer requests. Valid values are `auto`, `baseline` and `progressive`.
         * 	- auto: Match the input JPEG type, or baseline if transforming from a non-JPEG input.
         * 	- baseline: Output baseline JPEG images
         * 	- progressive: Output progressive JPEG images
         * 
         * @return builder
         * 
         */
        public Builder jpegType(String jpegType) {
            return jpegType(Output.of(jpegType));
        }

        /**
         * @param name Used by the provider to identify modified settings. Changing this value will force the entire block to be deleted, then recreated.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Used by the provider to identify modified settings. Changing this value will force the entire block to be deleted, then recreated.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param resizeFilter The type of filter to use while resizing an image. Valid values are `lanczos3`, `lanczos2`, `bicubic`, `bilinear` and `nearest`.
         * 	- lanczos3: A Lanczos filter with a kernel size of 3. Lanczos filters can detect edges and linear features within an image, providing the best possible reconstruction.
         * 	- lanczos2: A Lanczos filter with a kernel size of 2.
         * 	- bicubic: A filter using an average of a 4x4 environment of pixels, weighing the innermost pixels higher.
         * 	- bilinear: A filter using an average of a 2x2 environment of pixels.
         * 	- nearest: A filter using the value of nearby translated pixel values. Preserves hard edges.
         * 
         * @return builder
         * 
         */
        public Builder resizeFilter(@Nullable Output<String> resizeFilter) {
            $.resizeFilter = resizeFilter;
            return this;
        }

        /**
         * @param resizeFilter The type of filter to use while resizing an image. Valid values are `lanczos3`, `lanczos2`, `bicubic`, `bilinear` and `nearest`.
         * 	- lanczos3: A Lanczos filter with a kernel size of 3. Lanczos filters can detect edges and linear features within an image, providing the best possible reconstruction.
         * 	- lanczos2: A Lanczos filter with a kernel size of 2.
         * 	- bicubic: A filter using an average of a 4x4 environment of pixels, weighing the innermost pixels higher.
         * 	- bilinear: A filter using an average of a 2x2 environment of pixels.
         * 	- nearest: A filter using the value of nearby translated pixel values. Preserves hard edges.
         * 
         * @return builder
         * 
         */
        public Builder resizeFilter(String resizeFilter) {
            return resizeFilter(Output.of(resizeFilter));
        }

        /**
         * @param upscale Whether or not we should allow output images to render at sizes larger than input.
         * 
         * @return builder
         * 
         */
        public Builder upscale(@Nullable Output<Boolean> upscale) {
            $.upscale = upscale;
            return this;
        }

        /**
         * @param upscale Whether or not we should allow output images to render at sizes larger than input.
         * 
         * @return builder
         * 
         */
        public Builder upscale(Boolean upscale) {
            return upscale(Output.of(upscale));
        }

        /**
         * @param webp Controls whether or not to default to WebP output when the client supports it. This is equivalent to adding &#34;auto=webp&#34; to all image optimizer requests.
         * 
         * @return builder
         * 
         */
        public Builder webp(@Nullable Output<Boolean> webp) {
            $.webp = webp;
            return this;
        }

        /**
         * @param webp Controls whether or not to default to WebP output when the client supports it. This is equivalent to adding &#34;auto=webp&#34; to all image optimizer requests.
         * 
         * @return builder
         * 
         */
        public Builder webp(Boolean webp) {
            return webp(Output.of(webp));
        }

        /**
         * @param webpQuality The default quality to use with WebP output. This can be overridden with the second option in the &#34;quality&#34; URL parameter on specific image optimizer requests.
         * 
         * @return builder
         * 
         */
        public Builder webpQuality(@Nullable Output<Integer> webpQuality) {
            $.webpQuality = webpQuality;
            return this;
        }

        /**
         * @param webpQuality The default quality to use with WebP output. This can be overridden with the second option in the &#34;quality&#34; URL parameter on specific image optimizer requests.
         * 
         * @return builder
         * 
         */
        public Builder webpQuality(Integer webpQuality) {
            return webpQuality(Output.of(webpQuality));
        }

        public ServiceComputeImageOptimizerDefaultSettingsArgs build() {
            return $;
        }
    }

}
