// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ServiceComputeLoggingKafka {
    /**
     * @return SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
     * 
     */
    private @Nullable String authMethod;
    /**
     * @return A comma-separated list of IP addresses or hostnames of Kafka brokers
     * 
     */
    private String brokers;
    /**
     * @return The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
     * 
     */
    private @Nullable String compressionCodec;
    /**
     * @return The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    private String name;
    /**
     * @return Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
     * 
     */
    private @Nullable Boolean parseLogKeyvals;
    /**
     * @return SASL Pass
     * 
     */
    private @Nullable String password;
    /**
     * @return Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
     * 
     */
    private @Nullable Integer requestMaxBytes;
    /**
     * @return The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
     * 
     */
    private @Nullable String requiredAcks;
    /**
     * @return A secure certificate to authenticate the server with. Must be in PEM format
     * 
     */
    private @Nullable String tlsCaCert;
    /**
     * @return The client certificate used to make authenticated requests. Must be in PEM format
     * 
     */
    private @Nullable String tlsClientCert;
    /**
     * @return The client private key used to make authenticated requests. Must be in PEM format
     * 
     */
    private @Nullable String tlsClientKey;
    /**
     * @return The hostname used to verify the server&#39;s certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     * 
     */
    private @Nullable String tlsHostname;
    /**
     * @return The Kafka topic to send logs to
     * 
     */
    private String topic;
    /**
     * @return Whether to use TLS for secure logging. Can be either `true` or `false`
     * 
     */
    private @Nullable Boolean useTls;
    /**
     * @return SASL User
     * 
     */
    private @Nullable String user;

    private ServiceComputeLoggingKafka() {}
    /**
     * @return SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
     * 
     */
    public Optional<String> authMethod() {
        return Optional.ofNullable(this.authMethod);
    }
    /**
     * @return A comma-separated list of IP addresses or hostnames of Kafka brokers
     * 
     */
    public String brokers() {
        return this.brokers;
    }
    /**
     * @return The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
     * 
     */
    public Optional<String> compressionCodec() {
        return Optional.ofNullable(this.compressionCodec);
    }
    /**
     * @return The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
     * 
     */
    public Optional<Boolean> parseLogKeyvals() {
        return Optional.ofNullable(this.parseLogKeyvals);
    }
    /**
     * @return SASL Pass
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
     * 
     */
    public Optional<Integer> requestMaxBytes() {
        return Optional.ofNullable(this.requestMaxBytes);
    }
    /**
     * @return The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
     * 
     */
    public Optional<String> requiredAcks() {
        return Optional.ofNullable(this.requiredAcks);
    }
    /**
     * @return A secure certificate to authenticate the server with. Must be in PEM format
     * 
     */
    public Optional<String> tlsCaCert() {
        return Optional.ofNullable(this.tlsCaCert);
    }
    /**
     * @return The client certificate used to make authenticated requests. Must be in PEM format
     * 
     */
    public Optional<String> tlsClientCert() {
        return Optional.ofNullable(this.tlsClientCert);
    }
    /**
     * @return The client private key used to make authenticated requests. Must be in PEM format
     * 
     */
    public Optional<String> tlsClientKey() {
        return Optional.ofNullable(this.tlsClientKey);
    }
    /**
     * @return The hostname used to verify the server&#39;s certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
     * 
     */
    public Optional<String> tlsHostname() {
        return Optional.ofNullable(this.tlsHostname);
    }
    /**
     * @return The Kafka topic to send logs to
     * 
     */
    public String topic() {
        return this.topic;
    }
    /**
     * @return Whether to use TLS for secure logging. Can be either `true` or `false`
     * 
     */
    public Optional<Boolean> useTls() {
        return Optional.ofNullable(this.useTls);
    }
    /**
     * @return SASL User
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ServiceComputeLoggingKafka defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String authMethod;
        private String brokers;
        private @Nullable String compressionCodec;
        private String name;
        private @Nullable Boolean parseLogKeyvals;
        private @Nullable String password;
        private @Nullable Integer requestMaxBytes;
        private @Nullable String requiredAcks;
        private @Nullable String tlsCaCert;
        private @Nullable String tlsClientCert;
        private @Nullable String tlsClientKey;
        private @Nullable String tlsHostname;
        private String topic;
        private @Nullable Boolean useTls;
        private @Nullable String user;
        public Builder() {}
        public Builder(ServiceComputeLoggingKafka defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authMethod = defaults.authMethod;
    	      this.brokers = defaults.brokers;
    	      this.compressionCodec = defaults.compressionCodec;
    	      this.name = defaults.name;
    	      this.parseLogKeyvals = defaults.parseLogKeyvals;
    	      this.password = defaults.password;
    	      this.requestMaxBytes = defaults.requestMaxBytes;
    	      this.requiredAcks = defaults.requiredAcks;
    	      this.tlsCaCert = defaults.tlsCaCert;
    	      this.tlsClientCert = defaults.tlsClientCert;
    	      this.tlsClientKey = defaults.tlsClientKey;
    	      this.tlsHostname = defaults.tlsHostname;
    	      this.topic = defaults.topic;
    	      this.useTls = defaults.useTls;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder authMethod(@Nullable String authMethod) {

            this.authMethod = authMethod;
            return this;
        }
        @CustomType.Setter
        public Builder brokers(String brokers) {
            if (brokers == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingKafka", "brokers");
            }
            this.brokers = brokers;
            return this;
        }
        @CustomType.Setter
        public Builder compressionCodec(@Nullable String compressionCodec) {

            this.compressionCodec = compressionCodec;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingKafka", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parseLogKeyvals(@Nullable Boolean parseLogKeyvals) {

            this.parseLogKeyvals = parseLogKeyvals;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder requestMaxBytes(@Nullable Integer requestMaxBytes) {

            this.requestMaxBytes = requestMaxBytes;
            return this;
        }
        @CustomType.Setter
        public Builder requiredAcks(@Nullable String requiredAcks) {

            this.requiredAcks = requiredAcks;
            return this;
        }
        @CustomType.Setter
        public Builder tlsCaCert(@Nullable String tlsCaCert) {

            this.tlsCaCert = tlsCaCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientCert(@Nullable String tlsClientCert) {

            this.tlsClientCert = tlsClientCert;
            return this;
        }
        @CustomType.Setter
        public Builder tlsClientKey(@Nullable String tlsClientKey) {

            this.tlsClientKey = tlsClientKey;
            return this;
        }
        @CustomType.Setter
        public Builder tlsHostname(@Nullable String tlsHostname) {

            this.tlsHostname = tlsHostname;
            return this;
        }
        @CustomType.Setter
        public Builder topic(String topic) {
            if (topic == null) {
              throw new MissingRequiredPropertyException("ServiceComputeLoggingKafka", "topic");
            }
            this.topic = topic;
            return this;
        }
        @CustomType.Setter
        public Builder useTls(@Nullable Boolean useTls) {

            this.useTls = useTls;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {

            this.user = user;
            return this;
        }
        public ServiceComputeLoggingKafka build() {
            final var _resultValue = new ServiceComputeLoggingKafka();
            _resultValue.authMethod = authMethod;
            _resultValue.brokers = brokers;
            _resultValue.compressionCodec = compressionCodec;
            _resultValue.name = name;
            _resultValue.parseLogKeyvals = parseLogKeyvals;
            _resultValue.password = password;
            _resultValue.requestMaxBytes = requestMaxBytes;
            _resultValue.requiredAcks = requiredAcks;
            _resultValue.tlsCaCert = tlsCaCert;
            _resultValue.tlsClientCert = tlsClientCert;
            _resultValue.tlsClientKey = tlsClientKey;
            _resultValue.tlsHostname = tlsHostname;
            _resultValue.topic = topic;
            _resultValue.useTls = useTls;
            _resultValue.user = user;
            return _resultValue;
        }
    }
}
