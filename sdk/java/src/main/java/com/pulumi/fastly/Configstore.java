// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.fastly.ConfigstoreArgs;
import com.pulumi.fastly.Utilities;
import com.pulumi.fastly.inputs.ConfigstoreState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Provides a container that lets you store data in key-value pairs that are accessible to Compute services during request processing.
 * 
 * In order for a Config Store (`fastly.Configstore`) to be accessible to a [Compute](https://developer.fastly.com/learning/compute/) service you&#39;ll first need to define a Compute service (`fastly.ServiceCompute`) in your configuration, and then create a link to the Config Store from within the service using the `resource_link` block (shown in the below examples).
 * 
 * ## Example Usage
 * 
 * Basic usage:
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.fastly.Configstore;
 * import com.pulumi.fastly.ConfigstoreArgs;
 * import com.pulumi.fastly.FastlyFunctions;
 * import com.pulumi.fastly.inputs.GetPackageHashArgs;
 * import com.pulumi.fastly.ServiceCompute;
 * import com.pulumi.fastly.ServiceComputeArgs;
 * import com.pulumi.fastly.inputs.ServiceComputeDomainArgs;
 * import com.pulumi.fastly.inputs.ServiceComputePackageArgs;
 * import com.pulumi.fastly.inputs.ServiceComputeResourceLinkArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // IMPORTANT: Deleting a Config Store requires first deleting its resource_link.
 *         // This requires a two-step `pulumi up` as we can't guarantee deletion order.
 *         // e.g. resource_link deletion within fastly_service_compute might not finish first.
 *         var exampleConfigstore = new Configstore("exampleConfigstore", ConfigstoreArgs.builder()        
 *             .name("my_config_store")
 *             .build());
 * 
 *         final var example = FastlyFunctions.getPackageHash(GetPackageHashArgs.builder()
 *             .filename("package.tar.gz")
 *             .build());
 * 
 *         var exampleServiceCompute = new ServiceCompute("exampleServiceCompute", ServiceComputeArgs.builder()        
 *             .name("my_compute_service")
 *             .domains(ServiceComputeDomainArgs.builder()
 *                 .name("demo.example.com")
 *                 .build())
 *             .package_(ServiceComputePackageArgs.builder()
 *                 .filename("package.tar.gz")
 *                 .sourceCodeHash(example.applyValue(getPackageHashResult -> getPackageHashResult.hash()))
 *                 .build())
 *             .resourceLinks(ServiceComputeResourceLinkArgs.builder()
 *                 .name("my_resource_link")
 *                 .resourceId(exampleConfigstore.id())
 *                 .build())
 *             .forceDestroy(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Fastly Config Stores can be imported using their Store ID, e.g.
 * 
 * ```sh
 * $ pulumi import fastly:index/configstore:Configstore example xxxxxxxxxxxxxxxxxxxx
 * ```
 * 
 */
@ResourceType(type="fastly:index/configstore:Configstore")
public class Configstore extends com.pulumi.resources.CustomResource {
    /**
     * Allow the Config Store to be deleted, even if it contains entries. Defaults to false.
     * 
     */
    @Export(name="forceDestroy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> forceDestroy;

    /**
     * @return Allow the Config Store to be deleted, even if it contains entries. Defaults to false.
     * 
     */
    public Output<Optional<Boolean>> forceDestroy() {
        return Codegen.optional(this.forceDestroy);
    }
    /**
     * A unique name to identify the Config Store. It is important to note that changing this attribute will delete and recreate the Config Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return A unique name to identify the Config Store. It is important to note that changing this attribute will delete and recreate the Config Store, and discard the current entries. You MUST first delete the associated resource_link block from your service before modifying this field.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Configstore(String name) {
        this(name, ConfigstoreArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Configstore(String name, @Nullable ConfigstoreArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Configstore(String name, @Nullable ConfigstoreArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/configstore:Configstore", name, args == null ? ConfigstoreArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Configstore(String name, Output<String> id, @Nullable ConfigstoreState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("fastly:index/configstore:Configstore", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Configstore get(String name, Output<String> id, @Nullable ConfigstoreState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Configstore(name, id, state, options);
    }
}
