// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTlsPlatformCertificateResult {
    /**
     * @return ID of TLS configuration used to terminate TLS traffic.
     * 
     */
    private String configurationId;
    /**
     * @return Timestamp (GMT) when the certificate was created.
     * 
     */
    private String createdAt;
    /**
     * @return Domains that are listed in any certificate&#39;s Subject Alternative Names (SAN) list.
     * 
     */
    private List<String> domains;
    /**
     * @return Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
     * 
     */
    private String id;
    /**
     * @return Timestamp (GMT) when the certificate will expire.
     * 
     */
    private String notAfter;
    /**
     * @return Timestamp (GMT) when the certificate will become valid.
     * 
     */
    private String notBefore;
    /**
     * @return A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     * 
     */
    private Boolean replace;
    /**
     * @return Timestamp (GMT) when the certificate was last updated.
     * 
     */
    private String updatedAt;

    private GetTlsPlatformCertificateResult() {}
    /**
     * @return ID of TLS configuration used to terminate TLS traffic.
     * 
     */
    public String configurationId() {
        return this.configurationId;
    }
    /**
     * @return Timestamp (GMT) when the certificate was created.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Domains that are listed in any certificate&#39;s Subject Alternative Names (SAN) list.
     * 
     */
    public List<String> domains() {
        return this.domains;
    }
    /**
     * @return Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Timestamp (GMT) when the certificate will expire.
     * 
     */
    public String notAfter() {
        return this.notAfter;
    }
    /**
     * @return Timestamp (GMT) when the certificate will become valid.
     * 
     */
    public String notBefore() {
        return this.notBefore;
    }
    /**
     * @return A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
     * 
     */
    public Boolean replace() {
        return this.replace;
    }
    /**
     * @return Timestamp (GMT) when the certificate was last updated.
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTlsPlatformCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String configurationId;
        private String createdAt;
        private List<String> domains;
        private String id;
        private String notAfter;
        private String notBefore;
        private Boolean replace;
        private String updatedAt;
        public Builder() {}
        public Builder(GetTlsPlatformCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.configurationId = defaults.configurationId;
    	      this.createdAt = defaults.createdAt;
    	      this.domains = defaults.domains;
    	      this.id = defaults.id;
    	      this.notAfter = defaults.notAfter;
    	      this.notBefore = defaults.notBefore;
    	      this.replace = defaults.replace;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder configurationId(String configurationId) {
            if (configurationId == null) {
              throw new MissingRequiredPropertyException("GetTlsPlatformCertificateResult", "configurationId");
            }
            this.configurationId = configurationId;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetTlsPlatformCertificateResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder domains(List<String> domains) {
            if (domains == null) {
              throw new MissingRequiredPropertyException("GetTlsPlatformCertificateResult", "domains");
            }
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTlsPlatformCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder notAfter(String notAfter) {
            if (notAfter == null) {
              throw new MissingRequiredPropertyException("GetTlsPlatformCertificateResult", "notAfter");
            }
            this.notAfter = notAfter;
            return this;
        }
        @CustomType.Setter
        public Builder notBefore(String notBefore) {
            if (notBefore == null) {
              throw new MissingRequiredPropertyException("GetTlsPlatformCertificateResult", "notBefore");
            }
            this.notBefore = notBefore;
            return this;
        }
        @CustomType.Setter
        public Builder replace(Boolean replace) {
            if (replace == null) {
              throw new MissingRequiredPropertyException("GetTlsPlatformCertificateResult", "replace");
            }
            this.replace = replace;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetTlsPlatformCertificateResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetTlsPlatformCertificateResult build() {
            final var _resultValue = new GetTlsPlatformCertificateResult();
            _resultValue.configurationId = configurationId;
            _resultValue.createdAt = createdAt;
            _resultValue.domains = domains;
            _resultValue.id = id;
            _resultValue.notAfter = notAfter;
            _resultValue.notBefore = notBefore;
            _resultValue.replace = replace;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
