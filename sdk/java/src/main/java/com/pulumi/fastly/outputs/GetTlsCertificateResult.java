// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.fastly.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTlsCertificateResult {
    /**
     * @return Timestamp (GMT) when the certificate was created
     * 
     */
    private String createdAt;
    /**
     * @return Domains that are listed in any certificates&#39; Subject Alternative Names (SAN) list.
     * 
     */
    private List<String> domains;
    /**
     * @return Unique ID assigned to certificate by Fastly
     * 
     */
    private String id;
    /**
     * @return The hostname for which a certificate was issued.
     * 
     */
    private String issuedTo;
    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    private String issuer;
    /**
     * @return Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
     * 
     */
    private String name;
    /**
     * @return A recommendation from Fastly indicating the key associated with this certificate is in need of rotation
     * 
     */
    private Boolean replace;
    /**
     * @return A value assigned by the issuer that is unique to a certificate
     * 
     */
    private String serialNumber;
    /**
     * @return The algorithm used to sign the certificate
     * 
     */
    private String signatureAlgorithm;
    /**
     * @return Timestamp (GMT) when the certificate was last updated
     * 
     */
    private String updatedAt;

    private GetTlsCertificateResult() {}
    /**
     * @return Timestamp (GMT) when the certificate was created
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Domains that are listed in any certificates&#39; Subject Alternative Names (SAN) list.
     * 
     */
    public List<String> domains() {
        return this.domains;
    }
    /**
     * @return Unique ID assigned to certificate by Fastly
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The hostname for which a certificate was issued.
     * 
     */
    public String issuedTo() {
        return this.issuedTo;
    }
    /**
     * @return The certificate authority that issued the certificate.
     * 
     */
    public String issuer() {
        return this.issuer;
    }
    /**
     * @return Human-readable name used to identify the certificate. Defaults to the certificate&#39;s Common Name or first Subject Alternative Name entry.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return A recommendation from Fastly indicating the key associated with this certificate is in need of rotation
     * 
     */
    public Boolean replace() {
        return this.replace;
    }
    /**
     * @return A value assigned by the issuer that is unique to a certificate
     * 
     */
    public String serialNumber() {
        return this.serialNumber;
    }
    /**
     * @return The algorithm used to sign the certificate
     * 
     */
    public String signatureAlgorithm() {
        return this.signatureAlgorithm;
    }
    /**
     * @return Timestamp (GMT) when the certificate was last updated
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTlsCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private List<String> domains;
        private String id;
        private String issuedTo;
        private String issuer;
        private String name;
        private Boolean replace;
        private String serialNumber;
        private String signatureAlgorithm;
        private String updatedAt;
        public Builder() {}
        public Builder(GetTlsCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.domains = defaults.domains;
    	      this.id = defaults.id;
    	      this.issuedTo = defaults.issuedTo;
    	      this.issuer = defaults.issuer;
    	      this.name = defaults.name;
    	      this.replace = defaults.replace;
    	      this.serialNumber = defaults.serialNumber;
    	      this.signatureAlgorithm = defaults.signatureAlgorithm;
    	      this.updatedAt = defaults.updatedAt;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder domains(List<String> domains) {
            if (domains == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "domains");
            }
            this.domains = domains;
            return this;
        }
        public Builder domains(String... domains) {
            return domains(List.of(domains));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder issuedTo(String issuedTo) {
            if (issuedTo == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "issuedTo");
            }
            this.issuedTo = issuedTo;
            return this;
        }
        @CustomType.Setter
        public Builder issuer(String issuer) {
            if (issuer == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "issuer");
            }
            this.issuer = issuer;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder replace(Boolean replace) {
            if (replace == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "replace");
            }
            this.replace = replace;
            return this;
        }
        @CustomType.Setter
        public Builder serialNumber(String serialNumber) {
            if (serialNumber == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "serialNumber");
            }
            this.serialNumber = serialNumber;
            return this;
        }
        @CustomType.Setter
        public Builder signatureAlgorithm(String signatureAlgorithm) {
            if (signatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "signatureAlgorithm");
            }
            this.signatureAlgorithm = signatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetTlsCertificateResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        public GetTlsCertificateResult build() {
            final var _resultValue = new GetTlsCertificateResult();
            _resultValue.createdAt = createdAt;
            _resultValue.domains = domains;
            _resultValue.id = id;
            _resultValue.issuedTo = issuedTo;
            _resultValue.issuer = issuer;
            _resultValue.name = name;
            _resultValue.replace = replace;
            _resultValue.serialNumber = serialNumber;
            _resultValue.signatureAlgorithm = signatureAlgorithm;
            _resultValue.updatedAt = updatedAt;
            return _resultValue;
        }
    }
}
