// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ServiceACLEntriesv1Entry struct {
	// A personal freeform descriptive note
	Comment *string `pulumi:"comment"`
	Id      *string `pulumi:"id"`
	// An IP address that is the focus for the ACL
	Ip string `pulumi:"ip"`
	// A boolean that will negate the match if true
	Negated *bool `pulumi:"negated"`
	// An optional subnet mask applied to the IP address
	Subnet *string `pulumi:"subnet"`
}

// ServiceACLEntriesv1EntryInput is an input type that accepts ServiceACLEntriesv1EntryArgs and ServiceACLEntriesv1EntryOutput values.
// You can construct a concrete instance of `ServiceACLEntriesv1EntryInput` via:
//
//          ServiceACLEntriesv1EntryArgs{...}
type ServiceACLEntriesv1EntryInput interface {
	pulumi.Input

	ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput
	ToServiceACLEntriesv1EntryOutputWithContext(context.Context) ServiceACLEntriesv1EntryOutput
}

type ServiceACLEntriesv1EntryArgs struct {
	// A personal freeform descriptive note
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	Id      pulumi.StringPtrInput `pulumi:"id"`
	// An IP address that is the focus for the ACL
	Ip pulumi.StringInput `pulumi:"ip"`
	// A boolean that will negate the match if true
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// An optional subnet mask applied to the IP address
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (ServiceACLEntriesv1EntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (i ServiceACLEntriesv1EntryArgs) ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput {
	return i.ToServiceACLEntriesv1EntryOutputWithContext(context.Background())
}

func (i ServiceACLEntriesv1EntryArgs) ToServiceACLEntriesv1EntryOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1EntryOutput)
}

// ServiceACLEntriesv1EntryArrayInput is an input type that accepts ServiceACLEntriesv1EntryArray and ServiceACLEntriesv1EntryArrayOutput values.
// You can construct a concrete instance of `ServiceACLEntriesv1EntryArrayInput` via:
//
//          ServiceACLEntriesv1EntryArray{ ServiceACLEntriesv1EntryArgs{...} }
type ServiceACLEntriesv1EntryArrayInput interface {
	pulumi.Input

	ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput
	ToServiceACLEntriesv1EntryArrayOutputWithContext(context.Context) ServiceACLEntriesv1EntryArrayOutput
}

type ServiceACLEntriesv1EntryArray []ServiceACLEntriesv1EntryInput

func (ServiceACLEntriesv1EntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (i ServiceACLEntriesv1EntryArray) ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput {
	return i.ToServiceACLEntriesv1EntryArrayOutputWithContext(context.Background())
}

func (i ServiceACLEntriesv1EntryArray) ToServiceACLEntriesv1EntryArrayOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1EntryArrayOutput)
}

type ServiceACLEntriesv1EntryOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesv1EntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (o ServiceACLEntriesv1EntryOutput) ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput {
	return o
}

func (o ServiceACLEntriesv1EntryOutput) ToServiceACLEntriesv1EntryOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryOutput {
	return o
}

// A personal freeform descriptive note
func (o ServiceACLEntriesv1EntryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ServiceACLEntriesv1EntryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// An IP address that is the focus for the ACL
func (o ServiceACLEntriesv1EntryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) string { return v.Ip }).(pulumi.StringOutput)
}

// A boolean that will negate the match if true
func (o ServiceACLEntriesv1EntryOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// An optional subnet mask applied to the IP address
func (o ServiceACLEntriesv1EntryOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type ServiceACLEntriesv1EntryArrayOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesv1EntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (o ServiceACLEntriesv1EntryArrayOutput) ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput {
	return o
}

func (o ServiceACLEntriesv1EntryArrayOutput) ToServiceACLEntriesv1EntryArrayOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryArrayOutput {
	return o
}

func (o ServiceACLEntriesv1EntryArrayOutput) Index(i pulumi.IntInput) ServiceACLEntriesv1EntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceACLEntriesv1Entry {
		return vs[0].([]ServiceACLEntriesv1Entry)[vs[1].(int)]
	}).(ServiceACLEntriesv1EntryOutput)
}

type Servicev1Acl struct {
	// The ID of the ACL.
	AclId *string `pulumi:"aclId"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
}

// Servicev1AclInput is an input type that accepts Servicev1AclArgs and Servicev1AclOutput values.
// You can construct a concrete instance of `Servicev1AclInput` via:
//
//          Servicev1AclArgs{...}
type Servicev1AclInput interface {
	pulumi.Input

	ToServicev1AclOutput() Servicev1AclOutput
	ToServicev1AclOutputWithContext(context.Context) Servicev1AclOutput
}

type Servicev1AclArgs struct {
	// The ID of the ACL.
	AclId pulumi.StringPtrInput `pulumi:"aclId"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Acl)(nil)).Elem()
}

func (i Servicev1AclArgs) ToServicev1AclOutput() Servicev1AclOutput {
	return i.ToServicev1AclOutputWithContext(context.Background())
}

func (i Servicev1AclArgs) ToServicev1AclOutputWithContext(ctx context.Context) Servicev1AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1AclOutput)
}

// Servicev1AclArrayInput is an input type that accepts Servicev1AclArray and Servicev1AclArrayOutput values.
// You can construct a concrete instance of `Servicev1AclArrayInput` via:
//
//          Servicev1AclArray{ Servicev1AclArgs{...} }
type Servicev1AclArrayInput interface {
	pulumi.Input

	ToServicev1AclArrayOutput() Servicev1AclArrayOutput
	ToServicev1AclArrayOutputWithContext(context.Context) Servicev1AclArrayOutput
}

type Servicev1AclArray []Servicev1AclInput

func (Servicev1AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Acl)(nil)).Elem()
}

func (i Servicev1AclArray) ToServicev1AclArrayOutput() Servicev1AclArrayOutput {
	return i.ToServicev1AclArrayOutputWithContext(context.Background())
}

func (i Servicev1AclArray) ToServicev1AclArrayOutputWithContext(ctx context.Context) Servicev1AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1AclArrayOutput)
}

type Servicev1AclOutput struct{ *pulumi.OutputState }

func (Servicev1AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Acl)(nil)).Elem()
}

func (o Servicev1AclOutput) ToServicev1AclOutput() Servicev1AclOutput {
	return o
}

func (o Servicev1AclOutput) ToServicev1AclOutputWithContext(ctx context.Context) Servicev1AclOutput {
	return o
}

// The ID of the ACL.
func (o Servicev1AclOutput) AclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Acl) *string { return v.AclId }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1AclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Acl) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1AclArrayOutput struct{ *pulumi.OutputState }

func (Servicev1AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Acl)(nil)).Elem()
}

func (o Servicev1AclArrayOutput) ToServicev1AclArrayOutput() Servicev1AclArrayOutput {
	return o
}

func (o Servicev1AclArrayOutput) ToServicev1AclArrayOutputWithContext(ctx context.Context) Servicev1AclArrayOutput {
	return o
}

func (o Servicev1AclArrayOutput) Index(i pulumi.IntInput) Servicev1AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Acl {
		return vs[0].([]Servicev1Acl)[vs[1].(int)]
	}).(Servicev1AclOutput)
}

type Servicev1Backend struct {
	// The SFTP address to stream logs to.
	Address string `pulumi:"address"`
	// Denotes if this Backend should be
	// included in the pool of backends that requests are load balanced against.
	// Default `true`.
	AutoLoadbalance *bool `pulumi:"autoLoadbalance"`
	// How long to wait between bytes in milliseconds. Default `10000`.
	BetweenBytesTimeout *int `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds.
	// Default `1000`
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`.
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// How long to wait for the first bytes in milliseconds. Default `15000`.
	FirstByteTimeout *int `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend.
	Healthcheck *string `pulumi:"healthcheck"`
	// Maximum number of connections for this Backend.
	// Default `200`.
	MaxConn *int `pulumi:"maxConn"`
	// Maximum allowed TLS version on SSL connections to this backend.
	MaxTlsVersion *string `pulumi:"maxTlsVersion"`
	// Minimum allowed TLS version on SSL connections to this backend.
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The hostname to override the Host header.
	OverrideHost *string `pulumi:"overrideHost"`
	// The port the SFTP service listens on. (Default: `22`).
	Port *int `pulumi:"port"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
	RequestCondition *string `pulumi:"requestCondition"`
	// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response.
	Shield *string `pulumi:"shield"`
	// CA certificate attached to origin.
	SslCaCert *string `pulumi:"sslCaCert"`
	// Overrides ssl_hostname, but only for cert verification. Does not affect SNI at all.
	SslCertHostname *string `pulumi:"sslCertHostname"`
	// Be strict about checking SSL certs. Default `true`.
	SslCheckCert *bool `pulumi:"sslCheckCert"`
	// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend.
	SslCiphers *string `pulumi:"sslCiphers"`
	// Client certificate attached to origin. Used when connecting to the backend.
	SslClientCert *string `pulumi:"sslClientCert"`
	// Client key attached to origin. Used when connecting to the backend.
	SslClientKey *string `pulumi:"sslClientKey"`
	// Used for both SNI during the TLS handshake and to validate the cert.
	//
	// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
	SslHostname *string `pulumi:"sslHostname"`
	// Overrides ssl_hostname, but only for SNI in the handshake. Does not affect cert validation at all.
	SslSniHostname *string `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the backend. Default `false`.
	UseSsl *bool `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives `weight / total` of the traffic. Default `100`.
	Weight *int `pulumi:"weight"`
}

// Servicev1BackendInput is an input type that accepts Servicev1BackendArgs and Servicev1BackendOutput values.
// You can construct a concrete instance of `Servicev1BackendInput` via:
//
//          Servicev1BackendArgs{...}
type Servicev1BackendInput interface {
	pulumi.Input

	ToServicev1BackendOutput() Servicev1BackendOutput
	ToServicev1BackendOutputWithContext(context.Context) Servicev1BackendOutput
}

type Servicev1BackendArgs struct {
	// The SFTP address to stream logs to.
	Address pulumi.StringInput `pulumi:"address"`
	// Denotes if this Backend should be
	// included in the pool of backends that requests are load balanced against.
	// Default `true`.
	AutoLoadbalance pulumi.BoolPtrInput `pulumi:"autoLoadbalance"`
	// How long to wait between bytes in milliseconds. Default `10000`.
	BetweenBytesTimeout pulumi.IntPtrInput `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds.
	// Default `1000`
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`.
	ErrorThreshold pulumi.IntPtrInput `pulumi:"errorThreshold"`
	// How long to wait for the first bytes in milliseconds. Default `15000`.
	FirstByteTimeout pulumi.IntPtrInput `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend.
	Healthcheck pulumi.StringPtrInput `pulumi:"healthcheck"`
	// Maximum number of connections for this Backend.
	// Default `200`.
	MaxConn pulumi.IntPtrInput `pulumi:"maxConn"`
	// Maximum allowed TLS version on SSL connections to this backend.
	MaxTlsVersion pulumi.StringPtrInput `pulumi:"maxTlsVersion"`
	// Minimum allowed TLS version on SSL connections to this backend.
	MinTlsVersion pulumi.StringPtrInput `pulumi:"minTlsVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The hostname to override the Host header.
	OverrideHost pulumi.StringPtrInput `pulumi:"overrideHost"`
	// The port the SFTP service listens on. (Default: `22`).
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response.
	Shield pulumi.StringPtrInput `pulumi:"shield"`
	// CA certificate attached to origin.
	SslCaCert pulumi.StringPtrInput `pulumi:"sslCaCert"`
	// Overrides ssl_hostname, but only for cert verification. Does not affect SNI at all.
	SslCertHostname pulumi.StringPtrInput `pulumi:"sslCertHostname"`
	// Be strict about checking SSL certs. Default `true`.
	SslCheckCert pulumi.BoolPtrInput `pulumi:"sslCheckCert"`
	// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend.
	SslCiphers pulumi.StringPtrInput `pulumi:"sslCiphers"`
	// Client certificate attached to origin. Used when connecting to the backend.
	SslClientCert pulumi.StringPtrInput `pulumi:"sslClientCert"`
	// Client key attached to origin. Used when connecting to the backend.
	SslClientKey pulumi.StringPtrInput `pulumi:"sslClientKey"`
	// Used for both SNI during the TLS handshake and to validate the cert.
	//
	// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
	SslHostname pulumi.StringPtrInput `pulumi:"sslHostname"`
	// Overrides ssl_hostname, but only for SNI in the handshake. Does not affect cert validation at all.
	SslSniHostname pulumi.StringPtrInput `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the backend. Default `false`.
	UseSsl pulumi.BoolPtrInput `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives `weight / total` of the traffic. Default `100`.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (Servicev1BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Backend)(nil)).Elem()
}

func (i Servicev1BackendArgs) ToServicev1BackendOutput() Servicev1BackendOutput {
	return i.ToServicev1BackendOutputWithContext(context.Background())
}

func (i Servicev1BackendArgs) ToServicev1BackendOutputWithContext(ctx context.Context) Servicev1BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BackendOutput)
}

// Servicev1BackendArrayInput is an input type that accepts Servicev1BackendArray and Servicev1BackendArrayOutput values.
// You can construct a concrete instance of `Servicev1BackendArrayInput` via:
//
//          Servicev1BackendArray{ Servicev1BackendArgs{...} }
type Servicev1BackendArrayInput interface {
	pulumi.Input

	ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput
	ToServicev1BackendArrayOutputWithContext(context.Context) Servicev1BackendArrayOutput
}

type Servicev1BackendArray []Servicev1BackendInput

func (Servicev1BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Backend)(nil)).Elem()
}

func (i Servicev1BackendArray) ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput {
	return i.ToServicev1BackendArrayOutputWithContext(context.Background())
}

func (i Servicev1BackendArray) ToServicev1BackendArrayOutputWithContext(ctx context.Context) Servicev1BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BackendArrayOutput)
}

type Servicev1BackendOutput struct{ *pulumi.OutputState }

func (Servicev1BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Backend)(nil)).Elem()
}

func (o Servicev1BackendOutput) ToServicev1BackendOutput() Servicev1BackendOutput {
	return o
}

func (o Servicev1BackendOutput) ToServicev1BackendOutputWithContext(ctx context.Context) Servicev1BackendOutput {
	return o
}

// The SFTP address to stream logs to.
func (o Servicev1BackendOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Backend) string { return v.Address }).(pulumi.StringOutput)
}

// Denotes if this Backend should be
// included in the pool of backends that requests are load balanced against.
// Default `true`.
func (o Servicev1BackendOutput) AutoLoadbalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *bool { return v.AutoLoadbalance }).(pulumi.BoolPtrOutput)
}

// How long to wait between bytes in milliseconds. Default `10000`.
func (o Servicev1BackendOutput) BetweenBytesTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.BetweenBytesTimeout }).(pulumi.IntPtrOutput)
}

// How long to wait for a timeout in milliseconds.
// Default `1000`
func (o Servicev1BackendOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Number of errors to allow before the Backend is marked as down. Default `0`.
func (o Servicev1BackendOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// How long to wait for the first bytes in milliseconds. Default `15000`.
func (o Servicev1BackendOutput) FirstByteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.FirstByteTimeout }).(pulumi.IntPtrOutput)
}

// Name of a defined `healthcheck` to assign to this backend.
func (o Servicev1BackendOutput) Healthcheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.Healthcheck }).(pulumi.StringPtrOutput)
}

// Maximum number of connections for this Backend.
// Default `200`.
func (o Servicev1BackendOutput) MaxConn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.MaxConn }).(pulumi.IntPtrOutput)
}

// Maximum allowed TLS version on SSL connections to this backend.
func (o Servicev1BackendOutput) MaxTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.MaxTlsVersion }).(pulumi.StringPtrOutput)
}

// Minimum allowed TLS version on SSL connections to this backend.
func (o Servicev1BackendOutput) MinTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.MinTlsVersion }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1BackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Backend) string { return v.Name }).(pulumi.StringOutput)
}

// The hostname to override the Host header.
func (o Servicev1BackendOutput) OverrideHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.OverrideHost }).(pulumi.StringPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`).
func (o Servicev1BackendOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
func (o Servicev1BackendOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response.
func (o Servicev1BackendOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

// CA certificate attached to origin.
func (o Servicev1BackendOutput) SslCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslCaCert }).(pulumi.StringPtrOutput)
}

// Overrides ssl_hostname, but only for cert verification. Does not affect SNI at all.
func (o Servicev1BackendOutput) SslCertHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslCertHostname }).(pulumi.StringPtrOutput)
}

// Be strict about checking SSL certs. Default `true`.
func (o Servicev1BackendOutput) SslCheckCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *bool { return v.SslCheckCert }).(pulumi.BoolPtrOutput)
}

// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend.
func (o Servicev1BackendOutput) SslCiphers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslCiphers }).(pulumi.StringPtrOutput)
}

// Client certificate attached to origin. Used when connecting to the backend.
func (o Servicev1BackendOutput) SslClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslClientCert }).(pulumi.StringPtrOutput)
}

// Client key attached to origin. Used when connecting to the backend.
func (o Servicev1BackendOutput) SslClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslClientKey }).(pulumi.StringPtrOutput)
}

// Used for both SNI during the TLS handshake and to validate the cert.
//
// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
func (o Servicev1BackendOutput) SslHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslHostname }).(pulumi.StringPtrOutput)
}

// Overrides ssl_hostname, but only for SNI in the handshake. Does not affect cert validation at all.
func (o Servicev1BackendOutput) SslSniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslSniHostname }).(pulumi.StringPtrOutput)
}

// Whether or not to use SSL to reach the backend. Default `false`.
func (o Servicev1BackendOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *bool { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives `weight / total` of the traffic. Default `100`.
func (o Servicev1BackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type Servicev1BackendArrayOutput struct{ *pulumi.OutputState }

func (Servicev1BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Backend)(nil)).Elem()
}

func (o Servicev1BackendArrayOutput) ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput {
	return o
}

func (o Servicev1BackendArrayOutput) ToServicev1BackendArrayOutputWithContext(ctx context.Context) Servicev1BackendArrayOutput {
	return o
}

func (o Servicev1BackendArrayOutput) Index(i pulumi.IntInput) Servicev1BackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Backend {
		return vs[0].([]Servicev1Backend)[vs[1].(int)]
	}).(Servicev1BackendOutput)
}

type Servicev1Bigquerylogging struct {
	// The ID of your BigQuery dataset.
	Dataset string `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
	Email *string `pulumi:"email"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The ID of your Google Cloud Platform project.
	ProjectId string `pulumi:"projectId"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
	SecretKey *string `pulumi:"secretKey"`
	// The ID of your BigQuery table.
	Table string `pulumi:"table"`
	// Big query table name suffix template. If set will be interpreted as a strftime compatible string and used as the [Template Suffix for your table](https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables).
	Template *string `pulumi:"template"`
}

// Servicev1BigqueryloggingInput is an input type that accepts Servicev1BigqueryloggingArgs and Servicev1BigqueryloggingOutput values.
// You can construct a concrete instance of `Servicev1BigqueryloggingInput` via:
//
//          Servicev1BigqueryloggingArgs{...}
type Servicev1BigqueryloggingInput interface {
	pulumi.Input

	ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput
	ToServicev1BigqueryloggingOutputWithContext(context.Context) Servicev1BigqueryloggingOutput
}

type Servicev1BigqueryloggingArgs struct {
	// The ID of your BigQuery dataset.
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The ID of your Google Cloud Platform project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The ID of your BigQuery table.
	Table pulumi.StringInput `pulumi:"table"`
	// Big query table name suffix template. If set will be interpreted as a strftime compatible string and used as the [Template Suffix for your table](https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables).
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (Servicev1BigqueryloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Bigquerylogging)(nil)).Elem()
}

func (i Servicev1BigqueryloggingArgs) ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput {
	return i.ToServicev1BigqueryloggingOutputWithContext(context.Background())
}

func (i Servicev1BigqueryloggingArgs) ToServicev1BigqueryloggingOutputWithContext(ctx context.Context) Servicev1BigqueryloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BigqueryloggingOutput)
}

// Servicev1BigqueryloggingArrayInput is an input type that accepts Servicev1BigqueryloggingArray and Servicev1BigqueryloggingArrayOutput values.
// You can construct a concrete instance of `Servicev1BigqueryloggingArrayInput` via:
//
//          Servicev1BigqueryloggingArray{ Servicev1BigqueryloggingArgs{...} }
type Servicev1BigqueryloggingArrayInput interface {
	pulumi.Input

	ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput
	ToServicev1BigqueryloggingArrayOutputWithContext(context.Context) Servicev1BigqueryloggingArrayOutput
}

type Servicev1BigqueryloggingArray []Servicev1BigqueryloggingInput

func (Servicev1BigqueryloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Bigquerylogging)(nil)).Elem()
}

func (i Servicev1BigqueryloggingArray) ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput {
	return i.ToServicev1BigqueryloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1BigqueryloggingArray) ToServicev1BigqueryloggingArrayOutputWithContext(ctx context.Context) Servicev1BigqueryloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BigqueryloggingArrayOutput)
}

type Servicev1BigqueryloggingOutput struct{ *pulumi.OutputState }

func (Servicev1BigqueryloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Bigquerylogging)(nil)).Elem()
}

func (o Servicev1BigqueryloggingOutput) ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput {
	return o
}

func (o Servicev1BigqueryloggingOutput) ToServicev1BigqueryloggingOutputWithContext(ctx context.Context) Servicev1BigqueryloggingOutput {
	return o
}

// The ID of your BigQuery dataset.
func (o Servicev1BigqueryloggingOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.Dataset }).(pulumi.StringOutput)
}

// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
func (o Servicev1BigqueryloggingOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1BigqueryloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1BigqueryloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1BigqueryloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The ID of your Google Cloud Platform project.
func (o Servicev1BigqueryloggingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1BigqueryloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
func (o Servicev1BigqueryloggingOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The ID of your BigQuery table.
func (o Servicev1BigqueryloggingOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.Table }).(pulumi.StringOutput)
}

// Big query table name suffix template. If set will be interpreted as a strftime compatible string and used as the [Template Suffix for your table](https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables).
func (o Servicev1BigqueryloggingOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type Servicev1BigqueryloggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1BigqueryloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Bigquerylogging)(nil)).Elem()
}

func (o Servicev1BigqueryloggingArrayOutput) ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput {
	return o
}

func (o Servicev1BigqueryloggingArrayOutput) ToServicev1BigqueryloggingArrayOutputWithContext(ctx context.Context) Servicev1BigqueryloggingArrayOutput {
	return o
}

func (o Servicev1BigqueryloggingArrayOutput) Index(i pulumi.IntInput) Servicev1BigqueryloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Bigquerylogging {
		return vs[0].([]Servicev1Bigquerylogging)[vs[1].(int)]
	}).(Servicev1BigqueryloggingOutput)
}

type Servicev1Blobstoragelogging struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored.
	AccountName string `pulumi:"accountName"`
	// The name of the Azure Blob Storage container in which to store logs.
	Container string `pulumi:"container"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period *int `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `pulumi:"publicKey"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work.
	SasToken string `pulumi:"sasToken"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// Servicev1BlobstorageloggingInput is an input type that accepts Servicev1BlobstorageloggingArgs and Servicev1BlobstorageloggingOutput values.
// You can construct a concrete instance of `Servicev1BlobstorageloggingInput` via:
//
//          Servicev1BlobstorageloggingArgs{...}
type Servicev1BlobstorageloggingInput interface {
	pulumi.Input

	ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput
	ToServicev1BlobstorageloggingOutputWithContext(context.Context) Servicev1BlobstorageloggingOutput
}

type Servicev1BlobstorageloggingArgs struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the Azure Blob Storage container in which to store logs.
	Container pulumi.StringInput `pulumi:"container"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work.
	SasToken pulumi.StringInput `pulumi:"sasToken"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1BlobstorageloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Blobstoragelogging)(nil)).Elem()
}

func (i Servicev1BlobstorageloggingArgs) ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput {
	return i.ToServicev1BlobstorageloggingOutputWithContext(context.Background())
}

func (i Servicev1BlobstorageloggingArgs) ToServicev1BlobstorageloggingOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BlobstorageloggingOutput)
}

// Servicev1BlobstorageloggingArrayInput is an input type that accepts Servicev1BlobstorageloggingArray and Servicev1BlobstorageloggingArrayOutput values.
// You can construct a concrete instance of `Servicev1BlobstorageloggingArrayInput` via:
//
//          Servicev1BlobstorageloggingArray{ Servicev1BlobstorageloggingArgs{...} }
type Servicev1BlobstorageloggingArrayInput interface {
	pulumi.Input

	ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput
	ToServicev1BlobstorageloggingArrayOutputWithContext(context.Context) Servicev1BlobstorageloggingArrayOutput
}

type Servicev1BlobstorageloggingArray []Servicev1BlobstorageloggingInput

func (Servicev1BlobstorageloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Blobstoragelogging)(nil)).Elem()
}

func (i Servicev1BlobstorageloggingArray) ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput {
	return i.ToServicev1BlobstorageloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1BlobstorageloggingArray) ToServicev1BlobstorageloggingArrayOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BlobstorageloggingArrayOutput)
}

type Servicev1BlobstorageloggingOutput struct{ *pulumi.OutputState }

func (Servicev1BlobstorageloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Blobstoragelogging)(nil)).Elem()
}

func (o Servicev1BlobstorageloggingOutput) ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput {
	return o
}

func (o Servicev1BlobstorageloggingOutput) ToServicev1BlobstorageloggingOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingOutput {
	return o
}

// The unique Azure Blob Storage namespace in which your data objects are stored.
func (o Servicev1BlobstorageloggingOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) string { return v.AccountName }).(pulumi.StringOutput)
}

// The name of the Azure Blob Storage container in which to store logs.
func (o Servicev1BlobstorageloggingOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) string { return v.Container }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1BlobstorageloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1BlobstorageloggingOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// What level of GZIP encoding to have when dumping logs (default 0, no compression).
func (o Servicev1BlobstorageloggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
func (o Servicev1BlobstorageloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1BlobstorageloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in / then it is treated as a directory.
func (o Servicev1BlobstorageloggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
func (o Servicev1BlobstorageloggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1BlobstorageloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
func (o Servicev1BlobstorageloggingOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1BlobstorageloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work.
func (o Servicev1BlobstorageloggingOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) string { return v.SasToken }).(pulumi.StringOutput)
}

// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
func (o Servicev1BlobstorageloggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1BlobstorageloggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1BlobstorageloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Blobstoragelogging)(nil)).Elem()
}

func (o Servicev1BlobstorageloggingArrayOutput) ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput {
	return o
}

func (o Servicev1BlobstorageloggingArrayOutput) ToServicev1BlobstorageloggingArrayOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingArrayOutput {
	return o
}

func (o Servicev1BlobstorageloggingArrayOutput) Index(i pulumi.IntInput) Servicev1BlobstorageloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Blobstoragelogging {
		return vs[0].([]Servicev1Blobstoragelogging)[vs[1].(int)]
	}).(Servicev1BlobstorageloggingOutput)
}

type Servicev1CacheSetting struct {
	// Allows you to terminate request handling and immediately
	// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
	Action *string `pulumi:"action"`
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
	// see [Fastly's Documentation on Conditionals][fastly-conditionals].
	CacheCondition *string `pulumi:"cacheCondition"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// Max "Time To Live" for stale (unreachable) objects.
	StaleTtl *int `pulumi:"staleTtl"`
	// The Time-To-Live (TTL) for the object.
	Ttl *int `pulumi:"ttl"`
}

// Servicev1CacheSettingInput is an input type that accepts Servicev1CacheSettingArgs and Servicev1CacheSettingOutput values.
// You can construct a concrete instance of `Servicev1CacheSettingInput` via:
//
//          Servicev1CacheSettingArgs{...}
type Servicev1CacheSettingInput interface {
	pulumi.Input

	ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput
	ToServicev1CacheSettingOutputWithContext(context.Context) Servicev1CacheSettingOutput
}

type Servicev1CacheSettingArgs struct {
	// Allows you to terminate request handling and immediately
	// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
	// see [Fastly's Documentation on Conditionals][fastly-conditionals].
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// Max "Time To Live" for stale (unreachable) objects.
	StaleTtl pulumi.IntPtrInput `pulumi:"staleTtl"`
	// The Time-To-Live (TTL) for the object.
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (Servicev1CacheSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1CacheSetting)(nil)).Elem()
}

func (i Servicev1CacheSettingArgs) ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput {
	return i.ToServicev1CacheSettingOutputWithContext(context.Background())
}

func (i Servicev1CacheSettingArgs) ToServicev1CacheSettingOutputWithContext(ctx context.Context) Servicev1CacheSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1CacheSettingOutput)
}

// Servicev1CacheSettingArrayInput is an input type that accepts Servicev1CacheSettingArray and Servicev1CacheSettingArrayOutput values.
// You can construct a concrete instance of `Servicev1CacheSettingArrayInput` via:
//
//          Servicev1CacheSettingArray{ Servicev1CacheSettingArgs{...} }
type Servicev1CacheSettingArrayInput interface {
	pulumi.Input

	ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput
	ToServicev1CacheSettingArrayOutputWithContext(context.Context) Servicev1CacheSettingArrayOutput
}

type Servicev1CacheSettingArray []Servicev1CacheSettingInput

func (Servicev1CacheSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1CacheSetting)(nil)).Elem()
}

func (i Servicev1CacheSettingArray) ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput {
	return i.ToServicev1CacheSettingArrayOutputWithContext(context.Background())
}

func (i Servicev1CacheSettingArray) ToServicev1CacheSettingArrayOutputWithContext(ctx context.Context) Servicev1CacheSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1CacheSettingArrayOutput)
}

type Servicev1CacheSettingOutput struct{ *pulumi.OutputState }

func (Servicev1CacheSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1CacheSetting)(nil)).Elem()
}

func (o Servicev1CacheSettingOutput) ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput {
	return o
}

func (o Servicev1CacheSettingOutput) ToServicev1CacheSettingOutputWithContext(ctx context.Context) Servicev1CacheSettingOutput {
	return o
}

// Allows you to terminate request handling and immediately
// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
func (o Servicev1CacheSettingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
// see [Fastly's Documentation on Conditionals][fastly-conditionals].
func (o Servicev1CacheSettingOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1CacheSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) string { return v.Name }).(pulumi.StringOutput)
}

// Max "Time To Live" for stale (unreachable) objects.
func (o Servicev1CacheSettingOutput) StaleTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) *int { return v.StaleTtl }).(pulumi.IntPtrOutput)
}

// The Time-To-Live (TTL) for the object.
func (o Servicev1CacheSettingOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type Servicev1CacheSettingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1CacheSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1CacheSetting)(nil)).Elem()
}

func (o Servicev1CacheSettingArrayOutput) ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput {
	return o
}

func (o Servicev1CacheSettingArrayOutput) ToServicev1CacheSettingArrayOutputWithContext(ctx context.Context) Servicev1CacheSettingArrayOutput {
	return o
}

func (o Servicev1CacheSettingArrayOutput) Index(i pulumi.IntInput) Servicev1CacheSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1CacheSetting {
		return vs[0].([]Servicev1CacheSetting)[vs[1].(int)]
	}).(Servicev1CacheSettingOutput)
}

type Servicev1Condition struct {
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
	Priority *int `pulumi:"priority"`
	// The statement used to determine if the condition is met.
	Statement string `pulumi:"statement"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type string `pulumi:"type"`
}

// Servicev1ConditionInput is an input type that accepts Servicev1ConditionArgs and Servicev1ConditionOutput values.
// You can construct a concrete instance of `Servicev1ConditionInput` via:
//
//          Servicev1ConditionArgs{...}
type Servicev1ConditionInput interface {
	pulumi.Input

	ToServicev1ConditionOutput() Servicev1ConditionOutput
	ToServicev1ConditionOutputWithContext(context.Context) Servicev1ConditionOutput
}

type Servicev1ConditionArgs struct {
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The statement used to determine if the condition is met.
	Statement pulumi.StringInput `pulumi:"statement"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Condition)(nil)).Elem()
}

func (i Servicev1ConditionArgs) ToServicev1ConditionOutput() Servicev1ConditionOutput {
	return i.ToServicev1ConditionOutputWithContext(context.Background())
}

func (i Servicev1ConditionArgs) ToServicev1ConditionOutputWithContext(ctx context.Context) Servicev1ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ConditionOutput)
}

// Servicev1ConditionArrayInput is an input type that accepts Servicev1ConditionArray and Servicev1ConditionArrayOutput values.
// You can construct a concrete instance of `Servicev1ConditionArrayInput` via:
//
//          Servicev1ConditionArray{ Servicev1ConditionArgs{...} }
type Servicev1ConditionArrayInput interface {
	pulumi.Input

	ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput
	ToServicev1ConditionArrayOutputWithContext(context.Context) Servicev1ConditionArrayOutput
}

type Servicev1ConditionArray []Servicev1ConditionInput

func (Servicev1ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Condition)(nil)).Elem()
}

func (i Servicev1ConditionArray) ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput {
	return i.ToServicev1ConditionArrayOutputWithContext(context.Background())
}

func (i Servicev1ConditionArray) ToServicev1ConditionArrayOutputWithContext(ctx context.Context) Servicev1ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ConditionArrayOutput)
}

type Servicev1ConditionOutput struct{ *pulumi.OutputState }

func (Servicev1ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Condition)(nil)).Elem()
}

func (o Servicev1ConditionOutput) ToServicev1ConditionOutput() Servicev1ConditionOutput {
	return o
}

func (o Servicev1ConditionOutput) ToServicev1ConditionOutputWithContext(ctx context.Context) Servicev1ConditionOutput {
	return o
}

// A unique name to identify this dictionary.
func (o Servicev1ConditionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Condition) string { return v.Name }).(pulumi.StringOutput)
}

// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
func (o Servicev1ConditionOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Condition) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The statement used to determine if the condition is met.
func (o Servicev1ConditionOutput) Statement() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Condition) string { return v.Statement }).(pulumi.StringOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
func (o Servicev1ConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Condition) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1ConditionArrayOutput struct{ *pulumi.OutputState }

func (Servicev1ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Condition)(nil)).Elem()
}

func (o Servicev1ConditionArrayOutput) ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput {
	return o
}

func (o Servicev1ConditionArrayOutput) ToServicev1ConditionArrayOutputWithContext(ctx context.Context) Servicev1ConditionArrayOutput {
	return o
}

func (o Servicev1ConditionArrayOutput) Index(i pulumi.IntInput) Servicev1ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Condition {
		return vs[0].([]Servicev1Condition)[vs[1].(int)]
	}).(Servicev1ConditionOutput)
}

type Servicev1Dictionary struct {
	// The ID of the dictionary.
	DictionaryId *string `pulumi:"dictionaryId"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// If `true`, the dictionary is a private dictionary, and items are not readable in the UI or
	// via API. Default is `false`. It is important to note that changing this attribute will delete and recreate the
	// dictionary, discard the current items in the dictionary. Using a write-only/private dictionary should only be done if
	// the items are managed outside of the provider.
	WriteOnly *bool `pulumi:"writeOnly"`
}

// Servicev1DictionaryInput is an input type that accepts Servicev1DictionaryArgs and Servicev1DictionaryOutput values.
// You can construct a concrete instance of `Servicev1DictionaryInput` via:
//
//          Servicev1DictionaryArgs{...}
type Servicev1DictionaryInput interface {
	pulumi.Input

	ToServicev1DictionaryOutput() Servicev1DictionaryOutput
	ToServicev1DictionaryOutputWithContext(context.Context) Servicev1DictionaryOutput
}

type Servicev1DictionaryArgs struct {
	// The ID of the dictionary.
	DictionaryId pulumi.StringPtrInput `pulumi:"dictionaryId"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// If `true`, the dictionary is a private dictionary, and items are not readable in the UI or
	// via API. Default is `false`. It is important to note that changing this attribute will delete and recreate the
	// dictionary, discard the current items in the dictionary. Using a write-only/private dictionary should only be done if
	// the items are managed outside of the provider.
	WriteOnly pulumi.BoolPtrInput `pulumi:"writeOnly"`
}

func (Servicev1DictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dictionary)(nil)).Elem()
}

func (i Servicev1DictionaryArgs) ToServicev1DictionaryOutput() Servicev1DictionaryOutput {
	return i.ToServicev1DictionaryOutputWithContext(context.Background())
}

func (i Servicev1DictionaryArgs) ToServicev1DictionaryOutputWithContext(ctx context.Context) Servicev1DictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DictionaryOutput)
}

// Servicev1DictionaryArrayInput is an input type that accepts Servicev1DictionaryArray and Servicev1DictionaryArrayOutput values.
// You can construct a concrete instance of `Servicev1DictionaryArrayInput` via:
//
//          Servicev1DictionaryArray{ Servicev1DictionaryArgs{...} }
type Servicev1DictionaryArrayInput interface {
	pulumi.Input

	ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput
	ToServicev1DictionaryArrayOutputWithContext(context.Context) Servicev1DictionaryArrayOutput
}

type Servicev1DictionaryArray []Servicev1DictionaryInput

func (Servicev1DictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dictionary)(nil)).Elem()
}

func (i Servicev1DictionaryArray) ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput {
	return i.ToServicev1DictionaryArrayOutputWithContext(context.Background())
}

func (i Servicev1DictionaryArray) ToServicev1DictionaryArrayOutputWithContext(ctx context.Context) Servicev1DictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DictionaryArrayOutput)
}

type Servicev1DictionaryOutput struct{ *pulumi.OutputState }

func (Servicev1DictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dictionary)(nil)).Elem()
}

func (o Servicev1DictionaryOutput) ToServicev1DictionaryOutput() Servicev1DictionaryOutput {
	return o
}

func (o Servicev1DictionaryOutput) ToServicev1DictionaryOutputWithContext(ctx context.Context) Servicev1DictionaryOutput {
	return o
}

// The ID of the dictionary.
func (o Servicev1DictionaryOutput) DictionaryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Dictionary) *string { return v.DictionaryId }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1DictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Dictionary) string { return v.Name }).(pulumi.StringOutput)
}

// If `true`, the dictionary is a private dictionary, and items are not readable in the UI or
// via API. Default is `false`. It is important to note that changing this attribute will delete and recreate the
// dictionary, discard the current items in the dictionary. Using a write-only/private dictionary should only be done if
// the items are managed outside of the provider.
func (o Servicev1DictionaryOutput) WriteOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Dictionary) *bool { return v.WriteOnly }).(pulumi.BoolPtrOutput)
}

type Servicev1DictionaryArrayOutput struct{ *pulumi.OutputState }

func (Servicev1DictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dictionary)(nil)).Elem()
}

func (o Servicev1DictionaryArrayOutput) ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput {
	return o
}

func (o Servicev1DictionaryArrayOutput) ToServicev1DictionaryArrayOutputWithContext(ctx context.Context) Servicev1DictionaryArrayOutput {
	return o
}

func (o Servicev1DictionaryArrayOutput) Index(i pulumi.IntInput) Servicev1DictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Dictionary {
		return vs[0].([]Servicev1Dictionary)[vs[1].(int)]
	}).(Servicev1DictionaryOutput)
}

type Servicev1Director struct {
	// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
	Backends []string `pulumi:"backends"`
	// Load balancing weight for the backends. Default `100`.
	Capacity *int `pulumi:"capacity"`
	// An optional comment about the Director.
	Comment *string `pulumi:"comment"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`.
	Quorum *int `pulumi:"quorum"`
	// How many backends to search if it fails. Default `5`.
	Retries *int `pulumi:"retries"`
	// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response.
	Shield *string `pulumi:"shield"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type *int `pulumi:"type"`
}

// Servicev1DirectorInput is an input type that accepts Servicev1DirectorArgs and Servicev1DirectorOutput values.
// You can construct a concrete instance of `Servicev1DirectorInput` via:
//
//          Servicev1DirectorArgs{...}
type Servicev1DirectorInput interface {
	pulumi.Input

	ToServicev1DirectorOutput() Servicev1DirectorOutput
	ToServicev1DirectorOutputWithContext(context.Context) Servicev1DirectorOutput
}

type Servicev1DirectorArgs struct {
	// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
	Backends pulumi.StringArrayInput `pulumi:"backends"`
	// Load balancing weight for the backends. Default `100`.
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// An optional comment about the Director.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`.
	Quorum pulumi.IntPtrInput `pulumi:"quorum"`
	// How many backends to search if it fails. Default `5`.
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response.
	Shield pulumi.StringPtrInput `pulumi:"shield"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type pulumi.IntPtrInput `pulumi:"type"`
}

func (Servicev1DirectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Director)(nil)).Elem()
}

func (i Servicev1DirectorArgs) ToServicev1DirectorOutput() Servicev1DirectorOutput {
	return i.ToServicev1DirectorOutputWithContext(context.Background())
}

func (i Servicev1DirectorArgs) ToServicev1DirectorOutputWithContext(ctx context.Context) Servicev1DirectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DirectorOutput)
}

// Servicev1DirectorArrayInput is an input type that accepts Servicev1DirectorArray and Servicev1DirectorArrayOutput values.
// You can construct a concrete instance of `Servicev1DirectorArrayInput` via:
//
//          Servicev1DirectorArray{ Servicev1DirectorArgs{...} }
type Servicev1DirectorArrayInput interface {
	pulumi.Input

	ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput
	ToServicev1DirectorArrayOutputWithContext(context.Context) Servicev1DirectorArrayOutput
}

type Servicev1DirectorArray []Servicev1DirectorInput

func (Servicev1DirectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Director)(nil)).Elem()
}

func (i Servicev1DirectorArray) ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput {
	return i.ToServicev1DirectorArrayOutputWithContext(context.Background())
}

func (i Servicev1DirectorArray) ToServicev1DirectorArrayOutputWithContext(ctx context.Context) Servicev1DirectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DirectorArrayOutput)
}

type Servicev1DirectorOutput struct{ *pulumi.OutputState }

func (Servicev1DirectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Director)(nil)).Elem()
}

func (o Servicev1DirectorOutput) ToServicev1DirectorOutput() Servicev1DirectorOutput {
	return o
}

func (o Servicev1DirectorOutput) ToServicev1DirectorOutputWithContext(ctx context.Context) Servicev1DirectorOutput {
	return o
}

// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
func (o Servicev1DirectorOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Servicev1Director) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// Load balancing weight for the backends. Default `100`.
func (o Servicev1DirectorOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// An optional comment about the Director.
func (o Servicev1DirectorOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1DirectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Director) string { return v.Name }).(pulumi.StringOutput)
}

// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`.
func (o Servicev1DirectorOutput) Quorum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *int { return v.Quorum }).(pulumi.IntPtrOutput)
}

// How many backends to search if it fails. Default `5`.
func (o Servicev1DirectorOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response.
func (o Servicev1DirectorOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
func (o Servicev1DirectorOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *int { return v.Type }).(pulumi.IntPtrOutput)
}

type Servicev1DirectorArrayOutput struct{ *pulumi.OutputState }

func (Servicev1DirectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Director)(nil)).Elem()
}

func (o Servicev1DirectorArrayOutput) ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput {
	return o
}

func (o Servicev1DirectorArrayOutput) ToServicev1DirectorArrayOutputWithContext(ctx context.Context) Servicev1DirectorArrayOutput {
	return o
}

func (o Servicev1DirectorArrayOutput) Index(i pulumi.IntInput) Servicev1DirectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Director {
		return vs[0].([]Servicev1Director)[vs[1].(int)]
	}).(Servicev1DirectorOutput)
}

type Servicev1Domain struct {
	// An optional comment about the Director.
	Comment *string `pulumi:"comment"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
}

// Servicev1DomainInput is an input type that accepts Servicev1DomainArgs and Servicev1DomainOutput values.
// You can construct a concrete instance of `Servicev1DomainInput` via:
//
//          Servicev1DomainArgs{...}
type Servicev1DomainInput interface {
	pulumi.Input

	ToServicev1DomainOutput() Servicev1DomainOutput
	ToServicev1DomainOutputWithContext(context.Context) Servicev1DomainOutput
}

type Servicev1DomainArgs struct {
	// An optional comment about the Director.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Domain)(nil)).Elem()
}

func (i Servicev1DomainArgs) ToServicev1DomainOutput() Servicev1DomainOutput {
	return i.ToServicev1DomainOutputWithContext(context.Background())
}

func (i Servicev1DomainArgs) ToServicev1DomainOutputWithContext(ctx context.Context) Servicev1DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DomainOutput)
}

// Servicev1DomainArrayInput is an input type that accepts Servicev1DomainArray and Servicev1DomainArrayOutput values.
// You can construct a concrete instance of `Servicev1DomainArrayInput` via:
//
//          Servicev1DomainArray{ Servicev1DomainArgs{...} }
type Servicev1DomainArrayInput interface {
	pulumi.Input

	ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput
	ToServicev1DomainArrayOutputWithContext(context.Context) Servicev1DomainArrayOutput
}

type Servicev1DomainArray []Servicev1DomainInput

func (Servicev1DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Domain)(nil)).Elem()
}

func (i Servicev1DomainArray) ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput {
	return i.ToServicev1DomainArrayOutputWithContext(context.Background())
}

func (i Servicev1DomainArray) ToServicev1DomainArrayOutputWithContext(ctx context.Context) Servicev1DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DomainArrayOutput)
}

type Servicev1DomainOutput struct{ *pulumi.OutputState }

func (Servicev1DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Domain)(nil)).Elem()
}

func (o Servicev1DomainOutput) ToServicev1DomainOutput() Servicev1DomainOutput {
	return o
}

func (o Servicev1DomainOutput) ToServicev1DomainOutputWithContext(ctx context.Context) Servicev1DomainOutput {
	return o
}

// An optional comment about the Director.
func (o Servicev1DomainOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Domain) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Domain) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1DomainArrayOutput struct{ *pulumi.OutputState }

func (Servicev1DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Domain)(nil)).Elem()
}

func (o Servicev1DomainArrayOutput) ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput {
	return o
}

func (o Servicev1DomainArrayOutput) ToServicev1DomainArrayOutputWithContext(ctx context.Context) Servicev1DomainArrayOutput {
	return o
}

func (o Servicev1DomainArrayOutput) Index(i pulumi.IntInput) Servicev1DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Domain {
		return vs[0].([]Servicev1Domain)[vs[1].(int)]
	}).(Servicev1DomainOutput)
}

type Servicev1Dynamicsnippet struct {
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
	Priority *int `pulumi:"priority"`
	// The ID of the dynamic snippet.
	SnippetId *string `pulumi:"snippetId"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type string `pulumi:"type"`
}

// Servicev1DynamicsnippetInput is an input type that accepts Servicev1DynamicsnippetArgs and Servicev1DynamicsnippetOutput values.
// You can construct a concrete instance of `Servicev1DynamicsnippetInput` via:
//
//          Servicev1DynamicsnippetArgs{...}
type Servicev1DynamicsnippetInput interface {
	pulumi.Input

	ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput
	ToServicev1DynamicsnippetOutputWithContext(context.Context) Servicev1DynamicsnippetOutput
}

type Servicev1DynamicsnippetArgs struct {
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The ID of the dynamic snippet.
	SnippetId pulumi.StringPtrInput `pulumi:"snippetId"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1DynamicsnippetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dynamicsnippet)(nil)).Elem()
}

func (i Servicev1DynamicsnippetArgs) ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput {
	return i.ToServicev1DynamicsnippetOutputWithContext(context.Background())
}

func (i Servicev1DynamicsnippetArgs) ToServicev1DynamicsnippetOutputWithContext(ctx context.Context) Servicev1DynamicsnippetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DynamicsnippetOutput)
}

// Servicev1DynamicsnippetArrayInput is an input type that accepts Servicev1DynamicsnippetArray and Servicev1DynamicsnippetArrayOutput values.
// You can construct a concrete instance of `Servicev1DynamicsnippetArrayInput` via:
//
//          Servicev1DynamicsnippetArray{ Servicev1DynamicsnippetArgs{...} }
type Servicev1DynamicsnippetArrayInput interface {
	pulumi.Input

	ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput
	ToServicev1DynamicsnippetArrayOutputWithContext(context.Context) Servicev1DynamicsnippetArrayOutput
}

type Servicev1DynamicsnippetArray []Servicev1DynamicsnippetInput

func (Servicev1DynamicsnippetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dynamicsnippet)(nil)).Elem()
}

func (i Servicev1DynamicsnippetArray) ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput {
	return i.ToServicev1DynamicsnippetArrayOutputWithContext(context.Background())
}

func (i Servicev1DynamicsnippetArray) ToServicev1DynamicsnippetArrayOutputWithContext(ctx context.Context) Servicev1DynamicsnippetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DynamicsnippetArrayOutput)
}

type Servicev1DynamicsnippetOutput struct{ *pulumi.OutputState }

func (Servicev1DynamicsnippetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dynamicsnippet)(nil)).Elem()
}

func (o Servicev1DynamicsnippetOutput) ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput {
	return o
}

func (o Servicev1DynamicsnippetOutput) ToServicev1DynamicsnippetOutputWithContext(ctx context.Context) Servicev1DynamicsnippetOutput {
	return o
}

// A unique name to identify this dictionary.
func (o Servicev1DynamicsnippetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Dynamicsnippet) string { return v.Name }).(pulumi.StringOutput)
}

// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
func (o Servicev1DynamicsnippetOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Dynamicsnippet) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The ID of the dynamic snippet.
func (o Servicev1DynamicsnippetOutput) SnippetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Dynamicsnippet) *string { return v.SnippetId }).(pulumi.StringPtrOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
func (o Servicev1DynamicsnippetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Dynamicsnippet) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1DynamicsnippetArrayOutput struct{ *pulumi.OutputState }

func (Servicev1DynamicsnippetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dynamicsnippet)(nil)).Elem()
}

func (o Servicev1DynamicsnippetArrayOutput) ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput {
	return o
}

func (o Servicev1DynamicsnippetArrayOutput) ToServicev1DynamicsnippetArrayOutputWithContext(ctx context.Context) Servicev1DynamicsnippetArrayOutput {
	return o
}

func (o Servicev1DynamicsnippetArrayOutput) Index(i pulumi.IntInput) Servicev1DynamicsnippetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Dynamicsnippet {
		return vs[0].([]Servicev1Dynamicsnippet)[vs[1].(int)]
	}).(Servicev1DynamicsnippetOutput)
}

type Servicev1Gcslogging struct {
	// The name of the bucket in which to store the logs.
	BucketName string `pulumi:"bucketName"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
	Email *string `pulumi:"email"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period *int `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
	SecretKey *string `pulumi:"secretKey"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// Servicev1GcsloggingInput is an input type that accepts Servicev1GcsloggingArgs and Servicev1GcsloggingOutput values.
// You can construct a concrete instance of `Servicev1GcsloggingInput` via:
//
//          Servicev1GcsloggingArgs{...}
type Servicev1GcsloggingInput interface {
	pulumi.Input

	ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput
	ToServicev1GcsloggingOutputWithContext(context.Context) Servicev1GcsloggingOutput
}

type Servicev1GcsloggingArgs struct {
	// The name of the bucket in which to store the logs.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1GcsloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gcslogging)(nil)).Elem()
}

func (i Servicev1GcsloggingArgs) ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput {
	return i.ToServicev1GcsloggingOutputWithContext(context.Background())
}

func (i Servicev1GcsloggingArgs) ToServicev1GcsloggingOutputWithContext(ctx context.Context) Servicev1GcsloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GcsloggingOutput)
}

// Servicev1GcsloggingArrayInput is an input type that accepts Servicev1GcsloggingArray and Servicev1GcsloggingArrayOutput values.
// You can construct a concrete instance of `Servicev1GcsloggingArrayInput` via:
//
//          Servicev1GcsloggingArray{ Servicev1GcsloggingArgs{...} }
type Servicev1GcsloggingArrayInput interface {
	pulumi.Input

	ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput
	ToServicev1GcsloggingArrayOutputWithContext(context.Context) Servicev1GcsloggingArrayOutput
}

type Servicev1GcsloggingArray []Servicev1GcsloggingInput

func (Servicev1GcsloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gcslogging)(nil)).Elem()
}

func (i Servicev1GcsloggingArray) ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput {
	return i.ToServicev1GcsloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1GcsloggingArray) ToServicev1GcsloggingArrayOutputWithContext(ctx context.Context) Servicev1GcsloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GcsloggingArrayOutput)
}

type Servicev1GcsloggingOutput struct{ *pulumi.OutputState }

func (Servicev1GcsloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gcslogging)(nil)).Elem()
}

func (o Servicev1GcsloggingOutput) ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput {
	return o
}

func (o Servicev1GcsloggingOutput) ToServicev1GcsloggingOutputWithContext(ctx context.Context) Servicev1GcsloggingOutput {
	return o
}

// The name of the bucket in which to store the logs.
func (o Servicev1GcsloggingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) string { return v.BucketName }).(pulumi.StringOutput)
}

// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
func (o Servicev1GcsloggingOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1GcsloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// What level of GZIP encoding to have when dumping logs (default 0, no compression).
func (o Servicev1GcsloggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
func (o Servicev1GcsloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1GcsloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in / then it is treated as a directory.
func (o Servicev1GcsloggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
func (o Servicev1GcsloggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1GcsloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1GcsloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
func (o Servicev1GcsloggingOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
func (o Servicev1GcsloggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1GcsloggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1GcsloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gcslogging)(nil)).Elem()
}

func (o Servicev1GcsloggingArrayOutput) ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput {
	return o
}

func (o Servicev1GcsloggingArrayOutput) ToServicev1GcsloggingArrayOutputWithContext(ctx context.Context) Servicev1GcsloggingArrayOutput {
	return o
}

func (o Servicev1GcsloggingArrayOutput) Index(i pulumi.IntInput) Servicev1GcsloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Gcslogging {
		return vs[0].([]Servicev1Gcslogging)[vs[1].(int)]
	}).(Servicev1GcsloggingOutput)
}

type Servicev1Gzip struct {
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
	// see [Fastly's Documentation on Conditionals][fastly-conditionals].
	CacheCondition *string `pulumi:"cacheCondition"`
	// The content-type for each type of content you wish to
	// have dynamically gzip'ed. Example: `["text/html", "text/css"]`.
	ContentTypes []string `pulumi:"contentTypes"`
	// File extensions for each file type to dynamically
	// gzip. Example: `["css", "js"]`.
	Extensions []string `pulumi:"extensions"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
}

// Servicev1GzipInput is an input type that accepts Servicev1GzipArgs and Servicev1GzipOutput values.
// You can construct a concrete instance of `Servicev1GzipInput` via:
//
//          Servicev1GzipArgs{...}
type Servicev1GzipInput interface {
	pulumi.Input

	ToServicev1GzipOutput() Servicev1GzipOutput
	ToServicev1GzipOutputWithContext(context.Context) Servicev1GzipOutput
}

type Servicev1GzipArgs struct {
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
	// see [Fastly's Documentation on Conditionals][fastly-conditionals].
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The content-type for each type of content you wish to
	// have dynamically gzip'ed. Example: `["text/html", "text/css"]`.
	ContentTypes pulumi.StringArrayInput `pulumi:"contentTypes"`
	// File extensions for each file type to dynamically
	// gzip. Example: `["css", "js"]`.
	Extensions pulumi.StringArrayInput `pulumi:"extensions"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1GzipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gzip)(nil)).Elem()
}

func (i Servicev1GzipArgs) ToServicev1GzipOutput() Servicev1GzipOutput {
	return i.ToServicev1GzipOutputWithContext(context.Background())
}

func (i Servicev1GzipArgs) ToServicev1GzipOutputWithContext(ctx context.Context) Servicev1GzipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GzipOutput)
}

// Servicev1GzipArrayInput is an input type that accepts Servicev1GzipArray and Servicev1GzipArrayOutput values.
// You can construct a concrete instance of `Servicev1GzipArrayInput` via:
//
//          Servicev1GzipArray{ Servicev1GzipArgs{...} }
type Servicev1GzipArrayInput interface {
	pulumi.Input

	ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput
	ToServicev1GzipArrayOutputWithContext(context.Context) Servicev1GzipArrayOutput
}

type Servicev1GzipArray []Servicev1GzipInput

func (Servicev1GzipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gzip)(nil)).Elem()
}

func (i Servicev1GzipArray) ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput {
	return i.ToServicev1GzipArrayOutputWithContext(context.Background())
}

func (i Servicev1GzipArray) ToServicev1GzipArrayOutputWithContext(ctx context.Context) Servicev1GzipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GzipArrayOutput)
}

type Servicev1GzipOutput struct{ *pulumi.OutputState }

func (Servicev1GzipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gzip)(nil)).Elem()
}

func (o Servicev1GzipOutput) ToServicev1GzipOutput() Servicev1GzipOutput {
	return o
}

func (o Servicev1GzipOutput) ToServicev1GzipOutputWithContext(ctx context.Context) Servicev1GzipOutput {
	return o
}

// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
// see [Fastly's Documentation on Conditionals][fastly-conditionals].
func (o Servicev1GzipOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gzip) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The content-type for each type of content you wish to
// have dynamically gzip'ed. Example: `["text/html", "text/css"]`.
func (o Servicev1GzipOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Servicev1Gzip) []string { return v.ContentTypes }).(pulumi.StringArrayOutput)
}

// File extensions for each file type to dynamically
// gzip. Example: `["css", "js"]`.
func (o Servicev1GzipOutput) Extensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Servicev1Gzip) []string { return v.Extensions }).(pulumi.StringArrayOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1GzipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Gzip) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1GzipArrayOutput struct{ *pulumi.OutputState }

func (Servicev1GzipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gzip)(nil)).Elem()
}

func (o Servicev1GzipArrayOutput) ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput {
	return o
}

func (o Servicev1GzipArrayOutput) ToServicev1GzipArrayOutputWithContext(ctx context.Context) Servicev1GzipArrayOutput {
	return o
}

func (o Servicev1GzipArrayOutput) Index(i pulumi.IntInput) Servicev1GzipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Gzip {
		return vs[0].([]Servicev1Gzip)[vs[1].(int)]
	}).(Servicev1GzipOutput)
}

type Servicev1Header struct {
	// Allows you to terminate request handling and immediately
	// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
	Action string `pulumi:"action"`
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
	// see [Fastly's Documentation on Conditionals][fastly-conditionals].
	CacheCondition *string `pulumi:"cacheCondition"`
	// The name of the header that is going to be affected by the Action.
	Destination string `pulumi:"destination"`
	// Do not add the header if it is already present. (Only applies to the `set` action.). Default `false`.
	IgnoreIfSet *bool `pulumi:"ignoreIfSet"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
	Priority *int `pulumi:"priority"`
	// Regular expression to use (Only applies to the `regex` and `regexRepeat` actions.)
	Regex *string `pulumi:"regex"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
	RequestCondition *string `pulumi:"requestCondition"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Variable to be used as a source for the header
	// content. (Does not apply to the `delete` action.)
	Source *string `pulumi:"source"`
	// Value to substitute in place of regular expression. (Only applies to the `regex` and `regexRepeat` actions.)
	Substitution *string `pulumi:"substitution"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type string `pulumi:"type"`
}

// Servicev1HeaderInput is an input type that accepts Servicev1HeaderArgs and Servicev1HeaderOutput values.
// You can construct a concrete instance of `Servicev1HeaderInput` via:
//
//          Servicev1HeaderArgs{...}
type Servicev1HeaderInput interface {
	pulumi.Input

	ToServicev1HeaderOutput() Servicev1HeaderOutput
	ToServicev1HeaderOutputWithContext(context.Context) Servicev1HeaderOutput
}

type Servicev1HeaderArgs struct {
	// Allows you to terminate request handling and immediately
	// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
	Action pulumi.StringInput `pulumi:"action"`
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
	// see [Fastly's Documentation on Conditionals][fastly-conditionals].
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The name of the header that is going to be affected by the Action.
	Destination pulumi.StringInput `pulumi:"destination"`
	// Do not add the header if it is already present. (Only applies to the `set` action.). Default `false`.
	IgnoreIfSet pulumi.BoolPtrInput `pulumi:"ignoreIfSet"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Regular expression to use (Only applies to the `regex` and `regexRepeat` actions.)
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Variable to be used as a source for the header
	// content. (Does not apply to the `delete` action.)
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Value to substitute in place of regular expression. (Only applies to the `regex` and `regexRepeat` actions.)
	Substitution pulumi.StringPtrInput `pulumi:"substitution"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1HeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Header)(nil)).Elem()
}

func (i Servicev1HeaderArgs) ToServicev1HeaderOutput() Servicev1HeaderOutput {
	return i.ToServicev1HeaderOutputWithContext(context.Background())
}

func (i Servicev1HeaderArgs) ToServicev1HeaderOutputWithContext(ctx context.Context) Servicev1HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HeaderOutput)
}

// Servicev1HeaderArrayInput is an input type that accepts Servicev1HeaderArray and Servicev1HeaderArrayOutput values.
// You can construct a concrete instance of `Servicev1HeaderArrayInput` via:
//
//          Servicev1HeaderArray{ Servicev1HeaderArgs{...} }
type Servicev1HeaderArrayInput interface {
	pulumi.Input

	ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput
	ToServicev1HeaderArrayOutputWithContext(context.Context) Servicev1HeaderArrayOutput
}

type Servicev1HeaderArray []Servicev1HeaderInput

func (Servicev1HeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Header)(nil)).Elem()
}

func (i Servicev1HeaderArray) ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput {
	return i.ToServicev1HeaderArrayOutputWithContext(context.Background())
}

func (i Servicev1HeaderArray) ToServicev1HeaderArrayOutputWithContext(ctx context.Context) Servicev1HeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HeaderArrayOutput)
}

type Servicev1HeaderOutput struct{ *pulumi.OutputState }

func (Servicev1HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Header)(nil)).Elem()
}

func (o Servicev1HeaderOutput) ToServicev1HeaderOutput() Servicev1HeaderOutput {
	return o
}

func (o Servicev1HeaderOutput) ToServicev1HeaderOutputWithContext(ctx context.Context) Servicev1HeaderOutput {
	return o
}

// Allows you to terminate request handling and immediately
// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
func (o Servicev1HeaderOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Header) string { return v.Action }).(pulumi.StringOutput)
}

// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
// see [Fastly's Documentation on Conditionals][fastly-conditionals].
func (o Servicev1HeaderOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The name of the header that is going to be affected by the Action.
func (o Servicev1HeaderOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Header) string { return v.Destination }).(pulumi.StringOutput)
}

// Do not add the header if it is already present. (Only applies to the `set` action.). Default `false`.
func (o Servicev1HeaderOutput) IgnoreIfSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *bool { return v.IgnoreIfSet }).(pulumi.BoolPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1HeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Header) string { return v.Name }).(pulumi.StringOutput)
}

// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
func (o Servicev1HeaderOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Regular expression to use (Only applies to the `regex` and `regexRepeat` actions.)
func (o Servicev1HeaderOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
func (o Servicev1HeaderOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1HeaderOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Variable to be used as a source for the header
// content. (Does not apply to the `delete` action.)
func (o Servicev1HeaderOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Value to substitute in place of regular expression. (Only applies to the `regex` and `regexRepeat` actions.)
func (o Servicev1HeaderOutput) Substitution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.Substitution }).(pulumi.StringPtrOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
func (o Servicev1HeaderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Header) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1HeaderArrayOutput struct{ *pulumi.OutputState }

func (Servicev1HeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Header)(nil)).Elem()
}

func (o Servicev1HeaderArrayOutput) ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput {
	return o
}

func (o Servicev1HeaderArrayOutput) ToServicev1HeaderArrayOutputWithContext(ctx context.Context) Servicev1HeaderArrayOutput {
	return o
}

func (o Servicev1HeaderArrayOutput) Index(i pulumi.IntInput) Servicev1HeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Header {
		return vs[0].([]Servicev1Header)[vs[1].(int)]
	}).(Servicev1HeaderOutput)
}

type Servicev1Healthcheck struct {
	// How often to run the Healthcheck in milliseconds. Default `5000`.
	CheckInterval *int `pulumi:"checkInterval"`
	// The status code expected from the host. Default `200`.
	ExpectedResponse *int `pulumi:"expectedResponse"`
	// The Host header to send for this Healthcheck.
	Host string `pulumi:"host"`
	// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`.
	HttpVersion *string `pulumi:"httpVersion"`
	// When loading a config, the initial number of probes to be seen as OK. Default `2`.
	Initial *int `pulumi:"initial"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`.
	Method *string `pulumi:"method"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path string `pulumi:"path"`
	// How many Healthchecks must succeed to be considered healthy. Default `3`.
	Threshold *int `pulumi:"threshold"`
	// Timeout in milliseconds. Default `500`.
	Timeout *int `pulumi:"timeout"`
	// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`.
	Window *int `pulumi:"window"`
}

// Servicev1HealthcheckInput is an input type that accepts Servicev1HealthcheckArgs and Servicev1HealthcheckOutput values.
// You can construct a concrete instance of `Servicev1HealthcheckInput` via:
//
//          Servicev1HealthcheckArgs{...}
type Servicev1HealthcheckInput interface {
	pulumi.Input

	ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput
	ToServicev1HealthcheckOutputWithContext(context.Context) Servicev1HealthcheckOutput
}

type Servicev1HealthcheckArgs struct {
	// How often to run the Healthcheck in milliseconds. Default `5000`.
	CheckInterval pulumi.IntPtrInput `pulumi:"checkInterval"`
	// The status code expected from the host. Default `200`.
	ExpectedResponse pulumi.IntPtrInput `pulumi:"expectedResponse"`
	// The Host header to send for this Healthcheck.
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`.
	HttpVersion pulumi.StringPtrInput `pulumi:"httpVersion"`
	// When loading a config, the initial number of probes to be seen as OK. Default `2`.
	Initial pulumi.IntPtrInput `pulumi:"initial"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path pulumi.StringInput `pulumi:"path"`
	// How many Healthchecks must succeed to be considered healthy. Default `3`.
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
	// Timeout in milliseconds. Default `500`.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`.
	Window pulumi.IntPtrInput `pulumi:"window"`
}

func (Servicev1HealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Healthcheck)(nil)).Elem()
}

func (i Servicev1HealthcheckArgs) ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput {
	return i.ToServicev1HealthcheckOutputWithContext(context.Background())
}

func (i Servicev1HealthcheckArgs) ToServicev1HealthcheckOutputWithContext(ctx context.Context) Servicev1HealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HealthcheckOutput)
}

// Servicev1HealthcheckArrayInput is an input type that accepts Servicev1HealthcheckArray and Servicev1HealthcheckArrayOutput values.
// You can construct a concrete instance of `Servicev1HealthcheckArrayInput` via:
//
//          Servicev1HealthcheckArray{ Servicev1HealthcheckArgs{...} }
type Servicev1HealthcheckArrayInput interface {
	pulumi.Input

	ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput
	ToServicev1HealthcheckArrayOutputWithContext(context.Context) Servicev1HealthcheckArrayOutput
}

type Servicev1HealthcheckArray []Servicev1HealthcheckInput

func (Servicev1HealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Healthcheck)(nil)).Elem()
}

func (i Servicev1HealthcheckArray) ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput {
	return i.ToServicev1HealthcheckArrayOutputWithContext(context.Background())
}

func (i Servicev1HealthcheckArray) ToServicev1HealthcheckArrayOutputWithContext(ctx context.Context) Servicev1HealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HealthcheckArrayOutput)
}

type Servicev1HealthcheckOutput struct{ *pulumi.OutputState }

func (Servicev1HealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Healthcheck)(nil)).Elem()
}

func (o Servicev1HealthcheckOutput) ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput {
	return o
}

func (o Servicev1HealthcheckOutput) ToServicev1HealthcheckOutputWithContext(ctx context.Context) Servicev1HealthcheckOutput {
	return o
}

// How often to run the Healthcheck in milliseconds. Default `5000`.
func (o Servicev1HealthcheckOutput) CheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.CheckInterval }).(pulumi.IntPtrOutput)
}

// The status code expected from the host. Default `200`.
func (o Servicev1HealthcheckOutput) ExpectedResponse() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.ExpectedResponse }).(pulumi.IntPtrOutput)
}

// The Host header to send for this Healthcheck.
func (o Servicev1HealthcheckOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`.
func (o Servicev1HealthcheckOutput) HttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *string { return v.HttpVersion }).(pulumi.StringPtrOutput)
}

// When loading a config, the initial number of probes to be seen as OK. Default `2`.
func (o Servicev1HealthcheckOutput) Initial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.Initial }).(pulumi.IntPtrOutput)
}

// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`.
func (o Servicev1HealthcheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1HealthcheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in / then it is treated as a directory.
func (o Servicev1HealthcheckOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) string { return v.Path }).(pulumi.StringOutput)
}

// How many Healthchecks must succeed to be considered healthy. Default `3`.
func (o Servicev1HealthcheckOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds. Default `500`.
func (o Servicev1HealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`.
func (o Servicev1HealthcheckOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.Window }).(pulumi.IntPtrOutput)
}

type Servicev1HealthcheckArrayOutput struct{ *pulumi.OutputState }

func (Servicev1HealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Healthcheck)(nil)).Elem()
}

func (o Servicev1HealthcheckArrayOutput) ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput {
	return o
}

func (o Servicev1HealthcheckArrayOutput) ToServicev1HealthcheckArrayOutputWithContext(ctx context.Context) Servicev1HealthcheckArrayOutput {
	return o
}

func (o Servicev1HealthcheckArrayOutput) Index(i pulumi.IntInput) Servicev1HealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Healthcheck {
		return vs[0].([]Servicev1Healthcheck)[vs[1].(int)]
	}).(Servicev1HealthcheckOutput)
}

type Servicev1Httpslogging struct {
	// The MIME type of the content.
	ContentType *string `pulumi:"contentType"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// Custom header sent with the request.
	HeaderName *string `pulumi:"headerName"`
	// Value of the custom header sent with the request.
	HeaderValue *string `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`).
	JsonFormat *string `pulumi:"jsonFormat"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType *string `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`.
	Method *string `pulumi:"method"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The maximum number of bytes sent in one request. Defaults to `0` for unbounded.
	RequestMaxBytes *int `pulumi:"requestMaxBytes"`
	// The maximum number of logs sent in one request. Defaults to `0` for unbounded.
	RequestMaxEntries *int `pulumi:"requestMaxEntries"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to.
	Url string `pulumi:"url"`
}

// Servicev1HttpsloggingInput is an input type that accepts Servicev1HttpsloggingArgs and Servicev1HttpsloggingOutput values.
// You can construct a concrete instance of `Servicev1HttpsloggingInput` via:
//
//          Servicev1HttpsloggingArgs{...}
type Servicev1HttpsloggingInput interface {
	pulumi.Input

	ToServicev1HttpsloggingOutput() Servicev1HttpsloggingOutput
	ToServicev1HttpsloggingOutputWithContext(context.Context) Servicev1HttpsloggingOutput
}

type Servicev1HttpsloggingArgs struct {
	// The MIME type of the content.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Custom header sent with the request.
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// Value of the custom header sent with the request.
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`).
	JsonFormat pulumi.StringPtrInput `pulumi:"jsonFormat"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The maximum number of bytes sent in one request. Defaults to `0` for unbounded.
	RequestMaxBytes pulumi.IntPtrInput `pulumi:"requestMaxBytes"`
	// The maximum number of logs sent in one request. Defaults to `0` for unbounded.
	RequestMaxEntries pulumi.IntPtrInput `pulumi:"requestMaxEntries"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1HttpsloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Httpslogging)(nil)).Elem()
}

func (i Servicev1HttpsloggingArgs) ToServicev1HttpsloggingOutput() Servicev1HttpsloggingOutput {
	return i.ToServicev1HttpsloggingOutputWithContext(context.Background())
}

func (i Servicev1HttpsloggingArgs) ToServicev1HttpsloggingOutputWithContext(ctx context.Context) Servicev1HttpsloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HttpsloggingOutput)
}

// Servicev1HttpsloggingArrayInput is an input type that accepts Servicev1HttpsloggingArray and Servicev1HttpsloggingArrayOutput values.
// You can construct a concrete instance of `Servicev1HttpsloggingArrayInput` via:
//
//          Servicev1HttpsloggingArray{ Servicev1HttpsloggingArgs{...} }
type Servicev1HttpsloggingArrayInput interface {
	pulumi.Input

	ToServicev1HttpsloggingArrayOutput() Servicev1HttpsloggingArrayOutput
	ToServicev1HttpsloggingArrayOutputWithContext(context.Context) Servicev1HttpsloggingArrayOutput
}

type Servicev1HttpsloggingArray []Servicev1HttpsloggingInput

func (Servicev1HttpsloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Httpslogging)(nil)).Elem()
}

func (i Servicev1HttpsloggingArray) ToServicev1HttpsloggingArrayOutput() Servicev1HttpsloggingArrayOutput {
	return i.ToServicev1HttpsloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1HttpsloggingArray) ToServicev1HttpsloggingArrayOutputWithContext(ctx context.Context) Servicev1HttpsloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HttpsloggingArrayOutput)
}

type Servicev1HttpsloggingOutput struct{ *pulumi.OutputState }

func (Servicev1HttpsloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Httpslogging)(nil)).Elem()
}

func (o Servicev1HttpsloggingOutput) ToServicev1HttpsloggingOutput() Servicev1HttpsloggingOutput {
	return o
}

func (o Servicev1HttpsloggingOutput) ToServicev1HttpsloggingOutputWithContext(ctx context.Context) Servicev1HttpsloggingOutput {
	return o
}

// The MIME type of the content.
func (o Servicev1HttpsloggingOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1HttpsloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1HttpsloggingOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Custom header sent with the request.
func (o Servicev1HttpsloggingOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// Value of the custom header sent with the request.
func (o Servicev1HttpsloggingOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`).
func (o Servicev1HttpsloggingOutput) JsonFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.JsonFormat }).(pulumi.StringPtrOutput)
}

// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
func (o Servicev1HttpsloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`.
func (o Servicev1HttpsloggingOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1HttpsloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1HttpsloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The maximum number of bytes sent in one request. Defaults to `0` for unbounded.
func (o Servicev1HttpsloggingOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The maximum number of logs sent in one request. Defaults to `0` for unbounded.
func (o Servicev1HttpsloggingOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1HttpsloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format.
func (o Servicev1HttpsloggingOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format.
func (o Servicev1HttpsloggingOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format.
func (o Servicev1HttpsloggingOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
func (o Servicev1HttpsloggingOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Elasticsearch URL to stream logs to.
func (o Servicev1HttpsloggingOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1HttpsloggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1HttpsloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Httpslogging)(nil)).Elem()
}

func (o Servicev1HttpsloggingArrayOutput) ToServicev1HttpsloggingArrayOutput() Servicev1HttpsloggingArrayOutput {
	return o
}

func (o Servicev1HttpsloggingArrayOutput) ToServicev1HttpsloggingArrayOutputWithContext(ctx context.Context) Servicev1HttpsloggingArrayOutput {
	return o
}

func (o Servicev1HttpsloggingArrayOutput) Index(i pulumi.IntInput) Servicev1HttpsloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Httpslogging {
		return vs[0].([]Servicev1Httpslogging)[vs[1].(int)]
	}).(Servicev1HttpsloggingOutput)
}

type Servicev1Logentry struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port *int `pulumi:"port"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token string `pulumi:"token"`
	// Whether to use TLS for secure logging. Can be either true or false.
	UseTls *bool `pulumi:"useTls"`
}

// Servicev1LogentryInput is an input type that accepts Servicev1LogentryArgs and Servicev1LogentryOutput values.
// You can construct a concrete instance of `Servicev1LogentryInput` via:
//
//          Servicev1LogentryArgs{...}
type Servicev1LogentryInput interface {
	pulumi.Input

	ToServicev1LogentryOutput() Servicev1LogentryOutput
	ToServicev1LogentryOutputWithContext(context.Context) Servicev1LogentryOutput
}

type Servicev1LogentryArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token pulumi.StringInput `pulumi:"token"`
	// Whether to use TLS for secure logging. Can be either true or false.
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (Servicev1LogentryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Logentry)(nil)).Elem()
}

func (i Servicev1LogentryArgs) ToServicev1LogentryOutput() Servicev1LogentryOutput {
	return i.ToServicev1LogentryOutputWithContext(context.Background())
}

func (i Servicev1LogentryArgs) ToServicev1LogentryOutputWithContext(ctx context.Context) Servicev1LogentryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LogentryOutput)
}

// Servicev1LogentryArrayInput is an input type that accepts Servicev1LogentryArray and Servicev1LogentryArrayOutput values.
// You can construct a concrete instance of `Servicev1LogentryArrayInput` via:
//
//          Servicev1LogentryArray{ Servicev1LogentryArgs{...} }
type Servicev1LogentryArrayInput interface {
	pulumi.Input

	ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput
	ToServicev1LogentryArrayOutputWithContext(context.Context) Servicev1LogentryArrayOutput
}

type Servicev1LogentryArray []Servicev1LogentryInput

func (Servicev1LogentryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Logentry)(nil)).Elem()
}

func (i Servicev1LogentryArray) ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput {
	return i.ToServicev1LogentryArrayOutputWithContext(context.Background())
}

func (i Servicev1LogentryArray) ToServicev1LogentryArrayOutputWithContext(ctx context.Context) Servicev1LogentryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LogentryArrayOutput)
}

type Servicev1LogentryOutput struct{ *pulumi.OutputState }

func (Servicev1LogentryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Logentry)(nil)).Elem()
}

func (o Servicev1LogentryOutput) ToServicev1LogentryOutput() Servicev1LogentryOutput {
	return o
}

func (o Servicev1LogentryOutput) ToServicev1LogentryOutputWithContext(ctx context.Context) Servicev1LogentryOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LogentryOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LogentryOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LogentryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Logentry) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LogentryOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`).
func (o Servicev1LogentryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LogentryOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys).
func (o Servicev1LogentryOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Logentry) string { return v.Token }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging. Can be either true or false.
func (o Servicev1LogentryOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type Servicev1LogentryArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LogentryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Logentry)(nil)).Elem()
}

func (o Servicev1LogentryArrayOutput) ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput {
	return o
}

func (o Servicev1LogentryArrayOutput) ToServicev1LogentryArrayOutputWithContext(ctx context.Context) Servicev1LogentryArrayOutput {
	return o
}

func (o Servicev1LogentryArrayOutput) Index(i pulumi.IntInput) Servicev1LogentryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Logentry {
		return vs[0].([]Servicev1Logentry)[vs[1].(int)]
	}).(Servicev1LogentryOutput)
}

type Servicev1LoggingDatadog struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The region that log data will be sent to. One of US or EU. Defaults to US if undefined.
	Region *string `pulumi:"region"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token string `pulumi:"token"`
}

// Servicev1LoggingDatadogInput is an input type that accepts Servicev1LoggingDatadogArgs and Servicev1LoggingDatadogOutput values.
// You can construct a concrete instance of `Servicev1LoggingDatadogInput` via:
//
//          Servicev1LoggingDatadogArgs{...}
type Servicev1LoggingDatadogInput interface {
	pulumi.Input

	ToServicev1LoggingDatadogOutput() Servicev1LoggingDatadogOutput
	ToServicev1LoggingDatadogOutputWithContext(context.Context) Servicev1LoggingDatadogOutput
}

type Servicev1LoggingDatadogArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The region that log data will be sent to. One of US or EU. Defaults to US if undefined.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingDatadog)(nil)).Elem()
}

func (i Servicev1LoggingDatadogArgs) ToServicev1LoggingDatadogOutput() Servicev1LoggingDatadogOutput {
	return i.ToServicev1LoggingDatadogOutputWithContext(context.Background())
}

func (i Servicev1LoggingDatadogArgs) ToServicev1LoggingDatadogOutputWithContext(ctx context.Context) Servicev1LoggingDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingDatadogOutput)
}

// Servicev1LoggingDatadogArrayInput is an input type that accepts Servicev1LoggingDatadogArray and Servicev1LoggingDatadogArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingDatadogArrayInput` via:
//
//          Servicev1LoggingDatadogArray{ Servicev1LoggingDatadogArgs{...} }
type Servicev1LoggingDatadogArrayInput interface {
	pulumi.Input

	ToServicev1LoggingDatadogArrayOutput() Servicev1LoggingDatadogArrayOutput
	ToServicev1LoggingDatadogArrayOutputWithContext(context.Context) Servicev1LoggingDatadogArrayOutput
}

type Servicev1LoggingDatadogArray []Servicev1LoggingDatadogInput

func (Servicev1LoggingDatadogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingDatadog)(nil)).Elem()
}

func (i Servicev1LoggingDatadogArray) ToServicev1LoggingDatadogArrayOutput() Servicev1LoggingDatadogArrayOutput {
	return i.ToServicev1LoggingDatadogArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingDatadogArray) ToServicev1LoggingDatadogArrayOutputWithContext(ctx context.Context) Servicev1LoggingDatadogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingDatadogArrayOutput)
}

type Servicev1LoggingDatadogOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingDatadog)(nil)).Elem()
}

func (o Servicev1LoggingDatadogOutput) ToServicev1LoggingDatadogOutput() Servicev1LoggingDatadogOutput {
	return o
}

func (o Servicev1LoggingDatadogOutput) ToServicev1LoggingDatadogOutputWithContext(ctx context.Context) Servicev1LoggingDatadogOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingDatadogOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingDatadogOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingDatadogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingDatadogOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The region that log data will be sent to. One of US or EU. Defaults to US if undefined.
func (o Servicev1LoggingDatadogOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingDatadogOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys).
func (o Servicev1LoggingDatadogOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingDatadogArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingDatadogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingDatadog)(nil)).Elem()
}

func (o Servicev1LoggingDatadogArrayOutput) ToServicev1LoggingDatadogArrayOutput() Servicev1LoggingDatadogArrayOutput {
	return o
}

func (o Servicev1LoggingDatadogArrayOutput) ToServicev1LoggingDatadogArrayOutputWithContext(ctx context.Context) Servicev1LoggingDatadogArrayOutput {
	return o
}

func (o Servicev1LoggingDatadogArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingDatadogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingDatadog {
		return vs[0].([]Servicev1LoggingDatadog)[vs[1].(int)]
	}).(Servicev1LoggingDatadogOutput)
}

type Servicev1LoggingElasticsearch struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// The name of the Elasticsearch index to send documents (logs) to.
	Index string `pulumi:"index"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
	Password *string `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing.
	Pipeline *string `pulumi:"pipeline"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The maximum number of bytes sent in one request. Defaults to `0` for unbounded.
	RequestMaxBytes *int `pulumi:"requestMaxBytes"`
	// The maximum number of logs sent in one request. Defaults to `0` for unbounded.
	RequestMaxEntries *int `pulumi:"requestMaxEntries"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to.
	Url string `pulumi:"url"`
	// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
	User *string `pulumi:"user"`
}

// Servicev1LoggingElasticsearchInput is an input type that accepts Servicev1LoggingElasticsearchArgs and Servicev1LoggingElasticsearchOutput values.
// You can construct a concrete instance of `Servicev1LoggingElasticsearchInput` via:
//
//          Servicev1LoggingElasticsearchArgs{...}
type Servicev1LoggingElasticsearchInput interface {
	pulumi.Input

	ToServicev1LoggingElasticsearchOutput() Servicev1LoggingElasticsearchOutput
	ToServicev1LoggingElasticsearchOutputWithContext(context.Context) Servicev1LoggingElasticsearchOutput
}

type Servicev1LoggingElasticsearchArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The name of the Elasticsearch index to send documents (logs) to.
	Index pulumi.StringInput `pulumi:"index"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing.
	Pipeline pulumi.StringPtrInput `pulumi:"pipeline"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The maximum number of bytes sent in one request. Defaults to `0` for unbounded.
	RequestMaxBytes pulumi.IntPtrInput `pulumi:"requestMaxBytes"`
	// The maximum number of logs sent in one request. Defaults to `0` for unbounded.
	RequestMaxEntries pulumi.IntPtrInput `pulumi:"requestMaxEntries"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to.
	Url pulumi.StringInput `pulumi:"url"`
	// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (Servicev1LoggingElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingElasticsearch)(nil)).Elem()
}

func (i Servicev1LoggingElasticsearchArgs) ToServicev1LoggingElasticsearchOutput() Servicev1LoggingElasticsearchOutput {
	return i.ToServicev1LoggingElasticsearchOutputWithContext(context.Background())
}

func (i Servicev1LoggingElasticsearchArgs) ToServicev1LoggingElasticsearchOutputWithContext(ctx context.Context) Servicev1LoggingElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingElasticsearchOutput)
}

// Servicev1LoggingElasticsearchArrayInput is an input type that accepts Servicev1LoggingElasticsearchArray and Servicev1LoggingElasticsearchArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingElasticsearchArrayInput` via:
//
//          Servicev1LoggingElasticsearchArray{ Servicev1LoggingElasticsearchArgs{...} }
type Servicev1LoggingElasticsearchArrayInput interface {
	pulumi.Input

	ToServicev1LoggingElasticsearchArrayOutput() Servicev1LoggingElasticsearchArrayOutput
	ToServicev1LoggingElasticsearchArrayOutputWithContext(context.Context) Servicev1LoggingElasticsearchArrayOutput
}

type Servicev1LoggingElasticsearchArray []Servicev1LoggingElasticsearchInput

func (Servicev1LoggingElasticsearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingElasticsearch)(nil)).Elem()
}

func (i Servicev1LoggingElasticsearchArray) ToServicev1LoggingElasticsearchArrayOutput() Servicev1LoggingElasticsearchArrayOutput {
	return i.ToServicev1LoggingElasticsearchArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingElasticsearchArray) ToServicev1LoggingElasticsearchArrayOutputWithContext(ctx context.Context) Servicev1LoggingElasticsearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingElasticsearchArrayOutput)
}

type Servicev1LoggingElasticsearchOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingElasticsearch)(nil)).Elem()
}

func (o Servicev1LoggingElasticsearchOutput) ToServicev1LoggingElasticsearchOutput() Servicev1LoggingElasticsearchOutput {
	return o
}

func (o Servicev1LoggingElasticsearchOutput) ToServicev1LoggingElasticsearchOutputWithContext(ctx context.Context) Servicev1LoggingElasticsearchOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingElasticsearchOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingElasticsearchOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The name of the Elasticsearch index to send documents (logs) to.
func (o Servicev1LoggingElasticsearchOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) string { return v.Index }).(pulumi.StringOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingElasticsearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
func (o Servicev1LoggingElasticsearchOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing.
func (o Servicev1LoggingElasticsearchOutput) Pipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.Pipeline }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingElasticsearchOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The maximum number of bytes sent in one request. Defaults to `0` for unbounded.
func (o Servicev1LoggingElasticsearchOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The maximum number of logs sent in one request. Defaults to `0` for unbounded.
func (o Servicev1LoggingElasticsearchOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingElasticsearchOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format.
func (o Servicev1LoggingElasticsearchOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format.
func (o Servicev1LoggingElasticsearchOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format.
func (o Servicev1LoggingElasticsearchOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
func (o Servicev1LoggingElasticsearchOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Elasticsearch URL to stream logs to.
func (o Servicev1LoggingElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
func (o Servicev1LoggingElasticsearchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type Servicev1LoggingElasticsearchArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingElasticsearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingElasticsearch)(nil)).Elem()
}

func (o Servicev1LoggingElasticsearchArrayOutput) ToServicev1LoggingElasticsearchArrayOutput() Servicev1LoggingElasticsearchArrayOutput {
	return o
}

func (o Servicev1LoggingElasticsearchArrayOutput) ToServicev1LoggingElasticsearchArrayOutputWithContext(ctx context.Context) Servicev1LoggingElasticsearchArrayOutput {
	return o
}

func (o Servicev1LoggingElasticsearchArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingElasticsearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingElasticsearch {
		return vs[0].([]Servicev1LoggingElasticsearch)[vs[1].(int)]
	}).(Servicev1LoggingElasticsearchOutput)
}

type Servicev1LoggingFtp struct {
	// The SFTP address to stream logs to.
	Address string `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel *int `pulumi:"gzipLevel"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
	Password string `pulumi:"password"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period *int `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port *int `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `pulumi:"publicKey"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
	User string `pulumi:"user"`
}

// Servicev1LoggingFtpInput is an input type that accepts Servicev1LoggingFtpArgs and Servicev1LoggingFtpOutput values.
// You can construct a concrete instance of `Servicev1LoggingFtpInput` via:
//
//          Servicev1LoggingFtpArgs{...}
type Servicev1LoggingFtpInput interface {
	pulumi.Input

	ToServicev1LoggingFtpOutput() Servicev1LoggingFtpOutput
	ToServicev1LoggingFtpOutputWithContext(context.Context) Servicev1LoggingFtpOutput
}

type Servicev1LoggingFtpArgs struct {
	// The SFTP address to stream logs to.
	Address pulumi.StringInput `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
	Password pulumi.StringInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
	User pulumi.StringInput `pulumi:"user"`
}

func (Servicev1LoggingFtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingFtp)(nil)).Elem()
}

func (i Servicev1LoggingFtpArgs) ToServicev1LoggingFtpOutput() Servicev1LoggingFtpOutput {
	return i.ToServicev1LoggingFtpOutputWithContext(context.Background())
}

func (i Servicev1LoggingFtpArgs) ToServicev1LoggingFtpOutputWithContext(ctx context.Context) Servicev1LoggingFtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingFtpOutput)
}

// Servicev1LoggingFtpArrayInput is an input type that accepts Servicev1LoggingFtpArray and Servicev1LoggingFtpArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingFtpArrayInput` via:
//
//          Servicev1LoggingFtpArray{ Servicev1LoggingFtpArgs{...} }
type Servicev1LoggingFtpArrayInput interface {
	pulumi.Input

	ToServicev1LoggingFtpArrayOutput() Servicev1LoggingFtpArrayOutput
	ToServicev1LoggingFtpArrayOutputWithContext(context.Context) Servicev1LoggingFtpArrayOutput
}

type Servicev1LoggingFtpArray []Servicev1LoggingFtpInput

func (Servicev1LoggingFtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingFtp)(nil)).Elem()
}

func (i Servicev1LoggingFtpArray) ToServicev1LoggingFtpArrayOutput() Servicev1LoggingFtpArrayOutput {
	return i.ToServicev1LoggingFtpArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingFtpArray) ToServicev1LoggingFtpArrayOutputWithContext(ctx context.Context) Servicev1LoggingFtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingFtpArrayOutput)
}

type Servicev1LoggingFtpOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingFtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingFtp)(nil)).Elem()
}

func (o Servicev1LoggingFtpOutput) ToServicev1LoggingFtpOutput() Servicev1LoggingFtpOutput {
	return o
}

func (o Servicev1LoggingFtpOutput) ToServicev1LoggingFtpOutputWithContext(ctx context.Context) Servicev1LoggingFtpOutput {
	return o
}

// The SFTP address to stream logs to.
func (o Servicev1LoggingFtpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.Address }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingFtpOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingFtpOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// What level of GZIP encoding to have when dumping logs (default 0, no compression).
func (o Servicev1LoggingFtpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingFtpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
func (o Servicev1LoggingFtpOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.Password }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in / then it is treated as a directory.
func (o Servicev1LoggingFtpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
func (o Servicev1LoggingFtpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingFtpOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`).
func (o Servicev1LoggingFtpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
func (o Servicev1LoggingFtpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingFtpOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
func (o Servicev1LoggingFtpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
func (o Servicev1LoggingFtpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.User }).(pulumi.StringOutput)
}

type Servicev1LoggingFtpArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingFtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingFtp)(nil)).Elem()
}

func (o Servicev1LoggingFtpArrayOutput) ToServicev1LoggingFtpArrayOutput() Servicev1LoggingFtpArrayOutput {
	return o
}

func (o Servicev1LoggingFtpArrayOutput) ToServicev1LoggingFtpArrayOutputWithContext(ctx context.Context) Servicev1LoggingFtpArrayOutput {
	return o
}

func (o Servicev1LoggingFtpArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingFtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingFtp {
		return vs[0].([]Servicev1LoggingFtp)[vs[1].(int)]
	}).(Servicev1LoggingFtpOutput)
}

type Servicev1LoggingGooglepubsub struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The ID of your Google Cloud Platform project.
	ProjectId string `pulumi:"projectId"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
	SecretKey string `pulumi:"secretKey"`
	// The Kafka topic to send logs to.
	Topic string `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
	User string `pulumi:"user"`
}

// Servicev1LoggingGooglepubsubInput is an input type that accepts Servicev1LoggingGooglepubsubArgs and Servicev1LoggingGooglepubsubOutput values.
// You can construct a concrete instance of `Servicev1LoggingGooglepubsubInput` via:
//
//          Servicev1LoggingGooglepubsubArgs{...}
type Servicev1LoggingGooglepubsubInput interface {
	pulumi.Input

	ToServicev1LoggingGooglepubsubOutput() Servicev1LoggingGooglepubsubOutput
	ToServicev1LoggingGooglepubsubOutputWithContext(context.Context) Servicev1LoggingGooglepubsubOutput
}

type Servicev1LoggingGooglepubsubArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The ID of your Google Cloud Platform project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The Kafka topic to send logs to.
	Topic pulumi.StringInput `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
	User pulumi.StringInput `pulumi:"user"`
}

func (Servicev1LoggingGooglepubsubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingGooglepubsub)(nil)).Elem()
}

func (i Servicev1LoggingGooglepubsubArgs) ToServicev1LoggingGooglepubsubOutput() Servicev1LoggingGooglepubsubOutput {
	return i.ToServicev1LoggingGooglepubsubOutputWithContext(context.Background())
}

func (i Servicev1LoggingGooglepubsubArgs) ToServicev1LoggingGooglepubsubOutputWithContext(ctx context.Context) Servicev1LoggingGooglepubsubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingGooglepubsubOutput)
}

// Servicev1LoggingGooglepubsubArrayInput is an input type that accepts Servicev1LoggingGooglepubsubArray and Servicev1LoggingGooglepubsubArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingGooglepubsubArrayInput` via:
//
//          Servicev1LoggingGooglepubsubArray{ Servicev1LoggingGooglepubsubArgs{...} }
type Servicev1LoggingGooglepubsubArrayInput interface {
	pulumi.Input

	ToServicev1LoggingGooglepubsubArrayOutput() Servicev1LoggingGooglepubsubArrayOutput
	ToServicev1LoggingGooglepubsubArrayOutputWithContext(context.Context) Servicev1LoggingGooglepubsubArrayOutput
}

type Servicev1LoggingGooglepubsubArray []Servicev1LoggingGooglepubsubInput

func (Servicev1LoggingGooglepubsubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingGooglepubsub)(nil)).Elem()
}

func (i Servicev1LoggingGooglepubsubArray) ToServicev1LoggingGooglepubsubArrayOutput() Servicev1LoggingGooglepubsubArrayOutput {
	return i.ToServicev1LoggingGooglepubsubArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingGooglepubsubArray) ToServicev1LoggingGooglepubsubArrayOutputWithContext(ctx context.Context) Servicev1LoggingGooglepubsubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingGooglepubsubArrayOutput)
}

type Servicev1LoggingGooglepubsubOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingGooglepubsubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingGooglepubsub)(nil)).Elem()
}

func (o Servicev1LoggingGooglepubsubOutput) ToServicev1LoggingGooglepubsubOutput() Servicev1LoggingGooglepubsubOutput {
	return o
}

func (o Servicev1LoggingGooglepubsubOutput) ToServicev1LoggingGooglepubsubOutputWithContext(ctx context.Context) Servicev1LoggingGooglepubsubOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingGooglepubsubOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingGooglepubsubOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingGooglepubsubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingGooglepubsubOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The ID of your Google Cloud Platform project.
func (o Servicev1LoggingGooglepubsubOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingGooglepubsubOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
func (o Servicev1LoggingGooglepubsubOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The Kafka topic to send logs to.
func (o Servicev1LoggingGooglepubsubOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.Topic }).(pulumi.StringOutput)
}

// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
func (o Servicev1LoggingGooglepubsubOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.User }).(pulumi.StringOutput)
}

type Servicev1LoggingGooglepubsubArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingGooglepubsubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingGooglepubsub)(nil)).Elem()
}

func (o Servicev1LoggingGooglepubsubArrayOutput) ToServicev1LoggingGooglepubsubArrayOutput() Servicev1LoggingGooglepubsubArrayOutput {
	return o
}

func (o Servicev1LoggingGooglepubsubArrayOutput) ToServicev1LoggingGooglepubsubArrayOutputWithContext(ctx context.Context) Servicev1LoggingGooglepubsubArrayOutput {
	return o
}

func (o Servicev1LoggingGooglepubsubArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingGooglepubsubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingGooglepubsub {
		return vs[0].([]Servicev1LoggingGooglepubsub)[vs[1].(int)]
	}).(Servicev1LoggingGooglepubsubOutput)
}

type Servicev1LoggingKafka struct {
	// A comma-separated list of IP addresses or hostnames of Kafka brokers.
	Brokers string `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: gzip, snappy, lz4.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: 1 (default) One server needs to respond. 0 No servers need to respond. -1	Wait for all in-sync replicas to respond.
	RequiredAcks *string `pulumi:"requiredAcks"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to.
	Topic string `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either true or false.
	UseTls *bool `pulumi:"useTls"`
}

// Servicev1LoggingKafkaInput is an input type that accepts Servicev1LoggingKafkaArgs and Servicev1LoggingKafkaOutput values.
// You can construct a concrete instance of `Servicev1LoggingKafkaInput` via:
//
//          Servicev1LoggingKafkaArgs{...}
type Servicev1LoggingKafkaInput interface {
	pulumi.Input

	ToServicev1LoggingKafkaOutput() Servicev1LoggingKafkaOutput
	ToServicev1LoggingKafkaOutputWithContext(context.Context) Servicev1LoggingKafkaOutput
}

type Servicev1LoggingKafkaArgs struct {
	// A comma-separated list of IP addresses or hostnames of Kafka brokers.
	Brokers pulumi.StringInput `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: gzip, snappy, lz4.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: 1 (default) One server needs to respond. 0 No servers need to respond. -1	Wait for all in-sync replicas to respond.
	RequiredAcks pulumi.StringPtrInput `pulumi:"requiredAcks"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to.
	Topic pulumi.StringInput `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either true or false.
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (Servicev1LoggingKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingKafka)(nil)).Elem()
}

func (i Servicev1LoggingKafkaArgs) ToServicev1LoggingKafkaOutput() Servicev1LoggingKafkaOutput {
	return i.ToServicev1LoggingKafkaOutputWithContext(context.Background())
}

func (i Servicev1LoggingKafkaArgs) ToServicev1LoggingKafkaOutputWithContext(ctx context.Context) Servicev1LoggingKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingKafkaOutput)
}

// Servicev1LoggingKafkaArrayInput is an input type that accepts Servicev1LoggingKafkaArray and Servicev1LoggingKafkaArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingKafkaArrayInput` via:
//
//          Servicev1LoggingKafkaArray{ Servicev1LoggingKafkaArgs{...} }
type Servicev1LoggingKafkaArrayInput interface {
	pulumi.Input

	ToServicev1LoggingKafkaArrayOutput() Servicev1LoggingKafkaArrayOutput
	ToServicev1LoggingKafkaArrayOutputWithContext(context.Context) Servicev1LoggingKafkaArrayOutput
}

type Servicev1LoggingKafkaArray []Servicev1LoggingKafkaInput

func (Servicev1LoggingKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingKafka)(nil)).Elem()
}

func (i Servicev1LoggingKafkaArray) ToServicev1LoggingKafkaArrayOutput() Servicev1LoggingKafkaArrayOutput {
	return i.ToServicev1LoggingKafkaArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingKafkaArray) ToServicev1LoggingKafkaArrayOutputWithContext(ctx context.Context) Servicev1LoggingKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingKafkaArrayOutput)
}

type Servicev1LoggingKafkaOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingKafka)(nil)).Elem()
}

func (o Servicev1LoggingKafkaOutput) ToServicev1LoggingKafkaOutput() Servicev1LoggingKafkaOutput {
	return o
}

func (o Servicev1LoggingKafkaOutput) ToServicev1LoggingKafkaOutputWithContext(ctx context.Context) Servicev1LoggingKafkaOutput {
	return o
}

// A comma-separated list of IP addresses or hostnames of Kafka brokers.
func (o Servicev1LoggingKafkaOutput) Brokers() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) string { return v.Brokers }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. One of: gzip, snappy, lz4.
func (o Servicev1LoggingKafkaOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingKafkaOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingKafkaOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingKafkaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingKafkaOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The Number of acknowledgements a leader must receive before a write is considered successful. One of: 1 (default) One server needs to respond. 0 No servers need to respond. -1	Wait for all in-sync replicas to respond.
func (o Servicev1LoggingKafkaOutput) RequiredAcks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.RequiredAcks }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingKafkaOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format.
func (o Servicev1LoggingKafkaOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format.
func (o Servicev1LoggingKafkaOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format.
func (o Servicev1LoggingKafkaOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
func (o Servicev1LoggingKafkaOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Kafka topic to send logs to.
func (o Servicev1LoggingKafkaOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) string { return v.Topic }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging. Can be either true or false.
func (o Servicev1LoggingKafkaOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type Servicev1LoggingKafkaArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingKafka)(nil)).Elem()
}

func (o Servicev1LoggingKafkaArrayOutput) ToServicev1LoggingKafkaArrayOutput() Servicev1LoggingKafkaArrayOutput {
	return o
}

func (o Servicev1LoggingKafkaArrayOutput) ToServicev1LoggingKafkaArrayOutputWithContext(ctx context.Context) Servicev1LoggingKafkaArrayOutput {
	return o
}

func (o Servicev1LoggingKafkaArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingKafka {
		return vs[0].([]Servicev1LoggingKafka)[vs[1].(int)]
	}).(Servicev1LoggingKafkaOutput)
}

type Servicev1LoggingLoggly struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token string `pulumi:"token"`
}

// Servicev1LoggingLogglyInput is an input type that accepts Servicev1LoggingLogglyArgs and Servicev1LoggingLogglyOutput values.
// You can construct a concrete instance of `Servicev1LoggingLogglyInput` via:
//
//          Servicev1LoggingLogglyArgs{...}
type Servicev1LoggingLogglyInput interface {
	pulumi.Input

	ToServicev1LoggingLogglyOutput() Servicev1LoggingLogglyOutput
	ToServicev1LoggingLogglyOutputWithContext(context.Context) Servicev1LoggingLogglyOutput
}

type Servicev1LoggingLogglyArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingLogglyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingLoggly)(nil)).Elem()
}

func (i Servicev1LoggingLogglyArgs) ToServicev1LoggingLogglyOutput() Servicev1LoggingLogglyOutput {
	return i.ToServicev1LoggingLogglyOutputWithContext(context.Background())
}

func (i Servicev1LoggingLogglyArgs) ToServicev1LoggingLogglyOutputWithContext(ctx context.Context) Servicev1LoggingLogglyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingLogglyOutput)
}

// Servicev1LoggingLogglyArrayInput is an input type that accepts Servicev1LoggingLogglyArray and Servicev1LoggingLogglyArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingLogglyArrayInput` via:
//
//          Servicev1LoggingLogglyArray{ Servicev1LoggingLogglyArgs{...} }
type Servicev1LoggingLogglyArrayInput interface {
	pulumi.Input

	ToServicev1LoggingLogglyArrayOutput() Servicev1LoggingLogglyArrayOutput
	ToServicev1LoggingLogglyArrayOutputWithContext(context.Context) Servicev1LoggingLogglyArrayOutput
}

type Servicev1LoggingLogglyArray []Servicev1LoggingLogglyInput

func (Servicev1LoggingLogglyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingLoggly)(nil)).Elem()
}

func (i Servicev1LoggingLogglyArray) ToServicev1LoggingLogglyArrayOutput() Servicev1LoggingLogglyArrayOutput {
	return i.ToServicev1LoggingLogglyArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingLogglyArray) ToServicev1LoggingLogglyArrayOutputWithContext(ctx context.Context) Servicev1LoggingLogglyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingLogglyArrayOutput)
}

type Servicev1LoggingLogglyOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingLogglyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingLoggly)(nil)).Elem()
}

func (o Servicev1LoggingLogglyOutput) ToServicev1LoggingLogglyOutput() Servicev1LoggingLogglyOutput {
	return o
}

func (o Servicev1LoggingLogglyOutput) ToServicev1LoggingLogglyOutputWithContext(ctx context.Context) Servicev1LoggingLogglyOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingLogglyOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingLogglyOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingLogglyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingLogglyOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingLogglyOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys).
func (o Servicev1LoggingLogglyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingLogglyArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingLogglyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingLoggly)(nil)).Elem()
}

func (o Servicev1LoggingLogglyArrayOutput) ToServicev1LoggingLogglyArrayOutput() Servicev1LoggingLogglyArrayOutput {
	return o
}

func (o Servicev1LoggingLogglyArrayOutput) ToServicev1LoggingLogglyArrayOutputWithContext(ctx context.Context) Servicev1LoggingLogglyArrayOutput {
	return o
}

func (o Servicev1LoggingLogglyArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingLogglyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingLoggly {
		return vs[0].([]Servicev1LoggingLoggly)[vs[1].(int)]
	}).(Servicev1LoggingLogglyOutput)
}

type Servicev1LoggingNewrelic struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token string `pulumi:"token"`
}

// Servicev1LoggingNewrelicInput is an input type that accepts Servicev1LoggingNewrelicArgs and Servicev1LoggingNewrelicOutput values.
// You can construct a concrete instance of `Servicev1LoggingNewrelicInput` via:
//
//          Servicev1LoggingNewrelicArgs{...}
type Servicev1LoggingNewrelicInput interface {
	pulumi.Input

	ToServicev1LoggingNewrelicOutput() Servicev1LoggingNewrelicOutput
	ToServicev1LoggingNewrelicOutputWithContext(context.Context) Servicev1LoggingNewrelicOutput
}

type Servicev1LoggingNewrelicArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingNewrelicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingNewrelic)(nil)).Elem()
}

func (i Servicev1LoggingNewrelicArgs) ToServicev1LoggingNewrelicOutput() Servicev1LoggingNewrelicOutput {
	return i.ToServicev1LoggingNewrelicOutputWithContext(context.Background())
}

func (i Servicev1LoggingNewrelicArgs) ToServicev1LoggingNewrelicOutputWithContext(ctx context.Context) Servicev1LoggingNewrelicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingNewrelicOutput)
}

// Servicev1LoggingNewrelicArrayInput is an input type that accepts Servicev1LoggingNewrelicArray and Servicev1LoggingNewrelicArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingNewrelicArrayInput` via:
//
//          Servicev1LoggingNewrelicArray{ Servicev1LoggingNewrelicArgs{...} }
type Servicev1LoggingNewrelicArrayInput interface {
	pulumi.Input

	ToServicev1LoggingNewrelicArrayOutput() Servicev1LoggingNewrelicArrayOutput
	ToServicev1LoggingNewrelicArrayOutputWithContext(context.Context) Servicev1LoggingNewrelicArrayOutput
}

type Servicev1LoggingNewrelicArray []Servicev1LoggingNewrelicInput

func (Servicev1LoggingNewrelicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingNewrelic)(nil)).Elem()
}

func (i Servicev1LoggingNewrelicArray) ToServicev1LoggingNewrelicArrayOutput() Servicev1LoggingNewrelicArrayOutput {
	return i.ToServicev1LoggingNewrelicArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingNewrelicArray) ToServicev1LoggingNewrelicArrayOutputWithContext(ctx context.Context) Servicev1LoggingNewrelicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingNewrelicArrayOutput)
}

type Servicev1LoggingNewrelicOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingNewrelicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingNewrelic)(nil)).Elem()
}

func (o Servicev1LoggingNewrelicOutput) ToServicev1LoggingNewrelicOutput() Servicev1LoggingNewrelicOutput {
	return o
}

func (o Servicev1LoggingNewrelicOutput) ToServicev1LoggingNewrelicOutputWithContext(ctx context.Context) Servicev1LoggingNewrelicOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingNewrelicOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingNewrelicOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingNewrelicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingNewrelicOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingNewrelicOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys).
func (o Servicev1LoggingNewrelicOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingNewrelicArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingNewrelicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingNewrelic)(nil)).Elem()
}

func (o Servicev1LoggingNewrelicArrayOutput) ToServicev1LoggingNewrelicArrayOutput() Servicev1LoggingNewrelicArrayOutput {
	return o
}

func (o Servicev1LoggingNewrelicArrayOutput) ToServicev1LoggingNewrelicArrayOutputWithContext(ctx context.Context) Servicev1LoggingNewrelicArrayOutput {
	return o
}

func (o Servicev1LoggingNewrelicArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingNewrelicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingNewrelic {
		return vs[0].([]Servicev1LoggingNewrelic)[vs[1].(int)]
	}).(Servicev1LoggingNewrelicOutput)
}

type Servicev1LoggingScalyr struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The region that log data will be sent to. One of US or EU. Defaults to US if undefined.
	Region *string `pulumi:"region"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token string `pulumi:"token"`
}

// Servicev1LoggingScalyrInput is an input type that accepts Servicev1LoggingScalyrArgs and Servicev1LoggingScalyrOutput values.
// You can construct a concrete instance of `Servicev1LoggingScalyrInput` via:
//
//          Servicev1LoggingScalyrArgs{...}
type Servicev1LoggingScalyrInput interface {
	pulumi.Input

	ToServicev1LoggingScalyrOutput() Servicev1LoggingScalyrOutput
	ToServicev1LoggingScalyrOutputWithContext(context.Context) Servicev1LoggingScalyrOutput
}

type Servicev1LoggingScalyrArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The region that log data will be sent to. One of US or EU. Defaults to US if undefined.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingScalyrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingScalyr)(nil)).Elem()
}

func (i Servicev1LoggingScalyrArgs) ToServicev1LoggingScalyrOutput() Servicev1LoggingScalyrOutput {
	return i.ToServicev1LoggingScalyrOutputWithContext(context.Background())
}

func (i Servicev1LoggingScalyrArgs) ToServicev1LoggingScalyrOutputWithContext(ctx context.Context) Servicev1LoggingScalyrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingScalyrOutput)
}

// Servicev1LoggingScalyrArrayInput is an input type that accepts Servicev1LoggingScalyrArray and Servicev1LoggingScalyrArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingScalyrArrayInput` via:
//
//          Servicev1LoggingScalyrArray{ Servicev1LoggingScalyrArgs{...} }
type Servicev1LoggingScalyrArrayInput interface {
	pulumi.Input

	ToServicev1LoggingScalyrArrayOutput() Servicev1LoggingScalyrArrayOutput
	ToServicev1LoggingScalyrArrayOutputWithContext(context.Context) Servicev1LoggingScalyrArrayOutput
}

type Servicev1LoggingScalyrArray []Servicev1LoggingScalyrInput

func (Servicev1LoggingScalyrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingScalyr)(nil)).Elem()
}

func (i Servicev1LoggingScalyrArray) ToServicev1LoggingScalyrArrayOutput() Servicev1LoggingScalyrArrayOutput {
	return i.ToServicev1LoggingScalyrArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingScalyrArray) ToServicev1LoggingScalyrArrayOutputWithContext(ctx context.Context) Servicev1LoggingScalyrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingScalyrArrayOutput)
}

type Servicev1LoggingScalyrOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingScalyrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingScalyr)(nil)).Elem()
}

func (o Servicev1LoggingScalyrOutput) ToServicev1LoggingScalyrOutput() Servicev1LoggingScalyrOutput {
	return o
}

func (o Servicev1LoggingScalyrOutput) ToServicev1LoggingScalyrOutputWithContext(ctx context.Context) Servicev1LoggingScalyrOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingScalyrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingScalyrOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingScalyrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingScalyrOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The region that log data will be sent to. One of US or EU. Defaults to US if undefined.
func (o Servicev1LoggingScalyrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingScalyrOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys).
func (o Servicev1LoggingScalyrOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingScalyrArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingScalyrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingScalyr)(nil)).Elem()
}

func (o Servicev1LoggingScalyrArrayOutput) ToServicev1LoggingScalyrArrayOutput() Servicev1LoggingScalyrArrayOutput {
	return o
}

func (o Servicev1LoggingScalyrArrayOutput) ToServicev1LoggingScalyrArrayOutputWithContext(ctx context.Context) Servicev1LoggingScalyrArrayOutput {
	return o
}

func (o Servicev1LoggingScalyrArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingScalyrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingScalyr {
		return vs[0].([]Servicev1LoggingScalyr)[vs[1].(int)]
	}).(Servicev1LoggingScalyrOutput)
}

type Servicev1LoggingSftp struct {
	// The SFTP address to stream logs to.
	Address string `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
	Password *string `pulumi:"password"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period *int `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port *int `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `pulumi:"publicKey"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
	SecretKey *string `pulumi:"secretKey"`
	// A list of host keys for all hosts we can connect to over SFTP.
	SshKnownHosts string `pulumi:"sshKnownHosts"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
	User string `pulumi:"user"`
}

// Servicev1LoggingSftpInput is an input type that accepts Servicev1LoggingSftpArgs and Servicev1LoggingSftpOutput values.
// You can construct a concrete instance of `Servicev1LoggingSftpInput` via:
//
//          Servicev1LoggingSftpArgs{...}
type Servicev1LoggingSftpInput interface {
	pulumi.Input

	ToServicev1LoggingSftpOutput() Servicev1LoggingSftpOutput
	ToServicev1LoggingSftpOutputWithContext(context.Context) Servicev1LoggingSftpOutput
}

type Servicev1LoggingSftpArgs struct {
	// The SFTP address to stream logs to.
	Address pulumi.StringInput `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// A list of host keys for all hosts we can connect to over SFTP.
	SshKnownHosts pulumi.StringInput `pulumi:"sshKnownHosts"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
	User pulumi.StringInput `pulumi:"user"`
}

func (Servicev1LoggingSftpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingSftp)(nil)).Elem()
}

func (i Servicev1LoggingSftpArgs) ToServicev1LoggingSftpOutput() Servicev1LoggingSftpOutput {
	return i.ToServicev1LoggingSftpOutputWithContext(context.Background())
}

func (i Servicev1LoggingSftpArgs) ToServicev1LoggingSftpOutputWithContext(ctx context.Context) Servicev1LoggingSftpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingSftpOutput)
}

// Servicev1LoggingSftpArrayInput is an input type that accepts Servicev1LoggingSftpArray and Servicev1LoggingSftpArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingSftpArrayInput` via:
//
//          Servicev1LoggingSftpArray{ Servicev1LoggingSftpArgs{...} }
type Servicev1LoggingSftpArrayInput interface {
	pulumi.Input

	ToServicev1LoggingSftpArrayOutput() Servicev1LoggingSftpArrayOutput
	ToServicev1LoggingSftpArrayOutputWithContext(context.Context) Servicev1LoggingSftpArrayOutput
}

type Servicev1LoggingSftpArray []Servicev1LoggingSftpInput

func (Servicev1LoggingSftpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingSftp)(nil)).Elem()
}

func (i Servicev1LoggingSftpArray) ToServicev1LoggingSftpArrayOutput() Servicev1LoggingSftpArrayOutput {
	return i.ToServicev1LoggingSftpArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingSftpArray) ToServicev1LoggingSftpArrayOutputWithContext(ctx context.Context) Servicev1LoggingSftpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingSftpArrayOutput)
}

type Servicev1LoggingSftpOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingSftpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingSftp)(nil)).Elem()
}

func (o Servicev1LoggingSftpOutput) ToServicev1LoggingSftpOutput() Servicev1LoggingSftpOutput {
	return o
}

func (o Servicev1LoggingSftpOutput) ToServicev1LoggingSftpOutputWithContext(ctx context.Context) Servicev1LoggingSftpOutput {
	return o
}

// The SFTP address to stream logs to.
func (o Servicev1LoggingSftpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.Address }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingSftpOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1LoggingSftpOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// What level of GZIP encoding to have when dumping logs (default 0, no compression).
func (o Servicev1LoggingSftpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
func (o Servicev1LoggingSftpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1LoggingSftpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred.
func (o Servicev1LoggingSftpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The path to upload log files to. If the path ends in / then it is treated as a directory.
func (o Servicev1LoggingSftpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
func (o Servicev1LoggingSftpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingSftpOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`).
func (o Servicev1LoggingSftpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
func (o Servicev1LoggingSftpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1LoggingSftpOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform account secret key. The privateKey field in your service account authentication JSON.
func (o Servicev1LoggingSftpOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// A list of host keys for all hosts we can connect to over SFTP.
func (o Servicev1LoggingSftpOutput) SshKnownHosts() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.SshKnownHosts }).(pulumi.StringOutput)
}

// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
func (o Servicev1LoggingSftpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform service account email address. The clientEmail field in your service account authentication JSON.
func (o Servicev1LoggingSftpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.User }).(pulumi.StringOutput)
}

type Servicev1LoggingSftpArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingSftpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingSftp)(nil)).Elem()
}

func (o Servicev1LoggingSftpArrayOutput) ToServicev1LoggingSftpArrayOutput() Servicev1LoggingSftpArrayOutput {
	return o
}

func (o Servicev1LoggingSftpArrayOutput) ToServicev1LoggingSftpArrayOutputWithContext(ctx context.Context) Servicev1LoggingSftpArrayOutput {
	return o
}

func (o Servicev1LoggingSftpArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingSftpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingSftp {
		return vs[0].([]Servicev1LoggingSftp)[vs[1].(int)]
	}).(Servicev1LoggingSftpOutput)
}

type Servicev1Papertrail struct {
	// The SFTP address to stream logs to.
	Address string `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port int `pulumi:"port"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
}

// Servicev1PapertrailInput is an input type that accepts Servicev1PapertrailArgs and Servicev1PapertrailOutput values.
// You can construct a concrete instance of `Servicev1PapertrailInput` via:
//
//          Servicev1PapertrailArgs{...}
type Servicev1PapertrailInput interface {
	pulumi.Input

	ToServicev1PapertrailOutput() Servicev1PapertrailOutput
	ToServicev1PapertrailOutputWithContext(context.Context) Servicev1PapertrailOutput
}

type Servicev1PapertrailArgs struct {
	// The SFTP address to stream logs to.
	Address pulumi.StringInput `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port pulumi.IntInput `pulumi:"port"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
}

func (Servicev1PapertrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Papertrail)(nil)).Elem()
}

func (i Servicev1PapertrailArgs) ToServicev1PapertrailOutput() Servicev1PapertrailOutput {
	return i.ToServicev1PapertrailOutputWithContext(context.Background())
}

func (i Servicev1PapertrailArgs) ToServicev1PapertrailOutputWithContext(ctx context.Context) Servicev1PapertrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PapertrailOutput)
}

// Servicev1PapertrailArrayInput is an input type that accepts Servicev1PapertrailArray and Servicev1PapertrailArrayOutput values.
// You can construct a concrete instance of `Servicev1PapertrailArrayInput` via:
//
//          Servicev1PapertrailArray{ Servicev1PapertrailArgs{...} }
type Servicev1PapertrailArrayInput interface {
	pulumi.Input

	ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput
	ToServicev1PapertrailArrayOutputWithContext(context.Context) Servicev1PapertrailArrayOutput
}

type Servicev1PapertrailArray []Servicev1PapertrailInput

func (Servicev1PapertrailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Papertrail)(nil)).Elem()
}

func (i Servicev1PapertrailArray) ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput {
	return i.ToServicev1PapertrailArrayOutputWithContext(context.Background())
}

func (i Servicev1PapertrailArray) ToServicev1PapertrailArrayOutputWithContext(ctx context.Context) Servicev1PapertrailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PapertrailArrayOutput)
}

type Servicev1PapertrailOutput struct{ *pulumi.OutputState }

func (Servicev1PapertrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Papertrail)(nil)).Elem()
}

func (o Servicev1PapertrailOutput) ToServicev1PapertrailOutput() Servicev1PapertrailOutput {
	return o
}

func (o Servicev1PapertrailOutput) ToServicev1PapertrailOutputWithContext(ctx context.Context) Servicev1PapertrailOutput {
	return o
}

// The SFTP address to stream logs to.
func (o Servicev1PapertrailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Papertrail) string { return v.Address }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1PapertrailOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Papertrail) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1PapertrailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Papertrail) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1PapertrailOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Papertrail) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`).
func (o Servicev1PapertrailOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Servicev1Papertrail) int { return v.Port }).(pulumi.IntOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1PapertrailOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Papertrail) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

type Servicev1PapertrailArrayOutput struct{ *pulumi.OutputState }

func (Servicev1PapertrailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Papertrail)(nil)).Elem()
}

func (o Servicev1PapertrailArrayOutput) ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput {
	return o
}

func (o Servicev1PapertrailArrayOutput) ToServicev1PapertrailArrayOutputWithContext(ctx context.Context) Servicev1PapertrailArrayOutput {
	return o
}

func (o Servicev1PapertrailArrayOutput) Index(i pulumi.IntInput) Servicev1PapertrailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Papertrail {
		return vs[0].([]Servicev1Papertrail)[vs[1].(int)]
	}).(Servicev1PapertrailOutput)
}

type Servicev1RequestSetting struct {
	// Allows you to terminate request handling and immediately
	// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
	Action *string `pulumi:"action"`
	// Disable collapsed forwarding, so you don't wait
	// for other objects to origin.
	BypassBusyWait *bool `pulumi:"bypassBusyWait"`
	// Sets the host header.
	DefaultHost *string `pulumi:"defaultHost"`
	// Force a cache miss for the request. If specified,
	// can be `true` or `false`.
	ForceMiss *bool `pulumi:"forceMiss"`
	// Forces the request to use SSL (Redirects a non-SSL request to SSL).
	ForceSsl *bool `pulumi:"forceSsl"`
	// Injects Fastly-Geo-Country, Fastly-Geo-City, and
	// Fastly-Geo-Region into the request headers.
	GeoHeaders *bool `pulumi:"geoHeaders"`
	// Comma separated list of varnish request object fields
	// that should be in the hash key.
	HashKeys *string `pulumi:"hashKeys"`
	// How old an object is allowed to be to serve
	// `stale-if-error` or `stale-while-revalidate`, in seconds.
	MaxStaleAge *int `pulumi:"maxStaleAge"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
	RequestCondition *string `pulumi:"requestCondition"`
	// Injects the X-Timer info into the request for
	// viewing origin fetch durations.
	TimerSupport *bool `pulumi:"timerSupport"`
	// X-Forwarded-For, should be `clear`, `leave`, `append`,
	// `appendAll`, or `overwrite`. Default `append`.
	Xff *string `pulumi:"xff"`
}

// Servicev1RequestSettingInput is an input type that accepts Servicev1RequestSettingArgs and Servicev1RequestSettingOutput values.
// You can construct a concrete instance of `Servicev1RequestSettingInput` via:
//
//          Servicev1RequestSettingArgs{...}
type Servicev1RequestSettingInput interface {
	pulumi.Input

	ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput
	ToServicev1RequestSettingOutputWithContext(context.Context) Servicev1RequestSettingOutput
}

type Servicev1RequestSettingArgs struct {
	// Allows you to terminate request handling and immediately
	// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Disable collapsed forwarding, so you don't wait
	// for other objects to origin.
	BypassBusyWait pulumi.BoolPtrInput `pulumi:"bypassBusyWait"`
	// Sets the host header.
	DefaultHost pulumi.StringPtrInput `pulumi:"defaultHost"`
	// Force a cache miss for the request. If specified,
	// can be `true` or `false`.
	ForceMiss pulumi.BoolPtrInput `pulumi:"forceMiss"`
	// Forces the request to use SSL (Redirects a non-SSL request to SSL).
	ForceSsl pulumi.BoolPtrInput `pulumi:"forceSsl"`
	// Injects Fastly-Geo-Country, Fastly-Geo-City, and
	// Fastly-Geo-Region into the request headers.
	GeoHeaders pulumi.BoolPtrInput `pulumi:"geoHeaders"`
	// Comma separated list of varnish request object fields
	// that should be in the hash key.
	HashKeys pulumi.StringPtrInput `pulumi:"hashKeys"`
	// How old an object is allowed to be to serve
	// `stale-if-error` or `stale-while-revalidate`, in seconds.
	MaxStaleAge pulumi.IntPtrInput `pulumi:"maxStaleAge"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// Injects the X-Timer info into the request for
	// viewing origin fetch durations.
	TimerSupport pulumi.BoolPtrInput `pulumi:"timerSupport"`
	// X-Forwarded-For, should be `clear`, `leave`, `append`,
	// `appendAll`, or `overwrite`. Default `append`.
	Xff pulumi.StringPtrInput `pulumi:"xff"`
}

func (Servicev1RequestSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1RequestSetting)(nil)).Elem()
}

func (i Servicev1RequestSettingArgs) ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput {
	return i.ToServicev1RequestSettingOutputWithContext(context.Background())
}

func (i Servicev1RequestSettingArgs) ToServicev1RequestSettingOutputWithContext(ctx context.Context) Servicev1RequestSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1RequestSettingOutput)
}

// Servicev1RequestSettingArrayInput is an input type that accepts Servicev1RequestSettingArray and Servicev1RequestSettingArrayOutput values.
// You can construct a concrete instance of `Servicev1RequestSettingArrayInput` via:
//
//          Servicev1RequestSettingArray{ Servicev1RequestSettingArgs{...} }
type Servicev1RequestSettingArrayInput interface {
	pulumi.Input

	ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput
	ToServicev1RequestSettingArrayOutputWithContext(context.Context) Servicev1RequestSettingArrayOutput
}

type Servicev1RequestSettingArray []Servicev1RequestSettingInput

func (Servicev1RequestSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1RequestSetting)(nil)).Elem()
}

func (i Servicev1RequestSettingArray) ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput {
	return i.ToServicev1RequestSettingArrayOutputWithContext(context.Background())
}

func (i Servicev1RequestSettingArray) ToServicev1RequestSettingArrayOutputWithContext(ctx context.Context) Servicev1RequestSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1RequestSettingArrayOutput)
}

type Servicev1RequestSettingOutput struct{ *pulumi.OutputState }

func (Servicev1RequestSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1RequestSetting)(nil)).Elem()
}

func (o Servicev1RequestSettingOutput) ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput {
	return o
}

func (o Servicev1RequestSettingOutput) ToServicev1RequestSettingOutputWithContext(ctx context.Context) Servicev1RequestSettingOutput {
	return o
}

// Allows you to terminate request handling and immediately
// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
func (o Servicev1RequestSettingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Disable collapsed forwarding, so you don't wait
// for other objects to origin.
func (o Servicev1RequestSettingOutput) BypassBusyWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.BypassBusyWait }).(pulumi.BoolPtrOutput)
}

// Sets the host header.
func (o Servicev1RequestSettingOutput) DefaultHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.DefaultHost }).(pulumi.StringPtrOutput)
}

// Force a cache miss for the request. If specified,
// can be `true` or `false`.
func (o Servicev1RequestSettingOutput) ForceMiss() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.ForceMiss }).(pulumi.BoolPtrOutput)
}

// Forces the request to use SSL (Redirects a non-SSL request to SSL).
func (o Servicev1RequestSettingOutput) ForceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.ForceSsl }).(pulumi.BoolPtrOutput)
}

// Injects Fastly-Geo-Country, Fastly-Geo-City, and
// Fastly-Geo-Region into the request headers.
func (o Servicev1RequestSettingOutput) GeoHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.GeoHeaders }).(pulumi.BoolPtrOutput)
}

// Comma separated list of varnish request object fields
// that should be in the hash key.
func (o Servicev1RequestSettingOutput) HashKeys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.HashKeys }).(pulumi.StringPtrOutput)
}

// How old an object is allowed to be to serve
// `stale-if-error` or `stale-while-revalidate`, in seconds.
func (o Servicev1RequestSettingOutput) MaxStaleAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *int { return v.MaxStaleAge }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1RequestSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) string { return v.Name }).(pulumi.StringOutput)
}

// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
func (o Servicev1RequestSettingOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// Injects the X-Timer info into the request for
// viewing origin fetch durations.
func (o Servicev1RequestSettingOutput) TimerSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.TimerSupport }).(pulumi.BoolPtrOutput)
}

// X-Forwarded-For, should be `clear`, `leave`, `append`,
// `appendAll`, or `overwrite`. Default `append`.
func (o Servicev1RequestSettingOutput) Xff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.Xff }).(pulumi.StringPtrOutput)
}

type Servicev1RequestSettingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1RequestSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1RequestSetting)(nil)).Elem()
}

func (o Servicev1RequestSettingArrayOutput) ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput {
	return o
}

func (o Servicev1RequestSettingArrayOutput) ToServicev1RequestSettingArrayOutputWithContext(ctx context.Context) Servicev1RequestSettingArrayOutput {
	return o
}

func (o Servicev1RequestSettingArrayOutput) Index(i pulumi.IntInput) Servicev1RequestSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1RequestSetting {
		return vs[0].([]Servicev1RequestSetting)[vs[1].(int)]
	}).(Servicev1RequestSettingOutput)
}

type Servicev1ResponseObject struct {
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
	// see [Fastly's Documentation on Conditionals][fastly-conditionals].
	CacheCondition *string `pulumi:"cacheCondition"`
	// The custom VCL code to upload.
	Content *string `pulumi:"content"`
	// The MIME type of the content.
	ContentType *string `pulumi:"contentType"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
	RequestCondition *string `pulumi:"requestCondition"`
	// The HTTP Response. Default `Ok`.
	Response *string `pulumi:"response"`
	// The HTTP Status Code. Default `200`.
	Status *int `pulumi:"status"`
}

// Servicev1ResponseObjectInput is an input type that accepts Servicev1ResponseObjectArgs and Servicev1ResponseObjectOutput values.
// You can construct a concrete instance of `Servicev1ResponseObjectInput` via:
//
//          Servicev1ResponseObjectArgs{...}
type Servicev1ResponseObjectInput interface {
	pulumi.Input

	ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput
	ToServicev1ResponseObjectOutputWithContext(context.Context) Servicev1ResponseObjectOutput
}

type Servicev1ResponseObjectArgs struct {
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
	// see [Fastly's Documentation on Conditionals][fastly-conditionals].
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The custom VCL code to upload.
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The MIME type of the content.
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// The HTTP Response. Default `Ok`.
	Response pulumi.StringPtrInput `pulumi:"response"`
	// The HTTP Status Code. Default `200`.
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (Servicev1ResponseObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1ResponseObject)(nil)).Elem()
}

func (i Servicev1ResponseObjectArgs) ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput {
	return i.ToServicev1ResponseObjectOutputWithContext(context.Background())
}

func (i Servicev1ResponseObjectArgs) ToServicev1ResponseObjectOutputWithContext(ctx context.Context) Servicev1ResponseObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ResponseObjectOutput)
}

// Servicev1ResponseObjectArrayInput is an input type that accepts Servicev1ResponseObjectArray and Servicev1ResponseObjectArrayOutput values.
// You can construct a concrete instance of `Servicev1ResponseObjectArrayInput` via:
//
//          Servicev1ResponseObjectArray{ Servicev1ResponseObjectArgs{...} }
type Servicev1ResponseObjectArrayInput interface {
	pulumi.Input

	ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput
	ToServicev1ResponseObjectArrayOutputWithContext(context.Context) Servicev1ResponseObjectArrayOutput
}

type Servicev1ResponseObjectArray []Servicev1ResponseObjectInput

func (Servicev1ResponseObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1ResponseObject)(nil)).Elem()
}

func (i Servicev1ResponseObjectArray) ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput {
	return i.ToServicev1ResponseObjectArrayOutputWithContext(context.Background())
}

func (i Servicev1ResponseObjectArray) ToServicev1ResponseObjectArrayOutputWithContext(ctx context.Context) Servicev1ResponseObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ResponseObjectArrayOutput)
}

type Servicev1ResponseObjectOutput struct{ *pulumi.OutputState }

func (Servicev1ResponseObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1ResponseObject)(nil)).Elem()
}

func (o Servicev1ResponseObjectOutput) ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput {
	return o
}

func (o Servicev1ResponseObjectOutput) ToServicev1ResponseObjectOutputWithContext(ctx context.Context) Servicev1ResponseObjectOutput {
	return o
}

// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
// see [Fastly's Documentation on Conditionals][fastly-conditionals].
func (o Servicev1ResponseObjectOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The custom VCL code to upload.
func (o Servicev1ResponseObjectOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The MIME type of the content.
func (o Servicev1ResponseObjectOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1ResponseObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) string { return v.Name }).(pulumi.StringOutput)
}

// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
func (o Servicev1ResponseObjectOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// The HTTP Response. Default `Ok`.
func (o Servicev1ResponseObjectOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.Response }).(pulumi.StringPtrOutput)
}

// The HTTP Status Code. Default `200`.
func (o Servicev1ResponseObjectOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type Servicev1ResponseObjectArrayOutput struct{ *pulumi.OutputState }

func (Servicev1ResponseObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1ResponseObject)(nil)).Elem()
}

func (o Servicev1ResponseObjectArrayOutput) ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput {
	return o
}

func (o Servicev1ResponseObjectArrayOutput) ToServicev1ResponseObjectArrayOutputWithContext(ctx context.Context) Servicev1ResponseObjectArrayOutput {
	return o
}

func (o Servicev1ResponseObjectArrayOutput) Index(i pulumi.IntInput) Servicev1ResponseObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1ResponseObject {
		return vs[0].([]Servicev1ResponseObject)[vs[1].(int)]
	}).(Servicev1ResponseObjectOutput)
}

type Servicev1S3logging struct {
	// The name of the bucket in which to store the logs.
	BucketName string `pulumi:"bucketName"`
	// If you created the S3 bucket outside of `us-east-1`,
	// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
	Domain *string `pulumi:"domain"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period *int `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey *string `pulumi:"publicKey"`
	// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`.
	Redundancy *string `pulumi:"redundancy"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// AWS Access Key of an account with the required
	// permissions to post logs. It is **strongly** recommended you create a separate
	// IAM user with permissions to only operate on this Bucket. This key will be
	// not be encrypted. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`.
	S3AccessKey *string `pulumi:"s3AccessKey"`
	// AWS Secret Key of an account with the required
	// permissions to post logs. It is **strongly** recommended you create a separate
	// IAM user with permissions to only operate on this Bucket. This secret will be
	// not be encrypted. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`.
	S3SecretKey                  *string `pulumi:"s3SecretKey"`
	ServerSideEncryption         *string `pulumi:"serverSideEncryption"`
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// Servicev1S3loggingInput is an input type that accepts Servicev1S3loggingArgs and Servicev1S3loggingOutput values.
// You can construct a concrete instance of `Servicev1S3loggingInput` via:
//
//          Servicev1S3loggingArgs{...}
type Servicev1S3loggingInput interface {
	pulumi.Input

	ToServicev1S3loggingOutput() Servicev1S3loggingOutput
	ToServicev1S3loggingOutputWithContext(context.Context) Servicev1S3loggingOutput
}

type Servicev1S3loggingArgs struct {
	// The name of the bucket in which to store the logs.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// If you created the S3 bucket outside of `us-east-1`,
	// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default 0, no compression).
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload log files to. If the path ends in / then it is treated as a directory.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`.
	Redundancy pulumi.StringPtrInput `pulumi:"redundancy"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// AWS Access Key of an account with the required
	// permissions to post logs. It is **strongly** recommended you create a separate
	// IAM user with permissions to only operate on this Bucket. This key will be
	// not be encrypted. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`.
	S3AccessKey pulumi.StringPtrInput `pulumi:"s3AccessKey"`
	// AWS Secret Key of an account with the required
	// permissions to post logs. It is **strongly** recommended you create a separate
	// IAM user with permissions to only operate on this Bucket. This secret will be
	// not be encrypted. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`.
	S3SecretKey                  pulumi.StringPtrInput `pulumi:"s3SecretKey"`
	ServerSideEncryption         pulumi.StringPtrInput `pulumi:"serverSideEncryption"`
	ServerSideEncryptionKmsKeyId pulumi.StringPtrInput `pulumi:"serverSideEncryptionKmsKeyId"`
	// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1S3loggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1S3logging)(nil)).Elem()
}

func (i Servicev1S3loggingArgs) ToServicev1S3loggingOutput() Servicev1S3loggingOutput {
	return i.ToServicev1S3loggingOutputWithContext(context.Background())
}

func (i Servicev1S3loggingArgs) ToServicev1S3loggingOutputWithContext(ctx context.Context) Servicev1S3loggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1S3loggingOutput)
}

// Servicev1S3loggingArrayInput is an input type that accepts Servicev1S3loggingArray and Servicev1S3loggingArrayOutput values.
// You can construct a concrete instance of `Servicev1S3loggingArrayInput` via:
//
//          Servicev1S3loggingArray{ Servicev1S3loggingArgs{...} }
type Servicev1S3loggingArrayInput interface {
	pulumi.Input

	ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput
	ToServicev1S3loggingArrayOutputWithContext(context.Context) Servicev1S3loggingArrayOutput
}

type Servicev1S3loggingArray []Servicev1S3loggingInput

func (Servicev1S3loggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1S3logging)(nil)).Elem()
}

func (i Servicev1S3loggingArray) ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput {
	return i.ToServicev1S3loggingArrayOutputWithContext(context.Background())
}

func (i Servicev1S3loggingArray) ToServicev1S3loggingArrayOutputWithContext(ctx context.Context) Servicev1S3loggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1S3loggingArrayOutput)
}

type Servicev1S3loggingOutput struct{ *pulumi.OutputState }

func (Servicev1S3loggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1S3logging)(nil)).Elem()
}

func (o Servicev1S3loggingOutput) ToServicev1S3loggingOutput() Servicev1S3loggingOutput {
	return o
}

func (o Servicev1S3loggingOutput) ToServicev1S3loggingOutputWithContext(ctx context.Context) Servicev1S3loggingOutput {
	return o
}

// The name of the bucket in which to store the logs.
func (o Servicev1S3loggingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1S3logging) string { return v.BucketName }).(pulumi.StringOutput)
}

// If you created the S3 bucket outside of `us-east-1`,
// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
func (o Servicev1S3loggingOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1S3loggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1S3loggingOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// What level of GZIP encoding to have when dumping logs (default 0, no compression).
func (o Servicev1S3loggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
func (o Servicev1S3loggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1S3loggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1S3logging) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in / then it is treated as a directory.
func (o Servicev1S3loggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
func (o Servicev1S3loggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1S3loggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
func (o Servicev1S3loggingOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`.
func (o Servicev1S3loggingOutput) Redundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Redundancy }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1S3loggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// AWS Access Key of an account with the required
// permissions to post logs. It is **strongly** recommended you create a separate
// IAM user with permissions to only operate on this Bucket. This key will be
// not be encrypted. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`.
func (o Servicev1S3loggingOutput) S3AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.S3AccessKey }).(pulumi.StringPtrOutput)
}

// AWS Secret Key of an account with the required
// permissions to post logs. It is **strongly** recommended you create a separate
// IAM user with permissions to only operate on this Bucket. This secret will be
// not be encrypted. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`.
func (o Servicev1S3loggingOutput) S3SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.S3SecretKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) ServerSideEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.ServerSideEncryption }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) ServerSideEncryptionKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.ServerSideEncryptionKmsKeyId }).(pulumi.StringPtrOutput)
}

// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
func (o Servicev1S3loggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1S3loggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1S3loggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1S3logging)(nil)).Elem()
}

func (o Servicev1S3loggingArrayOutput) ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput {
	return o
}

func (o Servicev1S3loggingArrayOutput) ToServicev1S3loggingArrayOutputWithContext(ctx context.Context) Servicev1S3loggingArrayOutput {
	return o
}

func (o Servicev1S3loggingArrayOutput) Index(i pulumi.IntInput) Servicev1S3loggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1S3logging {
		return vs[0].([]Servicev1S3logging)[vs[1].(int)]
	}).(Servicev1S3loggingOutput)
}

type Servicev1Snippet struct {
	// The custom VCL code to upload.
	Content string `pulumi:"content"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
	Priority *int `pulumi:"priority"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type string `pulumi:"type"`
}

// Servicev1SnippetInput is an input type that accepts Servicev1SnippetArgs and Servicev1SnippetOutput values.
// You can construct a concrete instance of `Servicev1SnippetInput` via:
//
//          Servicev1SnippetArgs{...}
type Servicev1SnippetInput interface {
	pulumi.Input

	ToServicev1SnippetOutput() Servicev1SnippetOutput
	ToServicev1SnippetOutputWithContext(context.Context) Servicev1SnippetOutput
}

type Servicev1SnippetArgs struct {
	// The custom VCL code to upload.
	Content pulumi.StringInput `pulumi:"content"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1SnippetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Snippet)(nil)).Elem()
}

func (i Servicev1SnippetArgs) ToServicev1SnippetOutput() Servicev1SnippetOutput {
	return i.ToServicev1SnippetOutputWithContext(context.Background())
}

func (i Servicev1SnippetArgs) ToServicev1SnippetOutputWithContext(ctx context.Context) Servicev1SnippetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SnippetOutput)
}

// Servicev1SnippetArrayInput is an input type that accepts Servicev1SnippetArray and Servicev1SnippetArrayOutput values.
// You can construct a concrete instance of `Servicev1SnippetArrayInput` via:
//
//          Servicev1SnippetArray{ Servicev1SnippetArgs{...} }
type Servicev1SnippetArrayInput interface {
	pulumi.Input

	ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput
	ToServicev1SnippetArrayOutputWithContext(context.Context) Servicev1SnippetArrayOutput
}

type Servicev1SnippetArray []Servicev1SnippetInput

func (Servicev1SnippetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Snippet)(nil)).Elem()
}

func (i Servicev1SnippetArray) ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput {
	return i.ToServicev1SnippetArrayOutputWithContext(context.Background())
}

func (i Servicev1SnippetArray) ToServicev1SnippetArrayOutputWithContext(ctx context.Context) Servicev1SnippetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SnippetArrayOutput)
}

type Servicev1SnippetOutput struct{ *pulumi.OutputState }

func (Servicev1SnippetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Snippet)(nil)).Elem()
}

func (o Servicev1SnippetOutput) ToServicev1SnippetOutput() Servicev1SnippetOutput {
	return o
}

func (o Servicev1SnippetOutput) ToServicev1SnippetOutputWithContext(ctx context.Context) Servicev1SnippetOutput {
	return o
}

// The custom VCL code to upload.
func (o Servicev1SnippetOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Snippet) string { return v.Content }).(pulumi.StringOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1SnippetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Snippet) string { return v.Name }).(pulumi.StringOutput)
}

// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
func (o Servicev1SnippetOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Snippet) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
func (o Servicev1SnippetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Snippet) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1SnippetArrayOutput struct{ *pulumi.OutputState }

func (Servicev1SnippetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Snippet)(nil)).Elem()
}

func (o Servicev1SnippetArrayOutput) ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput {
	return o
}

func (o Servicev1SnippetArrayOutput) ToServicev1SnippetArrayOutputWithContext(ctx context.Context) Servicev1SnippetArrayOutput {
	return o
}

func (o Servicev1SnippetArrayOutput) Index(i pulumi.IntInput) Servicev1SnippetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Snippet {
		return vs[0].([]Servicev1Snippet)[vs[1].(int)]
	}).(Servicev1SnippetOutput)
}

type Servicev1Splunk struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname *string `pulumi:"tlsHostname"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token string `pulumi:"token"`
	// The Elasticsearch URL to stream logs to.
	Url string `pulumi:"url"`
}

// Servicev1SplunkInput is an input type that accepts Servicev1SplunkArgs and Servicev1SplunkOutput values.
// You can construct a concrete instance of `Servicev1SplunkInput` via:
//
//          Servicev1SplunkArgs{...}
type Servicev1SplunkInput interface {
	pulumi.Input

	ToServicev1SplunkOutput() Servicev1SplunkOutput
	ToServicev1SplunkOutputWithContext(context.Context) Servicev1SplunkOutput
}

type Servicev1SplunkArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token pulumi.StringInput `pulumi:"token"`
	// The Elasticsearch URL to stream logs to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1SplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Splunk)(nil)).Elem()
}

func (i Servicev1SplunkArgs) ToServicev1SplunkOutput() Servicev1SplunkOutput {
	return i.ToServicev1SplunkOutputWithContext(context.Background())
}

func (i Servicev1SplunkArgs) ToServicev1SplunkOutputWithContext(ctx context.Context) Servicev1SplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SplunkOutput)
}

// Servicev1SplunkArrayInput is an input type that accepts Servicev1SplunkArray and Servicev1SplunkArrayOutput values.
// You can construct a concrete instance of `Servicev1SplunkArrayInput` via:
//
//          Servicev1SplunkArray{ Servicev1SplunkArgs{...} }
type Servicev1SplunkArrayInput interface {
	pulumi.Input

	ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput
	ToServicev1SplunkArrayOutputWithContext(context.Context) Servicev1SplunkArrayOutput
}

type Servicev1SplunkArray []Servicev1SplunkInput

func (Servicev1SplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Splunk)(nil)).Elem()
}

func (i Servicev1SplunkArray) ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput {
	return i.ToServicev1SplunkArrayOutputWithContext(context.Background())
}

func (i Servicev1SplunkArray) ToServicev1SplunkArrayOutputWithContext(ctx context.Context) Servicev1SplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SplunkArrayOutput)
}

type Servicev1SplunkOutput struct{ *pulumi.OutputState }

func (Servicev1SplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Splunk)(nil)).Elem()
}

func (o Servicev1SplunkOutput) ToServicev1SplunkOutput() Servicev1SplunkOutput {
	return o
}

func (o Servicev1SplunkOutput) ToServicev1SplunkOutputWithContext(ctx context.Context) Servicev1SplunkOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1SplunkOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1SplunkOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1SplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Splunk) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1SplunkOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1SplunkOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format.
func (o Servicev1SplunkOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
func (o Servicev1SplunkOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys).
func (o Servicev1SplunkOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Splunk) string { return v.Token }).(pulumi.StringOutput)
}

// The Elasticsearch URL to stream logs to.
func (o Servicev1SplunkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Splunk) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1SplunkArrayOutput struct{ *pulumi.OutputState }

func (Servicev1SplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Splunk)(nil)).Elem()
}

func (o Servicev1SplunkArrayOutput) ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput {
	return o
}

func (o Servicev1SplunkArrayOutput) ToServicev1SplunkArrayOutputWithContext(ctx context.Context) Servicev1SplunkArrayOutput {
	return o
}

func (o Servicev1SplunkArrayOutput) Index(i pulumi.IntInput) Servicev1SplunkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Splunk {
		return vs[0].([]Servicev1Splunk)[vs[1].(int)]
	}).(Servicev1SplunkOutput)
}

type Servicev1Sumologic struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The Elasticsearch URL to stream logs to.
	Url string `pulumi:"url"`
}

// Servicev1SumologicInput is an input type that accepts Servicev1SumologicArgs and Servicev1SumologicOutput values.
// You can construct a concrete instance of `Servicev1SumologicInput` via:
//
//          Servicev1SumologicArgs{...}
type Servicev1SumologicInput interface {
	pulumi.Input

	ToServicev1SumologicOutput() Servicev1SumologicOutput
	ToServicev1SumologicOutputWithContext(context.Context) Servicev1SumologicOutput
}

type Servicev1SumologicArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The Elasticsearch URL to stream logs to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1SumologicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Sumologic)(nil)).Elem()
}

func (i Servicev1SumologicArgs) ToServicev1SumologicOutput() Servicev1SumologicOutput {
	return i.ToServicev1SumologicOutputWithContext(context.Background())
}

func (i Servicev1SumologicArgs) ToServicev1SumologicOutputWithContext(ctx context.Context) Servicev1SumologicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SumologicOutput)
}

// Servicev1SumologicArrayInput is an input type that accepts Servicev1SumologicArray and Servicev1SumologicArrayOutput values.
// You can construct a concrete instance of `Servicev1SumologicArrayInput` via:
//
//          Servicev1SumologicArray{ Servicev1SumologicArgs{...} }
type Servicev1SumologicArrayInput interface {
	pulumi.Input

	ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput
	ToServicev1SumologicArrayOutputWithContext(context.Context) Servicev1SumologicArrayOutput
}

type Servicev1SumologicArray []Servicev1SumologicInput

func (Servicev1SumologicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Sumologic)(nil)).Elem()
}

func (i Servicev1SumologicArray) ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput {
	return i.ToServicev1SumologicArrayOutputWithContext(context.Background())
}

func (i Servicev1SumologicArray) ToServicev1SumologicArrayOutputWithContext(ctx context.Context) Servicev1SumologicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SumologicArrayOutput)
}

type Servicev1SumologicOutput struct{ *pulumi.OutputState }

func (Servicev1SumologicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Sumologic)(nil)).Elem()
}

func (o Servicev1SumologicOutput) ToServicev1SumologicOutput() Servicev1SumologicOutput {
	return o
}

func (o Servicev1SumologicOutput) ToServicev1SumologicOutputWithContext(ctx context.Context) Servicev1SumologicOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1SumologicOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1SumologicOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
func (o Servicev1SumologicOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1SumologicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Sumologic) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1SumologicOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1SumologicOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The Elasticsearch URL to stream logs to.
func (o Servicev1SumologicOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Sumologic) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1SumologicArrayOutput struct{ *pulumi.OutputState }

func (Servicev1SumologicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Sumologic)(nil)).Elem()
}

func (o Servicev1SumologicArrayOutput) ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput {
	return o
}

func (o Servicev1SumologicArrayOutput) ToServicev1SumologicArrayOutputWithContext(ctx context.Context) Servicev1SumologicArrayOutput {
	return o
}

func (o Servicev1SumologicArrayOutput) Index(i pulumi.IntInput) Servicev1SumologicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Sumologic {
		return vs[0].([]Servicev1Sumologic)[vs[1].(int)]
	}).(Servicev1SumologicOutput)
}

type Servicev1Syslog struct {
	// The SFTP address to stream logs to.
	Address string `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion *int `pulumi:"formatVersion"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement *string `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port *int `pulumi:"port"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname *string `pulumi:"tlsHostname"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token *string `pulumi:"token"`
	// Whether to use TLS for secure logging. Can be either true or false.
	UseTls *bool `pulumi:"useTls"`
}

// Servicev1SyslogInput is an input type that accepts Servicev1SyslogArgs and Servicev1SyslogOutput values.
// You can construct a concrete instance of `Servicev1SyslogInput` via:
//
//          Servicev1SyslogArgs{...}
type Servicev1SyslogInput interface {
	pulumi.Input

	ToServicev1SyslogOutput() Servicev1SyslogOutput
	ToServicev1SyslogOutputWithContext(context.Context) Servicev1SyslogOutput
}

type Servicev1SyslogArgs struct {
	// The SFTP address to stream logs to.
	Address pulumi.StringInput `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`).
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The name of the `condition` to apply. If empty, always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format.
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The token to use for authentication (https://www.scalyr.com/keys).
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Whether to use TLS for secure logging. Can be either true or false.
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (Servicev1SyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Syslog)(nil)).Elem()
}

func (i Servicev1SyslogArgs) ToServicev1SyslogOutput() Servicev1SyslogOutput {
	return i.ToServicev1SyslogOutputWithContext(context.Background())
}

func (i Servicev1SyslogArgs) ToServicev1SyslogOutputWithContext(ctx context.Context) Servicev1SyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SyslogOutput)
}

// Servicev1SyslogArrayInput is an input type that accepts Servicev1SyslogArray and Servicev1SyslogArrayOutput values.
// You can construct a concrete instance of `Servicev1SyslogArrayInput` via:
//
//          Servicev1SyslogArray{ Servicev1SyslogArgs{...} }
type Servicev1SyslogArrayInput interface {
	pulumi.Input

	ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput
	ToServicev1SyslogArrayOutputWithContext(context.Context) Servicev1SyslogArrayOutput
}

type Servicev1SyslogArray []Servicev1SyslogInput

func (Servicev1SyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Syslog)(nil)).Elem()
}

func (i Servicev1SyslogArray) ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput {
	return i.ToServicev1SyslogArrayOutputWithContext(context.Background())
}

func (i Servicev1SyslogArray) ToServicev1SyslogArrayOutputWithContext(ctx context.Context) Servicev1SyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SyslogArrayOutput)
}

type Servicev1SyslogOutput struct{ *pulumi.OutputState }

func (Servicev1SyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Syslog)(nil)).Elem()
}

func (o Servicev1SyslogOutput) ToServicev1SyslogOutput() Servicev1SyslogOutput {
	return o
}

func (o Servicev1SyslogOutput) ToServicev1SyslogOutputWithContext(ctx context.Context) Servicev1SyslogOutput {
	return o
}

// The SFTP address to stream logs to.
func (o Servicev1SyslogOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Syslog) string { return v.Address }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1SyslogOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`. Default `2`.
func (o Servicev1SyslogOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
func (o Servicev1SyslogOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1SyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Syslog) string { return v.Name }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1SyslogOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`).
func (o Servicev1SyslogOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The name of the `condition` to apply. If empty, always execute.
func (o Servicev1SyslogOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format.
func (o Servicev1SyslogOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format.
func (o Servicev1SyslogOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format.
func (o Servicev1SyslogOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN).
func (o Servicev1SyslogOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys).
func (o Servicev1SyslogOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Whether to use TLS for secure logging. Can be either true or false.
func (o Servicev1SyslogOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type Servicev1SyslogArrayOutput struct{ *pulumi.OutputState }

func (Servicev1SyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Syslog)(nil)).Elem()
}

func (o Servicev1SyslogArrayOutput) ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput {
	return o
}

func (o Servicev1SyslogArrayOutput) ToServicev1SyslogArrayOutputWithContext(ctx context.Context) Servicev1SyslogArrayOutput {
	return o
}

func (o Servicev1SyslogArrayOutput) Index(i pulumi.IntInput) Servicev1SyslogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Syslog {
		return vs[0].([]Servicev1Syslog)[vs[1].(int)]
	}).(Servicev1SyslogOutput)
}

type Servicev1Vcl struct {
	// The custom VCL code to upload.
	Content string `pulumi:"content"`
	// If `true`, use this block as the main configuration. If
	// `false`, use this block as an includable library. Only a single VCL block can be
	// marked as the main block. Default is `false`.
	Main *bool `pulumi:"main"`
	// A unique name to identify this dictionary.
	Name string `pulumi:"name"`
}

// Servicev1VclInput is an input type that accepts Servicev1VclArgs and Servicev1VclOutput values.
// You can construct a concrete instance of `Servicev1VclInput` via:
//
//          Servicev1VclArgs{...}
type Servicev1VclInput interface {
	pulumi.Input

	ToServicev1VclOutput() Servicev1VclOutput
	ToServicev1VclOutputWithContext(context.Context) Servicev1VclOutput
}

type Servicev1VclArgs struct {
	// The custom VCL code to upload.
	Content pulumi.StringInput `pulumi:"content"`
	// If `true`, use this block as the main configuration. If
	// `false`, use this block as an includable library. Only a single VCL block can be
	// marked as the main block. Default is `false`.
	Main pulumi.BoolPtrInput `pulumi:"main"`
	// A unique name to identify this dictionary.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1VclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Vcl)(nil)).Elem()
}

func (i Servicev1VclArgs) ToServicev1VclOutput() Servicev1VclOutput {
	return i.ToServicev1VclOutputWithContext(context.Background())
}

func (i Servicev1VclArgs) ToServicev1VclOutputWithContext(ctx context.Context) Servicev1VclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1VclOutput)
}

// Servicev1VclArrayInput is an input type that accepts Servicev1VclArray and Servicev1VclArrayOutput values.
// You can construct a concrete instance of `Servicev1VclArrayInput` via:
//
//          Servicev1VclArray{ Servicev1VclArgs{...} }
type Servicev1VclArrayInput interface {
	pulumi.Input

	ToServicev1VclArrayOutput() Servicev1VclArrayOutput
	ToServicev1VclArrayOutputWithContext(context.Context) Servicev1VclArrayOutput
}

type Servicev1VclArray []Servicev1VclInput

func (Servicev1VclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Vcl)(nil)).Elem()
}

func (i Servicev1VclArray) ToServicev1VclArrayOutput() Servicev1VclArrayOutput {
	return i.ToServicev1VclArrayOutputWithContext(context.Background())
}

func (i Servicev1VclArray) ToServicev1VclArrayOutputWithContext(ctx context.Context) Servicev1VclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1VclArrayOutput)
}

type Servicev1VclOutput struct{ *pulumi.OutputState }

func (Servicev1VclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Vcl)(nil)).Elem()
}

func (o Servicev1VclOutput) ToServicev1VclOutput() Servicev1VclOutput {
	return o
}

func (o Servicev1VclOutput) ToServicev1VclOutputWithContext(ctx context.Context) Servicev1VclOutput {
	return o
}

// The custom VCL code to upload.
func (o Servicev1VclOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Vcl) string { return v.Content }).(pulumi.StringOutput)
}

// If `true`, use this block as the main configuration. If
// `false`, use this block as an includable library. Only a single VCL block can be
// marked as the main block. Default is `false`.
func (o Servicev1VclOutput) Main() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Vcl) *bool { return v.Main }).(pulumi.BoolPtrOutput)
}

// A unique name to identify this dictionary.
func (o Servicev1VclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Vcl) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1VclArrayOutput struct{ *pulumi.OutputState }

func (Servicev1VclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Vcl)(nil)).Elem()
}

func (o Servicev1VclArrayOutput) ToServicev1VclArrayOutput() Servicev1VclArrayOutput {
	return o
}

func (o Servicev1VclArrayOutput) ToServicev1VclArrayOutputWithContext(ctx context.Context) Servicev1VclArrayOutput {
	return o
}

func (o Servicev1VclArrayOutput) Index(i pulumi.IntInput) Servicev1VclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Vcl {
		return vs[0].([]Servicev1Vcl)[vs[1].(int)]
	}).(Servicev1VclOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceACLEntriesv1EntryOutput{})
	pulumi.RegisterOutputType(ServiceACLEntriesv1EntryArrayOutput{})
	pulumi.RegisterOutputType(Servicev1AclOutput{})
	pulumi.RegisterOutputType(Servicev1AclArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BackendOutput{})
	pulumi.RegisterOutputType(Servicev1BackendArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BigqueryloggingOutput{})
	pulumi.RegisterOutputType(Servicev1BigqueryloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BlobstorageloggingOutput{})
	pulumi.RegisterOutputType(Servicev1BlobstorageloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1CacheSettingOutput{})
	pulumi.RegisterOutputType(Servicev1CacheSettingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1ConditionOutput{})
	pulumi.RegisterOutputType(Servicev1ConditionArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DictionaryOutput{})
	pulumi.RegisterOutputType(Servicev1DictionaryArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DirectorOutput{})
	pulumi.RegisterOutputType(Servicev1DirectorArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DomainOutput{})
	pulumi.RegisterOutputType(Servicev1DomainArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DynamicsnippetOutput{})
	pulumi.RegisterOutputType(Servicev1DynamicsnippetArrayOutput{})
	pulumi.RegisterOutputType(Servicev1GcsloggingOutput{})
	pulumi.RegisterOutputType(Servicev1GcsloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1GzipOutput{})
	pulumi.RegisterOutputType(Servicev1GzipArrayOutput{})
	pulumi.RegisterOutputType(Servicev1HeaderOutput{})
	pulumi.RegisterOutputType(Servicev1HeaderArrayOutput{})
	pulumi.RegisterOutputType(Servicev1HealthcheckOutput{})
	pulumi.RegisterOutputType(Servicev1HealthcheckArrayOutput{})
	pulumi.RegisterOutputType(Servicev1HttpsloggingOutput{})
	pulumi.RegisterOutputType(Servicev1HttpsloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LogentryOutput{})
	pulumi.RegisterOutputType(Servicev1LogentryArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingDatadogOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingDatadogArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingElasticsearchOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingElasticsearchArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingFtpOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingFtpArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingGooglepubsubOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingGooglepubsubArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingKafkaOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingKafkaArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingLogglyOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingLogglyArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingNewrelicOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingNewrelicArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingScalyrOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingScalyrArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingSftpOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingSftpArrayOutput{})
	pulumi.RegisterOutputType(Servicev1PapertrailOutput{})
	pulumi.RegisterOutputType(Servicev1PapertrailArrayOutput{})
	pulumi.RegisterOutputType(Servicev1RequestSettingOutput{})
	pulumi.RegisterOutputType(Servicev1RequestSettingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1ResponseObjectOutput{})
	pulumi.RegisterOutputType(Servicev1ResponseObjectArrayOutput{})
	pulumi.RegisterOutputType(Servicev1S3loggingOutput{})
	pulumi.RegisterOutputType(Servicev1S3loggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SnippetOutput{})
	pulumi.RegisterOutputType(Servicev1SnippetArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SplunkOutput{})
	pulumi.RegisterOutputType(Servicev1SplunkArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SumologicOutput{})
	pulumi.RegisterOutputType(Servicev1SumologicArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SyslogOutput{})
	pulumi.RegisterOutputType(Servicev1SyslogArrayOutput{})
	pulumi.RegisterOutputType(Servicev1VclOutput{})
	pulumi.RegisterOutputType(Servicev1VclArrayOutput{})
}
