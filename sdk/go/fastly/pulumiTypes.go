// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ServiceACLEntriesv1Entry struct {
	// A personal freeform descriptive note
	Comment *string `pulumi:"comment"`
	// The unique ID of the entry
	Id *string `pulumi:"id"`
	// An IP address that is the focus for the ACL
	Ip string `pulumi:"ip"`
	// A boolean that will negate the match if true
	Negated *bool `pulumi:"negated"`
	// An optional subnet mask applied to the IP address
	Subnet *string `pulumi:"subnet"`
}

// ServiceACLEntriesv1EntryInput is an input type that accepts ServiceACLEntriesv1EntryArgs and ServiceACLEntriesv1EntryOutput values.
// You can construct a concrete instance of `ServiceACLEntriesv1EntryInput` via:
//
//          ServiceACLEntriesv1EntryArgs{...}
type ServiceACLEntriesv1EntryInput interface {
	pulumi.Input

	ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput
	ToServiceACLEntriesv1EntryOutputWithContext(context.Context) ServiceACLEntriesv1EntryOutput
}

type ServiceACLEntriesv1EntryArgs struct {
	// A personal freeform descriptive note
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The unique ID of the entry
	Id pulumi.StringPtrInput `pulumi:"id"`
	// An IP address that is the focus for the ACL
	Ip pulumi.StringInput `pulumi:"ip"`
	// A boolean that will negate the match if true
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// An optional subnet mask applied to the IP address
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (ServiceACLEntriesv1EntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (i ServiceACLEntriesv1EntryArgs) ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput {
	return i.ToServiceACLEntriesv1EntryOutputWithContext(context.Background())
}

func (i ServiceACLEntriesv1EntryArgs) ToServiceACLEntriesv1EntryOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1EntryOutput)
}

// ServiceACLEntriesv1EntryArrayInput is an input type that accepts ServiceACLEntriesv1EntryArray and ServiceACLEntriesv1EntryArrayOutput values.
// You can construct a concrete instance of `ServiceACLEntriesv1EntryArrayInput` via:
//
//          ServiceACLEntriesv1EntryArray{ ServiceACLEntriesv1EntryArgs{...} }
type ServiceACLEntriesv1EntryArrayInput interface {
	pulumi.Input

	ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput
	ToServiceACLEntriesv1EntryArrayOutputWithContext(context.Context) ServiceACLEntriesv1EntryArrayOutput
}

type ServiceACLEntriesv1EntryArray []ServiceACLEntriesv1EntryInput

func (ServiceACLEntriesv1EntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (i ServiceACLEntriesv1EntryArray) ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput {
	return i.ToServiceACLEntriesv1EntryArrayOutputWithContext(context.Background())
}

func (i ServiceACLEntriesv1EntryArray) ToServiceACLEntriesv1EntryArrayOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1EntryArrayOutput)
}

type ServiceACLEntriesv1EntryOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesv1EntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (o ServiceACLEntriesv1EntryOutput) ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput {
	return o
}

func (o ServiceACLEntriesv1EntryOutput) ToServiceACLEntriesv1EntryOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryOutput {
	return o
}

// A personal freeform descriptive note
func (o ServiceACLEntriesv1EntryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The unique ID of the entry
func (o ServiceACLEntriesv1EntryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// An IP address that is the focus for the ACL
func (o ServiceACLEntriesv1EntryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) string { return v.Ip }).(pulumi.StringOutput)
}

// A boolean that will negate the match if true
func (o ServiceACLEntriesv1EntryOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// An optional subnet mask applied to the IP address
func (o ServiceACLEntriesv1EntryOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1Entry) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type ServiceACLEntriesv1EntryArrayOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesv1EntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (o ServiceACLEntriesv1EntryArrayOutput) ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput {
	return o
}

func (o ServiceACLEntriesv1EntryArrayOutput) ToServiceACLEntriesv1EntryArrayOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryArrayOutput {
	return o
}

func (o ServiceACLEntriesv1EntryArrayOutput) Index(i pulumi.IntInput) ServiceACLEntriesv1EntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceACLEntriesv1Entry {
		return vs[0].([]ServiceACLEntriesv1Entry)[vs[1].(int)]
	}).(ServiceACLEntriesv1EntryOutput)
}

type ServiceComputeBackend struct {
	// An IPv4, hostname, or IPv6 address for the Backend
	Address string `pulumi:"address"`
	// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `true`
	AutoLoadbalance     *bool `pulumi:"autoLoadbalance"`
	BetweenBytesTimeout *int  `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds. Default `1000`
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`
	ErrorThreshold   *int `pulumi:"errorThreshold"`
	FirstByteTimeout *int `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthcheck *string `pulumi:"healthcheck"`
	// Maximum number of connections for this Backend. Default `200`
	MaxConn       *int    `pulumi:"maxConn"`
	MaxTlsVersion *string `pulumi:"maxTlsVersion"`
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The hostname to override the Host header
	OverrideHost *string `pulumi:"overrideHost"`
	// The port number on which the Backend responds. Default `80`
	Port *int `pulumi:"port"`
	// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
	Shield          *string `pulumi:"shield"`
	SslCaCert       *string `pulumi:"sslCaCert"`
	SslCertHostname *string `pulumi:"sslCertHostname"`
	SslCheckCert    *bool   `pulumi:"sslCheckCert"`
	// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend
	SslCiphers    *string `pulumi:"sslCiphers"`
	SslClientCert *string `pulumi:"sslClientCert"`
	SslClientKey  *string `pulumi:"sslClientKey"`
	// Used for both SNI during the TLS handshake and to validate the cert
	//
	// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
	SslHostname    *string `pulumi:"sslHostname"`
	SslSniHostname *string `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the Backend. Default `false`
	UseSsl *bool `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
	Weight *int `pulumi:"weight"`
}

// ServiceComputeBackendInput is an input type that accepts ServiceComputeBackendArgs and ServiceComputeBackendOutput values.
// You can construct a concrete instance of `ServiceComputeBackendInput` via:
//
//          ServiceComputeBackendArgs{...}
type ServiceComputeBackendInput interface {
	pulumi.Input

	ToServiceComputeBackendOutput() ServiceComputeBackendOutput
	ToServiceComputeBackendOutputWithContext(context.Context) ServiceComputeBackendOutput
}

type ServiceComputeBackendArgs struct {
	// An IPv4, hostname, or IPv6 address for the Backend
	Address pulumi.StringInput `pulumi:"address"`
	// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `true`
	AutoLoadbalance     pulumi.BoolPtrInput `pulumi:"autoLoadbalance"`
	BetweenBytesTimeout pulumi.IntPtrInput  `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds. Default `1000`
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`
	ErrorThreshold   pulumi.IntPtrInput `pulumi:"errorThreshold"`
	FirstByteTimeout pulumi.IntPtrInput `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthcheck pulumi.StringPtrInput `pulumi:"healthcheck"`
	// Maximum number of connections for this Backend. Default `200`
	MaxConn       pulumi.IntPtrInput    `pulumi:"maxConn"`
	MaxTlsVersion pulumi.StringPtrInput `pulumi:"maxTlsVersion"`
	MinTlsVersion pulumi.StringPtrInput `pulumi:"minTlsVersion"`
	// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The hostname to override the Host header
	OverrideHost pulumi.StringPtrInput `pulumi:"overrideHost"`
	// The port number on which the Backend responds. Default `80`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
	Shield          pulumi.StringPtrInput `pulumi:"shield"`
	SslCaCert       pulumi.StringPtrInput `pulumi:"sslCaCert"`
	SslCertHostname pulumi.StringPtrInput `pulumi:"sslCertHostname"`
	SslCheckCert    pulumi.BoolPtrInput   `pulumi:"sslCheckCert"`
	// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend
	SslCiphers    pulumi.StringPtrInput `pulumi:"sslCiphers"`
	SslClientCert pulumi.StringPtrInput `pulumi:"sslClientCert"`
	SslClientKey  pulumi.StringPtrInput `pulumi:"sslClientKey"`
	// Used for both SNI during the TLS handshake and to validate the cert
	//
	// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
	SslHostname    pulumi.StringPtrInput `pulumi:"sslHostname"`
	SslSniHostname pulumi.StringPtrInput `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the Backend. Default `false`
	UseSsl pulumi.BoolPtrInput `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServiceComputeBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeBackend)(nil)).Elem()
}

func (i ServiceComputeBackendArgs) ToServiceComputeBackendOutput() ServiceComputeBackendOutput {
	return i.ToServiceComputeBackendOutputWithContext(context.Background())
}

func (i ServiceComputeBackendArgs) ToServiceComputeBackendOutputWithContext(ctx context.Context) ServiceComputeBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeBackendOutput)
}

// ServiceComputeBackendArrayInput is an input type that accepts ServiceComputeBackendArray and ServiceComputeBackendArrayOutput values.
// You can construct a concrete instance of `ServiceComputeBackendArrayInput` via:
//
//          ServiceComputeBackendArray{ ServiceComputeBackendArgs{...} }
type ServiceComputeBackendArrayInput interface {
	pulumi.Input

	ToServiceComputeBackendArrayOutput() ServiceComputeBackendArrayOutput
	ToServiceComputeBackendArrayOutputWithContext(context.Context) ServiceComputeBackendArrayOutput
}

type ServiceComputeBackendArray []ServiceComputeBackendInput

func (ServiceComputeBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeBackend)(nil)).Elem()
}

func (i ServiceComputeBackendArray) ToServiceComputeBackendArrayOutput() ServiceComputeBackendArrayOutput {
	return i.ToServiceComputeBackendArrayOutputWithContext(context.Background())
}

func (i ServiceComputeBackendArray) ToServiceComputeBackendArrayOutputWithContext(ctx context.Context) ServiceComputeBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeBackendArrayOutput)
}

type ServiceComputeBackendOutput struct{ *pulumi.OutputState }

func (ServiceComputeBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeBackend)(nil)).Elem()
}

func (o ServiceComputeBackendOutput) ToServiceComputeBackendOutput() ServiceComputeBackendOutput {
	return o
}

func (o ServiceComputeBackendOutput) ToServiceComputeBackendOutputWithContext(ctx context.Context) ServiceComputeBackendOutput {
	return o
}

// An IPv4, hostname, or IPv6 address for the Backend
func (o ServiceComputeBackendOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBackend) string { return v.Address }).(pulumi.StringOutput)
}

// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `true`
func (o ServiceComputeBackendOutput) AutoLoadbalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *bool { return v.AutoLoadbalance }).(pulumi.BoolPtrOutput)
}

func (o ServiceComputeBackendOutput) BetweenBytesTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.BetweenBytesTimeout }).(pulumi.IntPtrOutput)
}

// How long to wait for a timeout in milliseconds. Default `1000`
func (o ServiceComputeBackendOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Number of errors to allow before the Backend is marked as down. Default `0`
func (o ServiceComputeBackendOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

func (o ServiceComputeBackendOutput) FirstByteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.FirstByteTimeout }).(pulumi.IntPtrOutput)
}

// Name of a defined `healthcheck` to assign to this backend
func (o ServiceComputeBackendOutput) Healthcheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.Healthcheck }).(pulumi.StringPtrOutput)
}

// Maximum number of connections for this Backend. Default `200`
func (o ServiceComputeBackendOutput) MaxConn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.MaxConn }).(pulumi.IntPtrOutput)
}

func (o ServiceComputeBackendOutput) MaxTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.MaxTlsVersion }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeBackendOutput) MinTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.MinTlsVersion }).(pulumi.StringPtrOutput)
}

// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBackend) string { return v.Name }).(pulumi.StringOutput)
}

// The hostname to override the Host header
func (o ServiceComputeBackendOutput) OverrideHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.OverrideHost }).(pulumi.StringPtrOutput)
}

// The port number on which the Backend responds. Default `80`
func (o ServiceComputeBackendOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
func (o ServiceComputeBackendOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeBackendOutput) SslCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslCaCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeBackendOutput) SslCertHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslCertHostname }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeBackendOutput) SslCheckCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *bool { return v.SslCheckCert }).(pulumi.BoolPtrOutput)
}

// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend
func (o ServiceComputeBackendOutput) SslCiphers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslCiphers }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeBackendOutput) SslClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslClientCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeBackendOutput) SslClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslClientKey }).(pulumi.StringPtrOutput)
}

// Used for both SNI during the TLS handshake and to validate the cert
//
// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
func (o ServiceComputeBackendOutput) SslHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslHostname }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeBackendOutput) SslSniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslSniHostname }).(pulumi.StringPtrOutput)
}

// Whether or not to use SSL to reach the Backend. Default `false`
func (o ServiceComputeBackendOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *bool { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
func (o ServiceComputeBackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServiceComputeBackendArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeBackend)(nil)).Elem()
}

func (o ServiceComputeBackendArrayOutput) ToServiceComputeBackendArrayOutput() ServiceComputeBackendArrayOutput {
	return o
}

func (o ServiceComputeBackendArrayOutput) ToServiceComputeBackendArrayOutputWithContext(ctx context.Context) ServiceComputeBackendArrayOutput {
	return o
}

func (o ServiceComputeBackendArrayOutput) Index(i pulumi.IntInput) ServiceComputeBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeBackend {
		return vs[0].([]ServiceComputeBackend)[vs[1].(int)]
	}).(ServiceComputeBackendOutput)
}

type ServiceComputeBigquerylogging struct {
	// The ID of your BigQuery dataset
	Dataset string `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
	Email string `pulumi:"email"`
	// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The ID of your GCP project
	ProjectId string `pulumi:"projectId"`
	// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
	SecretKey string `pulumi:"secretKey"`
	// The ID of your BigQuery table
	Table string `pulumi:"table"`
	// BigQuery table name suffix template
	Template *string `pulumi:"template"`
}

// ServiceComputeBigqueryloggingInput is an input type that accepts ServiceComputeBigqueryloggingArgs and ServiceComputeBigqueryloggingOutput values.
// You can construct a concrete instance of `ServiceComputeBigqueryloggingInput` via:
//
//          ServiceComputeBigqueryloggingArgs{...}
type ServiceComputeBigqueryloggingInput interface {
	pulumi.Input

	ToServiceComputeBigqueryloggingOutput() ServiceComputeBigqueryloggingOutput
	ToServiceComputeBigqueryloggingOutputWithContext(context.Context) ServiceComputeBigqueryloggingOutput
}

type ServiceComputeBigqueryloggingArgs struct {
	// The ID of your BigQuery dataset
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
	Email pulumi.StringInput `pulumi:"email"`
	// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of your GCP project
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The ID of your BigQuery table
	Table pulumi.StringInput `pulumi:"table"`
	// BigQuery table name suffix template
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (ServiceComputeBigqueryloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeBigquerylogging)(nil)).Elem()
}

func (i ServiceComputeBigqueryloggingArgs) ToServiceComputeBigqueryloggingOutput() ServiceComputeBigqueryloggingOutput {
	return i.ToServiceComputeBigqueryloggingOutputWithContext(context.Background())
}

func (i ServiceComputeBigqueryloggingArgs) ToServiceComputeBigqueryloggingOutputWithContext(ctx context.Context) ServiceComputeBigqueryloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeBigqueryloggingOutput)
}

// ServiceComputeBigqueryloggingArrayInput is an input type that accepts ServiceComputeBigqueryloggingArray and ServiceComputeBigqueryloggingArrayOutput values.
// You can construct a concrete instance of `ServiceComputeBigqueryloggingArrayInput` via:
//
//          ServiceComputeBigqueryloggingArray{ ServiceComputeBigqueryloggingArgs{...} }
type ServiceComputeBigqueryloggingArrayInput interface {
	pulumi.Input

	ToServiceComputeBigqueryloggingArrayOutput() ServiceComputeBigqueryloggingArrayOutput
	ToServiceComputeBigqueryloggingArrayOutputWithContext(context.Context) ServiceComputeBigqueryloggingArrayOutput
}

type ServiceComputeBigqueryloggingArray []ServiceComputeBigqueryloggingInput

func (ServiceComputeBigqueryloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeBigquerylogging)(nil)).Elem()
}

func (i ServiceComputeBigqueryloggingArray) ToServiceComputeBigqueryloggingArrayOutput() ServiceComputeBigqueryloggingArrayOutput {
	return i.ToServiceComputeBigqueryloggingArrayOutputWithContext(context.Background())
}

func (i ServiceComputeBigqueryloggingArray) ToServiceComputeBigqueryloggingArrayOutputWithContext(ctx context.Context) ServiceComputeBigqueryloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeBigqueryloggingArrayOutput)
}

type ServiceComputeBigqueryloggingOutput struct{ *pulumi.OutputState }

func (ServiceComputeBigqueryloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeBigquerylogging)(nil)).Elem()
}

func (o ServiceComputeBigqueryloggingOutput) ToServiceComputeBigqueryloggingOutput() ServiceComputeBigqueryloggingOutput {
	return o
}

func (o ServiceComputeBigqueryloggingOutput) ToServiceComputeBigqueryloggingOutputWithContext(ctx context.Context) ServiceComputeBigqueryloggingOutput {
	return o
}

// The ID of your BigQuery dataset
func (o ServiceComputeBigqueryloggingOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBigquerylogging) string { return v.Dataset }).(pulumi.StringOutput)
}

// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
func (o ServiceComputeBigqueryloggingOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBigquerylogging) string { return v.Email }).(pulumi.StringOutput)
}

// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeBigqueryloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBigquerylogging) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of your GCP project
func (o ServiceComputeBigqueryloggingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBigquerylogging) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
func (o ServiceComputeBigqueryloggingOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBigquerylogging) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The ID of your BigQuery table
func (o ServiceComputeBigqueryloggingOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBigquerylogging) string { return v.Table }).(pulumi.StringOutput)
}

// BigQuery table name suffix template
func (o ServiceComputeBigqueryloggingOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBigquerylogging) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type ServiceComputeBigqueryloggingArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeBigqueryloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeBigquerylogging)(nil)).Elem()
}

func (o ServiceComputeBigqueryloggingArrayOutput) ToServiceComputeBigqueryloggingArrayOutput() ServiceComputeBigqueryloggingArrayOutput {
	return o
}

func (o ServiceComputeBigqueryloggingArrayOutput) ToServiceComputeBigqueryloggingArrayOutputWithContext(ctx context.Context) ServiceComputeBigqueryloggingArrayOutput {
	return o
}

func (o ServiceComputeBigqueryloggingArrayOutput) Index(i pulumi.IntInput) ServiceComputeBigqueryloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeBigquerylogging {
		return vs[0].([]ServiceComputeBigquerylogging)[vs[1].(int)]
	}).(ServiceComputeBigqueryloggingOutput)
}

type ServiceComputeBlobstoragelogging struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored
	AccountName string `pulumi:"accountName"`
	// The name of the Azure Blob Storage container in which to store logs
	Container string `pulumi:"container"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
	SasToken string `pulumi:"sasToken"`
	// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceComputeBlobstorageloggingInput is an input type that accepts ServiceComputeBlobstorageloggingArgs and ServiceComputeBlobstorageloggingOutput values.
// You can construct a concrete instance of `ServiceComputeBlobstorageloggingInput` via:
//
//          ServiceComputeBlobstorageloggingArgs{...}
type ServiceComputeBlobstorageloggingInput interface {
	pulumi.Input

	ToServiceComputeBlobstorageloggingOutput() ServiceComputeBlobstorageloggingOutput
	ToServiceComputeBlobstorageloggingOutputWithContext(context.Context) ServiceComputeBlobstorageloggingOutput
}

type ServiceComputeBlobstorageloggingArgs struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the Azure Blob Storage container in which to store logs
	Container pulumi.StringInput `pulumi:"container"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
	SasToken pulumi.StringInput `pulumi:"sasToken"`
	// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceComputeBlobstorageloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeBlobstoragelogging)(nil)).Elem()
}

func (i ServiceComputeBlobstorageloggingArgs) ToServiceComputeBlobstorageloggingOutput() ServiceComputeBlobstorageloggingOutput {
	return i.ToServiceComputeBlobstorageloggingOutputWithContext(context.Background())
}

func (i ServiceComputeBlobstorageloggingArgs) ToServiceComputeBlobstorageloggingOutputWithContext(ctx context.Context) ServiceComputeBlobstorageloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeBlobstorageloggingOutput)
}

// ServiceComputeBlobstorageloggingArrayInput is an input type that accepts ServiceComputeBlobstorageloggingArray and ServiceComputeBlobstorageloggingArrayOutput values.
// You can construct a concrete instance of `ServiceComputeBlobstorageloggingArrayInput` via:
//
//          ServiceComputeBlobstorageloggingArray{ ServiceComputeBlobstorageloggingArgs{...} }
type ServiceComputeBlobstorageloggingArrayInput interface {
	pulumi.Input

	ToServiceComputeBlobstorageloggingArrayOutput() ServiceComputeBlobstorageloggingArrayOutput
	ToServiceComputeBlobstorageloggingArrayOutputWithContext(context.Context) ServiceComputeBlobstorageloggingArrayOutput
}

type ServiceComputeBlobstorageloggingArray []ServiceComputeBlobstorageloggingInput

func (ServiceComputeBlobstorageloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeBlobstoragelogging)(nil)).Elem()
}

func (i ServiceComputeBlobstorageloggingArray) ToServiceComputeBlobstorageloggingArrayOutput() ServiceComputeBlobstorageloggingArrayOutput {
	return i.ToServiceComputeBlobstorageloggingArrayOutputWithContext(context.Background())
}

func (i ServiceComputeBlobstorageloggingArray) ToServiceComputeBlobstorageloggingArrayOutputWithContext(ctx context.Context) ServiceComputeBlobstorageloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeBlobstorageloggingArrayOutput)
}

type ServiceComputeBlobstorageloggingOutput struct{ *pulumi.OutputState }

func (ServiceComputeBlobstorageloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeBlobstoragelogging)(nil)).Elem()
}

func (o ServiceComputeBlobstorageloggingOutput) ToServiceComputeBlobstorageloggingOutput() ServiceComputeBlobstorageloggingOutput {
	return o
}

func (o ServiceComputeBlobstorageloggingOutput) ToServiceComputeBlobstorageloggingOutputWithContext(ctx context.Context) ServiceComputeBlobstorageloggingOutput {
	return o
}

// The unique Azure Blob Storage namespace in which your data objects are stored
func (o ServiceComputeBlobstorageloggingOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) string { return v.AccountName }).(pulumi.StringOutput)
}

// The name of the Azure Blob Storage container in which to store logs
func (o ServiceComputeBlobstorageloggingOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) string { return v.Container }).(pulumi.StringOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeBlobstorageloggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default `classic`
func (o ServiceComputeBlobstorageloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeBlobstorageloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
func (o ServiceComputeBlobstorageloggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred in seconds. Default `3600`
func (o ServiceComputeBlobstorageloggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeBlobstorageloggingOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
func (o ServiceComputeBlobstorageloggingOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) string { return v.SasToken }).(pulumi.StringOutput)
}

// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`
func (o ServiceComputeBlobstorageloggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBlobstoragelogging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceComputeBlobstorageloggingArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeBlobstorageloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeBlobstoragelogging)(nil)).Elem()
}

func (o ServiceComputeBlobstorageloggingArrayOutput) ToServiceComputeBlobstorageloggingArrayOutput() ServiceComputeBlobstorageloggingArrayOutput {
	return o
}

func (o ServiceComputeBlobstorageloggingArrayOutput) ToServiceComputeBlobstorageloggingArrayOutputWithContext(ctx context.Context) ServiceComputeBlobstorageloggingArrayOutput {
	return o
}

func (o ServiceComputeBlobstorageloggingArrayOutput) Index(i pulumi.IntInput) ServiceComputeBlobstorageloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeBlobstoragelogging {
		return vs[0].([]ServiceComputeBlobstoragelogging)[vs[1].(int)]
	}).(ServiceComputeBlobstorageloggingOutput)
}

type ServiceComputeDictionary struct {
	// The ID of the dictionary
	DictionaryId *string `pulumi:"dictionaryId"`
	// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
	Name      string `pulumi:"name"`
	WriteOnly *bool  `pulumi:"writeOnly"`
}

// ServiceComputeDictionaryInput is an input type that accepts ServiceComputeDictionaryArgs and ServiceComputeDictionaryOutput values.
// You can construct a concrete instance of `ServiceComputeDictionaryInput` via:
//
//          ServiceComputeDictionaryArgs{...}
type ServiceComputeDictionaryInput interface {
	pulumi.Input

	ToServiceComputeDictionaryOutput() ServiceComputeDictionaryOutput
	ToServiceComputeDictionaryOutputWithContext(context.Context) ServiceComputeDictionaryOutput
}

type ServiceComputeDictionaryArgs struct {
	// The ID of the dictionary
	DictionaryId pulumi.StringPtrInput `pulumi:"dictionaryId"`
	// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput `pulumi:"forceDestroy"`
	// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
	Name      pulumi.StringInput  `pulumi:"name"`
	WriteOnly pulumi.BoolPtrInput `pulumi:"writeOnly"`
}

func (ServiceComputeDictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeDictionary)(nil)).Elem()
}

func (i ServiceComputeDictionaryArgs) ToServiceComputeDictionaryOutput() ServiceComputeDictionaryOutput {
	return i.ToServiceComputeDictionaryOutputWithContext(context.Background())
}

func (i ServiceComputeDictionaryArgs) ToServiceComputeDictionaryOutputWithContext(ctx context.Context) ServiceComputeDictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeDictionaryOutput)
}

// ServiceComputeDictionaryArrayInput is an input type that accepts ServiceComputeDictionaryArray and ServiceComputeDictionaryArrayOutput values.
// You can construct a concrete instance of `ServiceComputeDictionaryArrayInput` via:
//
//          ServiceComputeDictionaryArray{ ServiceComputeDictionaryArgs{...} }
type ServiceComputeDictionaryArrayInput interface {
	pulumi.Input

	ToServiceComputeDictionaryArrayOutput() ServiceComputeDictionaryArrayOutput
	ToServiceComputeDictionaryArrayOutputWithContext(context.Context) ServiceComputeDictionaryArrayOutput
}

type ServiceComputeDictionaryArray []ServiceComputeDictionaryInput

func (ServiceComputeDictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeDictionary)(nil)).Elem()
}

func (i ServiceComputeDictionaryArray) ToServiceComputeDictionaryArrayOutput() ServiceComputeDictionaryArrayOutput {
	return i.ToServiceComputeDictionaryArrayOutputWithContext(context.Background())
}

func (i ServiceComputeDictionaryArray) ToServiceComputeDictionaryArrayOutputWithContext(ctx context.Context) ServiceComputeDictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeDictionaryArrayOutput)
}

type ServiceComputeDictionaryOutput struct{ *pulumi.OutputState }

func (ServiceComputeDictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeDictionary)(nil)).Elem()
}

func (o ServiceComputeDictionaryOutput) ToServiceComputeDictionaryOutput() ServiceComputeDictionaryOutput {
	return o
}

func (o ServiceComputeDictionaryOutput) ToServiceComputeDictionaryOutputWithContext(ctx context.Context) ServiceComputeDictionaryOutput {
	return o
}

// The ID of the dictionary
func (o ServiceComputeDictionaryOutput) DictionaryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeDictionary) *string { return v.DictionaryId }).(pulumi.StringPtrOutput)
}

// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
func (o ServiceComputeDictionaryOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeDictionary) *bool { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
func (o ServiceComputeDictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeDictionary) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceComputeDictionaryOutput) WriteOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeDictionary) *bool { return v.WriteOnly }).(pulumi.BoolPtrOutput)
}

type ServiceComputeDictionaryArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeDictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeDictionary)(nil)).Elem()
}

func (o ServiceComputeDictionaryArrayOutput) ToServiceComputeDictionaryArrayOutput() ServiceComputeDictionaryArrayOutput {
	return o
}

func (o ServiceComputeDictionaryArrayOutput) ToServiceComputeDictionaryArrayOutputWithContext(ctx context.Context) ServiceComputeDictionaryArrayOutput {
	return o
}

func (o ServiceComputeDictionaryArrayOutput) Index(i pulumi.IntInput) ServiceComputeDictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeDictionary {
		return vs[0].([]ServiceComputeDictionary)[vs[1].(int)]
	}).(ServiceComputeDictionaryOutput)
}

type ServiceComputeDomain struct {
	// An optional comment about the Domain.
	Comment *string `pulumi:"comment"`
	// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
	Name string `pulumi:"name"`
}

// ServiceComputeDomainInput is an input type that accepts ServiceComputeDomainArgs and ServiceComputeDomainOutput values.
// You can construct a concrete instance of `ServiceComputeDomainInput` via:
//
//          ServiceComputeDomainArgs{...}
type ServiceComputeDomainInput interface {
	pulumi.Input

	ToServiceComputeDomainOutput() ServiceComputeDomainOutput
	ToServiceComputeDomainOutputWithContext(context.Context) ServiceComputeDomainOutput
}

type ServiceComputeDomainArgs struct {
	// An optional comment about the Domain.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceComputeDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeDomain)(nil)).Elem()
}

func (i ServiceComputeDomainArgs) ToServiceComputeDomainOutput() ServiceComputeDomainOutput {
	return i.ToServiceComputeDomainOutputWithContext(context.Background())
}

func (i ServiceComputeDomainArgs) ToServiceComputeDomainOutputWithContext(ctx context.Context) ServiceComputeDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeDomainOutput)
}

// ServiceComputeDomainArrayInput is an input type that accepts ServiceComputeDomainArray and ServiceComputeDomainArrayOutput values.
// You can construct a concrete instance of `ServiceComputeDomainArrayInput` via:
//
//          ServiceComputeDomainArray{ ServiceComputeDomainArgs{...} }
type ServiceComputeDomainArrayInput interface {
	pulumi.Input

	ToServiceComputeDomainArrayOutput() ServiceComputeDomainArrayOutput
	ToServiceComputeDomainArrayOutputWithContext(context.Context) ServiceComputeDomainArrayOutput
}

type ServiceComputeDomainArray []ServiceComputeDomainInput

func (ServiceComputeDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeDomain)(nil)).Elem()
}

func (i ServiceComputeDomainArray) ToServiceComputeDomainArrayOutput() ServiceComputeDomainArrayOutput {
	return i.ToServiceComputeDomainArrayOutputWithContext(context.Background())
}

func (i ServiceComputeDomainArray) ToServiceComputeDomainArrayOutputWithContext(ctx context.Context) ServiceComputeDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeDomainArrayOutput)
}

type ServiceComputeDomainOutput struct{ *pulumi.OutputState }

func (ServiceComputeDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeDomain)(nil)).Elem()
}

func (o ServiceComputeDomainOutput) ToServiceComputeDomainOutput() ServiceComputeDomainOutput {
	return o
}

func (o ServiceComputeDomainOutput) ToServiceComputeDomainOutputWithContext(ctx context.Context) ServiceComputeDomainOutput {
	return o
}

// An optional comment about the Domain.
func (o ServiceComputeDomainOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeDomain) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
func (o ServiceComputeDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeDomain) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceComputeDomainArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeDomain)(nil)).Elem()
}

func (o ServiceComputeDomainArrayOutput) ToServiceComputeDomainArrayOutput() ServiceComputeDomainArrayOutput {
	return o
}

func (o ServiceComputeDomainArrayOutput) ToServiceComputeDomainArrayOutputWithContext(ctx context.Context) ServiceComputeDomainArrayOutput {
	return o
}

func (o ServiceComputeDomainArrayOutput) Index(i pulumi.IntInput) ServiceComputeDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeDomain {
		return vs[0].([]ServiceComputeDomain)[vs[1].(int)]
	}).(ServiceComputeDomainOutput)
}

type ServiceComputeGcslogging struct {
	// The name of the bucket in which to store the logs
	BucketName string `pulumi:"bucketName"`
	// The email address associated with the target GCS bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_EMAIL`
	Email *string `pulumi:"email"`
	// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default 3600)
	Period *int `pulumi:"period"`
	// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
	SecretKey *string `pulumi:"secretKey"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceComputeGcsloggingInput is an input type that accepts ServiceComputeGcsloggingArgs and ServiceComputeGcsloggingOutput values.
// You can construct a concrete instance of `ServiceComputeGcsloggingInput` via:
//
//          ServiceComputeGcsloggingArgs{...}
type ServiceComputeGcsloggingInput interface {
	pulumi.Input

	ToServiceComputeGcsloggingOutput() ServiceComputeGcsloggingOutput
	ToServiceComputeGcsloggingOutputWithContext(context.Context) ServiceComputeGcsloggingOutput
}

type ServiceComputeGcsloggingArgs struct {
	// The name of the bucket in which to store the logs
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The email address associated with the target GCS bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_EMAIL`
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default 3600)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceComputeGcsloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeGcslogging)(nil)).Elem()
}

func (i ServiceComputeGcsloggingArgs) ToServiceComputeGcsloggingOutput() ServiceComputeGcsloggingOutput {
	return i.ToServiceComputeGcsloggingOutputWithContext(context.Background())
}

func (i ServiceComputeGcsloggingArgs) ToServiceComputeGcsloggingOutputWithContext(ctx context.Context) ServiceComputeGcsloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeGcsloggingOutput)
}

// ServiceComputeGcsloggingArrayInput is an input type that accepts ServiceComputeGcsloggingArray and ServiceComputeGcsloggingArrayOutput values.
// You can construct a concrete instance of `ServiceComputeGcsloggingArrayInput` via:
//
//          ServiceComputeGcsloggingArray{ ServiceComputeGcsloggingArgs{...} }
type ServiceComputeGcsloggingArrayInput interface {
	pulumi.Input

	ToServiceComputeGcsloggingArrayOutput() ServiceComputeGcsloggingArrayOutput
	ToServiceComputeGcsloggingArrayOutputWithContext(context.Context) ServiceComputeGcsloggingArrayOutput
}

type ServiceComputeGcsloggingArray []ServiceComputeGcsloggingInput

func (ServiceComputeGcsloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeGcslogging)(nil)).Elem()
}

func (i ServiceComputeGcsloggingArray) ToServiceComputeGcsloggingArrayOutput() ServiceComputeGcsloggingArrayOutput {
	return i.ToServiceComputeGcsloggingArrayOutputWithContext(context.Background())
}

func (i ServiceComputeGcsloggingArray) ToServiceComputeGcsloggingArrayOutputWithContext(ctx context.Context) ServiceComputeGcsloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeGcsloggingArrayOutput)
}

type ServiceComputeGcsloggingOutput struct{ *pulumi.OutputState }

func (ServiceComputeGcsloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeGcslogging)(nil)).Elem()
}

func (o ServiceComputeGcsloggingOutput) ToServiceComputeGcsloggingOutput() ServiceComputeGcsloggingOutput {
	return o
}

func (o ServiceComputeGcsloggingOutput) ToServiceComputeGcsloggingOutputWithContext(ctx context.Context) ServiceComputeGcsloggingOutput {
	return o
}

// The name of the bucket in which to store the logs
func (o ServiceComputeGcsloggingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) string { return v.BucketName }).(pulumi.StringOutput)
}

// The email address associated with the target GCS bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_EMAIL`
func (o ServiceComputeGcsloggingOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
func (o ServiceComputeGcsloggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
func (o ServiceComputeGcsloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeGcsloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceComputeGcsloggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds (Default 3600)
func (o ServiceComputeGcsloggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
func (o ServiceComputeGcsloggingOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeGcsloggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeGcslogging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceComputeGcsloggingArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeGcsloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeGcslogging)(nil)).Elem()
}

func (o ServiceComputeGcsloggingArrayOutput) ToServiceComputeGcsloggingArrayOutput() ServiceComputeGcsloggingArrayOutput {
	return o
}

func (o ServiceComputeGcsloggingArrayOutput) ToServiceComputeGcsloggingArrayOutputWithContext(ctx context.Context) ServiceComputeGcsloggingArrayOutput {
	return o
}

func (o ServiceComputeGcsloggingArrayOutput) Index(i pulumi.IntInput) ServiceComputeGcsloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeGcslogging {
		return vs[0].([]ServiceComputeGcslogging)[vs[1].(int)]
	}).(ServiceComputeGcsloggingOutput)
}

type ServiceComputeHealthcheck struct {
	// How often to run the Healthcheck in milliseconds. Default `5000`
	CheckInterval *int `pulumi:"checkInterval"`
	// The status code expected from the host. Default `200`
	ExpectedResponse *int `pulumi:"expectedResponse"`
	// The Host header to send for this Healthcheck
	Host string `pulumi:"host"`
	// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
	HttpVersion *string `pulumi:"httpVersion"`
	// When loading a config, the initial number of probes to be seen as OK. Default `2`
	Initial *int `pulumi:"initial"`
	// Which HTTP method to use. Default `HEAD`
	Method *string `pulumi:"method"`
	// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to check
	Path string `pulumi:"path"`
	// How many Healthchecks must succeed to be considered healthy. Default `3`
	Threshold *int `pulumi:"threshold"`
	// Timeout in milliseconds. Default `500`
	Timeout *int `pulumi:"timeout"`
	// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
	Window *int `pulumi:"window"`
}

// ServiceComputeHealthcheckInput is an input type that accepts ServiceComputeHealthcheckArgs and ServiceComputeHealthcheckOutput values.
// You can construct a concrete instance of `ServiceComputeHealthcheckInput` via:
//
//          ServiceComputeHealthcheckArgs{...}
type ServiceComputeHealthcheckInput interface {
	pulumi.Input

	ToServiceComputeHealthcheckOutput() ServiceComputeHealthcheckOutput
	ToServiceComputeHealthcheckOutputWithContext(context.Context) ServiceComputeHealthcheckOutput
}

type ServiceComputeHealthcheckArgs struct {
	// How often to run the Healthcheck in milliseconds. Default `5000`
	CheckInterval pulumi.IntPtrInput `pulumi:"checkInterval"`
	// The status code expected from the host. Default `200`
	ExpectedResponse pulumi.IntPtrInput `pulumi:"expectedResponse"`
	// The Host header to send for this Healthcheck
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
	HttpVersion pulumi.StringPtrInput `pulumi:"httpVersion"`
	// When loading a config, the initial number of probes to be seen as OK. Default `2`
	Initial pulumi.IntPtrInput `pulumi:"initial"`
	// Which HTTP method to use. Default `HEAD`
	Method pulumi.StringPtrInput `pulumi:"method"`
	// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to check
	Path pulumi.StringInput `pulumi:"path"`
	// How many Healthchecks must succeed to be considered healthy. Default `3`
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
	// Timeout in milliseconds. Default `500`
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
	Window pulumi.IntPtrInput `pulumi:"window"`
}

func (ServiceComputeHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeHealthcheck)(nil)).Elem()
}

func (i ServiceComputeHealthcheckArgs) ToServiceComputeHealthcheckOutput() ServiceComputeHealthcheckOutput {
	return i.ToServiceComputeHealthcheckOutputWithContext(context.Background())
}

func (i ServiceComputeHealthcheckArgs) ToServiceComputeHealthcheckOutputWithContext(ctx context.Context) ServiceComputeHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeHealthcheckOutput)
}

// ServiceComputeHealthcheckArrayInput is an input type that accepts ServiceComputeHealthcheckArray and ServiceComputeHealthcheckArrayOutput values.
// You can construct a concrete instance of `ServiceComputeHealthcheckArrayInput` via:
//
//          ServiceComputeHealthcheckArray{ ServiceComputeHealthcheckArgs{...} }
type ServiceComputeHealthcheckArrayInput interface {
	pulumi.Input

	ToServiceComputeHealthcheckArrayOutput() ServiceComputeHealthcheckArrayOutput
	ToServiceComputeHealthcheckArrayOutputWithContext(context.Context) ServiceComputeHealthcheckArrayOutput
}

type ServiceComputeHealthcheckArray []ServiceComputeHealthcheckInput

func (ServiceComputeHealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeHealthcheck)(nil)).Elem()
}

func (i ServiceComputeHealthcheckArray) ToServiceComputeHealthcheckArrayOutput() ServiceComputeHealthcheckArrayOutput {
	return i.ToServiceComputeHealthcheckArrayOutputWithContext(context.Background())
}

func (i ServiceComputeHealthcheckArray) ToServiceComputeHealthcheckArrayOutputWithContext(ctx context.Context) ServiceComputeHealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeHealthcheckArrayOutput)
}

type ServiceComputeHealthcheckOutput struct{ *pulumi.OutputState }

func (ServiceComputeHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeHealthcheck)(nil)).Elem()
}

func (o ServiceComputeHealthcheckOutput) ToServiceComputeHealthcheckOutput() ServiceComputeHealthcheckOutput {
	return o
}

func (o ServiceComputeHealthcheckOutput) ToServiceComputeHealthcheckOutputWithContext(ctx context.Context) ServiceComputeHealthcheckOutput {
	return o
}

// How often to run the Healthcheck in milliseconds. Default `5000`
func (o ServiceComputeHealthcheckOutput) CheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) *int { return v.CheckInterval }).(pulumi.IntPtrOutput)
}

// The status code expected from the host. Default `200`
func (o ServiceComputeHealthcheckOutput) ExpectedResponse() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) *int { return v.ExpectedResponse }).(pulumi.IntPtrOutput)
}

// The Host header to send for this Healthcheck
func (o ServiceComputeHealthcheckOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
func (o ServiceComputeHealthcheckOutput) HttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) *string { return v.HttpVersion }).(pulumi.StringPtrOutput)
}

// When loading a config, the initial number of probes to be seen as OK. Default `2`
func (o ServiceComputeHealthcheckOutput) Initial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) *int { return v.Initial }).(pulumi.IntPtrOutput)
}

// Which HTTP method to use. Default `HEAD`
func (o ServiceComputeHealthcheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeHealthcheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) string { return v.Name }).(pulumi.StringOutput)
}

// The path to check
func (o ServiceComputeHealthcheckOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) string { return v.Path }).(pulumi.StringOutput)
}

// How many Healthchecks must succeed to be considered healthy. Default `3`
func (o ServiceComputeHealthcheckOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds. Default `500`
func (o ServiceComputeHealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
func (o ServiceComputeHealthcheckOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeHealthcheck) *int { return v.Window }).(pulumi.IntPtrOutput)
}

type ServiceComputeHealthcheckArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeHealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeHealthcheck)(nil)).Elem()
}

func (o ServiceComputeHealthcheckArrayOutput) ToServiceComputeHealthcheckArrayOutput() ServiceComputeHealthcheckArrayOutput {
	return o
}

func (o ServiceComputeHealthcheckArrayOutput) ToServiceComputeHealthcheckArrayOutputWithContext(ctx context.Context) ServiceComputeHealthcheckArrayOutput {
	return o
}

func (o ServiceComputeHealthcheckArrayOutput) Index(i pulumi.IntInput) ServiceComputeHealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeHealthcheck {
		return vs[0].([]ServiceComputeHealthcheck)[vs[1].(int)]
	}).(ServiceComputeHealthcheckOutput)
}

type ServiceComputeHttpslogging struct {
	// Value of the `Content-Type` header sent with the request
	ContentType *string `pulumi:"contentType"`
	// Custom header sent with the request
	HeaderName *string `pulumi:"headerName"`
	// Value of the custom header sent with the request
	HeaderValue *string `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
	JsonFormat *string `pulumi:"jsonFormat"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `blank`
	MessageType *string `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
	Method *string `pulumi:"method"`
	// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name              string  `pulumi:"name"`
	RequestMaxBytes   *int    `pulumi:"requestMaxBytes"`
	RequestMaxEntries *int    `pulumi:"requestMaxEntries"`
	TlsCaCert         *string `pulumi:"tlsCaCert"`
	TlsClientCert     *string `pulumi:"tlsClientCert"`
	TlsClientKey      *string `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname *string `pulumi:"tlsHostname"`
	// URL that log data will be sent to. Must use the https protocol
	Url string `pulumi:"url"`
}

// ServiceComputeHttpsloggingInput is an input type that accepts ServiceComputeHttpsloggingArgs and ServiceComputeHttpsloggingOutput values.
// You can construct a concrete instance of `ServiceComputeHttpsloggingInput` via:
//
//          ServiceComputeHttpsloggingArgs{...}
type ServiceComputeHttpsloggingInput interface {
	pulumi.Input

	ToServiceComputeHttpsloggingOutput() ServiceComputeHttpsloggingOutput
	ToServiceComputeHttpsloggingOutputWithContext(context.Context) ServiceComputeHttpsloggingOutput
}

type ServiceComputeHttpsloggingArgs struct {
	// Value of the `Content-Type` header sent with the request
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Custom header sent with the request
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// Value of the custom header sent with the request
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
	JsonFormat pulumi.StringPtrInput `pulumi:"jsonFormat"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `blank`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name              pulumi.StringInput    `pulumi:"name"`
	RequestMaxBytes   pulumi.IntPtrInput    `pulumi:"requestMaxBytes"`
	RequestMaxEntries pulumi.IntPtrInput    `pulumi:"requestMaxEntries"`
	TlsCaCert         pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert     pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey      pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// URL that log data will be sent to. Must use the https protocol
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeHttpsloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeHttpslogging)(nil)).Elem()
}

func (i ServiceComputeHttpsloggingArgs) ToServiceComputeHttpsloggingOutput() ServiceComputeHttpsloggingOutput {
	return i.ToServiceComputeHttpsloggingOutputWithContext(context.Background())
}

func (i ServiceComputeHttpsloggingArgs) ToServiceComputeHttpsloggingOutputWithContext(ctx context.Context) ServiceComputeHttpsloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeHttpsloggingOutput)
}

// ServiceComputeHttpsloggingArrayInput is an input type that accepts ServiceComputeHttpsloggingArray and ServiceComputeHttpsloggingArrayOutput values.
// You can construct a concrete instance of `ServiceComputeHttpsloggingArrayInput` via:
//
//          ServiceComputeHttpsloggingArray{ ServiceComputeHttpsloggingArgs{...} }
type ServiceComputeHttpsloggingArrayInput interface {
	pulumi.Input

	ToServiceComputeHttpsloggingArrayOutput() ServiceComputeHttpsloggingArrayOutput
	ToServiceComputeHttpsloggingArrayOutputWithContext(context.Context) ServiceComputeHttpsloggingArrayOutput
}

type ServiceComputeHttpsloggingArray []ServiceComputeHttpsloggingInput

func (ServiceComputeHttpsloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeHttpslogging)(nil)).Elem()
}

func (i ServiceComputeHttpsloggingArray) ToServiceComputeHttpsloggingArrayOutput() ServiceComputeHttpsloggingArrayOutput {
	return i.ToServiceComputeHttpsloggingArrayOutputWithContext(context.Background())
}

func (i ServiceComputeHttpsloggingArray) ToServiceComputeHttpsloggingArrayOutputWithContext(ctx context.Context) ServiceComputeHttpsloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeHttpsloggingArrayOutput)
}

type ServiceComputeHttpsloggingOutput struct{ *pulumi.OutputState }

func (ServiceComputeHttpsloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeHttpslogging)(nil)).Elem()
}

func (o ServiceComputeHttpsloggingOutput) ToServiceComputeHttpsloggingOutput() ServiceComputeHttpsloggingOutput {
	return o
}

func (o ServiceComputeHttpsloggingOutput) ToServiceComputeHttpsloggingOutputWithContext(ctx context.Context) ServiceComputeHttpsloggingOutput {
	return o
}

// Value of the `Content-Type` header sent with the request
func (o ServiceComputeHttpsloggingOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Custom header sent with the request
func (o ServiceComputeHttpsloggingOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// Value of the custom header sent with the request
func (o ServiceComputeHttpsloggingOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
func (o ServiceComputeHttpsloggingOutput) JsonFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.JsonFormat }).(pulumi.StringPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `blank`
func (o ServiceComputeHttpsloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
func (o ServiceComputeHttpsloggingOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeHttpsloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceComputeHttpsloggingOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

func (o ServiceComputeHttpsloggingOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

func (o ServiceComputeHttpsloggingOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeHttpsloggingOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeHttpsloggingOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// Used during the TLS handshake to validate the certificate
func (o ServiceComputeHttpsloggingOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// URL that log data will be sent to. Must use the https protocol
func (o ServiceComputeHttpsloggingOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeHttpslogging) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeHttpsloggingArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeHttpsloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeHttpslogging)(nil)).Elem()
}

func (o ServiceComputeHttpsloggingArrayOutput) ToServiceComputeHttpsloggingArrayOutput() ServiceComputeHttpsloggingArrayOutput {
	return o
}

func (o ServiceComputeHttpsloggingArrayOutput) ToServiceComputeHttpsloggingArrayOutputWithContext(ctx context.Context) ServiceComputeHttpsloggingArrayOutput {
	return o
}

func (o ServiceComputeHttpsloggingArrayOutput) Index(i pulumi.IntInput) ServiceComputeHttpsloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeHttpslogging {
		return vs[0].([]ServiceComputeHttpslogging)[vs[1].(int)]
	}).(ServiceComputeHttpsloggingOutput)
}

type ServiceComputeLogentry struct {
	// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The port number configured in Logentries
	Port *int `pulumi:"port"`
	// Use token based authentication (https://logentries.com/doc/input-token/)
	Token string `pulumi:"token"`
	// Whether to use TLS for secure logging
	UseTls *bool `pulumi:"useTls"`
}

// ServiceComputeLogentryInput is an input type that accepts ServiceComputeLogentryArgs and ServiceComputeLogentryOutput values.
// You can construct a concrete instance of `ServiceComputeLogentryInput` via:
//
//          ServiceComputeLogentryArgs{...}
type ServiceComputeLogentryInput interface {
	pulumi.Input

	ToServiceComputeLogentryOutput() ServiceComputeLogentryOutput
	ToServiceComputeLogentryOutputWithContext(context.Context) ServiceComputeLogentryOutput
}

type ServiceComputeLogentryArgs struct {
	// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The port number configured in Logentries
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Use token based authentication (https://logentries.com/doc/input-token/)
	Token pulumi.StringInput `pulumi:"token"`
	// Whether to use TLS for secure logging
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (ServiceComputeLogentryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLogentry)(nil)).Elem()
}

func (i ServiceComputeLogentryArgs) ToServiceComputeLogentryOutput() ServiceComputeLogentryOutput {
	return i.ToServiceComputeLogentryOutputWithContext(context.Background())
}

func (i ServiceComputeLogentryArgs) ToServiceComputeLogentryOutputWithContext(ctx context.Context) ServiceComputeLogentryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLogentryOutput)
}

// ServiceComputeLogentryArrayInput is an input type that accepts ServiceComputeLogentryArray and ServiceComputeLogentryArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLogentryArrayInput` via:
//
//          ServiceComputeLogentryArray{ ServiceComputeLogentryArgs{...} }
type ServiceComputeLogentryArrayInput interface {
	pulumi.Input

	ToServiceComputeLogentryArrayOutput() ServiceComputeLogentryArrayOutput
	ToServiceComputeLogentryArrayOutputWithContext(context.Context) ServiceComputeLogentryArrayOutput
}

type ServiceComputeLogentryArray []ServiceComputeLogentryInput

func (ServiceComputeLogentryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLogentry)(nil)).Elem()
}

func (i ServiceComputeLogentryArray) ToServiceComputeLogentryArrayOutput() ServiceComputeLogentryArrayOutput {
	return i.ToServiceComputeLogentryArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLogentryArray) ToServiceComputeLogentryArrayOutputWithContext(ctx context.Context) ServiceComputeLogentryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLogentryArrayOutput)
}

type ServiceComputeLogentryOutput struct{ *pulumi.OutputState }

func (ServiceComputeLogentryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLogentry)(nil)).Elem()
}

func (o ServiceComputeLogentryOutput) ToServiceComputeLogentryOutput() ServiceComputeLogentryOutput {
	return o
}

func (o ServiceComputeLogentryOutput) ToServiceComputeLogentryOutputWithContext(ctx context.Context) ServiceComputeLogentryOutput {
	return o
}

// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLogentryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLogentry) string { return v.Name }).(pulumi.StringOutput)
}

// The port number configured in Logentries
func (o ServiceComputeLogentryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLogentry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Use token based authentication (https://logentries.com/doc/input-token/)
func (o ServiceComputeLogentryOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLogentry) string { return v.Token }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging
func (o ServiceComputeLogentryOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeLogentry) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type ServiceComputeLogentryArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLogentryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLogentry)(nil)).Elem()
}

func (o ServiceComputeLogentryArrayOutput) ToServiceComputeLogentryArrayOutput() ServiceComputeLogentryArrayOutput {
	return o
}

func (o ServiceComputeLogentryArrayOutput) ToServiceComputeLogentryArrayOutputWithContext(ctx context.Context) ServiceComputeLogentryArrayOutput {
	return o
}

func (o ServiceComputeLogentryArrayOutput) Index(i pulumi.IntInput) ServiceComputeLogentryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLogentry {
		return vs[0].([]ServiceComputeLogentry)[vs[1].(int)]
	}).(ServiceComputeLogentryOutput)
}

type ServiceComputeLoggingCloudfile struct {
	// Your Cloud File account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of your Cloud Files container
	BucketName string `pulumi:"bucketName"`
	// What level of GZIP encoding to have when dumping logs (default `0`, no compression)
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
	Region *string `pulumi:"region"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for your Cloud Files account
	User string `pulumi:"user"`
}

// ServiceComputeLoggingCloudfileInput is an input type that accepts ServiceComputeLoggingCloudfileArgs and ServiceComputeLoggingCloudfileOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingCloudfileInput` via:
//
//          ServiceComputeLoggingCloudfileArgs{...}
type ServiceComputeLoggingCloudfileInput interface {
	pulumi.Input

	ToServiceComputeLoggingCloudfileOutput() ServiceComputeLoggingCloudfileOutput
	ToServiceComputeLoggingCloudfileOutputWithContext(context.Context) ServiceComputeLoggingCloudfileOutput
}

type ServiceComputeLoggingCloudfileArgs struct {
	// Your Cloud File account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of your Cloud Files container
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// What level of GZIP encoding to have when dumping logs (default `0`, no compression)
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for your Cloud Files account
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingCloudfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingCloudfile)(nil)).Elem()
}

func (i ServiceComputeLoggingCloudfileArgs) ToServiceComputeLoggingCloudfileOutput() ServiceComputeLoggingCloudfileOutput {
	return i.ToServiceComputeLoggingCloudfileOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingCloudfileArgs) ToServiceComputeLoggingCloudfileOutputWithContext(ctx context.Context) ServiceComputeLoggingCloudfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingCloudfileOutput)
}

// ServiceComputeLoggingCloudfileArrayInput is an input type that accepts ServiceComputeLoggingCloudfileArray and ServiceComputeLoggingCloudfileArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingCloudfileArrayInput` via:
//
//          ServiceComputeLoggingCloudfileArray{ ServiceComputeLoggingCloudfileArgs{...} }
type ServiceComputeLoggingCloudfileArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingCloudfileArrayOutput() ServiceComputeLoggingCloudfileArrayOutput
	ToServiceComputeLoggingCloudfileArrayOutputWithContext(context.Context) ServiceComputeLoggingCloudfileArrayOutput
}

type ServiceComputeLoggingCloudfileArray []ServiceComputeLoggingCloudfileInput

func (ServiceComputeLoggingCloudfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingCloudfile)(nil)).Elem()
}

func (i ServiceComputeLoggingCloudfileArray) ToServiceComputeLoggingCloudfileArrayOutput() ServiceComputeLoggingCloudfileArrayOutput {
	return i.ToServiceComputeLoggingCloudfileArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingCloudfileArray) ToServiceComputeLoggingCloudfileArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingCloudfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingCloudfileArrayOutput)
}

type ServiceComputeLoggingCloudfileOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingCloudfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingCloudfile)(nil)).Elem()
}

func (o ServiceComputeLoggingCloudfileOutput) ToServiceComputeLoggingCloudfileOutput() ServiceComputeLoggingCloudfileOutput {
	return o
}

func (o ServiceComputeLoggingCloudfileOutput) ToServiceComputeLoggingCloudfileOutputWithContext(ctx context.Context) ServiceComputeLoggingCloudfileOutput {
	return o
}

// Your Cloud File account access key
func (o ServiceComputeLoggingCloudfileOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of your Cloud Files container
func (o ServiceComputeLoggingCloudfileOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) string { return v.BucketName }).(pulumi.StringOutput)
}

// What level of GZIP encoding to have when dumping logs (default `0`, no compression)
func (o ServiceComputeLoggingCloudfileOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
func (o ServiceComputeLoggingCloudfileOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingCloudfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to
func (o ServiceComputeLoggingCloudfileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceComputeLoggingCloudfileOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingCloudfileOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
func (o ServiceComputeLoggingCloudfileOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingCloudfileOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for your Cloud Files account
func (o ServiceComputeLoggingCloudfileOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingCloudfileArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingCloudfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingCloudfile)(nil)).Elem()
}

func (o ServiceComputeLoggingCloudfileArrayOutput) ToServiceComputeLoggingCloudfileArrayOutput() ServiceComputeLoggingCloudfileArrayOutput {
	return o
}

func (o ServiceComputeLoggingCloudfileArrayOutput) ToServiceComputeLoggingCloudfileArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingCloudfileArrayOutput {
	return o
}

func (o ServiceComputeLoggingCloudfileArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingCloudfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingCloudfile {
		return vs[0].([]ServiceComputeLoggingCloudfile)[vs[1].(int)]
	}).(ServiceComputeLoggingCloudfileOutput)
}

type ServiceComputeLoggingDatadog struct {
	// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region *string `pulumi:"region"`
	// The API key from your Datadog account
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingDatadogInput is an input type that accepts ServiceComputeLoggingDatadogArgs and ServiceComputeLoggingDatadogOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingDatadogInput` via:
//
//          ServiceComputeLoggingDatadogArgs{...}
type ServiceComputeLoggingDatadogInput interface {
	pulumi.Input

	ToServiceComputeLoggingDatadogOutput() ServiceComputeLoggingDatadogOutput
	ToServiceComputeLoggingDatadogOutputWithContext(context.Context) ServiceComputeLoggingDatadogOutput
}

type ServiceComputeLoggingDatadogArgs struct {
	// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The API key from your Datadog account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingDatadog)(nil)).Elem()
}

func (i ServiceComputeLoggingDatadogArgs) ToServiceComputeLoggingDatadogOutput() ServiceComputeLoggingDatadogOutput {
	return i.ToServiceComputeLoggingDatadogOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingDatadogArgs) ToServiceComputeLoggingDatadogOutputWithContext(ctx context.Context) ServiceComputeLoggingDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingDatadogOutput)
}

// ServiceComputeLoggingDatadogArrayInput is an input type that accepts ServiceComputeLoggingDatadogArray and ServiceComputeLoggingDatadogArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingDatadogArrayInput` via:
//
//          ServiceComputeLoggingDatadogArray{ ServiceComputeLoggingDatadogArgs{...} }
type ServiceComputeLoggingDatadogArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingDatadogArrayOutput() ServiceComputeLoggingDatadogArrayOutput
	ToServiceComputeLoggingDatadogArrayOutputWithContext(context.Context) ServiceComputeLoggingDatadogArrayOutput
}

type ServiceComputeLoggingDatadogArray []ServiceComputeLoggingDatadogInput

func (ServiceComputeLoggingDatadogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingDatadog)(nil)).Elem()
}

func (i ServiceComputeLoggingDatadogArray) ToServiceComputeLoggingDatadogArrayOutput() ServiceComputeLoggingDatadogArrayOutput {
	return i.ToServiceComputeLoggingDatadogArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingDatadogArray) ToServiceComputeLoggingDatadogArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingDatadogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingDatadogArrayOutput)
}

type ServiceComputeLoggingDatadogOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingDatadog)(nil)).Elem()
}

func (o ServiceComputeLoggingDatadogOutput) ToServiceComputeLoggingDatadogOutput() ServiceComputeLoggingDatadogOutput {
	return o
}

func (o ServiceComputeLoggingDatadogOutput) ToServiceComputeLoggingDatadogOutputWithContext(ctx context.Context) ServiceComputeLoggingDatadogOutput {
	return o
}

// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingDatadogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDatadog) string { return v.Name }).(pulumi.StringOutput)
}

// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
func (o ServiceComputeLoggingDatadogOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDatadog) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The API key from your Datadog account
func (o ServiceComputeLoggingDatadogOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDatadog) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingDatadogArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingDatadogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingDatadog)(nil)).Elem()
}

func (o ServiceComputeLoggingDatadogArrayOutput) ToServiceComputeLoggingDatadogArrayOutput() ServiceComputeLoggingDatadogArrayOutput {
	return o
}

func (o ServiceComputeLoggingDatadogArrayOutput) ToServiceComputeLoggingDatadogArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingDatadogArrayOutput {
	return o
}

func (o ServiceComputeLoggingDatadogArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingDatadogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingDatadog {
		return vs[0].([]ServiceComputeLoggingDatadog)[vs[1].(int)]
	}).(ServiceComputeLoggingDatadogOutput)
}

type ServiceComputeLoggingDigitalocean struct {
	// Your DigitalOcean Spaces account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of the DigitalOcean Space
	BucketName string `pulumi:"bucketName"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domain *string `pulumi:"domain"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// Your DigitalOcean Spaces account secret key
	SecretKey string `pulumi:"secretKey"`
	// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceComputeLoggingDigitaloceanInput is an input type that accepts ServiceComputeLoggingDigitaloceanArgs and ServiceComputeLoggingDigitaloceanOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingDigitaloceanInput` via:
//
//          ServiceComputeLoggingDigitaloceanArgs{...}
type ServiceComputeLoggingDigitaloceanInput interface {
	pulumi.Input

	ToServiceComputeLoggingDigitaloceanOutput() ServiceComputeLoggingDigitaloceanOutput
	ToServiceComputeLoggingDigitaloceanOutputWithContext(context.Context) ServiceComputeLoggingDigitaloceanOutput
}

type ServiceComputeLoggingDigitaloceanArgs struct {
	// Your DigitalOcean Spaces account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of the DigitalOcean Space
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// Your DigitalOcean Spaces account secret key
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceComputeLoggingDigitaloceanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingDigitalocean)(nil)).Elem()
}

func (i ServiceComputeLoggingDigitaloceanArgs) ToServiceComputeLoggingDigitaloceanOutput() ServiceComputeLoggingDigitaloceanOutput {
	return i.ToServiceComputeLoggingDigitaloceanOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingDigitaloceanArgs) ToServiceComputeLoggingDigitaloceanOutputWithContext(ctx context.Context) ServiceComputeLoggingDigitaloceanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingDigitaloceanOutput)
}

// ServiceComputeLoggingDigitaloceanArrayInput is an input type that accepts ServiceComputeLoggingDigitaloceanArray and ServiceComputeLoggingDigitaloceanArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingDigitaloceanArrayInput` via:
//
//          ServiceComputeLoggingDigitaloceanArray{ ServiceComputeLoggingDigitaloceanArgs{...} }
type ServiceComputeLoggingDigitaloceanArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingDigitaloceanArrayOutput() ServiceComputeLoggingDigitaloceanArrayOutput
	ToServiceComputeLoggingDigitaloceanArrayOutputWithContext(context.Context) ServiceComputeLoggingDigitaloceanArrayOutput
}

type ServiceComputeLoggingDigitaloceanArray []ServiceComputeLoggingDigitaloceanInput

func (ServiceComputeLoggingDigitaloceanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingDigitalocean)(nil)).Elem()
}

func (i ServiceComputeLoggingDigitaloceanArray) ToServiceComputeLoggingDigitaloceanArrayOutput() ServiceComputeLoggingDigitaloceanArrayOutput {
	return i.ToServiceComputeLoggingDigitaloceanArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingDigitaloceanArray) ToServiceComputeLoggingDigitaloceanArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingDigitaloceanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingDigitaloceanArrayOutput)
}

type ServiceComputeLoggingDigitaloceanOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingDigitaloceanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingDigitalocean)(nil)).Elem()
}

func (o ServiceComputeLoggingDigitaloceanOutput) ToServiceComputeLoggingDigitaloceanOutput() ServiceComputeLoggingDigitaloceanOutput {
	return o
}

func (o ServiceComputeLoggingDigitaloceanOutput) ToServiceComputeLoggingDigitaloceanOutputWithContext(ctx context.Context) ServiceComputeLoggingDigitaloceanOutput {
	return o
}

// Your DigitalOcean Spaces account access key
func (o ServiceComputeLoggingDigitaloceanOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of the DigitalOcean Space
func (o ServiceComputeLoggingDigitaloceanOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) string { return v.BucketName }).(pulumi.StringOutput)
}

// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
func (o ServiceComputeLoggingDigitaloceanOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
func (o ServiceComputeLoggingDigitaloceanOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
func (o ServiceComputeLoggingDigitaloceanOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingDigitaloceanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to
func (o ServiceComputeLoggingDigitaloceanOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceComputeLoggingDigitaloceanOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingDigitaloceanOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// Your DigitalOcean Spaces account secret key
func (o ServiceComputeLoggingDigitaloceanOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) string { return v.SecretKey }).(pulumi.StringOutput)
}

// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingDigitaloceanOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingDigitaloceanArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingDigitaloceanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingDigitalocean)(nil)).Elem()
}

func (o ServiceComputeLoggingDigitaloceanArrayOutput) ToServiceComputeLoggingDigitaloceanArrayOutput() ServiceComputeLoggingDigitaloceanArrayOutput {
	return o
}

func (o ServiceComputeLoggingDigitaloceanArrayOutput) ToServiceComputeLoggingDigitaloceanArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingDigitaloceanArrayOutput {
	return o
}

func (o ServiceComputeLoggingDigitaloceanArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingDigitaloceanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingDigitalocean {
		return vs[0].([]ServiceComputeLoggingDigitalocean)[vs[1].(int)]
	}).(ServiceComputeLoggingDigitaloceanOutput)
}

type ServiceComputeLoggingElasticsearch struct {
	// The name of the Elasticsearch index to send documents (logs) to
	Index string `pulumi:"index"`
	// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// BasicAuth password for Elasticsearch
	Password *string `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
	Pipeline          *string `pulumi:"pipeline"`
	RequestMaxBytes   *int    `pulumi:"requestMaxBytes"`
	RequestMaxEntries *int    `pulumi:"requestMaxEntries"`
	TlsCaCert         *string `pulumi:"tlsCaCert"`
	TlsClientCert     *string `pulumi:"tlsClientCert"`
	TlsClientKey      *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to
	Url string `pulumi:"url"`
	// BasicAuth username for Elasticsearch
	User *string `pulumi:"user"`
}

// ServiceComputeLoggingElasticsearchInput is an input type that accepts ServiceComputeLoggingElasticsearchArgs and ServiceComputeLoggingElasticsearchOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingElasticsearchInput` via:
//
//          ServiceComputeLoggingElasticsearchArgs{...}
type ServiceComputeLoggingElasticsearchInput interface {
	pulumi.Input

	ToServiceComputeLoggingElasticsearchOutput() ServiceComputeLoggingElasticsearchOutput
	ToServiceComputeLoggingElasticsearchOutputWithContext(context.Context) ServiceComputeLoggingElasticsearchOutput
}

type ServiceComputeLoggingElasticsearchArgs struct {
	// The name of the Elasticsearch index to send documents (logs) to
	Index pulumi.StringInput `pulumi:"index"`
	// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// BasicAuth password for Elasticsearch
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
	Pipeline          pulumi.StringPtrInput `pulumi:"pipeline"`
	RequestMaxBytes   pulumi.IntPtrInput    `pulumi:"requestMaxBytes"`
	RequestMaxEntries pulumi.IntPtrInput    `pulumi:"requestMaxEntries"`
	TlsCaCert         pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert     pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey      pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
	// BasicAuth username for Elasticsearch
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceComputeLoggingElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingElasticsearch)(nil)).Elem()
}

func (i ServiceComputeLoggingElasticsearchArgs) ToServiceComputeLoggingElasticsearchOutput() ServiceComputeLoggingElasticsearchOutput {
	return i.ToServiceComputeLoggingElasticsearchOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingElasticsearchArgs) ToServiceComputeLoggingElasticsearchOutputWithContext(ctx context.Context) ServiceComputeLoggingElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingElasticsearchOutput)
}

// ServiceComputeLoggingElasticsearchArrayInput is an input type that accepts ServiceComputeLoggingElasticsearchArray and ServiceComputeLoggingElasticsearchArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingElasticsearchArrayInput` via:
//
//          ServiceComputeLoggingElasticsearchArray{ ServiceComputeLoggingElasticsearchArgs{...} }
type ServiceComputeLoggingElasticsearchArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingElasticsearchArrayOutput() ServiceComputeLoggingElasticsearchArrayOutput
	ToServiceComputeLoggingElasticsearchArrayOutputWithContext(context.Context) ServiceComputeLoggingElasticsearchArrayOutput
}

type ServiceComputeLoggingElasticsearchArray []ServiceComputeLoggingElasticsearchInput

func (ServiceComputeLoggingElasticsearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingElasticsearch)(nil)).Elem()
}

func (i ServiceComputeLoggingElasticsearchArray) ToServiceComputeLoggingElasticsearchArrayOutput() ServiceComputeLoggingElasticsearchArrayOutput {
	return i.ToServiceComputeLoggingElasticsearchArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingElasticsearchArray) ToServiceComputeLoggingElasticsearchArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingElasticsearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingElasticsearchArrayOutput)
}

type ServiceComputeLoggingElasticsearchOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingElasticsearch)(nil)).Elem()
}

func (o ServiceComputeLoggingElasticsearchOutput) ToServiceComputeLoggingElasticsearchOutput() ServiceComputeLoggingElasticsearchOutput {
	return o
}

func (o ServiceComputeLoggingElasticsearchOutput) ToServiceComputeLoggingElasticsearchOutputWithContext(ctx context.Context) ServiceComputeLoggingElasticsearchOutput {
	return o
}

// The name of the Elasticsearch index to send documents (logs) to
func (o ServiceComputeLoggingElasticsearchOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) string { return v.Index }).(pulumi.StringOutput)
}

// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingElasticsearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) string { return v.Name }).(pulumi.StringOutput)
}

// BasicAuth password for Elasticsearch
func (o ServiceComputeLoggingElasticsearchOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
func (o ServiceComputeLoggingElasticsearchOutput) Pipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.Pipeline }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeLoggingElasticsearchOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

func (o ServiceComputeLoggingElasticsearchOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

func (o ServiceComputeLoggingElasticsearchOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeLoggingElasticsearchOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeLoggingElasticsearchOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
func (o ServiceComputeLoggingElasticsearchOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Elasticsearch URL to stream logs to
func (o ServiceComputeLoggingElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// BasicAuth username for Elasticsearch
func (o ServiceComputeLoggingElasticsearchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingElasticsearchArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingElasticsearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingElasticsearch)(nil)).Elem()
}

func (o ServiceComputeLoggingElasticsearchArrayOutput) ToServiceComputeLoggingElasticsearchArrayOutput() ServiceComputeLoggingElasticsearchArrayOutput {
	return o
}

func (o ServiceComputeLoggingElasticsearchArrayOutput) ToServiceComputeLoggingElasticsearchArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingElasticsearchArrayOutput {
	return o
}

func (o ServiceComputeLoggingElasticsearchArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingElasticsearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingElasticsearch {
		return vs[0].([]ServiceComputeLoggingElasticsearch)[vs[1].(int)]
	}).(ServiceComputeLoggingElasticsearchOutput)
}

type ServiceComputeLoggingFtp struct {
	// The FTP address to stream logs to
	Address string `pulumi:"address"`
	// Gzip Compression level. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted (default: `classic`)
	MessageType *string `pulumi:"messageType"`
	// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The password for the server (for anonymous use an email address)
	Password string `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default `3600`)
	Period *int `pulumi:"period"`
	// The port number. Default: `21`
	Port *int `pulumi:"port"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for the server (can be `anonymous`)
	User string `pulumi:"user"`
}

// ServiceComputeLoggingFtpInput is an input type that accepts ServiceComputeLoggingFtpArgs and ServiceComputeLoggingFtpOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingFtpInput` via:
//
//          ServiceComputeLoggingFtpArgs{...}
type ServiceComputeLoggingFtpInput interface {
	pulumi.Input

	ToServiceComputeLoggingFtpOutput() ServiceComputeLoggingFtpOutput
	ToServiceComputeLoggingFtpOutputWithContext(context.Context) ServiceComputeLoggingFtpOutput
}

type ServiceComputeLoggingFtpArgs struct {
	// The FTP address to stream logs to
	Address pulumi.StringInput `pulumi:"address"`
	// Gzip Compression level. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted (default: `classic`)
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server (for anonymous use an email address)
	Password pulumi.StringInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The port number. Default: `21`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for the server (can be `anonymous`)
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingFtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingFtp)(nil)).Elem()
}

func (i ServiceComputeLoggingFtpArgs) ToServiceComputeLoggingFtpOutput() ServiceComputeLoggingFtpOutput {
	return i.ToServiceComputeLoggingFtpOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingFtpArgs) ToServiceComputeLoggingFtpOutputWithContext(ctx context.Context) ServiceComputeLoggingFtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingFtpOutput)
}

// ServiceComputeLoggingFtpArrayInput is an input type that accepts ServiceComputeLoggingFtpArray and ServiceComputeLoggingFtpArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingFtpArrayInput` via:
//
//          ServiceComputeLoggingFtpArray{ ServiceComputeLoggingFtpArgs{...} }
type ServiceComputeLoggingFtpArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingFtpArrayOutput() ServiceComputeLoggingFtpArrayOutput
	ToServiceComputeLoggingFtpArrayOutputWithContext(context.Context) ServiceComputeLoggingFtpArrayOutput
}

type ServiceComputeLoggingFtpArray []ServiceComputeLoggingFtpInput

func (ServiceComputeLoggingFtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingFtp)(nil)).Elem()
}

func (i ServiceComputeLoggingFtpArray) ToServiceComputeLoggingFtpArrayOutput() ServiceComputeLoggingFtpArrayOutput {
	return i.ToServiceComputeLoggingFtpArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingFtpArray) ToServiceComputeLoggingFtpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingFtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingFtpArrayOutput)
}

type ServiceComputeLoggingFtpOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingFtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingFtp)(nil)).Elem()
}

func (o ServiceComputeLoggingFtpOutput) ToServiceComputeLoggingFtpOutput() ServiceComputeLoggingFtpOutput {
	return o
}

func (o ServiceComputeLoggingFtpOutput) ToServiceComputeLoggingFtpOutputWithContext(ctx context.Context) ServiceComputeLoggingFtpOutput {
	return o
}

// The FTP address to stream logs to
func (o ServiceComputeLoggingFtpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.Address }).(pulumi.StringOutput)
}

// Gzip Compression level. Default `0`
func (o ServiceComputeLoggingFtpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted (default: `classic`)
func (o ServiceComputeLoggingFtpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingFtpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server (for anonymous use an email address)
func (o ServiceComputeLoggingFtpOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.Password }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in `/` then it is treated as a directory
func (o ServiceComputeLoggingFtpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently the logs should be transferred, in seconds (Default `3600`)
func (o ServiceComputeLoggingFtpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The port number. Default: `21`
func (o ServiceComputeLoggingFtpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingFtpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingFtpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for the server (can be `anonymous`)
func (o ServiceComputeLoggingFtpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingFtpArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingFtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingFtp)(nil)).Elem()
}

func (o ServiceComputeLoggingFtpArrayOutput) ToServiceComputeLoggingFtpArrayOutput() ServiceComputeLoggingFtpArrayOutput {
	return o
}

func (o ServiceComputeLoggingFtpArrayOutput) ToServiceComputeLoggingFtpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingFtpArrayOutput {
	return o
}

func (o ServiceComputeLoggingFtpArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingFtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingFtp {
		return vs[0].([]ServiceComputeLoggingFtp)[vs[1].(int)]
	}).(ServiceComputeLoggingFtpOutput)
}

type ServiceComputeLoggingGooglepubsub struct {
	// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The ID of your Google Cloud Platform project
	ProjectId string `pulumi:"projectId"`
	// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
	SecretKey string `pulumi:"secretKey"`
	// The Google Cloud Pub/Sub topic to which logs will be published
	Topic string `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
	User string `pulumi:"user"`
}

// ServiceComputeLoggingGooglepubsubInput is an input type that accepts ServiceComputeLoggingGooglepubsubArgs and ServiceComputeLoggingGooglepubsubOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingGooglepubsubInput` via:
//
//          ServiceComputeLoggingGooglepubsubArgs{...}
type ServiceComputeLoggingGooglepubsubInput interface {
	pulumi.Input

	ToServiceComputeLoggingGooglepubsubOutput() ServiceComputeLoggingGooglepubsubOutput
	ToServiceComputeLoggingGooglepubsubOutputWithContext(context.Context) ServiceComputeLoggingGooglepubsubOutput
}

type ServiceComputeLoggingGooglepubsubArgs struct {
	// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of your Google Cloud Platform project
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The Google Cloud Pub/Sub topic to which logs will be published
	Topic pulumi.StringInput `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingGooglepubsubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingGooglepubsub)(nil)).Elem()
}

func (i ServiceComputeLoggingGooglepubsubArgs) ToServiceComputeLoggingGooglepubsubOutput() ServiceComputeLoggingGooglepubsubOutput {
	return i.ToServiceComputeLoggingGooglepubsubOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingGooglepubsubArgs) ToServiceComputeLoggingGooglepubsubOutputWithContext(ctx context.Context) ServiceComputeLoggingGooglepubsubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingGooglepubsubOutput)
}

// ServiceComputeLoggingGooglepubsubArrayInput is an input type that accepts ServiceComputeLoggingGooglepubsubArray and ServiceComputeLoggingGooglepubsubArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingGooglepubsubArrayInput` via:
//
//          ServiceComputeLoggingGooglepubsubArray{ ServiceComputeLoggingGooglepubsubArgs{...} }
type ServiceComputeLoggingGooglepubsubArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingGooglepubsubArrayOutput() ServiceComputeLoggingGooglepubsubArrayOutput
	ToServiceComputeLoggingGooglepubsubArrayOutputWithContext(context.Context) ServiceComputeLoggingGooglepubsubArrayOutput
}

type ServiceComputeLoggingGooglepubsubArray []ServiceComputeLoggingGooglepubsubInput

func (ServiceComputeLoggingGooglepubsubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingGooglepubsub)(nil)).Elem()
}

func (i ServiceComputeLoggingGooglepubsubArray) ToServiceComputeLoggingGooglepubsubArrayOutput() ServiceComputeLoggingGooglepubsubArrayOutput {
	return i.ToServiceComputeLoggingGooglepubsubArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingGooglepubsubArray) ToServiceComputeLoggingGooglepubsubArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingGooglepubsubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingGooglepubsubArrayOutput)
}

type ServiceComputeLoggingGooglepubsubOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingGooglepubsubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingGooglepubsub)(nil)).Elem()
}

func (o ServiceComputeLoggingGooglepubsubOutput) ToServiceComputeLoggingGooglepubsubOutput() ServiceComputeLoggingGooglepubsubOutput {
	return o
}

func (o ServiceComputeLoggingGooglepubsubOutput) ToServiceComputeLoggingGooglepubsubOutputWithContext(ctx context.Context) ServiceComputeLoggingGooglepubsubOutput {
	return o
}

// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingGooglepubsubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of your Google Cloud Platform project
func (o ServiceComputeLoggingGooglepubsubOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
func (o ServiceComputeLoggingGooglepubsubOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The Google Cloud Pub/Sub topic to which logs will be published
func (o ServiceComputeLoggingGooglepubsubOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.Topic }).(pulumi.StringOutput)
}

// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
func (o ServiceComputeLoggingGooglepubsubOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingGooglepubsubArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingGooglepubsubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingGooglepubsub)(nil)).Elem()
}

func (o ServiceComputeLoggingGooglepubsubArrayOutput) ToServiceComputeLoggingGooglepubsubArrayOutput() ServiceComputeLoggingGooglepubsubArrayOutput {
	return o
}

func (o ServiceComputeLoggingGooglepubsubArrayOutput) ToServiceComputeLoggingGooglepubsubArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingGooglepubsubArrayOutput {
	return o
}

func (o ServiceComputeLoggingGooglepubsubArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingGooglepubsubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingGooglepubsub {
		return vs[0].([]ServiceComputeLoggingGooglepubsub)[vs[1].(int)]
	}).(ServiceComputeLoggingGooglepubsubOutput)
}

type ServiceComputeLoggingHeroku struct {
	// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
	Token string `pulumi:"token"`
	// The URL to stream logs to
	Url string `pulumi:"url"`
}

// ServiceComputeLoggingHerokuInput is an input type that accepts ServiceComputeLoggingHerokuArgs and ServiceComputeLoggingHerokuOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHerokuInput` via:
//
//          ServiceComputeLoggingHerokuArgs{...}
type ServiceComputeLoggingHerokuInput interface {
	pulumi.Input

	ToServiceComputeLoggingHerokuOutput() ServiceComputeLoggingHerokuOutput
	ToServiceComputeLoggingHerokuOutputWithContext(context.Context) ServiceComputeLoggingHerokuOutput
}

type ServiceComputeLoggingHerokuArgs struct {
	// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
	Token pulumi.StringInput `pulumi:"token"`
	// The URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeLoggingHerokuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHeroku)(nil)).Elem()
}

func (i ServiceComputeLoggingHerokuArgs) ToServiceComputeLoggingHerokuOutput() ServiceComputeLoggingHerokuOutput {
	return i.ToServiceComputeLoggingHerokuOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHerokuArgs) ToServiceComputeLoggingHerokuOutputWithContext(ctx context.Context) ServiceComputeLoggingHerokuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHerokuOutput)
}

// ServiceComputeLoggingHerokuArrayInput is an input type that accepts ServiceComputeLoggingHerokuArray and ServiceComputeLoggingHerokuArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHerokuArrayInput` via:
//
//          ServiceComputeLoggingHerokuArray{ ServiceComputeLoggingHerokuArgs{...} }
type ServiceComputeLoggingHerokuArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingHerokuArrayOutput() ServiceComputeLoggingHerokuArrayOutput
	ToServiceComputeLoggingHerokuArrayOutputWithContext(context.Context) ServiceComputeLoggingHerokuArrayOutput
}

type ServiceComputeLoggingHerokuArray []ServiceComputeLoggingHerokuInput

func (ServiceComputeLoggingHerokuArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHeroku)(nil)).Elem()
}

func (i ServiceComputeLoggingHerokuArray) ToServiceComputeLoggingHerokuArrayOutput() ServiceComputeLoggingHerokuArrayOutput {
	return i.ToServiceComputeLoggingHerokuArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHerokuArray) ToServiceComputeLoggingHerokuArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHerokuArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHerokuArrayOutput)
}

type ServiceComputeLoggingHerokuOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHerokuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHeroku)(nil)).Elem()
}

func (o ServiceComputeLoggingHerokuOutput) ToServiceComputeLoggingHerokuOutput() ServiceComputeLoggingHerokuOutput {
	return o
}

func (o ServiceComputeLoggingHerokuOutput) ToServiceComputeLoggingHerokuOutputWithContext(ctx context.Context) ServiceComputeLoggingHerokuOutput {
	return o
}

// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingHerokuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHeroku) string { return v.Name }).(pulumi.StringOutput)
}

// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
func (o ServiceComputeLoggingHerokuOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHeroku) string { return v.Token }).(pulumi.StringOutput)
}

// The URL to stream logs to
func (o ServiceComputeLoggingHerokuOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHeroku) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeLoggingHerokuArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHerokuArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHeroku)(nil)).Elem()
}

func (o ServiceComputeLoggingHerokuArrayOutput) ToServiceComputeLoggingHerokuArrayOutput() ServiceComputeLoggingHerokuArrayOutput {
	return o
}

func (o ServiceComputeLoggingHerokuArrayOutput) ToServiceComputeLoggingHerokuArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHerokuArrayOutput {
	return o
}

func (o ServiceComputeLoggingHerokuArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingHerokuOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingHeroku {
		return vs[0].([]ServiceComputeLoggingHeroku)[vs[1].(int)]
	}).(ServiceComputeLoggingHerokuOutput)
}

type ServiceComputeLoggingHoneycomb struct {
	// The Honeycomb Dataset you want to log to
	Dataset string `pulumi:"dataset"`
	// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The Write Key from the Account page of your Honeycomb account
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingHoneycombInput is an input type that accepts ServiceComputeLoggingHoneycombArgs and ServiceComputeLoggingHoneycombOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHoneycombInput` via:
//
//          ServiceComputeLoggingHoneycombArgs{...}
type ServiceComputeLoggingHoneycombInput interface {
	pulumi.Input

	ToServiceComputeLoggingHoneycombOutput() ServiceComputeLoggingHoneycombOutput
	ToServiceComputeLoggingHoneycombOutputWithContext(context.Context) ServiceComputeLoggingHoneycombOutput
}

type ServiceComputeLoggingHoneycombArgs struct {
	// The Honeycomb Dataset you want to log to
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The Write Key from the Account page of your Honeycomb account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingHoneycombArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHoneycomb)(nil)).Elem()
}

func (i ServiceComputeLoggingHoneycombArgs) ToServiceComputeLoggingHoneycombOutput() ServiceComputeLoggingHoneycombOutput {
	return i.ToServiceComputeLoggingHoneycombOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHoneycombArgs) ToServiceComputeLoggingHoneycombOutputWithContext(ctx context.Context) ServiceComputeLoggingHoneycombOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHoneycombOutput)
}

// ServiceComputeLoggingHoneycombArrayInput is an input type that accepts ServiceComputeLoggingHoneycombArray and ServiceComputeLoggingHoneycombArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHoneycombArrayInput` via:
//
//          ServiceComputeLoggingHoneycombArray{ ServiceComputeLoggingHoneycombArgs{...} }
type ServiceComputeLoggingHoneycombArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingHoneycombArrayOutput() ServiceComputeLoggingHoneycombArrayOutput
	ToServiceComputeLoggingHoneycombArrayOutputWithContext(context.Context) ServiceComputeLoggingHoneycombArrayOutput
}

type ServiceComputeLoggingHoneycombArray []ServiceComputeLoggingHoneycombInput

func (ServiceComputeLoggingHoneycombArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHoneycomb)(nil)).Elem()
}

func (i ServiceComputeLoggingHoneycombArray) ToServiceComputeLoggingHoneycombArrayOutput() ServiceComputeLoggingHoneycombArrayOutput {
	return i.ToServiceComputeLoggingHoneycombArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHoneycombArray) ToServiceComputeLoggingHoneycombArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHoneycombArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHoneycombArrayOutput)
}

type ServiceComputeLoggingHoneycombOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHoneycombOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHoneycomb)(nil)).Elem()
}

func (o ServiceComputeLoggingHoneycombOutput) ToServiceComputeLoggingHoneycombOutput() ServiceComputeLoggingHoneycombOutput {
	return o
}

func (o ServiceComputeLoggingHoneycombOutput) ToServiceComputeLoggingHoneycombOutputWithContext(ctx context.Context) ServiceComputeLoggingHoneycombOutput {
	return o
}

// The Honeycomb Dataset you want to log to
func (o ServiceComputeLoggingHoneycombOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHoneycomb) string { return v.Dataset }).(pulumi.StringOutput)
}

// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingHoneycombOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHoneycomb) string { return v.Name }).(pulumi.StringOutput)
}

// The Write Key from the Account page of your Honeycomb account
func (o ServiceComputeLoggingHoneycombOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHoneycomb) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingHoneycombArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHoneycombArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHoneycomb)(nil)).Elem()
}

func (o ServiceComputeLoggingHoneycombArrayOutput) ToServiceComputeLoggingHoneycombArrayOutput() ServiceComputeLoggingHoneycombArrayOutput {
	return o
}

func (o ServiceComputeLoggingHoneycombArrayOutput) ToServiceComputeLoggingHoneycombArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHoneycombArrayOutput {
	return o
}

func (o ServiceComputeLoggingHoneycombArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingHoneycombOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingHoneycomb {
		return vs[0].([]ServiceComputeLoggingHoneycomb)[vs[1].(int)]
	}).(ServiceComputeLoggingHoneycombOutput)
}

type ServiceComputeLoggingKafka struct {
	// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
	AuthMethod *string `pulumi:"authMethod"`
	// A comma-separated list of IP addresses or hostnames of Kafka brokers
	Brokers string `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
	CompressionCodec *string `pulumi:"compressionCodec"`
	// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name            string `pulumi:"name"`
	ParseLogKeyvals *bool  `pulumi:"parseLogKeyvals"`
	// SASL Pass
	Password        *string `pulumi:"password"`
	RequestMaxBytes *int    `pulumi:"requestMaxBytes"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1`	Wait for all in-sync replicas to respond
	RequiredAcks  *string `pulumi:"requiredAcks"`
	TlsCaCert     *string `pulumi:"tlsCaCert"`
	TlsClientCert *string `pulumi:"tlsClientCert"`
	TlsClientKey  *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to
	Topic string `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either `true` or `false`
	UseTls *bool `pulumi:"useTls"`
	// SASL User
	User *string `pulumi:"user"`
}

// ServiceComputeLoggingKafkaInput is an input type that accepts ServiceComputeLoggingKafkaArgs and ServiceComputeLoggingKafkaOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingKafkaInput` via:
//
//          ServiceComputeLoggingKafkaArgs{...}
type ServiceComputeLoggingKafkaInput interface {
	pulumi.Input

	ToServiceComputeLoggingKafkaOutput() ServiceComputeLoggingKafkaOutput
	ToServiceComputeLoggingKafkaOutputWithContext(context.Context) ServiceComputeLoggingKafkaOutput
}

type ServiceComputeLoggingKafkaArgs struct {
	// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
	AuthMethod pulumi.StringPtrInput `pulumi:"authMethod"`
	// A comma-separated list of IP addresses or hostnames of Kafka brokers
	Brokers pulumi.StringInput `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name            pulumi.StringInput  `pulumi:"name"`
	ParseLogKeyvals pulumi.BoolPtrInput `pulumi:"parseLogKeyvals"`
	// SASL Pass
	Password        pulumi.StringPtrInput `pulumi:"password"`
	RequestMaxBytes pulumi.IntPtrInput    `pulumi:"requestMaxBytes"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1`	Wait for all in-sync replicas to respond
	RequiredAcks  pulumi.StringPtrInput `pulumi:"requiredAcks"`
	TlsCaCert     pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey  pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to
	Topic pulumi.StringInput `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either `true` or `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
	// SASL User
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceComputeLoggingKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingKafka)(nil)).Elem()
}

func (i ServiceComputeLoggingKafkaArgs) ToServiceComputeLoggingKafkaOutput() ServiceComputeLoggingKafkaOutput {
	return i.ToServiceComputeLoggingKafkaOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingKafkaArgs) ToServiceComputeLoggingKafkaOutputWithContext(ctx context.Context) ServiceComputeLoggingKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingKafkaOutput)
}

// ServiceComputeLoggingKafkaArrayInput is an input type that accepts ServiceComputeLoggingKafkaArray and ServiceComputeLoggingKafkaArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingKafkaArrayInput` via:
//
//          ServiceComputeLoggingKafkaArray{ ServiceComputeLoggingKafkaArgs{...} }
type ServiceComputeLoggingKafkaArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingKafkaArrayOutput() ServiceComputeLoggingKafkaArrayOutput
	ToServiceComputeLoggingKafkaArrayOutputWithContext(context.Context) ServiceComputeLoggingKafkaArrayOutput
}

type ServiceComputeLoggingKafkaArray []ServiceComputeLoggingKafkaInput

func (ServiceComputeLoggingKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingKafka)(nil)).Elem()
}

func (i ServiceComputeLoggingKafkaArray) ToServiceComputeLoggingKafkaArrayOutput() ServiceComputeLoggingKafkaArrayOutput {
	return i.ToServiceComputeLoggingKafkaArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingKafkaArray) ToServiceComputeLoggingKafkaArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingKafkaArrayOutput)
}

type ServiceComputeLoggingKafkaOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingKafka)(nil)).Elem()
}

func (o ServiceComputeLoggingKafkaOutput) ToServiceComputeLoggingKafkaOutput() ServiceComputeLoggingKafkaOutput {
	return o
}

func (o ServiceComputeLoggingKafkaOutput) ToServiceComputeLoggingKafkaOutputWithContext(ctx context.Context) ServiceComputeLoggingKafkaOutput {
	return o
}

// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
func (o ServiceComputeLoggingKafkaOutput) AuthMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.AuthMethod }).(pulumi.StringPtrOutput)
}

// A comma-separated list of IP addresses or hostnames of Kafka brokers
func (o ServiceComputeLoggingKafkaOutput) Brokers() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) string { return v.Brokers }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
func (o ServiceComputeLoggingKafkaOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingKafkaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceComputeLoggingKafkaOutput) ParseLogKeyvals() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *bool { return v.ParseLogKeyvals }).(pulumi.BoolPtrOutput)
}

// SASL Pass
func (o ServiceComputeLoggingKafkaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeLoggingKafkaOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1`	Wait for all in-sync replicas to respond
func (o ServiceComputeLoggingKafkaOutput) RequiredAcks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.RequiredAcks }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeLoggingKafkaOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeLoggingKafkaOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeLoggingKafkaOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
func (o ServiceComputeLoggingKafkaOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Kafka topic to send logs to
func (o ServiceComputeLoggingKafkaOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) string { return v.Topic }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging. Can be either `true` or `false`
func (o ServiceComputeLoggingKafkaOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

// SASL User
func (o ServiceComputeLoggingKafkaOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingKafkaArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingKafka)(nil)).Elem()
}

func (o ServiceComputeLoggingKafkaArrayOutput) ToServiceComputeLoggingKafkaArrayOutput() ServiceComputeLoggingKafkaArrayOutput {
	return o
}

func (o ServiceComputeLoggingKafkaArrayOutput) ToServiceComputeLoggingKafkaArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingKafkaArrayOutput {
	return o
}

func (o ServiceComputeLoggingKafkaArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingKafka {
		return vs[0].([]ServiceComputeLoggingKafka)[vs[1].(int)]
	}).(ServiceComputeLoggingKafkaOutput)
}

type ServiceComputeLoggingKinese struct {
	// The AWS access key to be used to write to the stream
	AccessKey string `pulumi:"accessKey"`
	// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The AWS region the stream resides in. (Default: `us-east-1`)
	Region *string `pulumi:"region"`
	// The AWS secret access key to authenticate with
	SecretKey string `pulumi:"secretKey"`
	// The Kinesis stream name
	Topic string `pulumi:"topic"`
}

// ServiceComputeLoggingKineseInput is an input type that accepts ServiceComputeLoggingKineseArgs and ServiceComputeLoggingKineseOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingKineseInput` via:
//
//          ServiceComputeLoggingKineseArgs{...}
type ServiceComputeLoggingKineseInput interface {
	pulumi.Input

	ToServiceComputeLoggingKineseOutput() ServiceComputeLoggingKineseOutput
	ToServiceComputeLoggingKineseOutputWithContext(context.Context) ServiceComputeLoggingKineseOutput
}

type ServiceComputeLoggingKineseArgs struct {
	// The AWS access key to be used to write to the stream
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS region the stream resides in. (Default: `us-east-1`)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The AWS secret access key to authenticate with
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The Kinesis stream name
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (ServiceComputeLoggingKineseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingKinese)(nil)).Elem()
}

func (i ServiceComputeLoggingKineseArgs) ToServiceComputeLoggingKineseOutput() ServiceComputeLoggingKineseOutput {
	return i.ToServiceComputeLoggingKineseOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingKineseArgs) ToServiceComputeLoggingKineseOutputWithContext(ctx context.Context) ServiceComputeLoggingKineseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingKineseOutput)
}

// ServiceComputeLoggingKineseArrayInput is an input type that accepts ServiceComputeLoggingKineseArray and ServiceComputeLoggingKineseArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingKineseArrayInput` via:
//
//          ServiceComputeLoggingKineseArray{ ServiceComputeLoggingKineseArgs{...} }
type ServiceComputeLoggingKineseArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingKineseArrayOutput() ServiceComputeLoggingKineseArrayOutput
	ToServiceComputeLoggingKineseArrayOutputWithContext(context.Context) ServiceComputeLoggingKineseArrayOutput
}

type ServiceComputeLoggingKineseArray []ServiceComputeLoggingKineseInput

func (ServiceComputeLoggingKineseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingKinese)(nil)).Elem()
}

func (i ServiceComputeLoggingKineseArray) ToServiceComputeLoggingKineseArrayOutput() ServiceComputeLoggingKineseArrayOutput {
	return i.ToServiceComputeLoggingKineseArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingKineseArray) ToServiceComputeLoggingKineseArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingKineseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingKineseArrayOutput)
}

type ServiceComputeLoggingKineseOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingKineseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingKinese)(nil)).Elem()
}

func (o ServiceComputeLoggingKineseOutput) ToServiceComputeLoggingKineseOutput() ServiceComputeLoggingKineseOutput {
	return o
}

func (o ServiceComputeLoggingKineseOutput) ToServiceComputeLoggingKineseOutputWithContext(ctx context.Context) ServiceComputeLoggingKineseOutput {
	return o
}

// The AWS access key to be used to write to the stream
func (o ServiceComputeLoggingKineseOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingKineseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) string { return v.Name }).(pulumi.StringOutput)
}

// The AWS region the stream resides in. (Default: `us-east-1`)
func (o ServiceComputeLoggingKineseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The AWS secret access key to authenticate with
func (o ServiceComputeLoggingKineseOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The Kinesis stream name
func (o ServiceComputeLoggingKineseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) string { return v.Topic }).(pulumi.StringOutput)
}

type ServiceComputeLoggingKineseArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingKineseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingKinese)(nil)).Elem()
}

func (o ServiceComputeLoggingKineseArrayOutput) ToServiceComputeLoggingKineseArrayOutput() ServiceComputeLoggingKineseArrayOutput {
	return o
}

func (o ServiceComputeLoggingKineseArrayOutput) ToServiceComputeLoggingKineseArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingKineseArrayOutput {
	return o
}

func (o ServiceComputeLoggingKineseArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingKineseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingKinese {
		return vs[0].([]ServiceComputeLoggingKinese)[vs[1].(int)]
	}).(ServiceComputeLoggingKineseOutput)
}

type ServiceComputeLoggingLoggly struct {
	// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingLogglyInput is an input type that accepts ServiceComputeLoggingLogglyArgs and ServiceComputeLoggingLogglyOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogglyInput` via:
//
//          ServiceComputeLoggingLogglyArgs{...}
type ServiceComputeLoggingLogglyInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogglyOutput() ServiceComputeLoggingLogglyOutput
	ToServiceComputeLoggingLogglyOutputWithContext(context.Context) ServiceComputeLoggingLogglyOutput
}

type ServiceComputeLoggingLogglyArgs struct {
	// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingLogglyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLoggly)(nil)).Elem()
}

func (i ServiceComputeLoggingLogglyArgs) ToServiceComputeLoggingLogglyOutput() ServiceComputeLoggingLogglyOutput {
	return i.ToServiceComputeLoggingLogglyOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogglyArgs) ToServiceComputeLoggingLogglyOutputWithContext(ctx context.Context) ServiceComputeLoggingLogglyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogglyOutput)
}

// ServiceComputeLoggingLogglyArrayInput is an input type that accepts ServiceComputeLoggingLogglyArray and ServiceComputeLoggingLogglyArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogglyArrayInput` via:
//
//          ServiceComputeLoggingLogglyArray{ ServiceComputeLoggingLogglyArgs{...} }
type ServiceComputeLoggingLogglyArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogglyArrayOutput() ServiceComputeLoggingLogglyArrayOutput
	ToServiceComputeLoggingLogglyArrayOutputWithContext(context.Context) ServiceComputeLoggingLogglyArrayOutput
}

type ServiceComputeLoggingLogglyArray []ServiceComputeLoggingLogglyInput

func (ServiceComputeLoggingLogglyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLoggly)(nil)).Elem()
}

func (i ServiceComputeLoggingLogglyArray) ToServiceComputeLoggingLogglyArrayOutput() ServiceComputeLoggingLogglyArrayOutput {
	return i.ToServiceComputeLoggingLogglyArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogglyArray) ToServiceComputeLoggingLogglyArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogglyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogglyArrayOutput)
}

type ServiceComputeLoggingLogglyOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogglyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLoggly)(nil)).Elem()
}

func (o ServiceComputeLoggingLogglyOutput) ToServiceComputeLoggingLogglyOutput() ServiceComputeLoggingLogglyOutput {
	return o
}

func (o ServiceComputeLoggingLogglyOutput) ToServiceComputeLoggingLogglyOutputWithContext(ctx context.Context) ServiceComputeLoggingLogglyOutput {
	return o
}

// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingLogglyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLoggly) string { return v.Name }).(pulumi.StringOutput)
}

// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
func (o ServiceComputeLoggingLogglyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLoggly) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingLogglyArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogglyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLoggly)(nil)).Elem()
}

func (o ServiceComputeLoggingLogglyArrayOutput) ToServiceComputeLoggingLogglyArrayOutput() ServiceComputeLoggingLogglyArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogglyArrayOutput) ToServiceComputeLoggingLogglyArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogglyArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogglyArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingLogglyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingLoggly {
		return vs[0].([]ServiceComputeLoggingLoggly)[vs[1].(int)]
	}).(ServiceComputeLoggingLogglyOutput)
}

type ServiceComputeLoggingLogshuttle struct {
	// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The data authentication token associated with this endpoint
	Token string `pulumi:"token"`
	// Your Log Shuttle endpoint URL
	Url string `pulumi:"url"`
}

// ServiceComputeLoggingLogshuttleInput is an input type that accepts ServiceComputeLoggingLogshuttleArgs and ServiceComputeLoggingLogshuttleOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogshuttleInput` via:
//
//          ServiceComputeLoggingLogshuttleArgs{...}
type ServiceComputeLoggingLogshuttleInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogshuttleOutput() ServiceComputeLoggingLogshuttleOutput
	ToServiceComputeLoggingLogshuttleOutputWithContext(context.Context) ServiceComputeLoggingLogshuttleOutput
}

type ServiceComputeLoggingLogshuttleArgs struct {
	// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The data authentication token associated with this endpoint
	Token pulumi.StringInput `pulumi:"token"`
	// Your Log Shuttle endpoint URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeLoggingLogshuttleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLogshuttle)(nil)).Elem()
}

func (i ServiceComputeLoggingLogshuttleArgs) ToServiceComputeLoggingLogshuttleOutput() ServiceComputeLoggingLogshuttleOutput {
	return i.ToServiceComputeLoggingLogshuttleOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogshuttleArgs) ToServiceComputeLoggingLogshuttleOutputWithContext(ctx context.Context) ServiceComputeLoggingLogshuttleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogshuttleOutput)
}

// ServiceComputeLoggingLogshuttleArrayInput is an input type that accepts ServiceComputeLoggingLogshuttleArray and ServiceComputeLoggingLogshuttleArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogshuttleArrayInput` via:
//
//          ServiceComputeLoggingLogshuttleArray{ ServiceComputeLoggingLogshuttleArgs{...} }
type ServiceComputeLoggingLogshuttleArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogshuttleArrayOutput() ServiceComputeLoggingLogshuttleArrayOutput
	ToServiceComputeLoggingLogshuttleArrayOutputWithContext(context.Context) ServiceComputeLoggingLogshuttleArrayOutput
}

type ServiceComputeLoggingLogshuttleArray []ServiceComputeLoggingLogshuttleInput

func (ServiceComputeLoggingLogshuttleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLogshuttle)(nil)).Elem()
}

func (i ServiceComputeLoggingLogshuttleArray) ToServiceComputeLoggingLogshuttleArrayOutput() ServiceComputeLoggingLogshuttleArrayOutput {
	return i.ToServiceComputeLoggingLogshuttleArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogshuttleArray) ToServiceComputeLoggingLogshuttleArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogshuttleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogshuttleArrayOutput)
}

type ServiceComputeLoggingLogshuttleOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogshuttleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLogshuttle)(nil)).Elem()
}

func (o ServiceComputeLoggingLogshuttleOutput) ToServiceComputeLoggingLogshuttleOutput() ServiceComputeLoggingLogshuttleOutput {
	return o
}

func (o ServiceComputeLoggingLogshuttleOutput) ToServiceComputeLoggingLogshuttleOutputWithContext(ctx context.Context) ServiceComputeLoggingLogshuttleOutput {
	return o
}

// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingLogshuttleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogshuttle) string { return v.Name }).(pulumi.StringOutput)
}

// The data authentication token associated with this endpoint
func (o ServiceComputeLoggingLogshuttleOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogshuttle) string { return v.Token }).(pulumi.StringOutput)
}

// Your Log Shuttle endpoint URL
func (o ServiceComputeLoggingLogshuttleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogshuttle) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeLoggingLogshuttleArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogshuttleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLogshuttle)(nil)).Elem()
}

func (o ServiceComputeLoggingLogshuttleArrayOutput) ToServiceComputeLoggingLogshuttleArrayOutput() ServiceComputeLoggingLogshuttleArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogshuttleArrayOutput) ToServiceComputeLoggingLogshuttleArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogshuttleArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogshuttleArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingLogshuttleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingLogshuttle {
		return vs[0].([]ServiceComputeLoggingLogshuttle)[vs[1].(int)]
	}).(ServiceComputeLoggingLogshuttleOutput)
}

type ServiceComputeLoggingNewrelic struct {
	// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The Insert API key from the Account page of your New Relic account
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingNewrelicInput is an input type that accepts ServiceComputeLoggingNewrelicArgs and ServiceComputeLoggingNewrelicOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingNewrelicInput` via:
//
//          ServiceComputeLoggingNewrelicArgs{...}
type ServiceComputeLoggingNewrelicInput interface {
	pulumi.Input

	ToServiceComputeLoggingNewrelicOutput() ServiceComputeLoggingNewrelicOutput
	ToServiceComputeLoggingNewrelicOutputWithContext(context.Context) ServiceComputeLoggingNewrelicOutput
}

type ServiceComputeLoggingNewrelicArgs struct {
	// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The Insert API key from the Account page of your New Relic account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingNewrelicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingNewrelic)(nil)).Elem()
}

func (i ServiceComputeLoggingNewrelicArgs) ToServiceComputeLoggingNewrelicOutput() ServiceComputeLoggingNewrelicOutput {
	return i.ToServiceComputeLoggingNewrelicOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingNewrelicArgs) ToServiceComputeLoggingNewrelicOutputWithContext(ctx context.Context) ServiceComputeLoggingNewrelicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingNewrelicOutput)
}

// ServiceComputeLoggingNewrelicArrayInput is an input type that accepts ServiceComputeLoggingNewrelicArray and ServiceComputeLoggingNewrelicArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingNewrelicArrayInput` via:
//
//          ServiceComputeLoggingNewrelicArray{ ServiceComputeLoggingNewrelicArgs{...} }
type ServiceComputeLoggingNewrelicArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingNewrelicArrayOutput() ServiceComputeLoggingNewrelicArrayOutput
	ToServiceComputeLoggingNewrelicArrayOutputWithContext(context.Context) ServiceComputeLoggingNewrelicArrayOutput
}

type ServiceComputeLoggingNewrelicArray []ServiceComputeLoggingNewrelicInput

func (ServiceComputeLoggingNewrelicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingNewrelic)(nil)).Elem()
}

func (i ServiceComputeLoggingNewrelicArray) ToServiceComputeLoggingNewrelicArrayOutput() ServiceComputeLoggingNewrelicArrayOutput {
	return i.ToServiceComputeLoggingNewrelicArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingNewrelicArray) ToServiceComputeLoggingNewrelicArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingNewrelicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingNewrelicArrayOutput)
}

type ServiceComputeLoggingNewrelicOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingNewrelicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingNewrelic)(nil)).Elem()
}

func (o ServiceComputeLoggingNewrelicOutput) ToServiceComputeLoggingNewrelicOutput() ServiceComputeLoggingNewrelicOutput {
	return o
}

func (o ServiceComputeLoggingNewrelicOutput) ToServiceComputeLoggingNewrelicOutputWithContext(ctx context.Context) ServiceComputeLoggingNewrelicOutput {
	return o
}

// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingNewrelicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingNewrelic) string { return v.Name }).(pulumi.StringOutput)
}

// The Insert API key from the Account page of your New Relic account
func (o ServiceComputeLoggingNewrelicOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingNewrelic) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingNewrelicArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingNewrelicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingNewrelic)(nil)).Elem()
}

func (o ServiceComputeLoggingNewrelicArrayOutput) ToServiceComputeLoggingNewrelicArrayOutput() ServiceComputeLoggingNewrelicArrayOutput {
	return o
}

func (o ServiceComputeLoggingNewrelicArrayOutput) ToServiceComputeLoggingNewrelicArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingNewrelicArrayOutput {
	return o
}

func (o ServiceComputeLoggingNewrelicArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingNewrelicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingNewrelic {
		return vs[0].([]ServiceComputeLoggingNewrelic)[vs[1].(int)]
	}).(ServiceComputeLoggingNewrelicOutput)
}

type ServiceComputeLoggingOpenstack struct {
	// Your OpenStack account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of your OpenStack container
	BucketName string `pulumi:"bucketName"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
	MessageType *string `pulumi:"messageType"`
	// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Your OpenStack auth url
	Url string `pulumi:"url"`
	// The username for your OpenStack account
	User string `pulumi:"user"`
}

// ServiceComputeLoggingOpenstackInput is an input type that accepts ServiceComputeLoggingOpenstackArgs and ServiceComputeLoggingOpenstackOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingOpenstackInput` via:
//
//          ServiceComputeLoggingOpenstackArgs{...}
type ServiceComputeLoggingOpenstackInput interface {
	pulumi.Input

	ToServiceComputeLoggingOpenstackOutput() ServiceComputeLoggingOpenstackOutput
	ToServiceComputeLoggingOpenstackOutputWithContext(context.Context) ServiceComputeLoggingOpenstackOutput
}

type ServiceComputeLoggingOpenstackArgs struct {
	// Your OpenStack account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of your OpenStack container
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// Your OpenStack auth url
	Url pulumi.StringInput `pulumi:"url"`
	// The username for your OpenStack account
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingOpenstackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingOpenstack)(nil)).Elem()
}

func (i ServiceComputeLoggingOpenstackArgs) ToServiceComputeLoggingOpenstackOutput() ServiceComputeLoggingOpenstackOutput {
	return i.ToServiceComputeLoggingOpenstackOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingOpenstackArgs) ToServiceComputeLoggingOpenstackOutputWithContext(ctx context.Context) ServiceComputeLoggingOpenstackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingOpenstackOutput)
}

// ServiceComputeLoggingOpenstackArrayInput is an input type that accepts ServiceComputeLoggingOpenstackArray and ServiceComputeLoggingOpenstackArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingOpenstackArrayInput` via:
//
//          ServiceComputeLoggingOpenstackArray{ ServiceComputeLoggingOpenstackArgs{...} }
type ServiceComputeLoggingOpenstackArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingOpenstackArrayOutput() ServiceComputeLoggingOpenstackArrayOutput
	ToServiceComputeLoggingOpenstackArrayOutputWithContext(context.Context) ServiceComputeLoggingOpenstackArrayOutput
}

type ServiceComputeLoggingOpenstackArray []ServiceComputeLoggingOpenstackInput

func (ServiceComputeLoggingOpenstackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingOpenstack)(nil)).Elem()
}

func (i ServiceComputeLoggingOpenstackArray) ToServiceComputeLoggingOpenstackArrayOutput() ServiceComputeLoggingOpenstackArrayOutput {
	return i.ToServiceComputeLoggingOpenstackArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingOpenstackArray) ToServiceComputeLoggingOpenstackArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingOpenstackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingOpenstackArrayOutput)
}

type ServiceComputeLoggingOpenstackOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingOpenstackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingOpenstack)(nil)).Elem()
}

func (o ServiceComputeLoggingOpenstackOutput) ToServiceComputeLoggingOpenstackOutput() ServiceComputeLoggingOpenstackOutput {
	return o
}

func (o ServiceComputeLoggingOpenstackOutput) ToServiceComputeLoggingOpenstackOutputWithContext(ctx context.Context) ServiceComputeLoggingOpenstackOutput {
	return o
}

// Your OpenStack account access key
func (o ServiceComputeLoggingOpenstackOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of your OpenStack container
func (o ServiceComputeLoggingOpenstackOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.BucketName }).(pulumi.StringOutput)
}

// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
func (o ServiceComputeLoggingOpenstackOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
func (o ServiceComputeLoggingOpenstackOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingOpenstackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceComputeLoggingOpenstackOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds. Default `3600`
func (o ServiceComputeLoggingOpenstackOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingOpenstackOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingOpenstackOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// Your OpenStack auth url
func (o ServiceComputeLoggingOpenstackOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.Url }).(pulumi.StringOutput)
}

// The username for your OpenStack account
func (o ServiceComputeLoggingOpenstackOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingOpenstackArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingOpenstackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingOpenstack)(nil)).Elem()
}

func (o ServiceComputeLoggingOpenstackArrayOutput) ToServiceComputeLoggingOpenstackArrayOutput() ServiceComputeLoggingOpenstackArrayOutput {
	return o
}

func (o ServiceComputeLoggingOpenstackArrayOutput) ToServiceComputeLoggingOpenstackArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingOpenstackArrayOutput {
	return o
}

func (o ServiceComputeLoggingOpenstackArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingOpenstackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingOpenstack {
		return vs[0].([]ServiceComputeLoggingOpenstack)[vs[1].(int)]
	}).(ServiceComputeLoggingOpenstackOutput)
}

type ServiceComputeLoggingScalyr struct {
	// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region *string `pulumi:"region"`
	// The token to use for authentication (https://www.scalyr.com/keys)
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingScalyrInput is an input type that accepts ServiceComputeLoggingScalyrArgs and ServiceComputeLoggingScalyrOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingScalyrInput` via:
//
//          ServiceComputeLoggingScalyrArgs{...}
type ServiceComputeLoggingScalyrInput interface {
	pulumi.Input

	ToServiceComputeLoggingScalyrOutput() ServiceComputeLoggingScalyrOutput
	ToServiceComputeLoggingScalyrOutputWithContext(context.Context) ServiceComputeLoggingScalyrOutput
}

type ServiceComputeLoggingScalyrArgs struct {
	// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The token to use for authentication (https://www.scalyr.com/keys)
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingScalyrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingScalyr)(nil)).Elem()
}

func (i ServiceComputeLoggingScalyrArgs) ToServiceComputeLoggingScalyrOutput() ServiceComputeLoggingScalyrOutput {
	return i.ToServiceComputeLoggingScalyrOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingScalyrArgs) ToServiceComputeLoggingScalyrOutputWithContext(ctx context.Context) ServiceComputeLoggingScalyrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingScalyrOutput)
}

// ServiceComputeLoggingScalyrArrayInput is an input type that accepts ServiceComputeLoggingScalyrArray and ServiceComputeLoggingScalyrArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingScalyrArrayInput` via:
//
//          ServiceComputeLoggingScalyrArray{ ServiceComputeLoggingScalyrArgs{...} }
type ServiceComputeLoggingScalyrArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingScalyrArrayOutput() ServiceComputeLoggingScalyrArrayOutput
	ToServiceComputeLoggingScalyrArrayOutputWithContext(context.Context) ServiceComputeLoggingScalyrArrayOutput
}

type ServiceComputeLoggingScalyrArray []ServiceComputeLoggingScalyrInput

func (ServiceComputeLoggingScalyrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingScalyr)(nil)).Elem()
}

func (i ServiceComputeLoggingScalyrArray) ToServiceComputeLoggingScalyrArrayOutput() ServiceComputeLoggingScalyrArrayOutput {
	return i.ToServiceComputeLoggingScalyrArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingScalyrArray) ToServiceComputeLoggingScalyrArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingScalyrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingScalyrArrayOutput)
}

type ServiceComputeLoggingScalyrOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingScalyrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingScalyr)(nil)).Elem()
}

func (o ServiceComputeLoggingScalyrOutput) ToServiceComputeLoggingScalyrOutput() ServiceComputeLoggingScalyrOutput {
	return o
}

func (o ServiceComputeLoggingScalyrOutput) ToServiceComputeLoggingScalyrOutputWithContext(ctx context.Context) ServiceComputeLoggingScalyrOutput {
	return o
}

// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingScalyrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingScalyr) string { return v.Name }).(pulumi.StringOutput)
}

// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
func (o ServiceComputeLoggingScalyrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingScalyr) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys)
func (o ServiceComputeLoggingScalyrOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingScalyr) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingScalyrArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingScalyrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingScalyr)(nil)).Elem()
}

func (o ServiceComputeLoggingScalyrArrayOutput) ToServiceComputeLoggingScalyrArrayOutput() ServiceComputeLoggingScalyrArrayOutput {
	return o
}

func (o ServiceComputeLoggingScalyrArrayOutput) ToServiceComputeLoggingScalyrArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingScalyrArrayOutput {
	return o
}

func (o ServiceComputeLoggingScalyrArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingScalyrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingScalyr {
		return vs[0].([]ServiceComputeLoggingScalyr)[vs[1].(int)]
	}).(ServiceComputeLoggingScalyrOutput)
}

type ServiceComputeLoggingSftp struct {
	// The SFTP address to stream logs to
	Address string `pulumi:"address"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	Password *string `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// The port the SFTP service listens on. (Default: `22`)
	Port *int `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	SecretKey     *string `pulumi:"secretKey"`
	SshKnownHosts string  `pulumi:"sshKnownHosts"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for the server
	User string `pulumi:"user"`
}

// ServiceComputeLoggingSftpInput is an input type that accepts ServiceComputeLoggingSftpArgs and ServiceComputeLoggingSftpOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSftpInput` via:
//
//          ServiceComputeLoggingSftpArgs{...}
type ServiceComputeLoggingSftpInput interface {
	pulumi.Input

	ToServiceComputeLoggingSftpOutput() ServiceComputeLoggingSftpOutput
	ToServiceComputeLoggingSftpOutputWithContext(context.Context) ServiceComputeLoggingSftpOutput
}

type ServiceComputeLoggingSftpArgs struct {
	// The SFTP address to stream logs to
	Address pulumi.StringInput `pulumi:"address"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The port the SFTP service listens on. (Default: `22`)
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	SecretKey     pulumi.StringPtrInput `pulumi:"secretKey"`
	SshKnownHosts pulumi.StringInput    `pulumi:"sshKnownHosts"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for the server
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingSftpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSftp)(nil)).Elem()
}

func (i ServiceComputeLoggingSftpArgs) ToServiceComputeLoggingSftpOutput() ServiceComputeLoggingSftpOutput {
	return i.ToServiceComputeLoggingSftpOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSftpArgs) ToServiceComputeLoggingSftpOutputWithContext(ctx context.Context) ServiceComputeLoggingSftpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSftpOutput)
}

// ServiceComputeLoggingSftpArrayInput is an input type that accepts ServiceComputeLoggingSftpArray and ServiceComputeLoggingSftpArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSftpArrayInput` via:
//
//          ServiceComputeLoggingSftpArray{ ServiceComputeLoggingSftpArgs{...} }
type ServiceComputeLoggingSftpArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingSftpArrayOutput() ServiceComputeLoggingSftpArrayOutput
	ToServiceComputeLoggingSftpArrayOutputWithContext(context.Context) ServiceComputeLoggingSftpArrayOutput
}

type ServiceComputeLoggingSftpArray []ServiceComputeLoggingSftpInput

func (ServiceComputeLoggingSftpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSftp)(nil)).Elem()
}

func (i ServiceComputeLoggingSftpArray) ToServiceComputeLoggingSftpArrayOutput() ServiceComputeLoggingSftpArrayOutput {
	return i.ToServiceComputeLoggingSftpArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSftpArray) ToServiceComputeLoggingSftpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSftpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSftpArrayOutput)
}

type ServiceComputeLoggingSftpOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSftpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSftp)(nil)).Elem()
}

func (o ServiceComputeLoggingSftpOutput) ToServiceComputeLoggingSftpOutput() ServiceComputeLoggingSftpOutput {
	return o
}

func (o ServiceComputeLoggingSftpOutput) ToServiceComputeLoggingSftpOutputWithContext(ctx context.Context) ServiceComputeLoggingSftpOutput {
	return o
}

// The SFTP address to stream logs to
func (o ServiceComputeLoggingSftpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.Address }).(pulumi.StringOutput)
}

// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
func (o ServiceComputeLoggingSftpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
func (o ServiceComputeLoggingSftpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingSftpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
func (o ServiceComputeLoggingSftpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The path to upload log files to. If the path ends in `/` then it is treated as a directory
func (o ServiceComputeLoggingSftpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceComputeLoggingSftpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`)
func (o ServiceComputeLoggingSftpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingSftpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
func (o ServiceComputeLoggingSftpOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeLoggingSftpOutput) SshKnownHosts() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.SshKnownHosts }).(pulumi.StringOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingSftpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for the server
func (o ServiceComputeLoggingSftpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingSftpArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSftpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSftp)(nil)).Elem()
}

func (o ServiceComputeLoggingSftpArrayOutput) ToServiceComputeLoggingSftpArrayOutput() ServiceComputeLoggingSftpArrayOutput {
	return o
}

func (o ServiceComputeLoggingSftpArrayOutput) ToServiceComputeLoggingSftpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSftpArrayOutput {
	return o
}

func (o ServiceComputeLoggingSftpArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingSftpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingSftp {
		return vs[0].([]ServiceComputeLoggingSftp)[vs[1].(int)]
	}).(ServiceComputeLoggingSftpOutput)
}

type ServiceComputePackage struct {
	// The path to the Wasm deployment package within your local filesystem
	Filename       string  `pulumi:"filename"`
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
}

// ServiceComputePackageInput is an input type that accepts ServiceComputePackageArgs and ServiceComputePackageOutput values.
// You can construct a concrete instance of `ServiceComputePackageInput` via:
//
//          ServiceComputePackageArgs{...}
type ServiceComputePackageInput interface {
	pulumi.Input

	ToServiceComputePackageOutput() ServiceComputePackageOutput
	ToServiceComputePackageOutputWithContext(context.Context) ServiceComputePackageOutput
}

type ServiceComputePackageArgs struct {
	// The path to the Wasm deployment package within your local filesystem
	Filename       pulumi.StringInput    `pulumi:"filename"`
	SourceCodeHash pulumi.StringPtrInput `pulumi:"sourceCodeHash"`
}

func (ServiceComputePackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputePackage)(nil)).Elem()
}

func (i ServiceComputePackageArgs) ToServiceComputePackageOutput() ServiceComputePackageOutput {
	return i.ToServiceComputePackageOutputWithContext(context.Background())
}

func (i ServiceComputePackageArgs) ToServiceComputePackageOutputWithContext(ctx context.Context) ServiceComputePackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePackageOutput)
}

func (i ServiceComputePackageArgs) ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput {
	return i.ToServiceComputePackagePtrOutputWithContext(context.Background())
}

func (i ServiceComputePackageArgs) ToServiceComputePackagePtrOutputWithContext(ctx context.Context) ServiceComputePackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePackageOutput).ToServiceComputePackagePtrOutputWithContext(ctx)
}

// ServiceComputePackagePtrInput is an input type that accepts ServiceComputePackageArgs, ServiceComputePackagePtr and ServiceComputePackagePtrOutput values.
// You can construct a concrete instance of `ServiceComputePackagePtrInput` via:
//
//          ServiceComputePackageArgs{...}
//
//  or:
//
//          nil
type ServiceComputePackagePtrInput interface {
	pulumi.Input

	ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput
	ToServiceComputePackagePtrOutputWithContext(context.Context) ServiceComputePackagePtrOutput
}

type serviceComputePackagePtrType ServiceComputePackageArgs

func ServiceComputePackagePtr(v *ServiceComputePackageArgs) ServiceComputePackagePtrInput {
	return (*serviceComputePackagePtrType)(v)
}

func (*serviceComputePackagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceComputePackage)(nil)).Elem()
}

func (i *serviceComputePackagePtrType) ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput {
	return i.ToServiceComputePackagePtrOutputWithContext(context.Background())
}

func (i *serviceComputePackagePtrType) ToServiceComputePackagePtrOutputWithContext(ctx context.Context) ServiceComputePackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePackagePtrOutput)
}

type ServiceComputePackageOutput struct{ *pulumi.OutputState }

func (ServiceComputePackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputePackage)(nil)).Elem()
}

func (o ServiceComputePackageOutput) ToServiceComputePackageOutput() ServiceComputePackageOutput {
	return o
}

func (o ServiceComputePackageOutput) ToServiceComputePackageOutputWithContext(ctx context.Context) ServiceComputePackageOutput {
	return o
}

func (o ServiceComputePackageOutput) ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput {
	return o.ToServiceComputePackagePtrOutputWithContext(context.Background())
}

func (o ServiceComputePackageOutput) ToServiceComputePackagePtrOutputWithContext(ctx context.Context) ServiceComputePackagePtrOutput {
	return o.ApplyT(func(v ServiceComputePackage) *ServiceComputePackage {
		return &v
	}).(ServiceComputePackagePtrOutput)
}

// The path to the Wasm deployment package within your local filesystem
func (o ServiceComputePackageOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputePackage) string { return v.Filename }).(pulumi.StringOutput)
}

func (o ServiceComputePackageOutput) SourceCodeHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputePackage) *string { return v.SourceCodeHash }).(pulumi.StringPtrOutput)
}

type ServiceComputePackagePtrOutput struct{ *pulumi.OutputState }

func (ServiceComputePackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceComputePackage)(nil)).Elem()
}

func (o ServiceComputePackagePtrOutput) ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput {
	return o
}

func (o ServiceComputePackagePtrOutput) ToServiceComputePackagePtrOutputWithContext(ctx context.Context) ServiceComputePackagePtrOutput {
	return o
}

func (o ServiceComputePackagePtrOutput) Elem() ServiceComputePackageOutput {
	return o.ApplyT(func(v *ServiceComputePackage) ServiceComputePackage { return *v }).(ServiceComputePackageOutput)
}

// The path to the Wasm deployment package within your local filesystem
func (o ServiceComputePackagePtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceComputePackage) *string {
		if v == nil {
			return nil
		}
		return &v.Filename
	}).(pulumi.StringPtrOutput)
}

func (o ServiceComputePackagePtrOutput) SourceCodeHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceComputePackage) *string {
		if v == nil {
			return nil
		}
		return v.SourceCodeHash
	}).(pulumi.StringPtrOutput)
}

type ServiceComputePapertrail struct {
	// The address of the Papertrail endpoint
	Address string `pulumi:"address"`
	// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The port associated with the address where the Papertrail endpoint can be accessed
	Port int `pulumi:"port"`
}

// ServiceComputePapertrailInput is an input type that accepts ServiceComputePapertrailArgs and ServiceComputePapertrailOutput values.
// You can construct a concrete instance of `ServiceComputePapertrailInput` via:
//
//          ServiceComputePapertrailArgs{...}
type ServiceComputePapertrailInput interface {
	pulumi.Input

	ToServiceComputePapertrailOutput() ServiceComputePapertrailOutput
	ToServiceComputePapertrailOutputWithContext(context.Context) ServiceComputePapertrailOutput
}

type ServiceComputePapertrailArgs struct {
	// The address of the Papertrail endpoint
	Address pulumi.StringInput `pulumi:"address"`
	// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The port associated with the address where the Papertrail endpoint can be accessed
	Port pulumi.IntInput `pulumi:"port"`
}

func (ServiceComputePapertrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputePapertrail)(nil)).Elem()
}

func (i ServiceComputePapertrailArgs) ToServiceComputePapertrailOutput() ServiceComputePapertrailOutput {
	return i.ToServiceComputePapertrailOutputWithContext(context.Background())
}

func (i ServiceComputePapertrailArgs) ToServiceComputePapertrailOutputWithContext(ctx context.Context) ServiceComputePapertrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePapertrailOutput)
}

// ServiceComputePapertrailArrayInput is an input type that accepts ServiceComputePapertrailArray and ServiceComputePapertrailArrayOutput values.
// You can construct a concrete instance of `ServiceComputePapertrailArrayInput` via:
//
//          ServiceComputePapertrailArray{ ServiceComputePapertrailArgs{...} }
type ServiceComputePapertrailArrayInput interface {
	pulumi.Input

	ToServiceComputePapertrailArrayOutput() ServiceComputePapertrailArrayOutput
	ToServiceComputePapertrailArrayOutputWithContext(context.Context) ServiceComputePapertrailArrayOutput
}

type ServiceComputePapertrailArray []ServiceComputePapertrailInput

func (ServiceComputePapertrailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputePapertrail)(nil)).Elem()
}

func (i ServiceComputePapertrailArray) ToServiceComputePapertrailArrayOutput() ServiceComputePapertrailArrayOutput {
	return i.ToServiceComputePapertrailArrayOutputWithContext(context.Background())
}

func (i ServiceComputePapertrailArray) ToServiceComputePapertrailArrayOutputWithContext(ctx context.Context) ServiceComputePapertrailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePapertrailArrayOutput)
}

type ServiceComputePapertrailOutput struct{ *pulumi.OutputState }

func (ServiceComputePapertrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputePapertrail)(nil)).Elem()
}

func (o ServiceComputePapertrailOutput) ToServiceComputePapertrailOutput() ServiceComputePapertrailOutput {
	return o
}

func (o ServiceComputePapertrailOutput) ToServiceComputePapertrailOutputWithContext(ctx context.Context) ServiceComputePapertrailOutput {
	return o
}

// The address of the Papertrail endpoint
func (o ServiceComputePapertrailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputePapertrail) string { return v.Address }).(pulumi.StringOutput)
}

// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputePapertrailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputePapertrail) string { return v.Name }).(pulumi.StringOutput)
}

// The port associated with the address where the Papertrail endpoint can be accessed
func (o ServiceComputePapertrailOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceComputePapertrail) int { return v.Port }).(pulumi.IntOutput)
}

type ServiceComputePapertrailArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputePapertrailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputePapertrail)(nil)).Elem()
}

func (o ServiceComputePapertrailArrayOutput) ToServiceComputePapertrailArrayOutput() ServiceComputePapertrailArrayOutput {
	return o
}

func (o ServiceComputePapertrailArrayOutput) ToServiceComputePapertrailArrayOutputWithContext(ctx context.Context) ServiceComputePapertrailArrayOutput {
	return o
}

func (o ServiceComputePapertrailArrayOutput) Index(i pulumi.IntInput) ServiceComputePapertrailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputePapertrail {
		return vs[0].([]ServiceComputePapertrail)[vs[1].(int)]
	}).(ServiceComputePapertrailOutput)
}

type ServiceComputeS3logging struct {
	// The name of the bucket in which to store the logs
	BucketName string `pulumi:"bucketName"`
	// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
	Domain *string `pulumi:"domain"`
	// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`
	Redundancy                   *string `pulumi:"redundancy"`
	S3AccessKey                  *string `pulumi:"s3AccessKey"`
	S3SecretKey                  *string `pulumi:"s3SecretKey"`
	ServerSideEncryption         *string `pulumi:"serverSideEncryption"`
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceComputeS3loggingInput is an input type that accepts ServiceComputeS3loggingArgs and ServiceComputeS3loggingOutput values.
// You can construct a concrete instance of `ServiceComputeS3loggingInput` via:
//
//          ServiceComputeS3loggingArgs{...}
type ServiceComputeS3loggingInput interface {
	pulumi.Input

	ToServiceComputeS3loggingOutput() ServiceComputeS3loggingOutput
	ToServiceComputeS3loggingOutputWithContext(context.Context) ServiceComputeS3loggingOutput
}

type ServiceComputeS3loggingArgs struct {
	// The name of the bucket in which to store the logs
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`
	Redundancy                   pulumi.StringPtrInput `pulumi:"redundancy"`
	S3AccessKey                  pulumi.StringPtrInput `pulumi:"s3AccessKey"`
	S3SecretKey                  pulumi.StringPtrInput `pulumi:"s3SecretKey"`
	ServerSideEncryption         pulumi.StringPtrInput `pulumi:"serverSideEncryption"`
	ServerSideEncryptionKmsKeyId pulumi.StringPtrInput `pulumi:"serverSideEncryptionKmsKeyId"`
	// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceComputeS3loggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeS3logging)(nil)).Elem()
}

func (i ServiceComputeS3loggingArgs) ToServiceComputeS3loggingOutput() ServiceComputeS3loggingOutput {
	return i.ToServiceComputeS3loggingOutputWithContext(context.Background())
}

func (i ServiceComputeS3loggingArgs) ToServiceComputeS3loggingOutputWithContext(ctx context.Context) ServiceComputeS3loggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeS3loggingOutput)
}

// ServiceComputeS3loggingArrayInput is an input type that accepts ServiceComputeS3loggingArray and ServiceComputeS3loggingArrayOutput values.
// You can construct a concrete instance of `ServiceComputeS3loggingArrayInput` via:
//
//          ServiceComputeS3loggingArray{ ServiceComputeS3loggingArgs{...} }
type ServiceComputeS3loggingArrayInput interface {
	pulumi.Input

	ToServiceComputeS3loggingArrayOutput() ServiceComputeS3loggingArrayOutput
	ToServiceComputeS3loggingArrayOutputWithContext(context.Context) ServiceComputeS3loggingArrayOutput
}

type ServiceComputeS3loggingArray []ServiceComputeS3loggingInput

func (ServiceComputeS3loggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeS3logging)(nil)).Elem()
}

func (i ServiceComputeS3loggingArray) ToServiceComputeS3loggingArrayOutput() ServiceComputeS3loggingArrayOutput {
	return i.ToServiceComputeS3loggingArrayOutputWithContext(context.Background())
}

func (i ServiceComputeS3loggingArray) ToServiceComputeS3loggingArrayOutputWithContext(ctx context.Context) ServiceComputeS3loggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeS3loggingArrayOutput)
}

type ServiceComputeS3loggingOutput struct{ *pulumi.OutputState }

func (ServiceComputeS3loggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeS3logging)(nil)).Elem()
}

func (o ServiceComputeS3loggingOutput) ToServiceComputeS3loggingOutput() ServiceComputeS3loggingOutput {
	return o
}

func (o ServiceComputeS3loggingOutput) ToServiceComputeS3loggingOutputWithContext(ctx context.Context) ServiceComputeS3loggingOutput {
	return o
}

// The name of the bucket in which to store the logs
func (o ServiceComputeS3loggingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) string { return v.BucketName }).(pulumi.StringOutput)
}

// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
func (o ServiceComputeS3loggingOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
func (o ServiceComputeS3loggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
func (o ServiceComputeS3loggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeS3loggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceComputeS3loggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds. Default `3600`
func (o ServiceComputeS3loggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeS3loggingOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`
func (o ServiceComputeS3loggingOutput) Redundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.Redundancy }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeS3loggingOutput) S3AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.S3AccessKey }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeS3loggingOutput) S3SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.S3SecretKey }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeS3loggingOutput) ServerSideEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.ServerSideEncryption }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeS3loggingOutput) ServerSideEncryptionKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.ServerSideEncryptionKmsKeyId }).(pulumi.StringPtrOutput)
}

// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeS3loggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeS3logging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceComputeS3loggingArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeS3loggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeS3logging)(nil)).Elem()
}

func (o ServiceComputeS3loggingArrayOutput) ToServiceComputeS3loggingArrayOutput() ServiceComputeS3loggingArrayOutput {
	return o
}

func (o ServiceComputeS3loggingArrayOutput) ToServiceComputeS3loggingArrayOutputWithContext(ctx context.Context) ServiceComputeS3loggingArrayOutput {
	return o
}

func (o ServiceComputeS3loggingArrayOutput) Index(i pulumi.IntInput) ServiceComputeS3loggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeS3logging {
		return vs[0].([]ServiceComputeS3logging)[vs[1].(int)]
	}).(ServiceComputeS3loggingOutput)
}

type ServiceComputeSplunk struct {
	// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name          string  `pulumi:"name"`
	TlsCaCert     *string `pulumi:"tlsCaCert"`
	TlsClientCert *string `pulumi:"tlsClientCert"`
	TlsClientKey  *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Splunk token to be used for authentication
	Token string `pulumi:"token"`
	// The Splunk URL to stream logs to
	Url string `pulumi:"url"`
}

// ServiceComputeSplunkInput is an input type that accepts ServiceComputeSplunkArgs and ServiceComputeSplunkOutput values.
// You can construct a concrete instance of `ServiceComputeSplunkInput` via:
//
//          ServiceComputeSplunkArgs{...}
type ServiceComputeSplunkInput interface {
	pulumi.Input

	ToServiceComputeSplunkOutput() ServiceComputeSplunkOutput
	ToServiceComputeSplunkOutputWithContext(context.Context) ServiceComputeSplunkOutput
}

type ServiceComputeSplunkArgs struct {
	// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name          pulumi.StringInput    `pulumi:"name"`
	TlsCaCert     pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey  pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Splunk token to be used for authentication
	Token pulumi.StringInput `pulumi:"token"`
	// The Splunk URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeSplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeSplunk)(nil)).Elem()
}

func (i ServiceComputeSplunkArgs) ToServiceComputeSplunkOutput() ServiceComputeSplunkOutput {
	return i.ToServiceComputeSplunkOutputWithContext(context.Background())
}

func (i ServiceComputeSplunkArgs) ToServiceComputeSplunkOutputWithContext(ctx context.Context) ServiceComputeSplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeSplunkOutput)
}

// ServiceComputeSplunkArrayInput is an input type that accepts ServiceComputeSplunkArray and ServiceComputeSplunkArrayOutput values.
// You can construct a concrete instance of `ServiceComputeSplunkArrayInput` via:
//
//          ServiceComputeSplunkArray{ ServiceComputeSplunkArgs{...} }
type ServiceComputeSplunkArrayInput interface {
	pulumi.Input

	ToServiceComputeSplunkArrayOutput() ServiceComputeSplunkArrayOutput
	ToServiceComputeSplunkArrayOutputWithContext(context.Context) ServiceComputeSplunkArrayOutput
}

type ServiceComputeSplunkArray []ServiceComputeSplunkInput

func (ServiceComputeSplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeSplunk)(nil)).Elem()
}

func (i ServiceComputeSplunkArray) ToServiceComputeSplunkArrayOutput() ServiceComputeSplunkArrayOutput {
	return i.ToServiceComputeSplunkArrayOutputWithContext(context.Background())
}

func (i ServiceComputeSplunkArray) ToServiceComputeSplunkArrayOutputWithContext(ctx context.Context) ServiceComputeSplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeSplunkArrayOutput)
}

type ServiceComputeSplunkOutput struct{ *pulumi.OutputState }

func (ServiceComputeSplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeSplunk)(nil)).Elem()
}

func (o ServiceComputeSplunkOutput) ToServiceComputeSplunkOutput() ServiceComputeSplunkOutput {
	return o
}

func (o ServiceComputeSplunkOutput) ToServiceComputeSplunkOutputWithContext(ctx context.Context) ServiceComputeSplunkOutput {
	return o
}

// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeSplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeSplunk) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceComputeSplunkOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSplunk) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeSplunkOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSplunk) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeSplunkOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSplunk) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
func (o ServiceComputeSplunkOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSplunk) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Splunk token to be used for authentication
func (o ServiceComputeSplunkOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeSplunk) string { return v.Token }).(pulumi.StringOutput)
}

// The Splunk URL to stream logs to
func (o ServiceComputeSplunkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeSplunk) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeSplunkArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeSplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeSplunk)(nil)).Elem()
}

func (o ServiceComputeSplunkArrayOutput) ToServiceComputeSplunkArrayOutput() ServiceComputeSplunkArrayOutput {
	return o
}

func (o ServiceComputeSplunkArrayOutput) ToServiceComputeSplunkArrayOutputWithContext(ctx context.Context) ServiceComputeSplunkArrayOutput {
	return o
}

func (o ServiceComputeSplunkArrayOutput) Index(i pulumi.IntInput) ServiceComputeSplunkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeSplunk {
		return vs[0].([]ServiceComputeSplunk)[vs[1].(int)]
	}).(ServiceComputeSplunkOutput)
}

type ServiceComputeSumologic struct {
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. See [Fastly's Documentation on Sumologic](https://developer.fastly.com/reference/api/logging/sumologic/)
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The URL to Sumologic collector endpoint
	Url string `pulumi:"url"`
}

// ServiceComputeSumologicInput is an input type that accepts ServiceComputeSumologicArgs and ServiceComputeSumologicOutput values.
// You can construct a concrete instance of `ServiceComputeSumologicInput` via:
//
//          ServiceComputeSumologicArgs{...}
type ServiceComputeSumologicInput interface {
	pulumi.Input

	ToServiceComputeSumologicOutput() ServiceComputeSumologicOutput
	ToServiceComputeSumologicOutputWithContext(context.Context) ServiceComputeSumologicOutput
}

type ServiceComputeSumologicArgs struct {
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. See [Fastly's Documentation on Sumologic](https://developer.fastly.com/reference/api/logging/sumologic/)
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The URL to Sumologic collector endpoint
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeSumologicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeSumologic)(nil)).Elem()
}

func (i ServiceComputeSumologicArgs) ToServiceComputeSumologicOutput() ServiceComputeSumologicOutput {
	return i.ToServiceComputeSumologicOutputWithContext(context.Background())
}

func (i ServiceComputeSumologicArgs) ToServiceComputeSumologicOutputWithContext(ctx context.Context) ServiceComputeSumologicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeSumologicOutput)
}

// ServiceComputeSumologicArrayInput is an input type that accepts ServiceComputeSumologicArray and ServiceComputeSumologicArrayOutput values.
// You can construct a concrete instance of `ServiceComputeSumologicArrayInput` via:
//
//          ServiceComputeSumologicArray{ ServiceComputeSumologicArgs{...} }
type ServiceComputeSumologicArrayInput interface {
	pulumi.Input

	ToServiceComputeSumologicArrayOutput() ServiceComputeSumologicArrayOutput
	ToServiceComputeSumologicArrayOutputWithContext(context.Context) ServiceComputeSumologicArrayOutput
}

type ServiceComputeSumologicArray []ServiceComputeSumologicInput

func (ServiceComputeSumologicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeSumologic)(nil)).Elem()
}

func (i ServiceComputeSumologicArray) ToServiceComputeSumologicArrayOutput() ServiceComputeSumologicArrayOutput {
	return i.ToServiceComputeSumologicArrayOutputWithContext(context.Background())
}

func (i ServiceComputeSumologicArray) ToServiceComputeSumologicArrayOutputWithContext(ctx context.Context) ServiceComputeSumologicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeSumologicArrayOutput)
}

type ServiceComputeSumologicOutput struct{ *pulumi.OutputState }

func (ServiceComputeSumologicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeSumologic)(nil)).Elem()
}

func (o ServiceComputeSumologicOutput) ToServiceComputeSumologicOutput() ServiceComputeSumologicOutput {
	return o
}

func (o ServiceComputeSumologicOutput) ToServiceComputeSumologicOutputWithContext(ctx context.Context) ServiceComputeSumologicOutput {
	return o
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. See [Fastly's Documentation on Sumologic](https://developer.fastly.com/reference/api/logging/sumologic/)
func (o ServiceComputeSumologicOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSumologic) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeSumologicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeSumologic) string { return v.Name }).(pulumi.StringOutput)
}

// The URL to Sumologic collector endpoint
func (o ServiceComputeSumologicOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeSumologic) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeSumologicArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeSumologicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeSumologic)(nil)).Elem()
}

func (o ServiceComputeSumologicArrayOutput) ToServiceComputeSumologicArrayOutput() ServiceComputeSumologicArrayOutput {
	return o
}

func (o ServiceComputeSumologicArrayOutput) ToServiceComputeSumologicArrayOutputWithContext(ctx context.Context) ServiceComputeSumologicArrayOutput {
	return o
}

func (o ServiceComputeSumologicArrayOutput) Index(i pulumi.IntInput) ServiceComputeSumologicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeSumologic {
		return vs[0].([]ServiceComputeSumologic)[vs[1].(int)]
	}).(ServiceComputeSumologicOutput)
}

type ServiceComputeSyslog struct {
	// A hostname or IPv4 address of the Syslog endpoint
	Address string `pulumi:"address"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
	Port          *int    `pulumi:"port"`
	TlsCaCert     *string `pulumi:"tlsCaCert"`
	TlsClientCert *string `pulumi:"tlsClientCert"`
	TlsClientKey  *string `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname *string `pulumi:"tlsHostname"`
	// Whether to prepend each message with a specific token
	Token *string `pulumi:"token"`
	// Whether to use TLS for secure logging. Default `false`
	UseTls *bool `pulumi:"useTls"`
}

// ServiceComputeSyslogInput is an input type that accepts ServiceComputeSyslogArgs and ServiceComputeSyslogOutput values.
// You can construct a concrete instance of `ServiceComputeSyslogInput` via:
//
//          ServiceComputeSyslogArgs{...}
type ServiceComputeSyslogInput interface {
	pulumi.Input

	ToServiceComputeSyslogOutput() ServiceComputeSyslogOutput
	ToServiceComputeSyslogOutputWithContext(context.Context) ServiceComputeSyslogOutput
}

type ServiceComputeSyslogArgs struct {
	// A hostname or IPv4 address of the Syslog endpoint
	Address pulumi.StringInput `pulumi:"address"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
	Port          pulumi.IntPtrInput    `pulumi:"port"`
	TlsCaCert     pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey  pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// Whether to prepend each message with a specific token
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Whether to use TLS for secure logging. Default `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (ServiceComputeSyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeSyslog)(nil)).Elem()
}

func (i ServiceComputeSyslogArgs) ToServiceComputeSyslogOutput() ServiceComputeSyslogOutput {
	return i.ToServiceComputeSyslogOutputWithContext(context.Background())
}

func (i ServiceComputeSyslogArgs) ToServiceComputeSyslogOutputWithContext(ctx context.Context) ServiceComputeSyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeSyslogOutput)
}

// ServiceComputeSyslogArrayInput is an input type that accepts ServiceComputeSyslogArray and ServiceComputeSyslogArrayOutput values.
// You can construct a concrete instance of `ServiceComputeSyslogArrayInput` via:
//
//          ServiceComputeSyslogArray{ ServiceComputeSyslogArgs{...} }
type ServiceComputeSyslogArrayInput interface {
	pulumi.Input

	ToServiceComputeSyslogArrayOutput() ServiceComputeSyslogArrayOutput
	ToServiceComputeSyslogArrayOutputWithContext(context.Context) ServiceComputeSyslogArrayOutput
}

type ServiceComputeSyslogArray []ServiceComputeSyslogInput

func (ServiceComputeSyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeSyslog)(nil)).Elem()
}

func (i ServiceComputeSyslogArray) ToServiceComputeSyslogArrayOutput() ServiceComputeSyslogArrayOutput {
	return i.ToServiceComputeSyslogArrayOutputWithContext(context.Background())
}

func (i ServiceComputeSyslogArray) ToServiceComputeSyslogArrayOutputWithContext(ctx context.Context) ServiceComputeSyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeSyslogArrayOutput)
}

type ServiceComputeSyslogOutput struct{ *pulumi.OutputState }

func (ServiceComputeSyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeSyslog)(nil)).Elem()
}

func (o ServiceComputeSyslogOutput) ToServiceComputeSyslogOutput() ServiceComputeSyslogOutput {
	return o
}

func (o ServiceComputeSyslogOutput) ToServiceComputeSyslogOutputWithContext(ctx context.Context) ServiceComputeSyslogOutput {
	return o
}

// A hostname or IPv4 address of the Syslog endpoint
func (o ServiceComputeSyslogOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) string { return v.Address }).(pulumi.StringOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
func (o ServiceComputeSyslogOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeSyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) string { return v.Name }).(pulumi.StringOutput)
}

// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
func (o ServiceComputeSyslogOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o ServiceComputeSyslogOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeSyslogOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeSyslogOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// Used during the TLS handshake to validate the certificate
func (o ServiceComputeSyslogOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// Whether to prepend each message with a specific token
func (o ServiceComputeSyslogOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Whether to use TLS for secure logging. Default `false`
func (o ServiceComputeSyslogOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeSyslog) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type ServiceComputeSyslogArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeSyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeSyslog)(nil)).Elem()
}

func (o ServiceComputeSyslogArrayOutput) ToServiceComputeSyslogArrayOutput() ServiceComputeSyslogArrayOutput {
	return o
}

func (o ServiceComputeSyslogArrayOutput) ToServiceComputeSyslogArrayOutputWithContext(ctx context.Context) ServiceComputeSyslogArrayOutput {
	return o
}

func (o ServiceComputeSyslogArrayOutput) Index(i pulumi.IntInput) ServiceComputeSyslogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeSyslog {
		return vs[0].([]ServiceComputeSyslog)[vs[1].(int)]
	}).(ServiceComputeSyslogOutput)
}

type ServiceWafConfigurationRule struct {
	ModsecRuleId int `pulumi:"modsecRuleId"`
	// The Web Application Firewall rule's revision. The latest revision will be used if this is not provided
	Revision *int `pulumi:"revision"`
	// The Web Application Firewall rule's status. Allowed values are (`log`, `block` and `score`)
	Status string `pulumi:"status"`
}

// ServiceWafConfigurationRuleInput is an input type that accepts ServiceWafConfigurationRuleArgs and ServiceWafConfigurationRuleOutput values.
// You can construct a concrete instance of `ServiceWafConfigurationRuleInput` via:
//
//          ServiceWafConfigurationRuleArgs{...}
type ServiceWafConfigurationRuleInput interface {
	pulumi.Input

	ToServiceWafConfigurationRuleOutput() ServiceWafConfigurationRuleOutput
	ToServiceWafConfigurationRuleOutputWithContext(context.Context) ServiceWafConfigurationRuleOutput
}

type ServiceWafConfigurationRuleArgs struct {
	ModsecRuleId pulumi.IntInput `pulumi:"modsecRuleId"`
	// The Web Application Firewall rule's revision. The latest revision will be used if this is not provided
	Revision pulumi.IntPtrInput `pulumi:"revision"`
	// The Web Application Firewall rule's status. Allowed values are (`log`, `block` and `score`)
	Status pulumi.StringInput `pulumi:"status"`
}

func (ServiceWafConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceWafConfigurationRule)(nil)).Elem()
}

func (i ServiceWafConfigurationRuleArgs) ToServiceWafConfigurationRuleOutput() ServiceWafConfigurationRuleOutput {
	return i.ToServiceWafConfigurationRuleOutputWithContext(context.Background())
}

func (i ServiceWafConfigurationRuleArgs) ToServiceWafConfigurationRuleOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWafConfigurationRuleOutput)
}

// ServiceWafConfigurationRuleArrayInput is an input type that accepts ServiceWafConfigurationRuleArray and ServiceWafConfigurationRuleArrayOutput values.
// You can construct a concrete instance of `ServiceWafConfigurationRuleArrayInput` via:
//
//          ServiceWafConfigurationRuleArray{ ServiceWafConfigurationRuleArgs{...} }
type ServiceWafConfigurationRuleArrayInput interface {
	pulumi.Input

	ToServiceWafConfigurationRuleArrayOutput() ServiceWafConfigurationRuleArrayOutput
	ToServiceWafConfigurationRuleArrayOutputWithContext(context.Context) ServiceWafConfigurationRuleArrayOutput
}

type ServiceWafConfigurationRuleArray []ServiceWafConfigurationRuleInput

func (ServiceWafConfigurationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceWafConfigurationRule)(nil)).Elem()
}

func (i ServiceWafConfigurationRuleArray) ToServiceWafConfigurationRuleArrayOutput() ServiceWafConfigurationRuleArrayOutput {
	return i.ToServiceWafConfigurationRuleArrayOutputWithContext(context.Background())
}

func (i ServiceWafConfigurationRuleArray) ToServiceWafConfigurationRuleArrayOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWafConfigurationRuleArrayOutput)
}

type ServiceWafConfigurationRuleOutput struct{ *pulumi.OutputState }

func (ServiceWafConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceWafConfigurationRule)(nil)).Elem()
}

func (o ServiceWafConfigurationRuleOutput) ToServiceWafConfigurationRuleOutput() ServiceWafConfigurationRuleOutput {
	return o
}

func (o ServiceWafConfigurationRuleOutput) ToServiceWafConfigurationRuleOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleOutput {
	return o
}

func (o ServiceWafConfigurationRuleOutput) ModsecRuleId() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRule) int { return v.ModsecRuleId }).(pulumi.IntOutput)
}

// The Web Application Firewall rule's revision. The latest revision will be used if this is not provided
func (o ServiceWafConfigurationRuleOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRule) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// The Web Application Firewall rule's status. Allowed values are (`log`, `block` and `score`)
func (o ServiceWafConfigurationRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRule) string { return v.Status }).(pulumi.StringOutput)
}

type ServiceWafConfigurationRuleArrayOutput struct{ *pulumi.OutputState }

func (ServiceWafConfigurationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceWafConfigurationRule)(nil)).Elem()
}

func (o ServiceWafConfigurationRuleArrayOutput) ToServiceWafConfigurationRuleArrayOutput() ServiceWafConfigurationRuleArrayOutput {
	return o
}

func (o ServiceWafConfigurationRuleArrayOutput) ToServiceWafConfigurationRuleArrayOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleArrayOutput {
	return o
}

func (o ServiceWafConfigurationRuleArrayOutput) Index(i pulumi.IntInput) ServiceWafConfigurationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceWafConfigurationRule {
		return vs[0].([]ServiceWafConfigurationRule)[vs[1].(int)]
	}).(ServiceWafConfigurationRuleOutput)
}

type ServiceWafConfigurationRuleExclusion struct {
	// A conditional expression in VCL used to determine if the condition is met
	Condition string `pulumi:"condition"`
	// The type of rule exclusion. Values are `rule` to exclude the specified rule(s), or `waf` to disable the Web Application Firewall
	ExclusionType string `pulumi:"exclusionType"`
	ModsecRuleIds []int  `pulumi:"modsecRuleIds"`
	// The name of rule exclusion
	Name string `pulumi:"name"`
	// The numeric ID assigned to the WAF Rule Exclusion
	Number *int `pulumi:"number"`
}

// ServiceWafConfigurationRuleExclusionInput is an input type that accepts ServiceWafConfigurationRuleExclusionArgs and ServiceWafConfigurationRuleExclusionOutput values.
// You can construct a concrete instance of `ServiceWafConfigurationRuleExclusionInput` via:
//
//          ServiceWafConfigurationRuleExclusionArgs{...}
type ServiceWafConfigurationRuleExclusionInput interface {
	pulumi.Input

	ToServiceWafConfigurationRuleExclusionOutput() ServiceWafConfigurationRuleExclusionOutput
	ToServiceWafConfigurationRuleExclusionOutputWithContext(context.Context) ServiceWafConfigurationRuleExclusionOutput
}

type ServiceWafConfigurationRuleExclusionArgs struct {
	// A conditional expression in VCL used to determine if the condition is met
	Condition pulumi.StringInput `pulumi:"condition"`
	// The type of rule exclusion. Values are `rule` to exclude the specified rule(s), or `waf` to disable the Web Application Firewall
	ExclusionType pulumi.StringInput   `pulumi:"exclusionType"`
	ModsecRuleIds pulumi.IntArrayInput `pulumi:"modsecRuleIds"`
	// The name of rule exclusion
	Name pulumi.StringInput `pulumi:"name"`
	// The numeric ID assigned to the WAF Rule Exclusion
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (ServiceWafConfigurationRuleExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceWafConfigurationRuleExclusion)(nil)).Elem()
}

func (i ServiceWafConfigurationRuleExclusionArgs) ToServiceWafConfigurationRuleExclusionOutput() ServiceWafConfigurationRuleExclusionOutput {
	return i.ToServiceWafConfigurationRuleExclusionOutputWithContext(context.Background())
}

func (i ServiceWafConfigurationRuleExclusionArgs) ToServiceWafConfigurationRuleExclusionOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWafConfigurationRuleExclusionOutput)
}

// ServiceWafConfigurationRuleExclusionArrayInput is an input type that accepts ServiceWafConfigurationRuleExclusionArray and ServiceWafConfigurationRuleExclusionArrayOutput values.
// You can construct a concrete instance of `ServiceWafConfigurationRuleExclusionArrayInput` via:
//
//          ServiceWafConfigurationRuleExclusionArray{ ServiceWafConfigurationRuleExclusionArgs{...} }
type ServiceWafConfigurationRuleExclusionArrayInput interface {
	pulumi.Input

	ToServiceWafConfigurationRuleExclusionArrayOutput() ServiceWafConfigurationRuleExclusionArrayOutput
	ToServiceWafConfigurationRuleExclusionArrayOutputWithContext(context.Context) ServiceWafConfigurationRuleExclusionArrayOutput
}

type ServiceWafConfigurationRuleExclusionArray []ServiceWafConfigurationRuleExclusionInput

func (ServiceWafConfigurationRuleExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceWafConfigurationRuleExclusion)(nil)).Elem()
}

func (i ServiceWafConfigurationRuleExclusionArray) ToServiceWafConfigurationRuleExclusionArrayOutput() ServiceWafConfigurationRuleExclusionArrayOutput {
	return i.ToServiceWafConfigurationRuleExclusionArrayOutputWithContext(context.Background())
}

func (i ServiceWafConfigurationRuleExclusionArray) ToServiceWafConfigurationRuleExclusionArrayOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWafConfigurationRuleExclusionArrayOutput)
}

type ServiceWafConfigurationRuleExclusionOutput struct{ *pulumi.OutputState }

func (ServiceWafConfigurationRuleExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceWafConfigurationRuleExclusion)(nil)).Elem()
}

func (o ServiceWafConfigurationRuleExclusionOutput) ToServiceWafConfigurationRuleExclusionOutput() ServiceWafConfigurationRuleExclusionOutput {
	return o
}

func (o ServiceWafConfigurationRuleExclusionOutput) ToServiceWafConfigurationRuleExclusionOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleExclusionOutput {
	return o
}

// A conditional expression in VCL used to determine if the condition is met
func (o ServiceWafConfigurationRuleExclusionOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) string { return v.Condition }).(pulumi.StringOutput)
}

// The type of rule exclusion. Values are `rule` to exclude the specified rule(s), or `waf` to disable the Web Application Firewall
func (o ServiceWafConfigurationRuleExclusionOutput) ExclusionType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) string { return v.ExclusionType }).(pulumi.StringOutput)
}

func (o ServiceWafConfigurationRuleExclusionOutput) ModsecRuleIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) []int { return v.ModsecRuleIds }).(pulumi.IntArrayOutput)
}

// The name of rule exclusion
func (o ServiceWafConfigurationRuleExclusionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) string { return v.Name }).(pulumi.StringOutput)
}

// The numeric ID assigned to the WAF Rule Exclusion
func (o ServiceWafConfigurationRuleExclusionOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type ServiceWafConfigurationRuleExclusionArrayOutput struct{ *pulumi.OutputState }

func (ServiceWafConfigurationRuleExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceWafConfigurationRuleExclusion)(nil)).Elem()
}

func (o ServiceWafConfigurationRuleExclusionArrayOutput) ToServiceWafConfigurationRuleExclusionArrayOutput() ServiceWafConfigurationRuleExclusionArrayOutput {
	return o
}

func (o ServiceWafConfigurationRuleExclusionArrayOutput) ToServiceWafConfigurationRuleExclusionArrayOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleExclusionArrayOutput {
	return o
}

func (o ServiceWafConfigurationRuleExclusionArrayOutput) Index(i pulumi.IntInput) ServiceWafConfigurationRuleExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceWafConfigurationRuleExclusion {
		return vs[0].([]ServiceWafConfigurationRuleExclusion)[vs[1].(int)]
	}).(ServiceWafConfigurationRuleExclusionOutput)
}

type Servicev1Acl struct {
	// The ID of the ACL
	AclId *string `pulumi:"aclId"`
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name string `pulumi:"name"`
}

// Servicev1AclInput is an input type that accepts Servicev1AclArgs and Servicev1AclOutput values.
// You can construct a concrete instance of `Servicev1AclInput` via:
//
//          Servicev1AclArgs{...}
type Servicev1AclInput interface {
	pulumi.Input

	ToServicev1AclOutput() Servicev1AclOutput
	ToServicev1AclOutputWithContext(context.Context) Servicev1AclOutput
}

type Servicev1AclArgs struct {
	// The ID of the ACL
	AclId pulumi.StringPtrInput `pulumi:"aclId"`
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput `pulumi:"forceDestroy"`
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Acl)(nil)).Elem()
}

func (i Servicev1AclArgs) ToServicev1AclOutput() Servicev1AclOutput {
	return i.ToServicev1AclOutputWithContext(context.Background())
}

func (i Servicev1AclArgs) ToServicev1AclOutputWithContext(ctx context.Context) Servicev1AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1AclOutput)
}

// Servicev1AclArrayInput is an input type that accepts Servicev1AclArray and Servicev1AclArrayOutput values.
// You can construct a concrete instance of `Servicev1AclArrayInput` via:
//
//          Servicev1AclArray{ Servicev1AclArgs{...} }
type Servicev1AclArrayInput interface {
	pulumi.Input

	ToServicev1AclArrayOutput() Servicev1AclArrayOutput
	ToServicev1AclArrayOutputWithContext(context.Context) Servicev1AclArrayOutput
}

type Servicev1AclArray []Servicev1AclInput

func (Servicev1AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Acl)(nil)).Elem()
}

func (i Servicev1AclArray) ToServicev1AclArrayOutput() Servicev1AclArrayOutput {
	return i.ToServicev1AclArrayOutputWithContext(context.Background())
}

func (i Servicev1AclArray) ToServicev1AclArrayOutputWithContext(ctx context.Context) Servicev1AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1AclArrayOutput)
}

type Servicev1AclOutput struct{ *pulumi.OutputState }

func (Servicev1AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Acl)(nil)).Elem()
}

func (o Servicev1AclOutput) ToServicev1AclOutput() Servicev1AclOutput {
	return o
}

func (o Servicev1AclOutput) ToServicev1AclOutputWithContext(ctx context.Context) Servicev1AclOutput {
	return o
}

// The ID of the ACL
func (o Servicev1AclOutput) AclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Acl) *string { return v.AclId }).(pulumi.StringPtrOutput)
}

// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
func (o Servicev1AclOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Acl) *bool { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
func (o Servicev1AclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Acl) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1AclArrayOutput struct{ *pulumi.OutputState }

func (Servicev1AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Acl)(nil)).Elem()
}

func (o Servicev1AclArrayOutput) ToServicev1AclArrayOutput() Servicev1AclArrayOutput {
	return o
}

func (o Servicev1AclArrayOutput) ToServicev1AclArrayOutputWithContext(ctx context.Context) Servicev1AclArrayOutput {
	return o
}

func (o Servicev1AclArrayOutput) Index(i pulumi.IntInput) Servicev1AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Acl {
		return vs[0].([]Servicev1Acl)[vs[1].(int)]
	}).(Servicev1AclOutput)
}

type Servicev1Backend struct {
	// An IPv4, hostname, or IPv6 address for the Backend
	Address string `pulumi:"address"`
	// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `true`
	AutoLoadbalance     *bool `pulumi:"autoLoadbalance"`
	BetweenBytesTimeout *int  `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds. Default `1000`
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`
	ErrorThreshold   *int `pulumi:"errorThreshold"`
	FirstByteTimeout *int `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthcheck *string `pulumi:"healthcheck"`
	// Maximum number of connections for this Backend. Default `200`
	MaxConn       *int    `pulumi:"maxConn"`
	MaxTlsVersion *string `pulumi:"maxTlsVersion"`
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The hostname to override the Host header
	OverrideHost *string `pulumi:"overrideHost"`
	// The port number on which the Backend responds. Default `80`
	Port *int `pulumi:"port"`
	// Name of a condition, which if met, will select this backend during a request.
	RequestCondition *string `pulumi:"requestCondition"`
	// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
	Shield          *string `pulumi:"shield"`
	SslCaCert       *string `pulumi:"sslCaCert"`
	SslCertHostname *string `pulumi:"sslCertHostname"`
	SslCheckCert    *bool   `pulumi:"sslCheckCert"`
	// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend
	SslCiphers    *string `pulumi:"sslCiphers"`
	SslClientCert *string `pulumi:"sslClientCert"`
	SslClientKey  *string `pulumi:"sslClientKey"`
	// Used for both SNI during the TLS handshake and to validate the cert
	//
	// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
	SslHostname    *string `pulumi:"sslHostname"`
	SslSniHostname *string `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the Backend. Default `false`
	UseSsl *bool `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
	Weight *int `pulumi:"weight"`
}

// Servicev1BackendInput is an input type that accepts Servicev1BackendArgs and Servicev1BackendOutput values.
// You can construct a concrete instance of `Servicev1BackendInput` via:
//
//          Servicev1BackendArgs{...}
type Servicev1BackendInput interface {
	pulumi.Input

	ToServicev1BackendOutput() Servicev1BackendOutput
	ToServicev1BackendOutputWithContext(context.Context) Servicev1BackendOutput
}

type Servicev1BackendArgs struct {
	// An IPv4, hostname, or IPv6 address for the Backend
	Address pulumi.StringInput `pulumi:"address"`
	// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `true`
	AutoLoadbalance     pulumi.BoolPtrInput `pulumi:"autoLoadbalance"`
	BetweenBytesTimeout pulumi.IntPtrInput  `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds. Default `1000`
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`
	ErrorThreshold   pulumi.IntPtrInput `pulumi:"errorThreshold"`
	FirstByteTimeout pulumi.IntPtrInput `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthcheck pulumi.StringPtrInput `pulumi:"healthcheck"`
	// Maximum number of connections for this Backend. Default `200`
	MaxConn       pulumi.IntPtrInput    `pulumi:"maxConn"`
	MaxTlsVersion pulumi.StringPtrInput `pulumi:"maxTlsVersion"`
	MinTlsVersion pulumi.StringPtrInput `pulumi:"minTlsVersion"`
	// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The hostname to override the Host header
	OverrideHost pulumi.StringPtrInput `pulumi:"overrideHost"`
	// The port number on which the Backend responds. Default `80`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of a condition, which if met, will select this backend during a request.
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
	Shield          pulumi.StringPtrInput `pulumi:"shield"`
	SslCaCert       pulumi.StringPtrInput `pulumi:"sslCaCert"`
	SslCertHostname pulumi.StringPtrInput `pulumi:"sslCertHostname"`
	SslCheckCert    pulumi.BoolPtrInput   `pulumi:"sslCheckCert"`
	// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend
	SslCiphers    pulumi.StringPtrInput `pulumi:"sslCiphers"`
	SslClientCert pulumi.StringPtrInput `pulumi:"sslClientCert"`
	SslClientKey  pulumi.StringPtrInput `pulumi:"sslClientKey"`
	// Used for both SNI during the TLS handshake and to validate the cert
	//
	// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
	SslHostname    pulumi.StringPtrInput `pulumi:"sslHostname"`
	SslSniHostname pulumi.StringPtrInput `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the Backend. Default `false`
	UseSsl pulumi.BoolPtrInput `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (Servicev1BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Backend)(nil)).Elem()
}

func (i Servicev1BackendArgs) ToServicev1BackendOutput() Servicev1BackendOutput {
	return i.ToServicev1BackendOutputWithContext(context.Background())
}

func (i Servicev1BackendArgs) ToServicev1BackendOutputWithContext(ctx context.Context) Servicev1BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BackendOutput)
}

// Servicev1BackendArrayInput is an input type that accepts Servicev1BackendArray and Servicev1BackendArrayOutput values.
// You can construct a concrete instance of `Servicev1BackendArrayInput` via:
//
//          Servicev1BackendArray{ Servicev1BackendArgs{...} }
type Servicev1BackendArrayInput interface {
	pulumi.Input

	ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput
	ToServicev1BackendArrayOutputWithContext(context.Context) Servicev1BackendArrayOutput
}

type Servicev1BackendArray []Servicev1BackendInput

func (Servicev1BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Backend)(nil)).Elem()
}

func (i Servicev1BackendArray) ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput {
	return i.ToServicev1BackendArrayOutputWithContext(context.Background())
}

func (i Servicev1BackendArray) ToServicev1BackendArrayOutputWithContext(ctx context.Context) Servicev1BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BackendArrayOutput)
}

type Servicev1BackendOutput struct{ *pulumi.OutputState }

func (Servicev1BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Backend)(nil)).Elem()
}

func (o Servicev1BackendOutput) ToServicev1BackendOutput() Servicev1BackendOutput {
	return o
}

func (o Servicev1BackendOutput) ToServicev1BackendOutputWithContext(ctx context.Context) Servicev1BackendOutput {
	return o
}

// An IPv4, hostname, or IPv6 address for the Backend
func (o Servicev1BackendOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Backend) string { return v.Address }).(pulumi.StringOutput)
}

// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `true`
func (o Servicev1BackendOutput) AutoLoadbalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *bool { return v.AutoLoadbalance }).(pulumi.BoolPtrOutput)
}

func (o Servicev1BackendOutput) BetweenBytesTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.BetweenBytesTimeout }).(pulumi.IntPtrOutput)
}

// How long to wait for a timeout in milliseconds. Default `1000`
func (o Servicev1BackendOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Number of errors to allow before the Backend is marked as down. Default `0`
func (o Servicev1BackendOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

func (o Servicev1BackendOutput) FirstByteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.FirstByteTimeout }).(pulumi.IntPtrOutput)
}

// Name of a defined `healthcheck` to assign to this backend
func (o Servicev1BackendOutput) Healthcheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.Healthcheck }).(pulumi.StringPtrOutput)
}

// Maximum number of connections for this Backend. Default `200`
func (o Servicev1BackendOutput) MaxConn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.MaxConn }).(pulumi.IntPtrOutput)
}

func (o Servicev1BackendOutput) MaxTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.MaxTlsVersion }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) MinTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.MinTlsVersion }).(pulumi.StringPtrOutput)
}

// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1BackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Backend) string { return v.Name }).(pulumi.StringOutput)
}

// The hostname to override the Host header
func (o Servicev1BackendOutput) OverrideHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.OverrideHost }).(pulumi.StringPtrOutput)
}

// The port number on which the Backend responds. Default `80`
func (o Servicev1BackendOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of a condition, which if met, will select this backend during a request.
func (o Servicev1BackendOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
func (o Servicev1BackendOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslCaCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslCertHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslCertHostname }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslCheckCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *bool { return v.SslCheckCert }).(pulumi.BoolPtrOutput)
}

// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend
func (o Servicev1BackendOutput) SslCiphers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslCiphers }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslClientCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslClientKey }).(pulumi.StringPtrOutput)
}

// Used for both SNI during the TLS handshake and to validate the cert
//
// Deprecated: Use ssl_cert_hostname and ssl_sni_hostname instead.
func (o Servicev1BackendOutput) SslHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslHostname }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslSniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *string { return v.SslSniHostname }).(pulumi.StringPtrOutput)
}

// Whether or not to use SSL to reach the Backend. Default `false`
func (o Servicev1BackendOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *bool { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
func (o Servicev1BackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Backend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type Servicev1BackendArrayOutput struct{ *pulumi.OutputState }

func (Servicev1BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Backend)(nil)).Elem()
}

func (o Servicev1BackendArrayOutput) ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput {
	return o
}

func (o Servicev1BackendArrayOutput) ToServicev1BackendArrayOutputWithContext(ctx context.Context) Servicev1BackendArrayOutput {
	return o
}

func (o Servicev1BackendArrayOutput) Index(i pulumi.IntInput) Servicev1BackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Backend {
		return vs[0].([]Servicev1Backend)[vs[1].(int)]
	}).(Servicev1BackendOutput)
}

type Servicev1Bigquerylogging struct {
	// The ID of your BigQuery dataset
	Dataset string `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
	Email string `pulumi:"email"`
	// The logging format desired.
	Format *string `pulumi:"format"`
	// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The ID of your GCP project
	ProjectId string `pulumi:"projectId"`
	// Name of a condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
	SecretKey string `pulumi:"secretKey"`
	// The ID of your BigQuery table
	Table string `pulumi:"table"`
	// BigQuery table name suffix template
	Template *string `pulumi:"template"`
}

// Servicev1BigqueryloggingInput is an input type that accepts Servicev1BigqueryloggingArgs and Servicev1BigqueryloggingOutput values.
// You can construct a concrete instance of `Servicev1BigqueryloggingInput` via:
//
//          Servicev1BigqueryloggingArgs{...}
type Servicev1BigqueryloggingInput interface {
	pulumi.Input

	ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput
	ToServicev1BigqueryloggingOutputWithContext(context.Context) Servicev1BigqueryloggingOutput
}

type Servicev1BigqueryloggingArgs struct {
	// The ID of your BigQuery dataset
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
	Email pulumi.StringInput `pulumi:"email"`
	// The logging format desired.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The ID of your GCP project
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Name of a condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The ID of your BigQuery table
	Table pulumi.StringInput `pulumi:"table"`
	// BigQuery table name suffix template
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (Servicev1BigqueryloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Bigquerylogging)(nil)).Elem()
}

func (i Servicev1BigqueryloggingArgs) ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput {
	return i.ToServicev1BigqueryloggingOutputWithContext(context.Background())
}

func (i Servicev1BigqueryloggingArgs) ToServicev1BigqueryloggingOutputWithContext(ctx context.Context) Servicev1BigqueryloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BigqueryloggingOutput)
}

// Servicev1BigqueryloggingArrayInput is an input type that accepts Servicev1BigqueryloggingArray and Servicev1BigqueryloggingArrayOutput values.
// You can construct a concrete instance of `Servicev1BigqueryloggingArrayInput` via:
//
//          Servicev1BigqueryloggingArray{ Servicev1BigqueryloggingArgs{...} }
type Servicev1BigqueryloggingArrayInput interface {
	pulumi.Input

	ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput
	ToServicev1BigqueryloggingArrayOutputWithContext(context.Context) Servicev1BigqueryloggingArrayOutput
}

type Servicev1BigqueryloggingArray []Servicev1BigqueryloggingInput

func (Servicev1BigqueryloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Bigquerylogging)(nil)).Elem()
}

func (i Servicev1BigqueryloggingArray) ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput {
	return i.ToServicev1BigqueryloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1BigqueryloggingArray) ToServicev1BigqueryloggingArrayOutputWithContext(ctx context.Context) Servicev1BigqueryloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BigqueryloggingArrayOutput)
}

type Servicev1BigqueryloggingOutput struct{ *pulumi.OutputState }

func (Servicev1BigqueryloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Bigquerylogging)(nil)).Elem()
}

func (o Servicev1BigqueryloggingOutput) ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput {
	return o
}

func (o Servicev1BigqueryloggingOutput) ToServicev1BigqueryloggingOutputWithContext(ctx context.Context) Servicev1BigqueryloggingOutput {
	return o
}

// The ID of your BigQuery dataset
func (o Servicev1BigqueryloggingOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.Dataset }).(pulumi.StringOutput)
}

// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
func (o Servicev1BigqueryloggingOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.Email }).(pulumi.StringOutput)
}

// The logging format desired.
func (o Servicev1BigqueryloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1BigqueryloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1BigqueryloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The ID of your GCP project
func (o Servicev1BigqueryloggingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Name of a condition to apply this logging.
func (o Servicev1BigqueryloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
func (o Servicev1BigqueryloggingOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The ID of your BigQuery table
func (o Servicev1BigqueryloggingOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) string { return v.Table }).(pulumi.StringOutput)
}

// BigQuery table name suffix template
func (o Servicev1BigqueryloggingOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Bigquerylogging) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type Servicev1BigqueryloggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1BigqueryloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Bigquerylogging)(nil)).Elem()
}

func (o Servicev1BigqueryloggingArrayOutput) ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput {
	return o
}

func (o Servicev1BigqueryloggingArrayOutput) ToServicev1BigqueryloggingArrayOutputWithContext(ctx context.Context) Servicev1BigqueryloggingArrayOutput {
	return o
}

func (o Servicev1BigqueryloggingArrayOutput) Index(i pulumi.IntInput) Servicev1BigqueryloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Bigquerylogging {
		return vs[0].([]Servicev1Bigquerylogging)[vs[1].(int)]
	}).(Servicev1BigqueryloggingOutput)
}

type Servicev1Blobstoragelogging struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored
	AccountName string `pulumi:"accountName"`
	// The name of the Azure Blob Storage container in which to store logs
	Container string `pulumi:"container"`
	// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of the condition to apply
	ResponseCondition *string `pulumi:"responseCondition"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
	SasToken string `pulumi:"sasToken"`
	// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// Servicev1BlobstorageloggingInput is an input type that accepts Servicev1BlobstorageloggingArgs and Servicev1BlobstorageloggingOutput values.
// You can construct a concrete instance of `Servicev1BlobstorageloggingInput` via:
//
//          Servicev1BlobstorageloggingArgs{...}
type Servicev1BlobstorageloggingInput interface {
	pulumi.Input

	ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput
	ToServicev1BlobstorageloggingOutputWithContext(context.Context) Servicev1BlobstorageloggingOutput
}

type Servicev1BlobstorageloggingArgs struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The name of the Azure Blob Storage container in which to store logs
	Container pulumi.StringInput `pulumi:"container"`
	// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the condition to apply
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
	SasToken pulumi.StringInput `pulumi:"sasToken"`
	// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1BlobstorageloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Blobstoragelogging)(nil)).Elem()
}

func (i Servicev1BlobstorageloggingArgs) ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput {
	return i.ToServicev1BlobstorageloggingOutputWithContext(context.Background())
}

func (i Servicev1BlobstorageloggingArgs) ToServicev1BlobstorageloggingOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BlobstorageloggingOutput)
}

// Servicev1BlobstorageloggingArrayInput is an input type that accepts Servicev1BlobstorageloggingArray and Servicev1BlobstorageloggingArrayOutput values.
// You can construct a concrete instance of `Servicev1BlobstorageloggingArrayInput` via:
//
//          Servicev1BlobstorageloggingArray{ Servicev1BlobstorageloggingArgs{...} }
type Servicev1BlobstorageloggingArrayInput interface {
	pulumi.Input

	ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput
	ToServicev1BlobstorageloggingArrayOutputWithContext(context.Context) Servicev1BlobstorageloggingArrayOutput
}

type Servicev1BlobstorageloggingArray []Servicev1BlobstorageloggingInput

func (Servicev1BlobstorageloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Blobstoragelogging)(nil)).Elem()
}

func (i Servicev1BlobstorageloggingArray) ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput {
	return i.ToServicev1BlobstorageloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1BlobstorageloggingArray) ToServicev1BlobstorageloggingArrayOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BlobstorageloggingArrayOutput)
}

type Servicev1BlobstorageloggingOutput struct{ *pulumi.OutputState }

func (Servicev1BlobstorageloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Blobstoragelogging)(nil)).Elem()
}

func (o Servicev1BlobstorageloggingOutput) ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput {
	return o
}

func (o Servicev1BlobstorageloggingOutput) ToServicev1BlobstorageloggingOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingOutput {
	return o
}

// The unique Azure Blob Storage namespace in which your data objects are stored
func (o Servicev1BlobstorageloggingOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) string { return v.AccountName }).(pulumi.StringOutput)
}

// The name of the Azure Blob Storage container in which to store logs
func (o Servicev1BlobstorageloggingOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) string { return v.Container }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
func (o Servicev1BlobstorageloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
func (o Servicev1BlobstorageloggingOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o Servicev1BlobstorageloggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default `classic`
func (o Servicev1BlobstorageloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1BlobstorageloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
func (o Servicev1BlobstorageloggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred in seconds. Default `3600`
func (o Servicev1BlobstorageloggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed
func (o Servicev1BlobstorageloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o Servicev1BlobstorageloggingOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply
func (o Servicev1BlobstorageloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
func (o Servicev1BlobstorageloggingOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) string { return v.SasToken }).(pulumi.StringOutput)
}

// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`
func (o Servicev1BlobstorageloggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Blobstoragelogging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1BlobstorageloggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1BlobstorageloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Blobstoragelogging)(nil)).Elem()
}

func (o Servicev1BlobstorageloggingArrayOutput) ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput {
	return o
}

func (o Servicev1BlobstorageloggingArrayOutput) ToServicev1BlobstorageloggingArrayOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingArrayOutput {
	return o
}

func (o Servicev1BlobstorageloggingArrayOutput) Index(i pulumi.IntInput) Servicev1BlobstorageloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Blobstoragelogging {
		return vs[0].([]Servicev1Blobstoragelogging)[vs[1].(int)]
	}).(Servicev1BlobstorageloggingOutput)
}

type Servicev1CacheSetting struct {
	// One of cache, pass, or restart, as defined on Fastly's documentation under "[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)"
	Action *string `pulumi:"action"`
	// Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
	CacheCondition *string `pulumi:"cacheCondition"`
	// Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Max "Time To Live" for stale (unreachable) objects
	StaleTtl *int `pulumi:"staleTtl"`
	// The Time-To-Live (TTL) for the object
	Ttl *int `pulumi:"ttl"`
}

// Servicev1CacheSettingInput is an input type that accepts Servicev1CacheSettingArgs and Servicev1CacheSettingOutput values.
// You can construct a concrete instance of `Servicev1CacheSettingInput` via:
//
//          Servicev1CacheSettingArgs{...}
type Servicev1CacheSettingInput interface {
	pulumi.Input

	ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput
	ToServicev1CacheSettingOutputWithContext(context.Context) Servicev1CacheSettingOutput
}

type Servicev1CacheSettingArgs struct {
	// One of cache, pass, or restart, as defined on Fastly's documentation under "[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)"
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Max "Time To Live" for stale (unreachable) objects
	StaleTtl pulumi.IntPtrInput `pulumi:"staleTtl"`
	// The Time-To-Live (TTL) for the object
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (Servicev1CacheSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1CacheSetting)(nil)).Elem()
}

func (i Servicev1CacheSettingArgs) ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput {
	return i.ToServicev1CacheSettingOutputWithContext(context.Background())
}

func (i Servicev1CacheSettingArgs) ToServicev1CacheSettingOutputWithContext(ctx context.Context) Servicev1CacheSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1CacheSettingOutput)
}

// Servicev1CacheSettingArrayInput is an input type that accepts Servicev1CacheSettingArray and Servicev1CacheSettingArrayOutput values.
// You can construct a concrete instance of `Servicev1CacheSettingArrayInput` via:
//
//          Servicev1CacheSettingArray{ Servicev1CacheSettingArgs{...} }
type Servicev1CacheSettingArrayInput interface {
	pulumi.Input

	ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput
	ToServicev1CacheSettingArrayOutputWithContext(context.Context) Servicev1CacheSettingArrayOutput
}

type Servicev1CacheSettingArray []Servicev1CacheSettingInput

func (Servicev1CacheSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1CacheSetting)(nil)).Elem()
}

func (i Servicev1CacheSettingArray) ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput {
	return i.ToServicev1CacheSettingArrayOutputWithContext(context.Background())
}

func (i Servicev1CacheSettingArray) ToServicev1CacheSettingArrayOutputWithContext(ctx context.Context) Servicev1CacheSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1CacheSettingArrayOutput)
}

type Servicev1CacheSettingOutput struct{ *pulumi.OutputState }

func (Servicev1CacheSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1CacheSetting)(nil)).Elem()
}

func (o Servicev1CacheSettingOutput) ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput {
	return o
}

func (o Servicev1CacheSettingOutput) ToServicev1CacheSettingOutputWithContext(ctx context.Context) Servicev1CacheSettingOutput {
	return o
}

// One of cache, pass, or restart, as defined on Fastly's documentation under "[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)"
func (o Servicev1CacheSettingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
func (o Servicev1CacheSettingOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1CacheSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) string { return v.Name }).(pulumi.StringOutput)
}

// Max "Time To Live" for stale (unreachable) objects
func (o Servicev1CacheSettingOutput) StaleTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) *int { return v.StaleTtl }).(pulumi.IntPtrOutput)
}

// The Time-To-Live (TTL) for the object
func (o Servicev1CacheSettingOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1CacheSetting) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type Servicev1CacheSettingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1CacheSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1CacheSetting)(nil)).Elem()
}

func (o Servicev1CacheSettingArrayOutput) ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput {
	return o
}

func (o Servicev1CacheSettingArrayOutput) ToServicev1CacheSettingArrayOutputWithContext(ctx context.Context) Servicev1CacheSettingArrayOutput {
	return o
}

func (o Servicev1CacheSettingArrayOutput) Index(i pulumi.IntInput) Servicev1CacheSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1CacheSetting {
		return vs[0].([]Servicev1CacheSetting)[vs[1].(int)]
	}).(Servicev1CacheSettingOutput)
}

type Servicev1Condition struct {
	// The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`
	Priority *int `pulumi:"priority"`
	// The statement used to determine if the condition is met
	Statement string `pulumi:"statement"`
	// Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)
	Type string `pulumi:"type"`
}

// Servicev1ConditionInput is an input type that accepts Servicev1ConditionArgs and Servicev1ConditionOutput values.
// You can construct a concrete instance of `Servicev1ConditionInput` via:
//
//          Servicev1ConditionArgs{...}
type Servicev1ConditionInput interface {
	pulumi.Input

	ToServicev1ConditionOutput() Servicev1ConditionOutput
	ToServicev1ConditionOutputWithContext(context.Context) Servicev1ConditionOutput
}

type Servicev1ConditionArgs struct {
	// The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The statement used to determine if the condition is met
	Statement pulumi.StringInput `pulumi:"statement"`
	// Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Condition)(nil)).Elem()
}

func (i Servicev1ConditionArgs) ToServicev1ConditionOutput() Servicev1ConditionOutput {
	return i.ToServicev1ConditionOutputWithContext(context.Background())
}

func (i Servicev1ConditionArgs) ToServicev1ConditionOutputWithContext(ctx context.Context) Servicev1ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ConditionOutput)
}

// Servicev1ConditionArrayInput is an input type that accepts Servicev1ConditionArray and Servicev1ConditionArrayOutput values.
// You can construct a concrete instance of `Servicev1ConditionArrayInput` via:
//
//          Servicev1ConditionArray{ Servicev1ConditionArgs{...} }
type Servicev1ConditionArrayInput interface {
	pulumi.Input

	ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput
	ToServicev1ConditionArrayOutputWithContext(context.Context) Servicev1ConditionArrayOutput
}

type Servicev1ConditionArray []Servicev1ConditionInput

func (Servicev1ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Condition)(nil)).Elem()
}

func (i Servicev1ConditionArray) ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput {
	return i.ToServicev1ConditionArrayOutputWithContext(context.Background())
}

func (i Servicev1ConditionArray) ToServicev1ConditionArrayOutputWithContext(ctx context.Context) Servicev1ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ConditionArrayOutput)
}

type Servicev1ConditionOutput struct{ *pulumi.OutputState }

func (Servicev1ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Condition)(nil)).Elem()
}

func (o Servicev1ConditionOutput) ToServicev1ConditionOutput() Servicev1ConditionOutput {
	return o
}

func (o Servicev1ConditionOutput) ToServicev1ConditionOutputWithContext(ctx context.Context) Servicev1ConditionOutput {
	return o
}

// The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1ConditionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Condition) string { return v.Name }).(pulumi.StringOutput)
}

// A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`
func (o Servicev1ConditionOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Condition) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The statement used to determine if the condition is met
func (o Servicev1ConditionOutput) Statement() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Condition) string { return v.Statement }).(pulumi.StringOutput)
}

// Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)
func (o Servicev1ConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Condition) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1ConditionArrayOutput struct{ *pulumi.OutputState }

func (Servicev1ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Condition)(nil)).Elem()
}

func (o Servicev1ConditionArrayOutput) ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput {
	return o
}

func (o Servicev1ConditionArrayOutput) ToServicev1ConditionArrayOutputWithContext(ctx context.Context) Servicev1ConditionArrayOutput {
	return o
}

func (o Servicev1ConditionArrayOutput) Index(i pulumi.IntInput) Servicev1ConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Condition {
		return vs[0].([]Servicev1Condition)[vs[1].(int)]
	}).(Servicev1ConditionOutput)
}

type Servicev1Dictionary struct {
	// The ID of the dictionary
	DictionaryId *string `pulumi:"dictionaryId"`
	// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
	Name      string `pulumi:"name"`
	WriteOnly *bool  `pulumi:"writeOnly"`
}

// Servicev1DictionaryInput is an input type that accepts Servicev1DictionaryArgs and Servicev1DictionaryOutput values.
// You can construct a concrete instance of `Servicev1DictionaryInput` via:
//
//          Servicev1DictionaryArgs{...}
type Servicev1DictionaryInput interface {
	pulumi.Input

	ToServicev1DictionaryOutput() Servicev1DictionaryOutput
	ToServicev1DictionaryOutputWithContext(context.Context) Servicev1DictionaryOutput
}

type Servicev1DictionaryArgs struct {
	// The ID of the dictionary
	DictionaryId pulumi.StringPtrInput `pulumi:"dictionaryId"`
	// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput `pulumi:"forceDestroy"`
	// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
	Name      pulumi.StringInput  `pulumi:"name"`
	WriteOnly pulumi.BoolPtrInput `pulumi:"writeOnly"`
}

func (Servicev1DictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dictionary)(nil)).Elem()
}

func (i Servicev1DictionaryArgs) ToServicev1DictionaryOutput() Servicev1DictionaryOutput {
	return i.ToServicev1DictionaryOutputWithContext(context.Background())
}

func (i Servicev1DictionaryArgs) ToServicev1DictionaryOutputWithContext(ctx context.Context) Servicev1DictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DictionaryOutput)
}

// Servicev1DictionaryArrayInput is an input type that accepts Servicev1DictionaryArray and Servicev1DictionaryArrayOutput values.
// You can construct a concrete instance of `Servicev1DictionaryArrayInput` via:
//
//          Servicev1DictionaryArray{ Servicev1DictionaryArgs{...} }
type Servicev1DictionaryArrayInput interface {
	pulumi.Input

	ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput
	ToServicev1DictionaryArrayOutputWithContext(context.Context) Servicev1DictionaryArrayOutput
}

type Servicev1DictionaryArray []Servicev1DictionaryInput

func (Servicev1DictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dictionary)(nil)).Elem()
}

func (i Servicev1DictionaryArray) ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput {
	return i.ToServicev1DictionaryArrayOutputWithContext(context.Background())
}

func (i Servicev1DictionaryArray) ToServicev1DictionaryArrayOutputWithContext(ctx context.Context) Servicev1DictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DictionaryArrayOutput)
}

type Servicev1DictionaryOutput struct{ *pulumi.OutputState }

func (Servicev1DictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dictionary)(nil)).Elem()
}

func (o Servicev1DictionaryOutput) ToServicev1DictionaryOutput() Servicev1DictionaryOutput {
	return o
}

func (o Servicev1DictionaryOutput) ToServicev1DictionaryOutputWithContext(ctx context.Context) Servicev1DictionaryOutput {
	return o
}

// The ID of the dictionary
func (o Servicev1DictionaryOutput) DictionaryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Dictionary) *string { return v.DictionaryId }).(pulumi.StringPtrOutput)
}

// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
func (o Servicev1DictionaryOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Dictionary) *bool { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
func (o Servicev1DictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Dictionary) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1DictionaryOutput) WriteOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Dictionary) *bool { return v.WriteOnly }).(pulumi.BoolPtrOutput)
}

type Servicev1DictionaryArrayOutput struct{ *pulumi.OutputState }

func (Servicev1DictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dictionary)(nil)).Elem()
}

func (o Servicev1DictionaryArrayOutput) ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput {
	return o
}

func (o Servicev1DictionaryArrayOutput) ToServicev1DictionaryArrayOutputWithContext(ctx context.Context) Servicev1DictionaryArrayOutput {
	return o
}

func (o Servicev1DictionaryArrayOutput) Index(i pulumi.IntInput) Servicev1DictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Dictionary {
		return vs[0].([]Servicev1Dictionary)[vs[1].(int)]
	}).(Servicev1DictionaryOutput)
}

type Servicev1Director struct {
	// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
	Backends []string `pulumi:"backends"`
	// Load balancing weight for the backends. Default `100`
	Capacity *int `pulumi:"capacity"`
	// An optional comment about the Director
	Comment *string `pulumi:"comment"`
	// Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
	Quorum *int `pulumi:"quorum"`
	// How many backends to search if it fails. Default `5`
	Retries *int `pulumi:"retries"`
	// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
	Shield *string `pulumi:"shield"`
	// Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
	Type *int `pulumi:"type"`
}

// Servicev1DirectorInput is an input type that accepts Servicev1DirectorArgs and Servicev1DirectorOutput values.
// You can construct a concrete instance of `Servicev1DirectorInput` via:
//
//          Servicev1DirectorArgs{...}
type Servicev1DirectorInput interface {
	pulumi.Input

	ToServicev1DirectorOutput() Servicev1DirectorOutput
	ToServicev1DirectorOutputWithContext(context.Context) Servicev1DirectorOutput
}

type Servicev1DirectorArgs struct {
	// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
	Backends pulumi.StringArrayInput `pulumi:"backends"`
	// Load balancing weight for the backends. Default `100`
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	// An optional comment about the Director
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
	Quorum pulumi.IntPtrInput `pulumi:"quorum"`
	// How many backends to search if it fails. Default `5`
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
	Shield pulumi.StringPtrInput `pulumi:"shield"`
	// Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
	Type pulumi.IntPtrInput `pulumi:"type"`
}

func (Servicev1DirectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Director)(nil)).Elem()
}

func (i Servicev1DirectorArgs) ToServicev1DirectorOutput() Servicev1DirectorOutput {
	return i.ToServicev1DirectorOutputWithContext(context.Background())
}

func (i Servicev1DirectorArgs) ToServicev1DirectorOutputWithContext(ctx context.Context) Servicev1DirectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DirectorOutput)
}

// Servicev1DirectorArrayInput is an input type that accepts Servicev1DirectorArray and Servicev1DirectorArrayOutput values.
// You can construct a concrete instance of `Servicev1DirectorArrayInput` via:
//
//          Servicev1DirectorArray{ Servicev1DirectorArgs{...} }
type Servicev1DirectorArrayInput interface {
	pulumi.Input

	ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput
	ToServicev1DirectorArrayOutputWithContext(context.Context) Servicev1DirectorArrayOutput
}

type Servicev1DirectorArray []Servicev1DirectorInput

func (Servicev1DirectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Director)(nil)).Elem()
}

func (i Servicev1DirectorArray) ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput {
	return i.ToServicev1DirectorArrayOutputWithContext(context.Background())
}

func (i Servicev1DirectorArray) ToServicev1DirectorArrayOutputWithContext(ctx context.Context) Servicev1DirectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DirectorArrayOutput)
}

type Servicev1DirectorOutput struct{ *pulumi.OutputState }

func (Servicev1DirectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Director)(nil)).Elem()
}

func (o Servicev1DirectorOutput) ToServicev1DirectorOutput() Servicev1DirectorOutput {
	return o
}

func (o Servicev1DirectorOutput) ToServicev1DirectorOutputWithContext(ctx context.Context) Servicev1DirectorOutput {
	return o
}

// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
func (o Servicev1DirectorOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Servicev1Director) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// Load balancing weight for the backends. Default `100`
func (o Servicev1DirectorOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

// An optional comment about the Director
func (o Servicev1DirectorOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1DirectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Director) string { return v.Name }).(pulumi.StringOutput)
}

// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
func (o Servicev1DirectorOutput) Quorum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *int { return v.Quorum }).(pulumi.IntPtrOutput)
}

// How many backends to search if it fails. Default `5`
func (o Servicev1DirectorOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
func (o Servicev1DirectorOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

// Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
func (o Servicev1DirectorOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Director) *int { return v.Type }).(pulumi.IntPtrOutput)
}

type Servicev1DirectorArrayOutput struct{ *pulumi.OutputState }

func (Servicev1DirectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Director)(nil)).Elem()
}

func (o Servicev1DirectorArrayOutput) ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput {
	return o
}

func (o Servicev1DirectorArrayOutput) ToServicev1DirectorArrayOutputWithContext(ctx context.Context) Servicev1DirectorArrayOutput {
	return o
}

func (o Servicev1DirectorArrayOutput) Index(i pulumi.IntInput) Servicev1DirectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Director {
		return vs[0].([]Servicev1Director)[vs[1].(int)]
	}).(Servicev1DirectorOutput)
}

type Servicev1Domain struct {
	// An optional comment about the Domain.
	Comment *string `pulumi:"comment"`
	// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
	Name string `pulumi:"name"`
}

// Servicev1DomainInput is an input type that accepts Servicev1DomainArgs and Servicev1DomainOutput values.
// You can construct a concrete instance of `Servicev1DomainInput` via:
//
//          Servicev1DomainArgs{...}
type Servicev1DomainInput interface {
	pulumi.Input

	ToServicev1DomainOutput() Servicev1DomainOutput
	ToServicev1DomainOutputWithContext(context.Context) Servicev1DomainOutput
}

type Servicev1DomainArgs struct {
	// An optional comment about the Domain.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Domain)(nil)).Elem()
}

func (i Servicev1DomainArgs) ToServicev1DomainOutput() Servicev1DomainOutput {
	return i.ToServicev1DomainOutputWithContext(context.Background())
}

func (i Servicev1DomainArgs) ToServicev1DomainOutputWithContext(ctx context.Context) Servicev1DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DomainOutput)
}

// Servicev1DomainArrayInput is an input type that accepts Servicev1DomainArray and Servicev1DomainArrayOutput values.
// You can construct a concrete instance of `Servicev1DomainArrayInput` via:
//
//          Servicev1DomainArray{ Servicev1DomainArgs{...} }
type Servicev1DomainArrayInput interface {
	pulumi.Input

	ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput
	ToServicev1DomainArrayOutputWithContext(context.Context) Servicev1DomainArrayOutput
}

type Servicev1DomainArray []Servicev1DomainInput

func (Servicev1DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Domain)(nil)).Elem()
}

func (i Servicev1DomainArray) ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput {
	return i.ToServicev1DomainArrayOutputWithContext(context.Background())
}

func (i Servicev1DomainArray) ToServicev1DomainArrayOutputWithContext(ctx context.Context) Servicev1DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DomainArrayOutput)
}

type Servicev1DomainOutput struct{ *pulumi.OutputState }

func (Servicev1DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Domain)(nil)).Elem()
}

func (o Servicev1DomainOutput) ToServicev1DomainOutput() Servicev1DomainOutput {
	return o
}

func (o Servicev1DomainOutput) ToServicev1DomainOutputWithContext(ctx context.Context) Servicev1DomainOutput {
	return o
}

// An optional comment about the Domain.
func (o Servicev1DomainOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Domain) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
func (o Servicev1DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Domain) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1DomainArrayOutput struct{ *pulumi.OutputState }

func (Servicev1DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Domain)(nil)).Elem()
}

func (o Servicev1DomainArrayOutput) ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput {
	return o
}

func (o Servicev1DomainArrayOutput) ToServicev1DomainArrayOutputWithContext(ctx context.Context) Servicev1DomainArrayOutput {
	return o
}

func (o Servicev1DomainArrayOutput) Index(i pulumi.IntInput) Servicev1DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Domain {
		return vs[0].([]Servicev1Domain)[vs[1].(int)]
	}).(Servicev1DomainOutput)
}

type Servicev1Dynamicsnippet struct {
	// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
	Priority *int `pulumi:"priority"`
	// The ID of the dynamic snippet
	SnippetId *string `pulumi:"snippetId"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
	Type string `pulumi:"type"`
}

// Servicev1DynamicsnippetInput is an input type that accepts Servicev1DynamicsnippetArgs and Servicev1DynamicsnippetOutput values.
// You can construct a concrete instance of `Servicev1DynamicsnippetInput` via:
//
//          Servicev1DynamicsnippetArgs{...}
type Servicev1DynamicsnippetInput interface {
	pulumi.Input

	ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput
	ToServicev1DynamicsnippetOutputWithContext(context.Context) Servicev1DynamicsnippetOutput
}

type Servicev1DynamicsnippetArgs struct {
	// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The ID of the dynamic snippet
	SnippetId pulumi.StringPtrInput `pulumi:"snippetId"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1DynamicsnippetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dynamicsnippet)(nil)).Elem()
}

func (i Servicev1DynamicsnippetArgs) ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput {
	return i.ToServicev1DynamicsnippetOutputWithContext(context.Background())
}

func (i Servicev1DynamicsnippetArgs) ToServicev1DynamicsnippetOutputWithContext(ctx context.Context) Servicev1DynamicsnippetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DynamicsnippetOutput)
}

// Servicev1DynamicsnippetArrayInput is an input type that accepts Servicev1DynamicsnippetArray and Servicev1DynamicsnippetArrayOutput values.
// You can construct a concrete instance of `Servicev1DynamicsnippetArrayInput` via:
//
//          Servicev1DynamicsnippetArray{ Servicev1DynamicsnippetArgs{...} }
type Servicev1DynamicsnippetArrayInput interface {
	pulumi.Input

	ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput
	ToServicev1DynamicsnippetArrayOutputWithContext(context.Context) Servicev1DynamicsnippetArrayOutput
}

type Servicev1DynamicsnippetArray []Servicev1DynamicsnippetInput

func (Servicev1DynamicsnippetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dynamicsnippet)(nil)).Elem()
}

func (i Servicev1DynamicsnippetArray) ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput {
	return i.ToServicev1DynamicsnippetArrayOutputWithContext(context.Background())
}

func (i Servicev1DynamicsnippetArray) ToServicev1DynamicsnippetArrayOutputWithContext(ctx context.Context) Servicev1DynamicsnippetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DynamicsnippetArrayOutput)
}

type Servicev1DynamicsnippetOutput struct{ *pulumi.OutputState }

func (Servicev1DynamicsnippetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dynamicsnippet)(nil)).Elem()
}

func (o Servicev1DynamicsnippetOutput) ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput {
	return o
}

func (o Servicev1DynamicsnippetOutput) ToServicev1DynamicsnippetOutputWithContext(ctx context.Context) Servicev1DynamicsnippetOutput {
	return o
}

// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1DynamicsnippetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Dynamicsnippet) string { return v.Name }).(pulumi.StringOutput)
}

// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
func (o Servicev1DynamicsnippetOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Dynamicsnippet) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The ID of the dynamic snippet
func (o Servicev1DynamicsnippetOutput) SnippetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Dynamicsnippet) *string { return v.SnippetId }).(pulumi.StringPtrOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
func (o Servicev1DynamicsnippetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Dynamicsnippet) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1DynamicsnippetArrayOutput struct{ *pulumi.OutputState }

func (Servicev1DynamicsnippetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dynamicsnippet)(nil)).Elem()
}

func (o Servicev1DynamicsnippetArrayOutput) ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput {
	return o
}

func (o Servicev1DynamicsnippetArrayOutput) ToServicev1DynamicsnippetArrayOutputWithContext(ctx context.Context) Servicev1DynamicsnippetArrayOutput {
	return o
}

func (o Servicev1DynamicsnippetArrayOutput) Index(i pulumi.IntInput) Servicev1DynamicsnippetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Dynamicsnippet {
		return vs[0].([]Servicev1Dynamicsnippet)[vs[1].(int)]
	}).(Servicev1DynamicsnippetOutput)
}

type Servicev1Gcslogging struct {
	// The name of the bucket in which to store the logs
	BucketName string `pulumi:"bucketName"`
	// The email address associated with the target GCS bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_EMAIL`
	Email *string `pulumi:"email"`
	// Apache-style string or VCL variables to use for log formatting
	Format *string `pulumi:"format"`
	// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default 3600)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// Name of a condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
	SecretKey *string `pulumi:"secretKey"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// Servicev1GcsloggingInput is an input type that accepts Servicev1GcsloggingArgs and Servicev1GcsloggingOutput values.
// You can construct a concrete instance of `Servicev1GcsloggingInput` via:
//
//          Servicev1GcsloggingArgs{...}
type Servicev1GcsloggingInput interface {
	pulumi.Input

	ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput
	ToServicev1GcsloggingOutputWithContext(context.Context) Servicev1GcsloggingOutput
}

type Servicev1GcsloggingArgs struct {
	// The name of the bucket in which to store the logs
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The email address associated with the target GCS bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_EMAIL`
	Email pulumi.StringPtrInput `pulumi:"email"`
	// Apache-style string or VCL variables to use for log formatting
	Format pulumi.StringPtrInput `pulumi:"format"`
	// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default 3600)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// Name of a condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1GcsloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gcslogging)(nil)).Elem()
}

func (i Servicev1GcsloggingArgs) ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput {
	return i.ToServicev1GcsloggingOutputWithContext(context.Background())
}

func (i Servicev1GcsloggingArgs) ToServicev1GcsloggingOutputWithContext(ctx context.Context) Servicev1GcsloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GcsloggingOutput)
}

// Servicev1GcsloggingArrayInput is an input type that accepts Servicev1GcsloggingArray and Servicev1GcsloggingArrayOutput values.
// You can construct a concrete instance of `Servicev1GcsloggingArrayInput` via:
//
//          Servicev1GcsloggingArray{ Servicev1GcsloggingArgs{...} }
type Servicev1GcsloggingArrayInput interface {
	pulumi.Input

	ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput
	ToServicev1GcsloggingArrayOutputWithContext(context.Context) Servicev1GcsloggingArrayOutput
}

type Servicev1GcsloggingArray []Servicev1GcsloggingInput

func (Servicev1GcsloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gcslogging)(nil)).Elem()
}

func (i Servicev1GcsloggingArray) ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput {
	return i.ToServicev1GcsloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1GcsloggingArray) ToServicev1GcsloggingArrayOutputWithContext(ctx context.Context) Servicev1GcsloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GcsloggingArrayOutput)
}

type Servicev1GcsloggingOutput struct{ *pulumi.OutputState }

func (Servicev1GcsloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gcslogging)(nil)).Elem()
}

func (o Servicev1GcsloggingOutput) ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput {
	return o
}

func (o Servicev1GcsloggingOutput) ToServicev1GcsloggingOutputWithContext(ctx context.Context) Servicev1GcsloggingOutput {
	return o
}

// The name of the bucket in which to store the logs
func (o Servicev1GcsloggingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) string { return v.BucketName }).(pulumi.StringOutput)
}

// The email address associated with the target GCS bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_EMAIL`
func (o Servicev1GcsloggingOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting
func (o Servicev1GcsloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
func (o Servicev1GcsloggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
func (o Servicev1GcsloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1GcsloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o Servicev1GcsloggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds (Default 3600)
func (o Servicev1GcsloggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1GcsloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// Name of a condition to apply this logging.
func (o Servicev1GcsloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
func (o Servicev1GcsloggingOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o Servicev1GcsloggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gcslogging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1GcsloggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1GcsloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gcslogging)(nil)).Elem()
}

func (o Servicev1GcsloggingArrayOutput) ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput {
	return o
}

func (o Servicev1GcsloggingArrayOutput) ToServicev1GcsloggingArrayOutputWithContext(ctx context.Context) Servicev1GcsloggingArrayOutput {
	return o
}

func (o Servicev1GcsloggingArrayOutput) Index(i pulumi.IntInput) Servicev1GcsloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Gcslogging {
		return vs[0].([]Servicev1Gcslogging)[vs[1].(int)]
	}).(Servicev1GcsloggingOutput)
}

type Servicev1Gzip struct {
	// Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	CacheCondition *string `pulumi:"cacheCondition"`
	// The content-type for each type of content you wish to have dynamically gzip'ed. Example: `["text/html", "text/css"]`
	ContentTypes []string `pulumi:"contentTypes"`
	// File extensions for each file type to dynamically gzip. Example: `["css", "js"]`
	Extensions []string `pulumi:"extensions"`
	// A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
}

// Servicev1GzipInput is an input type that accepts Servicev1GzipArgs and Servicev1GzipOutput values.
// You can construct a concrete instance of `Servicev1GzipInput` via:
//
//          Servicev1GzipArgs{...}
type Servicev1GzipInput interface {
	pulumi.Input

	ToServicev1GzipOutput() Servicev1GzipOutput
	ToServicev1GzipOutputWithContext(context.Context) Servicev1GzipOutput
}

type Servicev1GzipArgs struct {
	// Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The content-type for each type of content you wish to have dynamically gzip'ed. Example: `["text/html", "text/css"]`
	ContentTypes pulumi.StringArrayInput `pulumi:"contentTypes"`
	// File extensions for each file type to dynamically gzip. Example: `["css", "js"]`
	Extensions pulumi.StringArrayInput `pulumi:"extensions"`
	// A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1GzipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gzip)(nil)).Elem()
}

func (i Servicev1GzipArgs) ToServicev1GzipOutput() Servicev1GzipOutput {
	return i.ToServicev1GzipOutputWithContext(context.Background())
}

func (i Servicev1GzipArgs) ToServicev1GzipOutputWithContext(ctx context.Context) Servicev1GzipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GzipOutput)
}

// Servicev1GzipArrayInput is an input type that accepts Servicev1GzipArray and Servicev1GzipArrayOutput values.
// You can construct a concrete instance of `Servicev1GzipArrayInput` via:
//
//          Servicev1GzipArray{ Servicev1GzipArgs{...} }
type Servicev1GzipArrayInput interface {
	pulumi.Input

	ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput
	ToServicev1GzipArrayOutputWithContext(context.Context) Servicev1GzipArrayOutput
}

type Servicev1GzipArray []Servicev1GzipInput

func (Servicev1GzipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gzip)(nil)).Elem()
}

func (i Servicev1GzipArray) ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput {
	return i.ToServicev1GzipArrayOutputWithContext(context.Background())
}

func (i Servicev1GzipArray) ToServicev1GzipArrayOutputWithContext(ctx context.Context) Servicev1GzipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GzipArrayOutput)
}

type Servicev1GzipOutput struct{ *pulumi.OutputState }

func (Servicev1GzipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gzip)(nil)).Elem()
}

func (o Servicev1GzipOutput) ToServicev1GzipOutput() Servicev1GzipOutput {
	return o
}

func (o Servicev1GzipOutput) ToServicev1GzipOutputWithContext(ctx context.Context) Servicev1GzipOutput {
	return o
}

// Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o Servicev1GzipOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Gzip) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The content-type for each type of content you wish to have dynamically gzip'ed. Example: `["text/html", "text/css"]`
func (o Servicev1GzipOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Servicev1Gzip) []string { return v.ContentTypes }).(pulumi.StringArrayOutput)
}

// File extensions for each file type to dynamically gzip. Example: `["css", "js"]`
func (o Servicev1GzipOutput) Extensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v Servicev1Gzip) []string { return v.Extensions }).(pulumi.StringArrayOutput)
}

// A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1GzipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Gzip) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1GzipArrayOutput struct{ *pulumi.OutputState }

func (Servicev1GzipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gzip)(nil)).Elem()
}

func (o Servicev1GzipArrayOutput) ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput {
	return o
}

func (o Servicev1GzipArrayOutput) ToServicev1GzipArrayOutputWithContext(ctx context.Context) Servicev1GzipArrayOutput {
	return o
}

func (o Servicev1GzipArrayOutput) Index(i pulumi.IntInput) Servicev1GzipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Gzip {
		return vs[0].([]Servicev1Gzip)[vs[1].(int)]
	}).(Servicev1GzipOutput)
}

type Servicev1Header struct {
	// The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regexRepeat`
	Action string `pulumi:"action"`
	// Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
	CacheCondition *string `pulumi:"cacheCondition"`
	// The name of the header that is going to be affected by the Action
	Destination string `pulumi:"destination"`
	IgnoreIfSet *bool  `pulumi:"ignoreIfSet"`
	// Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Lower priorities execute first. Default: `100`
	Priority *int `pulumi:"priority"`
	// Regular expression to use (Only applies to `regex` and `regexRepeat` actions.)
	Regex *string `pulumi:"regex"`
	// Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
	RequestCondition *string `pulumi:"requestCondition"`
	// Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	ResponseCondition *string `pulumi:"responseCondition"`
	// Variable to be used as a source for the header content (Does not apply to `delete` action.)
	Source *string `pulumi:"source"`
	// Value to substitute in place of regular expression. (Only applies to `regex` and `regexRepeat`.)
	Substitution *string `pulumi:"substitution"`
	// The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
	Type string `pulumi:"type"`
}

// Servicev1HeaderInput is an input type that accepts Servicev1HeaderArgs and Servicev1HeaderOutput values.
// You can construct a concrete instance of `Servicev1HeaderInput` via:
//
//          Servicev1HeaderArgs{...}
type Servicev1HeaderInput interface {
	pulumi.Input

	ToServicev1HeaderOutput() Servicev1HeaderOutput
	ToServicev1HeaderOutputWithContext(context.Context) Servicev1HeaderOutput
}

type Servicev1HeaderArgs struct {
	// The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regexRepeat`
	Action pulumi.StringInput `pulumi:"action"`
	// Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The name of the header that is going to be affected by the Action
	Destination pulumi.StringInput  `pulumi:"destination"`
	IgnoreIfSet pulumi.BoolPtrInput `pulumi:"ignoreIfSet"`
	// Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Lower priorities execute first. Default: `100`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Regular expression to use (Only applies to `regex` and `regexRepeat` actions.)
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Variable to be used as a source for the header content (Does not apply to `delete` action.)
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Value to substitute in place of regular expression. (Only applies to `regex` and `regexRepeat`.)
	Substitution pulumi.StringPtrInput `pulumi:"substitution"`
	// The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1HeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Header)(nil)).Elem()
}

func (i Servicev1HeaderArgs) ToServicev1HeaderOutput() Servicev1HeaderOutput {
	return i.ToServicev1HeaderOutputWithContext(context.Background())
}

func (i Servicev1HeaderArgs) ToServicev1HeaderOutputWithContext(ctx context.Context) Servicev1HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HeaderOutput)
}

// Servicev1HeaderArrayInput is an input type that accepts Servicev1HeaderArray and Servicev1HeaderArrayOutput values.
// You can construct a concrete instance of `Servicev1HeaderArrayInput` via:
//
//          Servicev1HeaderArray{ Servicev1HeaderArgs{...} }
type Servicev1HeaderArrayInput interface {
	pulumi.Input

	ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput
	ToServicev1HeaderArrayOutputWithContext(context.Context) Servicev1HeaderArrayOutput
}

type Servicev1HeaderArray []Servicev1HeaderInput

func (Servicev1HeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Header)(nil)).Elem()
}

func (i Servicev1HeaderArray) ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput {
	return i.ToServicev1HeaderArrayOutputWithContext(context.Background())
}

func (i Servicev1HeaderArray) ToServicev1HeaderArrayOutputWithContext(ctx context.Context) Servicev1HeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HeaderArrayOutput)
}

type Servicev1HeaderOutput struct{ *pulumi.OutputState }

func (Servicev1HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Header)(nil)).Elem()
}

func (o Servicev1HeaderOutput) ToServicev1HeaderOutput() Servicev1HeaderOutput {
	return o
}

func (o Servicev1HeaderOutput) ToServicev1HeaderOutputWithContext(ctx context.Context) Servicev1HeaderOutput {
	return o
}

// The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regexRepeat`
func (o Servicev1HeaderOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Header) string { return v.Action }).(pulumi.StringOutput)
}

// Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
func (o Servicev1HeaderOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The name of the header that is going to be affected by the Action
func (o Servicev1HeaderOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Header) string { return v.Destination }).(pulumi.StringOutput)
}

func (o Servicev1HeaderOutput) IgnoreIfSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *bool { return v.IgnoreIfSet }).(pulumi.BoolPtrOutput)
}

// Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1HeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Header) string { return v.Name }).(pulumi.StringOutput)
}

// Lower priorities execute first. Default: `100`
func (o Servicev1HeaderOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Regular expression to use (Only applies to `regex` and `regexRepeat` actions.)
func (o Servicev1HeaderOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
func (o Servicev1HeaderOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o Servicev1HeaderOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Variable to be used as a source for the header content (Does not apply to `delete` action.)
func (o Servicev1HeaderOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Value to substitute in place of regular expression. (Only applies to `regex` and `regexRepeat`.)
func (o Servicev1HeaderOutput) Substitution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Header) *string { return v.Substitution }).(pulumi.StringPtrOutput)
}

// The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
func (o Servicev1HeaderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Header) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1HeaderArrayOutput struct{ *pulumi.OutputState }

func (Servicev1HeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Header)(nil)).Elem()
}

func (o Servicev1HeaderArrayOutput) ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput {
	return o
}

func (o Servicev1HeaderArrayOutput) ToServicev1HeaderArrayOutputWithContext(ctx context.Context) Servicev1HeaderArrayOutput {
	return o
}

func (o Servicev1HeaderArrayOutput) Index(i pulumi.IntInput) Servicev1HeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Header {
		return vs[0].([]Servicev1Header)[vs[1].(int)]
	}).(Servicev1HeaderOutput)
}

type Servicev1Healthcheck struct {
	// How often to run the Healthcheck in milliseconds. Default `5000`
	CheckInterval *int `pulumi:"checkInterval"`
	// The status code expected from the host. Default `200`
	ExpectedResponse *int `pulumi:"expectedResponse"`
	// The Host header to send for this Healthcheck
	Host string `pulumi:"host"`
	// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
	HttpVersion *string `pulumi:"httpVersion"`
	// When loading a config, the initial number of probes to be seen as OK. Default `2`
	Initial *int `pulumi:"initial"`
	// Which HTTP method to use. Default `HEAD`
	Method *string `pulumi:"method"`
	// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to check
	Path string `pulumi:"path"`
	// How many Healthchecks must succeed to be considered healthy. Default `3`
	Threshold *int `pulumi:"threshold"`
	// Timeout in milliseconds. Default `500`
	Timeout *int `pulumi:"timeout"`
	// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
	Window *int `pulumi:"window"`
}

// Servicev1HealthcheckInput is an input type that accepts Servicev1HealthcheckArgs and Servicev1HealthcheckOutput values.
// You can construct a concrete instance of `Servicev1HealthcheckInput` via:
//
//          Servicev1HealthcheckArgs{...}
type Servicev1HealthcheckInput interface {
	pulumi.Input

	ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput
	ToServicev1HealthcheckOutputWithContext(context.Context) Servicev1HealthcheckOutput
}

type Servicev1HealthcheckArgs struct {
	// How often to run the Healthcheck in milliseconds. Default `5000`
	CheckInterval pulumi.IntPtrInput `pulumi:"checkInterval"`
	// The status code expected from the host. Default `200`
	ExpectedResponse pulumi.IntPtrInput `pulumi:"expectedResponse"`
	// The Host header to send for this Healthcheck
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
	HttpVersion pulumi.StringPtrInput `pulumi:"httpVersion"`
	// When loading a config, the initial number of probes to be seen as OK. Default `2`
	Initial pulumi.IntPtrInput `pulumi:"initial"`
	// Which HTTP method to use. Default `HEAD`
	Method pulumi.StringPtrInput `pulumi:"method"`
	// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to check
	Path pulumi.StringInput `pulumi:"path"`
	// How many Healthchecks must succeed to be considered healthy. Default `3`
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
	// Timeout in milliseconds. Default `500`
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
	Window pulumi.IntPtrInput `pulumi:"window"`
}

func (Servicev1HealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Healthcheck)(nil)).Elem()
}

func (i Servicev1HealthcheckArgs) ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput {
	return i.ToServicev1HealthcheckOutputWithContext(context.Background())
}

func (i Servicev1HealthcheckArgs) ToServicev1HealthcheckOutputWithContext(ctx context.Context) Servicev1HealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HealthcheckOutput)
}

// Servicev1HealthcheckArrayInput is an input type that accepts Servicev1HealthcheckArray and Servicev1HealthcheckArrayOutput values.
// You can construct a concrete instance of `Servicev1HealthcheckArrayInput` via:
//
//          Servicev1HealthcheckArray{ Servicev1HealthcheckArgs{...} }
type Servicev1HealthcheckArrayInput interface {
	pulumi.Input

	ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput
	ToServicev1HealthcheckArrayOutputWithContext(context.Context) Servicev1HealthcheckArrayOutput
}

type Servicev1HealthcheckArray []Servicev1HealthcheckInput

func (Servicev1HealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Healthcheck)(nil)).Elem()
}

func (i Servicev1HealthcheckArray) ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput {
	return i.ToServicev1HealthcheckArrayOutputWithContext(context.Background())
}

func (i Servicev1HealthcheckArray) ToServicev1HealthcheckArrayOutputWithContext(ctx context.Context) Servicev1HealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HealthcheckArrayOutput)
}

type Servicev1HealthcheckOutput struct{ *pulumi.OutputState }

func (Servicev1HealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Healthcheck)(nil)).Elem()
}

func (o Servicev1HealthcheckOutput) ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput {
	return o
}

func (o Servicev1HealthcheckOutput) ToServicev1HealthcheckOutputWithContext(ctx context.Context) Servicev1HealthcheckOutput {
	return o
}

// How often to run the Healthcheck in milliseconds. Default `5000`
func (o Servicev1HealthcheckOutput) CheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.CheckInterval }).(pulumi.IntPtrOutput)
}

// The status code expected from the host. Default `200`
func (o Servicev1HealthcheckOutput) ExpectedResponse() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.ExpectedResponse }).(pulumi.IntPtrOutput)
}

// The Host header to send for this Healthcheck
func (o Servicev1HealthcheckOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
func (o Servicev1HealthcheckOutput) HttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *string { return v.HttpVersion }).(pulumi.StringPtrOutput)
}

// When loading a config, the initial number of probes to be seen as OK. Default `2`
func (o Servicev1HealthcheckOutput) Initial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.Initial }).(pulumi.IntPtrOutput)
}

// Which HTTP method to use. Default `HEAD`
func (o Servicev1HealthcheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1HealthcheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) string { return v.Name }).(pulumi.StringOutput)
}

// The path to check
func (o Servicev1HealthcheckOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) string { return v.Path }).(pulumi.StringOutput)
}

// How many Healthchecks must succeed to be considered healthy. Default `3`
func (o Servicev1HealthcheckOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds. Default `500`
func (o Servicev1HealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
func (o Servicev1HealthcheckOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Healthcheck) *int { return v.Window }).(pulumi.IntPtrOutput)
}

type Servicev1HealthcheckArrayOutput struct{ *pulumi.OutputState }

func (Servicev1HealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Healthcheck)(nil)).Elem()
}

func (o Servicev1HealthcheckArrayOutput) ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput {
	return o
}

func (o Servicev1HealthcheckArrayOutput) ToServicev1HealthcheckArrayOutputWithContext(ctx context.Context) Servicev1HealthcheckArrayOutput {
	return o
}

func (o Servicev1HealthcheckArrayOutput) Index(i pulumi.IntInput) Servicev1HealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Healthcheck {
		return vs[0].([]Servicev1Healthcheck)[vs[1].(int)]
	}).(Servicev1HealthcheckOutput)
}

type Servicev1Httpslogging struct {
	// Value of the `Content-Type` header sent with the request
	ContentType *string `pulumi:"contentType"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// Custom header sent with the request
	HeaderName *string `pulumi:"headerName"`
	// Value of the custom header sent with the request
	HeaderValue *string `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
	JsonFormat *string `pulumi:"jsonFormat"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `blank`
	MessageType *string `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
	Method *string `pulumi:"method"`
	// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed
	Placement         *string `pulumi:"placement"`
	RequestMaxBytes   *int    `pulumi:"requestMaxBytes"`
	RequestMaxEntries *int    `pulumi:"requestMaxEntries"`
	// The name of the condition to apply
	ResponseCondition *string `pulumi:"responseCondition"`
	TlsCaCert         *string `pulumi:"tlsCaCert"`
	TlsClientCert     *string `pulumi:"tlsClientCert"`
	TlsClientKey      *string `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname *string `pulumi:"tlsHostname"`
	// URL that log data will be sent to. Must use the https protocol
	Url string `pulumi:"url"`
}

// Servicev1HttpsloggingInput is an input type that accepts Servicev1HttpsloggingArgs and Servicev1HttpsloggingOutput values.
// You can construct a concrete instance of `Servicev1HttpsloggingInput` via:
//
//          Servicev1HttpsloggingArgs{...}
type Servicev1HttpsloggingInput interface {
	pulumi.Input

	ToServicev1HttpsloggingOutput() Servicev1HttpsloggingOutput
	ToServicev1HttpsloggingOutputWithContext(context.Context) Servicev1HttpsloggingOutput
}

type Servicev1HttpsloggingArgs struct {
	// Value of the `Content-Type` header sent with the request
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Custom header sent with the request
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// Value of the custom header sent with the request
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
	JsonFormat pulumi.StringPtrInput `pulumi:"jsonFormat"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `blank`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed
	Placement         pulumi.StringPtrInput `pulumi:"placement"`
	RequestMaxBytes   pulumi.IntPtrInput    `pulumi:"requestMaxBytes"`
	RequestMaxEntries pulumi.IntPtrInput    `pulumi:"requestMaxEntries"`
	// The name of the condition to apply
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	TlsCaCert         pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert     pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey      pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// URL that log data will be sent to. Must use the https protocol
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1HttpsloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Httpslogging)(nil)).Elem()
}

func (i Servicev1HttpsloggingArgs) ToServicev1HttpsloggingOutput() Servicev1HttpsloggingOutput {
	return i.ToServicev1HttpsloggingOutputWithContext(context.Background())
}

func (i Servicev1HttpsloggingArgs) ToServicev1HttpsloggingOutputWithContext(ctx context.Context) Servicev1HttpsloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HttpsloggingOutput)
}

// Servicev1HttpsloggingArrayInput is an input type that accepts Servicev1HttpsloggingArray and Servicev1HttpsloggingArrayOutput values.
// You can construct a concrete instance of `Servicev1HttpsloggingArrayInput` via:
//
//          Servicev1HttpsloggingArray{ Servicev1HttpsloggingArgs{...} }
type Servicev1HttpsloggingArrayInput interface {
	pulumi.Input

	ToServicev1HttpsloggingArrayOutput() Servicev1HttpsloggingArrayOutput
	ToServicev1HttpsloggingArrayOutputWithContext(context.Context) Servicev1HttpsloggingArrayOutput
}

type Servicev1HttpsloggingArray []Servicev1HttpsloggingInput

func (Servicev1HttpsloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Httpslogging)(nil)).Elem()
}

func (i Servicev1HttpsloggingArray) ToServicev1HttpsloggingArrayOutput() Servicev1HttpsloggingArrayOutput {
	return i.ToServicev1HttpsloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1HttpsloggingArray) ToServicev1HttpsloggingArrayOutputWithContext(ctx context.Context) Servicev1HttpsloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HttpsloggingArrayOutput)
}

type Servicev1HttpsloggingOutput struct{ *pulumi.OutputState }

func (Servicev1HttpsloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Httpslogging)(nil)).Elem()
}

func (o Servicev1HttpsloggingOutput) ToServicev1HttpsloggingOutput() Servicev1HttpsloggingOutput {
	return o
}

func (o Servicev1HttpsloggingOutput) ToServicev1HttpsloggingOutputWithContext(ctx context.Context) Servicev1HttpsloggingOutput {
	return o
}

// Value of the `Content-Type` header sent with the request
func (o Servicev1HttpsloggingOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1HttpsloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
func (o Servicev1HttpsloggingOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Custom header sent with the request
func (o Servicev1HttpsloggingOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// Value of the custom header sent with the request
func (o Servicev1HttpsloggingOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
func (o Servicev1HttpsloggingOutput) JsonFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.JsonFormat }).(pulumi.StringPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `blank`
func (o Servicev1HttpsloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
func (o Servicev1HttpsloggingOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1HttpsloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed
func (o Servicev1HttpsloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1HttpsloggingOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

func (o Servicev1HttpsloggingOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

// The name of the condition to apply
func (o Servicev1HttpsloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1HttpsloggingOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1HttpsloggingOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1HttpsloggingOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// Used during the TLS handshake to validate the certificate
func (o Servicev1HttpsloggingOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// URL that log data will be sent to. Must use the https protocol
func (o Servicev1HttpsloggingOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Httpslogging) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1HttpsloggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1HttpsloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Httpslogging)(nil)).Elem()
}

func (o Servicev1HttpsloggingArrayOutput) ToServicev1HttpsloggingArrayOutput() Servicev1HttpsloggingArrayOutput {
	return o
}

func (o Servicev1HttpsloggingArrayOutput) ToServicev1HttpsloggingArrayOutputWithContext(ctx context.Context) Servicev1HttpsloggingArrayOutput {
	return o
}

func (o Servicev1HttpsloggingArrayOutput) Index(i pulumi.IntInput) Servicev1HttpsloggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Httpslogging {
		return vs[0].([]Servicev1Httpslogging)[vs[1].(int)]
	}).(Servicev1HttpsloggingOutput)
}

type Servicev1Logentry struct {
	// Apache-style string or VCL variables to use for log formatting
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1)
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The port number configured in Logentries
	Port *int `pulumi:"port"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Use token based authentication (https://logentries.com/doc/input-token/)
	Token string `pulumi:"token"`
	// Whether to use TLS for secure logging
	UseTls *bool `pulumi:"useTls"`
}

// Servicev1LogentryInput is an input type that accepts Servicev1LogentryArgs and Servicev1LogentryOutput values.
// You can construct a concrete instance of `Servicev1LogentryInput` via:
//
//          Servicev1LogentryArgs{...}
type Servicev1LogentryInput interface {
	pulumi.Input

	ToServicev1LogentryOutput() Servicev1LogentryOutput
	ToServicev1LogentryOutputWithContext(context.Context) Servicev1LogentryOutput
}

type Servicev1LogentryArgs struct {
	// Apache-style string or VCL variables to use for log formatting
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port number configured in Logentries
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Use token based authentication (https://logentries.com/doc/input-token/)
	Token pulumi.StringInput `pulumi:"token"`
	// Whether to use TLS for secure logging
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (Servicev1LogentryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Logentry)(nil)).Elem()
}

func (i Servicev1LogentryArgs) ToServicev1LogentryOutput() Servicev1LogentryOutput {
	return i.ToServicev1LogentryOutputWithContext(context.Background())
}

func (i Servicev1LogentryArgs) ToServicev1LogentryOutputWithContext(ctx context.Context) Servicev1LogentryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LogentryOutput)
}

// Servicev1LogentryArrayInput is an input type that accepts Servicev1LogentryArray and Servicev1LogentryArrayOutput values.
// You can construct a concrete instance of `Servicev1LogentryArrayInput` via:
//
//          Servicev1LogentryArray{ Servicev1LogentryArgs{...} }
type Servicev1LogentryArrayInput interface {
	pulumi.Input

	ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput
	ToServicev1LogentryArrayOutputWithContext(context.Context) Servicev1LogentryArrayOutput
}

type Servicev1LogentryArray []Servicev1LogentryInput

func (Servicev1LogentryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Logentry)(nil)).Elem()
}

func (i Servicev1LogentryArray) ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput {
	return i.ToServicev1LogentryArrayOutputWithContext(context.Background())
}

func (i Servicev1LogentryArray) ToServicev1LogentryArrayOutputWithContext(ctx context.Context) Servicev1LogentryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LogentryArrayOutput)
}

type Servicev1LogentryOutput struct{ *pulumi.OutputState }

func (Servicev1LogentryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Logentry)(nil)).Elem()
}

func (o Servicev1LogentryOutput) ToServicev1LogentryOutput() Servicev1LogentryOutput {
	return o
}

func (o Servicev1LogentryOutput) ToServicev1LogentryOutputWithContext(ctx context.Context) Servicev1LogentryOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting
func (o Servicev1LogentryOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1)
func (o Servicev1LogentryOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LogentryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Logentry) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LogentryOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port number configured in Logentries
func (o Servicev1LogentryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of blockAttributes condition to apply this logging.
func (o Servicev1LogentryOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Use token based authentication (https://logentries.com/doc/input-token/)
func (o Servicev1LogentryOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Logentry) string { return v.Token }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging
func (o Servicev1LogentryOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Logentry) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type Servicev1LogentryArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LogentryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Logentry)(nil)).Elem()
}

func (o Servicev1LogentryArrayOutput) ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput {
	return o
}

func (o Servicev1LogentryArrayOutput) ToServicev1LogentryArrayOutputWithContext(ctx context.Context) Servicev1LogentryArrayOutput {
	return o
}

func (o Servicev1LogentryArrayOutput) Index(i pulumi.IntInput) Servicev1LogentryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Logentry {
		return vs[0].([]Servicev1Logentry)[vs[1].(int)]
	}).(Servicev1LogentryOutput)
}

type Servicev1LoggingCloudfile struct {
	// Your Cloud File account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of your Cloud Files container
	BucketName string `pulumi:"bucketName"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default `0`, no compression)
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
	Region *string `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for your Cloud Files account
	User string `pulumi:"user"`
}

// Servicev1LoggingCloudfileInput is an input type that accepts Servicev1LoggingCloudfileArgs and Servicev1LoggingCloudfileOutput values.
// You can construct a concrete instance of `Servicev1LoggingCloudfileInput` via:
//
//          Servicev1LoggingCloudfileArgs{...}
type Servicev1LoggingCloudfileInput interface {
	pulumi.Input

	ToServicev1LoggingCloudfileOutput() Servicev1LoggingCloudfileOutput
	ToServicev1LoggingCloudfileOutputWithContext(context.Context) Servicev1LoggingCloudfileOutput
}

type Servicev1LoggingCloudfileArgs struct {
	// Your Cloud File account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of your Cloud Files container
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// What level of GZIP encoding to have when dumping logs (default `0`, no compression)
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for your Cloud Files account
	User pulumi.StringInput `pulumi:"user"`
}

func (Servicev1LoggingCloudfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingCloudfile)(nil)).Elem()
}

func (i Servicev1LoggingCloudfileArgs) ToServicev1LoggingCloudfileOutput() Servicev1LoggingCloudfileOutput {
	return i.ToServicev1LoggingCloudfileOutputWithContext(context.Background())
}

func (i Servicev1LoggingCloudfileArgs) ToServicev1LoggingCloudfileOutputWithContext(ctx context.Context) Servicev1LoggingCloudfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingCloudfileOutput)
}

// Servicev1LoggingCloudfileArrayInput is an input type that accepts Servicev1LoggingCloudfileArray and Servicev1LoggingCloudfileArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingCloudfileArrayInput` via:
//
//          Servicev1LoggingCloudfileArray{ Servicev1LoggingCloudfileArgs{...} }
type Servicev1LoggingCloudfileArrayInput interface {
	pulumi.Input

	ToServicev1LoggingCloudfileArrayOutput() Servicev1LoggingCloudfileArrayOutput
	ToServicev1LoggingCloudfileArrayOutputWithContext(context.Context) Servicev1LoggingCloudfileArrayOutput
}

type Servicev1LoggingCloudfileArray []Servicev1LoggingCloudfileInput

func (Servicev1LoggingCloudfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingCloudfile)(nil)).Elem()
}

func (i Servicev1LoggingCloudfileArray) ToServicev1LoggingCloudfileArrayOutput() Servicev1LoggingCloudfileArrayOutput {
	return i.ToServicev1LoggingCloudfileArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingCloudfileArray) ToServicev1LoggingCloudfileArrayOutputWithContext(ctx context.Context) Servicev1LoggingCloudfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingCloudfileArrayOutput)
}

type Servicev1LoggingCloudfileOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingCloudfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingCloudfile)(nil)).Elem()
}

func (o Servicev1LoggingCloudfileOutput) ToServicev1LoggingCloudfileOutput() Servicev1LoggingCloudfileOutput {
	return o
}

func (o Servicev1LoggingCloudfileOutput) ToServicev1LoggingCloudfileOutputWithContext(ctx context.Context) Servicev1LoggingCloudfileOutput {
	return o
}

// Your Cloud File account access key
func (o Servicev1LoggingCloudfileOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of your Cloud Files container
func (o Servicev1LoggingCloudfileOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) string { return v.BucketName }).(pulumi.StringOutput)
}

// Apache style log formatting.
func (o Servicev1LoggingCloudfileOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingCloudfileOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// What level of GZIP encoding to have when dumping logs (default `0`, no compression)
func (o Servicev1LoggingCloudfileOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
func (o Servicev1LoggingCloudfileOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingCloudfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to
func (o Servicev1LoggingCloudfileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o Servicev1LoggingCloudfileOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o Servicev1LoggingCloudfileOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o Servicev1LoggingCloudfileOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
func (o Servicev1LoggingCloudfileOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingCloudfileOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o Servicev1LoggingCloudfileOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for your Cloud Files account
func (o Servicev1LoggingCloudfileOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingCloudfile) string { return v.User }).(pulumi.StringOutput)
}

type Servicev1LoggingCloudfileArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingCloudfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingCloudfile)(nil)).Elem()
}

func (o Servicev1LoggingCloudfileArrayOutput) ToServicev1LoggingCloudfileArrayOutput() Servicev1LoggingCloudfileArrayOutput {
	return o
}

func (o Servicev1LoggingCloudfileArrayOutput) ToServicev1LoggingCloudfileArrayOutputWithContext(ctx context.Context) Servicev1LoggingCloudfileArrayOutput {
	return o
}

func (o Servicev1LoggingCloudfileArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingCloudfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingCloudfile {
		return vs[0].([]Servicev1LoggingCloudfile)[vs[1].(int)]
	}).(Servicev1LoggingCloudfileOutput)
}

type Servicev1LoggingDatadog struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region *string `pulumi:"region"`
	// The name of the condition to apply.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The API key from your Datadog account
	Token string `pulumi:"token"`
}

// Servicev1LoggingDatadogInput is an input type that accepts Servicev1LoggingDatadogArgs and Servicev1LoggingDatadogOutput values.
// You can construct a concrete instance of `Servicev1LoggingDatadogInput` via:
//
//          Servicev1LoggingDatadogArgs{...}
type Servicev1LoggingDatadogInput interface {
	pulumi.Input

	ToServicev1LoggingDatadogOutput() Servicev1LoggingDatadogOutput
	ToServicev1LoggingDatadogOutputWithContext(context.Context) Servicev1LoggingDatadogOutput
}

type Servicev1LoggingDatadogArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the condition to apply.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The API key from your Datadog account
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingDatadog)(nil)).Elem()
}

func (i Servicev1LoggingDatadogArgs) ToServicev1LoggingDatadogOutput() Servicev1LoggingDatadogOutput {
	return i.ToServicev1LoggingDatadogOutputWithContext(context.Background())
}

func (i Servicev1LoggingDatadogArgs) ToServicev1LoggingDatadogOutputWithContext(ctx context.Context) Servicev1LoggingDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingDatadogOutput)
}

// Servicev1LoggingDatadogArrayInput is an input type that accepts Servicev1LoggingDatadogArray and Servicev1LoggingDatadogArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingDatadogArrayInput` via:
//
//          Servicev1LoggingDatadogArray{ Servicev1LoggingDatadogArgs{...} }
type Servicev1LoggingDatadogArrayInput interface {
	pulumi.Input

	ToServicev1LoggingDatadogArrayOutput() Servicev1LoggingDatadogArrayOutput
	ToServicev1LoggingDatadogArrayOutputWithContext(context.Context) Servicev1LoggingDatadogArrayOutput
}

type Servicev1LoggingDatadogArray []Servicev1LoggingDatadogInput

func (Servicev1LoggingDatadogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingDatadog)(nil)).Elem()
}

func (i Servicev1LoggingDatadogArray) ToServicev1LoggingDatadogArrayOutput() Servicev1LoggingDatadogArrayOutput {
	return i.ToServicev1LoggingDatadogArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingDatadogArray) ToServicev1LoggingDatadogArrayOutputWithContext(ctx context.Context) Servicev1LoggingDatadogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingDatadogArrayOutput)
}

type Servicev1LoggingDatadogOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingDatadog)(nil)).Elem()
}

func (o Servicev1LoggingDatadogOutput) ToServicev1LoggingDatadogOutput() Servicev1LoggingDatadogOutput {
	return o
}

func (o Servicev1LoggingDatadogOutput) ToServicev1LoggingDatadogOutputWithContext(ctx context.Context) Servicev1LoggingDatadogOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingDatadogOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingDatadogOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingDatadogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LoggingDatadogOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
func (o Servicev1LoggingDatadogOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply.
func (o Servicev1LoggingDatadogOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The API key from your Datadog account
func (o Servicev1LoggingDatadogOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingDatadog) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingDatadogArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingDatadogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingDatadog)(nil)).Elem()
}

func (o Servicev1LoggingDatadogArrayOutput) ToServicev1LoggingDatadogArrayOutput() Servicev1LoggingDatadogArrayOutput {
	return o
}

func (o Servicev1LoggingDatadogArrayOutput) ToServicev1LoggingDatadogArrayOutputWithContext(ctx context.Context) Servicev1LoggingDatadogArrayOutput {
	return o
}

func (o Servicev1LoggingDatadogArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingDatadogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingDatadog {
		return vs[0].([]Servicev1LoggingDatadog)[vs[1].(int)]
	}).(Servicev1LoggingDatadogOutput)
}

type Servicev1LoggingDigitalocean struct {
	// Your DigitalOcean Spaces account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of the DigitalOcean Space
	BucketName string `pulumi:"bucketName"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domain *string `pulumi:"domain"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Your DigitalOcean Spaces account secret key
	SecretKey string `pulumi:"secretKey"`
	// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// Servicev1LoggingDigitaloceanInput is an input type that accepts Servicev1LoggingDigitaloceanArgs and Servicev1LoggingDigitaloceanOutput values.
// You can construct a concrete instance of `Servicev1LoggingDigitaloceanInput` via:
//
//          Servicev1LoggingDigitaloceanArgs{...}
type Servicev1LoggingDigitaloceanInput interface {
	pulumi.Input

	ToServicev1LoggingDigitaloceanOutput() Servicev1LoggingDigitaloceanOutput
	ToServicev1LoggingDigitaloceanOutputWithContext(context.Context) Servicev1LoggingDigitaloceanOutput
}

type Servicev1LoggingDigitaloceanArgs struct {
	// Your DigitalOcean Spaces account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of the DigitalOcean Space
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Your DigitalOcean Spaces account secret key
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1LoggingDigitaloceanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingDigitalocean)(nil)).Elem()
}

func (i Servicev1LoggingDigitaloceanArgs) ToServicev1LoggingDigitaloceanOutput() Servicev1LoggingDigitaloceanOutput {
	return i.ToServicev1LoggingDigitaloceanOutputWithContext(context.Background())
}

func (i Servicev1LoggingDigitaloceanArgs) ToServicev1LoggingDigitaloceanOutputWithContext(ctx context.Context) Servicev1LoggingDigitaloceanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingDigitaloceanOutput)
}

// Servicev1LoggingDigitaloceanArrayInput is an input type that accepts Servicev1LoggingDigitaloceanArray and Servicev1LoggingDigitaloceanArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingDigitaloceanArrayInput` via:
//
//          Servicev1LoggingDigitaloceanArray{ Servicev1LoggingDigitaloceanArgs{...} }
type Servicev1LoggingDigitaloceanArrayInput interface {
	pulumi.Input

	ToServicev1LoggingDigitaloceanArrayOutput() Servicev1LoggingDigitaloceanArrayOutput
	ToServicev1LoggingDigitaloceanArrayOutputWithContext(context.Context) Servicev1LoggingDigitaloceanArrayOutput
}

type Servicev1LoggingDigitaloceanArray []Servicev1LoggingDigitaloceanInput

func (Servicev1LoggingDigitaloceanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingDigitalocean)(nil)).Elem()
}

func (i Servicev1LoggingDigitaloceanArray) ToServicev1LoggingDigitaloceanArrayOutput() Servicev1LoggingDigitaloceanArrayOutput {
	return i.ToServicev1LoggingDigitaloceanArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingDigitaloceanArray) ToServicev1LoggingDigitaloceanArrayOutputWithContext(ctx context.Context) Servicev1LoggingDigitaloceanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingDigitaloceanArrayOutput)
}

type Servicev1LoggingDigitaloceanOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingDigitaloceanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingDigitalocean)(nil)).Elem()
}

func (o Servicev1LoggingDigitaloceanOutput) ToServicev1LoggingDigitaloceanOutput() Servicev1LoggingDigitaloceanOutput {
	return o
}

func (o Servicev1LoggingDigitaloceanOutput) ToServicev1LoggingDigitaloceanOutputWithContext(ctx context.Context) Servicev1LoggingDigitaloceanOutput {
	return o
}

// Your DigitalOcean Spaces account access key
func (o Servicev1LoggingDigitaloceanOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of the DigitalOcean Space
func (o Servicev1LoggingDigitaloceanOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) string { return v.BucketName }).(pulumi.StringOutput)
}

// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
func (o Servicev1LoggingDigitaloceanOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Apache style log formatting.
func (o Servicev1LoggingDigitaloceanOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingDigitaloceanOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
func (o Servicev1LoggingDigitaloceanOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
func (o Servicev1LoggingDigitaloceanOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingDigitaloceanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to
func (o Servicev1LoggingDigitaloceanOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o Servicev1LoggingDigitaloceanOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o Servicev1LoggingDigitaloceanOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o Servicev1LoggingDigitaloceanOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingDigitaloceanOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Your DigitalOcean Spaces account secret key
func (o Servicev1LoggingDigitaloceanOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) string { return v.SecretKey }).(pulumi.StringOutput)
}

// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o Servicev1LoggingDigitaloceanOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingDigitalocean) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1LoggingDigitaloceanArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingDigitaloceanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingDigitalocean)(nil)).Elem()
}

func (o Servicev1LoggingDigitaloceanArrayOutput) ToServicev1LoggingDigitaloceanArrayOutput() Servicev1LoggingDigitaloceanArrayOutput {
	return o
}

func (o Servicev1LoggingDigitaloceanArrayOutput) ToServicev1LoggingDigitaloceanArrayOutputWithContext(ctx context.Context) Servicev1LoggingDigitaloceanArrayOutput {
	return o
}

func (o Servicev1LoggingDigitaloceanArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingDigitaloceanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingDigitalocean {
		return vs[0].([]Servicev1LoggingDigitalocean)[vs[1].(int)]
	}).(Servicev1LoggingDigitaloceanOutput)
}

type Servicev1LoggingElasticsearch struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// The name of the Elasticsearch index to send documents (logs) to
	Index string `pulumi:"index"`
	// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// BasicAuth password for Elasticsearch
	Password *string `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
	Pipeline *string `pulumi:"pipeline"`
	// Where in the generated VCL the logging call should be placed.
	Placement         *string `pulumi:"placement"`
	RequestMaxBytes   *int    `pulumi:"requestMaxBytes"`
	RequestMaxEntries *int    `pulumi:"requestMaxEntries"`
	// The name of the condition to apply
	ResponseCondition *string `pulumi:"responseCondition"`
	TlsCaCert         *string `pulumi:"tlsCaCert"`
	TlsClientCert     *string `pulumi:"tlsClientCert"`
	TlsClientKey      *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to
	Url string `pulumi:"url"`
	// BasicAuth username for Elasticsearch
	User *string `pulumi:"user"`
}

// Servicev1LoggingElasticsearchInput is an input type that accepts Servicev1LoggingElasticsearchArgs and Servicev1LoggingElasticsearchOutput values.
// You can construct a concrete instance of `Servicev1LoggingElasticsearchInput` via:
//
//          Servicev1LoggingElasticsearchArgs{...}
type Servicev1LoggingElasticsearchInput interface {
	pulumi.Input

	ToServicev1LoggingElasticsearchOutput() Servicev1LoggingElasticsearchOutput
	ToServicev1LoggingElasticsearchOutputWithContext(context.Context) Servicev1LoggingElasticsearchOutput
}

type Servicev1LoggingElasticsearchArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The name of the Elasticsearch index to send documents (logs) to
	Index pulumi.StringInput `pulumi:"index"`
	// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// BasicAuth password for Elasticsearch
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
	Pipeline pulumi.StringPtrInput `pulumi:"pipeline"`
	// Where in the generated VCL the logging call should be placed.
	Placement         pulumi.StringPtrInput `pulumi:"placement"`
	RequestMaxBytes   pulumi.IntPtrInput    `pulumi:"requestMaxBytes"`
	RequestMaxEntries pulumi.IntPtrInput    `pulumi:"requestMaxEntries"`
	// The name of the condition to apply
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	TlsCaCert         pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert     pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey      pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
	// BasicAuth username for Elasticsearch
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (Servicev1LoggingElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingElasticsearch)(nil)).Elem()
}

func (i Servicev1LoggingElasticsearchArgs) ToServicev1LoggingElasticsearchOutput() Servicev1LoggingElasticsearchOutput {
	return i.ToServicev1LoggingElasticsearchOutputWithContext(context.Background())
}

func (i Servicev1LoggingElasticsearchArgs) ToServicev1LoggingElasticsearchOutputWithContext(ctx context.Context) Servicev1LoggingElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingElasticsearchOutput)
}

// Servicev1LoggingElasticsearchArrayInput is an input type that accepts Servicev1LoggingElasticsearchArray and Servicev1LoggingElasticsearchArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingElasticsearchArrayInput` via:
//
//          Servicev1LoggingElasticsearchArray{ Servicev1LoggingElasticsearchArgs{...} }
type Servicev1LoggingElasticsearchArrayInput interface {
	pulumi.Input

	ToServicev1LoggingElasticsearchArrayOutput() Servicev1LoggingElasticsearchArrayOutput
	ToServicev1LoggingElasticsearchArrayOutputWithContext(context.Context) Servicev1LoggingElasticsearchArrayOutput
}

type Servicev1LoggingElasticsearchArray []Servicev1LoggingElasticsearchInput

func (Servicev1LoggingElasticsearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingElasticsearch)(nil)).Elem()
}

func (i Servicev1LoggingElasticsearchArray) ToServicev1LoggingElasticsearchArrayOutput() Servicev1LoggingElasticsearchArrayOutput {
	return i.ToServicev1LoggingElasticsearchArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingElasticsearchArray) ToServicev1LoggingElasticsearchArrayOutputWithContext(ctx context.Context) Servicev1LoggingElasticsearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingElasticsearchArrayOutput)
}

type Servicev1LoggingElasticsearchOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingElasticsearch)(nil)).Elem()
}

func (o Servicev1LoggingElasticsearchOutput) ToServicev1LoggingElasticsearchOutput() Servicev1LoggingElasticsearchOutput {
	return o
}

func (o Servicev1LoggingElasticsearchOutput) ToServicev1LoggingElasticsearchOutputWithContext(ctx context.Context) Servicev1LoggingElasticsearchOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingElasticsearchOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o Servicev1LoggingElasticsearchOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The name of the Elasticsearch index to send documents (logs) to
func (o Servicev1LoggingElasticsearchOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) string { return v.Index }).(pulumi.StringOutput)
}

// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingElasticsearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) string { return v.Name }).(pulumi.StringOutput)
}

// BasicAuth password for Elasticsearch
func (o Servicev1LoggingElasticsearchOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
func (o Servicev1LoggingElasticsearchOutput) Pipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.Pipeline }).(pulumi.StringPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LoggingElasticsearchOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingElasticsearchOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

func (o Servicev1LoggingElasticsearchOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

// The name of the condition to apply
func (o Servicev1LoggingElasticsearchOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingElasticsearchOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingElasticsearchOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingElasticsearchOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
func (o Servicev1LoggingElasticsearchOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Elasticsearch URL to stream logs to
func (o Servicev1LoggingElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// BasicAuth username for Elasticsearch
func (o Servicev1LoggingElasticsearchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingElasticsearch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type Servicev1LoggingElasticsearchArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingElasticsearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingElasticsearch)(nil)).Elem()
}

func (o Servicev1LoggingElasticsearchArrayOutput) ToServicev1LoggingElasticsearchArrayOutput() Servicev1LoggingElasticsearchArrayOutput {
	return o
}

func (o Servicev1LoggingElasticsearchArrayOutput) ToServicev1LoggingElasticsearchArrayOutputWithContext(ctx context.Context) Servicev1LoggingElasticsearchArrayOutput {
	return o
}

func (o Servicev1LoggingElasticsearchArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingElasticsearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingElasticsearch {
		return vs[0].([]Servicev1LoggingElasticsearch)[vs[1].(int)]
	}).(Servicev1LoggingElasticsearchOutput)
}

type Servicev1LoggingFtp struct {
	// The FTP address to stream logs to
	Address string `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// Gzip Compression level. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted (default: `classic`)
	MessageType *string `pulumi:"messageType"`
	// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The password for the server (for anonymous use an email address)
	Password string `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default `3600`)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The port number. Default: `21`
	Port *int `pulumi:"port"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of the condition to apply.
	ResponseCondition *string `pulumi:"responseCondition"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for the server (can be `anonymous`)
	User string `pulumi:"user"`
}

// Servicev1LoggingFtpInput is an input type that accepts Servicev1LoggingFtpArgs and Servicev1LoggingFtpOutput values.
// You can construct a concrete instance of `Servicev1LoggingFtpInput` via:
//
//          Servicev1LoggingFtpArgs{...}
type Servicev1LoggingFtpInput interface {
	pulumi.Input

	ToServicev1LoggingFtpOutput() Servicev1LoggingFtpOutput
	ToServicev1LoggingFtpOutputWithContext(context.Context) Servicev1LoggingFtpOutput
}

type Servicev1LoggingFtpArgs struct {
	// The FTP address to stream logs to
	Address pulumi.StringInput `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Gzip Compression level. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted (default: `classic`)
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server (for anonymous use an email address)
	Password pulumi.StringInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port number. Default: `21`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the condition to apply.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for the server (can be `anonymous`)
	User pulumi.StringInput `pulumi:"user"`
}

func (Servicev1LoggingFtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingFtp)(nil)).Elem()
}

func (i Servicev1LoggingFtpArgs) ToServicev1LoggingFtpOutput() Servicev1LoggingFtpOutput {
	return i.ToServicev1LoggingFtpOutputWithContext(context.Background())
}

func (i Servicev1LoggingFtpArgs) ToServicev1LoggingFtpOutputWithContext(ctx context.Context) Servicev1LoggingFtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingFtpOutput)
}

// Servicev1LoggingFtpArrayInput is an input type that accepts Servicev1LoggingFtpArray and Servicev1LoggingFtpArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingFtpArrayInput` via:
//
//          Servicev1LoggingFtpArray{ Servicev1LoggingFtpArgs{...} }
type Servicev1LoggingFtpArrayInput interface {
	pulumi.Input

	ToServicev1LoggingFtpArrayOutput() Servicev1LoggingFtpArrayOutput
	ToServicev1LoggingFtpArrayOutputWithContext(context.Context) Servicev1LoggingFtpArrayOutput
}

type Servicev1LoggingFtpArray []Servicev1LoggingFtpInput

func (Servicev1LoggingFtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingFtp)(nil)).Elem()
}

func (i Servicev1LoggingFtpArray) ToServicev1LoggingFtpArrayOutput() Servicev1LoggingFtpArrayOutput {
	return i.ToServicev1LoggingFtpArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingFtpArray) ToServicev1LoggingFtpArrayOutputWithContext(ctx context.Context) Servicev1LoggingFtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingFtpArrayOutput)
}

type Servicev1LoggingFtpOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingFtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingFtp)(nil)).Elem()
}

func (o Servicev1LoggingFtpOutput) ToServicev1LoggingFtpOutput() Servicev1LoggingFtpOutput {
	return o
}

func (o Servicev1LoggingFtpOutput) ToServicev1LoggingFtpOutputWithContext(ctx context.Context) Servicev1LoggingFtpOutput {
	return o
}

// The FTP address to stream logs to
func (o Servicev1LoggingFtpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.Address }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingFtpOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o Servicev1LoggingFtpOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Gzip Compression level. Default `0`
func (o Servicev1LoggingFtpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted (default: `classic`)
func (o Servicev1LoggingFtpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingFtpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server (for anonymous use an email address)
func (o Servicev1LoggingFtpOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.Password }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in `/` then it is treated as a directory
func (o Servicev1LoggingFtpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently the logs should be transferred, in seconds (Default `3600`)
func (o Servicev1LoggingFtpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LoggingFtpOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port number. Default: `21`
func (o Servicev1LoggingFtpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o Servicev1LoggingFtpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply.
func (o Servicev1LoggingFtpOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o Servicev1LoggingFtpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for the server (can be `anonymous`)
func (o Servicev1LoggingFtpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingFtp) string { return v.User }).(pulumi.StringOutput)
}

type Servicev1LoggingFtpArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingFtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingFtp)(nil)).Elem()
}

func (o Servicev1LoggingFtpArrayOutput) ToServicev1LoggingFtpArrayOutput() Servicev1LoggingFtpArrayOutput {
	return o
}

func (o Servicev1LoggingFtpArrayOutput) ToServicev1LoggingFtpArrayOutputWithContext(ctx context.Context) Servicev1LoggingFtpArrayOutput {
	return o
}

func (o Servicev1LoggingFtpArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingFtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingFtp {
		return vs[0].([]Servicev1LoggingFtp)[vs[1].(int)]
	}).(Servicev1LoggingFtpOutput)
}

type Servicev1LoggingGooglepubsub struct {
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The ID of your Google Cloud Platform project
	ProjectId string `pulumi:"projectId"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
	SecretKey string `pulumi:"secretKey"`
	// The Google Cloud Pub/Sub topic to which logs will be published
	Topic string `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
	User string `pulumi:"user"`
}

// Servicev1LoggingGooglepubsubInput is an input type that accepts Servicev1LoggingGooglepubsubArgs and Servicev1LoggingGooglepubsubOutput values.
// You can construct a concrete instance of `Servicev1LoggingGooglepubsubInput` via:
//
//          Servicev1LoggingGooglepubsubArgs{...}
type Servicev1LoggingGooglepubsubInput interface {
	pulumi.Input

	ToServicev1LoggingGooglepubsubOutput() Servicev1LoggingGooglepubsubOutput
	ToServicev1LoggingGooglepubsubOutputWithContext(context.Context) Servicev1LoggingGooglepubsubOutput
}

type Servicev1LoggingGooglepubsubArgs struct {
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The ID of your Google Cloud Platform project
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The Google Cloud Pub/Sub topic to which logs will be published
	Topic pulumi.StringInput `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
	User pulumi.StringInput `pulumi:"user"`
}

func (Servicev1LoggingGooglepubsubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingGooglepubsub)(nil)).Elem()
}

func (i Servicev1LoggingGooglepubsubArgs) ToServicev1LoggingGooglepubsubOutput() Servicev1LoggingGooglepubsubOutput {
	return i.ToServicev1LoggingGooglepubsubOutputWithContext(context.Background())
}

func (i Servicev1LoggingGooglepubsubArgs) ToServicev1LoggingGooglepubsubOutputWithContext(ctx context.Context) Servicev1LoggingGooglepubsubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingGooglepubsubOutput)
}

// Servicev1LoggingGooglepubsubArrayInput is an input type that accepts Servicev1LoggingGooglepubsubArray and Servicev1LoggingGooglepubsubArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingGooglepubsubArrayInput` via:
//
//          Servicev1LoggingGooglepubsubArray{ Servicev1LoggingGooglepubsubArgs{...} }
type Servicev1LoggingGooglepubsubArrayInput interface {
	pulumi.Input

	ToServicev1LoggingGooglepubsubArrayOutput() Servicev1LoggingGooglepubsubArrayOutput
	ToServicev1LoggingGooglepubsubArrayOutputWithContext(context.Context) Servicev1LoggingGooglepubsubArrayOutput
}

type Servicev1LoggingGooglepubsubArray []Servicev1LoggingGooglepubsubInput

func (Servicev1LoggingGooglepubsubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingGooglepubsub)(nil)).Elem()
}

func (i Servicev1LoggingGooglepubsubArray) ToServicev1LoggingGooglepubsubArrayOutput() Servicev1LoggingGooglepubsubArrayOutput {
	return i.ToServicev1LoggingGooglepubsubArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingGooglepubsubArray) ToServicev1LoggingGooglepubsubArrayOutputWithContext(ctx context.Context) Servicev1LoggingGooglepubsubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingGooglepubsubArrayOutput)
}

type Servicev1LoggingGooglepubsubOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingGooglepubsubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingGooglepubsub)(nil)).Elem()
}

func (o Servicev1LoggingGooglepubsubOutput) ToServicev1LoggingGooglepubsubOutput() Servicev1LoggingGooglepubsubOutput {
	return o
}

func (o Servicev1LoggingGooglepubsubOutput) ToServicev1LoggingGooglepubsubOutputWithContext(ctx context.Context) Servicev1LoggingGooglepubsubOutput {
	return o
}

// Apache style log formatting.
func (o Servicev1LoggingGooglepubsubOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o Servicev1LoggingGooglepubsubOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingGooglepubsubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LoggingGooglepubsubOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The ID of your Google Cloud Platform project
func (o Servicev1LoggingGooglepubsubOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingGooglepubsubOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
func (o Servicev1LoggingGooglepubsubOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The Google Cloud Pub/Sub topic to which logs will be published
func (o Servicev1LoggingGooglepubsubOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.Topic }).(pulumi.StringOutput)
}

// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
func (o Servicev1LoggingGooglepubsubOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingGooglepubsub) string { return v.User }).(pulumi.StringOutput)
}

type Servicev1LoggingGooglepubsubArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingGooglepubsubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingGooglepubsub)(nil)).Elem()
}

func (o Servicev1LoggingGooglepubsubArrayOutput) ToServicev1LoggingGooglepubsubArrayOutput() Servicev1LoggingGooglepubsubArrayOutput {
	return o
}

func (o Servicev1LoggingGooglepubsubArrayOutput) ToServicev1LoggingGooglepubsubArrayOutputWithContext(ctx context.Context) Servicev1LoggingGooglepubsubArrayOutput {
	return o
}

func (o Servicev1LoggingGooglepubsubArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingGooglepubsubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingGooglepubsub {
		return vs[0].([]Servicev1LoggingGooglepubsub)[vs[1].(int)]
	}).(Servicev1LoggingGooglepubsubOutput)
}

type Servicev1LoggingHeroku struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
	Token string `pulumi:"token"`
	// The URL to stream logs to
	Url string `pulumi:"url"`
}

// Servicev1LoggingHerokuInput is an input type that accepts Servicev1LoggingHerokuArgs and Servicev1LoggingHerokuOutput values.
// You can construct a concrete instance of `Servicev1LoggingHerokuInput` via:
//
//          Servicev1LoggingHerokuArgs{...}
type Servicev1LoggingHerokuInput interface {
	pulumi.Input

	ToServicev1LoggingHerokuOutput() Servicev1LoggingHerokuOutput
	ToServicev1LoggingHerokuOutputWithContext(context.Context) Servicev1LoggingHerokuOutput
}

type Servicev1LoggingHerokuArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
	Token pulumi.StringInput `pulumi:"token"`
	// The URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1LoggingHerokuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingHeroku)(nil)).Elem()
}

func (i Servicev1LoggingHerokuArgs) ToServicev1LoggingHerokuOutput() Servicev1LoggingHerokuOutput {
	return i.ToServicev1LoggingHerokuOutputWithContext(context.Background())
}

func (i Servicev1LoggingHerokuArgs) ToServicev1LoggingHerokuOutputWithContext(ctx context.Context) Servicev1LoggingHerokuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingHerokuOutput)
}

// Servicev1LoggingHerokuArrayInput is an input type that accepts Servicev1LoggingHerokuArray and Servicev1LoggingHerokuArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingHerokuArrayInput` via:
//
//          Servicev1LoggingHerokuArray{ Servicev1LoggingHerokuArgs{...} }
type Servicev1LoggingHerokuArrayInput interface {
	pulumi.Input

	ToServicev1LoggingHerokuArrayOutput() Servicev1LoggingHerokuArrayOutput
	ToServicev1LoggingHerokuArrayOutputWithContext(context.Context) Servicev1LoggingHerokuArrayOutput
}

type Servicev1LoggingHerokuArray []Servicev1LoggingHerokuInput

func (Servicev1LoggingHerokuArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingHeroku)(nil)).Elem()
}

func (i Servicev1LoggingHerokuArray) ToServicev1LoggingHerokuArrayOutput() Servicev1LoggingHerokuArrayOutput {
	return i.ToServicev1LoggingHerokuArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingHerokuArray) ToServicev1LoggingHerokuArrayOutputWithContext(ctx context.Context) Servicev1LoggingHerokuArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingHerokuArrayOutput)
}

type Servicev1LoggingHerokuOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingHerokuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingHeroku)(nil)).Elem()
}

func (o Servicev1LoggingHerokuOutput) ToServicev1LoggingHerokuOutput() Servicev1LoggingHerokuOutput {
	return o
}

func (o Servicev1LoggingHerokuOutput) ToServicev1LoggingHerokuOutputWithContext(ctx context.Context) Servicev1LoggingHerokuOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingHerokuOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingHeroku) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingHerokuOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingHeroku) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingHerokuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingHeroku) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o Servicev1LoggingHerokuOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingHeroku) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingHerokuOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingHeroku) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
func (o Servicev1LoggingHerokuOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingHeroku) string { return v.Token }).(pulumi.StringOutput)
}

// The URL to stream logs to
func (o Servicev1LoggingHerokuOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingHeroku) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1LoggingHerokuArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingHerokuArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingHeroku)(nil)).Elem()
}

func (o Servicev1LoggingHerokuArrayOutput) ToServicev1LoggingHerokuArrayOutput() Servicev1LoggingHerokuArrayOutput {
	return o
}

func (o Servicev1LoggingHerokuArrayOutput) ToServicev1LoggingHerokuArrayOutputWithContext(ctx context.Context) Servicev1LoggingHerokuArrayOutput {
	return o
}

func (o Servicev1LoggingHerokuArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingHerokuOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingHeroku {
		return vs[0].([]Servicev1LoggingHeroku)[vs[1].(int)]
	}).(Servicev1LoggingHerokuOutput)
}

type Servicev1LoggingHoneycomb struct {
	// The Honeycomb Dataset you want to log to
	Dataset string `pulumi:"dataset"`
	// Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The Write Key from the Account page of your Honeycomb account
	Token string `pulumi:"token"`
}

// Servicev1LoggingHoneycombInput is an input type that accepts Servicev1LoggingHoneycombArgs and Servicev1LoggingHoneycombOutput values.
// You can construct a concrete instance of `Servicev1LoggingHoneycombInput` via:
//
//          Servicev1LoggingHoneycombArgs{...}
type Servicev1LoggingHoneycombInput interface {
	pulumi.Input

	ToServicev1LoggingHoneycombOutput() Servicev1LoggingHoneycombOutput
	ToServicev1LoggingHoneycombOutputWithContext(context.Context) Servicev1LoggingHoneycombOutput
}

type Servicev1LoggingHoneycombArgs struct {
	// The Honeycomb Dataset you want to log to
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The Write Key from the Account page of your Honeycomb account
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingHoneycombArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingHoneycomb)(nil)).Elem()
}

func (i Servicev1LoggingHoneycombArgs) ToServicev1LoggingHoneycombOutput() Servicev1LoggingHoneycombOutput {
	return i.ToServicev1LoggingHoneycombOutputWithContext(context.Background())
}

func (i Servicev1LoggingHoneycombArgs) ToServicev1LoggingHoneycombOutputWithContext(ctx context.Context) Servicev1LoggingHoneycombOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingHoneycombOutput)
}

// Servicev1LoggingHoneycombArrayInput is an input type that accepts Servicev1LoggingHoneycombArray and Servicev1LoggingHoneycombArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingHoneycombArrayInput` via:
//
//          Servicev1LoggingHoneycombArray{ Servicev1LoggingHoneycombArgs{...} }
type Servicev1LoggingHoneycombArrayInput interface {
	pulumi.Input

	ToServicev1LoggingHoneycombArrayOutput() Servicev1LoggingHoneycombArrayOutput
	ToServicev1LoggingHoneycombArrayOutputWithContext(context.Context) Servicev1LoggingHoneycombArrayOutput
}

type Servicev1LoggingHoneycombArray []Servicev1LoggingHoneycombInput

func (Servicev1LoggingHoneycombArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingHoneycomb)(nil)).Elem()
}

func (i Servicev1LoggingHoneycombArray) ToServicev1LoggingHoneycombArrayOutput() Servicev1LoggingHoneycombArrayOutput {
	return i.ToServicev1LoggingHoneycombArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingHoneycombArray) ToServicev1LoggingHoneycombArrayOutputWithContext(ctx context.Context) Servicev1LoggingHoneycombArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingHoneycombArrayOutput)
}

type Servicev1LoggingHoneycombOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingHoneycombOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingHoneycomb)(nil)).Elem()
}

func (o Servicev1LoggingHoneycombOutput) ToServicev1LoggingHoneycombOutput() Servicev1LoggingHoneycombOutput {
	return o
}

func (o Servicev1LoggingHoneycombOutput) ToServicev1LoggingHoneycombOutputWithContext(ctx context.Context) Servicev1LoggingHoneycombOutput {
	return o
}

// The Honeycomb Dataset you want to log to
func (o Servicev1LoggingHoneycombOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingHoneycomb) string { return v.Dataset }).(pulumi.StringOutput)
}

// Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.
func (o Servicev1LoggingHoneycombOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingHoneycomb) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingHoneycombOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingHoneycomb) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingHoneycombOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingHoneycomb) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o Servicev1LoggingHoneycombOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingHoneycomb) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingHoneycombOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingHoneycomb) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The Write Key from the Account page of your Honeycomb account
func (o Servicev1LoggingHoneycombOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingHoneycomb) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingHoneycombArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingHoneycombArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingHoneycomb)(nil)).Elem()
}

func (o Servicev1LoggingHoneycombArrayOutput) ToServicev1LoggingHoneycombArrayOutput() Servicev1LoggingHoneycombArrayOutput {
	return o
}

func (o Servicev1LoggingHoneycombArrayOutput) ToServicev1LoggingHoneycombArrayOutputWithContext(ctx context.Context) Servicev1LoggingHoneycombArrayOutput {
	return o
}

func (o Servicev1LoggingHoneycombArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingHoneycombOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingHoneycomb {
		return vs[0].([]Servicev1LoggingHoneycomb)[vs[1].(int)]
	}).(Servicev1LoggingHoneycombOutput)
}

type Servicev1LoggingKafka struct {
	// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
	AuthMethod *string `pulumi:"authMethod"`
	// A comma-separated list of IP addresses or hostnames of Kafka brokers
	Brokers string `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name            string `pulumi:"name"`
	ParseLogKeyvals *bool  `pulumi:"parseLogKeyvals"`
	// SASL Pass
	Password *string `pulumi:"password"`
	// Where in the generated VCL the logging call should be placed.
	Placement       *string `pulumi:"placement"`
	RequestMaxBytes *int    `pulumi:"requestMaxBytes"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1`	Wait for all in-sync replicas to respond
	RequiredAcks *string `pulumi:"requiredAcks"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	TlsCaCert         *string `pulumi:"tlsCaCert"`
	TlsClientCert     *string `pulumi:"tlsClientCert"`
	TlsClientKey      *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to
	Topic string `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either `true` or `false`
	UseTls *bool `pulumi:"useTls"`
	// SASL User
	User *string `pulumi:"user"`
}

// Servicev1LoggingKafkaInput is an input type that accepts Servicev1LoggingKafkaArgs and Servicev1LoggingKafkaOutput values.
// You can construct a concrete instance of `Servicev1LoggingKafkaInput` via:
//
//          Servicev1LoggingKafkaArgs{...}
type Servicev1LoggingKafkaInput interface {
	pulumi.Input

	ToServicev1LoggingKafkaOutput() Servicev1LoggingKafkaOutput
	ToServicev1LoggingKafkaOutputWithContext(context.Context) Servicev1LoggingKafkaOutput
}

type Servicev1LoggingKafkaArgs struct {
	// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
	AuthMethod pulumi.StringPtrInput `pulumi:"authMethod"`
	// A comma-separated list of IP addresses or hostnames of Kafka brokers
	Brokers pulumi.StringInput `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name            pulumi.StringInput  `pulumi:"name"`
	ParseLogKeyvals pulumi.BoolPtrInput `pulumi:"parseLogKeyvals"`
	// SASL Pass
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Where in the generated VCL the logging call should be placed.
	Placement       pulumi.StringPtrInput `pulumi:"placement"`
	RequestMaxBytes pulumi.IntPtrInput    `pulumi:"requestMaxBytes"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1`	Wait for all in-sync replicas to respond
	RequiredAcks pulumi.StringPtrInput `pulumi:"requiredAcks"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	TlsCaCert         pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert     pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey      pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to
	Topic pulumi.StringInput `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either `true` or `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
	// SASL User
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (Servicev1LoggingKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingKafka)(nil)).Elem()
}

func (i Servicev1LoggingKafkaArgs) ToServicev1LoggingKafkaOutput() Servicev1LoggingKafkaOutput {
	return i.ToServicev1LoggingKafkaOutputWithContext(context.Background())
}

func (i Servicev1LoggingKafkaArgs) ToServicev1LoggingKafkaOutputWithContext(ctx context.Context) Servicev1LoggingKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingKafkaOutput)
}

// Servicev1LoggingKafkaArrayInput is an input type that accepts Servicev1LoggingKafkaArray and Servicev1LoggingKafkaArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingKafkaArrayInput` via:
//
//          Servicev1LoggingKafkaArray{ Servicev1LoggingKafkaArgs{...} }
type Servicev1LoggingKafkaArrayInput interface {
	pulumi.Input

	ToServicev1LoggingKafkaArrayOutput() Servicev1LoggingKafkaArrayOutput
	ToServicev1LoggingKafkaArrayOutputWithContext(context.Context) Servicev1LoggingKafkaArrayOutput
}

type Servicev1LoggingKafkaArray []Servicev1LoggingKafkaInput

func (Servicev1LoggingKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingKafka)(nil)).Elem()
}

func (i Servicev1LoggingKafkaArray) ToServicev1LoggingKafkaArrayOutput() Servicev1LoggingKafkaArrayOutput {
	return i.ToServicev1LoggingKafkaArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingKafkaArray) ToServicev1LoggingKafkaArrayOutputWithContext(ctx context.Context) Servicev1LoggingKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingKafkaArrayOutput)
}

type Servicev1LoggingKafkaOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingKafka)(nil)).Elem()
}

func (o Servicev1LoggingKafkaOutput) ToServicev1LoggingKafkaOutput() Servicev1LoggingKafkaOutput {
	return o
}

func (o Servicev1LoggingKafkaOutput) ToServicev1LoggingKafkaOutputWithContext(ctx context.Context) Servicev1LoggingKafkaOutput {
	return o
}

// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
func (o Servicev1LoggingKafkaOutput) AuthMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.AuthMethod }).(pulumi.StringPtrOutput)
}

// A comma-separated list of IP addresses or hostnames of Kafka brokers
func (o Servicev1LoggingKafkaOutput) Brokers() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) string { return v.Brokers }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
func (o Servicev1LoggingKafkaOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Apache style log formatting.
func (o Servicev1LoggingKafkaOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o Servicev1LoggingKafkaOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingKafkaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1LoggingKafkaOutput) ParseLogKeyvals() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *bool { return v.ParseLogKeyvals }).(pulumi.BoolPtrOutput)
}

// SASL Pass
func (o Servicev1LoggingKafkaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LoggingKafkaOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingKafkaOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1`	Wait for all in-sync replicas to respond
func (o Servicev1LoggingKafkaOutput) RequiredAcks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.RequiredAcks }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingKafkaOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingKafkaOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingKafkaOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingKafkaOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
func (o Servicev1LoggingKafkaOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Kafka topic to send logs to
func (o Servicev1LoggingKafkaOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) string { return v.Topic }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging. Can be either `true` or `false`
func (o Servicev1LoggingKafkaOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

// SASL User
func (o Servicev1LoggingKafkaOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKafka) *string { return v.User }).(pulumi.StringPtrOutput)
}

type Servicev1LoggingKafkaArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingKafka)(nil)).Elem()
}

func (o Servicev1LoggingKafkaArrayOutput) ToServicev1LoggingKafkaArrayOutput() Servicev1LoggingKafkaArrayOutput {
	return o
}

func (o Servicev1LoggingKafkaArrayOutput) ToServicev1LoggingKafkaArrayOutputWithContext(ctx context.Context) Servicev1LoggingKafkaArrayOutput {
	return o
}

func (o Servicev1LoggingKafkaArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingKafka {
		return vs[0].([]Servicev1LoggingKafka)[vs[1].(int)]
	}).(Servicev1LoggingKafkaOutput)
}

type Servicev1LoggingKinese struct {
	// The AWS access key to be used to write to the stream
	AccessKey string `pulumi:"accessKey"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The AWS region the stream resides in. (Default: `us-east-1`)
	Region *string `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The AWS secret access key to authenticate with
	SecretKey string `pulumi:"secretKey"`
	// The Kinesis stream name
	Topic string `pulumi:"topic"`
}

// Servicev1LoggingKineseInput is an input type that accepts Servicev1LoggingKineseArgs and Servicev1LoggingKineseOutput values.
// You can construct a concrete instance of `Servicev1LoggingKineseInput` via:
//
//          Servicev1LoggingKineseArgs{...}
type Servicev1LoggingKineseInput interface {
	pulumi.Input

	ToServicev1LoggingKineseOutput() Servicev1LoggingKineseOutput
	ToServicev1LoggingKineseOutputWithContext(context.Context) Servicev1LoggingKineseOutput
}

type Servicev1LoggingKineseArgs struct {
	// The AWS access key to be used to write to the stream
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The AWS region the stream resides in. (Default: `us-east-1`)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The AWS secret access key to authenticate with
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The Kinesis stream name
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (Servicev1LoggingKineseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingKinese)(nil)).Elem()
}

func (i Servicev1LoggingKineseArgs) ToServicev1LoggingKineseOutput() Servicev1LoggingKineseOutput {
	return i.ToServicev1LoggingKineseOutputWithContext(context.Background())
}

func (i Servicev1LoggingKineseArgs) ToServicev1LoggingKineseOutputWithContext(ctx context.Context) Servicev1LoggingKineseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingKineseOutput)
}

// Servicev1LoggingKineseArrayInput is an input type that accepts Servicev1LoggingKineseArray and Servicev1LoggingKineseArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingKineseArrayInput` via:
//
//          Servicev1LoggingKineseArray{ Servicev1LoggingKineseArgs{...} }
type Servicev1LoggingKineseArrayInput interface {
	pulumi.Input

	ToServicev1LoggingKineseArrayOutput() Servicev1LoggingKineseArrayOutput
	ToServicev1LoggingKineseArrayOutputWithContext(context.Context) Servicev1LoggingKineseArrayOutput
}

type Servicev1LoggingKineseArray []Servicev1LoggingKineseInput

func (Servicev1LoggingKineseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingKinese)(nil)).Elem()
}

func (i Servicev1LoggingKineseArray) ToServicev1LoggingKineseArrayOutput() Servicev1LoggingKineseArrayOutput {
	return i.ToServicev1LoggingKineseArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingKineseArray) ToServicev1LoggingKineseArrayOutputWithContext(ctx context.Context) Servicev1LoggingKineseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingKineseArrayOutput)
}

type Servicev1LoggingKineseOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingKineseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingKinese)(nil)).Elem()
}

func (o Servicev1LoggingKineseOutput) ToServicev1LoggingKineseOutput() Servicev1LoggingKineseOutput {
	return o
}

func (o Servicev1LoggingKineseOutput) ToServicev1LoggingKineseOutputWithContext(ctx context.Context) Servicev1LoggingKineseOutput {
	return o
}

// The AWS access key to be used to write to the stream
func (o Servicev1LoggingKineseOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) string { return v.AccessKey }).(pulumi.StringOutput)
}

// Apache style log formatting.
func (o Servicev1LoggingKineseOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingKineseOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingKineseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o Servicev1LoggingKineseOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The AWS region the stream resides in. (Default: `us-east-1`)
func (o Servicev1LoggingKineseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingKineseOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The AWS secret access key to authenticate with
func (o Servicev1LoggingKineseOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The Kinesis stream name
func (o Servicev1LoggingKineseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingKinese) string { return v.Topic }).(pulumi.StringOutput)
}

type Servicev1LoggingKineseArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingKineseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingKinese)(nil)).Elem()
}

func (o Servicev1LoggingKineseArrayOutput) ToServicev1LoggingKineseArrayOutput() Servicev1LoggingKineseArrayOutput {
	return o
}

func (o Servicev1LoggingKineseArrayOutput) ToServicev1LoggingKineseArrayOutputWithContext(ctx context.Context) Servicev1LoggingKineseArrayOutput {
	return o
}

func (o Servicev1LoggingKineseArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingKineseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingKinese {
		return vs[0].([]Servicev1LoggingKinese)[vs[1].(int)]
	}).(Servicev1LoggingKineseOutput)
}

type Servicev1LoggingLoggly struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
	Token string `pulumi:"token"`
}

// Servicev1LoggingLogglyInput is an input type that accepts Servicev1LoggingLogglyArgs and Servicev1LoggingLogglyOutput values.
// You can construct a concrete instance of `Servicev1LoggingLogglyInput` via:
//
//          Servicev1LoggingLogglyArgs{...}
type Servicev1LoggingLogglyInput interface {
	pulumi.Input

	ToServicev1LoggingLogglyOutput() Servicev1LoggingLogglyOutput
	ToServicev1LoggingLogglyOutputWithContext(context.Context) Servicev1LoggingLogglyOutput
}

type Servicev1LoggingLogglyArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingLogglyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingLoggly)(nil)).Elem()
}

func (i Servicev1LoggingLogglyArgs) ToServicev1LoggingLogglyOutput() Servicev1LoggingLogglyOutput {
	return i.ToServicev1LoggingLogglyOutputWithContext(context.Background())
}

func (i Servicev1LoggingLogglyArgs) ToServicev1LoggingLogglyOutputWithContext(ctx context.Context) Servicev1LoggingLogglyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingLogglyOutput)
}

// Servicev1LoggingLogglyArrayInput is an input type that accepts Servicev1LoggingLogglyArray and Servicev1LoggingLogglyArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingLogglyArrayInput` via:
//
//          Servicev1LoggingLogglyArray{ Servicev1LoggingLogglyArgs{...} }
type Servicev1LoggingLogglyArrayInput interface {
	pulumi.Input

	ToServicev1LoggingLogglyArrayOutput() Servicev1LoggingLogglyArrayOutput
	ToServicev1LoggingLogglyArrayOutputWithContext(context.Context) Servicev1LoggingLogglyArrayOutput
}

type Servicev1LoggingLogglyArray []Servicev1LoggingLogglyInput

func (Servicev1LoggingLogglyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingLoggly)(nil)).Elem()
}

func (i Servicev1LoggingLogglyArray) ToServicev1LoggingLogglyArrayOutput() Servicev1LoggingLogglyArrayOutput {
	return i.ToServicev1LoggingLogglyArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingLogglyArray) ToServicev1LoggingLogglyArrayOutputWithContext(ctx context.Context) Servicev1LoggingLogglyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingLogglyArrayOutput)
}

type Servicev1LoggingLogglyOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingLogglyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingLoggly)(nil)).Elem()
}

func (o Servicev1LoggingLogglyOutput) ToServicev1LoggingLogglyOutput() Servicev1LoggingLogglyOutput {
	return o
}

func (o Servicev1LoggingLogglyOutput) ToServicev1LoggingLogglyOutputWithContext(ctx context.Context) Servicev1LoggingLogglyOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingLogglyOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingLogglyOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingLogglyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o Servicev1LoggingLogglyOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingLogglyOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
func (o Servicev1LoggingLogglyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingLoggly) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingLogglyArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingLogglyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingLoggly)(nil)).Elem()
}

func (o Servicev1LoggingLogglyArrayOutput) ToServicev1LoggingLogglyArrayOutput() Servicev1LoggingLogglyArrayOutput {
	return o
}

func (o Servicev1LoggingLogglyArrayOutput) ToServicev1LoggingLogglyArrayOutputWithContext(ctx context.Context) Servicev1LoggingLogglyArrayOutput {
	return o
}

func (o Servicev1LoggingLogglyArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingLogglyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingLoggly {
		return vs[0].([]Servicev1LoggingLoggly)[vs[1].(int)]
	}).(Servicev1LoggingLogglyOutput)
}

type Servicev1LoggingLogshuttle struct {
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The data authentication token associated with this endpoint
	Token string `pulumi:"token"`
	// Your Log Shuttle endpoint URL
	Url string `pulumi:"url"`
}

// Servicev1LoggingLogshuttleInput is an input type that accepts Servicev1LoggingLogshuttleArgs and Servicev1LoggingLogshuttleOutput values.
// You can construct a concrete instance of `Servicev1LoggingLogshuttleInput` via:
//
//          Servicev1LoggingLogshuttleArgs{...}
type Servicev1LoggingLogshuttleInput interface {
	pulumi.Input

	ToServicev1LoggingLogshuttleOutput() Servicev1LoggingLogshuttleOutput
	ToServicev1LoggingLogshuttleOutputWithContext(context.Context) Servicev1LoggingLogshuttleOutput
}

type Servicev1LoggingLogshuttleArgs struct {
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The data authentication token associated with this endpoint
	Token pulumi.StringInput `pulumi:"token"`
	// Your Log Shuttle endpoint URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1LoggingLogshuttleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingLogshuttle)(nil)).Elem()
}

func (i Servicev1LoggingLogshuttleArgs) ToServicev1LoggingLogshuttleOutput() Servicev1LoggingLogshuttleOutput {
	return i.ToServicev1LoggingLogshuttleOutputWithContext(context.Background())
}

func (i Servicev1LoggingLogshuttleArgs) ToServicev1LoggingLogshuttleOutputWithContext(ctx context.Context) Servicev1LoggingLogshuttleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingLogshuttleOutput)
}

// Servicev1LoggingLogshuttleArrayInput is an input type that accepts Servicev1LoggingLogshuttleArray and Servicev1LoggingLogshuttleArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingLogshuttleArrayInput` via:
//
//          Servicev1LoggingLogshuttleArray{ Servicev1LoggingLogshuttleArgs{...} }
type Servicev1LoggingLogshuttleArrayInput interface {
	pulumi.Input

	ToServicev1LoggingLogshuttleArrayOutput() Servicev1LoggingLogshuttleArrayOutput
	ToServicev1LoggingLogshuttleArrayOutputWithContext(context.Context) Servicev1LoggingLogshuttleArrayOutput
}

type Servicev1LoggingLogshuttleArray []Servicev1LoggingLogshuttleInput

func (Servicev1LoggingLogshuttleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingLogshuttle)(nil)).Elem()
}

func (i Servicev1LoggingLogshuttleArray) ToServicev1LoggingLogshuttleArrayOutput() Servicev1LoggingLogshuttleArrayOutput {
	return i.ToServicev1LoggingLogshuttleArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingLogshuttleArray) ToServicev1LoggingLogshuttleArrayOutputWithContext(ctx context.Context) Servicev1LoggingLogshuttleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingLogshuttleArrayOutput)
}

type Servicev1LoggingLogshuttleOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingLogshuttleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingLogshuttle)(nil)).Elem()
}

func (o Servicev1LoggingLogshuttleOutput) ToServicev1LoggingLogshuttleOutput() Servicev1LoggingLogshuttleOutput {
	return o
}

func (o Servicev1LoggingLogshuttleOutput) ToServicev1LoggingLogshuttleOutputWithContext(ctx context.Context) Servicev1LoggingLogshuttleOutput {
	return o
}

// Apache style log formatting.
func (o Servicev1LoggingLogshuttleOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLogshuttle) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingLogshuttleOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLogshuttle) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingLogshuttleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingLogshuttle) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o Servicev1LoggingLogshuttleOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLogshuttle) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingLogshuttleOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingLogshuttle) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The data authentication token associated with this endpoint
func (o Servicev1LoggingLogshuttleOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingLogshuttle) string { return v.Token }).(pulumi.StringOutput)
}

// Your Log Shuttle endpoint URL
func (o Servicev1LoggingLogshuttleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingLogshuttle) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1LoggingLogshuttleArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingLogshuttleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingLogshuttle)(nil)).Elem()
}

func (o Servicev1LoggingLogshuttleArrayOutput) ToServicev1LoggingLogshuttleArrayOutput() Servicev1LoggingLogshuttleArrayOutput {
	return o
}

func (o Servicev1LoggingLogshuttleArrayOutput) ToServicev1LoggingLogshuttleArrayOutputWithContext(ctx context.Context) Servicev1LoggingLogshuttleArrayOutput {
	return o
}

func (o Servicev1LoggingLogshuttleArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingLogshuttleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingLogshuttle {
		return vs[0].([]Servicev1LoggingLogshuttle)[vs[1].(int)]
	}).(Servicev1LoggingLogshuttleOutput)
}

type Servicev1LoggingNewrelic struct {
	// Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The name of the condition to apply.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The Insert API key from the Account page of your New Relic account
	Token string `pulumi:"token"`
}

// Servicev1LoggingNewrelicInput is an input type that accepts Servicev1LoggingNewrelicArgs and Servicev1LoggingNewrelicOutput values.
// You can construct a concrete instance of `Servicev1LoggingNewrelicInput` via:
//
//          Servicev1LoggingNewrelicArgs{...}
type Servicev1LoggingNewrelicInput interface {
	pulumi.Input

	ToServicev1LoggingNewrelicOutput() Servicev1LoggingNewrelicOutput
	ToServicev1LoggingNewrelicOutputWithContext(context.Context) Servicev1LoggingNewrelicOutput
}

type Servicev1LoggingNewrelicArgs struct {
	// Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of the condition to apply.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The Insert API key from the Account page of your New Relic account
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingNewrelicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingNewrelic)(nil)).Elem()
}

func (i Servicev1LoggingNewrelicArgs) ToServicev1LoggingNewrelicOutput() Servicev1LoggingNewrelicOutput {
	return i.ToServicev1LoggingNewrelicOutputWithContext(context.Background())
}

func (i Servicev1LoggingNewrelicArgs) ToServicev1LoggingNewrelicOutputWithContext(ctx context.Context) Servicev1LoggingNewrelicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingNewrelicOutput)
}

// Servicev1LoggingNewrelicArrayInput is an input type that accepts Servicev1LoggingNewrelicArray and Servicev1LoggingNewrelicArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingNewrelicArrayInput` via:
//
//          Servicev1LoggingNewrelicArray{ Servicev1LoggingNewrelicArgs{...} }
type Servicev1LoggingNewrelicArrayInput interface {
	pulumi.Input

	ToServicev1LoggingNewrelicArrayOutput() Servicev1LoggingNewrelicArrayOutput
	ToServicev1LoggingNewrelicArrayOutputWithContext(context.Context) Servicev1LoggingNewrelicArrayOutput
}

type Servicev1LoggingNewrelicArray []Servicev1LoggingNewrelicInput

func (Servicev1LoggingNewrelicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingNewrelic)(nil)).Elem()
}

func (i Servicev1LoggingNewrelicArray) ToServicev1LoggingNewrelicArrayOutput() Servicev1LoggingNewrelicArrayOutput {
	return i.ToServicev1LoggingNewrelicArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingNewrelicArray) ToServicev1LoggingNewrelicArrayOutputWithContext(ctx context.Context) Servicev1LoggingNewrelicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingNewrelicArrayOutput)
}

type Servicev1LoggingNewrelicOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingNewrelicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingNewrelic)(nil)).Elem()
}

func (o Servicev1LoggingNewrelicOutput) ToServicev1LoggingNewrelicOutput() Servicev1LoggingNewrelicOutput {
	return o
}

func (o Servicev1LoggingNewrelicOutput) ToServicev1LoggingNewrelicOutputWithContext(ctx context.Context) Servicev1LoggingNewrelicOutput {
	return o
}

// Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.
func (o Servicev1LoggingNewrelicOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingNewrelicOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingNewrelicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LoggingNewrelicOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply.
func (o Servicev1LoggingNewrelicOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The Insert API key from the Account page of your New Relic account
func (o Servicev1LoggingNewrelicOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingNewrelic) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingNewrelicArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingNewrelicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingNewrelic)(nil)).Elem()
}

func (o Servicev1LoggingNewrelicArrayOutput) ToServicev1LoggingNewrelicArrayOutput() Servicev1LoggingNewrelicArrayOutput {
	return o
}

func (o Servicev1LoggingNewrelicArrayOutput) ToServicev1LoggingNewrelicArrayOutputWithContext(ctx context.Context) Servicev1LoggingNewrelicArrayOutput {
	return o
}

func (o Servicev1LoggingNewrelicArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingNewrelicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingNewrelic {
		return vs[0].([]Servicev1LoggingNewrelic)[vs[1].(int)]
	}).(Servicev1LoggingNewrelicOutput)
}

type Servicev1LoggingOpenstack struct {
	// Your OpenStack account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of your OpenStack container
	BucketName string `pulumi:"bucketName"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
	MessageType *string `pulumi:"messageType"`
	// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Your OpenStack auth url
	Url string `pulumi:"url"`
	// The username for your OpenStack account
	User string `pulumi:"user"`
}

// Servicev1LoggingOpenstackInput is an input type that accepts Servicev1LoggingOpenstackArgs and Servicev1LoggingOpenstackOutput values.
// You can construct a concrete instance of `Servicev1LoggingOpenstackInput` via:
//
//          Servicev1LoggingOpenstackArgs{...}
type Servicev1LoggingOpenstackInput interface {
	pulumi.Input

	ToServicev1LoggingOpenstackOutput() Servicev1LoggingOpenstackOutput
	ToServicev1LoggingOpenstackOutputWithContext(context.Context) Servicev1LoggingOpenstackOutput
}

type Servicev1LoggingOpenstackArgs struct {
	// Your OpenStack account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of your OpenStack container
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// Your OpenStack auth url
	Url pulumi.StringInput `pulumi:"url"`
	// The username for your OpenStack account
	User pulumi.StringInput `pulumi:"user"`
}

func (Servicev1LoggingOpenstackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingOpenstack)(nil)).Elem()
}

func (i Servicev1LoggingOpenstackArgs) ToServicev1LoggingOpenstackOutput() Servicev1LoggingOpenstackOutput {
	return i.ToServicev1LoggingOpenstackOutputWithContext(context.Background())
}

func (i Servicev1LoggingOpenstackArgs) ToServicev1LoggingOpenstackOutputWithContext(ctx context.Context) Servicev1LoggingOpenstackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingOpenstackOutput)
}

// Servicev1LoggingOpenstackArrayInput is an input type that accepts Servicev1LoggingOpenstackArray and Servicev1LoggingOpenstackArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingOpenstackArrayInput` via:
//
//          Servicev1LoggingOpenstackArray{ Servicev1LoggingOpenstackArgs{...} }
type Servicev1LoggingOpenstackArrayInput interface {
	pulumi.Input

	ToServicev1LoggingOpenstackArrayOutput() Servicev1LoggingOpenstackArrayOutput
	ToServicev1LoggingOpenstackArrayOutputWithContext(context.Context) Servicev1LoggingOpenstackArrayOutput
}

type Servicev1LoggingOpenstackArray []Servicev1LoggingOpenstackInput

func (Servicev1LoggingOpenstackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingOpenstack)(nil)).Elem()
}

func (i Servicev1LoggingOpenstackArray) ToServicev1LoggingOpenstackArrayOutput() Servicev1LoggingOpenstackArrayOutput {
	return i.ToServicev1LoggingOpenstackArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingOpenstackArray) ToServicev1LoggingOpenstackArrayOutputWithContext(ctx context.Context) Servicev1LoggingOpenstackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingOpenstackArrayOutput)
}

type Servicev1LoggingOpenstackOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingOpenstackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingOpenstack)(nil)).Elem()
}

func (o Servicev1LoggingOpenstackOutput) ToServicev1LoggingOpenstackOutput() Servicev1LoggingOpenstackOutput {
	return o
}

func (o Servicev1LoggingOpenstackOutput) ToServicev1LoggingOpenstackOutputWithContext(ctx context.Context) Servicev1LoggingOpenstackOutput {
	return o
}

// Your OpenStack account access key
func (o Servicev1LoggingOpenstackOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of your OpenStack container
func (o Servicev1LoggingOpenstackOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) string { return v.BucketName }).(pulumi.StringOutput)
}

// Apache style log formatting.
func (o Servicev1LoggingOpenstackOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o Servicev1LoggingOpenstackOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
func (o Servicev1LoggingOpenstackOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. [Fastly Documentation](https://developer.fastly.com/reference/api/logging/gcs/)
func (o Servicev1LoggingOpenstackOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingOpenstackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o Servicev1LoggingOpenstackOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds. Default `3600`
func (o Servicev1LoggingOpenstackOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o Servicev1LoggingOpenstackOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o Servicev1LoggingOpenstackOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingOpenstackOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o Servicev1LoggingOpenstackOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// Your OpenStack auth url
func (o Servicev1LoggingOpenstackOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) string { return v.Url }).(pulumi.StringOutput)
}

// The username for your OpenStack account
func (o Servicev1LoggingOpenstackOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingOpenstack) string { return v.User }).(pulumi.StringOutput)
}

type Servicev1LoggingOpenstackArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingOpenstackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingOpenstack)(nil)).Elem()
}

func (o Servicev1LoggingOpenstackArrayOutput) ToServicev1LoggingOpenstackArrayOutput() Servicev1LoggingOpenstackArrayOutput {
	return o
}

func (o Servicev1LoggingOpenstackArrayOutput) ToServicev1LoggingOpenstackArrayOutputWithContext(ctx context.Context) Servicev1LoggingOpenstackArrayOutput {
	return o
}

func (o Servicev1LoggingOpenstackArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingOpenstackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingOpenstack {
		return vs[0].([]Servicev1LoggingOpenstack)[vs[1].(int)]
	}).(Servicev1LoggingOpenstackOutput)
}

type Servicev1LoggingScalyr struct {
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region *string `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys)
	Token string `pulumi:"token"`
}

// Servicev1LoggingScalyrInput is an input type that accepts Servicev1LoggingScalyrArgs and Servicev1LoggingScalyrOutput values.
// You can construct a concrete instance of `Servicev1LoggingScalyrInput` via:
//
//          Servicev1LoggingScalyrArgs{...}
type Servicev1LoggingScalyrInput interface {
	pulumi.Input

	ToServicev1LoggingScalyrOutput() Servicev1LoggingScalyrOutput
	ToServicev1LoggingScalyrOutputWithContext(context.Context) Servicev1LoggingScalyrOutput
}

type Servicev1LoggingScalyrArgs struct {
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys)
	Token pulumi.StringInput `pulumi:"token"`
}

func (Servicev1LoggingScalyrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingScalyr)(nil)).Elem()
}

func (i Servicev1LoggingScalyrArgs) ToServicev1LoggingScalyrOutput() Servicev1LoggingScalyrOutput {
	return i.ToServicev1LoggingScalyrOutputWithContext(context.Background())
}

func (i Servicev1LoggingScalyrArgs) ToServicev1LoggingScalyrOutputWithContext(ctx context.Context) Servicev1LoggingScalyrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingScalyrOutput)
}

// Servicev1LoggingScalyrArrayInput is an input type that accepts Servicev1LoggingScalyrArray and Servicev1LoggingScalyrArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingScalyrArrayInput` via:
//
//          Servicev1LoggingScalyrArray{ Servicev1LoggingScalyrArgs{...} }
type Servicev1LoggingScalyrArrayInput interface {
	pulumi.Input

	ToServicev1LoggingScalyrArrayOutput() Servicev1LoggingScalyrArrayOutput
	ToServicev1LoggingScalyrArrayOutputWithContext(context.Context) Servicev1LoggingScalyrArrayOutput
}

type Servicev1LoggingScalyrArray []Servicev1LoggingScalyrInput

func (Servicev1LoggingScalyrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingScalyr)(nil)).Elem()
}

func (i Servicev1LoggingScalyrArray) ToServicev1LoggingScalyrArrayOutput() Servicev1LoggingScalyrArrayOutput {
	return i.ToServicev1LoggingScalyrArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingScalyrArray) ToServicev1LoggingScalyrArrayOutputWithContext(ctx context.Context) Servicev1LoggingScalyrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingScalyrArrayOutput)
}

type Servicev1LoggingScalyrOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingScalyrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingScalyr)(nil)).Elem()
}

func (o Servicev1LoggingScalyrOutput) ToServicev1LoggingScalyrOutput() Servicev1LoggingScalyrOutput {
	return o
}

func (o Servicev1LoggingScalyrOutput) ToServicev1LoggingScalyrOutputWithContext(ctx context.Context) Servicev1LoggingScalyrOutput {
	return o
}

// Apache style log formatting.
func (o Servicev1LoggingScalyrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o Servicev1LoggingScalyrOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingScalyrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LoggingScalyrOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
func (o Servicev1LoggingScalyrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o Servicev1LoggingScalyrOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys)
func (o Servicev1LoggingScalyrOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingScalyr) string { return v.Token }).(pulumi.StringOutput)
}

type Servicev1LoggingScalyrArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingScalyrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingScalyr)(nil)).Elem()
}

func (o Servicev1LoggingScalyrArrayOutput) ToServicev1LoggingScalyrArrayOutput() Servicev1LoggingScalyrArrayOutput {
	return o
}

func (o Servicev1LoggingScalyrArrayOutput) ToServicev1LoggingScalyrArrayOutputWithContext(ctx context.Context) Servicev1LoggingScalyrArrayOutput {
	return o
}

func (o Servicev1LoggingScalyrArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingScalyrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingScalyr {
		return vs[0].([]Servicev1LoggingScalyr)[vs[1].(int)]
	}).(Servicev1LoggingScalyrOutput)
}

type Servicev1LoggingSftp struct {
	// The SFTP address to stream logs to
	Address string `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	Password *string `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`)
	Port *int `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of the condition to apply.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	SecretKey     *string `pulumi:"secretKey"`
	SshKnownHosts string  `pulumi:"sshKnownHosts"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for the server
	User string `pulumi:"user"`
}

// Servicev1LoggingSftpInput is an input type that accepts Servicev1LoggingSftpArgs and Servicev1LoggingSftpOutput values.
// You can construct a concrete instance of `Servicev1LoggingSftpInput` via:
//
//          Servicev1LoggingSftpArgs{...}
type Servicev1LoggingSftpInput interface {
	pulumi.Input

	ToServicev1LoggingSftpOutput() Servicev1LoggingSftpOutput
	ToServicev1LoggingSftpOutputWithContext(context.Context) Servicev1LoggingSftpOutput
}

type Servicev1LoggingSftpArgs struct {
	// The SFTP address to stream logs to
	Address pulumi.StringInput `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`)
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the condition to apply.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	SecretKey     pulumi.StringPtrInput `pulumi:"secretKey"`
	SshKnownHosts pulumi.StringInput    `pulumi:"sshKnownHosts"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for the server
	User pulumi.StringInput `pulumi:"user"`
}

func (Servicev1LoggingSftpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingSftp)(nil)).Elem()
}

func (i Servicev1LoggingSftpArgs) ToServicev1LoggingSftpOutput() Servicev1LoggingSftpOutput {
	return i.ToServicev1LoggingSftpOutputWithContext(context.Background())
}

func (i Servicev1LoggingSftpArgs) ToServicev1LoggingSftpOutputWithContext(ctx context.Context) Servicev1LoggingSftpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingSftpOutput)
}

// Servicev1LoggingSftpArrayInput is an input type that accepts Servicev1LoggingSftpArray and Servicev1LoggingSftpArrayOutput values.
// You can construct a concrete instance of `Servicev1LoggingSftpArrayInput` via:
//
//          Servicev1LoggingSftpArray{ Servicev1LoggingSftpArgs{...} }
type Servicev1LoggingSftpArrayInput interface {
	pulumi.Input

	ToServicev1LoggingSftpArrayOutput() Servicev1LoggingSftpArrayOutput
	ToServicev1LoggingSftpArrayOutputWithContext(context.Context) Servicev1LoggingSftpArrayOutput
}

type Servicev1LoggingSftpArray []Servicev1LoggingSftpInput

func (Servicev1LoggingSftpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingSftp)(nil)).Elem()
}

func (i Servicev1LoggingSftpArray) ToServicev1LoggingSftpArrayOutput() Servicev1LoggingSftpArrayOutput {
	return i.ToServicev1LoggingSftpArrayOutputWithContext(context.Background())
}

func (i Servicev1LoggingSftpArray) ToServicev1LoggingSftpArrayOutputWithContext(ctx context.Context) Servicev1LoggingSftpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LoggingSftpArrayOutput)
}

type Servicev1LoggingSftpOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingSftpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1LoggingSftp)(nil)).Elem()
}

func (o Servicev1LoggingSftpOutput) ToServicev1LoggingSftpOutput() Servicev1LoggingSftpOutput {
	return o
}

func (o Servicev1LoggingSftpOutput) ToServicev1LoggingSftpOutputWithContext(ctx context.Context) Servicev1LoggingSftpOutput {
	return o
}

// The SFTP address to stream logs to
func (o Servicev1LoggingSftpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.Address }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1LoggingSftpOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o Servicev1LoggingSftpOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// What level of Gzip encoding to have when dumping logs (default `0`, no compression)
func (o Servicev1LoggingSftpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. One of: `classic` (default), `loggly`, `logplex` or `blank`
func (o Servicev1LoggingSftpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1LoggingSftpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
func (o Servicev1LoggingSftpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The path to upload log files to. If the path ends in `/` then it is treated as a directory
func (o Servicev1LoggingSftpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o Servicev1LoggingSftpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1LoggingSftpOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`)
func (o Servicev1LoggingSftpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o Servicev1LoggingSftpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply.
func (o Servicev1LoggingSftpOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
func (o Servicev1LoggingSftpOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1LoggingSftpOutput) SshKnownHosts() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.SshKnownHosts }).(pulumi.StringOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o Servicev1LoggingSftpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for the server
func (o Servicev1LoggingSftpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1LoggingSftp) string { return v.User }).(pulumi.StringOutput)
}

type Servicev1LoggingSftpArrayOutput struct{ *pulumi.OutputState }

func (Servicev1LoggingSftpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1LoggingSftp)(nil)).Elem()
}

func (o Servicev1LoggingSftpArrayOutput) ToServicev1LoggingSftpArrayOutput() Servicev1LoggingSftpArrayOutput {
	return o
}

func (o Servicev1LoggingSftpArrayOutput) ToServicev1LoggingSftpArrayOutputWithContext(ctx context.Context) Servicev1LoggingSftpArrayOutput {
	return o
}

func (o Servicev1LoggingSftpArrayOutput) Index(i pulumi.IntInput) Servicev1LoggingSftpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1LoggingSftp {
		return vs[0].([]Servicev1LoggingSftp)[vs[1].(int)]
	}).(Servicev1LoggingSftpOutput)
}

type Servicev1Papertrail struct {
	// The address of the Papertrail endpoint
	Address string `pulumi:"address"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `formatVersion` of 2 are placed in `vclLog` and those with `formatVersion` of 1 are placed in `vclDeliver`
	Placement *string `pulumi:"placement"`
	// The port associated with the address where the Papertrail endpoint can be accessed
	Port int `pulumi:"port"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute
	ResponseCondition *string `pulumi:"responseCondition"`
}

// Servicev1PapertrailInput is an input type that accepts Servicev1PapertrailArgs and Servicev1PapertrailOutput values.
// You can construct a concrete instance of `Servicev1PapertrailInput` via:
//
//          Servicev1PapertrailArgs{...}
type Servicev1PapertrailInput interface {
	pulumi.Input

	ToServicev1PapertrailOutput() Servicev1PapertrailOutput
	ToServicev1PapertrailOutputWithContext(context.Context) Servicev1PapertrailOutput
}

type Servicev1PapertrailArgs struct {
	// The address of the Papertrail endpoint
	Address pulumi.StringInput `pulumi:"address"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `formatVersion` of 2 are placed in `vclLog` and those with `formatVersion` of 1 are placed in `vclDeliver`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port associated with the address where the Papertrail endpoint can be accessed
	Port pulumi.IntInput `pulumi:"port"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
}

func (Servicev1PapertrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Papertrail)(nil)).Elem()
}

func (i Servicev1PapertrailArgs) ToServicev1PapertrailOutput() Servicev1PapertrailOutput {
	return i.ToServicev1PapertrailOutputWithContext(context.Background())
}

func (i Servicev1PapertrailArgs) ToServicev1PapertrailOutputWithContext(ctx context.Context) Servicev1PapertrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PapertrailOutput)
}

// Servicev1PapertrailArrayInput is an input type that accepts Servicev1PapertrailArray and Servicev1PapertrailArrayOutput values.
// You can construct a concrete instance of `Servicev1PapertrailArrayInput` via:
//
//          Servicev1PapertrailArray{ Servicev1PapertrailArgs{...} }
type Servicev1PapertrailArrayInput interface {
	pulumi.Input

	ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput
	ToServicev1PapertrailArrayOutputWithContext(context.Context) Servicev1PapertrailArrayOutput
}

type Servicev1PapertrailArray []Servicev1PapertrailInput

func (Servicev1PapertrailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Papertrail)(nil)).Elem()
}

func (i Servicev1PapertrailArray) ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput {
	return i.ToServicev1PapertrailArrayOutputWithContext(context.Background())
}

func (i Servicev1PapertrailArray) ToServicev1PapertrailArrayOutputWithContext(ctx context.Context) Servicev1PapertrailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PapertrailArrayOutput)
}

type Servicev1PapertrailOutput struct{ *pulumi.OutputState }

func (Servicev1PapertrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Papertrail)(nil)).Elem()
}

func (o Servicev1PapertrailOutput) ToServicev1PapertrailOutput() Servicev1PapertrailOutput {
	return o
}

func (o Servicev1PapertrailOutput) ToServicev1PapertrailOutputWithContext(ctx context.Context) Servicev1PapertrailOutput {
	return o
}

// The address of the Papertrail endpoint
func (o Servicev1PapertrailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Papertrail) string { return v.Address }).(pulumi.StringOutput)
}

// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
func (o Servicev1PapertrailOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Papertrail) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`
func (o Servicev1PapertrailOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Papertrail) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1PapertrailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Papertrail) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. If not set, endpoints with `formatVersion` of 2 are placed in `vclLog` and those with `formatVersion` of 1 are placed in `vclDeliver`
func (o Servicev1PapertrailOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Papertrail) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port associated with the address where the Papertrail endpoint can be accessed
func (o Servicev1PapertrailOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v Servicev1Papertrail) int { return v.Port }).(pulumi.IntOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute
func (o Servicev1PapertrailOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Papertrail) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

type Servicev1PapertrailArrayOutput struct{ *pulumi.OutputState }

func (Servicev1PapertrailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Papertrail)(nil)).Elem()
}

func (o Servicev1PapertrailArrayOutput) ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput {
	return o
}

func (o Servicev1PapertrailArrayOutput) ToServicev1PapertrailArrayOutputWithContext(ctx context.Context) Servicev1PapertrailArrayOutput {
	return o
}

func (o Servicev1PapertrailArrayOutput) Index(i pulumi.IntInput) Servicev1PapertrailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Papertrail {
		return vs[0].([]Servicev1Papertrail)[vs[1].(int)]
	}).(Servicev1PapertrailOutput)
}

type Servicev1RequestSetting struct {
	// Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
	Action         *string `pulumi:"action"`
	BypassBusyWait *bool   `pulumi:"bypassBusyWait"`
	// Sets the host header
	DefaultHost *string `pulumi:"defaultHost"`
	// Force a cache miss for the request. If specified, can be `true` or `false`
	ForceMiss *bool `pulumi:"forceMiss"`
	// Forces the request to use SSL (Redirects a non-SSL request to SSL)
	ForceSsl *bool `pulumi:"forceSsl"`
	// Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers
	GeoHeaders *bool `pulumi:"geoHeaders"`
	// Comma separated list of varnish request object fields that should be in the hash key
	HashKeys    *string `pulumi:"hashKeys"`
	MaxStaleAge *int    `pulumi:"maxStaleAge"`
	// Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Name of already defined `condition` to determine if this request setting should be applied
	RequestCondition *string `pulumi:"requestCondition"`
	// Injects the X-Timer info into the request for viewing origin fetch durations
	TimerSupport *bool `pulumi:"timerSupport"`
	// X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
	Xff *string `pulumi:"xff"`
}

// Servicev1RequestSettingInput is an input type that accepts Servicev1RequestSettingArgs and Servicev1RequestSettingOutput values.
// You can construct a concrete instance of `Servicev1RequestSettingInput` via:
//
//          Servicev1RequestSettingArgs{...}
type Servicev1RequestSettingInput interface {
	pulumi.Input

	ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput
	ToServicev1RequestSettingOutputWithContext(context.Context) Servicev1RequestSettingOutput
}

type Servicev1RequestSettingArgs struct {
	// Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
	Action         pulumi.StringPtrInput `pulumi:"action"`
	BypassBusyWait pulumi.BoolPtrInput   `pulumi:"bypassBusyWait"`
	// Sets the host header
	DefaultHost pulumi.StringPtrInput `pulumi:"defaultHost"`
	// Force a cache miss for the request. If specified, can be `true` or `false`
	ForceMiss pulumi.BoolPtrInput `pulumi:"forceMiss"`
	// Forces the request to use SSL (Redirects a non-SSL request to SSL)
	ForceSsl pulumi.BoolPtrInput `pulumi:"forceSsl"`
	// Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers
	GeoHeaders pulumi.BoolPtrInput `pulumi:"geoHeaders"`
	// Comma separated list of varnish request object fields that should be in the hash key
	HashKeys    pulumi.StringPtrInput `pulumi:"hashKeys"`
	MaxStaleAge pulumi.IntPtrInput    `pulumi:"maxStaleAge"`
	// Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Name of already defined `condition` to determine if this request setting should be applied
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// Injects the X-Timer info into the request for viewing origin fetch durations
	TimerSupport pulumi.BoolPtrInput `pulumi:"timerSupport"`
	// X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
	Xff pulumi.StringPtrInput `pulumi:"xff"`
}

func (Servicev1RequestSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1RequestSetting)(nil)).Elem()
}

func (i Servicev1RequestSettingArgs) ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput {
	return i.ToServicev1RequestSettingOutputWithContext(context.Background())
}

func (i Servicev1RequestSettingArgs) ToServicev1RequestSettingOutputWithContext(ctx context.Context) Servicev1RequestSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1RequestSettingOutput)
}

// Servicev1RequestSettingArrayInput is an input type that accepts Servicev1RequestSettingArray and Servicev1RequestSettingArrayOutput values.
// You can construct a concrete instance of `Servicev1RequestSettingArrayInput` via:
//
//          Servicev1RequestSettingArray{ Servicev1RequestSettingArgs{...} }
type Servicev1RequestSettingArrayInput interface {
	pulumi.Input

	ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput
	ToServicev1RequestSettingArrayOutputWithContext(context.Context) Servicev1RequestSettingArrayOutput
}

type Servicev1RequestSettingArray []Servicev1RequestSettingInput

func (Servicev1RequestSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1RequestSetting)(nil)).Elem()
}

func (i Servicev1RequestSettingArray) ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput {
	return i.ToServicev1RequestSettingArrayOutputWithContext(context.Background())
}

func (i Servicev1RequestSettingArray) ToServicev1RequestSettingArrayOutputWithContext(ctx context.Context) Servicev1RequestSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1RequestSettingArrayOutput)
}

type Servicev1RequestSettingOutput struct{ *pulumi.OutputState }

func (Servicev1RequestSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1RequestSetting)(nil)).Elem()
}

func (o Servicev1RequestSettingOutput) ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput {
	return o
}

func (o Servicev1RequestSettingOutput) ToServicev1RequestSettingOutputWithContext(ctx context.Context) Servicev1RequestSettingOutput {
	return o
}

// Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
func (o Servicev1RequestSettingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o Servicev1RequestSettingOutput) BypassBusyWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.BypassBusyWait }).(pulumi.BoolPtrOutput)
}

// Sets the host header
func (o Servicev1RequestSettingOutput) DefaultHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.DefaultHost }).(pulumi.StringPtrOutput)
}

// Force a cache miss for the request. If specified, can be `true` or `false`
func (o Servicev1RequestSettingOutput) ForceMiss() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.ForceMiss }).(pulumi.BoolPtrOutput)
}

// Forces the request to use SSL (Redirects a non-SSL request to SSL)
func (o Servicev1RequestSettingOutput) ForceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.ForceSsl }).(pulumi.BoolPtrOutput)
}

// Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers
func (o Servicev1RequestSettingOutput) GeoHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.GeoHeaders }).(pulumi.BoolPtrOutput)
}

// Comma separated list of varnish request object fields that should be in the hash key
func (o Servicev1RequestSettingOutput) HashKeys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.HashKeys }).(pulumi.StringPtrOutput)
}

func (o Servicev1RequestSettingOutput) MaxStaleAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *int { return v.MaxStaleAge }).(pulumi.IntPtrOutput)
}

// Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1RequestSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) string { return v.Name }).(pulumi.StringOutput)
}

// Name of already defined `condition` to determine if this request setting should be applied
func (o Servicev1RequestSettingOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// Injects the X-Timer info into the request for viewing origin fetch durations
func (o Servicev1RequestSettingOutput) TimerSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *bool { return v.TimerSupport }).(pulumi.BoolPtrOutput)
}

// X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
func (o Servicev1RequestSettingOutput) Xff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1RequestSetting) *string { return v.Xff }).(pulumi.StringPtrOutput)
}

type Servicev1RequestSettingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1RequestSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1RequestSetting)(nil)).Elem()
}

func (o Servicev1RequestSettingArrayOutput) ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput {
	return o
}

func (o Servicev1RequestSettingArrayOutput) ToServicev1RequestSettingArrayOutputWithContext(ctx context.Context) Servicev1RequestSettingArrayOutput {
	return o
}

func (o Servicev1RequestSettingArrayOutput) Index(i pulumi.IntInput) Servicev1RequestSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1RequestSetting {
		return vs[0].([]Servicev1RequestSetting)[vs[1].(int)]
	}).(Servicev1RequestSettingOutput)
}

type Servicev1ResponseObject struct {
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	CacheCondition *string `pulumi:"cacheCondition"`
	// The content to deliver for the response object
	Content *string `pulumi:"content"`
	// The MIME type of the content
	ContentType *string `pulumi:"contentType"`
	// A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
	RequestCondition *string `pulumi:"requestCondition"`
	// The HTTP Response. Default `OK`
	Response *string `pulumi:"response"`
	// The HTTP Status Code. Default `200`
	Status *int `pulumi:"status"`
}

// Servicev1ResponseObjectInput is an input type that accepts Servicev1ResponseObjectArgs and Servicev1ResponseObjectOutput values.
// You can construct a concrete instance of `Servicev1ResponseObjectInput` via:
//
//          Servicev1ResponseObjectArgs{...}
type Servicev1ResponseObjectInput interface {
	pulumi.Input

	ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput
	ToServicev1ResponseObjectOutputWithContext(context.Context) Servicev1ResponseObjectOutput
}

type Servicev1ResponseObjectArgs struct {
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The content to deliver for the response object
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The MIME type of the content
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// The HTTP Response. Default `OK`
	Response pulumi.StringPtrInput `pulumi:"response"`
	// The HTTP Status Code. Default `200`
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (Servicev1ResponseObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1ResponseObject)(nil)).Elem()
}

func (i Servicev1ResponseObjectArgs) ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput {
	return i.ToServicev1ResponseObjectOutputWithContext(context.Background())
}

func (i Servicev1ResponseObjectArgs) ToServicev1ResponseObjectOutputWithContext(ctx context.Context) Servicev1ResponseObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ResponseObjectOutput)
}

// Servicev1ResponseObjectArrayInput is an input type that accepts Servicev1ResponseObjectArray and Servicev1ResponseObjectArrayOutput values.
// You can construct a concrete instance of `Servicev1ResponseObjectArrayInput` via:
//
//          Servicev1ResponseObjectArray{ Servicev1ResponseObjectArgs{...} }
type Servicev1ResponseObjectArrayInput interface {
	pulumi.Input

	ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput
	ToServicev1ResponseObjectArrayOutputWithContext(context.Context) Servicev1ResponseObjectArrayOutput
}

type Servicev1ResponseObjectArray []Servicev1ResponseObjectInput

func (Servicev1ResponseObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1ResponseObject)(nil)).Elem()
}

func (i Servicev1ResponseObjectArray) ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput {
	return i.ToServicev1ResponseObjectArrayOutputWithContext(context.Background())
}

func (i Servicev1ResponseObjectArray) ToServicev1ResponseObjectArrayOutputWithContext(ctx context.Context) Servicev1ResponseObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ResponseObjectArrayOutput)
}

type Servicev1ResponseObjectOutput struct{ *pulumi.OutputState }

func (Servicev1ResponseObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1ResponseObject)(nil)).Elem()
}

func (o Servicev1ResponseObjectOutput) ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput {
	return o
}

func (o Servicev1ResponseObjectOutput) ToServicev1ResponseObjectOutputWithContext(ctx context.Context) Servicev1ResponseObjectOutput {
	return o
}

// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o Servicev1ResponseObjectOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The content to deliver for the response object
func (o Servicev1ResponseObjectOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The MIME type of the content
func (o Servicev1ResponseObjectOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1ResponseObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) string { return v.Name }).(pulumi.StringOutput)
}

// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
func (o Servicev1ResponseObjectOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// The HTTP Response. Default `OK`
func (o Servicev1ResponseObjectOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *string { return v.Response }).(pulumi.StringPtrOutput)
}

// The HTTP Status Code. Default `200`
func (o Servicev1ResponseObjectOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1ResponseObject) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type Servicev1ResponseObjectArrayOutput struct{ *pulumi.OutputState }

func (Servicev1ResponseObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1ResponseObject)(nil)).Elem()
}

func (o Servicev1ResponseObjectArrayOutput) ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput {
	return o
}

func (o Servicev1ResponseObjectArrayOutput) ToServicev1ResponseObjectArrayOutputWithContext(ctx context.Context) Servicev1ResponseObjectArrayOutput {
	return o
}

func (o Servicev1ResponseObjectArrayOutput) Index(i pulumi.IntInput) Servicev1ResponseObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1ResponseObject {
		return vs[0].([]Servicev1ResponseObject)[vs[1].(int)]
	}).(Servicev1ResponseObjectOutput)
}

type Servicev1S3logging struct {
	// The name of the bucket in which to store the logs
	BucketName string `pulumi:"bucketName"`
	// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
	Domain *string `pulumi:"domain"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1).
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`
	Redundancy *string `pulumi:"redundancy"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition            *string `pulumi:"responseCondition"`
	S3AccessKey                  *string `pulumi:"s3AccessKey"`
	S3SecretKey                  *string `pulumi:"s3SecretKey"`
	ServerSideEncryption         *string `pulumi:"serverSideEncryption"`
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// Servicev1S3loggingInput is an input type that accepts Servicev1S3loggingArgs and Servicev1S3loggingOutput values.
// You can construct a concrete instance of `Servicev1S3loggingInput` via:
//
//          Servicev1S3loggingArgs{...}
type Servicev1S3loggingInput interface {
	pulumi.Input

	ToServicev1S3loggingOutput() Servicev1S3loggingOutput
	ToServicev1S3loggingOutputWithContext(context.Context) Servicev1S3loggingOutput
}

type Servicev1S3loggingArgs struct {
	// The name of the bucket in which to store the logs
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`
	Redundancy pulumi.StringPtrInput `pulumi:"redundancy"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition            pulumi.StringPtrInput `pulumi:"responseCondition"`
	S3AccessKey                  pulumi.StringPtrInput `pulumi:"s3AccessKey"`
	S3SecretKey                  pulumi.StringPtrInput `pulumi:"s3SecretKey"`
	ServerSideEncryption         pulumi.StringPtrInput `pulumi:"serverSideEncryption"`
	ServerSideEncryptionKmsKeyId pulumi.StringPtrInput `pulumi:"serverSideEncryptionKmsKeyId"`
	// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1S3loggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1S3logging)(nil)).Elem()
}

func (i Servicev1S3loggingArgs) ToServicev1S3loggingOutput() Servicev1S3loggingOutput {
	return i.ToServicev1S3loggingOutputWithContext(context.Background())
}

func (i Servicev1S3loggingArgs) ToServicev1S3loggingOutputWithContext(ctx context.Context) Servicev1S3loggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1S3loggingOutput)
}

// Servicev1S3loggingArrayInput is an input type that accepts Servicev1S3loggingArray and Servicev1S3loggingArrayOutput values.
// You can construct a concrete instance of `Servicev1S3loggingArrayInput` via:
//
//          Servicev1S3loggingArray{ Servicev1S3loggingArgs{...} }
type Servicev1S3loggingArrayInput interface {
	pulumi.Input

	ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput
	ToServicev1S3loggingArrayOutputWithContext(context.Context) Servicev1S3loggingArrayOutput
}

type Servicev1S3loggingArray []Servicev1S3loggingInput

func (Servicev1S3loggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1S3logging)(nil)).Elem()
}

func (i Servicev1S3loggingArray) ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput {
	return i.ToServicev1S3loggingArrayOutputWithContext(context.Background())
}

func (i Servicev1S3loggingArray) ToServicev1S3loggingArrayOutputWithContext(ctx context.Context) Servicev1S3loggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1S3loggingArrayOutput)
}

type Servicev1S3loggingOutput struct{ *pulumi.OutputState }

func (Servicev1S3loggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1S3logging)(nil)).Elem()
}

func (o Servicev1S3loggingOutput) ToServicev1S3loggingOutput() Servicev1S3loggingOutput {
	return o
}

func (o Servicev1S3loggingOutput) ToServicev1S3loggingOutputWithContext(ctx context.Context) Servicev1S3loggingOutput {
	return o
}

// The name of the bucket in which to store the logs
func (o Servicev1S3loggingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1S3logging) string { return v.BucketName }).(pulumi.StringOutput)
}

// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
func (o Servicev1S3loggingOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o Servicev1S3loggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1).
func (o Servicev1S3loggingOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression, from `0-9`. `0` is no compression. `1` is fastest and least compressed, `9` is slowest and most compressed. Default `0`
func (o Servicev1S3loggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
func (o Servicev1S3loggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1S3loggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1S3logging) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o Servicev1S3loggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds. Default `3600`
func (o Servicev1S3loggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1S3loggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o Servicev1S3loggingOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The S3 redundancy level. Should be formatted; one of: `standard`, `reducedRedundancy` or null. Default `null`
func (o Servicev1S3loggingOutput) Redundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.Redundancy }).(pulumi.StringPtrOutput)
}

// Name of blockAttributes condition to apply this logging.
func (o Servicev1S3loggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) S3AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.S3AccessKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) S3SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.S3SecretKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) ServerSideEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.ServerSideEncryption }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) ServerSideEncryptionKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.ServerSideEncryptionKmsKeyId }).(pulumi.StringPtrOutput)
}

// `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o Servicev1S3loggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1S3logging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1S3loggingArrayOutput struct{ *pulumi.OutputState }

func (Servicev1S3loggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1S3logging)(nil)).Elem()
}

func (o Servicev1S3loggingArrayOutput) ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput {
	return o
}

func (o Servicev1S3loggingArrayOutput) ToServicev1S3loggingArrayOutputWithContext(ctx context.Context) Servicev1S3loggingArrayOutput {
	return o
}

func (o Servicev1S3loggingArrayOutput) Index(i pulumi.IntInput) Servicev1S3loggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1S3logging {
		return vs[0].([]Servicev1S3logging)[vs[1].(int)]
	}).(Servicev1S3loggingOutput)
}

type Servicev1Snippet struct {
	// The VCL code that specifies exactly what the snippet does
	Content string `pulumi:"content"`
	// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
	Priority *int `pulumi:"priority"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
	Type string `pulumi:"type"`
}

// Servicev1SnippetInput is an input type that accepts Servicev1SnippetArgs and Servicev1SnippetOutput values.
// You can construct a concrete instance of `Servicev1SnippetInput` via:
//
//          Servicev1SnippetArgs{...}
type Servicev1SnippetInput interface {
	pulumi.Input

	ToServicev1SnippetOutput() Servicev1SnippetOutput
	ToServicev1SnippetOutputWithContext(context.Context) Servicev1SnippetOutput
}

type Servicev1SnippetArgs struct {
	// The VCL code that specifies exactly what the snippet does
	Content pulumi.StringInput `pulumi:"content"`
	// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1SnippetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Snippet)(nil)).Elem()
}

func (i Servicev1SnippetArgs) ToServicev1SnippetOutput() Servicev1SnippetOutput {
	return i.ToServicev1SnippetOutputWithContext(context.Background())
}

func (i Servicev1SnippetArgs) ToServicev1SnippetOutputWithContext(ctx context.Context) Servicev1SnippetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SnippetOutput)
}

// Servicev1SnippetArrayInput is an input type that accepts Servicev1SnippetArray and Servicev1SnippetArrayOutput values.
// You can construct a concrete instance of `Servicev1SnippetArrayInput` via:
//
//          Servicev1SnippetArray{ Servicev1SnippetArgs{...} }
type Servicev1SnippetArrayInput interface {
	pulumi.Input

	ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput
	ToServicev1SnippetArrayOutputWithContext(context.Context) Servicev1SnippetArrayOutput
}

type Servicev1SnippetArray []Servicev1SnippetInput

func (Servicev1SnippetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Snippet)(nil)).Elem()
}

func (i Servicev1SnippetArray) ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput {
	return i.ToServicev1SnippetArrayOutputWithContext(context.Background())
}

func (i Servicev1SnippetArray) ToServicev1SnippetArrayOutputWithContext(ctx context.Context) Servicev1SnippetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SnippetArrayOutput)
}

type Servicev1SnippetOutput struct{ *pulumi.OutputState }

func (Servicev1SnippetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Snippet)(nil)).Elem()
}

func (o Servicev1SnippetOutput) ToServicev1SnippetOutput() Servicev1SnippetOutput {
	return o
}

func (o Servicev1SnippetOutput) ToServicev1SnippetOutputWithContext(ctx context.Context) Servicev1SnippetOutput {
	return o
}

// The VCL code that specifies exactly what the snippet does
func (o Servicev1SnippetOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Snippet) string { return v.Content }).(pulumi.StringOutput)
}

// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1SnippetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Snippet) string { return v.Name }).(pulumi.StringOutput)
}

// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
func (o Servicev1SnippetOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Snippet) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
func (o Servicev1SnippetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Snippet) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1SnippetArrayOutput struct{ *pulumi.OutputState }

func (Servicev1SnippetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Snippet)(nil)).Elem()
}

func (o Servicev1SnippetArrayOutput) ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput {
	return o
}

func (o Servicev1SnippetArrayOutput) ToServicev1SnippetArrayOutputWithContext(ctx context.Context) Servicev1SnippetArrayOutput {
	return o
}

func (o Servicev1SnippetArrayOutput) Index(i pulumi.IntInput) Servicev1SnippetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Snippet {
		return vs[0].([]Servicev1Snippet)[vs[1].(int)]
	}).(Servicev1SnippetOutput)
}

type Servicev1Splunk struct {
	// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed
	Placement *string `pulumi:"placement"`
	// The name of the condition to apply
	ResponseCondition *string `pulumi:"responseCondition"`
	TlsCaCert         *string `pulumi:"tlsCaCert"`
	TlsClientCert     *string `pulumi:"tlsClientCert"`
	TlsClientKey      *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Splunk token to be used for authentication
	Token string `pulumi:"token"`
	// The Splunk URL to stream logs to
	Url string `pulumi:"url"`
}

// Servicev1SplunkInput is an input type that accepts Servicev1SplunkArgs and Servicev1SplunkOutput values.
// You can construct a concrete instance of `Servicev1SplunkInput` via:
//
//          Servicev1SplunkArgs{...}
type Servicev1SplunkInput interface {
	pulumi.Input

	ToServicev1SplunkOutput() Servicev1SplunkOutput
	ToServicev1SplunkOutputWithContext(context.Context) Servicev1SplunkOutput
}

type Servicev1SplunkArgs struct {
	// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of the condition to apply
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	TlsCaCert         pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert     pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey      pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Splunk token to be used for authentication
	Token pulumi.StringInput `pulumi:"token"`
	// The Splunk URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1SplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Splunk)(nil)).Elem()
}

func (i Servicev1SplunkArgs) ToServicev1SplunkOutput() Servicev1SplunkOutput {
	return i.ToServicev1SplunkOutputWithContext(context.Background())
}

func (i Servicev1SplunkArgs) ToServicev1SplunkOutputWithContext(ctx context.Context) Servicev1SplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SplunkOutput)
}

// Servicev1SplunkArrayInput is an input type that accepts Servicev1SplunkArray and Servicev1SplunkArrayOutput values.
// You can construct a concrete instance of `Servicev1SplunkArrayInput` via:
//
//          Servicev1SplunkArray{ Servicev1SplunkArgs{...} }
type Servicev1SplunkArrayInput interface {
	pulumi.Input

	ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput
	ToServicev1SplunkArrayOutputWithContext(context.Context) Servicev1SplunkArrayOutput
}

type Servicev1SplunkArray []Servicev1SplunkInput

func (Servicev1SplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Splunk)(nil)).Elem()
}

func (i Servicev1SplunkArray) ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput {
	return i.ToServicev1SplunkArrayOutputWithContext(context.Background())
}

func (i Servicev1SplunkArray) ToServicev1SplunkArrayOutputWithContext(ctx context.Context) Servicev1SplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SplunkArrayOutput)
}

type Servicev1SplunkOutput struct{ *pulumi.OutputState }

func (Servicev1SplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Splunk)(nil)).Elem()
}

func (o Servicev1SplunkOutput) ToServicev1SplunkOutput() Servicev1SplunkOutput {
	return o
}

func (o Servicev1SplunkOutput) ToServicev1SplunkOutputWithContext(ctx context.Context) Servicev1SplunkOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
func (o Servicev1SplunkOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
func (o Servicev1SplunkOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1SplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Splunk) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed
func (o Servicev1SplunkOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply
func (o Servicev1SplunkOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1SplunkOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1SplunkOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1SplunkOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
func (o Servicev1SplunkOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Splunk) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Splunk token to be used for authentication
func (o Servicev1SplunkOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Splunk) string { return v.Token }).(pulumi.StringOutput)
}

// The Splunk URL to stream logs to
func (o Servicev1SplunkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Splunk) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1SplunkArrayOutput struct{ *pulumi.OutputState }

func (Servicev1SplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Splunk)(nil)).Elem()
}

func (o Servicev1SplunkArrayOutput) ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput {
	return o
}

func (o Servicev1SplunkArrayOutput) ToServicev1SplunkArrayOutputWithContext(ctx context.Context) Servicev1SplunkArrayOutput {
	return o
}

func (o Servicev1SplunkArrayOutput) Index(i pulumi.IntInput) Servicev1SplunkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Splunk {
		return vs[0].([]Servicev1Splunk)[vs[1].(int)]
	}).(Servicev1SplunkOutput)
}

type Servicev1Sumologic struct {
	// Apache-style string or VCL variables to use for log formatting
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1)
	FormatVersion *int `pulumi:"formatVersion"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. See [Fastly's Documentation on Sumologic](https://developer.fastly.com/reference/api/logging/sumologic/)
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The URL to Sumologic collector endpoint
	Url string `pulumi:"url"`
}

// Servicev1SumologicInput is an input type that accepts Servicev1SumologicArgs and Servicev1SumologicOutput values.
// You can construct a concrete instance of `Servicev1SumologicInput` via:
//
//          Servicev1SumologicArgs{...}
type Servicev1SumologicInput interface {
	pulumi.Input

	ToServicev1SumologicOutput() Servicev1SumologicOutput
	ToServicev1SumologicOutputWithContext(context.Context) Servicev1SumologicOutput
}

type Servicev1SumologicArgs struct {
	// Apache-style string or VCL variables to use for log formatting
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. See [Fastly's Documentation on Sumologic](https://developer.fastly.com/reference/api/logging/sumologic/)
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The URL to Sumologic collector endpoint
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1SumologicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Sumologic)(nil)).Elem()
}

func (i Servicev1SumologicArgs) ToServicev1SumologicOutput() Servicev1SumologicOutput {
	return i.ToServicev1SumologicOutputWithContext(context.Background())
}

func (i Servicev1SumologicArgs) ToServicev1SumologicOutputWithContext(ctx context.Context) Servicev1SumologicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SumologicOutput)
}

// Servicev1SumologicArrayInput is an input type that accepts Servicev1SumologicArray and Servicev1SumologicArrayOutput values.
// You can construct a concrete instance of `Servicev1SumologicArrayInput` via:
//
//          Servicev1SumologicArray{ Servicev1SumologicArgs{...} }
type Servicev1SumologicArrayInput interface {
	pulumi.Input

	ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput
	ToServicev1SumologicArrayOutputWithContext(context.Context) Servicev1SumologicArrayOutput
}

type Servicev1SumologicArray []Servicev1SumologicInput

func (Servicev1SumologicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Sumologic)(nil)).Elem()
}

func (i Servicev1SumologicArray) ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput {
	return i.ToServicev1SumologicArrayOutputWithContext(context.Background())
}

func (i Servicev1SumologicArray) ToServicev1SumologicArrayOutputWithContext(ctx context.Context) Servicev1SumologicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SumologicArrayOutput)
}

type Servicev1SumologicOutput struct{ *pulumi.OutputState }

func (Servicev1SumologicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Sumologic)(nil)).Elem()
}

func (o Servicev1SumologicOutput) ToServicev1SumologicOutput() Servicev1SumologicOutput {
	return o
}

func (o Servicev1SumologicOutput) ToServicev1SumologicOutputWithContext(ctx context.Context) Servicev1SumologicOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting
func (o Servicev1SumologicOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 1)
func (o Servicev1SumologicOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`. See [Fastly's Documentation on Sumologic](https://developer.fastly.com/reference/api/logging/sumologic/)
func (o Servicev1SumologicOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1SumologicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Sumologic) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1SumologicOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// Name of blockAttributes condition to apply this logging.
func (o Servicev1SumologicOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Sumologic) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The URL to Sumologic collector endpoint
func (o Servicev1SumologicOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Sumologic) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1SumologicArrayOutput struct{ *pulumi.OutputState }

func (Servicev1SumologicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Sumologic)(nil)).Elem()
}

func (o Servicev1SumologicArrayOutput) ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput {
	return o
}

func (o Servicev1SumologicArrayOutput) ToServicev1SumologicArrayOutputWithContext(ctx context.Context) Servicev1SumologicArrayOutput {
	return o
}

func (o Servicev1SumologicArrayOutput) Index(i pulumi.IntInput) Servicev1SumologicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Sumologic {
		return vs[0].([]Servicev1Sumologic)[vs[1].(int)]
	}).(Servicev1SumologicOutput)
}

type Servicev1Syslog struct {
	// A hostname or IPv4 address of the Syslog endpoint
	Address string `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting
	Format *string `pulumi:"format"`
	// The version of the custom logging format. Can be either 1 or 2. (Default: 1)
	FormatVersion *int `pulumi:"formatVersion"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
	Port *int `pulumi:"port"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	TlsCaCert         *string `pulumi:"tlsCaCert"`
	TlsClientCert     *string `pulumi:"tlsClientCert"`
	TlsClientKey      *string `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname *string `pulumi:"tlsHostname"`
	// Whether to prepend each message with a specific token
	Token *string `pulumi:"token"`
	// Whether to use TLS for secure logging. Default `false`
	UseTls *bool `pulumi:"useTls"`
}

// Servicev1SyslogInput is an input type that accepts Servicev1SyslogArgs and Servicev1SyslogOutput values.
// You can construct a concrete instance of `Servicev1SyslogInput` via:
//
//          Servicev1SyslogArgs{...}
type Servicev1SyslogInput interface {
	pulumi.Input

	ToServicev1SyslogOutput() Servicev1SyslogOutput
	ToServicev1SyslogOutputWithContext(context.Context) Servicev1SyslogOutput
}

type Servicev1SyslogArgs struct {
	// A hostname or IPv4 address of the Syslog endpoint
	Address pulumi.StringInput `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format. Can be either 1 or 2. (Default: 1)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	TlsCaCert         pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert     pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey      pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// Whether to prepend each message with a specific token
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Whether to use TLS for secure logging. Default `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (Servicev1SyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Syslog)(nil)).Elem()
}

func (i Servicev1SyslogArgs) ToServicev1SyslogOutput() Servicev1SyslogOutput {
	return i.ToServicev1SyslogOutputWithContext(context.Background())
}

func (i Servicev1SyslogArgs) ToServicev1SyslogOutputWithContext(ctx context.Context) Servicev1SyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SyslogOutput)
}

// Servicev1SyslogArrayInput is an input type that accepts Servicev1SyslogArray and Servicev1SyslogArrayOutput values.
// You can construct a concrete instance of `Servicev1SyslogArrayInput` via:
//
//          Servicev1SyslogArray{ Servicev1SyslogArgs{...} }
type Servicev1SyslogArrayInput interface {
	pulumi.Input

	ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput
	ToServicev1SyslogArrayOutputWithContext(context.Context) Servicev1SyslogArrayOutput
}

type Servicev1SyslogArray []Servicev1SyslogInput

func (Servicev1SyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Syslog)(nil)).Elem()
}

func (i Servicev1SyslogArray) ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput {
	return i.ToServicev1SyslogArrayOutputWithContext(context.Background())
}

func (i Servicev1SyslogArray) ToServicev1SyslogArrayOutputWithContext(ctx context.Context) Servicev1SyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SyslogArrayOutput)
}

type Servicev1SyslogOutput struct{ *pulumi.OutputState }

func (Servicev1SyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Syslog)(nil)).Elem()
}

func (o Servicev1SyslogOutput) ToServicev1SyslogOutput() Servicev1SyslogOutput {
	return o
}

func (o Servicev1SyslogOutput) ToServicev1SyslogOutputWithContext(ctx context.Context) Servicev1SyslogOutput {
	return o
}

// A hostname or IPv4 address of the Syslog endpoint
func (o Servicev1SyslogOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Syslog) string { return v.Address }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting
func (o Servicev1SyslogOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format. Can be either 1 or 2. (Default: 1)
func (o Servicev1SyslogOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// How the message should be formatted; one of: `classic`, `loggly`, `logplex` or `blank`. Default `classic`
func (o Servicev1SyslogOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1SyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Syslog) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o Servicev1SyslogOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
func (o Servicev1SyslogOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of blockAttributes condition to apply this logging.
func (o Servicev1SyslogOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// Used during the TLS handshake to validate the certificate
func (o Servicev1SyslogOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// Whether to prepend each message with a specific token
func (o Servicev1SyslogOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Whether to use TLS for secure logging. Default `false`
func (o Servicev1SyslogOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Syslog) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type Servicev1SyslogArrayOutput struct{ *pulumi.OutputState }

func (Servicev1SyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Syslog)(nil)).Elem()
}

func (o Servicev1SyslogArrayOutput) ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput {
	return o
}

func (o Servicev1SyslogArrayOutput) ToServicev1SyslogArrayOutputWithContext(ctx context.Context) Servicev1SyslogArrayOutput {
	return o
}

func (o Servicev1SyslogArrayOutput) Index(i pulumi.IntInput) Servicev1SyslogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Syslog {
		return vs[0].([]Servicev1Syslog)[vs[1].(int)]
	}).(Servicev1SyslogOutput)
}

type Servicev1Vcl struct {
	// The custom VCL code to upload
	Content string `pulumi:"content"`
	// If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
	Main *bool `pulumi:"main"`
	// A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
}

// Servicev1VclInput is an input type that accepts Servicev1VclArgs and Servicev1VclOutput values.
// You can construct a concrete instance of `Servicev1VclInput` via:
//
//          Servicev1VclArgs{...}
type Servicev1VclInput interface {
	pulumi.Input

	ToServicev1VclOutput() Servicev1VclOutput
	ToServicev1VclOutputWithContext(context.Context) Servicev1VclOutput
}

type Servicev1VclArgs struct {
	// The custom VCL code to upload
	Content pulumi.StringInput `pulumi:"content"`
	// If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
	Main pulumi.BoolPtrInput `pulumi:"main"`
	// A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1VclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Vcl)(nil)).Elem()
}

func (i Servicev1VclArgs) ToServicev1VclOutput() Servicev1VclOutput {
	return i.ToServicev1VclOutputWithContext(context.Background())
}

func (i Servicev1VclArgs) ToServicev1VclOutputWithContext(ctx context.Context) Servicev1VclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1VclOutput)
}

// Servicev1VclArrayInput is an input type that accepts Servicev1VclArray and Servicev1VclArrayOutput values.
// You can construct a concrete instance of `Servicev1VclArrayInput` via:
//
//          Servicev1VclArray{ Servicev1VclArgs{...} }
type Servicev1VclArrayInput interface {
	pulumi.Input

	ToServicev1VclArrayOutput() Servicev1VclArrayOutput
	ToServicev1VclArrayOutputWithContext(context.Context) Servicev1VclArrayOutput
}

type Servicev1VclArray []Servicev1VclInput

func (Servicev1VclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Vcl)(nil)).Elem()
}

func (i Servicev1VclArray) ToServicev1VclArrayOutput() Servicev1VclArrayOutput {
	return i.ToServicev1VclArrayOutputWithContext(context.Background())
}

func (i Servicev1VclArray) ToServicev1VclArrayOutputWithContext(ctx context.Context) Servicev1VclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1VclArrayOutput)
}

type Servicev1VclOutput struct{ *pulumi.OutputState }

func (Servicev1VclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Vcl)(nil)).Elem()
}

func (o Servicev1VclOutput) ToServicev1VclOutput() Servicev1VclOutput {
	return o
}

func (o Servicev1VclOutput) ToServicev1VclOutputWithContext(ctx context.Context) Servicev1VclOutput {
	return o
}

// The custom VCL code to upload
func (o Servicev1VclOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Vcl) string { return v.Content }).(pulumi.StringOutput)
}

// If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
func (o Servicev1VclOutput) Main() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Vcl) *bool { return v.Main }).(pulumi.BoolPtrOutput)
}

// A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
func (o Servicev1VclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Vcl) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1VclArrayOutput struct{ *pulumi.OutputState }

func (Servicev1VclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Vcl)(nil)).Elem()
}

func (o Servicev1VclArrayOutput) ToServicev1VclArrayOutput() Servicev1VclArrayOutput {
	return o
}

func (o Servicev1VclArrayOutput) ToServicev1VclArrayOutputWithContext(ctx context.Context) Servicev1VclArrayOutput {
	return o
}

func (o Servicev1VclArrayOutput) Index(i pulumi.IntInput) Servicev1VclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1Vcl {
		return vs[0].([]Servicev1Vcl)[vs[1].(int)]
	}).(Servicev1VclOutput)
}

type Servicev1Waf struct {
	// A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
	Disabled *bool `pulumi:"disabled"`
	// The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	PrefetchCondition *string `pulumi:"prefetchCondition"`
	// The name of the response object used by the Web Application Firewall
	ResponseObject string `pulumi:"responseObject"`
	// The ID of the WAF
	WafId *string `pulumi:"wafId"`
}

// Servicev1WafInput is an input type that accepts Servicev1WafArgs and Servicev1WafOutput values.
// You can construct a concrete instance of `Servicev1WafInput` via:
//
//          Servicev1WafArgs{...}
type Servicev1WafInput interface {
	pulumi.Input

	ToServicev1WafOutput() Servicev1WafOutput
	ToServicev1WafOutputWithContext(context.Context) Servicev1WafOutput
}

type Servicev1WafArgs struct {
	// A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	PrefetchCondition pulumi.StringPtrInput `pulumi:"prefetchCondition"`
	// The name of the response object used by the Web Application Firewall
	ResponseObject pulumi.StringInput `pulumi:"responseObject"`
	// The ID of the WAF
	WafId pulumi.StringPtrInput `pulumi:"wafId"`
}

func (Servicev1WafArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Waf)(nil)).Elem()
}

func (i Servicev1WafArgs) ToServicev1WafOutput() Servicev1WafOutput {
	return i.ToServicev1WafOutputWithContext(context.Background())
}

func (i Servicev1WafArgs) ToServicev1WafOutputWithContext(ctx context.Context) Servicev1WafOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1WafOutput)
}

func (i Servicev1WafArgs) ToServicev1WafPtrOutput() Servicev1WafPtrOutput {
	return i.ToServicev1WafPtrOutputWithContext(context.Background())
}

func (i Servicev1WafArgs) ToServicev1WafPtrOutputWithContext(ctx context.Context) Servicev1WafPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1WafOutput).ToServicev1WafPtrOutputWithContext(ctx)
}

// Servicev1WafPtrInput is an input type that accepts Servicev1WafArgs, Servicev1WafPtr and Servicev1WafPtrOutput values.
// You can construct a concrete instance of `Servicev1WafPtrInput` via:
//
//          Servicev1WafArgs{...}
//
//  or:
//
//          nil
type Servicev1WafPtrInput interface {
	pulumi.Input

	ToServicev1WafPtrOutput() Servicev1WafPtrOutput
	ToServicev1WafPtrOutputWithContext(context.Context) Servicev1WafPtrOutput
}

type servicev1WafPtrType Servicev1WafArgs

func Servicev1WafPtr(v *Servicev1WafArgs) Servicev1WafPtrInput {
	return (*servicev1WafPtrType)(v)
}

func (*servicev1WafPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Servicev1Waf)(nil)).Elem()
}

func (i *servicev1WafPtrType) ToServicev1WafPtrOutput() Servicev1WafPtrOutput {
	return i.ToServicev1WafPtrOutputWithContext(context.Background())
}

func (i *servicev1WafPtrType) ToServicev1WafPtrOutputWithContext(ctx context.Context) Servicev1WafPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1WafPtrOutput)
}

type Servicev1WafOutput struct{ *pulumi.OutputState }

func (Servicev1WafOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Waf)(nil)).Elem()
}

func (o Servicev1WafOutput) ToServicev1WafOutput() Servicev1WafOutput {
	return o
}

func (o Servicev1WafOutput) ToServicev1WafOutputWithContext(ctx context.Context) Servicev1WafOutput {
	return o
}

func (o Servicev1WafOutput) ToServicev1WafPtrOutput() Servicev1WafPtrOutput {
	return o.ToServicev1WafPtrOutputWithContext(context.Background())
}

func (o Servicev1WafOutput) ToServicev1WafPtrOutputWithContext(ctx context.Context) Servicev1WafPtrOutput {
	return o.ApplyT(func(v Servicev1Waf) *Servicev1Waf {
		return &v
	}).(Servicev1WafPtrOutput)
}

// A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
func (o Servicev1WafOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Servicev1Waf) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o Servicev1WafOutput) PrefetchCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Waf) *string { return v.PrefetchCondition }).(pulumi.StringPtrOutput)
}

// The name of the response object used by the Web Application Firewall
func (o Servicev1WafOutput) ResponseObject() pulumi.StringOutput {
	return o.ApplyT(func(v Servicev1Waf) string { return v.ResponseObject }).(pulumi.StringOutput)
}

// The ID of the WAF
func (o Servicev1WafOutput) WafId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Servicev1Waf) *string { return v.WafId }).(pulumi.StringPtrOutput)
}

type Servicev1WafPtrOutput struct{ *pulumi.OutputState }

func (Servicev1WafPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Servicev1Waf)(nil)).Elem()
}

func (o Servicev1WafPtrOutput) ToServicev1WafPtrOutput() Servicev1WafPtrOutput {
	return o
}

func (o Servicev1WafPtrOutput) ToServicev1WafPtrOutputWithContext(ctx context.Context) Servicev1WafPtrOutput {
	return o
}

func (o Servicev1WafPtrOutput) Elem() Servicev1WafOutput {
	return o.ApplyT(func(v *Servicev1Waf) Servicev1Waf { return *v }).(Servicev1WafOutput)
}

// A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
func (o Servicev1WafPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Servicev1Waf) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o Servicev1WafPtrOutput) PrefetchCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Servicev1Waf) *string {
		if v == nil {
			return nil
		}
		return v.PrefetchCondition
	}).(pulumi.StringPtrOutput)
}

// The name of the response object used by the Web Application Firewall
func (o Servicev1WafPtrOutput) ResponseObject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Servicev1Waf) *string {
		if v == nil {
			return nil
		}
		return &v.ResponseObject
	}).(pulumi.StringPtrOutput)
}

// The ID of the WAF
func (o Servicev1WafPtrOutput) WafId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Servicev1Waf) *string {
		if v == nil {
			return nil
		}
		return v.WafId
	}).(pulumi.StringPtrOutput)
}

type GetWafRulesRule struct {
	// The rule's latest revision.
	LatestRevisionNumber int `pulumi:"latestRevisionNumber"`
	// The rule's modsecurity ID.
	ModsecRuleId int `pulumi:"modsecRuleId"`
	// The rule's type.
	Type string `pulumi:"type"`
}

// GetWafRulesRuleInput is an input type that accepts GetWafRulesRuleArgs and GetWafRulesRuleOutput values.
// You can construct a concrete instance of `GetWafRulesRuleInput` via:
//
//          GetWafRulesRuleArgs{...}
type GetWafRulesRuleInput interface {
	pulumi.Input

	ToGetWafRulesRuleOutput() GetWafRulesRuleOutput
	ToGetWafRulesRuleOutputWithContext(context.Context) GetWafRulesRuleOutput
}

type GetWafRulesRuleArgs struct {
	// The rule's latest revision.
	LatestRevisionNumber pulumi.IntInput `pulumi:"latestRevisionNumber"`
	// The rule's modsecurity ID.
	ModsecRuleId pulumi.IntInput `pulumi:"modsecRuleId"`
	// The rule's type.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetWafRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWafRulesRule)(nil)).Elem()
}

func (i GetWafRulesRuleArgs) ToGetWafRulesRuleOutput() GetWafRulesRuleOutput {
	return i.ToGetWafRulesRuleOutputWithContext(context.Background())
}

func (i GetWafRulesRuleArgs) ToGetWafRulesRuleOutputWithContext(ctx context.Context) GetWafRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWafRulesRuleOutput)
}

// GetWafRulesRuleArrayInput is an input type that accepts GetWafRulesRuleArray and GetWafRulesRuleArrayOutput values.
// You can construct a concrete instance of `GetWafRulesRuleArrayInput` via:
//
//          GetWafRulesRuleArray{ GetWafRulesRuleArgs{...} }
type GetWafRulesRuleArrayInput interface {
	pulumi.Input

	ToGetWafRulesRuleArrayOutput() GetWafRulesRuleArrayOutput
	ToGetWafRulesRuleArrayOutputWithContext(context.Context) GetWafRulesRuleArrayOutput
}

type GetWafRulesRuleArray []GetWafRulesRuleInput

func (GetWafRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWafRulesRule)(nil)).Elem()
}

func (i GetWafRulesRuleArray) ToGetWafRulesRuleArrayOutput() GetWafRulesRuleArrayOutput {
	return i.ToGetWafRulesRuleArrayOutputWithContext(context.Background())
}

func (i GetWafRulesRuleArray) ToGetWafRulesRuleArrayOutputWithContext(ctx context.Context) GetWafRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWafRulesRuleArrayOutput)
}

type GetWafRulesRuleOutput struct{ *pulumi.OutputState }

func (GetWafRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWafRulesRule)(nil)).Elem()
}

func (o GetWafRulesRuleOutput) ToGetWafRulesRuleOutput() GetWafRulesRuleOutput {
	return o
}

func (o GetWafRulesRuleOutput) ToGetWafRulesRuleOutputWithContext(ctx context.Context) GetWafRulesRuleOutput {
	return o
}

// The rule's latest revision.
func (o GetWafRulesRuleOutput) LatestRevisionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetWafRulesRule) int { return v.LatestRevisionNumber }).(pulumi.IntOutput)
}

// The rule's modsecurity ID.
func (o GetWafRulesRuleOutput) ModsecRuleId() pulumi.IntOutput {
	return o.ApplyT(func(v GetWafRulesRule) int { return v.ModsecRuleId }).(pulumi.IntOutput)
}

// The rule's type.
func (o GetWafRulesRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafRulesRule) string { return v.Type }).(pulumi.StringOutput)
}

type GetWafRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (GetWafRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWafRulesRule)(nil)).Elem()
}

func (o GetWafRulesRuleArrayOutput) ToGetWafRulesRuleArrayOutput() GetWafRulesRuleArrayOutput {
	return o
}

func (o GetWafRulesRuleArrayOutput) ToGetWafRulesRuleArrayOutputWithContext(ctx context.Context) GetWafRulesRuleArrayOutput {
	return o
}

func (o GetWafRulesRuleArrayOutput) Index(i pulumi.IntInput) GetWafRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWafRulesRule {
		return vs[0].([]GetWafRulesRule)[vs[1].(int)]
	}).(GetWafRulesRuleOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceACLEntriesv1EntryOutput{})
	pulumi.RegisterOutputType(ServiceACLEntriesv1EntryArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeBackendOutput{})
	pulumi.RegisterOutputType(ServiceComputeBackendArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeBigqueryloggingOutput{})
	pulumi.RegisterOutputType(ServiceComputeBigqueryloggingArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeBlobstorageloggingOutput{})
	pulumi.RegisterOutputType(ServiceComputeBlobstorageloggingArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeDictionaryOutput{})
	pulumi.RegisterOutputType(ServiceComputeDictionaryArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeDomainOutput{})
	pulumi.RegisterOutputType(ServiceComputeDomainArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeGcsloggingOutput{})
	pulumi.RegisterOutputType(ServiceComputeGcsloggingArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeHealthcheckOutput{})
	pulumi.RegisterOutputType(ServiceComputeHealthcheckArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeHttpsloggingOutput{})
	pulumi.RegisterOutputType(ServiceComputeHttpsloggingArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLogentryOutput{})
	pulumi.RegisterOutputType(ServiceComputeLogentryArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingCloudfileOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingCloudfileArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingDatadogOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingDatadogArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingDigitaloceanOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingDigitaloceanArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingElasticsearchOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingElasticsearchArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingFtpOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingFtpArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingGooglepubsubOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingGooglepubsubArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHerokuOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHerokuArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHoneycombOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHoneycombArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingKafkaOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingKafkaArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingKineseOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingKineseArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogglyOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogglyArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogshuttleOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogshuttleArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingNewrelicOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingNewrelicArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingOpenstackOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingOpenstackArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingScalyrOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingScalyrArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSftpOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSftpArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputePackageOutput{})
	pulumi.RegisterOutputType(ServiceComputePackagePtrOutput{})
	pulumi.RegisterOutputType(ServiceComputePapertrailOutput{})
	pulumi.RegisterOutputType(ServiceComputePapertrailArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeS3loggingOutput{})
	pulumi.RegisterOutputType(ServiceComputeS3loggingArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeSplunkOutput{})
	pulumi.RegisterOutputType(ServiceComputeSplunkArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeSumologicOutput{})
	pulumi.RegisterOutputType(ServiceComputeSumologicArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeSyslogOutput{})
	pulumi.RegisterOutputType(ServiceComputeSyslogArrayOutput{})
	pulumi.RegisterOutputType(ServiceWafConfigurationRuleOutput{})
	pulumi.RegisterOutputType(ServiceWafConfigurationRuleArrayOutput{})
	pulumi.RegisterOutputType(ServiceWafConfigurationRuleExclusionOutput{})
	pulumi.RegisterOutputType(ServiceWafConfigurationRuleExclusionArrayOutput{})
	pulumi.RegisterOutputType(Servicev1AclOutput{})
	pulumi.RegisterOutputType(Servicev1AclArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BackendOutput{})
	pulumi.RegisterOutputType(Servicev1BackendArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BigqueryloggingOutput{})
	pulumi.RegisterOutputType(Servicev1BigqueryloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BlobstorageloggingOutput{})
	pulumi.RegisterOutputType(Servicev1BlobstorageloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1CacheSettingOutput{})
	pulumi.RegisterOutputType(Servicev1CacheSettingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1ConditionOutput{})
	pulumi.RegisterOutputType(Servicev1ConditionArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DictionaryOutput{})
	pulumi.RegisterOutputType(Servicev1DictionaryArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DirectorOutput{})
	pulumi.RegisterOutputType(Servicev1DirectorArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DomainOutput{})
	pulumi.RegisterOutputType(Servicev1DomainArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DynamicsnippetOutput{})
	pulumi.RegisterOutputType(Servicev1DynamicsnippetArrayOutput{})
	pulumi.RegisterOutputType(Servicev1GcsloggingOutput{})
	pulumi.RegisterOutputType(Servicev1GcsloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1GzipOutput{})
	pulumi.RegisterOutputType(Servicev1GzipArrayOutput{})
	pulumi.RegisterOutputType(Servicev1HeaderOutput{})
	pulumi.RegisterOutputType(Servicev1HeaderArrayOutput{})
	pulumi.RegisterOutputType(Servicev1HealthcheckOutput{})
	pulumi.RegisterOutputType(Servicev1HealthcheckArrayOutput{})
	pulumi.RegisterOutputType(Servicev1HttpsloggingOutput{})
	pulumi.RegisterOutputType(Servicev1HttpsloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LogentryOutput{})
	pulumi.RegisterOutputType(Servicev1LogentryArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingCloudfileOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingCloudfileArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingDatadogOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingDatadogArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingDigitaloceanOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingDigitaloceanArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingElasticsearchOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingElasticsearchArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingFtpOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingFtpArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingGooglepubsubOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingGooglepubsubArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingHerokuOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingHerokuArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingHoneycombOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingHoneycombArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingKafkaOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingKafkaArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingKineseOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingKineseArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingLogglyOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingLogglyArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingLogshuttleOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingLogshuttleArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingNewrelicOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingNewrelicArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingOpenstackOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingOpenstackArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingScalyrOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingScalyrArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingSftpOutput{})
	pulumi.RegisterOutputType(Servicev1LoggingSftpArrayOutput{})
	pulumi.RegisterOutputType(Servicev1PapertrailOutput{})
	pulumi.RegisterOutputType(Servicev1PapertrailArrayOutput{})
	pulumi.RegisterOutputType(Servicev1RequestSettingOutput{})
	pulumi.RegisterOutputType(Servicev1RequestSettingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1ResponseObjectOutput{})
	pulumi.RegisterOutputType(Servicev1ResponseObjectArrayOutput{})
	pulumi.RegisterOutputType(Servicev1S3loggingOutput{})
	pulumi.RegisterOutputType(Servicev1S3loggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SnippetOutput{})
	pulumi.RegisterOutputType(Servicev1SnippetArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SplunkOutput{})
	pulumi.RegisterOutputType(Servicev1SplunkArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SumologicOutput{})
	pulumi.RegisterOutputType(Servicev1SumologicArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SyslogOutput{})
	pulumi.RegisterOutputType(Servicev1SyslogArrayOutput{})
	pulumi.RegisterOutputType(Servicev1VclOutput{})
	pulumi.RegisterOutputType(Servicev1VclArrayOutput{})
	pulumi.RegisterOutputType(Servicev1WafOutput{})
	pulumi.RegisterOutputType(Servicev1WafPtrOutput{})
	pulumi.RegisterOutputType(GetWafRulesRuleOutput{})
	pulumi.RegisterOutputType(GetWafRulesRuleArrayOutput{})
}
