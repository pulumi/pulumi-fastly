// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ServiceACLEntriesEntry struct {
	// A personal freeform descriptive note
	Comment *string `pulumi:"comment"`
	// The unique ID of the entry
	Id *string `pulumi:"id"`
	// An IP address that is the focus for the ACL
	Ip string `pulumi:"ip"`
	// A boolean that will negate the match if true
	Negated *bool `pulumi:"negated"`
	// An optional subnet mask applied to the IP address
	Subnet *string `pulumi:"subnet"`
}

// ServiceACLEntriesEntryInput is an input type that accepts ServiceACLEntriesEntryArgs and ServiceACLEntriesEntryOutput values.
// You can construct a concrete instance of `ServiceACLEntriesEntryInput` via:
//
//	ServiceACLEntriesEntryArgs{...}
type ServiceACLEntriesEntryInput interface {
	pulumi.Input

	ToServiceACLEntriesEntryOutput() ServiceACLEntriesEntryOutput
	ToServiceACLEntriesEntryOutputWithContext(context.Context) ServiceACLEntriesEntryOutput
}

type ServiceACLEntriesEntryArgs struct {
	// A personal freeform descriptive note
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The unique ID of the entry
	Id pulumi.StringPtrInput `pulumi:"id"`
	// An IP address that is the focus for the ACL
	Ip pulumi.StringInput `pulumi:"ip"`
	// A boolean that will negate the match if true
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	// An optional subnet mask applied to the IP address
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (ServiceACLEntriesEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesEntry)(nil)).Elem()
}

func (i ServiceACLEntriesEntryArgs) ToServiceACLEntriesEntryOutput() ServiceACLEntriesEntryOutput {
	return i.ToServiceACLEntriesEntryOutputWithContext(context.Background())
}

func (i ServiceACLEntriesEntryArgs) ToServiceACLEntriesEntryOutputWithContext(ctx context.Context) ServiceACLEntriesEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesEntryOutput)
}

// ServiceACLEntriesEntryArrayInput is an input type that accepts ServiceACLEntriesEntryArray and ServiceACLEntriesEntryArrayOutput values.
// You can construct a concrete instance of `ServiceACLEntriesEntryArrayInput` via:
//
//	ServiceACLEntriesEntryArray{ ServiceACLEntriesEntryArgs{...} }
type ServiceACLEntriesEntryArrayInput interface {
	pulumi.Input

	ToServiceACLEntriesEntryArrayOutput() ServiceACLEntriesEntryArrayOutput
	ToServiceACLEntriesEntryArrayOutputWithContext(context.Context) ServiceACLEntriesEntryArrayOutput
}

type ServiceACLEntriesEntryArray []ServiceACLEntriesEntryInput

func (ServiceACLEntriesEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesEntry)(nil)).Elem()
}

func (i ServiceACLEntriesEntryArray) ToServiceACLEntriesEntryArrayOutput() ServiceACLEntriesEntryArrayOutput {
	return i.ToServiceACLEntriesEntryArrayOutputWithContext(context.Background())
}

func (i ServiceACLEntriesEntryArray) ToServiceACLEntriesEntryArrayOutputWithContext(ctx context.Context) ServiceACLEntriesEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesEntryArrayOutput)
}

type ServiceACLEntriesEntryOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesEntry)(nil)).Elem()
}

func (o ServiceACLEntriesEntryOutput) ToServiceACLEntriesEntryOutput() ServiceACLEntriesEntryOutput {
	return o
}

func (o ServiceACLEntriesEntryOutput) ToServiceACLEntriesEntryOutputWithContext(ctx context.Context) ServiceACLEntriesEntryOutput {
	return o
}

// A personal freeform descriptive note
func (o ServiceACLEntriesEntryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesEntry) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The unique ID of the entry
func (o ServiceACLEntriesEntryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesEntry) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// An IP address that is the focus for the ACL
func (o ServiceACLEntriesEntryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceACLEntriesEntry) string { return v.Ip }).(pulumi.StringOutput)
}

// A boolean that will negate the match if true
func (o ServiceACLEntriesEntryOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesEntry) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

// An optional subnet mask applied to the IP address
func (o ServiceACLEntriesEntryOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesEntry) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type ServiceACLEntriesEntryArrayOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesEntry)(nil)).Elem()
}

func (o ServiceACLEntriesEntryArrayOutput) ToServiceACLEntriesEntryArrayOutput() ServiceACLEntriesEntryArrayOutput {
	return o
}

func (o ServiceACLEntriesEntryArrayOutput) ToServiceACLEntriesEntryArrayOutputWithContext(ctx context.Context) ServiceACLEntriesEntryArrayOutput {
	return o
}

func (o ServiceACLEntriesEntryArrayOutput) Index(i pulumi.IntInput) ServiceACLEntriesEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceACLEntriesEntry {
		return vs[0].([]ServiceACLEntriesEntry)[vs[1].(int)]
	}).(ServiceACLEntriesEntryOutput)
}

type ServiceComputeBackend struct {
	// An IPv4, hostname, or IPv6 address for the Backend
	Address string `pulumi:"address"`
	// How long to wait between bytes in milliseconds. Default `10000`
	BetweenBytesTimeout *int `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds. Default `1000`
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// How long to wait for the first bytes in milliseconds. Default `15000`
	FirstByteTimeout *int `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthcheck *string `pulumi:"healthcheck"`
	// How long in seconds to keep a persistent connection to the backend between requests.
	KeepaliveTime *int `pulumi:"keepaliveTime"`
	// Maximum number of connections for this Backend. Default `200`
	MaxConn *int `pulumi:"maxConn"`
	// Maximum allowed TLS version on SSL connections to this backend.
	MaxTlsVersion *string `pulumi:"maxTlsVersion"`
	// Minimum allowed TLS version on SSL connections to this backend.
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The hostname to override the Host header
	OverrideHost *string `pulumi:"overrideHost"`
	// The port number on which the Backend responds. Default `80`
	Port *int `pulumi:"port"`
	// Value that when shared across backends will enable those backends to share the same health check.
	ShareKey *string `pulumi:"shareKey"`
	// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
	Shield *string `pulumi:"shield"`
	// CA certificate attached to origin.
	SslCaCert *string `pulumi:"sslCaCert"`
	// Configure certificate validation. Does not affect SNI at all
	SslCertHostname *string `pulumi:"sslCertHostname"`
	// Be strict about checking SSL certs. Default `true`
	SslCheckCert *bool `pulumi:"sslCheckCert"`
	// Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
	SslCiphers *string `pulumi:"sslCiphers"`
	// Client certificate attached to origin. Used when connecting to the backend
	SslClientCert *string `pulumi:"sslClientCert"`
	// Client key attached to origin. Used when connecting to the backend
	SslClientKey *string `pulumi:"sslClientKey"`
	// Configure SNI in the TLS handshake. Does not affect cert validation at all
	SslSniHostname *string `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the Backend. Default `false`
	UseSsl *bool `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
	Weight *int `pulumi:"weight"`
}

// ServiceComputeBackendInput is an input type that accepts ServiceComputeBackendArgs and ServiceComputeBackendOutput values.
// You can construct a concrete instance of `ServiceComputeBackendInput` via:
//
//	ServiceComputeBackendArgs{...}
type ServiceComputeBackendInput interface {
	pulumi.Input

	ToServiceComputeBackendOutput() ServiceComputeBackendOutput
	ToServiceComputeBackendOutputWithContext(context.Context) ServiceComputeBackendOutput
}

type ServiceComputeBackendArgs struct {
	// An IPv4, hostname, or IPv6 address for the Backend
	Address pulumi.StringInput `pulumi:"address"`
	// How long to wait between bytes in milliseconds. Default `10000`
	BetweenBytesTimeout pulumi.IntPtrInput `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds. Default `1000`
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`
	ErrorThreshold pulumi.IntPtrInput `pulumi:"errorThreshold"`
	// How long to wait for the first bytes in milliseconds. Default `15000`
	FirstByteTimeout pulumi.IntPtrInput `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthcheck pulumi.StringPtrInput `pulumi:"healthcheck"`
	// How long in seconds to keep a persistent connection to the backend between requests.
	KeepaliveTime pulumi.IntPtrInput `pulumi:"keepaliveTime"`
	// Maximum number of connections for this Backend. Default `200`
	MaxConn pulumi.IntPtrInput `pulumi:"maxConn"`
	// Maximum allowed TLS version on SSL connections to this backend.
	MaxTlsVersion pulumi.StringPtrInput `pulumi:"maxTlsVersion"`
	// Minimum allowed TLS version on SSL connections to this backend.
	MinTlsVersion pulumi.StringPtrInput `pulumi:"minTlsVersion"`
	// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The hostname to override the Host header
	OverrideHost pulumi.StringPtrInput `pulumi:"overrideHost"`
	// The port number on which the Backend responds. Default `80`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Value that when shared across backends will enable those backends to share the same health check.
	ShareKey pulumi.StringPtrInput `pulumi:"shareKey"`
	// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
	Shield pulumi.StringPtrInput `pulumi:"shield"`
	// CA certificate attached to origin.
	SslCaCert pulumi.StringPtrInput `pulumi:"sslCaCert"`
	// Configure certificate validation. Does not affect SNI at all
	SslCertHostname pulumi.StringPtrInput `pulumi:"sslCertHostname"`
	// Be strict about checking SSL certs. Default `true`
	SslCheckCert pulumi.BoolPtrInput `pulumi:"sslCheckCert"`
	// Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
	SslCiphers pulumi.StringPtrInput `pulumi:"sslCiphers"`
	// Client certificate attached to origin. Used when connecting to the backend
	SslClientCert pulumi.StringPtrInput `pulumi:"sslClientCert"`
	// Client key attached to origin. Used when connecting to the backend
	SslClientKey pulumi.StringPtrInput `pulumi:"sslClientKey"`
	// Configure SNI in the TLS handshake. Does not affect cert validation at all
	SslSniHostname pulumi.StringPtrInput `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the Backend. Default `false`
	UseSsl pulumi.BoolPtrInput `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServiceComputeBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeBackend)(nil)).Elem()
}

func (i ServiceComputeBackendArgs) ToServiceComputeBackendOutput() ServiceComputeBackendOutput {
	return i.ToServiceComputeBackendOutputWithContext(context.Background())
}

func (i ServiceComputeBackendArgs) ToServiceComputeBackendOutputWithContext(ctx context.Context) ServiceComputeBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeBackendOutput)
}

// ServiceComputeBackendArrayInput is an input type that accepts ServiceComputeBackendArray and ServiceComputeBackendArrayOutput values.
// You can construct a concrete instance of `ServiceComputeBackendArrayInput` via:
//
//	ServiceComputeBackendArray{ ServiceComputeBackendArgs{...} }
type ServiceComputeBackendArrayInput interface {
	pulumi.Input

	ToServiceComputeBackendArrayOutput() ServiceComputeBackendArrayOutput
	ToServiceComputeBackendArrayOutputWithContext(context.Context) ServiceComputeBackendArrayOutput
}

type ServiceComputeBackendArray []ServiceComputeBackendInput

func (ServiceComputeBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeBackend)(nil)).Elem()
}

func (i ServiceComputeBackendArray) ToServiceComputeBackendArrayOutput() ServiceComputeBackendArrayOutput {
	return i.ToServiceComputeBackendArrayOutputWithContext(context.Background())
}

func (i ServiceComputeBackendArray) ToServiceComputeBackendArrayOutputWithContext(ctx context.Context) ServiceComputeBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeBackendArrayOutput)
}

type ServiceComputeBackendOutput struct{ *pulumi.OutputState }

func (ServiceComputeBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeBackend)(nil)).Elem()
}

func (o ServiceComputeBackendOutput) ToServiceComputeBackendOutput() ServiceComputeBackendOutput {
	return o
}

func (o ServiceComputeBackendOutput) ToServiceComputeBackendOutputWithContext(ctx context.Context) ServiceComputeBackendOutput {
	return o
}

// An IPv4, hostname, or IPv6 address for the Backend
func (o ServiceComputeBackendOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBackend) string { return v.Address }).(pulumi.StringOutput)
}

// How long to wait between bytes in milliseconds. Default `10000`
func (o ServiceComputeBackendOutput) BetweenBytesTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.BetweenBytesTimeout }).(pulumi.IntPtrOutput)
}

// How long to wait for a timeout in milliseconds. Default `1000`
func (o ServiceComputeBackendOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Number of errors to allow before the Backend is marked as down. Default `0`
func (o ServiceComputeBackendOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// How long to wait for the first bytes in milliseconds. Default `15000`
func (o ServiceComputeBackendOutput) FirstByteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.FirstByteTimeout }).(pulumi.IntPtrOutput)
}

// Name of a defined `healthcheck` to assign to this backend
func (o ServiceComputeBackendOutput) Healthcheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.Healthcheck }).(pulumi.StringPtrOutput)
}

// How long in seconds to keep a persistent connection to the backend between requests.
func (o ServiceComputeBackendOutput) KeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.KeepaliveTime }).(pulumi.IntPtrOutput)
}

// Maximum number of connections for this Backend. Default `200`
func (o ServiceComputeBackendOutput) MaxConn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.MaxConn }).(pulumi.IntPtrOutput)
}

// Maximum allowed TLS version on SSL connections to this backend.
func (o ServiceComputeBackendOutput) MaxTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.MaxTlsVersion }).(pulumi.StringPtrOutput)
}

// Minimum allowed TLS version on SSL connections to this backend.
func (o ServiceComputeBackendOutput) MinTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.MinTlsVersion }).(pulumi.StringPtrOutput)
}

// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeBackend) string { return v.Name }).(pulumi.StringOutput)
}

// The hostname to override the Host header
func (o ServiceComputeBackendOutput) OverrideHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.OverrideHost }).(pulumi.StringPtrOutput)
}

// The port number on which the Backend responds. Default `80`
func (o ServiceComputeBackendOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Value that when shared across backends will enable those backends to share the same health check.
func (o ServiceComputeBackendOutput) ShareKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.ShareKey }).(pulumi.StringPtrOutput)
}

// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
func (o ServiceComputeBackendOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

// CA certificate attached to origin.
func (o ServiceComputeBackendOutput) SslCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslCaCert }).(pulumi.StringPtrOutput)
}

// Configure certificate validation. Does not affect SNI at all
func (o ServiceComputeBackendOutput) SslCertHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslCertHostname }).(pulumi.StringPtrOutput)
}

// Be strict about checking SSL certs. Default `true`
func (o ServiceComputeBackendOutput) SslCheckCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *bool { return v.SslCheckCert }).(pulumi.BoolPtrOutput)
}

// Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
func (o ServiceComputeBackendOutput) SslCiphers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslCiphers }).(pulumi.StringPtrOutput)
}

// Client certificate attached to origin. Used when connecting to the backend
func (o ServiceComputeBackendOutput) SslClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslClientCert }).(pulumi.StringPtrOutput)
}

// Client key attached to origin. Used when connecting to the backend
func (o ServiceComputeBackendOutput) SslClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslClientKey }).(pulumi.StringPtrOutput)
}

// Configure SNI in the TLS handshake. Does not affect cert validation at all
func (o ServiceComputeBackendOutput) SslSniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *string { return v.SslSniHostname }).(pulumi.StringPtrOutput)
}

// Whether or not to use SSL to reach the Backend. Default `false`
func (o ServiceComputeBackendOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *bool { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
func (o ServiceComputeBackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeBackend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServiceComputeBackendArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeBackend)(nil)).Elem()
}

func (o ServiceComputeBackendArrayOutput) ToServiceComputeBackendArrayOutput() ServiceComputeBackendArrayOutput {
	return o
}

func (o ServiceComputeBackendArrayOutput) ToServiceComputeBackendArrayOutputWithContext(ctx context.Context) ServiceComputeBackendArrayOutput {
	return o
}

func (o ServiceComputeBackendArrayOutput) Index(i pulumi.IntInput) ServiceComputeBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeBackend {
		return vs[0].([]ServiceComputeBackend)[vs[1].(int)]
	}).(ServiceComputeBackendOutput)
}

type ServiceComputeDictionary struct {
	// The ID of the dictionary
	DictionaryId *string `pulumi:"dictionaryId"`
	// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
	Name      string `pulumi:"name"`
	WriteOnly *bool  `pulumi:"writeOnly"`
}

// ServiceComputeDictionaryInput is an input type that accepts ServiceComputeDictionaryArgs and ServiceComputeDictionaryOutput values.
// You can construct a concrete instance of `ServiceComputeDictionaryInput` via:
//
//	ServiceComputeDictionaryArgs{...}
type ServiceComputeDictionaryInput interface {
	pulumi.Input

	ToServiceComputeDictionaryOutput() ServiceComputeDictionaryOutput
	ToServiceComputeDictionaryOutputWithContext(context.Context) ServiceComputeDictionaryOutput
}

type ServiceComputeDictionaryArgs struct {
	// The ID of the dictionary
	DictionaryId pulumi.StringPtrInput `pulumi:"dictionaryId"`
	// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput `pulumi:"forceDestroy"`
	// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
	Name      pulumi.StringInput  `pulumi:"name"`
	WriteOnly pulumi.BoolPtrInput `pulumi:"writeOnly"`
}

func (ServiceComputeDictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeDictionary)(nil)).Elem()
}

func (i ServiceComputeDictionaryArgs) ToServiceComputeDictionaryOutput() ServiceComputeDictionaryOutput {
	return i.ToServiceComputeDictionaryOutputWithContext(context.Background())
}

func (i ServiceComputeDictionaryArgs) ToServiceComputeDictionaryOutputWithContext(ctx context.Context) ServiceComputeDictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeDictionaryOutput)
}

// ServiceComputeDictionaryArrayInput is an input type that accepts ServiceComputeDictionaryArray and ServiceComputeDictionaryArrayOutput values.
// You can construct a concrete instance of `ServiceComputeDictionaryArrayInput` via:
//
//	ServiceComputeDictionaryArray{ ServiceComputeDictionaryArgs{...} }
type ServiceComputeDictionaryArrayInput interface {
	pulumi.Input

	ToServiceComputeDictionaryArrayOutput() ServiceComputeDictionaryArrayOutput
	ToServiceComputeDictionaryArrayOutputWithContext(context.Context) ServiceComputeDictionaryArrayOutput
}

type ServiceComputeDictionaryArray []ServiceComputeDictionaryInput

func (ServiceComputeDictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeDictionary)(nil)).Elem()
}

func (i ServiceComputeDictionaryArray) ToServiceComputeDictionaryArrayOutput() ServiceComputeDictionaryArrayOutput {
	return i.ToServiceComputeDictionaryArrayOutputWithContext(context.Background())
}

func (i ServiceComputeDictionaryArray) ToServiceComputeDictionaryArrayOutputWithContext(ctx context.Context) ServiceComputeDictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeDictionaryArrayOutput)
}

type ServiceComputeDictionaryOutput struct{ *pulumi.OutputState }

func (ServiceComputeDictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeDictionary)(nil)).Elem()
}

func (o ServiceComputeDictionaryOutput) ToServiceComputeDictionaryOutput() ServiceComputeDictionaryOutput {
	return o
}

func (o ServiceComputeDictionaryOutput) ToServiceComputeDictionaryOutputWithContext(ctx context.Context) ServiceComputeDictionaryOutput {
	return o
}

// The ID of the dictionary
func (o ServiceComputeDictionaryOutput) DictionaryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeDictionary) *string { return v.DictionaryId }).(pulumi.StringPtrOutput)
}

// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
func (o ServiceComputeDictionaryOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeDictionary) *bool { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
func (o ServiceComputeDictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeDictionary) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceComputeDictionaryOutput) WriteOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeDictionary) *bool { return v.WriteOnly }).(pulumi.BoolPtrOutput)
}

type ServiceComputeDictionaryArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeDictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeDictionary)(nil)).Elem()
}

func (o ServiceComputeDictionaryArrayOutput) ToServiceComputeDictionaryArrayOutput() ServiceComputeDictionaryArrayOutput {
	return o
}

func (o ServiceComputeDictionaryArrayOutput) ToServiceComputeDictionaryArrayOutputWithContext(ctx context.Context) ServiceComputeDictionaryArrayOutput {
	return o
}

func (o ServiceComputeDictionaryArrayOutput) Index(i pulumi.IntInput) ServiceComputeDictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeDictionary {
		return vs[0].([]ServiceComputeDictionary)[vs[1].(int)]
	}).(ServiceComputeDictionaryOutput)
}

type ServiceComputeDomain struct {
	// An optional comment about the Domain.
	Comment *string `pulumi:"comment"`
	// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
	Name string `pulumi:"name"`
}

// ServiceComputeDomainInput is an input type that accepts ServiceComputeDomainArgs and ServiceComputeDomainOutput values.
// You can construct a concrete instance of `ServiceComputeDomainInput` via:
//
//	ServiceComputeDomainArgs{...}
type ServiceComputeDomainInput interface {
	pulumi.Input

	ToServiceComputeDomainOutput() ServiceComputeDomainOutput
	ToServiceComputeDomainOutputWithContext(context.Context) ServiceComputeDomainOutput
}

type ServiceComputeDomainArgs struct {
	// An optional comment about the Domain.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceComputeDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeDomain)(nil)).Elem()
}

func (i ServiceComputeDomainArgs) ToServiceComputeDomainOutput() ServiceComputeDomainOutput {
	return i.ToServiceComputeDomainOutputWithContext(context.Background())
}

func (i ServiceComputeDomainArgs) ToServiceComputeDomainOutputWithContext(ctx context.Context) ServiceComputeDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeDomainOutput)
}

// ServiceComputeDomainArrayInput is an input type that accepts ServiceComputeDomainArray and ServiceComputeDomainArrayOutput values.
// You can construct a concrete instance of `ServiceComputeDomainArrayInput` via:
//
//	ServiceComputeDomainArray{ ServiceComputeDomainArgs{...} }
type ServiceComputeDomainArrayInput interface {
	pulumi.Input

	ToServiceComputeDomainArrayOutput() ServiceComputeDomainArrayOutput
	ToServiceComputeDomainArrayOutputWithContext(context.Context) ServiceComputeDomainArrayOutput
}

type ServiceComputeDomainArray []ServiceComputeDomainInput

func (ServiceComputeDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeDomain)(nil)).Elem()
}

func (i ServiceComputeDomainArray) ToServiceComputeDomainArrayOutput() ServiceComputeDomainArrayOutput {
	return i.ToServiceComputeDomainArrayOutputWithContext(context.Background())
}

func (i ServiceComputeDomainArray) ToServiceComputeDomainArrayOutputWithContext(ctx context.Context) ServiceComputeDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeDomainArrayOutput)
}

type ServiceComputeDomainOutput struct{ *pulumi.OutputState }

func (ServiceComputeDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeDomain)(nil)).Elem()
}

func (o ServiceComputeDomainOutput) ToServiceComputeDomainOutput() ServiceComputeDomainOutput {
	return o
}

func (o ServiceComputeDomainOutput) ToServiceComputeDomainOutputWithContext(ctx context.Context) ServiceComputeDomainOutput {
	return o
}

// An optional comment about the Domain.
func (o ServiceComputeDomainOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeDomain) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
func (o ServiceComputeDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeDomain) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceComputeDomainArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeDomain)(nil)).Elem()
}

func (o ServiceComputeDomainArrayOutput) ToServiceComputeDomainArrayOutput() ServiceComputeDomainArrayOutput {
	return o
}

func (o ServiceComputeDomainArrayOutput) ToServiceComputeDomainArrayOutputWithContext(ctx context.Context) ServiceComputeDomainArrayOutput {
	return o
}

func (o ServiceComputeDomainArrayOutput) Index(i pulumi.IntInput) ServiceComputeDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeDomain {
		return vs[0].([]ServiceComputeDomain)[vs[1].(int)]
	}).(ServiceComputeDomainOutput)
}

type ServiceComputeLoggingBigquery struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName *string `pulumi:"accountName"`
	// The ID of your BigQuery dataset
	Dataset string `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
	Email string `pulumi:"email"`
	// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The ID of your GCP project
	ProjectId string `pulumi:"projectId"`
	// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
	SecretKey string `pulumi:"secretKey"`
	// The ID of your BigQuery table
	Table string `pulumi:"table"`
	// BigQuery table name suffix template
	Template *string `pulumi:"template"`
}

// ServiceComputeLoggingBigqueryInput is an input type that accepts ServiceComputeLoggingBigqueryArgs and ServiceComputeLoggingBigqueryOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingBigqueryInput` via:
//
//	ServiceComputeLoggingBigqueryArgs{...}
type ServiceComputeLoggingBigqueryInput interface {
	pulumi.Input

	ToServiceComputeLoggingBigqueryOutput() ServiceComputeLoggingBigqueryOutput
	ToServiceComputeLoggingBigqueryOutputWithContext(context.Context) ServiceComputeLoggingBigqueryOutput
}

type ServiceComputeLoggingBigqueryArgs struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// The ID of your BigQuery dataset
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
	Email pulumi.StringInput `pulumi:"email"`
	// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of your GCP project
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The ID of your BigQuery table
	Table pulumi.StringInput `pulumi:"table"`
	// BigQuery table name suffix template
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (ServiceComputeLoggingBigqueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingBigquery)(nil)).Elem()
}

func (i ServiceComputeLoggingBigqueryArgs) ToServiceComputeLoggingBigqueryOutput() ServiceComputeLoggingBigqueryOutput {
	return i.ToServiceComputeLoggingBigqueryOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingBigqueryArgs) ToServiceComputeLoggingBigqueryOutputWithContext(ctx context.Context) ServiceComputeLoggingBigqueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingBigqueryOutput)
}

// ServiceComputeLoggingBigqueryArrayInput is an input type that accepts ServiceComputeLoggingBigqueryArray and ServiceComputeLoggingBigqueryArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingBigqueryArrayInput` via:
//
//	ServiceComputeLoggingBigqueryArray{ ServiceComputeLoggingBigqueryArgs{...} }
type ServiceComputeLoggingBigqueryArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingBigqueryArrayOutput() ServiceComputeLoggingBigqueryArrayOutput
	ToServiceComputeLoggingBigqueryArrayOutputWithContext(context.Context) ServiceComputeLoggingBigqueryArrayOutput
}

type ServiceComputeLoggingBigqueryArray []ServiceComputeLoggingBigqueryInput

func (ServiceComputeLoggingBigqueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingBigquery)(nil)).Elem()
}

func (i ServiceComputeLoggingBigqueryArray) ToServiceComputeLoggingBigqueryArrayOutput() ServiceComputeLoggingBigqueryArrayOutput {
	return i.ToServiceComputeLoggingBigqueryArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingBigqueryArray) ToServiceComputeLoggingBigqueryArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingBigqueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingBigqueryArrayOutput)
}

type ServiceComputeLoggingBigqueryOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingBigqueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingBigquery)(nil)).Elem()
}

func (o ServiceComputeLoggingBigqueryOutput) ToServiceComputeLoggingBigqueryOutput() ServiceComputeLoggingBigqueryOutput {
	return o
}

func (o ServiceComputeLoggingBigqueryOutput) ToServiceComputeLoggingBigqueryOutputWithContext(ctx context.Context) ServiceComputeLoggingBigqueryOutput {
	return o
}

// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
func (o ServiceComputeLoggingBigqueryOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBigquery) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The ID of your BigQuery dataset
func (o ServiceComputeLoggingBigqueryOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBigquery) string { return v.Dataset }).(pulumi.StringOutput)
}

// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
func (o ServiceComputeLoggingBigqueryOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBigquery) string { return v.Email }).(pulumi.StringOutput)
}

// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingBigqueryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBigquery) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of your GCP project
func (o ServiceComputeLoggingBigqueryOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBigquery) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
func (o ServiceComputeLoggingBigqueryOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBigquery) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The ID of your BigQuery table
func (o ServiceComputeLoggingBigqueryOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBigquery) string { return v.Table }).(pulumi.StringOutput)
}

// BigQuery table name suffix template
func (o ServiceComputeLoggingBigqueryOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBigquery) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingBigqueryArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingBigqueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingBigquery)(nil)).Elem()
}

func (o ServiceComputeLoggingBigqueryArrayOutput) ToServiceComputeLoggingBigqueryArrayOutput() ServiceComputeLoggingBigqueryArrayOutput {
	return o
}

func (o ServiceComputeLoggingBigqueryArrayOutput) ToServiceComputeLoggingBigqueryArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingBigqueryArrayOutput {
	return o
}

func (o ServiceComputeLoggingBigqueryArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingBigqueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingBigquery {
		return vs[0].([]ServiceComputeLoggingBigquery)[vs[1].(int)]
	}).(ServiceComputeLoggingBigqueryOutput)
}

type ServiceComputeLoggingBlobstorage struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored
	AccountName string `pulumi:"accountName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// The name of the Azure Blob Storage container in which to store logs
	Container string `pulumi:"container"`
	// Maximum size of an uploaded log file, if non-zero.
	FileMaxBytes *int `pulumi:"fileMaxBytes"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
	SasToken string `pulumi:"sasToken"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceComputeLoggingBlobstorageInput is an input type that accepts ServiceComputeLoggingBlobstorageArgs and ServiceComputeLoggingBlobstorageOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingBlobstorageInput` via:
//
//	ServiceComputeLoggingBlobstorageArgs{...}
type ServiceComputeLoggingBlobstorageInput interface {
	pulumi.Input

	ToServiceComputeLoggingBlobstorageOutput() ServiceComputeLoggingBlobstorageOutput
	ToServiceComputeLoggingBlobstorageOutputWithContext(context.Context) ServiceComputeLoggingBlobstorageOutput
}

type ServiceComputeLoggingBlobstorageArgs struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// The name of the Azure Blob Storage container in which to store logs
	Container pulumi.StringInput `pulumi:"container"`
	// Maximum size of an uploaded log file, if non-zero.
	FileMaxBytes pulumi.IntPtrInput `pulumi:"fileMaxBytes"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
	SasToken pulumi.StringInput `pulumi:"sasToken"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceComputeLoggingBlobstorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingBlobstorage)(nil)).Elem()
}

func (i ServiceComputeLoggingBlobstorageArgs) ToServiceComputeLoggingBlobstorageOutput() ServiceComputeLoggingBlobstorageOutput {
	return i.ToServiceComputeLoggingBlobstorageOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingBlobstorageArgs) ToServiceComputeLoggingBlobstorageOutputWithContext(ctx context.Context) ServiceComputeLoggingBlobstorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingBlobstorageOutput)
}

// ServiceComputeLoggingBlobstorageArrayInput is an input type that accepts ServiceComputeLoggingBlobstorageArray and ServiceComputeLoggingBlobstorageArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingBlobstorageArrayInput` via:
//
//	ServiceComputeLoggingBlobstorageArray{ ServiceComputeLoggingBlobstorageArgs{...} }
type ServiceComputeLoggingBlobstorageArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingBlobstorageArrayOutput() ServiceComputeLoggingBlobstorageArrayOutput
	ToServiceComputeLoggingBlobstorageArrayOutputWithContext(context.Context) ServiceComputeLoggingBlobstorageArrayOutput
}

type ServiceComputeLoggingBlobstorageArray []ServiceComputeLoggingBlobstorageInput

func (ServiceComputeLoggingBlobstorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingBlobstorage)(nil)).Elem()
}

func (i ServiceComputeLoggingBlobstorageArray) ToServiceComputeLoggingBlobstorageArrayOutput() ServiceComputeLoggingBlobstorageArrayOutput {
	return i.ToServiceComputeLoggingBlobstorageArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingBlobstorageArray) ToServiceComputeLoggingBlobstorageArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingBlobstorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingBlobstorageArrayOutput)
}

type ServiceComputeLoggingBlobstorageOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingBlobstorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingBlobstorage)(nil)).Elem()
}

func (o ServiceComputeLoggingBlobstorageOutput) ToServiceComputeLoggingBlobstorageOutput() ServiceComputeLoggingBlobstorageOutput {
	return o
}

func (o ServiceComputeLoggingBlobstorageOutput) ToServiceComputeLoggingBlobstorageOutputWithContext(ctx context.Context) ServiceComputeLoggingBlobstorageOutput {
	return o
}

// The unique Azure Blob Storage namespace in which your data objects are stored
func (o ServiceComputeLoggingBlobstorageOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) string { return v.AccountName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceComputeLoggingBlobstorageOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// The name of the Azure Blob Storage container in which to store logs
func (o ServiceComputeLoggingBlobstorageOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) string { return v.Container }).(pulumi.StringOutput)
}

// Maximum size of an uploaded log file, if non-zero.
func (o ServiceComputeLoggingBlobstorageOutput) FileMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) *int { return v.FileMaxBytes }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeLoggingBlobstorageOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingBlobstorageOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingBlobstorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
func (o ServiceComputeLoggingBlobstorageOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred in seconds. Default `3600`
func (o ServiceComputeLoggingBlobstorageOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingBlobstorageOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
func (o ServiceComputeLoggingBlobstorageOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) string { return v.SasToken }).(pulumi.StringOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingBlobstorageOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingBlobstorage) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingBlobstorageArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingBlobstorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingBlobstorage)(nil)).Elem()
}

func (o ServiceComputeLoggingBlobstorageArrayOutput) ToServiceComputeLoggingBlobstorageArrayOutput() ServiceComputeLoggingBlobstorageArrayOutput {
	return o
}

func (o ServiceComputeLoggingBlobstorageArrayOutput) ToServiceComputeLoggingBlobstorageArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingBlobstorageArrayOutput {
	return o
}

func (o ServiceComputeLoggingBlobstorageArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingBlobstorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingBlobstorage {
		return vs[0].([]ServiceComputeLoggingBlobstorage)[vs[1].(int)]
	}).(ServiceComputeLoggingBlobstorageOutput)
}

type ServiceComputeLoggingCloudfile struct {
	// Your Cloud File account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of your Cloud Files container
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
	Region *string `pulumi:"region"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for your Cloud Files account
	User string `pulumi:"user"`
}

// ServiceComputeLoggingCloudfileInput is an input type that accepts ServiceComputeLoggingCloudfileArgs and ServiceComputeLoggingCloudfileOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingCloudfileInput` via:
//
//	ServiceComputeLoggingCloudfileArgs{...}
type ServiceComputeLoggingCloudfileInput interface {
	pulumi.Input

	ToServiceComputeLoggingCloudfileOutput() ServiceComputeLoggingCloudfileOutput
	ToServiceComputeLoggingCloudfileOutputWithContext(context.Context) ServiceComputeLoggingCloudfileOutput
}

type ServiceComputeLoggingCloudfileArgs struct {
	// Your Cloud File account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of your Cloud Files container
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for your Cloud Files account
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingCloudfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingCloudfile)(nil)).Elem()
}

func (i ServiceComputeLoggingCloudfileArgs) ToServiceComputeLoggingCloudfileOutput() ServiceComputeLoggingCloudfileOutput {
	return i.ToServiceComputeLoggingCloudfileOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingCloudfileArgs) ToServiceComputeLoggingCloudfileOutputWithContext(ctx context.Context) ServiceComputeLoggingCloudfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingCloudfileOutput)
}

// ServiceComputeLoggingCloudfileArrayInput is an input type that accepts ServiceComputeLoggingCloudfileArray and ServiceComputeLoggingCloudfileArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingCloudfileArrayInput` via:
//
//	ServiceComputeLoggingCloudfileArray{ ServiceComputeLoggingCloudfileArgs{...} }
type ServiceComputeLoggingCloudfileArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingCloudfileArrayOutput() ServiceComputeLoggingCloudfileArrayOutput
	ToServiceComputeLoggingCloudfileArrayOutputWithContext(context.Context) ServiceComputeLoggingCloudfileArrayOutput
}

type ServiceComputeLoggingCloudfileArray []ServiceComputeLoggingCloudfileInput

func (ServiceComputeLoggingCloudfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingCloudfile)(nil)).Elem()
}

func (i ServiceComputeLoggingCloudfileArray) ToServiceComputeLoggingCloudfileArrayOutput() ServiceComputeLoggingCloudfileArrayOutput {
	return i.ToServiceComputeLoggingCloudfileArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingCloudfileArray) ToServiceComputeLoggingCloudfileArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingCloudfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingCloudfileArrayOutput)
}

type ServiceComputeLoggingCloudfileOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingCloudfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingCloudfile)(nil)).Elem()
}

func (o ServiceComputeLoggingCloudfileOutput) ToServiceComputeLoggingCloudfileOutput() ServiceComputeLoggingCloudfileOutput {
	return o
}

func (o ServiceComputeLoggingCloudfileOutput) ToServiceComputeLoggingCloudfileOutputWithContext(ctx context.Context) ServiceComputeLoggingCloudfileOutput {
	return o
}

// Your Cloud File account access key
func (o ServiceComputeLoggingCloudfileOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of your Cloud Files container
func (o ServiceComputeLoggingCloudfileOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceComputeLoggingCloudfileOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeLoggingCloudfileOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingCloudfileOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingCloudfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to
func (o ServiceComputeLoggingCloudfileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceComputeLoggingCloudfileOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingCloudfileOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
func (o ServiceComputeLoggingCloudfileOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingCloudfileOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for your Cloud Files account
func (o ServiceComputeLoggingCloudfileOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingCloudfile) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingCloudfileArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingCloudfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingCloudfile)(nil)).Elem()
}

func (o ServiceComputeLoggingCloudfileArrayOutput) ToServiceComputeLoggingCloudfileArrayOutput() ServiceComputeLoggingCloudfileArrayOutput {
	return o
}

func (o ServiceComputeLoggingCloudfileArrayOutput) ToServiceComputeLoggingCloudfileArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingCloudfileArrayOutput {
	return o
}

func (o ServiceComputeLoggingCloudfileArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingCloudfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingCloudfile {
		return vs[0].([]ServiceComputeLoggingCloudfile)[vs[1].(int)]
	}).(ServiceComputeLoggingCloudfileOutput)
}

type ServiceComputeLoggingDatadog struct {
	// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region *string `pulumi:"region"`
	// The API key from your Datadog account
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingDatadogInput is an input type that accepts ServiceComputeLoggingDatadogArgs and ServiceComputeLoggingDatadogOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingDatadogInput` via:
//
//	ServiceComputeLoggingDatadogArgs{...}
type ServiceComputeLoggingDatadogInput interface {
	pulumi.Input

	ToServiceComputeLoggingDatadogOutput() ServiceComputeLoggingDatadogOutput
	ToServiceComputeLoggingDatadogOutputWithContext(context.Context) ServiceComputeLoggingDatadogOutput
}

type ServiceComputeLoggingDatadogArgs struct {
	// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The API key from your Datadog account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingDatadog)(nil)).Elem()
}

func (i ServiceComputeLoggingDatadogArgs) ToServiceComputeLoggingDatadogOutput() ServiceComputeLoggingDatadogOutput {
	return i.ToServiceComputeLoggingDatadogOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingDatadogArgs) ToServiceComputeLoggingDatadogOutputWithContext(ctx context.Context) ServiceComputeLoggingDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingDatadogOutput)
}

// ServiceComputeLoggingDatadogArrayInput is an input type that accepts ServiceComputeLoggingDatadogArray and ServiceComputeLoggingDatadogArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingDatadogArrayInput` via:
//
//	ServiceComputeLoggingDatadogArray{ ServiceComputeLoggingDatadogArgs{...} }
type ServiceComputeLoggingDatadogArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingDatadogArrayOutput() ServiceComputeLoggingDatadogArrayOutput
	ToServiceComputeLoggingDatadogArrayOutputWithContext(context.Context) ServiceComputeLoggingDatadogArrayOutput
}

type ServiceComputeLoggingDatadogArray []ServiceComputeLoggingDatadogInput

func (ServiceComputeLoggingDatadogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingDatadog)(nil)).Elem()
}

func (i ServiceComputeLoggingDatadogArray) ToServiceComputeLoggingDatadogArrayOutput() ServiceComputeLoggingDatadogArrayOutput {
	return i.ToServiceComputeLoggingDatadogArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingDatadogArray) ToServiceComputeLoggingDatadogArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingDatadogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingDatadogArrayOutput)
}

type ServiceComputeLoggingDatadogOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingDatadog)(nil)).Elem()
}

func (o ServiceComputeLoggingDatadogOutput) ToServiceComputeLoggingDatadogOutput() ServiceComputeLoggingDatadogOutput {
	return o
}

func (o ServiceComputeLoggingDatadogOutput) ToServiceComputeLoggingDatadogOutputWithContext(ctx context.Context) ServiceComputeLoggingDatadogOutput {
	return o
}

// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingDatadogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDatadog) string { return v.Name }).(pulumi.StringOutput)
}

// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
func (o ServiceComputeLoggingDatadogOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDatadog) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The API key from your Datadog account
func (o ServiceComputeLoggingDatadogOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDatadog) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingDatadogArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingDatadogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingDatadog)(nil)).Elem()
}

func (o ServiceComputeLoggingDatadogArrayOutput) ToServiceComputeLoggingDatadogArrayOutput() ServiceComputeLoggingDatadogArrayOutput {
	return o
}

func (o ServiceComputeLoggingDatadogArrayOutput) ToServiceComputeLoggingDatadogArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingDatadogArrayOutput {
	return o
}

func (o ServiceComputeLoggingDatadogArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingDatadogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingDatadog {
		return vs[0].([]ServiceComputeLoggingDatadog)[vs[1].(int)]
	}).(ServiceComputeLoggingDatadogOutput)
}

type ServiceComputeLoggingDigitalocean struct {
	// Your DigitalOcean Spaces account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of the DigitalOcean Space
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domain *string `pulumi:"domain"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// Your DigitalOcean Spaces account secret key
	SecretKey string `pulumi:"secretKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceComputeLoggingDigitaloceanInput is an input type that accepts ServiceComputeLoggingDigitaloceanArgs and ServiceComputeLoggingDigitaloceanOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingDigitaloceanInput` via:
//
//	ServiceComputeLoggingDigitaloceanArgs{...}
type ServiceComputeLoggingDigitaloceanInput interface {
	pulumi.Input

	ToServiceComputeLoggingDigitaloceanOutput() ServiceComputeLoggingDigitaloceanOutput
	ToServiceComputeLoggingDigitaloceanOutputWithContext(context.Context) ServiceComputeLoggingDigitaloceanOutput
}

type ServiceComputeLoggingDigitaloceanArgs struct {
	// Your DigitalOcean Spaces account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of the DigitalOcean Space
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// Your DigitalOcean Spaces account secret key
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceComputeLoggingDigitaloceanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingDigitalocean)(nil)).Elem()
}

func (i ServiceComputeLoggingDigitaloceanArgs) ToServiceComputeLoggingDigitaloceanOutput() ServiceComputeLoggingDigitaloceanOutput {
	return i.ToServiceComputeLoggingDigitaloceanOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingDigitaloceanArgs) ToServiceComputeLoggingDigitaloceanOutputWithContext(ctx context.Context) ServiceComputeLoggingDigitaloceanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingDigitaloceanOutput)
}

// ServiceComputeLoggingDigitaloceanArrayInput is an input type that accepts ServiceComputeLoggingDigitaloceanArray and ServiceComputeLoggingDigitaloceanArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingDigitaloceanArrayInput` via:
//
//	ServiceComputeLoggingDigitaloceanArray{ ServiceComputeLoggingDigitaloceanArgs{...} }
type ServiceComputeLoggingDigitaloceanArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingDigitaloceanArrayOutput() ServiceComputeLoggingDigitaloceanArrayOutput
	ToServiceComputeLoggingDigitaloceanArrayOutputWithContext(context.Context) ServiceComputeLoggingDigitaloceanArrayOutput
}

type ServiceComputeLoggingDigitaloceanArray []ServiceComputeLoggingDigitaloceanInput

func (ServiceComputeLoggingDigitaloceanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingDigitalocean)(nil)).Elem()
}

func (i ServiceComputeLoggingDigitaloceanArray) ToServiceComputeLoggingDigitaloceanArrayOutput() ServiceComputeLoggingDigitaloceanArrayOutput {
	return i.ToServiceComputeLoggingDigitaloceanArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingDigitaloceanArray) ToServiceComputeLoggingDigitaloceanArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingDigitaloceanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingDigitaloceanArrayOutput)
}

type ServiceComputeLoggingDigitaloceanOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingDigitaloceanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingDigitalocean)(nil)).Elem()
}

func (o ServiceComputeLoggingDigitaloceanOutput) ToServiceComputeLoggingDigitaloceanOutput() ServiceComputeLoggingDigitaloceanOutput {
	return o
}

func (o ServiceComputeLoggingDigitaloceanOutput) ToServiceComputeLoggingDigitaloceanOutputWithContext(ctx context.Context) ServiceComputeLoggingDigitaloceanOutput {
	return o
}

// Your DigitalOcean Spaces account access key
func (o ServiceComputeLoggingDigitaloceanOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of the DigitalOcean Space
func (o ServiceComputeLoggingDigitaloceanOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceComputeLoggingDigitaloceanOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
func (o ServiceComputeLoggingDigitaloceanOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeLoggingDigitaloceanOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingDigitaloceanOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingDigitaloceanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to
func (o ServiceComputeLoggingDigitaloceanOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceComputeLoggingDigitaloceanOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingDigitaloceanOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// Your DigitalOcean Spaces account secret key
func (o ServiceComputeLoggingDigitaloceanOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingDigitaloceanOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingDigitalocean) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingDigitaloceanArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingDigitaloceanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingDigitalocean)(nil)).Elem()
}

func (o ServiceComputeLoggingDigitaloceanArrayOutput) ToServiceComputeLoggingDigitaloceanArrayOutput() ServiceComputeLoggingDigitaloceanArrayOutput {
	return o
}

func (o ServiceComputeLoggingDigitaloceanArrayOutput) ToServiceComputeLoggingDigitaloceanArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingDigitaloceanArrayOutput {
	return o
}

func (o ServiceComputeLoggingDigitaloceanArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingDigitaloceanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingDigitalocean {
		return vs[0].([]ServiceComputeLoggingDigitalocean)[vs[1].(int)]
	}).(ServiceComputeLoggingDigitaloceanOutput)
}

type ServiceComputeLoggingElasticsearch struct {
	// The name of the Elasticsearch index to send documents (logs) to
	Index string `pulumi:"index"`
	// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// BasicAuth password for Elasticsearch
	Password *string `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
	Pipeline *string `pulumi:"pipeline"`
	// The maximum number of logs sent in one request. Defaults to `0` for unbounded
	RequestMaxBytes *int `pulumi:"requestMaxBytes"`
	// The maximum number of bytes sent in one request. Defaults to `0` for unbounded
	RequestMaxEntries *int `pulumi:"requestMaxEntries"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to
	Url string `pulumi:"url"`
	// BasicAuth username for Elasticsearch
	User *string `pulumi:"user"`
}

// ServiceComputeLoggingElasticsearchInput is an input type that accepts ServiceComputeLoggingElasticsearchArgs and ServiceComputeLoggingElasticsearchOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingElasticsearchInput` via:
//
//	ServiceComputeLoggingElasticsearchArgs{...}
type ServiceComputeLoggingElasticsearchInput interface {
	pulumi.Input

	ToServiceComputeLoggingElasticsearchOutput() ServiceComputeLoggingElasticsearchOutput
	ToServiceComputeLoggingElasticsearchOutputWithContext(context.Context) ServiceComputeLoggingElasticsearchOutput
}

type ServiceComputeLoggingElasticsearchArgs struct {
	// The name of the Elasticsearch index to send documents (logs) to
	Index pulumi.StringInput `pulumi:"index"`
	// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// BasicAuth password for Elasticsearch
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
	Pipeline pulumi.StringPtrInput `pulumi:"pipeline"`
	// The maximum number of logs sent in one request. Defaults to `0` for unbounded
	RequestMaxBytes pulumi.IntPtrInput `pulumi:"requestMaxBytes"`
	// The maximum number of bytes sent in one request. Defaults to `0` for unbounded
	RequestMaxEntries pulumi.IntPtrInput `pulumi:"requestMaxEntries"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
	// BasicAuth username for Elasticsearch
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceComputeLoggingElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingElasticsearch)(nil)).Elem()
}

func (i ServiceComputeLoggingElasticsearchArgs) ToServiceComputeLoggingElasticsearchOutput() ServiceComputeLoggingElasticsearchOutput {
	return i.ToServiceComputeLoggingElasticsearchOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingElasticsearchArgs) ToServiceComputeLoggingElasticsearchOutputWithContext(ctx context.Context) ServiceComputeLoggingElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingElasticsearchOutput)
}

// ServiceComputeLoggingElasticsearchArrayInput is an input type that accepts ServiceComputeLoggingElasticsearchArray and ServiceComputeLoggingElasticsearchArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingElasticsearchArrayInput` via:
//
//	ServiceComputeLoggingElasticsearchArray{ ServiceComputeLoggingElasticsearchArgs{...} }
type ServiceComputeLoggingElasticsearchArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingElasticsearchArrayOutput() ServiceComputeLoggingElasticsearchArrayOutput
	ToServiceComputeLoggingElasticsearchArrayOutputWithContext(context.Context) ServiceComputeLoggingElasticsearchArrayOutput
}

type ServiceComputeLoggingElasticsearchArray []ServiceComputeLoggingElasticsearchInput

func (ServiceComputeLoggingElasticsearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingElasticsearch)(nil)).Elem()
}

func (i ServiceComputeLoggingElasticsearchArray) ToServiceComputeLoggingElasticsearchArrayOutput() ServiceComputeLoggingElasticsearchArrayOutput {
	return i.ToServiceComputeLoggingElasticsearchArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingElasticsearchArray) ToServiceComputeLoggingElasticsearchArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingElasticsearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingElasticsearchArrayOutput)
}

type ServiceComputeLoggingElasticsearchOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingElasticsearch)(nil)).Elem()
}

func (o ServiceComputeLoggingElasticsearchOutput) ToServiceComputeLoggingElasticsearchOutput() ServiceComputeLoggingElasticsearchOutput {
	return o
}

func (o ServiceComputeLoggingElasticsearchOutput) ToServiceComputeLoggingElasticsearchOutputWithContext(ctx context.Context) ServiceComputeLoggingElasticsearchOutput {
	return o
}

// The name of the Elasticsearch index to send documents (logs) to
func (o ServiceComputeLoggingElasticsearchOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) string { return v.Index }).(pulumi.StringOutput)
}

// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingElasticsearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) string { return v.Name }).(pulumi.StringOutput)
}

// BasicAuth password for Elasticsearch
func (o ServiceComputeLoggingElasticsearchOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
func (o ServiceComputeLoggingElasticsearchOutput) Pipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.Pipeline }).(pulumi.StringPtrOutput)
}

// The maximum number of logs sent in one request. Defaults to `0` for unbounded
func (o ServiceComputeLoggingElasticsearchOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The maximum number of bytes sent in one request. Defaults to `0` for unbounded
func (o ServiceComputeLoggingElasticsearchOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format
func (o ServiceComputeLoggingElasticsearchOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format
func (o ServiceComputeLoggingElasticsearchOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format
func (o ServiceComputeLoggingElasticsearchOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
func (o ServiceComputeLoggingElasticsearchOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Elasticsearch URL to stream logs to
func (o ServiceComputeLoggingElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// BasicAuth username for Elasticsearch
func (o ServiceComputeLoggingElasticsearchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingElasticsearch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingElasticsearchArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingElasticsearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingElasticsearch)(nil)).Elem()
}

func (o ServiceComputeLoggingElasticsearchArrayOutput) ToServiceComputeLoggingElasticsearchArrayOutput() ServiceComputeLoggingElasticsearchArrayOutput {
	return o
}

func (o ServiceComputeLoggingElasticsearchArrayOutput) ToServiceComputeLoggingElasticsearchArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingElasticsearchArrayOutput {
	return o
}

func (o ServiceComputeLoggingElasticsearchArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingElasticsearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingElasticsearch {
		return vs[0].([]ServiceComputeLoggingElasticsearch)[vs[1].(int)]
	}).(ServiceComputeLoggingElasticsearchOutput)
}

type ServiceComputeLoggingFtp struct {
	// The FTP address to stream logs to
	Address string `pulumi:"address"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The password for the server (for anonymous use an email address)
	Password string `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default `3600`)
	Period *int `pulumi:"period"`
	// The port number. Default: `21`
	Port *int `pulumi:"port"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for the server (can be `anonymous`)
	User string `pulumi:"user"`
}

// ServiceComputeLoggingFtpInput is an input type that accepts ServiceComputeLoggingFtpArgs and ServiceComputeLoggingFtpOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingFtpInput` via:
//
//	ServiceComputeLoggingFtpArgs{...}
type ServiceComputeLoggingFtpInput interface {
	pulumi.Input

	ToServiceComputeLoggingFtpOutput() ServiceComputeLoggingFtpOutput
	ToServiceComputeLoggingFtpOutputWithContext(context.Context) ServiceComputeLoggingFtpOutput
}

type ServiceComputeLoggingFtpArgs struct {
	// The FTP address to stream logs to
	Address pulumi.StringInput `pulumi:"address"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server (for anonymous use an email address)
	Password pulumi.StringInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The port number. Default: `21`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for the server (can be `anonymous`)
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingFtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingFtp)(nil)).Elem()
}

func (i ServiceComputeLoggingFtpArgs) ToServiceComputeLoggingFtpOutput() ServiceComputeLoggingFtpOutput {
	return i.ToServiceComputeLoggingFtpOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingFtpArgs) ToServiceComputeLoggingFtpOutputWithContext(ctx context.Context) ServiceComputeLoggingFtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingFtpOutput)
}

// ServiceComputeLoggingFtpArrayInput is an input type that accepts ServiceComputeLoggingFtpArray and ServiceComputeLoggingFtpArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingFtpArrayInput` via:
//
//	ServiceComputeLoggingFtpArray{ ServiceComputeLoggingFtpArgs{...} }
type ServiceComputeLoggingFtpArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingFtpArrayOutput() ServiceComputeLoggingFtpArrayOutput
	ToServiceComputeLoggingFtpArrayOutputWithContext(context.Context) ServiceComputeLoggingFtpArrayOutput
}

type ServiceComputeLoggingFtpArray []ServiceComputeLoggingFtpInput

func (ServiceComputeLoggingFtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingFtp)(nil)).Elem()
}

func (i ServiceComputeLoggingFtpArray) ToServiceComputeLoggingFtpArrayOutput() ServiceComputeLoggingFtpArrayOutput {
	return i.ToServiceComputeLoggingFtpArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingFtpArray) ToServiceComputeLoggingFtpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingFtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingFtpArrayOutput)
}

type ServiceComputeLoggingFtpOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingFtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingFtp)(nil)).Elem()
}

func (o ServiceComputeLoggingFtpOutput) ToServiceComputeLoggingFtpOutput() ServiceComputeLoggingFtpOutput {
	return o
}

func (o ServiceComputeLoggingFtpOutput) ToServiceComputeLoggingFtpOutputWithContext(ctx context.Context) ServiceComputeLoggingFtpOutput {
	return o
}

// The FTP address to stream logs to
func (o ServiceComputeLoggingFtpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.Address }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceComputeLoggingFtpOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeLoggingFtpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingFtpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingFtpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server (for anonymous use an email address)
func (o ServiceComputeLoggingFtpOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.Password }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in `/` then it is treated as a directory
func (o ServiceComputeLoggingFtpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently the logs should be transferred, in seconds (Default `3600`)
func (o ServiceComputeLoggingFtpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The port number. Default: `21`
func (o ServiceComputeLoggingFtpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingFtpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingFtpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for the server (can be `anonymous`)
func (o ServiceComputeLoggingFtpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingFtp) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingFtpArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingFtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingFtp)(nil)).Elem()
}

func (o ServiceComputeLoggingFtpArrayOutput) ToServiceComputeLoggingFtpArrayOutput() ServiceComputeLoggingFtpArrayOutput {
	return o
}

func (o ServiceComputeLoggingFtpArrayOutput) ToServiceComputeLoggingFtpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingFtpArrayOutput {
	return o
}

func (o ServiceComputeLoggingFtpArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingFtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingFtp {
		return vs[0].([]ServiceComputeLoggingFtp)[vs[1].(int)]
	}).(ServiceComputeLoggingFtpOutput)
}

type ServiceComputeLoggingGc struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName *string `pulumi:"accountName"`
	// The name of the bucket in which to store the logs
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default 3600)
	Period *int `pulumi:"period"`
	// The ID of your Google Cloud Platform project
	ProjectId *string `pulumi:"projectId"`
	// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
	SecretKey *string `pulumi:"secretKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.
	User *string `pulumi:"user"`
}

// ServiceComputeLoggingGcInput is an input type that accepts ServiceComputeLoggingGcArgs and ServiceComputeLoggingGcOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingGcInput` via:
//
//	ServiceComputeLoggingGcArgs{...}
type ServiceComputeLoggingGcInput interface {
	pulumi.Input

	ToServiceComputeLoggingGcOutput() ServiceComputeLoggingGcOutput
	ToServiceComputeLoggingGcOutputWithContext(context.Context) ServiceComputeLoggingGcOutput
}

type ServiceComputeLoggingGcArgs struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// The name of the bucket in which to store the logs
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default 3600)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The ID of your Google Cloud Platform project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceComputeLoggingGcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingGc)(nil)).Elem()
}

func (i ServiceComputeLoggingGcArgs) ToServiceComputeLoggingGcOutput() ServiceComputeLoggingGcOutput {
	return i.ToServiceComputeLoggingGcOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingGcArgs) ToServiceComputeLoggingGcOutputWithContext(ctx context.Context) ServiceComputeLoggingGcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingGcOutput)
}

// ServiceComputeLoggingGcArrayInput is an input type that accepts ServiceComputeLoggingGcArray and ServiceComputeLoggingGcArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingGcArrayInput` via:
//
//	ServiceComputeLoggingGcArray{ ServiceComputeLoggingGcArgs{...} }
type ServiceComputeLoggingGcArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingGcArrayOutput() ServiceComputeLoggingGcArrayOutput
	ToServiceComputeLoggingGcArrayOutputWithContext(context.Context) ServiceComputeLoggingGcArrayOutput
}

type ServiceComputeLoggingGcArray []ServiceComputeLoggingGcInput

func (ServiceComputeLoggingGcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingGc)(nil)).Elem()
}

func (i ServiceComputeLoggingGcArray) ToServiceComputeLoggingGcArrayOutput() ServiceComputeLoggingGcArrayOutput {
	return i.ToServiceComputeLoggingGcArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingGcArray) ToServiceComputeLoggingGcArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingGcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingGcArrayOutput)
}

type ServiceComputeLoggingGcOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingGcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingGc)(nil)).Elem()
}

func (o ServiceComputeLoggingGcOutput) ToServiceComputeLoggingGcOutput() ServiceComputeLoggingGcOutput {
	return o
}

func (o ServiceComputeLoggingGcOutput) ToServiceComputeLoggingGcOutputWithContext(ctx context.Context) ServiceComputeLoggingGcOutput {
	return o
}

// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
func (o ServiceComputeLoggingGcOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The name of the bucket in which to store the logs
func (o ServiceComputeLoggingGcOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceComputeLoggingGcOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeLoggingGcOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingGcOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingGcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceComputeLoggingGcOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds (Default 3600)
func (o ServiceComputeLoggingGcOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The ID of your Google Cloud Platform project
func (o ServiceComputeLoggingGcOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
func (o ServiceComputeLoggingGcOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingGcOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.
func (o ServiceComputeLoggingGcOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGc) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingGcArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingGcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingGc)(nil)).Elem()
}

func (o ServiceComputeLoggingGcArrayOutput) ToServiceComputeLoggingGcArrayOutput() ServiceComputeLoggingGcArrayOutput {
	return o
}

func (o ServiceComputeLoggingGcArrayOutput) ToServiceComputeLoggingGcArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingGcArrayOutput {
	return o
}

func (o ServiceComputeLoggingGcArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingGcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingGc {
		return vs[0].([]ServiceComputeLoggingGc)[vs[1].(int)]
	}).(ServiceComputeLoggingGcOutput)
}

type ServiceComputeLoggingGooglepubsub struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName *string `pulumi:"accountName"`
	// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The ID of your Google Cloud Platform project
	ProjectId string `pulumi:"projectId"`
	// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
	SecretKey string `pulumi:"secretKey"`
	// The Google Cloud Pub/Sub topic to which logs will be published
	Topic string `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
	User string `pulumi:"user"`
}

// ServiceComputeLoggingGooglepubsubInput is an input type that accepts ServiceComputeLoggingGooglepubsubArgs and ServiceComputeLoggingGooglepubsubOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingGooglepubsubInput` via:
//
//	ServiceComputeLoggingGooglepubsubArgs{...}
type ServiceComputeLoggingGooglepubsubInput interface {
	pulumi.Input

	ToServiceComputeLoggingGooglepubsubOutput() ServiceComputeLoggingGooglepubsubOutput
	ToServiceComputeLoggingGooglepubsubOutputWithContext(context.Context) ServiceComputeLoggingGooglepubsubOutput
}

type ServiceComputeLoggingGooglepubsubArgs struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of your Google Cloud Platform project
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The Google Cloud Pub/Sub topic to which logs will be published
	Topic pulumi.StringInput `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingGooglepubsubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingGooglepubsub)(nil)).Elem()
}

func (i ServiceComputeLoggingGooglepubsubArgs) ToServiceComputeLoggingGooglepubsubOutput() ServiceComputeLoggingGooglepubsubOutput {
	return i.ToServiceComputeLoggingGooglepubsubOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingGooglepubsubArgs) ToServiceComputeLoggingGooglepubsubOutputWithContext(ctx context.Context) ServiceComputeLoggingGooglepubsubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingGooglepubsubOutput)
}

// ServiceComputeLoggingGooglepubsubArrayInput is an input type that accepts ServiceComputeLoggingGooglepubsubArray and ServiceComputeLoggingGooglepubsubArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingGooglepubsubArrayInput` via:
//
//	ServiceComputeLoggingGooglepubsubArray{ ServiceComputeLoggingGooglepubsubArgs{...} }
type ServiceComputeLoggingGooglepubsubArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingGooglepubsubArrayOutput() ServiceComputeLoggingGooglepubsubArrayOutput
	ToServiceComputeLoggingGooglepubsubArrayOutputWithContext(context.Context) ServiceComputeLoggingGooglepubsubArrayOutput
}

type ServiceComputeLoggingGooglepubsubArray []ServiceComputeLoggingGooglepubsubInput

func (ServiceComputeLoggingGooglepubsubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingGooglepubsub)(nil)).Elem()
}

func (i ServiceComputeLoggingGooglepubsubArray) ToServiceComputeLoggingGooglepubsubArrayOutput() ServiceComputeLoggingGooglepubsubArrayOutput {
	return i.ToServiceComputeLoggingGooglepubsubArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingGooglepubsubArray) ToServiceComputeLoggingGooglepubsubArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingGooglepubsubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingGooglepubsubArrayOutput)
}

type ServiceComputeLoggingGooglepubsubOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingGooglepubsubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingGooglepubsub)(nil)).Elem()
}

func (o ServiceComputeLoggingGooglepubsubOutput) ToServiceComputeLoggingGooglepubsubOutput() ServiceComputeLoggingGooglepubsubOutput {
	return o
}

func (o ServiceComputeLoggingGooglepubsubOutput) ToServiceComputeLoggingGooglepubsubOutputWithContext(ctx context.Context) ServiceComputeLoggingGooglepubsubOutput {
	return o
}

// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
func (o ServiceComputeLoggingGooglepubsubOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingGooglepubsubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of your Google Cloud Platform project
func (o ServiceComputeLoggingGooglepubsubOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
func (o ServiceComputeLoggingGooglepubsubOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The Google Cloud Pub/Sub topic to which logs will be published
func (o ServiceComputeLoggingGooglepubsubOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.Topic }).(pulumi.StringOutput)
}

// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
func (o ServiceComputeLoggingGooglepubsubOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingGooglepubsub) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingGooglepubsubArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingGooglepubsubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingGooglepubsub)(nil)).Elem()
}

func (o ServiceComputeLoggingGooglepubsubArrayOutput) ToServiceComputeLoggingGooglepubsubArrayOutput() ServiceComputeLoggingGooglepubsubArrayOutput {
	return o
}

func (o ServiceComputeLoggingGooglepubsubArrayOutput) ToServiceComputeLoggingGooglepubsubArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingGooglepubsubArrayOutput {
	return o
}

func (o ServiceComputeLoggingGooglepubsubArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingGooglepubsubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingGooglepubsub {
		return vs[0].([]ServiceComputeLoggingGooglepubsub)[vs[1].(int)]
	}).(ServiceComputeLoggingGooglepubsubOutput)
}

type ServiceComputeLoggingHeroku struct {
	// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
	Token string `pulumi:"token"`
	// The URL to stream logs to
	Url string `pulumi:"url"`
}

// ServiceComputeLoggingHerokuInput is an input type that accepts ServiceComputeLoggingHerokuArgs and ServiceComputeLoggingHerokuOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHerokuInput` via:
//
//	ServiceComputeLoggingHerokuArgs{...}
type ServiceComputeLoggingHerokuInput interface {
	pulumi.Input

	ToServiceComputeLoggingHerokuOutput() ServiceComputeLoggingHerokuOutput
	ToServiceComputeLoggingHerokuOutputWithContext(context.Context) ServiceComputeLoggingHerokuOutput
}

type ServiceComputeLoggingHerokuArgs struct {
	// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
	Token pulumi.StringInput `pulumi:"token"`
	// The URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeLoggingHerokuArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHeroku)(nil)).Elem()
}

func (i ServiceComputeLoggingHerokuArgs) ToServiceComputeLoggingHerokuOutput() ServiceComputeLoggingHerokuOutput {
	return i.ToServiceComputeLoggingHerokuOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHerokuArgs) ToServiceComputeLoggingHerokuOutputWithContext(ctx context.Context) ServiceComputeLoggingHerokuOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHerokuOutput)
}

// ServiceComputeLoggingHerokuArrayInput is an input type that accepts ServiceComputeLoggingHerokuArray and ServiceComputeLoggingHerokuArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHerokuArrayInput` via:
//
//	ServiceComputeLoggingHerokuArray{ ServiceComputeLoggingHerokuArgs{...} }
type ServiceComputeLoggingHerokuArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingHerokuArrayOutput() ServiceComputeLoggingHerokuArrayOutput
	ToServiceComputeLoggingHerokuArrayOutputWithContext(context.Context) ServiceComputeLoggingHerokuArrayOutput
}

type ServiceComputeLoggingHerokuArray []ServiceComputeLoggingHerokuInput

func (ServiceComputeLoggingHerokuArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHeroku)(nil)).Elem()
}

func (i ServiceComputeLoggingHerokuArray) ToServiceComputeLoggingHerokuArrayOutput() ServiceComputeLoggingHerokuArrayOutput {
	return i.ToServiceComputeLoggingHerokuArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHerokuArray) ToServiceComputeLoggingHerokuArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHerokuArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHerokuArrayOutput)
}

type ServiceComputeLoggingHerokuOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHerokuOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHeroku)(nil)).Elem()
}

func (o ServiceComputeLoggingHerokuOutput) ToServiceComputeLoggingHerokuOutput() ServiceComputeLoggingHerokuOutput {
	return o
}

func (o ServiceComputeLoggingHerokuOutput) ToServiceComputeLoggingHerokuOutputWithContext(ctx context.Context) ServiceComputeLoggingHerokuOutput {
	return o
}

// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingHerokuOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHeroku) string { return v.Name }).(pulumi.StringOutput)
}

// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
func (o ServiceComputeLoggingHerokuOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHeroku) string { return v.Token }).(pulumi.StringOutput)
}

// The URL to stream logs to
func (o ServiceComputeLoggingHerokuOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHeroku) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeLoggingHerokuArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHerokuArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHeroku)(nil)).Elem()
}

func (o ServiceComputeLoggingHerokuArrayOutput) ToServiceComputeLoggingHerokuArrayOutput() ServiceComputeLoggingHerokuArrayOutput {
	return o
}

func (o ServiceComputeLoggingHerokuArrayOutput) ToServiceComputeLoggingHerokuArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHerokuArrayOutput {
	return o
}

func (o ServiceComputeLoggingHerokuArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingHerokuOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingHeroku {
		return vs[0].([]ServiceComputeLoggingHeroku)[vs[1].(int)]
	}).(ServiceComputeLoggingHerokuOutput)
}

type ServiceComputeLoggingHoneycomb struct {
	// The Honeycomb Dataset you want to log to
	Dataset string `pulumi:"dataset"`
	// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The Write Key from the Account page of your Honeycomb account
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingHoneycombInput is an input type that accepts ServiceComputeLoggingHoneycombArgs and ServiceComputeLoggingHoneycombOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHoneycombInput` via:
//
//	ServiceComputeLoggingHoneycombArgs{...}
type ServiceComputeLoggingHoneycombInput interface {
	pulumi.Input

	ToServiceComputeLoggingHoneycombOutput() ServiceComputeLoggingHoneycombOutput
	ToServiceComputeLoggingHoneycombOutputWithContext(context.Context) ServiceComputeLoggingHoneycombOutput
}

type ServiceComputeLoggingHoneycombArgs struct {
	// The Honeycomb Dataset you want to log to
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The Write Key from the Account page of your Honeycomb account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingHoneycombArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHoneycomb)(nil)).Elem()
}

func (i ServiceComputeLoggingHoneycombArgs) ToServiceComputeLoggingHoneycombOutput() ServiceComputeLoggingHoneycombOutput {
	return i.ToServiceComputeLoggingHoneycombOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHoneycombArgs) ToServiceComputeLoggingHoneycombOutputWithContext(ctx context.Context) ServiceComputeLoggingHoneycombOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHoneycombOutput)
}

// ServiceComputeLoggingHoneycombArrayInput is an input type that accepts ServiceComputeLoggingHoneycombArray and ServiceComputeLoggingHoneycombArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHoneycombArrayInput` via:
//
//	ServiceComputeLoggingHoneycombArray{ ServiceComputeLoggingHoneycombArgs{...} }
type ServiceComputeLoggingHoneycombArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingHoneycombArrayOutput() ServiceComputeLoggingHoneycombArrayOutput
	ToServiceComputeLoggingHoneycombArrayOutputWithContext(context.Context) ServiceComputeLoggingHoneycombArrayOutput
}

type ServiceComputeLoggingHoneycombArray []ServiceComputeLoggingHoneycombInput

func (ServiceComputeLoggingHoneycombArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHoneycomb)(nil)).Elem()
}

func (i ServiceComputeLoggingHoneycombArray) ToServiceComputeLoggingHoneycombArrayOutput() ServiceComputeLoggingHoneycombArrayOutput {
	return i.ToServiceComputeLoggingHoneycombArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHoneycombArray) ToServiceComputeLoggingHoneycombArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHoneycombArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHoneycombArrayOutput)
}

type ServiceComputeLoggingHoneycombOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHoneycombOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHoneycomb)(nil)).Elem()
}

func (o ServiceComputeLoggingHoneycombOutput) ToServiceComputeLoggingHoneycombOutput() ServiceComputeLoggingHoneycombOutput {
	return o
}

func (o ServiceComputeLoggingHoneycombOutput) ToServiceComputeLoggingHoneycombOutputWithContext(ctx context.Context) ServiceComputeLoggingHoneycombOutput {
	return o
}

// The Honeycomb Dataset you want to log to
func (o ServiceComputeLoggingHoneycombOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHoneycomb) string { return v.Dataset }).(pulumi.StringOutput)
}

// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingHoneycombOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHoneycomb) string { return v.Name }).(pulumi.StringOutput)
}

// The Write Key from the Account page of your Honeycomb account
func (o ServiceComputeLoggingHoneycombOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHoneycomb) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingHoneycombArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHoneycombArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHoneycomb)(nil)).Elem()
}

func (o ServiceComputeLoggingHoneycombArrayOutput) ToServiceComputeLoggingHoneycombArrayOutput() ServiceComputeLoggingHoneycombArrayOutput {
	return o
}

func (o ServiceComputeLoggingHoneycombArrayOutput) ToServiceComputeLoggingHoneycombArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHoneycombArrayOutput {
	return o
}

func (o ServiceComputeLoggingHoneycombArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingHoneycombOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingHoneycomb {
		return vs[0].([]ServiceComputeLoggingHoneycomb)[vs[1].(int)]
	}).(ServiceComputeLoggingHoneycombOutput)
}

type ServiceComputeLoggingHttp struct {
	// Value of the `Content-Type` header sent with the request
	ContentType *string `pulumi:"contentType"`
	// Custom header sent with the request
	HeaderName *string `pulumi:"headerName"`
	// Value of the custom header sent with the request
	HeaderValue *string `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
	JsonFormat *string `pulumi:"jsonFormat"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
	Method *string `pulumi:"method"`
	// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The maximum number of bytes sent in one request
	RequestMaxBytes *int `pulumi:"requestMaxBytes"`
	// The maximum number of logs sent in one request
	RequestMaxEntries *int `pulumi:"requestMaxEntries"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname *string `pulumi:"tlsHostname"`
	// URL that log data will be sent to. Must use the https protocol
	Url string `pulumi:"url"`
}

// ServiceComputeLoggingHttpInput is an input type that accepts ServiceComputeLoggingHttpArgs and ServiceComputeLoggingHttpOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHttpInput` via:
//
//	ServiceComputeLoggingHttpArgs{...}
type ServiceComputeLoggingHttpInput interface {
	pulumi.Input

	ToServiceComputeLoggingHttpOutput() ServiceComputeLoggingHttpOutput
	ToServiceComputeLoggingHttpOutputWithContext(context.Context) ServiceComputeLoggingHttpOutput
}

type ServiceComputeLoggingHttpArgs struct {
	// Value of the `Content-Type` header sent with the request
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Custom header sent with the request
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// Value of the custom header sent with the request
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
	JsonFormat pulumi.StringPtrInput `pulumi:"jsonFormat"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The maximum number of bytes sent in one request
	RequestMaxBytes pulumi.IntPtrInput `pulumi:"requestMaxBytes"`
	// The maximum number of logs sent in one request
	RequestMaxEntries pulumi.IntPtrInput `pulumi:"requestMaxEntries"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// URL that log data will be sent to. Must use the https protocol
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeLoggingHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHttp)(nil)).Elem()
}

func (i ServiceComputeLoggingHttpArgs) ToServiceComputeLoggingHttpOutput() ServiceComputeLoggingHttpOutput {
	return i.ToServiceComputeLoggingHttpOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHttpArgs) ToServiceComputeLoggingHttpOutputWithContext(ctx context.Context) ServiceComputeLoggingHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHttpOutput)
}

// ServiceComputeLoggingHttpArrayInput is an input type that accepts ServiceComputeLoggingHttpArray and ServiceComputeLoggingHttpArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingHttpArrayInput` via:
//
//	ServiceComputeLoggingHttpArray{ ServiceComputeLoggingHttpArgs{...} }
type ServiceComputeLoggingHttpArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingHttpArrayOutput() ServiceComputeLoggingHttpArrayOutput
	ToServiceComputeLoggingHttpArrayOutputWithContext(context.Context) ServiceComputeLoggingHttpArrayOutput
}

type ServiceComputeLoggingHttpArray []ServiceComputeLoggingHttpInput

func (ServiceComputeLoggingHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHttp)(nil)).Elem()
}

func (i ServiceComputeLoggingHttpArray) ToServiceComputeLoggingHttpArrayOutput() ServiceComputeLoggingHttpArrayOutput {
	return i.ToServiceComputeLoggingHttpArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingHttpArray) ToServiceComputeLoggingHttpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingHttpArrayOutput)
}

type ServiceComputeLoggingHttpOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingHttp)(nil)).Elem()
}

func (o ServiceComputeLoggingHttpOutput) ToServiceComputeLoggingHttpOutput() ServiceComputeLoggingHttpOutput {
	return o
}

func (o ServiceComputeLoggingHttpOutput) ToServiceComputeLoggingHttpOutputWithContext(ctx context.Context) ServiceComputeLoggingHttpOutput {
	return o
}

// Value of the `Content-Type` header sent with the request
func (o ServiceComputeLoggingHttpOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Custom header sent with the request
func (o ServiceComputeLoggingHttpOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// Value of the custom header sent with the request
func (o ServiceComputeLoggingHttpOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
func (o ServiceComputeLoggingHttpOutput) JsonFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.JsonFormat }).(pulumi.StringPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingHttpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
func (o ServiceComputeLoggingHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingHttpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) string { return v.Name }).(pulumi.StringOutput)
}

// The maximum number of bytes sent in one request
func (o ServiceComputeLoggingHttpOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The maximum number of logs sent in one request
func (o ServiceComputeLoggingHttpOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format
func (o ServiceComputeLoggingHttpOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format
func (o ServiceComputeLoggingHttpOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format
func (o ServiceComputeLoggingHttpOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// Used during the TLS handshake to validate the certificate
func (o ServiceComputeLoggingHttpOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// URL that log data will be sent to. Must use the https protocol
func (o ServiceComputeLoggingHttpOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingHttp) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeLoggingHttpArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingHttp)(nil)).Elem()
}

func (o ServiceComputeLoggingHttpArrayOutput) ToServiceComputeLoggingHttpArrayOutput() ServiceComputeLoggingHttpArrayOutput {
	return o
}

func (o ServiceComputeLoggingHttpArrayOutput) ToServiceComputeLoggingHttpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingHttpArrayOutput {
	return o
}

func (o ServiceComputeLoggingHttpArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingHttp {
		return vs[0].([]ServiceComputeLoggingHttp)[vs[1].(int)]
	}).(ServiceComputeLoggingHttpOutput)
}

type ServiceComputeLoggingKafka struct {
	// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
	AuthMethod *string `pulumi:"authMethod"`
	// A comma-separated list of IP addresses or hostnames of Kafka brokers
	Brokers string `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
	CompressionCodec *string `pulumi:"compressionCodec"`
	// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
	ParseLogKeyvals *bool `pulumi:"parseLogKeyvals"`
	// SASL Pass
	Password *string `pulumi:"password"`
	// Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
	RequestMaxBytes *int `pulumi:"requestMaxBytes"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
	RequiredAcks *string `pulumi:"requiredAcks"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to
	Topic string `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either `true` or `false`
	UseTls *bool `pulumi:"useTls"`
	// SASL User
	User *string `pulumi:"user"`
}

// ServiceComputeLoggingKafkaInput is an input type that accepts ServiceComputeLoggingKafkaArgs and ServiceComputeLoggingKafkaOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingKafkaInput` via:
//
//	ServiceComputeLoggingKafkaArgs{...}
type ServiceComputeLoggingKafkaInput interface {
	pulumi.Input

	ToServiceComputeLoggingKafkaOutput() ServiceComputeLoggingKafkaOutput
	ToServiceComputeLoggingKafkaOutputWithContext(context.Context) ServiceComputeLoggingKafkaOutput
}

type ServiceComputeLoggingKafkaArgs struct {
	// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
	AuthMethod pulumi.StringPtrInput `pulumi:"authMethod"`
	// A comma-separated list of IP addresses or hostnames of Kafka brokers
	Brokers pulumi.StringInput `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
	ParseLogKeyvals pulumi.BoolPtrInput `pulumi:"parseLogKeyvals"`
	// SASL Pass
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
	RequestMaxBytes pulumi.IntPtrInput `pulumi:"requestMaxBytes"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
	RequiredAcks pulumi.StringPtrInput `pulumi:"requiredAcks"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to
	Topic pulumi.StringInput `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either `true` or `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
	// SASL User
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceComputeLoggingKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingKafka)(nil)).Elem()
}

func (i ServiceComputeLoggingKafkaArgs) ToServiceComputeLoggingKafkaOutput() ServiceComputeLoggingKafkaOutput {
	return i.ToServiceComputeLoggingKafkaOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingKafkaArgs) ToServiceComputeLoggingKafkaOutputWithContext(ctx context.Context) ServiceComputeLoggingKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingKafkaOutput)
}

// ServiceComputeLoggingKafkaArrayInput is an input type that accepts ServiceComputeLoggingKafkaArray and ServiceComputeLoggingKafkaArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingKafkaArrayInput` via:
//
//	ServiceComputeLoggingKafkaArray{ ServiceComputeLoggingKafkaArgs{...} }
type ServiceComputeLoggingKafkaArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingKafkaArrayOutput() ServiceComputeLoggingKafkaArrayOutput
	ToServiceComputeLoggingKafkaArrayOutputWithContext(context.Context) ServiceComputeLoggingKafkaArrayOutput
}

type ServiceComputeLoggingKafkaArray []ServiceComputeLoggingKafkaInput

func (ServiceComputeLoggingKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingKafka)(nil)).Elem()
}

func (i ServiceComputeLoggingKafkaArray) ToServiceComputeLoggingKafkaArrayOutput() ServiceComputeLoggingKafkaArrayOutput {
	return i.ToServiceComputeLoggingKafkaArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingKafkaArray) ToServiceComputeLoggingKafkaArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingKafkaArrayOutput)
}

type ServiceComputeLoggingKafkaOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingKafka)(nil)).Elem()
}

func (o ServiceComputeLoggingKafkaOutput) ToServiceComputeLoggingKafkaOutput() ServiceComputeLoggingKafkaOutput {
	return o
}

func (o ServiceComputeLoggingKafkaOutput) ToServiceComputeLoggingKafkaOutputWithContext(ctx context.Context) ServiceComputeLoggingKafkaOutput {
	return o
}

// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
func (o ServiceComputeLoggingKafkaOutput) AuthMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.AuthMethod }).(pulumi.StringPtrOutput)
}

// A comma-separated list of IP addresses or hostnames of Kafka brokers
func (o ServiceComputeLoggingKafkaOutput) Brokers() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) string { return v.Brokers }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
func (o ServiceComputeLoggingKafkaOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingKafkaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) string { return v.Name }).(pulumi.StringOutput)
}

// Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
func (o ServiceComputeLoggingKafkaOutput) ParseLogKeyvals() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *bool { return v.ParseLogKeyvals }).(pulumi.BoolPtrOutput)
}

// SASL Pass
func (o ServiceComputeLoggingKafkaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
func (o ServiceComputeLoggingKafkaOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
func (o ServiceComputeLoggingKafkaOutput) RequiredAcks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.RequiredAcks }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format
func (o ServiceComputeLoggingKafkaOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format
func (o ServiceComputeLoggingKafkaOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format
func (o ServiceComputeLoggingKafkaOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
func (o ServiceComputeLoggingKafkaOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Kafka topic to send logs to
func (o ServiceComputeLoggingKafkaOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) string { return v.Topic }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging. Can be either `true` or `false`
func (o ServiceComputeLoggingKafkaOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

// SASL User
func (o ServiceComputeLoggingKafkaOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKafka) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingKafkaArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingKafka)(nil)).Elem()
}

func (o ServiceComputeLoggingKafkaArrayOutput) ToServiceComputeLoggingKafkaArrayOutput() ServiceComputeLoggingKafkaArrayOutput {
	return o
}

func (o ServiceComputeLoggingKafkaArrayOutput) ToServiceComputeLoggingKafkaArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingKafkaArrayOutput {
	return o
}

func (o ServiceComputeLoggingKafkaArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingKafka {
		return vs[0].([]ServiceComputeLoggingKafka)[vs[1].(int)]
	}).(ServiceComputeLoggingKafkaOutput)
}

type ServiceComputeLoggingKinese struct {
	// The AWS access key to be used to write to the stream
	AccessKey *string `pulumi:"accessKey"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `accessKey` and `secretKey` are provided.
	IamRole *string `pulumi:"iamRole"`
	// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The AWS region the stream resides in. (Default: `us-east-1`)
	Region *string `pulumi:"region"`
	// The AWS secret access key to authenticate with
	SecretKey *string `pulumi:"secretKey"`
	// The Kinesis stream name
	Topic string `pulumi:"topic"`
}

// ServiceComputeLoggingKineseInput is an input type that accepts ServiceComputeLoggingKineseArgs and ServiceComputeLoggingKineseOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingKineseInput` via:
//
//	ServiceComputeLoggingKineseArgs{...}
type ServiceComputeLoggingKineseInput interface {
	pulumi.Input

	ToServiceComputeLoggingKineseOutput() ServiceComputeLoggingKineseOutput
	ToServiceComputeLoggingKineseOutputWithContext(context.Context) ServiceComputeLoggingKineseOutput
}

type ServiceComputeLoggingKineseArgs struct {
	// The AWS access key to be used to write to the stream
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `accessKey` and `secretKey` are provided.
	IamRole pulumi.StringPtrInput `pulumi:"iamRole"`
	// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The AWS region the stream resides in. (Default: `us-east-1`)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The AWS secret access key to authenticate with
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The Kinesis stream name
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (ServiceComputeLoggingKineseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingKinese)(nil)).Elem()
}

func (i ServiceComputeLoggingKineseArgs) ToServiceComputeLoggingKineseOutput() ServiceComputeLoggingKineseOutput {
	return i.ToServiceComputeLoggingKineseOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingKineseArgs) ToServiceComputeLoggingKineseOutputWithContext(ctx context.Context) ServiceComputeLoggingKineseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingKineseOutput)
}

// ServiceComputeLoggingKineseArrayInput is an input type that accepts ServiceComputeLoggingKineseArray and ServiceComputeLoggingKineseArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingKineseArrayInput` via:
//
//	ServiceComputeLoggingKineseArray{ ServiceComputeLoggingKineseArgs{...} }
type ServiceComputeLoggingKineseArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingKineseArrayOutput() ServiceComputeLoggingKineseArrayOutput
	ToServiceComputeLoggingKineseArrayOutputWithContext(context.Context) ServiceComputeLoggingKineseArrayOutput
}

type ServiceComputeLoggingKineseArray []ServiceComputeLoggingKineseInput

func (ServiceComputeLoggingKineseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingKinese)(nil)).Elem()
}

func (i ServiceComputeLoggingKineseArray) ToServiceComputeLoggingKineseArrayOutput() ServiceComputeLoggingKineseArrayOutput {
	return i.ToServiceComputeLoggingKineseArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingKineseArray) ToServiceComputeLoggingKineseArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingKineseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingKineseArrayOutput)
}

type ServiceComputeLoggingKineseOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingKineseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingKinese)(nil)).Elem()
}

func (o ServiceComputeLoggingKineseOutput) ToServiceComputeLoggingKineseOutput() ServiceComputeLoggingKineseOutput {
	return o
}

func (o ServiceComputeLoggingKineseOutput) ToServiceComputeLoggingKineseOutputWithContext(ctx context.Context) ServiceComputeLoggingKineseOutput {
	return o
}

// The AWS access key to be used to write to the stream
func (o ServiceComputeLoggingKineseOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `accessKey` and `secretKey` are provided.
func (o ServiceComputeLoggingKineseOutput) IamRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) *string { return v.IamRole }).(pulumi.StringPtrOutput)
}

// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingKineseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) string { return v.Name }).(pulumi.StringOutput)
}

// The AWS region the stream resides in. (Default: `us-east-1`)
func (o ServiceComputeLoggingKineseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The AWS secret access key to authenticate with
func (o ServiceComputeLoggingKineseOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The Kinesis stream name
func (o ServiceComputeLoggingKineseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingKinese) string { return v.Topic }).(pulumi.StringOutput)
}

type ServiceComputeLoggingKineseArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingKineseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingKinese)(nil)).Elem()
}

func (o ServiceComputeLoggingKineseArrayOutput) ToServiceComputeLoggingKineseArrayOutput() ServiceComputeLoggingKineseArrayOutput {
	return o
}

func (o ServiceComputeLoggingKineseArrayOutput) ToServiceComputeLoggingKineseArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingKineseArrayOutput {
	return o
}

func (o ServiceComputeLoggingKineseArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingKineseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingKinese {
		return vs[0].([]ServiceComputeLoggingKinese)[vs[1].(int)]
	}).(ServiceComputeLoggingKineseOutput)
}

type ServiceComputeLoggingLogentry struct {
	// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The port number configured in Logentries
	Port *int `pulumi:"port"`
	// Use token based authentication (https://logentries.com/doc/input-token/)
	Token string `pulumi:"token"`
	// Whether to use TLS for secure logging
	UseTls *bool `pulumi:"useTls"`
}

// ServiceComputeLoggingLogentryInput is an input type that accepts ServiceComputeLoggingLogentryArgs and ServiceComputeLoggingLogentryOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogentryInput` via:
//
//	ServiceComputeLoggingLogentryArgs{...}
type ServiceComputeLoggingLogentryInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogentryOutput() ServiceComputeLoggingLogentryOutput
	ToServiceComputeLoggingLogentryOutputWithContext(context.Context) ServiceComputeLoggingLogentryOutput
}

type ServiceComputeLoggingLogentryArgs struct {
	// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The port number configured in Logentries
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Use token based authentication (https://logentries.com/doc/input-token/)
	Token pulumi.StringInput `pulumi:"token"`
	// Whether to use TLS for secure logging
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (ServiceComputeLoggingLogentryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLogentry)(nil)).Elem()
}

func (i ServiceComputeLoggingLogentryArgs) ToServiceComputeLoggingLogentryOutput() ServiceComputeLoggingLogentryOutput {
	return i.ToServiceComputeLoggingLogentryOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogentryArgs) ToServiceComputeLoggingLogentryOutputWithContext(ctx context.Context) ServiceComputeLoggingLogentryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogentryOutput)
}

// ServiceComputeLoggingLogentryArrayInput is an input type that accepts ServiceComputeLoggingLogentryArray and ServiceComputeLoggingLogentryArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogentryArrayInput` via:
//
//	ServiceComputeLoggingLogentryArray{ ServiceComputeLoggingLogentryArgs{...} }
type ServiceComputeLoggingLogentryArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogentryArrayOutput() ServiceComputeLoggingLogentryArrayOutput
	ToServiceComputeLoggingLogentryArrayOutputWithContext(context.Context) ServiceComputeLoggingLogentryArrayOutput
}

type ServiceComputeLoggingLogentryArray []ServiceComputeLoggingLogentryInput

func (ServiceComputeLoggingLogentryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLogentry)(nil)).Elem()
}

func (i ServiceComputeLoggingLogentryArray) ToServiceComputeLoggingLogentryArrayOutput() ServiceComputeLoggingLogentryArrayOutput {
	return i.ToServiceComputeLoggingLogentryArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogentryArray) ToServiceComputeLoggingLogentryArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogentryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogentryArrayOutput)
}

type ServiceComputeLoggingLogentryOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogentryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLogentry)(nil)).Elem()
}

func (o ServiceComputeLoggingLogentryOutput) ToServiceComputeLoggingLogentryOutput() ServiceComputeLoggingLogentryOutput {
	return o
}

func (o ServiceComputeLoggingLogentryOutput) ToServiceComputeLoggingLogentryOutputWithContext(ctx context.Context) ServiceComputeLoggingLogentryOutput {
	return o
}

// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingLogentryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogentry) string { return v.Name }).(pulumi.StringOutput)
}

// The port number configured in Logentries
func (o ServiceComputeLoggingLogentryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogentry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Use token based authentication (https://logentries.com/doc/input-token/)
func (o ServiceComputeLoggingLogentryOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogentry) string { return v.Token }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging
func (o ServiceComputeLoggingLogentryOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogentry) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type ServiceComputeLoggingLogentryArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogentryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLogentry)(nil)).Elem()
}

func (o ServiceComputeLoggingLogentryArrayOutput) ToServiceComputeLoggingLogentryArrayOutput() ServiceComputeLoggingLogentryArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogentryArrayOutput) ToServiceComputeLoggingLogentryArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogentryArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogentryArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingLogentryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingLogentry {
		return vs[0].([]ServiceComputeLoggingLogentry)[vs[1].(int)]
	}).(ServiceComputeLoggingLogentryOutput)
}

type ServiceComputeLoggingLoggly struct {
	// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingLogglyInput is an input type that accepts ServiceComputeLoggingLogglyArgs and ServiceComputeLoggingLogglyOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogglyInput` via:
//
//	ServiceComputeLoggingLogglyArgs{...}
type ServiceComputeLoggingLogglyInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogglyOutput() ServiceComputeLoggingLogglyOutput
	ToServiceComputeLoggingLogglyOutputWithContext(context.Context) ServiceComputeLoggingLogglyOutput
}

type ServiceComputeLoggingLogglyArgs struct {
	// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingLogglyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLoggly)(nil)).Elem()
}

func (i ServiceComputeLoggingLogglyArgs) ToServiceComputeLoggingLogglyOutput() ServiceComputeLoggingLogglyOutput {
	return i.ToServiceComputeLoggingLogglyOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogglyArgs) ToServiceComputeLoggingLogglyOutputWithContext(ctx context.Context) ServiceComputeLoggingLogglyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogglyOutput)
}

// ServiceComputeLoggingLogglyArrayInput is an input type that accepts ServiceComputeLoggingLogglyArray and ServiceComputeLoggingLogglyArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogglyArrayInput` via:
//
//	ServiceComputeLoggingLogglyArray{ ServiceComputeLoggingLogglyArgs{...} }
type ServiceComputeLoggingLogglyArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogglyArrayOutput() ServiceComputeLoggingLogglyArrayOutput
	ToServiceComputeLoggingLogglyArrayOutputWithContext(context.Context) ServiceComputeLoggingLogglyArrayOutput
}

type ServiceComputeLoggingLogglyArray []ServiceComputeLoggingLogglyInput

func (ServiceComputeLoggingLogglyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLoggly)(nil)).Elem()
}

func (i ServiceComputeLoggingLogglyArray) ToServiceComputeLoggingLogglyArrayOutput() ServiceComputeLoggingLogglyArrayOutput {
	return i.ToServiceComputeLoggingLogglyArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogglyArray) ToServiceComputeLoggingLogglyArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogglyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogglyArrayOutput)
}

type ServiceComputeLoggingLogglyOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogglyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLoggly)(nil)).Elem()
}

func (o ServiceComputeLoggingLogglyOutput) ToServiceComputeLoggingLogglyOutput() ServiceComputeLoggingLogglyOutput {
	return o
}

func (o ServiceComputeLoggingLogglyOutput) ToServiceComputeLoggingLogglyOutputWithContext(ctx context.Context) ServiceComputeLoggingLogglyOutput {
	return o
}

// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingLogglyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLoggly) string { return v.Name }).(pulumi.StringOutput)
}

// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
func (o ServiceComputeLoggingLogglyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLoggly) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingLogglyArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogglyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLoggly)(nil)).Elem()
}

func (o ServiceComputeLoggingLogglyArrayOutput) ToServiceComputeLoggingLogglyArrayOutput() ServiceComputeLoggingLogglyArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogglyArrayOutput) ToServiceComputeLoggingLogglyArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogglyArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogglyArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingLogglyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingLoggly {
		return vs[0].([]ServiceComputeLoggingLoggly)[vs[1].(int)]
	}).(ServiceComputeLoggingLogglyOutput)
}

type ServiceComputeLoggingLogshuttle struct {
	// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The data authentication token associated with this endpoint
	Token string `pulumi:"token"`
	// Your Log Shuttle endpoint URL
	Url string `pulumi:"url"`
}

// ServiceComputeLoggingLogshuttleInput is an input type that accepts ServiceComputeLoggingLogshuttleArgs and ServiceComputeLoggingLogshuttleOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogshuttleInput` via:
//
//	ServiceComputeLoggingLogshuttleArgs{...}
type ServiceComputeLoggingLogshuttleInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogshuttleOutput() ServiceComputeLoggingLogshuttleOutput
	ToServiceComputeLoggingLogshuttleOutputWithContext(context.Context) ServiceComputeLoggingLogshuttleOutput
}

type ServiceComputeLoggingLogshuttleArgs struct {
	// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The data authentication token associated with this endpoint
	Token pulumi.StringInput `pulumi:"token"`
	// Your Log Shuttle endpoint URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeLoggingLogshuttleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLogshuttle)(nil)).Elem()
}

func (i ServiceComputeLoggingLogshuttleArgs) ToServiceComputeLoggingLogshuttleOutput() ServiceComputeLoggingLogshuttleOutput {
	return i.ToServiceComputeLoggingLogshuttleOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogshuttleArgs) ToServiceComputeLoggingLogshuttleOutputWithContext(ctx context.Context) ServiceComputeLoggingLogshuttleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogshuttleOutput)
}

// ServiceComputeLoggingLogshuttleArrayInput is an input type that accepts ServiceComputeLoggingLogshuttleArray and ServiceComputeLoggingLogshuttleArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingLogshuttleArrayInput` via:
//
//	ServiceComputeLoggingLogshuttleArray{ ServiceComputeLoggingLogshuttleArgs{...} }
type ServiceComputeLoggingLogshuttleArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingLogshuttleArrayOutput() ServiceComputeLoggingLogshuttleArrayOutput
	ToServiceComputeLoggingLogshuttleArrayOutputWithContext(context.Context) ServiceComputeLoggingLogshuttleArrayOutput
}

type ServiceComputeLoggingLogshuttleArray []ServiceComputeLoggingLogshuttleInput

func (ServiceComputeLoggingLogshuttleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLogshuttle)(nil)).Elem()
}

func (i ServiceComputeLoggingLogshuttleArray) ToServiceComputeLoggingLogshuttleArrayOutput() ServiceComputeLoggingLogshuttleArrayOutput {
	return i.ToServiceComputeLoggingLogshuttleArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingLogshuttleArray) ToServiceComputeLoggingLogshuttleArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogshuttleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingLogshuttleArrayOutput)
}

type ServiceComputeLoggingLogshuttleOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogshuttleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingLogshuttle)(nil)).Elem()
}

func (o ServiceComputeLoggingLogshuttleOutput) ToServiceComputeLoggingLogshuttleOutput() ServiceComputeLoggingLogshuttleOutput {
	return o
}

func (o ServiceComputeLoggingLogshuttleOutput) ToServiceComputeLoggingLogshuttleOutputWithContext(ctx context.Context) ServiceComputeLoggingLogshuttleOutput {
	return o
}

// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingLogshuttleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogshuttle) string { return v.Name }).(pulumi.StringOutput)
}

// The data authentication token associated with this endpoint
func (o ServiceComputeLoggingLogshuttleOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogshuttle) string { return v.Token }).(pulumi.StringOutput)
}

// Your Log Shuttle endpoint URL
func (o ServiceComputeLoggingLogshuttleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingLogshuttle) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeLoggingLogshuttleArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingLogshuttleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingLogshuttle)(nil)).Elem()
}

func (o ServiceComputeLoggingLogshuttleArrayOutput) ToServiceComputeLoggingLogshuttleArrayOutput() ServiceComputeLoggingLogshuttleArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogshuttleArrayOutput) ToServiceComputeLoggingLogshuttleArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingLogshuttleArrayOutput {
	return o
}

func (o ServiceComputeLoggingLogshuttleArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingLogshuttleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingLogshuttle {
		return vs[0].([]ServiceComputeLoggingLogshuttle)[vs[1].(int)]
	}).(ServiceComputeLoggingLogshuttleOutput)
}

type ServiceComputeLoggingNewrelic struct {
	// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The region that log data will be sent to. Default: `US`
	Region *string `pulumi:"region"`
	// The Insert API key from the Account page of your New Relic account
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingNewrelicInput is an input type that accepts ServiceComputeLoggingNewrelicArgs and ServiceComputeLoggingNewrelicOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingNewrelicInput` via:
//
//	ServiceComputeLoggingNewrelicArgs{...}
type ServiceComputeLoggingNewrelicInput interface {
	pulumi.Input

	ToServiceComputeLoggingNewrelicOutput() ServiceComputeLoggingNewrelicOutput
	ToServiceComputeLoggingNewrelicOutputWithContext(context.Context) ServiceComputeLoggingNewrelicOutput
}

type ServiceComputeLoggingNewrelicArgs struct {
	// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The region that log data will be sent to. Default: `US`
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The Insert API key from the Account page of your New Relic account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingNewrelicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingNewrelic)(nil)).Elem()
}

func (i ServiceComputeLoggingNewrelicArgs) ToServiceComputeLoggingNewrelicOutput() ServiceComputeLoggingNewrelicOutput {
	return i.ToServiceComputeLoggingNewrelicOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingNewrelicArgs) ToServiceComputeLoggingNewrelicOutputWithContext(ctx context.Context) ServiceComputeLoggingNewrelicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingNewrelicOutput)
}

// ServiceComputeLoggingNewrelicArrayInput is an input type that accepts ServiceComputeLoggingNewrelicArray and ServiceComputeLoggingNewrelicArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingNewrelicArrayInput` via:
//
//	ServiceComputeLoggingNewrelicArray{ ServiceComputeLoggingNewrelicArgs{...} }
type ServiceComputeLoggingNewrelicArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingNewrelicArrayOutput() ServiceComputeLoggingNewrelicArrayOutput
	ToServiceComputeLoggingNewrelicArrayOutputWithContext(context.Context) ServiceComputeLoggingNewrelicArrayOutput
}

type ServiceComputeLoggingNewrelicArray []ServiceComputeLoggingNewrelicInput

func (ServiceComputeLoggingNewrelicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingNewrelic)(nil)).Elem()
}

func (i ServiceComputeLoggingNewrelicArray) ToServiceComputeLoggingNewrelicArrayOutput() ServiceComputeLoggingNewrelicArrayOutput {
	return i.ToServiceComputeLoggingNewrelicArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingNewrelicArray) ToServiceComputeLoggingNewrelicArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingNewrelicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingNewrelicArrayOutput)
}

type ServiceComputeLoggingNewrelicOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingNewrelicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingNewrelic)(nil)).Elem()
}

func (o ServiceComputeLoggingNewrelicOutput) ToServiceComputeLoggingNewrelicOutput() ServiceComputeLoggingNewrelicOutput {
	return o
}

func (o ServiceComputeLoggingNewrelicOutput) ToServiceComputeLoggingNewrelicOutputWithContext(ctx context.Context) ServiceComputeLoggingNewrelicOutput {
	return o
}

// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingNewrelicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingNewrelic) string { return v.Name }).(pulumi.StringOutput)
}

// The region that log data will be sent to. Default: `US`
func (o ServiceComputeLoggingNewrelicOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingNewrelic) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The Insert API key from the Account page of your New Relic account
func (o ServiceComputeLoggingNewrelicOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingNewrelic) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingNewrelicArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingNewrelicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingNewrelic)(nil)).Elem()
}

func (o ServiceComputeLoggingNewrelicArrayOutput) ToServiceComputeLoggingNewrelicArrayOutput() ServiceComputeLoggingNewrelicArrayOutput {
	return o
}

func (o ServiceComputeLoggingNewrelicArrayOutput) ToServiceComputeLoggingNewrelicArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingNewrelicArrayOutput {
	return o
}

func (o ServiceComputeLoggingNewrelicArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingNewrelicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingNewrelic {
		return vs[0].([]ServiceComputeLoggingNewrelic)[vs[1].(int)]
	}).(ServiceComputeLoggingNewrelicOutput)
}

type ServiceComputeLoggingOpenstack struct {
	// Your OpenStack account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of your OpenStack container
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Your OpenStack auth url
	Url string `pulumi:"url"`
	// The username for your OpenStack account
	User string `pulumi:"user"`
}

// ServiceComputeLoggingOpenstackInput is an input type that accepts ServiceComputeLoggingOpenstackArgs and ServiceComputeLoggingOpenstackOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingOpenstackInput` via:
//
//	ServiceComputeLoggingOpenstackArgs{...}
type ServiceComputeLoggingOpenstackInput interface {
	pulumi.Input

	ToServiceComputeLoggingOpenstackOutput() ServiceComputeLoggingOpenstackOutput
	ToServiceComputeLoggingOpenstackOutputWithContext(context.Context) ServiceComputeLoggingOpenstackOutput
}

type ServiceComputeLoggingOpenstackArgs struct {
	// Your OpenStack account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of your OpenStack container
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// Your OpenStack auth url
	Url pulumi.StringInput `pulumi:"url"`
	// The username for your OpenStack account
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingOpenstackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingOpenstack)(nil)).Elem()
}

func (i ServiceComputeLoggingOpenstackArgs) ToServiceComputeLoggingOpenstackOutput() ServiceComputeLoggingOpenstackOutput {
	return i.ToServiceComputeLoggingOpenstackOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingOpenstackArgs) ToServiceComputeLoggingOpenstackOutputWithContext(ctx context.Context) ServiceComputeLoggingOpenstackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingOpenstackOutput)
}

// ServiceComputeLoggingOpenstackArrayInput is an input type that accepts ServiceComputeLoggingOpenstackArray and ServiceComputeLoggingOpenstackArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingOpenstackArrayInput` via:
//
//	ServiceComputeLoggingOpenstackArray{ ServiceComputeLoggingOpenstackArgs{...} }
type ServiceComputeLoggingOpenstackArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingOpenstackArrayOutput() ServiceComputeLoggingOpenstackArrayOutput
	ToServiceComputeLoggingOpenstackArrayOutputWithContext(context.Context) ServiceComputeLoggingOpenstackArrayOutput
}

type ServiceComputeLoggingOpenstackArray []ServiceComputeLoggingOpenstackInput

func (ServiceComputeLoggingOpenstackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingOpenstack)(nil)).Elem()
}

func (i ServiceComputeLoggingOpenstackArray) ToServiceComputeLoggingOpenstackArrayOutput() ServiceComputeLoggingOpenstackArrayOutput {
	return i.ToServiceComputeLoggingOpenstackArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingOpenstackArray) ToServiceComputeLoggingOpenstackArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingOpenstackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingOpenstackArrayOutput)
}

type ServiceComputeLoggingOpenstackOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingOpenstackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingOpenstack)(nil)).Elem()
}

func (o ServiceComputeLoggingOpenstackOutput) ToServiceComputeLoggingOpenstackOutput() ServiceComputeLoggingOpenstackOutput {
	return o
}

func (o ServiceComputeLoggingOpenstackOutput) ToServiceComputeLoggingOpenstackOutputWithContext(ctx context.Context) ServiceComputeLoggingOpenstackOutput {
	return o
}

// Your OpenStack account access key
func (o ServiceComputeLoggingOpenstackOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of your OpenStack container
func (o ServiceComputeLoggingOpenstackOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceComputeLoggingOpenstackOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeLoggingOpenstackOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingOpenstackOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingOpenstackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceComputeLoggingOpenstackOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds. Default `3600`
func (o ServiceComputeLoggingOpenstackOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingOpenstackOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingOpenstackOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// Your OpenStack auth url
func (o ServiceComputeLoggingOpenstackOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.Url }).(pulumi.StringOutput)
}

// The username for your OpenStack account
func (o ServiceComputeLoggingOpenstackOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingOpenstack) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingOpenstackArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingOpenstackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingOpenstack)(nil)).Elem()
}

func (o ServiceComputeLoggingOpenstackArrayOutput) ToServiceComputeLoggingOpenstackArrayOutput() ServiceComputeLoggingOpenstackArrayOutput {
	return o
}

func (o ServiceComputeLoggingOpenstackArrayOutput) ToServiceComputeLoggingOpenstackArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingOpenstackArrayOutput {
	return o
}

func (o ServiceComputeLoggingOpenstackArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingOpenstackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingOpenstack {
		return vs[0].([]ServiceComputeLoggingOpenstack)[vs[1].(int)]
	}).(ServiceComputeLoggingOpenstackOutput)
}

type ServiceComputeLoggingPapertrail struct {
	// The address of the Papertrail endpoint
	Address string `pulumi:"address"`
	// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The port associated with the address where the Papertrail endpoint can be accessed
	Port int `pulumi:"port"`
}

// ServiceComputeLoggingPapertrailInput is an input type that accepts ServiceComputeLoggingPapertrailArgs and ServiceComputeLoggingPapertrailOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingPapertrailInput` via:
//
//	ServiceComputeLoggingPapertrailArgs{...}
type ServiceComputeLoggingPapertrailInput interface {
	pulumi.Input

	ToServiceComputeLoggingPapertrailOutput() ServiceComputeLoggingPapertrailOutput
	ToServiceComputeLoggingPapertrailOutputWithContext(context.Context) ServiceComputeLoggingPapertrailOutput
}

type ServiceComputeLoggingPapertrailArgs struct {
	// The address of the Papertrail endpoint
	Address pulumi.StringInput `pulumi:"address"`
	// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The port associated with the address where the Papertrail endpoint can be accessed
	Port pulumi.IntInput `pulumi:"port"`
}

func (ServiceComputeLoggingPapertrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingPapertrail)(nil)).Elem()
}

func (i ServiceComputeLoggingPapertrailArgs) ToServiceComputeLoggingPapertrailOutput() ServiceComputeLoggingPapertrailOutput {
	return i.ToServiceComputeLoggingPapertrailOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingPapertrailArgs) ToServiceComputeLoggingPapertrailOutputWithContext(ctx context.Context) ServiceComputeLoggingPapertrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingPapertrailOutput)
}

// ServiceComputeLoggingPapertrailArrayInput is an input type that accepts ServiceComputeLoggingPapertrailArray and ServiceComputeLoggingPapertrailArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingPapertrailArrayInput` via:
//
//	ServiceComputeLoggingPapertrailArray{ ServiceComputeLoggingPapertrailArgs{...} }
type ServiceComputeLoggingPapertrailArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingPapertrailArrayOutput() ServiceComputeLoggingPapertrailArrayOutput
	ToServiceComputeLoggingPapertrailArrayOutputWithContext(context.Context) ServiceComputeLoggingPapertrailArrayOutput
}

type ServiceComputeLoggingPapertrailArray []ServiceComputeLoggingPapertrailInput

func (ServiceComputeLoggingPapertrailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingPapertrail)(nil)).Elem()
}

func (i ServiceComputeLoggingPapertrailArray) ToServiceComputeLoggingPapertrailArrayOutput() ServiceComputeLoggingPapertrailArrayOutput {
	return i.ToServiceComputeLoggingPapertrailArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingPapertrailArray) ToServiceComputeLoggingPapertrailArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingPapertrailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingPapertrailArrayOutput)
}

type ServiceComputeLoggingPapertrailOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingPapertrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingPapertrail)(nil)).Elem()
}

func (o ServiceComputeLoggingPapertrailOutput) ToServiceComputeLoggingPapertrailOutput() ServiceComputeLoggingPapertrailOutput {
	return o
}

func (o ServiceComputeLoggingPapertrailOutput) ToServiceComputeLoggingPapertrailOutputWithContext(ctx context.Context) ServiceComputeLoggingPapertrailOutput {
	return o
}

// The address of the Papertrail endpoint
func (o ServiceComputeLoggingPapertrailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingPapertrail) string { return v.Address }).(pulumi.StringOutput)
}

// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingPapertrailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingPapertrail) string { return v.Name }).(pulumi.StringOutput)
}

// The port associated with the address where the Papertrail endpoint can be accessed
func (o ServiceComputeLoggingPapertrailOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceComputeLoggingPapertrail) int { return v.Port }).(pulumi.IntOutput)
}

type ServiceComputeLoggingPapertrailArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingPapertrailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingPapertrail)(nil)).Elem()
}

func (o ServiceComputeLoggingPapertrailArrayOutput) ToServiceComputeLoggingPapertrailArrayOutput() ServiceComputeLoggingPapertrailArrayOutput {
	return o
}

func (o ServiceComputeLoggingPapertrailArrayOutput) ToServiceComputeLoggingPapertrailArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingPapertrailArrayOutput {
	return o
}

func (o ServiceComputeLoggingPapertrailArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingPapertrailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingPapertrail {
		return vs[0].([]ServiceComputeLoggingPapertrail)[vs[1].(int)]
	}).(ServiceComputeLoggingPapertrailOutput)
}

type ServiceComputeLoggingS3 struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acl *string `pulumi:"acl"`
	// The name of the bucket in which to store the logs
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
	Domain *string `pulumi:"domain"`
	// Maximum size of an uploaded log file, if non-zero.
	FileMaxBytes *int `pulumi:"fileMaxBytes"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The S3 storage class (redundancy level). Should be one of: `standard`, `intelligentTiering`, `standardIa`, `onezoneIa`, `glacier`, `glacierIr`, `deepArchive`, or `reducedRedundancy`
	Redundancy *string `pulumi:"redundancy"`
	// AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
	S3AccessKey *string `pulumi:"s3AccessKey"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `accessKey` and `secretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
	S3IamRole *string `pulumi:"s3IamRole"`
	// AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
	S3SecretKey *string `pulumi:"s3SecretKey"`
	// Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
	ServerSideEncryption *string `pulumi:"serverSideEncryption"`
	// Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceComputeLoggingS3Input is an input type that accepts ServiceComputeLoggingS3Args and ServiceComputeLoggingS3Output values.
// You can construct a concrete instance of `ServiceComputeLoggingS3Input` via:
//
//	ServiceComputeLoggingS3Args{...}
type ServiceComputeLoggingS3Input interface {
	pulumi.Input

	ToServiceComputeLoggingS3Output() ServiceComputeLoggingS3Output
	ToServiceComputeLoggingS3OutputWithContext(context.Context) ServiceComputeLoggingS3Output
}

type ServiceComputeLoggingS3Args struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acl pulumi.StringPtrInput `pulumi:"acl"`
	// The name of the bucket in which to store the logs
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Maximum size of an uploaded log file, if non-zero.
	FileMaxBytes pulumi.IntPtrInput `pulumi:"fileMaxBytes"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The S3 storage class (redundancy level). Should be one of: `standard`, `intelligentTiering`, `standardIa`, `onezoneIa`, `glacier`, `glacierIr`, `deepArchive`, or `reducedRedundancy`
	Redundancy pulumi.StringPtrInput `pulumi:"redundancy"`
	// AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
	S3AccessKey pulumi.StringPtrInput `pulumi:"s3AccessKey"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `accessKey` and `secretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
	S3IamRole pulumi.StringPtrInput `pulumi:"s3IamRole"`
	// AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
	S3SecretKey pulumi.StringPtrInput `pulumi:"s3SecretKey"`
	// Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
	ServerSideEncryption pulumi.StringPtrInput `pulumi:"serverSideEncryption"`
	// Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`
	ServerSideEncryptionKmsKeyId pulumi.StringPtrInput `pulumi:"serverSideEncryptionKmsKeyId"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceComputeLoggingS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingS3)(nil)).Elem()
}

func (i ServiceComputeLoggingS3Args) ToServiceComputeLoggingS3Output() ServiceComputeLoggingS3Output {
	return i.ToServiceComputeLoggingS3OutputWithContext(context.Background())
}

func (i ServiceComputeLoggingS3Args) ToServiceComputeLoggingS3OutputWithContext(ctx context.Context) ServiceComputeLoggingS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingS3Output)
}

// ServiceComputeLoggingS3ArrayInput is an input type that accepts ServiceComputeLoggingS3Array and ServiceComputeLoggingS3ArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingS3ArrayInput` via:
//
//	ServiceComputeLoggingS3Array{ ServiceComputeLoggingS3Args{...} }
type ServiceComputeLoggingS3ArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingS3ArrayOutput() ServiceComputeLoggingS3ArrayOutput
	ToServiceComputeLoggingS3ArrayOutputWithContext(context.Context) ServiceComputeLoggingS3ArrayOutput
}

type ServiceComputeLoggingS3Array []ServiceComputeLoggingS3Input

func (ServiceComputeLoggingS3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingS3)(nil)).Elem()
}

func (i ServiceComputeLoggingS3Array) ToServiceComputeLoggingS3ArrayOutput() ServiceComputeLoggingS3ArrayOutput {
	return i.ToServiceComputeLoggingS3ArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingS3Array) ToServiceComputeLoggingS3ArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingS3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingS3ArrayOutput)
}

type ServiceComputeLoggingS3Output struct{ *pulumi.OutputState }

func (ServiceComputeLoggingS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingS3)(nil)).Elem()
}

func (o ServiceComputeLoggingS3Output) ToServiceComputeLoggingS3Output() ServiceComputeLoggingS3Output {
	return o
}

func (o ServiceComputeLoggingS3Output) ToServiceComputeLoggingS3OutputWithContext(ctx context.Context) ServiceComputeLoggingS3Output {
	return o
}

// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
func (o ServiceComputeLoggingS3Output) Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.Acl }).(pulumi.StringPtrOutput)
}

// The name of the bucket in which to store the logs
func (o ServiceComputeLoggingS3Output) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceComputeLoggingS3Output) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
func (o ServiceComputeLoggingS3Output) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Maximum size of an uploaded log file, if non-zero.
func (o ServiceComputeLoggingS3Output) FileMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *int { return v.FileMaxBytes }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeLoggingS3Output) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingS3Output) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingS3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceComputeLoggingS3Output) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds. Default `3600`
func (o ServiceComputeLoggingS3Output) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingS3Output) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The S3 storage class (redundancy level). Should be one of: `standard`, `intelligentTiering`, `standardIa`, `onezoneIa`, `glacier`, `glacierIr`, `deepArchive`, or `reducedRedundancy`
func (o ServiceComputeLoggingS3Output) Redundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.Redundancy }).(pulumi.StringPtrOutput)
}

// AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
func (o ServiceComputeLoggingS3Output) S3AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.S3AccessKey }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `accessKey` and `secretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
func (o ServiceComputeLoggingS3Output) S3IamRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.S3IamRole }).(pulumi.StringPtrOutput)
}

// AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
func (o ServiceComputeLoggingS3Output) S3SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.S3SecretKey }).(pulumi.StringPtrOutput)
}

// Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
func (o ServiceComputeLoggingS3Output) ServerSideEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.ServerSideEncryption }).(pulumi.StringPtrOutput)
}

// Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`
func (o ServiceComputeLoggingS3Output) ServerSideEncryptionKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.ServerSideEncryptionKmsKeyId }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingS3Output) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingS3) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceComputeLoggingS3ArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingS3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingS3)(nil)).Elem()
}

func (o ServiceComputeLoggingS3ArrayOutput) ToServiceComputeLoggingS3ArrayOutput() ServiceComputeLoggingS3ArrayOutput {
	return o
}

func (o ServiceComputeLoggingS3ArrayOutput) ToServiceComputeLoggingS3ArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingS3ArrayOutput {
	return o
}

func (o ServiceComputeLoggingS3ArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingS3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingS3 {
		return vs[0].([]ServiceComputeLoggingS3)[vs[1].(int)]
	}).(ServiceComputeLoggingS3Output)
}

type ServiceComputeLoggingScalyr struct {
	// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region *string `pulumi:"region"`
	// The token to use for authentication (https://www.scalyr.com/keys)
	Token string `pulumi:"token"`
}

// ServiceComputeLoggingScalyrInput is an input type that accepts ServiceComputeLoggingScalyrArgs and ServiceComputeLoggingScalyrOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingScalyrInput` via:
//
//	ServiceComputeLoggingScalyrArgs{...}
type ServiceComputeLoggingScalyrInput interface {
	pulumi.Input

	ToServiceComputeLoggingScalyrOutput() ServiceComputeLoggingScalyrOutput
	ToServiceComputeLoggingScalyrOutputWithContext(context.Context) ServiceComputeLoggingScalyrOutput
}

type ServiceComputeLoggingScalyrArgs struct {
	// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The token to use for authentication (https://www.scalyr.com/keys)
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceComputeLoggingScalyrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingScalyr)(nil)).Elem()
}

func (i ServiceComputeLoggingScalyrArgs) ToServiceComputeLoggingScalyrOutput() ServiceComputeLoggingScalyrOutput {
	return i.ToServiceComputeLoggingScalyrOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingScalyrArgs) ToServiceComputeLoggingScalyrOutputWithContext(ctx context.Context) ServiceComputeLoggingScalyrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingScalyrOutput)
}

// ServiceComputeLoggingScalyrArrayInput is an input type that accepts ServiceComputeLoggingScalyrArray and ServiceComputeLoggingScalyrArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingScalyrArrayInput` via:
//
//	ServiceComputeLoggingScalyrArray{ ServiceComputeLoggingScalyrArgs{...} }
type ServiceComputeLoggingScalyrArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingScalyrArrayOutput() ServiceComputeLoggingScalyrArrayOutput
	ToServiceComputeLoggingScalyrArrayOutputWithContext(context.Context) ServiceComputeLoggingScalyrArrayOutput
}

type ServiceComputeLoggingScalyrArray []ServiceComputeLoggingScalyrInput

func (ServiceComputeLoggingScalyrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingScalyr)(nil)).Elem()
}

func (i ServiceComputeLoggingScalyrArray) ToServiceComputeLoggingScalyrArrayOutput() ServiceComputeLoggingScalyrArrayOutput {
	return i.ToServiceComputeLoggingScalyrArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingScalyrArray) ToServiceComputeLoggingScalyrArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingScalyrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingScalyrArrayOutput)
}

type ServiceComputeLoggingScalyrOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingScalyrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingScalyr)(nil)).Elem()
}

func (o ServiceComputeLoggingScalyrOutput) ToServiceComputeLoggingScalyrOutput() ServiceComputeLoggingScalyrOutput {
	return o
}

func (o ServiceComputeLoggingScalyrOutput) ToServiceComputeLoggingScalyrOutputWithContext(ctx context.Context) ServiceComputeLoggingScalyrOutput {
	return o
}

// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingScalyrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingScalyr) string { return v.Name }).(pulumi.StringOutput)
}

// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
func (o ServiceComputeLoggingScalyrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingScalyr) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys)
func (o ServiceComputeLoggingScalyrOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingScalyr) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceComputeLoggingScalyrArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingScalyrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingScalyr)(nil)).Elem()
}

func (o ServiceComputeLoggingScalyrArrayOutput) ToServiceComputeLoggingScalyrArrayOutput() ServiceComputeLoggingScalyrArrayOutput {
	return o
}

func (o ServiceComputeLoggingScalyrArrayOutput) ToServiceComputeLoggingScalyrArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingScalyrArrayOutput {
	return o
}

func (o ServiceComputeLoggingScalyrArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingScalyrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingScalyr {
		return vs[0].([]ServiceComputeLoggingScalyr)[vs[1].(int)]
	}).(ServiceComputeLoggingScalyrOutput)
}

type ServiceComputeLoggingSftp struct {
	// The SFTP address to stream logs to
	Address string `pulumi:"address"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	Password *string `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// The port the SFTP service listens on. (Default: `22`)
	Port *int `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	SecretKey *string `pulumi:"secretKey"`
	// A list of host keys for all hosts we can connect to over SFTP
	SshKnownHosts string `pulumi:"sshKnownHosts"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for the server
	User string `pulumi:"user"`
}

// ServiceComputeLoggingSftpInput is an input type that accepts ServiceComputeLoggingSftpArgs and ServiceComputeLoggingSftpOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSftpInput` via:
//
//	ServiceComputeLoggingSftpArgs{...}
type ServiceComputeLoggingSftpInput interface {
	pulumi.Input

	ToServiceComputeLoggingSftpOutput() ServiceComputeLoggingSftpOutput
	ToServiceComputeLoggingSftpOutputWithContext(context.Context) ServiceComputeLoggingSftpOutput
}

type ServiceComputeLoggingSftpArgs struct {
	// The SFTP address to stream logs to
	Address pulumi.StringInput `pulumi:"address"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The port the SFTP service listens on. (Default: `22`)
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// A list of host keys for all hosts we can connect to over SFTP
	SshKnownHosts pulumi.StringInput `pulumi:"sshKnownHosts"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for the server
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceComputeLoggingSftpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSftp)(nil)).Elem()
}

func (i ServiceComputeLoggingSftpArgs) ToServiceComputeLoggingSftpOutput() ServiceComputeLoggingSftpOutput {
	return i.ToServiceComputeLoggingSftpOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSftpArgs) ToServiceComputeLoggingSftpOutputWithContext(ctx context.Context) ServiceComputeLoggingSftpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSftpOutput)
}

// ServiceComputeLoggingSftpArrayInput is an input type that accepts ServiceComputeLoggingSftpArray and ServiceComputeLoggingSftpArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSftpArrayInput` via:
//
//	ServiceComputeLoggingSftpArray{ ServiceComputeLoggingSftpArgs{...} }
type ServiceComputeLoggingSftpArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingSftpArrayOutput() ServiceComputeLoggingSftpArrayOutput
	ToServiceComputeLoggingSftpArrayOutputWithContext(context.Context) ServiceComputeLoggingSftpArrayOutput
}

type ServiceComputeLoggingSftpArray []ServiceComputeLoggingSftpInput

func (ServiceComputeLoggingSftpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSftp)(nil)).Elem()
}

func (i ServiceComputeLoggingSftpArray) ToServiceComputeLoggingSftpArrayOutput() ServiceComputeLoggingSftpArrayOutput {
	return i.ToServiceComputeLoggingSftpArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSftpArray) ToServiceComputeLoggingSftpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSftpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSftpArrayOutput)
}

type ServiceComputeLoggingSftpOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSftpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSftp)(nil)).Elem()
}

func (o ServiceComputeLoggingSftpOutput) ToServiceComputeLoggingSftpOutput() ServiceComputeLoggingSftpOutput {
	return o
}

func (o ServiceComputeLoggingSftpOutput) ToServiceComputeLoggingSftpOutputWithContext(ctx context.Context) ServiceComputeLoggingSftpOutput {
	return o
}

// The SFTP address to stream logs to
func (o ServiceComputeLoggingSftpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.Address }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceComputeLoggingSftpOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceComputeLoggingSftpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingSftpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingSftpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
func (o ServiceComputeLoggingSftpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The path to upload log files to. If the path ends in `/` then it is treated as a directory
func (o ServiceComputeLoggingSftpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceComputeLoggingSftpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`)
func (o ServiceComputeLoggingSftpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceComputeLoggingSftpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
func (o ServiceComputeLoggingSftpOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// A list of host keys for all hosts we can connect to over SFTP
func (o ServiceComputeLoggingSftpOutput) SshKnownHosts() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.SshKnownHosts }).(pulumi.StringOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceComputeLoggingSftpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for the server
func (o ServiceComputeLoggingSftpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSftp) string { return v.User }).(pulumi.StringOutput)
}

type ServiceComputeLoggingSftpArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSftpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSftp)(nil)).Elem()
}

func (o ServiceComputeLoggingSftpArrayOutput) ToServiceComputeLoggingSftpArrayOutput() ServiceComputeLoggingSftpArrayOutput {
	return o
}

func (o ServiceComputeLoggingSftpArrayOutput) ToServiceComputeLoggingSftpArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSftpArrayOutput {
	return o
}

func (o ServiceComputeLoggingSftpArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingSftpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingSftp {
		return vs[0].([]ServiceComputeLoggingSftp)[vs[1].(int)]
	}).(ServiceComputeLoggingSftpOutput)
}

type ServiceComputeLoggingSplunk struct {
	// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Splunk token to be used for authentication
	Token string `pulumi:"token"`
	// The Splunk URL to stream logs to
	Url string `pulumi:"url"`
	// Whether to use TLS for secure logging. Default: `false`
	UseTls *bool `pulumi:"useTls"`
}

// ServiceComputeLoggingSplunkInput is an input type that accepts ServiceComputeLoggingSplunkArgs and ServiceComputeLoggingSplunkOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSplunkInput` via:
//
//	ServiceComputeLoggingSplunkArgs{...}
type ServiceComputeLoggingSplunkInput interface {
	pulumi.Input

	ToServiceComputeLoggingSplunkOutput() ServiceComputeLoggingSplunkOutput
	ToServiceComputeLoggingSplunkOutputWithContext(context.Context) ServiceComputeLoggingSplunkOutput
}

type ServiceComputeLoggingSplunkArgs struct {
	// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Splunk token to be used for authentication
	Token pulumi.StringInput `pulumi:"token"`
	// The Splunk URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
	// Whether to use TLS for secure logging. Default: `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (ServiceComputeLoggingSplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSplunk)(nil)).Elem()
}

func (i ServiceComputeLoggingSplunkArgs) ToServiceComputeLoggingSplunkOutput() ServiceComputeLoggingSplunkOutput {
	return i.ToServiceComputeLoggingSplunkOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSplunkArgs) ToServiceComputeLoggingSplunkOutputWithContext(ctx context.Context) ServiceComputeLoggingSplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSplunkOutput)
}

// ServiceComputeLoggingSplunkArrayInput is an input type that accepts ServiceComputeLoggingSplunkArray and ServiceComputeLoggingSplunkArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSplunkArrayInput` via:
//
//	ServiceComputeLoggingSplunkArray{ ServiceComputeLoggingSplunkArgs{...} }
type ServiceComputeLoggingSplunkArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingSplunkArrayOutput() ServiceComputeLoggingSplunkArrayOutput
	ToServiceComputeLoggingSplunkArrayOutputWithContext(context.Context) ServiceComputeLoggingSplunkArrayOutput
}

type ServiceComputeLoggingSplunkArray []ServiceComputeLoggingSplunkInput

func (ServiceComputeLoggingSplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSplunk)(nil)).Elem()
}

func (i ServiceComputeLoggingSplunkArray) ToServiceComputeLoggingSplunkArrayOutput() ServiceComputeLoggingSplunkArrayOutput {
	return i.ToServiceComputeLoggingSplunkArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSplunkArray) ToServiceComputeLoggingSplunkArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSplunkArrayOutput)
}

type ServiceComputeLoggingSplunkOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSplunk)(nil)).Elem()
}

func (o ServiceComputeLoggingSplunkOutput) ToServiceComputeLoggingSplunkOutput() ServiceComputeLoggingSplunkOutput {
	return o
}

func (o ServiceComputeLoggingSplunkOutput) ToServiceComputeLoggingSplunkOutputWithContext(ctx context.Context) ServiceComputeLoggingSplunkOutput {
	return o
}

// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingSplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSplunk) string { return v.Name }).(pulumi.StringOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
func (o ServiceComputeLoggingSplunkOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSplunk) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format.
func (o ServiceComputeLoggingSplunkOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSplunk) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format.
func (o ServiceComputeLoggingSplunkOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSplunk) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
func (o ServiceComputeLoggingSplunkOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSplunk) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Splunk token to be used for authentication
func (o ServiceComputeLoggingSplunkOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSplunk) string { return v.Token }).(pulumi.StringOutput)
}

// The Splunk URL to stream logs to
func (o ServiceComputeLoggingSplunkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSplunk) string { return v.Url }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging. Default: `false`
func (o ServiceComputeLoggingSplunkOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSplunk) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type ServiceComputeLoggingSplunkArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSplunk)(nil)).Elem()
}

func (o ServiceComputeLoggingSplunkArrayOutput) ToServiceComputeLoggingSplunkArrayOutput() ServiceComputeLoggingSplunkArrayOutput {
	return o
}

func (o ServiceComputeLoggingSplunkArrayOutput) ToServiceComputeLoggingSplunkArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSplunkArrayOutput {
	return o
}

func (o ServiceComputeLoggingSplunkArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingSplunkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingSplunk {
		return vs[0].([]ServiceComputeLoggingSplunk)[vs[1].(int)]
	}).(ServiceComputeLoggingSplunkOutput)
}

type ServiceComputeLoggingSumologic struct {
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The URL to Sumologic collector endpoint
	Url string `pulumi:"url"`
}

// ServiceComputeLoggingSumologicInput is an input type that accepts ServiceComputeLoggingSumologicArgs and ServiceComputeLoggingSumologicOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSumologicInput` via:
//
//	ServiceComputeLoggingSumologicArgs{...}
type ServiceComputeLoggingSumologicInput interface {
	pulumi.Input

	ToServiceComputeLoggingSumologicOutput() ServiceComputeLoggingSumologicOutput
	ToServiceComputeLoggingSumologicOutputWithContext(context.Context) ServiceComputeLoggingSumologicOutput
}

type ServiceComputeLoggingSumologicArgs struct {
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The URL to Sumologic collector endpoint
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceComputeLoggingSumologicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSumologic)(nil)).Elem()
}

func (i ServiceComputeLoggingSumologicArgs) ToServiceComputeLoggingSumologicOutput() ServiceComputeLoggingSumologicOutput {
	return i.ToServiceComputeLoggingSumologicOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSumologicArgs) ToServiceComputeLoggingSumologicOutputWithContext(ctx context.Context) ServiceComputeLoggingSumologicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSumologicOutput)
}

// ServiceComputeLoggingSumologicArrayInput is an input type that accepts ServiceComputeLoggingSumologicArray and ServiceComputeLoggingSumologicArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSumologicArrayInput` via:
//
//	ServiceComputeLoggingSumologicArray{ ServiceComputeLoggingSumologicArgs{...} }
type ServiceComputeLoggingSumologicArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingSumologicArrayOutput() ServiceComputeLoggingSumologicArrayOutput
	ToServiceComputeLoggingSumologicArrayOutputWithContext(context.Context) ServiceComputeLoggingSumologicArrayOutput
}

type ServiceComputeLoggingSumologicArray []ServiceComputeLoggingSumologicInput

func (ServiceComputeLoggingSumologicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSumologic)(nil)).Elem()
}

func (i ServiceComputeLoggingSumologicArray) ToServiceComputeLoggingSumologicArrayOutput() ServiceComputeLoggingSumologicArrayOutput {
	return i.ToServiceComputeLoggingSumologicArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSumologicArray) ToServiceComputeLoggingSumologicArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSumologicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSumologicArrayOutput)
}

type ServiceComputeLoggingSumologicOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSumologicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSumologic)(nil)).Elem()
}

func (o ServiceComputeLoggingSumologicOutput) ToServiceComputeLoggingSumologicOutput() ServiceComputeLoggingSumologicOutput {
	return o
}

func (o ServiceComputeLoggingSumologicOutput) ToServiceComputeLoggingSumologicOutputWithContext(ctx context.Context) ServiceComputeLoggingSumologicOutput {
	return o
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingSumologicOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSumologic) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingSumologicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSumologic) string { return v.Name }).(pulumi.StringOutput)
}

// The URL to Sumologic collector endpoint
func (o ServiceComputeLoggingSumologicOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSumologic) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceComputeLoggingSumologicArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSumologicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSumologic)(nil)).Elem()
}

func (o ServiceComputeLoggingSumologicArrayOutput) ToServiceComputeLoggingSumologicArrayOutput() ServiceComputeLoggingSumologicArrayOutput {
	return o
}

func (o ServiceComputeLoggingSumologicArrayOutput) ToServiceComputeLoggingSumologicArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSumologicArrayOutput {
	return o
}

func (o ServiceComputeLoggingSumologicArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingSumologicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingSumologic {
		return vs[0].([]ServiceComputeLoggingSumologic)[vs[1].(int)]
	}).(ServiceComputeLoggingSumologicOutput)
}

type ServiceComputeLoggingSyslog struct {
	// A hostname or IPv4 address of the Syslog endpoint
	Address string `pulumi:"address"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
	Port *int `pulumi:"port"`
	// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname *string `pulumi:"tlsHostname"`
	// Whether to prepend each message with a specific token
	Token *string `pulumi:"token"`
	// Whether to use TLS for secure logging. Default `false`
	UseTls *bool `pulumi:"useTls"`
}

// ServiceComputeLoggingSyslogInput is an input type that accepts ServiceComputeLoggingSyslogArgs and ServiceComputeLoggingSyslogOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSyslogInput` via:
//
//	ServiceComputeLoggingSyslogArgs{...}
type ServiceComputeLoggingSyslogInput interface {
	pulumi.Input

	ToServiceComputeLoggingSyslogOutput() ServiceComputeLoggingSyslogOutput
	ToServiceComputeLoggingSyslogOutputWithContext(context.Context) ServiceComputeLoggingSyslogOutput
}

type ServiceComputeLoggingSyslogArgs struct {
	// A hostname or IPv4 address of the Syslog endpoint
	Address pulumi.StringInput `pulumi:"address"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// Whether to prepend each message with a specific token
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Whether to use TLS for secure logging. Default `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (ServiceComputeLoggingSyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSyslog)(nil)).Elem()
}

func (i ServiceComputeLoggingSyslogArgs) ToServiceComputeLoggingSyslogOutput() ServiceComputeLoggingSyslogOutput {
	return i.ToServiceComputeLoggingSyslogOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSyslogArgs) ToServiceComputeLoggingSyslogOutputWithContext(ctx context.Context) ServiceComputeLoggingSyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSyslogOutput)
}

// ServiceComputeLoggingSyslogArrayInput is an input type that accepts ServiceComputeLoggingSyslogArray and ServiceComputeLoggingSyslogArrayOutput values.
// You can construct a concrete instance of `ServiceComputeLoggingSyslogArrayInput` via:
//
//	ServiceComputeLoggingSyslogArray{ ServiceComputeLoggingSyslogArgs{...} }
type ServiceComputeLoggingSyslogArrayInput interface {
	pulumi.Input

	ToServiceComputeLoggingSyslogArrayOutput() ServiceComputeLoggingSyslogArrayOutput
	ToServiceComputeLoggingSyslogArrayOutputWithContext(context.Context) ServiceComputeLoggingSyslogArrayOutput
}

type ServiceComputeLoggingSyslogArray []ServiceComputeLoggingSyslogInput

func (ServiceComputeLoggingSyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSyslog)(nil)).Elem()
}

func (i ServiceComputeLoggingSyslogArray) ToServiceComputeLoggingSyslogArrayOutput() ServiceComputeLoggingSyslogArrayOutput {
	return i.ToServiceComputeLoggingSyslogArrayOutputWithContext(context.Background())
}

func (i ServiceComputeLoggingSyslogArray) ToServiceComputeLoggingSyslogArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeLoggingSyslogArrayOutput)
}

type ServiceComputeLoggingSyslogOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeLoggingSyslog)(nil)).Elem()
}

func (o ServiceComputeLoggingSyslogOutput) ToServiceComputeLoggingSyslogOutput() ServiceComputeLoggingSyslogOutput {
	return o
}

func (o ServiceComputeLoggingSyslogOutput) ToServiceComputeLoggingSyslogOutputWithContext(ctx context.Context) ServiceComputeLoggingSyslogOutput {
	return o
}

// A hostname or IPv4 address of the Syslog endpoint
func (o ServiceComputeLoggingSyslogOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) string { return v.Address }).(pulumi.StringOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceComputeLoggingSyslogOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceComputeLoggingSyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) string { return v.Name }).(pulumi.StringOutput)
}

// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
func (o ServiceComputeLoggingSyslogOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
func (o ServiceComputeLoggingSyslogOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
func (o ServiceComputeLoggingSyslogOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
func (o ServiceComputeLoggingSyslogOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// Used during the TLS handshake to validate the certificate
func (o ServiceComputeLoggingSyslogOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// Whether to prepend each message with a specific token
func (o ServiceComputeLoggingSyslogOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Whether to use TLS for secure logging. Default `false`
func (o ServiceComputeLoggingSyslogOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeLoggingSyslog) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type ServiceComputeLoggingSyslogArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeLoggingSyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeLoggingSyslog)(nil)).Elem()
}

func (o ServiceComputeLoggingSyslogArrayOutput) ToServiceComputeLoggingSyslogArrayOutput() ServiceComputeLoggingSyslogArrayOutput {
	return o
}

func (o ServiceComputeLoggingSyslogArrayOutput) ToServiceComputeLoggingSyslogArrayOutputWithContext(ctx context.Context) ServiceComputeLoggingSyslogArrayOutput {
	return o
}

func (o ServiceComputeLoggingSyslogArrayOutput) Index(i pulumi.IntInput) ServiceComputeLoggingSyslogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeLoggingSyslog {
		return vs[0].([]ServiceComputeLoggingSyslog)[vs[1].(int)]
	}).(ServiceComputeLoggingSyslogOutput)
}

type ServiceComputePackage struct {
	// The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
	Content *string `pulumi:"content"`
	// The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
	Filename *string `pulumi:"filename"`
	// Used to trigger updates. Must be set to a SHA512 hash of all files (in sorted order) within the package. The usual way to set this is using the fastly*package*hash data source.
	SourceCodeHash *string `pulumi:"sourceCodeHash"`
}

// ServiceComputePackageInput is an input type that accepts ServiceComputePackageArgs and ServiceComputePackageOutput values.
// You can construct a concrete instance of `ServiceComputePackageInput` via:
//
//	ServiceComputePackageArgs{...}
type ServiceComputePackageInput interface {
	pulumi.Input

	ToServiceComputePackageOutput() ServiceComputePackageOutput
	ToServiceComputePackageOutputWithContext(context.Context) ServiceComputePackageOutput
}

type ServiceComputePackageArgs struct {
	// The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
	Filename pulumi.StringPtrInput `pulumi:"filename"`
	// Used to trigger updates. Must be set to a SHA512 hash of all files (in sorted order) within the package. The usual way to set this is using the fastly*package*hash data source.
	SourceCodeHash pulumi.StringPtrInput `pulumi:"sourceCodeHash"`
}

func (ServiceComputePackageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputePackage)(nil)).Elem()
}

func (i ServiceComputePackageArgs) ToServiceComputePackageOutput() ServiceComputePackageOutput {
	return i.ToServiceComputePackageOutputWithContext(context.Background())
}

func (i ServiceComputePackageArgs) ToServiceComputePackageOutputWithContext(ctx context.Context) ServiceComputePackageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePackageOutput)
}

func (i ServiceComputePackageArgs) ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput {
	return i.ToServiceComputePackagePtrOutputWithContext(context.Background())
}

func (i ServiceComputePackageArgs) ToServiceComputePackagePtrOutputWithContext(ctx context.Context) ServiceComputePackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePackageOutput).ToServiceComputePackagePtrOutputWithContext(ctx)
}

// ServiceComputePackagePtrInput is an input type that accepts ServiceComputePackageArgs, ServiceComputePackagePtr and ServiceComputePackagePtrOutput values.
// You can construct a concrete instance of `ServiceComputePackagePtrInput` via:
//
//	        ServiceComputePackageArgs{...}
//
//	or:
//
//	        nil
type ServiceComputePackagePtrInput interface {
	pulumi.Input

	ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput
	ToServiceComputePackagePtrOutputWithContext(context.Context) ServiceComputePackagePtrOutput
}

type serviceComputePackagePtrType ServiceComputePackageArgs

func ServiceComputePackagePtr(v *ServiceComputePackageArgs) ServiceComputePackagePtrInput {
	return (*serviceComputePackagePtrType)(v)
}

func (*serviceComputePackagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceComputePackage)(nil)).Elem()
}

func (i *serviceComputePackagePtrType) ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput {
	return i.ToServiceComputePackagePtrOutputWithContext(context.Background())
}

func (i *serviceComputePackagePtrType) ToServiceComputePackagePtrOutputWithContext(ctx context.Context) ServiceComputePackagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePackagePtrOutput)
}

type ServiceComputePackageOutput struct{ *pulumi.OutputState }

func (ServiceComputePackageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputePackage)(nil)).Elem()
}

func (o ServiceComputePackageOutput) ToServiceComputePackageOutput() ServiceComputePackageOutput {
	return o
}

func (o ServiceComputePackageOutput) ToServiceComputePackageOutputWithContext(ctx context.Context) ServiceComputePackageOutput {
	return o
}

func (o ServiceComputePackageOutput) ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput {
	return o.ToServiceComputePackagePtrOutputWithContext(context.Background())
}

func (o ServiceComputePackageOutput) ToServiceComputePackagePtrOutputWithContext(ctx context.Context) ServiceComputePackagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceComputePackage) *ServiceComputePackage {
		return &v
	}).(ServiceComputePackagePtrOutput)
}

// The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
func (o ServiceComputePackageOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputePackage) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
func (o ServiceComputePackageOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputePackage) *string { return v.Filename }).(pulumi.StringPtrOutput)
}

// Used to trigger updates. Must be set to a SHA512 hash of all files (in sorted order) within the package. The usual way to set this is using the fastly*package*hash data source.
func (o ServiceComputePackageOutput) SourceCodeHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputePackage) *string { return v.SourceCodeHash }).(pulumi.StringPtrOutput)
}

type ServiceComputePackagePtrOutput struct{ *pulumi.OutputState }

func (ServiceComputePackagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceComputePackage)(nil)).Elem()
}

func (o ServiceComputePackagePtrOutput) ToServiceComputePackagePtrOutput() ServiceComputePackagePtrOutput {
	return o
}

func (o ServiceComputePackagePtrOutput) ToServiceComputePackagePtrOutputWithContext(ctx context.Context) ServiceComputePackagePtrOutput {
	return o
}

func (o ServiceComputePackagePtrOutput) Elem() ServiceComputePackageOutput {
	return o.ApplyT(func(v *ServiceComputePackage) ServiceComputePackage {
		if v != nil {
			return *v
		}
		var ret ServiceComputePackage
		return ret
	}).(ServiceComputePackageOutput)
}

// The contents of the Wasm deployment package as a base64 encoded string (e.g. could be provided using an input variable or via external data source output variable). Conflicts with `filename`. Exactly one of these two arguments must be specified
func (o ServiceComputePackagePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceComputePackage) *string {
		if v == nil {
			return nil
		}
		return v.Content
	}).(pulumi.StringPtrOutput)
}

// The path to the Wasm deployment package within your local filesystem. Conflicts with `content`. Exactly one of these two arguments must be specified
func (o ServiceComputePackagePtrOutput) Filename() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceComputePackage) *string {
		if v == nil {
			return nil
		}
		return v.Filename
	}).(pulumi.StringPtrOutput)
}

// Used to trigger updates. Must be set to a SHA512 hash of all files (in sorted order) within the package. The usual way to set this is using the fastly*package*hash data source.
func (o ServiceComputePackagePtrOutput) SourceCodeHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceComputePackage) *string {
		if v == nil {
			return nil
		}
		return v.SourceCodeHash
	}).(pulumi.StringPtrOutput)
}

type ServiceComputeProductEnablement struct {
	// Enable Fanout support
	Fanout *bool `pulumi:"fanout"`
	// Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
	Name *string `pulumi:"name"`
	// Enable WebSockets support
	Websockets *bool `pulumi:"websockets"`
}

// ServiceComputeProductEnablementInput is an input type that accepts ServiceComputeProductEnablementArgs and ServiceComputeProductEnablementOutput values.
// You can construct a concrete instance of `ServiceComputeProductEnablementInput` via:
//
//	ServiceComputeProductEnablementArgs{...}
type ServiceComputeProductEnablementInput interface {
	pulumi.Input

	ToServiceComputeProductEnablementOutput() ServiceComputeProductEnablementOutput
	ToServiceComputeProductEnablementOutputWithContext(context.Context) ServiceComputeProductEnablementOutput
}

type ServiceComputeProductEnablementArgs struct {
	// Enable Fanout support
	Fanout pulumi.BoolPtrInput `pulumi:"fanout"`
	// Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Enable WebSockets support
	Websockets pulumi.BoolPtrInput `pulumi:"websockets"`
}

func (ServiceComputeProductEnablementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeProductEnablement)(nil)).Elem()
}

func (i ServiceComputeProductEnablementArgs) ToServiceComputeProductEnablementOutput() ServiceComputeProductEnablementOutput {
	return i.ToServiceComputeProductEnablementOutputWithContext(context.Background())
}

func (i ServiceComputeProductEnablementArgs) ToServiceComputeProductEnablementOutputWithContext(ctx context.Context) ServiceComputeProductEnablementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeProductEnablementOutput)
}

func (i ServiceComputeProductEnablementArgs) ToServiceComputeProductEnablementPtrOutput() ServiceComputeProductEnablementPtrOutput {
	return i.ToServiceComputeProductEnablementPtrOutputWithContext(context.Background())
}

func (i ServiceComputeProductEnablementArgs) ToServiceComputeProductEnablementPtrOutputWithContext(ctx context.Context) ServiceComputeProductEnablementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeProductEnablementOutput).ToServiceComputeProductEnablementPtrOutputWithContext(ctx)
}

// ServiceComputeProductEnablementPtrInput is an input type that accepts ServiceComputeProductEnablementArgs, ServiceComputeProductEnablementPtr and ServiceComputeProductEnablementPtrOutput values.
// You can construct a concrete instance of `ServiceComputeProductEnablementPtrInput` via:
//
//	        ServiceComputeProductEnablementArgs{...}
//
//	or:
//
//	        nil
type ServiceComputeProductEnablementPtrInput interface {
	pulumi.Input

	ToServiceComputeProductEnablementPtrOutput() ServiceComputeProductEnablementPtrOutput
	ToServiceComputeProductEnablementPtrOutputWithContext(context.Context) ServiceComputeProductEnablementPtrOutput
}

type serviceComputeProductEnablementPtrType ServiceComputeProductEnablementArgs

func ServiceComputeProductEnablementPtr(v *ServiceComputeProductEnablementArgs) ServiceComputeProductEnablementPtrInput {
	return (*serviceComputeProductEnablementPtrType)(v)
}

func (*serviceComputeProductEnablementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceComputeProductEnablement)(nil)).Elem()
}

func (i *serviceComputeProductEnablementPtrType) ToServiceComputeProductEnablementPtrOutput() ServiceComputeProductEnablementPtrOutput {
	return i.ToServiceComputeProductEnablementPtrOutputWithContext(context.Background())
}

func (i *serviceComputeProductEnablementPtrType) ToServiceComputeProductEnablementPtrOutputWithContext(ctx context.Context) ServiceComputeProductEnablementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeProductEnablementPtrOutput)
}

type ServiceComputeProductEnablementOutput struct{ *pulumi.OutputState }

func (ServiceComputeProductEnablementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeProductEnablement)(nil)).Elem()
}

func (o ServiceComputeProductEnablementOutput) ToServiceComputeProductEnablementOutput() ServiceComputeProductEnablementOutput {
	return o
}

func (o ServiceComputeProductEnablementOutput) ToServiceComputeProductEnablementOutputWithContext(ctx context.Context) ServiceComputeProductEnablementOutput {
	return o
}

func (o ServiceComputeProductEnablementOutput) ToServiceComputeProductEnablementPtrOutput() ServiceComputeProductEnablementPtrOutput {
	return o.ToServiceComputeProductEnablementPtrOutputWithContext(context.Background())
}

func (o ServiceComputeProductEnablementOutput) ToServiceComputeProductEnablementPtrOutputWithContext(ctx context.Context) ServiceComputeProductEnablementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceComputeProductEnablement) *ServiceComputeProductEnablement {
		return &v
	}).(ServiceComputeProductEnablementPtrOutput)
}

// Enable Fanout support
func (o ServiceComputeProductEnablementOutput) Fanout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeProductEnablement) *bool { return v.Fanout }).(pulumi.BoolPtrOutput)
}

// Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
func (o ServiceComputeProductEnablementOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeProductEnablement) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Enable WebSockets support
func (o ServiceComputeProductEnablementOutput) Websockets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceComputeProductEnablement) *bool { return v.Websockets }).(pulumi.BoolPtrOutput)
}

type ServiceComputeProductEnablementPtrOutput struct{ *pulumi.OutputState }

func (ServiceComputeProductEnablementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceComputeProductEnablement)(nil)).Elem()
}

func (o ServiceComputeProductEnablementPtrOutput) ToServiceComputeProductEnablementPtrOutput() ServiceComputeProductEnablementPtrOutput {
	return o
}

func (o ServiceComputeProductEnablementPtrOutput) ToServiceComputeProductEnablementPtrOutputWithContext(ctx context.Context) ServiceComputeProductEnablementPtrOutput {
	return o
}

func (o ServiceComputeProductEnablementPtrOutput) Elem() ServiceComputeProductEnablementOutput {
	return o.ApplyT(func(v *ServiceComputeProductEnablement) ServiceComputeProductEnablement {
		if v != nil {
			return *v
		}
		var ret ServiceComputeProductEnablement
		return ret
	}).(ServiceComputeProductEnablementOutput)
}

// Enable Fanout support
func (o ServiceComputeProductEnablementPtrOutput) Fanout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceComputeProductEnablement) *bool {
		if v == nil {
			return nil
		}
		return v.Fanout
	}).(pulumi.BoolPtrOutput)
}

// Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
func (o ServiceComputeProductEnablementPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceComputeProductEnablement) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Enable WebSockets support
func (o ServiceComputeProductEnablementPtrOutput) Websockets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceComputeProductEnablement) *bool {
		if v == nil {
			return nil
		}
		return v.Websockets
	}).(pulumi.BoolPtrOutput)
}

type ServiceComputeResourceLink struct {
	// An alphanumeric string identifying the resource link.
	LinkId *string `pulumi:"linkId"`
	// The name of the resource link.
	Name string `pulumi:"name"`
	// The ID of the underlying linked resource.
	ResourceId string `pulumi:"resourceId"`
}

// ServiceComputeResourceLinkInput is an input type that accepts ServiceComputeResourceLinkArgs and ServiceComputeResourceLinkOutput values.
// You can construct a concrete instance of `ServiceComputeResourceLinkInput` via:
//
//	ServiceComputeResourceLinkArgs{...}
type ServiceComputeResourceLinkInput interface {
	pulumi.Input

	ToServiceComputeResourceLinkOutput() ServiceComputeResourceLinkOutput
	ToServiceComputeResourceLinkOutputWithContext(context.Context) ServiceComputeResourceLinkOutput
}

type ServiceComputeResourceLinkArgs struct {
	// An alphanumeric string identifying the resource link.
	LinkId pulumi.StringPtrInput `pulumi:"linkId"`
	// The name of the resource link.
	Name pulumi.StringInput `pulumi:"name"`
	// The ID of the underlying linked resource.
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
}

func (ServiceComputeResourceLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeResourceLink)(nil)).Elem()
}

func (i ServiceComputeResourceLinkArgs) ToServiceComputeResourceLinkOutput() ServiceComputeResourceLinkOutput {
	return i.ToServiceComputeResourceLinkOutputWithContext(context.Background())
}

func (i ServiceComputeResourceLinkArgs) ToServiceComputeResourceLinkOutputWithContext(ctx context.Context) ServiceComputeResourceLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeResourceLinkOutput)
}

// ServiceComputeResourceLinkArrayInput is an input type that accepts ServiceComputeResourceLinkArray and ServiceComputeResourceLinkArrayOutput values.
// You can construct a concrete instance of `ServiceComputeResourceLinkArrayInput` via:
//
//	ServiceComputeResourceLinkArray{ ServiceComputeResourceLinkArgs{...} }
type ServiceComputeResourceLinkArrayInput interface {
	pulumi.Input

	ToServiceComputeResourceLinkArrayOutput() ServiceComputeResourceLinkArrayOutput
	ToServiceComputeResourceLinkArrayOutputWithContext(context.Context) ServiceComputeResourceLinkArrayOutput
}

type ServiceComputeResourceLinkArray []ServiceComputeResourceLinkInput

func (ServiceComputeResourceLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeResourceLink)(nil)).Elem()
}

func (i ServiceComputeResourceLinkArray) ToServiceComputeResourceLinkArrayOutput() ServiceComputeResourceLinkArrayOutput {
	return i.ToServiceComputeResourceLinkArrayOutputWithContext(context.Background())
}

func (i ServiceComputeResourceLinkArray) ToServiceComputeResourceLinkArrayOutputWithContext(ctx context.Context) ServiceComputeResourceLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeResourceLinkArrayOutput)
}

type ServiceComputeResourceLinkOutput struct{ *pulumi.OutputState }

func (ServiceComputeResourceLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeResourceLink)(nil)).Elem()
}

func (o ServiceComputeResourceLinkOutput) ToServiceComputeResourceLinkOutput() ServiceComputeResourceLinkOutput {
	return o
}

func (o ServiceComputeResourceLinkOutput) ToServiceComputeResourceLinkOutputWithContext(ctx context.Context) ServiceComputeResourceLinkOutput {
	return o
}

// An alphanumeric string identifying the resource link.
func (o ServiceComputeResourceLinkOutput) LinkId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceComputeResourceLink) *string { return v.LinkId }).(pulumi.StringPtrOutput)
}

// The name of the resource link.
func (o ServiceComputeResourceLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeResourceLink) string { return v.Name }).(pulumi.StringOutput)
}

// The ID of the underlying linked resource.
func (o ServiceComputeResourceLinkOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceComputeResourceLink) string { return v.ResourceId }).(pulumi.StringOutput)
}

type ServiceComputeResourceLinkArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeResourceLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceComputeResourceLink)(nil)).Elem()
}

func (o ServiceComputeResourceLinkArrayOutput) ToServiceComputeResourceLinkArrayOutput() ServiceComputeResourceLinkArrayOutput {
	return o
}

func (o ServiceComputeResourceLinkArrayOutput) ToServiceComputeResourceLinkArrayOutputWithContext(ctx context.Context) ServiceComputeResourceLinkArrayOutput {
	return o
}

func (o ServiceComputeResourceLinkArrayOutput) Index(i pulumi.IntInput) ServiceComputeResourceLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceComputeResourceLink {
		return vs[0].([]ServiceComputeResourceLink)[vs[1].(int)]
	}).(ServiceComputeResourceLinkOutput)
}

type ServiceVclAcl struct {
	// The ID of the ACL
	AclId *string `pulumi:"aclId"`
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name string `pulumi:"name"`
}

// ServiceVclAclInput is an input type that accepts ServiceVclAclArgs and ServiceVclAclOutput values.
// You can construct a concrete instance of `ServiceVclAclInput` via:
//
//	ServiceVclAclArgs{...}
type ServiceVclAclInput interface {
	pulumi.Input

	ToServiceVclAclOutput() ServiceVclAclOutput
	ToServiceVclAclOutputWithContext(context.Context) ServiceVclAclOutput
}

type ServiceVclAclArgs struct {
	// The ID of the ACL
	AclId pulumi.StringPtrInput `pulumi:"aclId"`
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput `pulumi:"forceDestroy"`
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceVclAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclAcl)(nil)).Elem()
}

func (i ServiceVclAclArgs) ToServiceVclAclOutput() ServiceVclAclOutput {
	return i.ToServiceVclAclOutputWithContext(context.Background())
}

func (i ServiceVclAclArgs) ToServiceVclAclOutputWithContext(ctx context.Context) ServiceVclAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclAclOutput)
}

// ServiceVclAclArrayInput is an input type that accepts ServiceVclAclArray and ServiceVclAclArrayOutput values.
// You can construct a concrete instance of `ServiceVclAclArrayInput` via:
//
//	ServiceVclAclArray{ ServiceVclAclArgs{...} }
type ServiceVclAclArrayInput interface {
	pulumi.Input

	ToServiceVclAclArrayOutput() ServiceVclAclArrayOutput
	ToServiceVclAclArrayOutputWithContext(context.Context) ServiceVclAclArrayOutput
}

type ServiceVclAclArray []ServiceVclAclInput

func (ServiceVclAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclAcl)(nil)).Elem()
}

func (i ServiceVclAclArray) ToServiceVclAclArrayOutput() ServiceVclAclArrayOutput {
	return i.ToServiceVclAclArrayOutputWithContext(context.Background())
}

func (i ServiceVclAclArray) ToServiceVclAclArrayOutputWithContext(ctx context.Context) ServiceVclAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclAclArrayOutput)
}

type ServiceVclAclOutput struct{ *pulumi.OutputState }

func (ServiceVclAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclAcl)(nil)).Elem()
}

func (o ServiceVclAclOutput) ToServiceVclAclOutput() ServiceVclAclOutput {
	return o
}

func (o ServiceVclAclOutput) ToServiceVclAclOutputWithContext(ctx context.Context) ServiceVclAclOutput {
	return o
}

// The ID of the ACL
func (o ServiceVclAclOutput) AclId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclAcl) *string { return v.AclId }).(pulumi.StringPtrOutput)
}

// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
func (o ServiceVclAclOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclAcl) *bool { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
func (o ServiceVclAclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclAcl) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceVclAclArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclAcl)(nil)).Elem()
}

func (o ServiceVclAclArrayOutput) ToServiceVclAclArrayOutput() ServiceVclAclArrayOutput {
	return o
}

func (o ServiceVclAclArrayOutput) ToServiceVclAclArrayOutputWithContext(ctx context.Context) ServiceVclAclArrayOutput {
	return o
}

func (o ServiceVclAclArrayOutput) Index(i pulumi.IntInput) ServiceVclAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclAcl {
		return vs[0].([]ServiceVclAcl)[vs[1].(int)]
	}).(ServiceVclAclOutput)
}

type ServiceVclBackend struct {
	// An IPv4, hostname, or IPv6 address for the Backend
	Address string `pulumi:"address"`
	// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `false`
	AutoLoadbalance *bool `pulumi:"autoLoadbalance"`
	// How long to wait between bytes in milliseconds. Default `10000`
	BetweenBytesTimeout *int `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds. Default `1000`
	ConnectTimeout *int `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`
	ErrorThreshold *int `pulumi:"errorThreshold"`
	// How long to wait for the first bytes in milliseconds. Default `15000`
	FirstByteTimeout *int `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthcheck *string `pulumi:"healthcheck"`
	// How long in seconds to keep a persistent connection to the backend between requests.
	KeepaliveTime *int `pulumi:"keepaliveTime"`
	// Maximum number of connections for this Backend. Default `200`
	MaxConn *int `pulumi:"maxConn"`
	// Maximum allowed TLS version on SSL connections to this backend.
	MaxTlsVersion *string `pulumi:"maxTlsVersion"`
	// Minimum allowed TLS version on SSL connections to this backend.
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The hostname to override the Host header
	OverrideHost *string `pulumi:"overrideHost"`
	// The port number on which the Backend responds. Default `80`
	Port *int `pulumi:"port"`
	// Name of a condition, which if met, will select this backend during a request.
	RequestCondition *string `pulumi:"requestCondition"`
	// Value that when shared across backends will enable those backends to share the same health check.
	ShareKey *string `pulumi:"shareKey"`
	// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
	Shield *string `pulumi:"shield"`
	// CA certificate attached to origin.
	SslCaCert *string `pulumi:"sslCaCert"`
	// Configure certificate validation. Does not affect SNI at all
	SslCertHostname *string `pulumi:"sslCertHostname"`
	// Be strict about checking SSL certs. Default `true`
	SslCheckCert *bool `pulumi:"sslCheckCert"`
	// Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
	SslCiphers *string `pulumi:"sslCiphers"`
	// Client certificate attached to origin. Used when connecting to the backend
	SslClientCert *string `pulumi:"sslClientCert"`
	// Client key attached to origin. Used when connecting to the backend
	SslClientKey *string `pulumi:"sslClientKey"`
	// Configure SNI in the TLS handshake. Does not affect cert validation at all
	SslSniHostname *string `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the Backend. Default `false`
	UseSsl *bool `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
	Weight *int `pulumi:"weight"`
}

// ServiceVclBackendInput is an input type that accepts ServiceVclBackendArgs and ServiceVclBackendOutput values.
// You can construct a concrete instance of `ServiceVclBackendInput` via:
//
//	ServiceVclBackendArgs{...}
type ServiceVclBackendInput interface {
	pulumi.Input

	ToServiceVclBackendOutput() ServiceVclBackendOutput
	ToServiceVclBackendOutputWithContext(context.Context) ServiceVclBackendOutput
}

type ServiceVclBackendArgs struct {
	// An IPv4, hostname, or IPv6 address for the Backend
	Address pulumi.StringInput `pulumi:"address"`
	// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `false`
	AutoLoadbalance pulumi.BoolPtrInput `pulumi:"autoLoadbalance"`
	// How long to wait between bytes in milliseconds. Default `10000`
	BetweenBytesTimeout pulumi.IntPtrInput `pulumi:"betweenBytesTimeout"`
	// How long to wait for a timeout in milliseconds. Default `1000`
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	// Number of errors to allow before the Backend is marked as down. Default `0`
	ErrorThreshold pulumi.IntPtrInput `pulumi:"errorThreshold"`
	// How long to wait for the first bytes in milliseconds. Default `15000`
	FirstByteTimeout pulumi.IntPtrInput `pulumi:"firstByteTimeout"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthcheck pulumi.StringPtrInput `pulumi:"healthcheck"`
	// How long in seconds to keep a persistent connection to the backend between requests.
	KeepaliveTime pulumi.IntPtrInput `pulumi:"keepaliveTime"`
	// Maximum number of connections for this Backend. Default `200`
	MaxConn pulumi.IntPtrInput `pulumi:"maxConn"`
	// Maximum allowed TLS version on SSL connections to this backend.
	MaxTlsVersion pulumi.StringPtrInput `pulumi:"maxTlsVersion"`
	// Minimum allowed TLS version on SSL connections to this backend.
	MinTlsVersion pulumi.StringPtrInput `pulumi:"minTlsVersion"`
	// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The hostname to override the Host header
	OverrideHost pulumi.StringPtrInput `pulumi:"overrideHost"`
	// The port number on which the Backend responds. Default `80`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of a condition, which if met, will select this backend during a request.
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// Value that when shared across backends will enable those backends to share the same health check.
	ShareKey pulumi.StringPtrInput `pulumi:"shareKey"`
	// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
	Shield pulumi.StringPtrInput `pulumi:"shield"`
	// CA certificate attached to origin.
	SslCaCert pulumi.StringPtrInput `pulumi:"sslCaCert"`
	// Configure certificate validation. Does not affect SNI at all
	SslCertHostname pulumi.StringPtrInput `pulumi:"sslCertHostname"`
	// Be strict about checking SSL certs. Default `true`
	SslCheckCert pulumi.BoolPtrInput `pulumi:"sslCheckCert"`
	// Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
	SslCiphers pulumi.StringPtrInput `pulumi:"sslCiphers"`
	// Client certificate attached to origin. Used when connecting to the backend
	SslClientCert pulumi.StringPtrInput `pulumi:"sslClientCert"`
	// Client key attached to origin. Used when connecting to the backend
	SslClientKey pulumi.StringPtrInput `pulumi:"sslClientKey"`
	// Configure SNI in the TLS handshake. Does not affect cert validation at all
	SslSniHostname pulumi.StringPtrInput `pulumi:"sslSniHostname"`
	// Whether or not to use SSL to reach the Backend. Default `false`
	UseSsl pulumi.BoolPtrInput `pulumi:"useSsl"`
	// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServiceVclBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclBackend)(nil)).Elem()
}

func (i ServiceVclBackendArgs) ToServiceVclBackendOutput() ServiceVclBackendOutput {
	return i.ToServiceVclBackendOutputWithContext(context.Background())
}

func (i ServiceVclBackendArgs) ToServiceVclBackendOutputWithContext(ctx context.Context) ServiceVclBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclBackendOutput)
}

// ServiceVclBackendArrayInput is an input type that accepts ServiceVclBackendArray and ServiceVclBackendArrayOutput values.
// You can construct a concrete instance of `ServiceVclBackendArrayInput` via:
//
//	ServiceVclBackendArray{ ServiceVclBackendArgs{...} }
type ServiceVclBackendArrayInput interface {
	pulumi.Input

	ToServiceVclBackendArrayOutput() ServiceVclBackendArrayOutput
	ToServiceVclBackendArrayOutputWithContext(context.Context) ServiceVclBackendArrayOutput
}

type ServiceVclBackendArray []ServiceVclBackendInput

func (ServiceVclBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclBackend)(nil)).Elem()
}

func (i ServiceVclBackendArray) ToServiceVclBackendArrayOutput() ServiceVclBackendArrayOutput {
	return i.ToServiceVclBackendArrayOutputWithContext(context.Background())
}

func (i ServiceVclBackendArray) ToServiceVclBackendArrayOutputWithContext(ctx context.Context) ServiceVclBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclBackendArrayOutput)
}

type ServiceVclBackendOutput struct{ *pulumi.OutputState }

func (ServiceVclBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclBackend)(nil)).Elem()
}

func (o ServiceVclBackendOutput) ToServiceVclBackendOutput() ServiceVclBackendOutput {
	return o
}

func (o ServiceVclBackendOutput) ToServiceVclBackendOutputWithContext(ctx context.Context) ServiceVclBackendOutput {
	return o
}

// An IPv4, hostname, or IPv6 address for the Backend
func (o ServiceVclBackendOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclBackend) string { return v.Address }).(pulumi.StringOutput)
}

// Denotes if this Backend should be included in the pool of backends that requests are load balanced against. Default `false`
func (o ServiceVclBackendOutput) AutoLoadbalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *bool { return v.AutoLoadbalance }).(pulumi.BoolPtrOutput)
}

// How long to wait between bytes in milliseconds. Default `10000`
func (o ServiceVclBackendOutput) BetweenBytesTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *int { return v.BetweenBytesTimeout }).(pulumi.IntPtrOutput)
}

// How long to wait for a timeout in milliseconds. Default `1000`
func (o ServiceVclBackendOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

// Number of errors to allow before the Backend is marked as down. Default `0`
func (o ServiceVclBackendOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

// How long to wait for the first bytes in milliseconds. Default `15000`
func (o ServiceVclBackendOutput) FirstByteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *int { return v.FirstByteTimeout }).(pulumi.IntPtrOutput)
}

// Name of a defined `healthcheck` to assign to this backend
func (o ServiceVclBackendOutput) Healthcheck() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.Healthcheck }).(pulumi.StringPtrOutput)
}

// How long in seconds to keep a persistent connection to the backend between requests.
func (o ServiceVclBackendOutput) KeepaliveTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *int { return v.KeepaliveTime }).(pulumi.IntPtrOutput)
}

// Maximum number of connections for this Backend. Default `200`
func (o ServiceVclBackendOutput) MaxConn() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *int { return v.MaxConn }).(pulumi.IntPtrOutput)
}

// Maximum allowed TLS version on SSL connections to this backend.
func (o ServiceVclBackendOutput) MaxTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.MaxTlsVersion }).(pulumi.StringPtrOutput)
}

// Minimum allowed TLS version on SSL connections to this backend.
func (o ServiceVclBackendOutput) MinTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.MinTlsVersion }).(pulumi.StringPtrOutput)
}

// Name for this Backend. Must be unique to this Service. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclBackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclBackend) string { return v.Name }).(pulumi.StringOutput)
}

// The hostname to override the Host header
func (o ServiceVclBackendOutput) OverrideHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.OverrideHost }).(pulumi.StringPtrOutput)
}

// The port number on which the Backend responds. Default `80`
func (o ServiceVclBackendOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of a condition, which if met, will select this backend during a request.
func (o ServiceVclBackendOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// Value that when shared across backends will enable those backends to share the same health check.
func (o ServiceVclBackendOutput) ShareKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.ShareKey }).(pulumi.StringPtrOutput)
}

// The POP of the shield designated to reduce inbound load. Valid values for `shield` are included in the `GET /datacenters` API response
func (o ServiceVclBackendOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

// CA certificate attached to origin.
func (o ServiceVclBackendOutput) SslCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.SslCaCert }).(pulumi.StringPtrOutput)
}

// Configure certificate validation. Does not affect SNI at all
func (o ServiceVclBackendOutput) SslCertHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.SslCertHostname }).(pulumi.StringPtrOutput)
}

// Be strict about checking SSL certs. Default `true`
func (o ServiceVclBackendOutput) SslCheckCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *bool { return v.SslCheckCert }).(pulumi.BoolPtrOutput)
}

// Cipher list consisting of one or more cipher strings separated by colons. Commas or spaces are also acceptable separators but colons are normally used.
func (o ServiceVclBackendOutput) SslCiphers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.SslCiphers }).(pulumi.StringPtrOutput)
}

// Client certificate attached to origin. Used when connecting to the backend
func (o ServiceVclBackendOutput) SslClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.SslClientCert }).(pulumi.StringPtrOutput)
}

// Client key attached to origin. Used when connecting to the backend
func (o ServiceVclBackendOutput) SslClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.SslClientKey }).(pulumi.StringPtrOutput)
}

// Configure SNI in the TLS handshake. Does not affect cert validation at all
func (o ServiceVclBackendOutput) SslSniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *string { return v.SslSniHostname }).(pulumi.StringPtrOutput)
}

// Whether or not to use SSL to reach the Backend. Default `false`
func (o ServiceVclBackendOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *bool { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

// The [portion of traffic](https://docs.fastly.com/en/guides/load-balancing-configuration#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives weight / total of the traffic. Default `100`
func (o ServiceVclBackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclBackend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServiceVclBackendArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclBackend)(nil)).Elem()
}

func (o ServiceVclBackendArrayOutput) ToServiceVclBackendArrayOutput() ServiceVclBackendArrayOutput {
	return o
}

func (o ServiceVclBackendArrayOutput) ToServiceVclBackendArrayOutputWithContext(ctx context.Context) ServiceVclBackendArrayOutput {
	return o
}

func (o ServiceVclBackendArrayOutput) Index(i pulumi.IntInput) ServiceVclBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclBackend {
		return vs[0].([]ServiceVclBackend)[vs[1].(int)]
	}).(ServiceVclBackendOutput)
}

type ServiceVclCacheSetting struct {
	// One of cache, pass, or restart, as defined on Fastly's documentation under "[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)"
	Action *string `pulumi:"action"`
	// Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
	CacheCondition *string `pulumi:"cacheCondition"`
	// Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Max "Time To Live" for stale (unreachable) objects
	StaleTtl *int `pulumi:"staleTtl"`
	// The Time-To-Live (TTL) for the object
	Ttl *int `pulumi:"ttl"`
}

// ServiceVclCacheSettingInput is an input type that accepts ServiceVclCacheSettingArgs and ServiceVclCacheSettingOutput values.
// You can construct a concrete instance of `ServiceVclCacheSettingInput` via:
//
//	ServiceVclCacheSettingArgs{...}
type ServiceVclCacheSettingInput interface {
	pulumi.Input

	ToServiceVclCacheSettingOutput() ServiceVclCacheSettingOutput
	ToServiceVclCacheSettingOutputWithContext(context.Context) ServiceVclCacheSettingOutput
}

type ServiceVclCacheSettingArgs struct {
	// One of cache, pass, or restart, as defined on Fastly's documentation under "[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)"
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Max "Time To Live" for stale (unreachable) objects
	StaleTtl pulumi.IntPtrInput `pulumi:"staleTtl"`
	// The Time-To-Live (TTL) for the object
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (ServiceVclCacheSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclCacheSetting)(nil)).Elem()
}

func (i ServiceVclCacheSettingArgs) ToServiceVclCacheSettingOutput() ServiceVclCacheSettingOutput {
	return i.ToServiceVclCacheSettingOutputWithContext(context.Background())
}

func (i ServiceVclCacheSettingArgs) ToServiceVclCacheSettingOutputWithContext(ctx context.Context) ServiceVclCacheSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclCacheSettingOutput)
}

// ServiceVclCacheSettingArrayInput is an input type that accepts ServiceVclCacheSettingArray and ServiceVclCacheSettingArrayOutput values.
// You can construct a concrete instance of `ServiceVclCacheSettingArrayInput` via:
//
//	ServiceVclCacheSettingArray{ ServiceVclCacheSettingArgs{...} }
type ServiceVclCacheSettingArrayInput interface {
	pulumi.Input

	ToServiceVclCacheSettingArrayOutput() ServiceVclCacheSettingArrayOutput
	ToServiceVclCacheSettingArrayOutputWithContext(context.Context) ServiceVclCacheSettingArrayOutput
}

type ServiceVclCacheSettingArray []ServiceVclCacheSettingInput

func (ServiceVclCacheSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclCacheSetting)(nil)).Elem()
}

func (i ServiceVclCacheSettingArray) ToServiceVclCacheSettingArrayOutput() ServiceVclCacheSettingArrayOutput {
	return i.ToServiceVclCacheSettingArrayOutputWithContext(context.Background())
}

func (i ServiceVclCacheSettingArray) ToServiceVclCacheSettingArrayOutputWithContext(ctx context.Context) ServiceVclCacheSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclCacheSettingArrayOutput)
}

type ServiceVclCacheSettingOutput struct{ *pulumi.OutputState }

func (ServiceVclCacheSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclCacheSetting)(nil)).Elem()
}

func (o ServiceVclCacheSettingOutput) ToServiceVclCacheSettingOutput() ServiceVclCacheSettingOutput {
	return o
}

func (o ServiceVclCacheSettingOutput) ToServiceVclCacheSettingOutputWithContext(ctx context.Context) ServiceVclCacheSettingOutput {
	return o
}

// One of cache, pass, or restart, as defined on Fastly's documentation under "[Caching action descriptions](https://docs.fastly.com/en/guides/controlling-caching#caching-action-descriptions)"
func (o ServiceVclCacheSettingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclCacheSetting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Name of already defined `condition` used to test whether this settings object should be used. This `condition` must be of type `CACHE`
func (o ServiceVclCacheSettingOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclCacheSetting) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// Unique name for this Cache Setting. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclCacheSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclCacheSetting) string { return v.Name }).(pulumi.StringOutput)
}

// Max "Time To Live" for stale (unreachable) objects
func (o ServiceVclCacheSettingOutput) StaleTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclCacheSetting) *int { return v.StaleTtl }).(pulumi.IntPtrOutput)
}

// The Time-To-Live (TTL) for the object
func (o ServiceVclCacheSettingOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclCacheSetting) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type ServiceVclCacheSettingArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclCacheSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclCacheSetting)(nil)).Elem()
}

func (o ServiceVclCacheSettingArrayOutput) ToServiceVclCacheSettingArrayOutput() ServiceVclCacheSettingArrayOutput {
	return o
}

func (o ServiceVclCacheSettingArrayOutput) ToServiceVclCacheSettingArrayOutputWithContext(ctx context.Context) ServiceVclCacheSettingArrayOutput {
	return o
}

func (o ServiceVclCacheSettingArrayOutput) Index(i pulumi.IntInput) ServiceVclCacheSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclCacheSetting {
		return vs[0].([]ServiceVclCacheSetting)[vs[1].(int)]
	}).(ServiceVclCacheSettingOutput)
}

type ServiceVclCondition struct {
	// The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`
	Priority *int `pulumi:"priority"`
	// The statement used to determine if the condition is met
	Statement string `pulumi:"statement"`
	// Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)
	Type string `pulumi:"type"`
}

// ServiceVclConditionInput is an input type that accepts ServiceVclConditionArgs and ServiceVclConditionOutput values.
// You can construct a concrete instance of `ServiceVclConditionInput` via:
//
//	ServiceVclConditionArgs{...}
type ServiceVclConditionInput interface {
	pulumi.Input

	ToServiceVclConditionOutput() ServiceVclConditionOutput
	ToServiceVclConditionOutputWithContext(context.Context) ServiceVclConditionOutput
}

type ServiceVclConditionArgs struct {
	// The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The statement used to determine if the condition is met
	Statement pulumi.StringInput `pulumi:"statement"`
	// Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceVclConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclCondition)(nil)).Elem()
}

func (i ServiceVclConditionArgs) ToServiceVclConditionOutput() ServiceVclConditionOutput {
	return i.ToServiceVclConditionOutputWithContext(context.Background())
}

func (i ServiceVclConditionArgs) ToServiceVclConditionOutputWithContext(ctx context.Context) ServiceVclConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclConditionOutput)
}

// ServiceVclConditionArrayInput is an input type that accepts ServiceVclConditionArray and ServiceVclConditionArrayOutput values.
// You can construct a concrete instance of `ServiceVclConditionArrayInput` via:
//
//	ServiceVclConditionArray{ ServiceVclConditionArgs{...} }
type ServiceVclConditionArrayInput interface {
	pulumi.Input

	ToServiceVclConditionArrayOutput() ServiceVclConditionArrayOutput
	ToServiceVclConditionArrayOutputWithContext(context.Context) ServiceVclConditionArrayOutput
}

type ServiceVclConditionArray []ServiceVclConditionInput

func (ServiceVclConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclCondition)(nil)).Elem()
}

func (i ServiceVclConditionArray) ToServiceVclConditionArrayOutput() ServiceVclConditionArrayOutput {
	return i.ToServiceVclConditionArrayOutputWithContext(context.Background())
}

func (i ServiceVclConditionArray) ToServiceVclConditionArrayOutputWithContext(ctx context.Context) ServiceVclConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclConditionArrayOutput)
}

type ServiceVclConditionOutput struct{ *pulumi.OutputState }

func (ServiceVclConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclCondition)(nil)).Elem()
}

func (o ServiceVclConditionOutput) ToServiceVclConditionOutput() ServiceVclConditionOutput {
	return o
}

func (o ServiceVclConditionOutput) ToServiceVclConditionOutputWithContext(ctx context.Context) ServiceVclConditionOutput {
	return o
}

// The unique name for the condition. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclConditionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclCondition) string { return v.Name }).(pulumi.StringOutput)
}

// A number used to determine the order in which multiple conditions execute. Lower numbers execute first. Default `10`
func (o ServiceVclConditionOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclCondition) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The statement used to determine if the condition is met
func (o ServiceVclConditionOutput) Statement() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclCondition) string { return v.Statement }).(pulumi.StringOutput)
}

// Type of condition, either `REQUEST` (req), `RESPONSE` (req, resp), or `CACHE` (req, beresp)
func (o ServiceVclConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclCondition) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceVclConditionArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclCondition)(nil)).Elem()
}

func (o ServiceVclConditionArrayOutput) ToServiceVclConditionArrayOutput() ServiceVclConditionArrayOutput {
	return o
}

func (o ServiceVclConditionArrayOutput) ToServiceVclConditionArrayOutputWithContext(ctx context.Context) ServiceVclConditionArrayOutput {
	return o
}

func (o ServiceVclConditionArrayOutput) Index(i pulumi.IntInput) ServiceVclConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclCondition {
		return vs[0].([]ServiceVclCondition)[vs[1].(int)]
	}).(ServiceVclConditionOutput)
}

type ServiceVclDictionary struct {
	// The ID of the dictionary
	DictionaryId *string `pulumi:"dictionaryId"`
	// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
	Name      string `pulumi:"name"`
	WriteOnly *bool  `pulumi:"writeOnly"`
}

// ServiceVclDictionaryInput is an input type that accepts ServiceVclDictionaryArgs and ServiceVclDictionaryOutput values.
// You can construct a concrete instance of `ServiceVclDictionaryInput` via:
//
//	ServiceVclDictionaryArgs{...}
type ServiceVclDictionaryInput interface {
	pulumi.Input

	ToServiceVclDictionaryOutput() ServiceVclDictionaryOutput
	ToServiceVclDictionaryOutputWithContext(context.Context) ServiceVclDictionaryOutput
}

type ServiceVclDictionaryArgs struct {
	// The ID of the dictionary
	DictionaryId pulumi.StringPtrInput `pulumi:"dictionaryId"`
	// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput `pulumi:"forceDestroy"`
	// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
	Name      pulumi.StringInput  `pulumi:"name"`
	WriteOnly pulumi.BoolPtrInput `pulumi:"writeOnly"`
}

func (ServiceVclDictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclDictionary)(nil)).Elem()
}

func (i ServiceVclDictionaryArgs) ToServiceVclDictionaryOutput() ServiceVclDictionaryOutput {
	return i.ToServiceVclDictionaryOutputWithContext(context.Background())
}

func (i ServiceVclDictionaryArgs) ToServiceVclDictionaryOutputWithContext(ctx context.Context) ServiceVclDictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclDictionaryOutput)
}

// ServiceVclDictionaryArrayInput is an input type that accepts ServiceVclDictionaryArray and ServiceVclDictionaryArrayOutput values.
// You can construct a concrete instance of `ServiceVclDictionaryArrayInput` via:
//
//	ServiceVclDictionaryArray{ ServiceVclDictionaryArgs{...} }
type ServiceVclDictionaryArrayInput interface {
	pulumi.Input

	ToServiceVclDictionaryArrayOutput() ServiceVclDictionaryArrayOutput
	ToServiceVclDictionaryArrayOutputWithContext(context.Context) ServiceVclDictionaryArrayOutput
}

type ServiceVclDictionaryArray []ServiceVclDictionaryInput

func (ServiceVclDictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclDictionary)(nil)).Elem()
}

func (i ServiceVclDictionaryArray) ToServiceVclDictionaryArrayOutput() ServiceVclDictionaryArrayOutput {
	return i.ToServiceVclDictionaryArrayOutputWithContext(context.Background())
}

func (i ServiceVclDictionaryArray) ToServiceVclDictionaryArrayOutputWithContext(ctx context.Context) ServiceVclDictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclDictionaryArrayOutput)
}

type ServiceVclDictionaryOutput struct{ *pulumi.OutputState }

func (ServiceVclDictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclDictionary)(nil)).Elem()
}

func (o ServiceVclDictionaryOutput) ToServiceVclDictionaryOutput() ServiceVclDictionaryOutput {
	return o
}

func (o ServiceVclDictionaryOutput) ToServiceVclDictionaryOutputWithContext(ctx context.Context) ServiceVclDictionaryOutput {
	return o
}

// The ID of the dictionary
func (o ServiceVclDictionaryOutput) DictionaryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclDictionary) *string { return v.DictionaryId }).(pulumi.StringPtrOutput)
}

// Allow the dictionary to be deleted, even if it contains entries. Defaults to false.
func (o ServiceVclDictionaryOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclDictionary) *bool { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// A unique name to identify this dictionary. It is important to note that changing this attribute will delete and recreate the dictionary, and discard the current items in the dictionary
func (o ServiceVclDictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclDictionary) string { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceVclDictionaryOutput) WriteOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclDictionary) *bool { return v.WriteOnly }).(pulumi.BoolPtrOutput)
}

type ServiceVclDictionaryArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclDictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclDictionary)(nil)).Elem()
}

func (o ServiceVclDictionaryArrayOutput) ToServiceVclDictionaryArrayOutput() ServiceVclDictionaryArrayOutput {
	return o
}

func (o ServiceVclDictionaryArrayOutput) ToServiceVclDictionaryArrayOutputWithContext(ctx context.Context) ServiceVclDictionaryArrayOutput {
	return o
}

func (o ServiceVclDictionaryArrayOutput) Index(i pulumi.IntInput) ServiceVclDictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclDictionary {
		return vs[0].([]ServiceVclDictionary)[vs[1].(int)]
	}).(ServiceVclDictionaryOutput)
}

type ServiceVclDirector struct {
	// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
	Backends []string `pulumi:"backends"`
	// An optional comment about the Director
	Comment *string `pulumi:"comment"`
	// Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
	Quorum *int `pulumi:"quorum"`
	// How many backends to search if it fails. Default `5`
	Retries *int `pulumi:"retries"`
	// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
	Shield *string `pulumi:"shield"`
	// Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
	Type *int `pulumi:"type"`
}

// ServiceVclDirectorInput is an input type that accepts ServiceVclDirectorArgs and ServiceVclDirectorOutput values.
// You can construct a concrete instance of `ServiceVclDirectorInput` via:
//
//	ServiceVclDirectorArgs{...}
type ServiceVclDirectorInput interface {
	pulumi.Input

	ToServiceVclDirectorOutput() ServiceVclDirectorOutput
	ToServiceVclDirectorOutputWithContext(context.Context) ServiceVclDirectorOutput
}

type ServiceVclDirectorArgs struct {
	// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
	Backends pulumi.StringArrayInput `pulumi:"backends"`
	// An optional comment about the Director
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
	Quorum pulumi.IntPtrInput `pulumi:"quorum"`
	// How many backends to search if it fails. Default `5`
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
	Shield pulumi.StringPtrInput `pulumi:"shield"`
	// Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
	Type pulumi.IntPtrInput `pulumi:"type"`
}

func (ServiceVclDirectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclDirector)(nil)).Elem()
}

func (i ServiceVclDirectorArgs) ToServiceVclDirectorOutput() ServiceVclDirectorOutput {
	return i.ToServiceVclDirectorOutputWithContext(context.Background())
}

func (i ServiceVclDirectorArgs) ToServiceVclDirectorOutputWithContext(ctx context.Context) ServiceVclDirectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclDirectorOutput)
}

// ServiceVclDirectorArrayInput is an input type that accepts ServiceVclDirectorArray and ServiceVclDirectorArrayOutput values.
// You can construct a concrete instance of `ServiceVclDirectorArrayInput` via:
//
//	ServiceVclDirectorArray{ ServiceVclDirectorArgs{...} }
type ServiceVclDirectorArrayInput interface {
	pulumi.Input

	ToServiceVclDirectorArrayOutput() ServiceVclDirectorArrayOutput
	ToServiceVclDirectorArrayOutputWithContext(context.Context) ServiceVclDirectorArrayOutput
}

type ServiceVclDirectorArray []ServiceVclDirectorInput

func (ServiceVclDirectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclDirector)(nil)).Elem()
}

func (i ServiceVclDirectorArray) ToServiceVclDirectorArrayOutput() ServiceVclDirectorArrayOutput {
	return i.ToServiceVclDirectorArrayOutputWithContext(context.Background())
}

func (i ServiceVclDirectorArray) ToServiceVclDirectorArrayOutputWithContext(ctx context.Context) ServiceVclDirectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclDirectorArrayOutput)
}

type ServiceVclDirectorOutput struct{ *pulumi.OutputState }

func (ServiceVclDirectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclDirector)(nil)).Elem()
}

func (o ServiceVclDirectorOutput) ToServiceVclDirectorOutput() ServiceVclDirectorOutput {
	return o
}

func (o ServiceVclDirectorOutput) ToServiceVclDirectorOutputWithContext(ctx context.Context) ServiceVclDirectorOutput {
	return o
}

// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
func (o ServiceVclDirectorOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceVclDirector) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

// An optional comment about the Director
func (o ServiceVclDirectorOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclDirector) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// Unique name for this Director. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclDirectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclDirector) string { return v.Name }).(pulumi.StringOutput)
}

// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`
func (o ServiceVclDirectorOutput) Quorum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclDirector) *int { return v.Quorum }).(pulumi.IntPtrOutput)
}

// How many backends to search if it fails. Default `5`
func (o ServiceVclDirectorOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclDirector) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

// Selected POP to serve as a "shield" for backends. Valid values for `shield` are included in the [`GET /datacenters`](https://developer.fastly.com/reference/api/utils/datacenter/) API response
func (o ServiceVclDirectorOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclDirector) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

// Type of load balance group to use. Integer, 1 to 4. Values: `1` (random), `3` (hash), `4` (client). Default `1`
func (o ServiceVclDirectorOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclDirector) *int { return v.Type }).(pulumi.IntPtrOutput)
}

type ServiceVclDirectorArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclDirectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclDirector)(nil)).Elem()
}

func (o ServiceVclDirectorArrayOutput) ToServiceVclDirectorArrayOutput() ServiceVclDirectorArrayOutput {
	return o
}

func (o ServiceVclDirectorArrayOutput) ToServiceVclDirectorArrayOutputWithContext(ctx context.Context) ServiceVclDirectorArrayOutput {
	return o
}

func (o ServiceVclDirectorArrayOutput) Index(i pulumi.IntInput) ServiceVclDirectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclDirector {
		return vs[0].([]ServiceVclDirector)[vs[1].(int)]
	}).(ServiceVclDirectorOutput)
}

type ServiceVclDomain struct {
	// An optional comment about the Domain.
	Comment *string `pulumi:"comment"`
	// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
	Name string `pulumi:"name"`
}

// ServiceVclDomainInput is an input type that accepts ServiceVclDomainArgs and ServiceVclDomainOutput values.
// You can construct a concrete instance of `ServiceVclDomainInput` via:
//
//	ServiceVclDomainArgs{...}
type ServiceVclDomainInput interface {
	pulumi.Input

	ToServiceVclDomainOutput() ServiceVclDomainOutput
	ToServiceVclDomainOutputWithContext(context.Context) ServiceVclDomainOutput
}

type ServiceVclDomainArgs struct {
	// An optional comment about the Domain.
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceVclDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclDomain)(nil)).Elem()
}

func (i ServiceVclDomainArgs) ToServiceVclDomainOutput() ServiceVclDomainOutput {
	return i.ToServiceVclDomainOutputWithContext(context.Background())
}

func (i ServiceVclDomainArgs) ToServiceVclDomainOutputWithContext(ctx context.Context) ServiceVclDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclDomainOutput)
}

// ServiceVclDomainArrayInput is an input type that accepts ServiceVclDomainArray and ServiceVclDomainArrayOutput values.
// You can construct a concrete instance of `ServiceVclDomainArrayInput` via:
//
//	ServiceVclDomainArray{ ServiceVclDomainArgs{...} }
type ServiceVclDomainArrayInput interface {
	pulumi.Input

	ToServiceVclDomainArrayOutput() ServiceVclDomainArrayOutput
	ToServiceVclDomainArrayOutputWithContext(context.Context) ServiceVclDomainArrayOutput
}

type ServiceVclDomainArray []ServiceVclDomainInput

func (ServiceVclDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclDomain)(nil)).Elem()
}

func (i ServiceVclDomainArray) ToServiceVclDomainArrayOutput() ServiceVclDomainArrayOutput {
	return i.ToServiceVclDomainArrayOutputWithContext(context.Background())
}

func (i ServiceVclDomainArray) ToServiceVclDomainArrayOutputWithContext(ctx context.Context) ServiceVclDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclDomainArrayOutput)
}

type ServiceVclDomainOutput struct{ *pulumi.OutputState }

func (ServiceVclDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclDomain)(nil)).Elem()
}

func (o ServiceVclDomainOutput) ToServiceVclDomainOutput() ServiceVclDomainOutput {
	return o
}

func (o ServiceVclDomainOutput) ToServiceVclDomainOutputWithContext(ctx context.Context) ServiceVclDomainOutput {
	return o
}

// An optional comment about the Domain.
func (o ServiceVclDomainOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclDomain) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The domain that this Service will respond to. It is important to note that changing this attribute will delete and recreate the resource.
func (o ServiceVclDomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclDomain) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceVclDomainArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclDomain)(nil)).Elem()
}

func (o ServiceVclDomainArrayOutput) ToServiceVclDomainArrayOutput() ServiceVclDomainArrayOutput {
	return o
}

func (o ServiceVclDomainArrayOutput) ToServiceVclDomainArrayOutputWithContext(ctx context.Context) ServiceVclDomainArrayOutput {
	return o
}

func (o ServiceVclDomainArrayOutput) Index(i pulumi.IntInput) ServiceVclDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclDomain {
		return vs[0].([]ServiceVclDomain)[vs[1].(int)]
	}).(ServiceVclDomainOutput)
}

type ServiceVclDynamicsnippet struct {
	// The VCL code that specifies exactly what the snippet does
	Content *string `pulumi:"content"`
	// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
	Priority *int `pulumi:"priority"`
	// The ID of the dynamic snippet
	SnippetId *string `pulumi:"snippetId"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
	Type string `pulumi:"type"`
}

// ServiceVclDynamicsnippetInput is an input type that accepts ServiceVclDynamicsnippetArgs and ServiceVclDynamicsnippetOutput values.
// You can construct a concrete instance of `ServiceVclDynamicsnippetInput` via:
//
//	ServiceVclDynamicsnippetArgs{...}
type ServiceVclDynamicsnippetInput interface {
	pulumi.Input

	ToServiceVclDynamicsnippetOutput() ServiceVclDynamicsnippetOutput
	ToServiceVclDynamicsnippetOutputWithContext(context.Context) ServiceVclDynamicsnippetOutput
}

type ServiceVclDynamicsnippetArgs struct {
	// The VCL code that specifies exactly what the snippet does
	Content pulumi.StringPtrInput `pulumi:"content"`
	// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The ID of the dynamic snippet
	SnippetId pulumi.StringPtrInput `pulumi:"snippetId"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceVclDynamicsnippetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclDynamicsnippet)(nil)).Elem()
}

func (i ServiceVclDynamicsnippetArgs) ToServiceVclDynamicsnippetOutput() ServiceVclDynamicsnippetOutput {
	return i.ToServiceVclDynamicsnippetOutputWithContext(context.Background())
}

func (i ServiceVclDynamicsnippetArgs) ToServiceVclDynamicsnippetOutputWithContext(ctx context.Context) ServiceVclDynamicsnippetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclDynamicsnippetOutput)
}

// ServiceVclDynamicsnippetArrayInput is an input type that accepts ServiceVclDynamicsnippetArray and ServiceVclDynamicsnippetArrayOutput values.
// You can construct a concrete instance of `ServiceVclDynamicsnippetArrayInput` via:
//
//	ServiceVclDynamicsnippetArray{ ServiceVclDynamicsnippetArgs{...} }
type ServiceVclDynamicsnippetArrayInput interface {
	pulumi.Input

	ToServiceVclDynamicsnippetArrayOutput() ServiceVclDynamicsnippetArrayOutput
	ToServiceVclDynamicsnippetArrayOutputWithContext(context.Context) ServiceVclDynamicsnippetArrayOutput
}

type ServiceVclDynamicsnippetArray []ServiceVclDynamicsnippetInput

func (ServiceVclDynamicsnippetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclDynamicsnippet)(nil)).Elem()
}

func (i ServiceVclDynamicsnippetArray) ToServiceVclDynamicsnippetArrayOutput() ServiceVclDynamicsnippetArrayOutput {
	return i.ToServiceVclDynamicsnippetArrayOutputWithContext(context.Background())
}

func (i ServiceVclDynamicsnippetArray) ToServiceVclDynamicsnippetArrayOutputWithContext(ctx context.Context) ServiceVclDynamicsnippetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclDynamicsnippetArrayOutput)
}

type ServiceVclDynamicsnippetOutput struct{ *pulumi.OutputState }

func (ServiceVclDynamicsnippetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclDynamicsnippet)(nil)).Elem()
}

func (o ServiceVclDynamicsnippetOutput) ToServiceVclDynamicsnippetOutput() ServiceVclDynamicsnippetOutput {
	return o
}

func (o ServiceVclDynamicsnippetOutput) ToServiceVclDynamicsnippetOutputWithContext(ctx context.Context) ServiceVclDynamicsnippetOutput {
	return o
}

// The VCL code that specifies exactly what the snippet does
func (o ServiceVclDynamicsnippetOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclDynamicsnippet) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclDynamicsnippetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclDynamicsnippet) string { return v.Name }).(pulumi.StringOutput)
}

// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
func (o ServiceVclDynamicsnippetOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclDynamicsnippet) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The ID of the dynamic snippet
func (o ServiceVclDynamicsnippetOutput) SnippetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclDynamicsnippet) *string { return v.SnippetId }).(pulumi.StringPtrOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
func (o ServiceVclDynamicsnippetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclDynamicsnippet) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceVclDynamicsnippetArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclDynamicsnippetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclDynamicsnippet)(nil)).Elem()
}

func (o ServiceVclDynamicsnippetArrayOutput) ToServiceVclDynamicsnippetArrayOutput() ServiceVclDynamicsnippetArrayOutput {
	return o
}

func (o ServiceVclDynamicsnippetArrayOutput) ToServiceVclDynamicsnippetArrayOutputWithContext(ctx context.Context) ServiceVclDynamicsnippetArrayOutput {
	return o
}

func (o ServiceVclDynamicsnippetArrayOutput) Index(i pulumi.IntInput) ServiceVclDynamicsnippetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclDynamicsnippet {
		return vs[0].([]ServiceVclDynamicsnippet)[vs[1].(int)]
	}).(ServiceVclDynamicsnippetOutput)
}

type ServiceVclGzip struct {
	// Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	CacheCondition *string `pulumi:"cacheCondition"`
	// The content-type for each type of content you wish to have dynamically gzip'ed. Example: `["text/html", "text/css"]`
	ContentTypes []string `pulumi:"contentTypes"`
	// File extensions for each file type to dynamically gzip. Example: `["css", "js"]`
	Extensions []string `pulumi:"extensions"`
	// A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
}

// ServiceVclGzipInput is an input type that accepts ServiceVclGzipArgs and ServiceVclGzipOutput values.
// You can construct a concrete instance of `ServiceVclGzipInput` via:
//
//	ServiceVclGzipArgs{...}
type ServiceVclGzipInput interface {
	pulumi.Input

	ToServiceVclGzipOutput() ServiceVclGzipOutput
	ToServiceVclGzipOutputWithContext(context.Context) ServiceVclGzipOutput
}

type ServiceVclGzipArgs struct {
	// Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The content-type for each type of content you wish to have dynamically gzip'ed. Example: `["text/html", "text/css"]`
	ContentTypes pulumi.StringArrayInput `pulumi:"contentTypes"`
	// File extensions for each file type to dynamically gzip. Example: `["css", "js"]`
	Extensions pulumi.StringArrayInput `pulumi:"extensions"`
	// A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceVclGzipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclGzip)(nil)).Elem()
}

func (i ServiceVclGzipArgs) ToServiceVclGzipOutput() ServiceVclGzipOutput {
	return i.ToServiceVclGzipOutputWithContext(context.Background())
}

func (i ServiceVclGzipArgs) ToServiceVclGzipOutputWithContext(ctx context.Context) ServiceVclGzipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclGzipOutput)
}

// ServiceVclGzipArrayInput is an input type that accepts ServiceVclGzipArray and ServiceVclGzipArrayOutput values.
// You can construct a concrete instance of `ServiceVclGzipArrayInput` via:
//
//	ServiceVclGzipArray{ ServiceVclGzipArgs{...} }
type ServiceVclGzipArrayInput interface {
	pulumi.Input

	ToServiceVclGzipArrayOutput() ServiceVclGzipArrayOutput
	ToServiceVclGzipArrayOutputWithContext(context.Context) ServiceVclGzipArrayOutput
}

type ServiceVclGzipArray []ServiceVclGzipInput

func (ServiceVclGzipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclGzip)(nil)).Elem()
}

func (i ServiceVclGzipArray) ToServiceVclGzipArrayOutput() ServiceVclGzipArrayOutput {
	return i.ToServiceVclGzipArrayOutputWithContext(context.Background())
}

func (i ServiceVclGzipArray) ToServiceVclGzipArrayOutputWithContext(ctx context.Context) ServiceVclGzipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclGzipArrayOutput)
}

type ServiceVclGzipOutput struct{ *pulumi.OutputState }

func (ServiceVclGzipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclGzip)(nil)).Elem()
}

func (o ServiceVclGzipOutput) ToServiceVclGzipOutput() ServiceVclGzipOutput {
	return o
}

func (o ServiceVclGzipOutput) ToServiceVclGzipOutputWithContext(ctx context.Context) ServiceVclGzipOutput {
	return o
}

// Name of already defined `condition` controlling when this gzip configuration applies. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o ServiceVclGzipOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclGzip) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The content-type for each type of content you wish to have dynamically gzip'ed. Example: `["text/html", "text/css"]`
func (o ServiceVclGzipOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceVclGzip) []string { return v.ContentTypes }).(pulumi.StringArrayOutput)
}

// File extensions for each file type to dynamically gzip. Example: `["css", "js"]`
func (o ServiceVclGzipOutput) Extensions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceVclGzip) []string { return v.Extensions }).(pulumi.StringArrayOutput)
}

// A name to refer to this gzip condition. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclGzipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclGzip) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceVclGzipArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclGzipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclGzip)(nil)).Elem()
}

func (o ServiceVclGzipArrayOutput) ToServiceVclGzipArrayOutput() ServiceVclGzipArrayOutput {
	return o
}

func (o ServiceVclGzipArrayOutput) ToServiceVclGzipArrayOutputWithContext(ctx context.Context) ServiceVclGzipArrayOutput {
	return o
}

func (o ServiceVclGzipArrayOutput) Index(i pulumi.IntInput) ServiceVclGzipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclGzip {
		return vs[0].([]ServiceVclGzip)[vs[1].(int)]
	}).(ServiceVclGzipOutput)
}

type ServiceVclHeader struct {
	// The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regexRepeat`
	Action string `pulumi:"action"`
	// Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
	CacheCondition *string `pulumi:"cacheCondition"`
	// The name of the header that is going to be affected by the Action
	Destination string `pulumi:"destination"`
	// Don't add the header if it is already. (Only applies to `set` action.). Default `false`
	IgnoreIfSet *bool `pulumi:"ignoreIfSet"`
	// Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Lower priorities execute first. Default: `100`
	Priority *int `pulumi:"priority"`
	// Regular expression to use (Only applies to `regex` and `regexRepeat` actions.)
	Regex *string `pulumi:"regex"`
	// Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
	RequestCondition *string `pulumi:"requestCondition"`
	// Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	ResponseCondition *string `pulumi:"responseCondition"`
	// Variable to be used as a source for the header content (Does not apply to `delete` action.)
	Source *string `pulumi:"source"`
	// Value to substitute in place of regular expression. (Only applies to `regex` and `regexRepeat`.)
	Substitution *string `pulumi:"substitution"`
	// The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
	Type string `pulumi:"type"`
}

// ServiceVclHeaderInput is an input type that accepts ServiceVclHeaderArgs and ServiceVclHeaderOutput values.
// You can construct a concrete instance of `ServiceVclHeaderInput` via:
//
//	ServiceVclHeaderArgs{...}
type ServiceVclHeaderInput interface {
	pulumi.Input

	ToServiceVclHeaderOutput() ServiceVclHeaderOutput
	ToServiceVclHeaderOutputWithContext(context.Context) ServiceVclHeaderOutput
}

type ServiceVclHeaderArgs struct {
	// The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regexRepeat`
	Action pulumi.StringInput `pulumi:"action"`
	// Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The name of the header that is going to be affected by the Action
	Destination pulumi.StringInput `pulumi:"destination"`
	// Don't add the header if it is already. (Only applies to `set` action.). Default `false`
	IgnoreIfSet pulumi.BoolPtrInput `pulumi:"ignoreIfSet"`
	// Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Lower priorities execute first. Default: `100`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// Regular expression to use (Only applies to `regex` and `regexRepeat` actions.)
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	// Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Variable to be used as a source for the header content (Does not apply to `delete` action.)
	Source pulumi.StringPtrInput `pulumi:"source"`
	// Value to substitute in place of regular expression. (Only applies to `regex` and `regexRepeat`.)
	Substitution pulumi.StringPtrInput `pulumi:"substitution"`
	// The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceVclHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclHeader)(nil)).Elem()
}

func (i ServiceVclHeaderArgs) ToServiceVclHeaderOutput() ServiceVclHeaderOutput {
	return i.ToServiceVclHeaderOutputWithContext(context.Background())
}

func (i ServiceVclHeaderArgs) ToServiceVclHeaderOutputWithContext(ctx context.Context) ServiceVclHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclHeaderOutput)
}

// ServiceVclHeaderArrayInput is an input type that accepts ServiceVclHeaderArray and ServiceVclHeaderArrayOutput values.
// You can construct a concrete instance of `ServiceVclHeaderArrayInput` via:
//
//	ServiceVclHeaderArray{ ServiceVclHeaderArgs{...} }
type ServiceVclHeaderArrayInput interface {
	pulumi.Input

	ToServiceVclHeaderArrayOutput() ServiceVclHeaderArrayOutput
	ToServiceVclHeaderArrayOutputWithContext(context.Context) ServiceVclHeaderArrayOutput
}

type ServiceVclHeaderArray []ServiceVclHeaderInput

func (ServiceVclHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclHeader)(nil)).Elem()
}

func (i ServiceVclHeaderArray) ToServiceVclHeaderArrayOutput() ServiceVclHeaderArrayOutput {
	return i.ToServiceVclHeaderArrayOutputWithContext(context.Background())
}

func (i ServiceVclHeaderArray) ToServiceVclHeaderArrayOutputWithContext(ctx context.Context) ServiceVclHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclHeaderArrayOutput)
}

type ServiceVclHeaderOutput struct{ *pulumi.OutputState }

func (ServiceVclHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclHeader)(nil)).Elem()
}

func (o ServiceVclHeaderOutput) ToServiceVclHeaderOutput() ServiceVclHeaderOutput {
	return o
}

func (o ServiceVclHeaderOutput) ToServiceVclHeaderOutputWithContext(ctx context.Context) ServiceVclHeaderOutput {
	return o
}

// The Header manipulation action to take; must be one of `set`, `append`, `delete`, `regex`, or `regexRepeat`
func (o ServiceVclHeaderOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclHeader) string { return v.Action }).(pulumi.StringOutput)
}

// Name of already defined `condition` to apply. This `condition` must be of type `CACHE`
func (o ServiceVclHeaderOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclHeader) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The name of the header that is going to be affected by the Action
func (o ServiceVclHeaderOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclHeader) string { return v.Destination }).(pulumi.StringOutput)
}

// Don't add the header if it is already. (Only applies to `set` action.). Default `false`
func (o ServiceVclHeaderOutput) IgnoreIfSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclHeader) *bool { return v.IgnoreIfSet }).(pulumi.BoolPtrOutput)
}

// Unique name for this header attribute. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Lower priorities execute first. Default: `100`
func (o ServiceVclHeaderOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclHeader) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// Regular expression to use (Only applies to `regex` and `regexRepeat` actions.)
func (o ServiceVclHeaderOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclHeader) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

// Name of already defined `condition` to apply. This `condition` must be of type `REQUEST`
func (o ServiceVclHeaderOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclHeader) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// Name of already defined `condition` to apply. This `condition` must be of type `RESPONSE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o ServiceVclHeaderOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclHeader) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Variable to be used as a source for the header content (Does not apply to `delete` action.)
func (o ServiceVclHeaderOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclHeader) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Value to substitute in place of regular expression. (Only applies to `regex` and `regexRepeat`.)
func (o ServiceVclHeaderOutput) Substitution() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclHeader) *string { return v.Substitution }).(pulumi.StringPtrOutput)
}

// The Request type on which to apply the selected Action; must be one of `request`, `fetch`, `cache` or `response`
func (o ServiceVclHeaderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclHeader) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceVclHeaderArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclHeader)(nil)).Elem()
}

func (o ServiceVclHeaderArrayOutput) ToServiceVclHeaderArrayOutput() ServiceVclHeaderArrayOutput {
	return o
}

func (o ServiceVclHeaderArrayOutput) ToServiceVclHeaderArrayOutputWithContext(ctx context.Context) ServiceVclHeaderArrayOutput {
	return o
}

func (o ServiceVclHeaderArrayOutput) Index(i pulumi.IntInput) ServiceVclHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclHeader {
		return vs[0].([]ServiceVclHeader)[vs[1].(int)]
	}).(ServiceVclHeaderOutput)
}

type ServiceVclHealthcheck struct {
	// How often to run the Healthcheck in milliseconds. Default `5000`
	CheckInterval *int `pulumi:"checkInterval"`
	// The status code expected from the host. Default `200`
	ExpectedResponse *int `pulumi:"expectedResponse"`
	// Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
	Headers []string `pulumi:"headers"`
	// The Host header to send for this Healthcheck
	Host string `pulumi:"host"`
	// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
	HttpVersion *string `pulumi:"httpVersion"`
	// When loading a config, the initial number of probes to be seen as OK. Default `3`
	Initial *int `pulumi:"initial"`
	// Which HTTP method to use. Default `HEAD`
	Method *string `pulumi:"method"`
	// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to check
	Path string `pulumi:"path"`
	// How many Healthchecks must succeed to be considered healthy. Default `3`
	Threshold *int `pulumi:"threshold"`
	// Timeout in milliseconds. Default `500`
	Timeout *int `pulumi:"timeout"`
	// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
	Window *int `pulumi:"window"`
}

// ServiceVclHealthcheckInput is an input type that accepts ServiceVclHealthcheckArgs and ServiceVclHealthcheckOutput values.
// You can construct a concrete instance of `ServiceVclHealthcheckInput` via:
//
//	ServiceVclHealthcheckArgs{...}
type ServiceVclHealthcheckInput interface {
	pulumi.Input

	ToServiceVclHealthcheckOutput() ServiceVclHealthcheckOutput
	ToServiceVclHealthcheckOutputWithContext(context.Context) ServiceVclHealthcheckOutput
}

type ServiceVclHealthcheckArgs struct {
	// How often to run the Healthcheck in milliseconds. Default `5000`
	CheckInterval pulumi.IntPtrInput `pulumi:"checkInterval"`
	// The status code expected from the host. Default `200`
	ExpectedResponse pulumi.IntPtrInput `pulumi:"expectedResponse"`
	// Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
	Headers pulumi.StringArrayInput `pulumi:"headers"`
	// The Host header to send for this Healthcheck
	Host pulumi.StringInput `pulumi:"host"`
	// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
	HttpVersion pulumi.StringPtrInput `pulumi:"httpVersion"`
	// When loading a config, the initial number of probes to be seen as OK. Default `3`
	Initial pulumi.IntPtrInput `pulumi:"initial"`
	// Which HTTP method to use. Default `HEAD`
	Method pulumi.StringPtrInput `pulumi:"method"`
	// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to check
	Path pulumi.StringInput `pulumi:"path"`
	// How many Healthchecks must succeed to be considered healthy. Default `3`
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
	// Timeout in milliseconds. Default `500`
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
	Window pulumi.IntPtrInput `pulumi:"window"`
}

func (ServiceVclHealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclHealthcheck)(nil)).Elem()
}

func (i ServiceVclHealthcheckArgs) ToServiceVclHealthcheckOutput() ServiceVclHealthcheckOutput {
	return i.ToServiceVclHealthcheckOutputWithContext(context.Background())
}

func (i ServiceVclHealthcheckArgs) ToServiceVclHealthcheckOutputWithContext(ctx context.Context) ServiceVclHealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclHealthcheckOutput)
}

// ServiceVclHealthcheckArrayInput is an input type that accepts ServiceVclHealthcheckArray and ServiceVclHealthcheckArrayOutput values.
// You can construct a concrete instance of `ServiceVclHealthcheckArrayInput` via:
//
//	ServiceVclHealthcheckArray{ ServiceVclHealthcheckArgs{...} }
type ServiceVclHealthcheckArrayInput interface {
	pulumi.Input

	ToServiceVclHealthcheckArrayOutput() ServiceVclHealthcheckArrayOutput
	ToServiceVclHealthcheckArrayOutputWithContext(context.Context) ServiceVclHealthcheckArrayOutput
}

type ServiceVclHealthcheckArray []ServiceVclHealthcheckInput

func (ServiceVclHealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclHealthcheck)(nil)).Elem()
}

func (i ServiceVclHealthcheckArray) ToServiceVclHealthcheckArrayOutput() ServiceVclHealthcheckArrayOutput {
	return i.ToServiceVclHealthcheckArrayOutputWithContext(context.Background())
}

func (i ServiceVclHealthcheckArray) ToServiceVclHealthcheckArrayOutputWithContext(ctx context.Context) ServiceVclHealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclHealthcheckArrayOutput)
}

type ServiceVclHealthcheckOutput struct{ *pulumi.OutputState }

func (ServiceVclHealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclHealthcheck)(nil)).Elem()
}

func (o ServiceVclHealthcheckOutput) ToServiceVclHealthcheckOutput() ServiceVclHealthcheckOutput {
	return o
}

func (o ServiceVclHealthcheckOutput) ToServiceVclHealthcheckOutputWithContext(ctx context.Context) ServiceVclHealthcheckOutput {
	return o
}

// How often to run the Healthcheck in milliseconds. Default `5000`
func (o ServiceVclHealthcheckOutput) CheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) *int { return v.CheckInterval }).(pulumi.IntPtrOutput)
}

// The status code expected from the host. Default `200`
func (o ServiceVclHealthcheckOutput) ExpectedResponse() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) *int { return v.ExpectedResponse }).(pulumi.IntPtrOutput)
}

// Custom health check HTTP headers (e.g. if your health check requires an API key to be provided).
func (o ServiceVclHealthcheckOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) []string { return v.Headers }).(pulumi.StringArrayOutput)
}

// The Host header to send for this Healthcheck
func (o ServiceVclHealthcheckOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) string { return v.Host }).(pulumi.StringOutput)
}

// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`
func (o ServiceVclHealthcheckOutput) HttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) *string { return v.HttpVersion }).(pulumi.StringPtrOutput)
}

// When loading a config, the initial number of probes to be seen as OK. Default `3`
func (o ServiceVclHealthcheckOutput) Initial() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) *int { return v.Initial }).(pulumi.IntPtrOutput)
}

// Which HTTP method to use. Default `HEAD`
func (o ServiceVclHealthcheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Healthcheck. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclHealthcheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) string { return v.Name }).(pulumi.StringOutput)
}

// The path to check
func (o ServiceVclHealthcheckOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) string { return v.Path }).(pulumi.StringOutput)
}

// How many Healthchecks must succeed to be considered healthy. Default `3`
func (o ServiceVclHealthcheckOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

// Timeout in milliseconds. Default `500`
func (o ServiceVclHealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`
func (o ServiceVclHealthcheckOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclHealthcheck) *int { return v.Window }).(pulumi.IntPtrOutput)
}

type ServiceVclHealthcheckArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclHealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclHealthcheck)(nil)).Elem()
}

func (o ServiceVclHealthcheckArrayOutput) ToServiceVclHealthcheckArrayOutput() ServiceVclHealthcheckArrayOutput {
	return o
}

func (o ServiceVclHealthcheckArrayOutput) ToServiceVclHealthcheckArrayOutputWithContext(ctx context.Context) ServiceVclHealthcheckArrayOutput {
	return o
}

func (o ServiceVclHealthcheckArrayOutput) Index(i pulumi.IntInput) ServiceVclHealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclHealthcheck {
		return vs[0].([]ServiceVclHealthcheck)[vs[1].(int)]
	}).(ServiceVclHealthcheckOutput)
}

type ServiceVclLoggingBigquery struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName *string `pulumi:"accountName"`
	// The ID of your BigQuery dataset
	Dataset string `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
	Email string `pulumi:"email"`
	// The logging format desired.
	Format *string `pulumi:"format"`
	// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The ID of your GCP project
	ProjectId string `pulumi:"projectId"`
	// Name of a condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
	SecretKey string `pulumi:"secretKey"`
	// The ID of your BigQuery table
	Table string `pulumi:"table"`
	// BigQuery table name suffix template
	Template *string `pulumi:"template"`
}

// ServiceVclLoggingBigqueryInput is an input type that accepts ServiceVclLoggingBigqueryArgs and ServiceVclLoggingBigqueryOutput values.
// You can construct a concrete instance of `ServiceVclLoggingBigqueryInput` via:
//
//	ServiceVclLoggingBigqueryArgs{...}
type ServiceVclLoggingBigqueryInput interface {
	pulumi.Input

	ToServiceVclLoggingBigqueryOutput() ServiceVclLoggingBigqueryOutput
	ToServiceVclLoggingBigqueryOutputWithContext(context.Context) ServiceVclLoggingBigqueryOutput
}

type ServiceVclLoggingBigqueryArgs struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// The ID of your BigQuery dataset
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
	Email pulumi.StringInput `pulumi:"email"`
	// The logging format desired.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The ID of your GCP project
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Name of a condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The ID of your BigQuery table
	Table pulumi.StringInput `pulumi:"table"`
	// BigQuery table name suffix template
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (ServiceVclLoggingBigqueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingBigquery)(nil)).Elem()
}

func (i ServiceVclLoggingBigqueryArgs) ToServiceVclLoggingBigqueryOutput() ServiceVclLoggingBigqueryOutput {
	return i.ToServiceVclLoggingBigqueryOutputWithContext(context.Background())
}

func (i ServiceVclLoggingBigqueryArgs) ToServiceVclLoggingBigqueryOutputWithContext(ctx context.Context) ServiceVclLoggingBigqueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingBigqueryOutput)
}

// ServiceVclLoggingBigqueryArrayInput is an input type that accepts ServiceVclLoggingBigqueryArray and ServiceVclLoggingBigqueryArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingBigqueryArrayInput` via:
//
//	ServiceVclLoggingBigqueryArray{ ServiceVclLoggingBigqueryArgs{...} }
type ServiceVclLoggingBigqueryArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingBigqueryArrayOutput() ServiceVclLoggingBigqueryArrayOutput
	ToServiceVclLoggingBigqueryArrayOutputWithContext(context.Context) ServiceVclLoggingBigqueryArrayOutput
}

type ServiceVclLoggingBigqueryArray []ServiceVclLoggingBigqueryInput

func (ServiceVclLoggingBigqueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingBigquery)(nil)).Elem()
}

func (i ServiceVclLoggingBigqueryArray) ToServiceVclLoggingBigqueryArrayOutput() ServiceVclLoggingBigqueryArrayOutput {
	return i.ToServiceVclLoggingBigqueryArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingBigqueryArray) ToServiceVclLoggingBigqueryArrayOutputWithContext(ctx context.Context) ServiceVclLoggingBigqueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingBigqueryArrayOutput)
}

type ServiceVclLoggingBigqueryOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingBigqueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingBigquery)(nil)).Elem()
}

func (o ServiceVclLoggingBigqueryOutput) ToServiceVclLoggingBigqueryOutput() ServiceVclLoggingBigqueryOutput {
	return o
}

func (o ServiceVclLoggingBigqueryOutput) ToServiceVclLoggingBigqueryOutputWithContext(ctx context.Context) ServiceVclLoggingBigqueryOutput {
	return o
}

// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
func (o ServiceVclLoggingBigqueryOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The ID of your BigQuery dataset
func (o ServiceVclLoggingBigqueryOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) string { return v.Dataset }).(pulumi.StringOutput)
}

// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable
func (o ServiceVclLoggingBigqueryOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) string { return v.Email }).(pulumi.StringOutput)
}

// The logging format desired.
func (o ServiceVclLoggingBigqueryOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// A unique name to identify this BigQuery logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingBigqueryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingBigqueryOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The ID of your GCP project
func (o ServiceVclLoggingBigqueryOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Name of a condition to apply this logging.
func (o ServiceVclLoggingBigqueryOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The secret key associated with the service account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines
func (o ServiceVclLoggingBigqueryOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The ID of your BigQuery table
func (o ServiceVclLoggingBigqueryOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) string { return v.Table }).(pulumi.StringOutput)
}

// BigQuery table name suffix template
func (o ServiceVclLoggingBigqueryOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBigquery) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type ServiceVclLoggingBigqueryArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingBigqueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingBigquery)(nil)).Elem()
}

func (o ServiceVclLoggingBigqueryArrayOutput) ToServiceVclLoggingBigqueryArrayOutput() ServiceVclLoggingBigqueryArrayOutput {
	return o
}

func (o ServiceVclLoggingBigqueryArrayOutput) ToServiceVclLoggingBigqueryArrayOutputWithContext(ctx context.Context) ServiceVclLoggingBigqueryArrayOutput {
	return o
}

func (o ServiceVclLoggingBigqueryArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingBigqueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingBigquery {
		return vs[0].([]ServiceVclLoggingBigquery)[vs[1].(int)]
	}).(ServiceVclLoggingBigqueryOutput)
}

type ServiceVclLoggingBlobstorage struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored
	AccountName string `pulumi:"accountName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// The name of the Azure Blob Storage container in which to store logs
	Container string `pulumi:"container"`
	// Maximum size of an uploaded log file, if non-zero.
	FileMaxBytes *int `pulumi:"fileMaxBytes"`
	// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of the condition to apply
	ResponseCondition *string `pulumi:"responseCondition"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
	SasToken string `pulumi:"sasToken"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceVclLoggingBlobstorageInput is an input type that accepts ServiceVclLoggingBlobstorageArgs and ServiceVclLoggingBlobstorageOutput values.
// You can construct a concrete instance of `ServiceVclLoggingBlobstorageInput` via:
//
//	ServiceVclLoggingBlobstorageArgs{...}
type ServiceVclLoggingBlobstorageInput interface {
	pulumi.Input

	ToServiceVclLoggingBlobstorageOutput() ServiceVclLoggingBlobstorageOutput
	ToServiceVclLoggingBlobstorageOutputWithContext(context.Context) ServiceVclLoggingBlobstorageOutput
}

type ServiceVclLoggingBlobstorageArgs struct {
	// The unique Azure Blob Storage namespace in which your data objects are stored
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// The name of the Azure Blob Storage container in which to store logs
	Container pulumi.StringInput `pulumi:"container"`
	// Maximum size of an uploaded log file, if non-zero.
	FileMaxBytes pulumi.IntPtrInput `pulumi:"fileMaxBytes"`
	// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the condition to apply
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
	SasToken pulumi.StringInput `pulumi:"sasToken"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceVclLoggingBlobstorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingBlobstorage)(nil)).Elem()
}

func (i ServiceVclLoggingBlobstorageArgs) ToServiceVclLoggingBlobstorageOutput() ServiceVclLoggingBlobstorageOutput {
	return i.ToServiceVclLoggingBlobstorageOutputWithContext(context.Background())
}

func (i ServiceVclLoggingBlobstorageArgs) ToServiceVclLoggingBlobstorageOutputWithContext(ctx context.Context) ServiceVclLoggingBlobstorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingBlobstorageOutput)
}

// ServiceVclLoggingBlobstorageArrayInput is an input type that accepts ServiceVclLoggingBlobstorageArray and ServiceVclLoggingBlobstorageArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingBlobstorageArrayInput` via:
//
//	ServiceVclLoggingBlobstorageArray{ ServiceVclLoggingBlobstorageArgs{...} }
type ServiceVclLoggingBlobstorageArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingBlobstorageArrayOutput() ServiceVclLoggingBlobstorageArrayOutput
	ToServiceVclLoggingBlobstorageArrayOutputWithContext(context.Context) ServiceVclLoggingBlobstorageArrayOutput
}

type ServiceVclLoggingBlobstorageArray []ServiceVclLoggingBlobstorageInput

func (ServiceVclLoggingBlobstorageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingBlobstorage)(nil)).Elem()
}

func (i ServiceVclLoggingBlobstorageArray) ToServiceVclLoggingBlobstorageArrayOutput() ServiceVclLoggingBlobstorageArrayOutput {
	return i.ToServiceVclLoggingBlobstorageArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingBlobstorageArray) ToServiceVclLoggingBlobstorageArrayOutputWithContext(ctx context.Context) ServiceVclLoggingBlobstorageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingBlobstorageArrayOutput)
}

type ServiceVclLoggingBlobstorageOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingBlobstorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingBlobstorage)(nil)).Elem()
}

func (o ServiceVclLoggingBlobstorageOutput) ToServiceVclLoggingBlobstorageOutput() ServiceVclLoggingBlobstorageOutput {
	return o
}

func (o ServiceVclLoggingBlobstorageOutput) ToServiceVclLoggingBlobstorageOutputWithContext(ctx context.Context) ServiceVclLoggingBlobstorageOutput {
	return o
}

// The unique Azure Blob Storage namespace in which your data objects are stored
func (o ServiceVclLoggingBlobstorageOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) string { return v.AccountName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceVclLoggingBlobstorageOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// The name of the Azure Blob Storage container in which to store logs
func (o ServiceVclLoggingBlobstorageOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) string { return v.Container }).(pulumi.StringOutput)
}

// Maximum size of an uploaded log file, if non-zero.
func (o ServiceVclLoggingBlobstorageOutput) FileMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *int { return v.FileMaxBytes }).(pulumi.IntPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
func (o ServiceVclLoggingBlobstorageOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
func (o ServiceVclLoggingBlobstorageOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceVclLoggingBlobstorageOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingBlobstorageOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify the Azure Blob Storage endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingBlobstorageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path
func (o ServiceVclLoggingBlobstorageOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred in seconds. Default `3600`
func (o ServiceVclLoggingBlobstorageOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed
func (o ServiceVclLoggingBlobstorageOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceVclLoggingBlobstorageOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply
func (o ServiceVclLoggingBlobstorageOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work
func (o ServiceVclLoggingBlobstorageOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) string { return v.SasToken }).(pulumi.StringOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceVclLoggingBlobstorageOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingBlobstorage) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceVclLoggingBlobstorageArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingBlobstorageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingBlobstorage)(nil)).Elem()
}

func (o ServiceVclLoggingBlobstorageArrayOutput) ToServiceVclLoggingBlobstorageArrayOutput() ServiceVclLoggingBlobstorageArrayOutput {
	return o
}

func (o ServiceVclLoggingBlobstorageArrayOutput) ToServiceVclLoggingBlobstorageArrayOutputWithContext(ctx context.Context) ServiceVclLoggingBlobstorageArrayOutput {
	return o
}

func (o ServiceVclLoggingBlobstorageArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingBlobstorageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingBlobstorage {
		return vs[0].([]ServiceVclLoggingBlobstorage)[vs[1].(int)]
	}).(ServiceVclLoggingBlobstorageOutput)
}

type ServiceVclLoggingCloudfile struct {
	// Your Cloud File account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of your Cloud Files container
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
	Region *string `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for your Cloud Files account
	User string `pulumi:"user"`
}

// ServiceVclLoggingCloudfileInput is an input type that accepts ServiceVclLoggingCloudfileArgs and ServiceVclLoggingCloudfileOutput values.
// You can construct a concrete instance of `ServiceVclLoggingCloudfileInput` via:
//
//	ServiceVclLoggingCloudfileArgs{...}
type ServiceVclLoggingCloudfileInput interface {
	pulumi.Input

	ToServiceVclLoggingCloudfileOutput() ServiceVclLoggingCloudfileOutput
	ToServiceVclLoggingCloudfileOutputWithContext(context.Context) ServiceVclLoggingCloudfileOutput
}

type ServiceVclLoggingCloudfileArgs struct {
	// Your Cloud File account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of your Cloud Files container
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for your Cloud Files account
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceVclLoggingCloudfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingCloudfile)(nil)).Elem()
}

func (i ServiceVclLoggingCloudfileArgs) ToServiceVclLoggingCloudfileOutput() ServiceVclLoggingCloudfileOutput {
	return i.ToServiceVclLoggingCloudfileOutputWithContext(context.Background())
}

func (i ServiceVclLoggingCloudfileArgs) ToServiceVclLoggingCloudfileOutputWithContext(ctx context.Context) ServiceVclLoggingCloudfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingCloudfileOutput)
}

// ServiceVclLoggingCloudfileArrayInput is an input type that accepts ServiceVclLoggingCloudfileArray and ServiceVclLoggingCloudfileArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingCloudfileArrayInput` via:
//
//	ServiceVclLoggingCloudfileArray{ ServiceVclLoggingCloudfileArgs{...} }
type ServiceVclLoggingCloudfileArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingCloudfileArrayOutput() ServiceVclLoggingCloudfileArrayOutput
	ToServiceVclLoggingCloudfileArrayOutputWithContext(context.Context) ServiceVclLoggingCloudfileArrayOutput
}

type ServiceVclLoggingCloudfileArray []ServiceVclLoggingCloudfileInput

func (ServiceVclLoggingCloudfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingCloudfile)(nil)).Elem()
}

func (i ServiceVclLoggingCloudfileArray) ToServiceVclLoggingCloudfileArrayOutput() ServiceVclLoggingCloudfileArrayOutput {
	return i.ToServiceVclLoggingCloudfileArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingCloudfileArray) ToServiceVclLoggingCloudfileArrayOutputWithContext(ctx context.Context) ServiceVclLoggingCloudfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingCloudfileArrayOutput)
}

type ServiceVclLoggingCloudfileOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingCloudfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingCloudfile)(nil)).Elem()
}

func (o ServiceVclLoggingCloudfileOutput) ToServiceVclLoggingCloudfileOutput() ServiceVclLoggingCloudfileOutput {
	return o
}

func (o ServiceVclLoggingCloudfileOutput) ToServiceVclLoggingCloudfileOutputWithContext(ctx context.Context) ServiceVclLoggingCloudfileOutput {
	return o
}

// Your Cloud File account access key
func (o ServiceVclLoggingCloudfileOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of your Cloud Files container
func (o ServiceVclLoggingCloudfileOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceVclLoggingCloudfileOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Apache style log formatting.
func (o ServiceVclLoggingCloudfileOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingCloudfileOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceVclLoggingCloudfileOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingCloudfileOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the Rackspace Cloud Files logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingCloudfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to
func (o ServiceVclLoggingCloudfileOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceVclLoggingCloudfileOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o ServiceVclLoggingCloudfileOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceVclLoggingCloudfileOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The region to stream logs to. One of: DFW (Dallas), ORD (Chicago), IAD (Northern Virginia), LON (London), SYD (Sydney), HKG (Hong Kong)
func (o ServiceVclLoggingCloudfileOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingCloudfileOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceVclLoggingCloudfileOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for your Cloud Files account
func (o ServiceVclLoggingCloudfileOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingCloudfile) string { return v.User }).(pulumi.StringOutput)
}

type ServiceVclLoggingCloudfileArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingCloudfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingCloudfile)(nil)).Elem()
}

func (o ServiceVclLoggingCloudfileArrayOutput) ToServiceVclLoggingCloudfileArrayOutput() ServiceVclLoggingCloudfileArrayOutput {
	return o
}

func (o ServiceVclLoggingCloudfileArrayOutput) ToServiceVclLoggingCloudfileArrayOutputWithContext(ctx context.Context) ServiceVclLoggingCloudfileArrayOutput {
	return o
}

func (o ServiceVclLoggingCloudfileArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingCloudfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingCloudfile {
		return vs[0].([]ServiceVclLoggingCloudfile)[vs[1].(int)]
	}).(ServiceVclLoggingCloudfileOutput)
}

type ServiceVclLoggingDatadog struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region *string `pulumi:"region"`
	// The name of the condition to apply.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The API key from your Datadog account
	Token string `pulumi:"token"`
}

// ServiceVclLoggingDatadogInput is an input type that accepts ServiceVclLoggingDatadogArgs and ServiceVclLoggingDatadogOutput values.
// You can construct a concrete instance of `ServiceVclLoggingDatadogInput` via:
//
//	ServiceVclLoggingDatadogArgs{...}
type ServiceVclLoggingDatadogInput interface {
	pulumi.Input

	ToServiceVclLoggingDatadogOutput() ServiceVclLoggingDatadogOutput
	ToServiceVclLoggingDatadogOutputWithContext(context.Context) ServiceVclLoggingDatadogOutput
}

type ServiceVclLoggingDatadogArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the condition to apply.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The API key from your Datadog account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceVclLoggingDatadogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingDatadog)(nil)).Elem()
}

func (i ServiceVclLoggingDatadogArgs) ToServiceVclLoggingDatadogOutput() ServiceVclLoggingDatadogOutput {
	return i.ToServiceVclLoggingDatadogOutputWithContext(context.Background())
}

func (i ServiceVclLoggingDatadogArgs) ToServiceVclLoggingDatadogOutputWithContext(ctx context.Context) ServiceVclLoggingDatadogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingDatadogOutput)
}

// ServiceVclLoggingDatadogArrayInput is an input type that accepts ServiceVclLoggingDatadogArray and ServiceVclLoggingDatadogArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingDatadogArrayInput` via:
//
//	ServiceVclLoggingDatadogArray{ ServiceVclLoggingDatadogArgs{...} }
type ServiceVclLoggingDatadogArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingDatadogArrayOutput() ServiceVclLoggingDatadogArrayOutput
	ToServiceVclLoggingDatadogArrayOutputWithContext(context.Context) ServiceVclLoggingDatadogArrayOutput
}

type ServiceVclLoggingDatadogArray []ServiceVclLoggingDatadogInput

func (ServiceVclLoggingDatadogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingDatadog)(nil)).Elem()
}

func (i ServiceVclLoggingDatadogArray) ToServiceVclLoggingDatadogArrayOutput() ServiceVclLoggingDatadogArrayOutput {
	return i.ToServiceVclLoggingDatadogArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingDatadogArray) ToServiceVclLoggingDatadogArrayOutputWithContext(ctx context.Context) ServiceVclLoggingDatadogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingDatadogArrayOutput)
}

type ServiceVclLoggingDatadogOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingDatadogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingDatadog)(nil)).Elem()
}

func (o ServiceVclLoggingDatadogOutput) ToServiceVclLoggingDatadogOutput() ServiceVclLoggingDatadogOutput {
	return o
}

func (o ServiceVclLoggingDatadogOutput) ToServiceVclLoggingDatadogOutputWithContext(ctx context.Context) ServiceVclLoggingDatadogOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o ServiceVclLoggingDatadogOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDatadog) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingDatadogOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDatadog) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Datadog logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingDatadogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingDatadog) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingDatadogOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDatadog) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
func (o ServiceVclLoggingDatadogOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDatadog) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply.
func (o ServiceVclLoggingDatadogOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDatadog) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The API key from your Datadog account
func (o ServiceVclLoggingDatadogOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingDatadog) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceVclLoggingDatadogArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingDatadogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingDatadog)(nil)).Elem()
}

func (o ServiceVclLoggingDatadogArrayOutput) ToServiceVclLoggingDatadogArrayOutput() ServiceVclLoggingDatadogArrayOutput {
	return o
}

func (o ServiceVclLoggingDatadogArrayOutput) ToServiceVclLoggingDatadogArrayOutputWithContext(ctx context.Context) ServiceVclLoggingDatadogArrayOutput {
	return o
}

func (o ServiceVclLoggingDatadogArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingDatadogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingDatadog {
		return vs[0].([]ServiceVclLoggingDatadog)[vs[1].(int)]
	}).(ServiceVclLoggingDatadogOutput)
}

type ServiceVclLoggingDigitalocean struct {
	// Your DigitalOcean Spaces account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of the DigitalOcean Space
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domain *string `pulumi:"domain"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The path to upload logs to
	Path *string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Your DigitalOcean Spaces account secret key
	SecretKey string `pulumi:"secretKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceVclLoggingDigitaloceanInput is an input type that accepts ServiceVclLoggingDigitaloceanArgs and ServiceVclLoggingDigitaloceanOutput values.
// You can construct a concrete instance of `ServiceVclLoggingDigitaloceanInput` via:
//
//	ServiceVclLoggingDigitaloceanArgs{...}
type ServiceVclLoggingDigitaloceanInput interface {
	pulumi.Input

	ToServiceVclLoggingDigitaloceanOutput() ServiceVclLoggingDigitaloceanOutput
	ToServiceVclLoggingDigitaloceanOutputWithContext(context.Context) ServiceVclLoggingDigitaloceanOutput
}

type ServiceVclLoggingDigitaloceanArgs struct {
	// Your DigitalOcean Spaces account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of the DigitalOcean Space
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The path to upload logs to
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Your DigitalOcean Spaces account secret key
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceVclLoggingDigitaloceanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingDigitalocean)(nil)).Elem()
}

func (i ServiceVclLoggingDigitaloceanArgs) ToServiceVclLoggingDigitaloceanOutput() ServiceVclLoggingDigitaloceanOutput {
	return i.ToServiceVclLoggingDigitaloceanOutputWithContext(context.Background())
}

func (i ServiceVclLoggingDigitaloceanArgs) ToServiceVclLoggingDigitaloceanOutputWithContext(ctx context.Context) ServiceVclLoggingDigitaloceanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingDigitaloceanOutput)
}

// ServiceVclLoggingDigitaloceanArrayInput is an input type that accepts ServiceVclLoggingDigitaloceanArray and ServiceVclLoggingDigitaloceanArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingDigitaloceanArrayInput` via:
//
//	ServiceVclLoggingDigitaloceanArray{ ServiceVclLoggingDigitaloceanArgs{...} }
type ServiceVclLoggingDigitaloceanArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingDigitaloceanArrayOutput() ServiceVclLoggingDigitaloceanArrayOutput
	ToServiceVclLoggingDigitaloceanArrayOutputWithContext(context.Context) ServiceVclLoggingDigitaloceanArrayOutput
}

type ServiceVclLoggingDigitaloceanArray []ServiceVclLoggingDigitaloceanInput

func (ServiceVclLoggingDigitaloceanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingDigitalocean)(nil)).Elem()
}

func (i ServiceVclLoggingDigitaloceanArray) ToServiceVclLoggingDigitaloceanArrayOutput() ServiceVclLoggingDigitaloceanArrayOutput {
	return i.ToServiceVclLoggingDigitaloceanArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingDigitaloceanArray) ToServiceVclLoggingDigitaloceanArrayOutputWithContext(ctx context.Context) ServiceVclLoggingDigitaloceanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingDigitaloceanArrayOutput)
}

type ServiceVclLoggingDigitaloceanOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingDigitaloceanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingDigitalocean)(nil)).Elem()
}

func (o ServiceVclLoggingDigitaloceanOutput) ToServiceVclLoggingDigitaloceanOutput() ServiceVclLoggingDigitaloceanOutput {
	return o
}

func (o ServiceVclLoggingDigitaloceanOutput) ToServiceVclLoggingDigitaloceanOutputWithContext(ctx context.Context) ServiceVclLoggingDigitaloceanOutput {
	return o
}

// Your DigitalOcean Spaces account access key
func (o ServiceVclLoggingDigitaloceanOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of the DigitalOcean Space
func (o ServiceVclLoggingDigitaloceanOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceVclLoggingDigitaloceanOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
func (o ServiceVclLoggingDigitaloceanOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Apache style log formatting.
func (o ServiceVclLoggingDigitaloceanOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingDigitaloceanOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceVclLoggingDigitaloceanOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingDigitaloceanOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the DigitalOcean Spaces logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingDigitaloceanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) string { return v.Name }).(pulumi.StringOutput)
}

// The path to upload logs to
func (o ServiceVclLoggingDigitaloceanOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceVclLoggingDigitaloceanOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o ServiceVclLoggingDigitaloceanOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceVclLoggingDigitaloceanOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingDigitaloceanOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Your DigitalOcean Spaces account secret key
func (o ServiceVclLoggingDigitaloceanOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceVclLoggingDigitaloceanOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingDigitalocean) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceVclLoggingDigitaloceanArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingDigitaloceanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingDigitalocean)(nil)).Elem()
}

func (o ServiceVclLoggingDigitaloceanArrayOutput) ToServiceVclLoggingDigitaloceanArrayOutput() ServiceVclLoggingDigitaloceanArrayOutput {
	return o
}

func (o ServiceVclLoggingDigitaloceanArrayOutput) ToServiceVclLoggingDigitaloceanArrayOutputWithContext(ctx context.Context) ServiceVclLoggingDigitaloceanArrayOutput {
	return o
}

func (o ServiceVclLoggingDigitaloceanArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingDigitaloceanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingDigitalocean {
		return vs[0].([]ServiceVclLoggingDigitalocean)[vs[1].(int)]
	}).(ServiceVclLoggingDigitaloceanOutput)
}

type ServiceVclLoggingElasticsearch struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// The name of the Elasticsearch index to send documents (logs) to
	Index string `pulumi:"index"`
	// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// BasicAuth password for Elasticsearch
	Password *string `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
	Pipeline *string `pulumi:"pipeline"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The maximum number of logs sent in one request. Defaults to `0` for unbounded
	RequestMaxBytes *int `pulumi:"requestMaxBytes"`
	// The maximum number of bytes sent in one request. Defaults to `0` for unbounded
	RequestMaxEntries *int `pulumi:"requestMaxEntries"`
	// The name of the condition to apply
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to
	Url string `pulumi:"url"`
	// BasicAuth username for Elasticsearch
	User *string `pulumi:"user"`
}

// ServiceVclLoggingElasticsearchInput is an input type that accepts ServiceVclLoggingElasticsearchArgs and ServiceVclLoggingElasticsearchOutput values.
// You can construct a concrete instance of `ServiceVclLoggingElasticsearchInput` via:
//
//	ServiceVclLoggingElasticsearchArgs{...}
type ServiceVclLoggingElasticsearchInput interface {
	pulumi.Input

	ToServiceVclLoggingElasticsearchOutput() ServiceVclLoggingElasticsearchOutput
	ToServiceVclLoggingElasticsearchOutputWithContext(context.Context) ServiceVclLoggingElasticsearchOutput
}

type ServiceVclLoggingElasticsearchArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The name of the Elasticsearch index to send documents (logs) to
	Index pulumi.StringInput `pulumi:"index"`
	// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// BasicAuth password for Elasticsearch
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
	Pipeline pulumi.StringPtrInput `pulumi:"pipeline"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The maximum number of logs sent in one request. Defaults to `0` for unbounded
	RequestMaxBytes pulumi.IntPtrInput `pulumi:"requestMaxBytes"`
	// The maximum number of bytes sent in one request. Defaults to `0` for unbounded
	RequestMaxEntries pulumi.IntPtrInput `pulumi:"requestMaxEntries"`
	// The name of the condition to apply
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Elasticsearch URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
	// BasicAuth username for Elasticsearch
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceVclLoggingElasticsearchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingElasticsearch)(nil)).Elem()
}

func (i ServiceVclLoggingElasticsearchArgs) ToServiceVclLoggingElasticsearchOutput() ServiceVclLoggingElasticsearchOutput {
	return i.ToServiceVclLoggingElasticsearchOutputWithContext(context.Background())
}

func (i ServiceVclLoggingElasticsearchArgs) ToServiceVclLoggingElasticsearchOutputWithContext(ctx context.Context) ServiceVclLoggingElasticsearchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingElasticsearchOutput)
}

// ServiceVclLoggingElasticsearchArrayInput is an input type that accepts ServiceVclLoggingElasticsearchArray and ServiceVclLoggingElasticsearchArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingElasticsearchArrayInput` via:
//
//	ServiceVclLoggingElasticsearchArray{ ServiceVclLoggingElasticsearchArgs{...} }
type ServiceVclLoggingElasticsearchArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingElasticsearchArrayOutput() ServiceVclLoggingElasticsearchArrayOutput
	ToServiceVclLoggingElasticsearchArrayOutputWithContext(context.Context) ServiceVclLoggingElasticsearchArrayOutput
}

type ServiceVclLoggingElasticsearchArray []ServiceVclLoggingElasticsearchInput

func (ServiceVclLoggingElasticsearchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingElasticsearch)(nil)).Elem()
}

func (i ServiceVclLoggingElasticsearchArray) ToServiceVclLoggingElasticsearchArrayOutput() ServiceVclLoggingElasticsearchArrayOutput {
	return i.ToServiceVclLoggingElasticsearchArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingElasticsearchArray) ToServiceVclLoggingElasticsearchArrayOutputWithContext(ctx context.Context) ServiceVclLoggingElasticsearchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingElasticsearchArrayOutput)
}

type ServiceVclLoggingElasticsearchOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingElasticsearchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingElasticsearch)(nil)).Elem()
}

func (o ServiceVclLoggingElasticsearchOutput) ToServiceVclLoggingElasticsearchOutput() ServiceVclLoggingElasticsearchOutput {
	return o
}

func (o ServiceVclLoggingElasticsearchOutput) ToServiceVclLoggingElasticsearchOutputWithContext(ctx context.Context) ServiceVclLoggingElasticsearchOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o ServiceVclLoggingElasticsearchOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o ServiceVclLoggingElasticsearchOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The name of the Elasticsearch index to send documents (logs) to
func (o ServiceVclLoggingElasticsearchOutput) Index() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) string { return v.Index }).(pulumi.StringOutput)
}

// The unique name of the Elasticsearch logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingElasticsearchOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) string { return v.Name }).(pulumi.StringOutput)
}

// BasicAuth password for Elasticsearch
func (o ServiceVclLoggingElasticsearchOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The ID of the Elasticsearch ingest pipeline to apply pre-process transformations to before indexing
func (o ServiceVclLoggingElasticsearchOutput) Pipeline() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.Pipeline }).(pulumi.StringPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingElasticsearchOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The maximum number of logs sent in one request. Defaults to `0` for unbounded
func (o ServiceVclLoggingElasticsearchOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The maximum number of bytes sent in one request. Defaults to `0` for unbounded
func (o ServiceVclLoggingElasticsearchOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

// The name of the condition to apply
func (o ServiceVclLoggingElasticsearchOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format
func (o ServiceVclLoggingElasticsearchOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format
func (o ServiceVclLoggingElasticsearchOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format
func (o ServiceVclLoggingElasticsearchOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name (CN) or a Subject Alternative Name (SAN)
func (o ServiceVclLoggingElasticsearchOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Elasticsearch URL to stream logs to
func (o ServiceVclLoggingElasticsearchOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) string { return v.Url }).(pulumi.StringOutput)
}

// BasicAuth username for Elasticsearch
func (o ServiceVclLoggingElasticsearchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingElasticsearch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceVclLoggingElasticsearchArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingElasticsearchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingElasticsearch)(nil)).Elem()
}

func (o ServiceVclLoggingElasticsearchArrayOutput) ToServiceVclLoggingElasticsearchArrayOutput() ServiceVclLoggingElasticsearchArrayOutput {
	return o
}

func (o ServiceVclLoggingElasticsearchArrayOutput) ToServiceVclLoggingElasticsearchArrayOutputWithContext(ctx context.Context) ServiceVclLoggingElasticsearchArrayOutput {
	return o
}

func (o ServiceVclLoggingElasticsearchArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingElasticsearchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingElasticsearch {
		return vs[0].([]ServiceVclLoggingElasticsearch)[vs[1].(int)]
	}).(ServiceVclLoggingElasticsearchOutput)
}

type ServiceVclLoggingFtp struct {
	// The FTP address to stream logs to
	Address string `pulumi:"address"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The password for the server (for anonymous use an email address)
	Password string `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default `3600`)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The port number. Default: `21`
	Port *int `pulumi:"port"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of the condition to apply.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for the server (can be `anonymous`)
	User string `pulumi:"user"`
}

// ServiceVclLoggingFtpInput is an input type that accepts ServiceVclLoggingFtpArgs and ServiceVclLoggingFtpOutput values.
// You can construct a concrete instance of `ServiceVclLoggingFtpInput` via:
//
//	ServiceVclLoggingFtpArgs{...}
type ServiceVclLoggingFtpInput interface {
	pulumi.Input

	ToServiceVclLoggingFtpOutput() ServiceVclLoggingFtpOutput
	ToServiceVclLoggingFtpOutputWithContext(context.Context) ServiceVclLoggingFtpOutput
}

type ServiceVclLoggingFtpArgs struct {
	// The FTP address to stream logs to
	Address pulumi.StringInput `pulumi:"address"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server (for anonymous use an email address)
	Password pulumi.StringInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port number. Default: `21`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the condition to apply.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for the server (can be `anonymous`)
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceVclLoggingFtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingFtp)(nil)).Elem()
}

func (i ServiceVclLoggingFtpArgs) ToServiceVclLoggingFtpOutput() ServiceVclLoggingFtpOutput {
	return i.ToServiceVclLoggingFtpOutputWithContext(context.Background())
}

func (i ServiceVclLoggingFtpArgs) ToServiceVclLoggingFtpOutputWithContext(ctx context.Context) ServiceVclLoggingFtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingFtpOutput)
}

// ServiceVclLoggingFtpArrayInput is an input type that accepts ServiceVclLoggingFtpArray and ServiceVclLoggingFtpArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingFtpArrayInput` via:
//
//	ServiceVclLoggingFtpArray{ ServiceVclLoggingFtpArgs{...} }
type ServiceVclLoggingFtpArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingFtpArrayOutput() ServiceVclLoggingFtpArrayOutput
	ToServiceVclLoggingFtpArrayOutputWithContext(context.Context) ServiceVclLoggingFtpArrayOutput
}

type ServiceVclLoggingFtpArray []ServiceVclLoggingFtpInput

func (ServiceVclLoggingFtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingFtp)(nil)).Elem()
}

func (i ServiceVclLoggingFtpArray) ToServiceVclLoggingFtpArrayOutput() ServiceVclLoggingFtpArrayOutput {
	return i.ToServiceVclLoggingFtpArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingFtpArray) ToServiceVclLoggingFtpArrayOutputWithContext(ctx context.Context) ServiceVclLoggingFtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingFtpArrayOutput)
}

type ServiceVclLoggingFtpOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingFtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingFtp)(nil)).Elem()
}

func (o ServiceVclLoggingFtpOutput) ToServiceVclLoggingFtpOutput() ServiceVclLoggingFtpOutput {
	return o
}

func (o ServiceVclLoggingFtpOutput) ToServiceVclLoggingFtpOutputWithContext(ctx context.Context) ServiceVclLoggingFtpOutput {
	return o
}

// The FTP address to stream logs to
func (o ServiceVclLoggingFtpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) string { return v.Address }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceVclLoggingFtpOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o ServiceVclLoggingFtpOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o ServiceVclLoggingFtpOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceVclLoggingFtpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingFtpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the FTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingFtpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server (for anonymous use an email address)
func (o ServiceVclLoggingFtpOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) string { return v.Password }).(pulumi.StringOutput)
}

// The path to upload log files to. If the path ends in `/` then it is treated as a directory
func (o ServiceVclLoggingFtpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently the logs should be transferred, in seconds (Default `3600`)
func (o ServiceVclLoggingFtpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingFtpOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port number. Default: `21`
func (o ServiceVclLoggingFtpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceVclLoggingFtpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply.
func (o ServiceVclLoggingFtpOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceVclLoggingFtpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for the server (can be `anonymous`)
func (o ServiceVclLoggingFtpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingFtp) string { return v.User }).(pulumi.StringOutput)
}

type ServiceVclLoggingFtpArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingFtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingFtp)(nil)).Elem()
}

func (o ServiceVclLoggingFtpArrayOutput) ToServiceVclLoggingFtpArrayOutput() ServiceVclLoggingFtpArrayOutput {
	return o
}

func (o ServiceVclLoggingFtpArrayOutput) ToServiceVclLoggingFtpArrayOutputWithContext(ctx context.Context) ServiceVclLoggingFtpArrayOutput {
	return o
}

func (o ServiceVclLoggingFtpArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingFtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingFtp {
		return vs[0].([]ServiceVclLoggingFtp)[vs[1].(int)]
	}).(ServiceVclLoggingFtpOutput)
}

type ServiceVclLoggingGc struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName *string `pulumi:"accountName"`
	// The name of the bucket in which to store the logs
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Apache-style string or VCL variables to use for log formatting
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default 3600)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The ID of your Google Cloud Platform project
	ProjectId *string `pulumi:"projectId"`
	// Name of a condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
	SecretKey *string `pulumi:"secretKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.
	User *string `pulumi:"user"`
}

// ServiceVclLoggingGcInput is an input type that accepts ServiceVclLoggingGcArgs and ServiceVclLoggingGcOutput values.
// You can construct a concrete instance of `ServiceVclLoggingGcInput` via:
//
//	ServiceVclLoggingGcArgs{...}
type ServiceVclLoggingGcInput interface {
	pulumi.Input

	ToServiceVclLoggingGcOutput() ServiceVclLoggingGcOutput
	ToServiceVclLoggingGcOutputWithContext(context.Context) ServiceVclLoggingGcOutput
}

type ServiceVclLoggingGcArgs struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// The name of the bucket in which to store the logs
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Apache-style string or VCL variables to use for log formatting
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds (Default 3600)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The ID of your Google Cloud Platform project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Name of a condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceVclLoggingGcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingGc)(nil)).Elem()
}

func (i ServiceVclLoggingGcArgs) ToServiceVclLoggingGcOutput() ServiceVclLoggingGcOutput {
	return i.ToServiceVclLoggingGcOutputWithContext(context.Background())
}

func (i ServiceVclLoggingGcArgs) ToServiceVclLoggingGcOutputWithContext(ctx context.Context) ServiceVclLoggingGcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingGcOutput)
}

// ServiceVclLoggingGcArrayInput is an input type that accepts ServiceVclLoggingGcArray and ServiceVclLoggingGcArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingGcArrayInput` via:
//
//	ServiceVclLoggingGcArray{ ServiceVclLoggingGcArgs{...} }
type ServiceVclLoggingGcArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingGcArrayOutput() ServiceVclLoggingGcArrayOutput
	ToServiceVclLoggingGcArrayOutputWithContext(context.Context) ServiceVclLoggingGcArrayOutput
}

type ServiceVclLoggingGcArray []ServiceVclLoggingGcInput

func (ServiceVclLoggingGcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingGc)(nil)).Elem()
}

func (i ServiceVclLoggingGcArray) ToServiceVclLoggingGcArrayOutput() ServiceVclLoggingGcArrayOutput {
	return i.ToServiceVclLoggingGcArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingGcArray) ToServiceVclLoggingGcArrayOutputWithContext(ctx context.Context) ServiceVclLoggingGcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingGcArrayOutput)
}

type ServiceVclLoggingGcOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingGcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingGc)(nil)).Elem()
}

func (o ServiceVclLoggingGcOutput) ToServiceVclLoggingGcOutput() ServiceVclLoggingGcOutput {
	return o
}

func (o ServiceVclLoggingGcOutput) ToServiceVclLoggingGcOutputWithContext(ctx context.Context) ServiceVclLoggingGcOutput {
	return o
}

// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
func (o ServiceVclLoggingGcOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The name of the bucket in which to store the logs
func (o ServiceVclLoggingGcOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceVclLoggingGcOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting
func (o ServiceVclLoggingGcOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
func (o ServiceVclLoggingGcOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceVclLoggingGcOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingGcOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this GCS endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingGcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceVclLoggingGcOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds (Default 3600)
func (o ServiceVclLoggingGcOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingGcOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The ID of your Google Cloud Platform project
func (o ServiceVclLoggingGcOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Name of a condition to apply this logging.
func (o ServiceVclLoggingGcOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The secret key associated with the target gcs bucket on your account. You may optionally provide this secret via an environment variable, `FASTLY_GCS_SECRET_KEY`. A typical format for the key is PEM format, containing actual newline characters where required
func (o ServiceVclLoggingGcOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceVclLoggingGcOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GCS_EMAIL`.
func (o ServiceVclLoggingGcOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGc) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceVclLoggingGcArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingGcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingGc)(nil)).Elem()
}

func (o ServiceVclLoggingGcArrayOutput) ToServiceVclLoggingGcArrayOutput() ServiceVclLoggingGcArrayOutput {
	return o
}

func (o ServiceVclLoggingGcArrayOutput) ToServiceVclLoggingGcArrayOutputWithContext(ctx context.Context) ServiceVclLoggingGcArrayOutput {
	return o
}

func (o ServiceVclLoggingGcArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingGcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingGc {
		return vs[0].([]ServiceVclLoggingGc)[vs[1].(int)]
	}).(ServiceVclLoggingGcOutput)
}

type ServiceVclLoggingGooglepubsub struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName *string `pulumi:"accountName"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The ID of your Google Cloud Platform project
	ProjectId string `pulumi:"projectId"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
	SecretKey string `pulumi:"secretKey"`
	// The Google Cloud Pub/Sub topic to which logs will be published
	Topic string `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
	User string `pulumi:"user"`
}

// ServiceVclLoggingGooglepubsubInput is an input type that accepts ServiceVclLoggingGooglepubsubArgs and ServiceVclLoggingGooglepubsubOutput values.
// You can construct a concrete instance of `ServiceVclLoggingGooglepubsubInput` via:
//
//	ServiceVclLoggingGooglepubsubArgs{...}
type ServiceVclLoggingGooglepubsubInput interface {
	pulumi.Input

	ToServiceVclLoggingGooglepubsubOutput() ServiceVclLoggingGooglepubsubOutput
	ToServiceVclLoggingGooglepubsubOutputWithContext(context.Context) ServiceVclLoggingGooglepubsubOutput
}

type ServiceVclLoggingGooglepubsubArgs struct {
	// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The ID of your Google Cloud Platform project
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The Google Cloud Pub/Sub topic to which logs will be published
	Topic pulumi.StringInput `pulumi:"topic"`
	// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceVclLoggingGooglepubsubArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingGooglepubsub)(nil)).Elem()
}

func (i ServiceVclLoggingGooglepubsubArgs) ToServiceVclLoggingGooglepubsubOutput() ServiceVclLoggingGooglepubsubOutput {
	return i.ToServiceVclLoggingGooglepubsubOutputWithContext(context.Background())
}

func (i ServiceVclLoggingGooglepubsubArgs) ToServiceVclLoggingGooglepubsubOutputWithContext(ctx context.Context) ServiceVclLoggingGooglepubsubOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingGooglepubsubOutput)
}

// ServiceVclLoggingGooglepubsubArrayInput is an input type that accepts ServiceVclLoggingGooglepubsubArray and ServiceVclLoggingGooglepubsubArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingGooglepubsubArrayInput` via:
//
//	ServiceVclLoggingGooglepubsubArray{ ServiceVclLoggingGooglepubsubArgs{...} }
type ServiceVclLoggingGooglepubsubArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingGooglepubsubArrayOutput() ServiceVclLoggingGooglepubsubArrayOutput
	ToServiceVclLoggingGooglepubsubArrayOutputWithContext(context.Context) ServiceVclLoggingGooglepubsubArrayOutput
}

type ServiceVclLoggingGooglepubsubArray []ServiceVclLoggingGooglepubsubInput

func (ServiceVclLoggingGooglepubsubArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingGooglepubsub)(nil)).Elem()
}

func (i ServiceVclLoggingGooglepubsubArray) ToServiceVclLoggingGooglepubsubArrayOutput() ServiceVclLoggingGooglepubsubArrayOutput {
	return i.ToServiceVclLoggingGooglepubsubArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingGooglepubsubArray) ToServiceVclLoggingGooglepubsubArrayOutputWithContext(ctx context.Context) ServiceVclLoggingGooglepubsubArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingGooglepubsubArrayOutput)
}

type ServiceVclLoggingGooglepubsubOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingGooglepubsubOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingGooglepubsub)(nil)).Elem()
}

func (o ServiceVclLoggingGooglepubsubOutput) ToServiceVclLoggingGooglepubsubOutput() ServiceVclLoggingGooglepubsubOutput {
	return o
}

func (o ServiceVclLoggingGooglepubsubOutput) ToServiceVclLoggingGooglepubsubOutputWithContext(ctx context.Context) ServiceVclLoggingGooglepubsubOutput {
	return o
}

// The google account name used to obtain temporary credentials (default none). You may optionally provide this via an environment variable, `FASTLY_GCS_ACCOUNT_NAME`.
func (o ServiceVclLoggingGooglepubsubOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// Apache style log formatting.
func (o ServiceVclLoggingGooglepubsubOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o ServiceVclLoggingGooglepubsubOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Google Cloud Pub/Sub logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingGooglepubsubOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingGooglepubsubOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The ID of your Google Cloud Platform project
func (o ServiceVclLoggingGooglepubsubOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingGooglepubsubOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Your Google Cloud Platform account secret key. The `privateKey` field in your service account authentication JSON. You may optionally provide this secret via an environment variable, `FASTLY_GOOGLE_PUBSUB_SECRET_KEY`.
func (o ServiceVclLoggingGooglepubsubOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The Google Cloud Pub/Sub topic to which logs will be published
func (o ServiceVclLoggingGooglepubsubOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) string { return v.Topic }).(pulumi.StringOutput)
}

// Your Google Cloud Platform service account email address. The `clientEmail` field in your service account authentication JSON. You may optionally provide this via an environment variable, `FASTLY_GOOGLE_PUBSUB_EMAIL`.
func (o ServiceVclLoggingGooglepubsubOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingGooglepubsub) string { return v.User }).(pulumi.StringOutput)
}

type ServiceVclLoggingGooglepubsubArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingGooglepubsubArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingGooglepubsub)(nil)).Elem()
}

func (o ServiceVclLoggingGooglepubsubArrayOutput) ToServiceVclLoggingGooglepubsubArrayOutput() ServiceVclLoggingGooglepubsubArrayOutput {
	return o
}

func (o ServiceVclLoggingGooglepubsubArrayOutput) ToServiceVclLoggingGooglepubsubArrayOutputWithContext(ctx context.Context) ServiceVclLoggingGooglepubsubArrayOutput {
	return o
}

func (o ServiceVclLoggingGooglepubsubArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingGooglepubsubOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingGooglepubsub {
		return vs[0].([]ServiceVclLoggingGooglepubsub)[vs[1].(int)]
	}).(ServiceVclLoggingGooglepubsubOutput)
}

type ServiceVclLoggingHerokus struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
	Token string `pulumi:"token"`
	// The URL to stream logs to
	Url string `pulumi:"url"`
}

// ServiceVclLoggingHerokusInput is an input type that accepts ServiceVclLoggingHerokusArgs and ServiceVclLoggingHerokusOutput values.
// You can construct a concrete instance of `ServiceVclLoggingHerokusInput` via:
//
//	ServiceVclLoggingHerokusArgs{...}
type ServiceVclLoggingHerokusInput interface {
	pulumi.Input

	ToServiceVclLoggingHerokusOutput() ServiceVclLoggingHerokusOutput
	ToServiceVclLoggingHerokusOutputWithContext(context.Context) ServiceVclLoggingHerokusOutput
}

type ServiceVclLoggingHerokusArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
	Token pulumi.StringInput `pulumi:"token"`
	// The URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceVclLoggingHerokusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingHerokus)(nil)).Elem()
}

func (i ServiceVclLoggingHerokusArgs) ToServiceVclLoggingHerokusOutput() ServiceVclLoggingHerokusOutput {
	return i.ToServiceVclLoggingHerokusOutputWithContext(context.Background())
}

func (i ServiceVclLoggingHerokusArgs) ToServiceVclLoggingHerokusOutputWithContext(ctx context.Context) ServiceVclLoggingHerokusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingHerokusOutput)
}

// ServiceVclLoggingHerokusArrayInput is an input type that accepts ServiceVclLoggingHerokusArray and ServiceVclLoggingHerokusArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingHerokusArrayInput` via:
//
//	ServiceVclLoggingHerokusArray{ ServiceVclLoggingHerokusArgs{...} }
type ServiceVclLoggingHerokusArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingHerokusArrayOutput() ServiceVclLoggingHerokusArrayOutput
	ToServiceVclLoggingHerokusArrayOutputWithContext(context.Context) ServiceVclLoggingHerokusArrayOutput
}

type ServiceVclLoggingHerokusArray []ServiceVclLoggingHerokusInput

func (ServiceVclLoggingHerokusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingHerokus)(nil)).Elem()
}

func (i ServiceVclLoggingHerokusArray) ToServiceVclLoggingHerokusArrayOutput() ServiceVclLoggingHerokusArrayOutput {
	return i.ToServiceVclLoggingHerokusArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingHerokusArray) ToServiceVclLoggingHerokusArrayOutputWithContext(ctx context.Context) ServiceVclLoggingHerokusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingHerokusArrayOutput)
}

type ServiceVclLoggingHerokusOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingHerokusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingHerokus)(nil)).Elem()
}

func (o ServiceVclLoggingHerokusOutput) ToServiceVclLoggingHerokusOutput() ServiceVclLoggingHerokusOutput {
	return o
}

func (o ServiceVclLoggingHerokusOutput) ToServiceVclLoggingHerokusOutputWithContext(ctx context.Context) ServiceVclLoggingHerokusOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o ServiceVclLoggingHerokusOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHerokus) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingHerokusOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHerokus) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Heroku logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingHerokusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingHerokus) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o ServiceVclLoggingHerokusOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHerokus) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingHerokusOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHerokus) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.heroku.com/docs/customer-token-authentication-token/)
func (o ServiceVclLoggingHerokusOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingHerokus) string { return v.Token }).(pulumi.StringOutput)
}

// The URL to stream logs to
func (o ServiceVclLoggingHerokusOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingHerokus) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceVclLoggingHerokusArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingHerokusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingHerokus)(nil)).Elem()
}

func (o ServiceVclLoggingHerokusArrayOutput) ToServiceVclLoggingHerokusArrayOutput() ServiceVclLoggingHerokusArrayOutput {
	return o
}

func (o ServiceVclLoggingHerokusArrayOutput) ToServiceVclLoggingHerokusArrayOutputWithContext(ctx context.Context) ServiceVclLoggingHerokusArrayOutput {
	return o
}

func (o ServiceVclLoggingHerokusArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingHerokusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingHerokus {
		return vs[0].([]ServiceVclLoggingHerokus)[vs[1].(int)]
	}).(ServiceVclLoggingHerokusOutput)
}

type ServiceVclLoggingHoneycomb struct {
	// The Honeycomb Dataset you want to log to
	Dataset string `pulumi:"dataset"`
	// Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The Write Key from the Account page of your Honeycomb account
	Token string `pulumi:"token"`
}

// ServiceVclLoggingHoneycombInput is an input type that accepts ServiceVclLoggingHoneycombArgs and ServiceVclLoggingHoneycombOutput values.
// You can construct a concrete instance of `ServiceVclLoggingHoneycombInput` via:
//
//	ServiceVclLoggingHoneycombArgs{...}
type ServiceVclLoggingHoneycombInput interface {
	pulumi.Input

	ToServiceVclLoggingHoneycombOutput() ServiceVclLoggingHoneycombOutput
	ToServiceVclLoggingHoneycombOutputWithContext(context.Context) ServiceVclLoggingHoneycombOutput
}

type ServiceVclLoggingHoneycombArgs struct {
	// The Honeycomb Dataset you want to log to
	Dataset pulumi.StringInput `pulumi:"dataset"`
	// Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The Write Key from the Account page of your Honeycomb account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceVclLoggingHoneycombArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingHoneycomb)(nil)).Elem()
}

func (i ServiceVclLoggingHoneycombArgs) ToServiceVclLoggingHoneycombOutput() ServiceVclLoggingHoneycombOutput {
	return i.ToServiceVclLoggingHoneycombOutputWithContext(context.Background())
}

func (i ServiceVclLoggingHoneycombArgs) ToServiceVclLoggingHoneycombOutputWithContext(ctx context.Context) ServiceVclLoggingHoneycombOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingHoneycombOutput)
}

// ServiceVclLoggingHoneycombArrayInput is an input type that accepts ServiceVclLoggingHoneycombArray and ServiceVclLoggingHoneycombArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingHoneycombArrayInput` via:
//
//	ServiceVclLoggingHoneycombArray{ ServiceVclLoggingHoneycombArgs{...} }
type ServiceVclLoggingHoneycombArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingHoneycombArrayOutput() ServiceVclLoggingHoneycombArrayOutput
	ToServiceVclLoggingHoneycombArrayOutputWithContext(context.Context) ServiceVclLoggingHoneycombArrayOutput
}

type ServiceVclLoggingHoneycombArray []ServiceVclLoggingHoneycombInput

func (ServiceVclLoggingHoneycombArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingHoneycomb)(nil)).Elem()
}

func (i ServiceVclLoggingHoneycombArray) ToServiceVclLoggingHoneycombArrayOutput() ServiceVclLoggingHoneycombArrayOutput {
	return i.ToServiceVclLoggingHoneycombArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingHoneycombArray) ToServiceVclLoggingHoneycombArrayOutputWithContext(ctx context.Context) ServiceVclLoggingHoneycombArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingHoneycombArrayOutput)
}

type ServiceVclLoggingHoneycombOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingHoneycombOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingHoneycomb)(nil)).Elem()
}

func (o ServiceVclLoggingHoneycombOutput) ToServiceVclLoggingHoneycombOutput() ServiceVclLoggingHoneycombOutput {
	return o
}

func (o ServiceVclLoggingHoneycombOutput) ToServiceVclLoggingHoneycombOutputWithContext(ctx context.Context) ServiceVclLoggingHoneycombOutput {
	return o
}

// The Honeycomb Dataset you want to log to
func (o ServiceVclLoggingHoneycombOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingHoneycomb) string { return v.Dataset }).(pulumi.StringOutput)
}

// Apache style log formatting. Your log must produce valid JSON that Honeycomb can ingest.
func (o ServiceVclLoggingHoneycombOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHoneycomb) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingHoneycombOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHoneycomb) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Honeycomb logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingHoneycombOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingHoneycomb) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o ServiceVclLoggingHoneycombOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHoneycomb) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingHoneycombOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHoneycomb) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The Write Key from the Account page of your Honeycomb account
func (o ServiceVclLoggingHoneycombOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingHoneycomb) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceVclLoggingHoneycombArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingHoneycombArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingHoneycomb)(nil)).Elem()
}

func (o ServiceVclLoggingHoneycombArrayOutput) ToServiceVclLoggingHoneycombArrayOutput() ServiceVclLoggingHoneycombArrayOutput {
	return o
}

func (o ServiceVclLoggingHoneycombArrayOutput) ToServiceVclLoggingHoneycombArrayOutputWithContext(ctx context.Context) ServiceVclLoggingHoneycombArrayOutput {
	return o
}

func (o ServiceVclLoggingHoneycombArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingHoneycombOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingHoneycomb {
		return vs[0].([]ServiceVclLoggingHoneycomb)[vs[1].(int)]
	}).(ServiceVclLoggingHoneycombOutput)
}

type ServiceVclLoggingHttp struct {
	// Value of the `Content-Type` header sent with the request
	ContentType *string `pulumi:"contentType"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// Custom header sent with the request
	HeaderName *string `pulumi:"headerName"`
	// Value of the custom header sent with the request
	HeaderValue *string `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
	JsonFormat *string `pulumi:"jsonFormat"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
	Method *string `pulumi:"method"`
	// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed
	Placement *string `pulumi:"placement"`
	// The maximum number of bytes sent in one request
	RequestMaxBytes *int `pulumi:"requestMaxBytes"`
	// The maximum number of logs sent in one request
	RequestMaxEntries *int `pulumi:"requestMaxEntries"`
	// The name of the condition to apply
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname *string `pulumi:"tlsHostname"`
	// URL that log data will be sent to. Must use the https protocol
	Url string `pulumi:"url"`
}

// ServiceVclLoggingHttpInput is an input type that accepts ServiceVclLoggingHttpArgs and ServiceVclLoggingHttpOutput values.
// You can construct a concrete instance of `ServiceVclLoggingHttpInput` via:
//
//	ServiceVclLoggingHttpArgs{...}
type ServiceVclLoggingHttpInput interface {
	pulumi.Input

	ToServiceVclLoggingHttpOutput() ServiceVclLoggingHttpOutput
	ToServiceVclLoggingHttpOutputWithContext(context.Context) ServiceVclLoggingHttpOutput
}

type ServiceVclLoggingHttpArgs struct {
	// Value of the `Content-Type` header sent with the request
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Custom header sent with the request
	HeaderName pulumi.StringPtrInput `pulumi:"headerName"`
	// Value of the custom header sent with the request
	HeaderValue pulumi.StringPtrInput `pulumi:"headerValue"`
	// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
	JsonFormat pulumi.StringPtrInput `pulumi:"jsonFormat"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The maximum number of bytes sent in one request
	RequestMaxBytes pulumi.IntPtrInput `pulumi:"requestMaxBytes"`
	// The maximum number of logs sent in one request
	RequestMaxEntries pulumi.IntPtrInput `pulumi:"requestMaxEntries"`
	// The name of the condition to apply
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// URL that log data will be sent to. Must use the https protocol
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceVclLoggingHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingHttp)(nil)).Elem()
}

func (i ServiceVclLoggingHttpArgs) ToServiceVclLoggingHttpOutput() ServiceVclLoggingHttpOutput {
	return i.ToServiceVclLoggingHttpOutputWithContext(context.Background())
}

func (i ServiceVclLoggingHttpArgs) ToServiceVclLoggingHttpOutputWithContext(ctx context.Context) ServiceVclLoggingHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingHttpOutput)
}

// ServiceVclLoggingHttpArrayInput is an input type that accepts ServiceVclLoggingHttpArray and ServiceVclLoggingHttpArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingHttpArrayInput` via:
//
//	ServiceVclLoggingHttpArray{ ServiceVclLoggingHttpArgs{...} }
type ServiceVclLoggingHttpArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingHttpArrayOutput() ServiceVclLoggingHttpArrayOutput
	ToServiceVclLoggingHttpArrayOutputWithContext(context.Context) ServiceVclLoggingHttpArrayOutput
}

type ServiceVclLoggingHttpArray []ServiceVclLoggingHttpInput

func (ServiceVclLoggingHttpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingHttp)(nil)).Elem()
}

func (i ServiceVclLoggingHttpArray) ToServiceVclLoggingHttpArrayOutput() ServiceVclLoggingHttpArrayOutput {
	return i.ToServiceVclLoggingHttpArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingHttpArray) ToServiceVclLoggingHttpArrayOutputWithContext(ctx context.Context) ServiceVclLoggingHttpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingHttpArrayOutput)
}

type ServiceVclLoggingHttpOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingHttp)(nil)).Elem()
}

func (o ServiceVclLoggingHttpOutput) ToServiceVclLoggingHttpOutput() ServiceVclLoggingHttpOutput {
	return o
}

func (o ServiceVclLoggingHttpOutput) ToServiceVclLoggingHttpOutputWithContext(ctx context.Context) ServiceVclLoggingHttpOutput {
	return o
}

// Value of the `Content-Type` header sent with the request
func (o ServiceVclLoggingHttpOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o ServiceVclLoggingHttpOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
func (o ServiceVclLoggingHttpOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Custom header sent with the request
func (o ServiceVclLoggingHttpOutput) HeaderName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.HeaderName }).(pulumi.StringPtrOutput)
}

// Value of the custom header sent with the request
func (o ServiceVclLoggingHttpOutput) HeaderValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.HeaderValue }).(pulumi.StringPtrOutput)
}

// Formats log entries as JSON. Can be either disabled (`0`), array of json (`1`), or newline delimited json (`2`)
func (o ServiceVclLoggingHttpOutput) JsonFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.JsonFormat }).(pulumi.StringPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingHttpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// HTTP method used for request. Can be either `POST` or `PUT`. Default `POST`
func (o ServiceVclLoggingHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The unique name of the HTTPS logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingHttpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed
func (o ServiceVclLoggingHttpOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The maximum number of bytes sent in one request
func (o ServiceVclLoggingHttpOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The maximum number of logs sent in one request
func (o ServiceVclLoggingHttpOutput) RequestMaxEntries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *int { return v.RequestMaxEntries }).(pulumi.IntPtrOutput)
}

// The name of the condition to apply
func (o ServiceVclLoggingHttpOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format
func (o ServiceVclLoggingHttpOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format
func (o ServiceVclLoggingHttpOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format
func (o ServiceVclLoggingHttpOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// Used during the TLS handshake to validate the certificate
func (o ServiceVclLoggingHttpOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// URL that log data will be sent to. Must use the https protocol
func (o ServiceVclLoggingHttpOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingHttp) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceVclLoggingHttpArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingHttpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingHttp)(nil)).Elem()
}

func (o ServiceVclLoggingHttpArrayOutput) ToServiceVclLoggingHttpArrayOutput() ServiceVclLoggingHttpArrayOutput {
	return o
}

func (o ServiceVclLoggingHttpArrayOutput) ToServiceVclLoggingHttpArrayOutputWithContext(ctx context.Context) ServiceVclLoggingHttpArrayOutput {
	return o
}

func (o ServiceVclLoggingHttpArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingHttpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingHttp {
		return vs[0].([]ServiceVclLoggingHttp)[vs[1].(int)]
	}).(ServiceVclLoggingHttpOutput)
}

type ServiceVclLoggingKafka struct {
	// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
	AuthMethod *string `pulumi:"authMethod"`
	// A comma-separated list of IP addresses or hostnames of Kafka brokers
	Brokers string `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
	ParseLogKeyvals *bool `pulumi:"parseLogKeyvals"`
	// SASL Pass
	Password *string `pulumi:"password"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
	RequestMaxBytes *int `pulumi:"requestMaxBytes"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
	RequiredAcks *string `pulumi:"requiredAcks"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to
	Topic string `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either `true` or `false`
	UseTls *bool `pulumi:"useTls"`
	// SASL User
	User *string `pulumi:"user"`
}

// ServiceVclLoggingKafkaInput is an input type that accepts ServiceVclLoggingKafkaArgs and ServiceVclLoggingKafkaOutput values.
// You can construct a concrete instance of `ServiceVclLoggingKafkaInput` via:
//
//	ServiceVclLoggingKafkaArgs{...}
type ServiceVclLoggingKafkaInput interface {
	pulumi.Input

	ToServiceVclLoggingKafkaOutput() ServiceVclLoggingKafkaOutput
	ToServiceVclLoggingKafkaOutputWithContext(context.Context) ServiceVclLoggingKafkaOutput
}

type ServiceVclLoggingKafkaArgs struct {
	// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
	AuthMethod pulumi.StringPtrInput `pulumi:"authMethod"`
	// A comma-separated list of IP addresses or hostnames of Kafka brokers
	Brokers pulumi.StringInput `pulumi:"brokers"`
	// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
	ParseLogKeyvals pulumi.BoolPtrInput `pulumi:"parseLogKeyvals"`
	// SASL Pass
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
	RequestMaxBytes pulumi.IntPtrInput `pulumi:"requestMaxBytes"`
	// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
	RequiredAcks pulumi.StringPtrInput `pulumi:"requiredAcks"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Kafka topic to send logs to
	Topic pulumi.StringInput `pulumi:"topic"`
	// Whether to use TLS for secure logging. Can be either `true` or `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
	// SASL User
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ServiceVclLoggingKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingKafka)(nil)).Elem()
}

func (i ServiceVclLoggingKafkaArgs) ToServiceVclLoggingKafkaOutput() ServiceVclLoggingKafkaOutput {
	return i.ToServiceVclLoggingKafkaOutputWithContext(context.Background())
}

func (i ServiceVclLoggingKafkaArgs) ToServiceVclLoggingKafkaOutputWithContext(ctx context.Context) ServiceVclLoggingKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingKafkaOutput)
}

// ServiceVclLoggingKafkaArrayInput is an input type that accepts ServiceVclLoggingKafkaArray and ServiceVclLoggingKafkaArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingKafkaArrayInput` via:
//
//	ServiceVclLoggingKafkaArray{ ServiceVclLoggingKafkaArgs{...} }
type ServiceVclLoggingKafkaArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingKafkaArrayOutput() ServiceVclLoggingKafkaArrayOutput
	ToServiceVclLoggingKafkaArrayOutputWithContext(context.Context) ServiceVclLoggingKafkaArrayOutput
}

type ServiceVclLoggingKafkaArray []ServiceVclLoggingKafkaInput

func (ServiceVclLoggingKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingKafka)(nil)).Elem()
}

func (i ServiceVclLoggingKafkaArray) ToServiceVclLoggingKafkaArrayOutput() ServiceVclLoggingKafkaArrayOutput {
	return i.ToServiceVclLoggingKafkaArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingKafkaArray) ToServiceVclLoggingKafkaArrayOutputWithContext(ctx context.Context) ServiceVclLoggingKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingKafkaArrayOutput)
}

type ServiceVclLoggingKafkaOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingKafka)(nil)).Elem()
}

func (o ServiceVclLoggingKafkaOutput) ToServiceVclLoggingKafkaOutput() ServiceVclLoggingKafkaOutput {
	return o
}

func (o ServiceVclLoggingKafkaOutput) ToServiceVclLoggingKafkaOutputWithContext(ctx context.Context) ServiceVclLoggingKafkaOutput {
	return o
}

// SASL authentication method. One of: plain, scram-sha-256, scram-sha-512
func (o ServiceVclLoggingKafkaOutput) AuthMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.AuthMethod }).(pulumi.StringPtrOutput)
}

// A comma-separated list of IP addresses or hostnames of Kafka brokers
func (o ServiceVclLoggingKafkaOutput) Brokers() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) string { return v.Brokers }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. One of: `gzip`, `snappy`, `lz4`
func (o ServiceVclLoggingKafkaOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Apache style log formatting.
func (o ServiceVclLoggingKafkaOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o ServiceVclLoggingKafkaOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Kafka logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingKafkaOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) string { return v.Name }).(pulumi.StringOutput)
}

// Enables parsing of key=value tuples from the beginning of a logline, turning them into record headers
func (o ServiceVclLoggingKafkaOutput) ParseLogKeyvals() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *bool { return v.ParseLogKeyvals }).(pulumi.BoolPtrOutput)
}

// SASL Pass
func (o ServiceVclLoggingKafkaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingKafkaOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// Maximum size of log batch, if non-zero. Defaults to 0 for unbounded
func (o ServiceVclLoggingKafkaOutput) RequestMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *int { return v.RequestMaxBytes }).(pulumi.IntPtrOutput)
}

// The Number of acknowledgements a leader must receive before a write is considered successful. One of: `1` (default) One server needs to respond. `0` No servers need to respond. `-1` Wait for all in-sync replicas to respond
func (o ServiceVclLoggingKafkaOutput) RequiredAcks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.RequiredAcks }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingKafkaOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format
func (o ServiceVclLoggingKafkaOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format
func (o ServiceVclLoggingKafkaOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format
func (o ServiceVclLoggingKafkaOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
func (o ServiceVclLoggingKafkaOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Kafka topic to send logs to
func (o ServiceVclLoggingKafkaOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) string { return v.Topic }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging. Can be either `true` or `false`
func (o ServiceVclLoggingKafkaOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

// SASL User
func (o ServiceVclLoggingKafkaOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKafka) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ServiceVclLoggingKafkaArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingKafka)(nil)).Elem()
}

func (o ServiceVclLoggingKafkaArrayOutput) ToServiceVclLoggingKafkaArrayOutput() ServiceVclLoggingKafkaArrayOutput {
	return o
}

func (o ServiceVclLoggingKafkaArrayOutput) ToServiceVclLoggingKafkaArrayOutputWithContext(ctx context.Context) ServiceVclLoggingKafkaArrayOutput {
	return o
}

func (o ServiceVclLoggingKafkaArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingKafka {
		return vs[0].([]ServiceVclLoggingKafka)[vs[1].(int)]
	}).(ServiceVclLoggingKafkaOutput)
}

type ServiceVclLoggingKinese struct {
	// The AWS access key to be used to write to the stream
	AccessKey *string `pulumi:"accessKey"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `accessKey` and `secretKey` are provided.
	IamRole *string `pulumi:"iamRole"`
	// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The AWS region the stream resides in. (Default: `us-east-1`)
	Region *string `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The AWS secret access key to authenticate with
	SecretKey *string `pulumi:"secretKey"`
	// The Kinesis stream name
	Topic string `pulumi:"topic"`
}

// ServiceVclLoggingKineseInput is an input type that accepts ServiceVclLoggingKineseArgs and ServiceVclLoggingKineseOutput values.
// You can construct a concrete instance of `ServiceVclLoggingKineseInput` via:
//
//	ServiceVclLoggingKineseArgs{...}
type ServiceVclLoggingKineseInput interface {
	pulumi.Input

	ToServiceVclLoggingKineseOutput() ServiceVclLoggingKineseOutput
	ToServiceVclLoggingKineseOutputWithContext(context.Context) ServiceVclLoggingKineseOutput
}

type ServiceVclLoggingKineseArgs struct {
	// The AWS access key to be used to write to the stream
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `accessKey` and `secretKey` are provided.
	IamRole pulumi.StringPtrInput `pulumi:"iamRole"`
	// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The AWS region the stream resides in. (Default: `us-east-1`)
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The AWS secret access key to authenticate with
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// The Kinesis stream name
	Topic pulumi.StringInput `pulumi:"topic"`
}

func (ServiceVclLoggingKineseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingKinese)(nil)).Elem()
}

func (i ServiceVclLoggingKineseArgs) ToServiceVclLoggingKineseOutput() ServiceVclLoggingKineseOutput {
	return i.ToServiceVclLoggingKineseOutputWithContext(context.Background())
}

func (i ServiceVclLoggingKineseArgs) ToServiceVclLoggingKineseOutputWithContext(ctx context.Context) ServiceVclLoggingKineseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingKineseOutput)
}

// ServiceVclLoggingKineseArrayInput is an input type that accepts ServiceVclLoggingKineseArray and ServiceVclLoggingKineseArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingKineseArrayInput` via:
//
//	ServiceVclLoggingKineseArray{ ServiceVclLoggingKineseArgs{...} }
type ServiceVclLoggingKineseArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingKineseArrayOutput() ServiceVclLoggingKineseArrayOutput
	ToServiceVclLoggingKineseArrayOutputWithContext(context.Context) ServiceVclLoggingKineseArrayOutput
}

type ServiceVclLoggingKineseArray []ServiceVclLoggingKineseInput

func (ServiceVclLoggingKineseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingKinese)(nil)).Elem()
}

func (i ServiceVclLoggingKineseArray) ToServiceVclLoggingKineseArrayOutput() ServiceVclLoggingKineseArrayOutput {
	return i.ToServiceVclLoggingKineseArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingKineseArray) ToServiceVclLoggingKineseArrayOutputWithContext(ctx context.Context) ServiceVclLoggingKineseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingKineseArrayOutput)
}

type ServiceVclLoggingKineseOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingKineseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingKinese)(nil)).Elem()
}

func (o ServiceVclLoggingKineseOutput) ToServiceVclLoggingKineseOutput() ServiceVclLoggingKineseOutput {
	return o
}

func (o ServiceVclLoggingKineseOutput) ToServiceVclLoggingKineseOutputWithContext(ctx context.Context) ServiceVclLoggingKineseOutput {
	return o
}

// The AWS access key to be used to write to the stream
func (o ServiceVclLoggingKineseOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// Apache style log formatting.
func (o ServiceVclLoggingKineseOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingKineseOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to Kinesis. Not required if `accessKey` and `secretKey` are provided.
func (o ServiceVclLoggingKineseOutput) IamRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) *string { return v.IamRole }).(pulumi.StringPtrOutput)
}

// The unique name of the Kinesis logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingKineseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o ServiceVclLoggingKineseOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The AWS region the stream resides in. (Default: `us-east-1`)
func (o ServiceVclLoggingKineseOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingKineseOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The AWS secret access key to authenticate with
func (o ServiceVclLoggingKineseOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The Kinesis stream name
func (o ServiceVclLoggingKineseOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingKinese) string { return v.Topic }).(pulumi.StringOutput)
}

type ServiceVclLoggingKineseArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingKineseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingKinese)(nil)).Elem()
}

func (o ServiceVclLoggingKineseArrayOutput) ToServiceVclLoggingKineseArrayOutput() ServiceVclLoggingKineseArrayOutput {
	return o
}

func (o ServiceVclLoggingKineseArrayOutput) ToServiceVclLoggingKineseArrayOutputWithContext(ctx context.Context) ServiceVclLoggingKineseArrayOutput {
	return o
}

func (o ServiceVclLoggingKineseArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingKineseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingKinese {
		return vs[0].([]ServiceVclLoggingKinese)[vs[1].(int)]
	}).(ServiceVclLoggingKineseOutput)
}

type ServiceVclLoggingLogentry struct {
	// Apache-style string or VCL variables to use for log formatting
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The port number configured in Logentries
	Port *int `pulumi:"port"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// Use token based authentication (https://logentries.com/doc/input-token/)
	Token string `pulumi:"token"`
	// Whether to use TLS for secure logging
	UseTls *bool `pulumi:"useTls"`
}

// ServiceVclLoggingLogentryInput is an input type that accepts ServiceVclLoggingLogentryArgs and ServiceVclLoggingLogentryOutput values.
// You can construct a concrete instance of `ServiceVclLoggingLogentryInput` via:
//
//	ServiceVclLoggingLogentryArgs{...}
type ServiceVclLoggingLogentryInput interface {
	pulumi.Input

	ToServiceVclLoggingLogentryOutput() ServiceVclLoggingLogentryOutput
	ToServiceVclLoggingLogentryOutputWithContext(context.Context) ServiceVclLoggingLogentryOutput
}

type ServiceVclLoggingLogentryArgs struct {
	// Apache-style string or VCL variables to use for log formatting
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port number configured in Logentries
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// Use token based authentication (https://logentries.com/doc/input-token/)
	Token pulumi.StringInput `pulumi:"token"`
	// Whether to use TLS for secure logging
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (ServiceVclLoggingLogentryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingLogentry)(nil)).Elem()
}

func (i ServiceVclLoggingLogentryArgs) ToServiceVclLoggingLogentryOutput() ServiceVclLoggingLogentryOutput {
	return i.ToServiceVclLoggingLogentryOutputWithContext(context.Background())
}

func (i ServiceVclLoggingLogentryArgs) ToServiceVclLoggingLogentryOutputWithContext(ctx context.Context) ServiceVclLoggingLogentryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingLogentryOutput)
}

// ServiceVclLoggingLogentryArrayInput is an input type that accepts ServiceVclLoggingLogentryArray and ServiceVclLoggingLogentryArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingLogentryArrayInput` via:
//
//	ServiceVclLoggingLogentryArray{ ServiceVclLoggingLogentryArgs{...} }
type ServiceVclLoggingLogentryArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingLogentryArrayOutput() ServiceVclLoggingLogentryArrayOutput
	ToServiceVclLoggingLogentryArrayOutputWithContext(context.Context) ServiceVclLoggingLogentryArrayOutput
}

type ServiceVclLoggingLogentryArray []ServiceVclLoggingLogentryInput

func (ServiceVclLoggingLogentryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingLogentry)(nil)).Elem()
}

func (i ServiceVclLoggingLogentryArray) ToServiceVclLoggingLogentryArrayOutput() ServiceVclLoggingLogentryArrayOutput {
	return i.ToServiceVclLoggingLogentryArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingLogentryArray) ToServiceVclLoggingLogentryArrayOutputWithContext(ctx context.Context) ServiceVclLoggingLogentryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingLogentryArrayOutput)
}

type ServiceVclLoggingLogentryOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingLogentryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingLogentry)(nil)).Elem()
}

func (o ServiceVclLoggingLogentryOutput) ToServiceVclLoggingLogentryOutput() ServiceVclLoggingLogentryOutput {
	return o
}

func (o ServiceVclLoggingLogentryOutput) ToServiceVclLoggingLogentryOutputWithContext(ctx context.Context) ServiceVclLoggingLogentryOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting
func (o ServiceVclLoggingLogentryOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogentry) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
func (o ServiceVclLoggingLogentryOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogentry) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Logentries logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingLogentryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogentry) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingLogentryOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogentry) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port number configured in Logentries
func (o ServiceVclLoggingLogentryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogentry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of blockAttributes condition to apply this logging.
func (o ServiceVclLoggingLogentryOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogentry) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// Use token based authentication (https://logentries.com/doc/input-token/)
func (o ServiceVclLoggingLogentryOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogentry) string { return v.Token }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging
func (o ServiceVclLoggingLogentryOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogentry) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type ServiceVclLoggingLogentryArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingLogentryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingLogentry)(nil)).Elem()
}

func (o ServiceVclLoggingLogentryArrayOutput) ToServiceVclLoggingLogentryArrayOutput() ServiceVclLoggingLogentryArrayOutput {
	return o
}

func (o ServiceVclLoggingLogentryArrayOutput) ToServiceVclLoggingLogentryArrayOutputWithContext(ctx context.Context) ServiceVclLoggingLogentryArrayOutput {
	return o
}

func (o ServiceVclLoggingLogentryArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingLogentryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingLogentry {
		return vs[0].([]ServiceVclLoggingLogentry)[vs[1].(int)]
	}).(ServiceVclLoggingLogentryOutput)
}

type ServiceVclLoggingLoggly struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
	Token string `pulumi:"token"`
}

// ServiceVclLoggingLogglyInput is an input type that accepts ServiceVclLoggingLogglyArgs and ServiceVclLoggingLogglyOutput values.
// You can construct a concrete instance of `ServiceVclLoggingLogglyInput` via:
//
//	ServiceVclLoggingLogglyArgs{...}
type ServiceVclLoggingLogglyInput interface {
	pulumi.Input

	ToServiceVclLoggingLogglyOutput() ServiceVclLoggingLogglyOutput
	ToServiceVclLoggingLogglyOutputWithContext(context.Context) ServiceVclLoggingLogglyOutput
}

type ServiceVclLoggingLogglyArgs struct {
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceVclLoggingLogglyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingLoggly)(nil)).Elem()
}

func (i ServiceVclLoggingLogglyArgs) ToServiceVclLoggingLogglyOutput() ServiceVclLoggingLogglyOutput {
	return i.ToServiceVclLoggingLogglyOutputWithContext(context.Background())
}

func (i ServiceVclLoggingLogglyArgs) ToServiceVclLoggingLogglyOutputWithContext(ctx context.Context) ServiceVclLoggingLogglyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingLogglyOutput)
}

// ServiceVclLoggingLogglyArrayInput is an input type that accepts ServiceVclLoggingLogglyArray and ServiceVclLoggingLogglyArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingLogglyArrayInput` via:
//
//	ServiceVclLoggingLogglyArray{ ServiceVclLoggingLogglyArgs{...} }
type ServiceVclLoggingLogglyArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingLogglyArrayOutput() ServiceVclLoggingLogglyArrayOutput
	ToServiceVclLoggingLogglyArrayOutputWithContext(context.Context) ServiceVclLoggingLogglyArrayOutput
}

type ServiceVclLoggingLogglyArray []ServiceVclLoggingLogglyInput

func (ServiceVclLoggingLogglyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingLoggly)(nil)).Elem()
}

func (i ServiceVclLoggingLogglyArray) ToServiceVclLoggingLogglyArrayOutput() ServiceVclLoggingLogglyArrayOutput {
	return i.ToServiceVclLoggingLogglyArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingLogglyArray) ToServiceVclLoggingLogglyArrayOutputWithContext(ctx context.Context) ServiceVclLoggingLogglyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingLogglyArrayOutput)
}

type ServiceVclLoggingLogglyOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingLogglyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingLoggly)(nil)).Elem()
}

func (o ServiceVclLoggingLogglyOutput) ToServiceVclLoggingLogglyOutput() ServiceVclLoggingLogglyOutput {
	return o
}

func (o ServiceVclLoggingLogglyOutput) ToServiceVclLoggingLogglyOutputWithContext(ctx context.Context) ServiceVclLoggingLogglyOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting.
func (o ServiceVclLoggingLogglyOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLoggly) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingLogglyOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLoggly) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Loggly logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingLogglyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingLoggly) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o ServiceVclLoggingLogglyOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLoggly) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingLogglyOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLoggly) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.loggly.com/docs/customer-token-authentication-token/).
func (o ServiceVclLoggingLogglyOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingLoggly) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceVclLoggingLogglyArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingLogglyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingLoggly)(nil)).Elem()
}

func (o ServiceVclLoggingLogglyArrayOutput) ToServiceVclLoggingLogglyArrayOutput() ServiceVclLoggingLogglyArrayOutput {
	return o
}

func (o ServiceVclLoggingLogglyArrayOutput) ToServiceVclLoggingLogglyArrayOutputWithContext(ctx context.Context) ServiceVclLoggingLogglyArrayOutput {
	return o
}

func (o ServiceVclLoggingLogglyArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingLogglyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingLoggly {
		return vs[0].([]ServiceVclLoggingLoggly)[vs[1].(int)]
	}).(ServiceVclLoggingLogglyOutput)
}

type ServiceVclLoggingLogshuttle struct {
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The data authentication token associated with this endpoint
	Token string `pulumi:"token"`
	// Your Log Shuttle endpoint URL
	Url string `pulumi:"url"`
}

// ServiceVclLoggingLogshuttleInput is an input type that accepts ServiceVclLoggingLogshuttleArgs and ServiceVclLoggingLogshuttleOutput values.
// You can construct a concrete instance of `ServiceVclLoggingLogshuttleInput` via:
//
//	ServiceVclLoggingLogshuttleArgs{...}
type ServiceVclLoggingLogshuttleInput interface {
	pulumi.Input

	ToServiceVclLoggingLogshuttleOutput() ServiceVclLoggingLogshuttleOutput
	ToServiceVclLoggingLogshuttleOutputWithContext(context.Context) ServiceVclLoggingLogshuttleOutput
}

type ServiceVclLoggingLogshuttleArgs struct {
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The data authentication token associated with this endpoint
	Token pulumi.StringInput `pulumi:"token"`
	// Your Log Shuttle endpoint URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceVclLoggingLogshuttleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingLogshuttle)(nil)).Elem()
}

func (i ServiceVclLoggingLogshuttleArgs) ToServiceVclLoggingLogshuttleOutput() ServiceVclLoggingLogshuttleOutput {
	return i.ToServiceVclLoggingLogshuttleOutputWithContext(context.Background())
}

func (i ServiceVclLoggingLogshuttleArgs) ToServiceVclLoggingLogshuttleOutputWithContext(ctx context.Context) ServiceVclLoggingLogshuttleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingLogshuttleOutput)
}

// ServiceVclLoggingLogshuttleArrayInput is an input type that accepts ServiceVclLoggingLogshuttleArray and ServiceVclLoggingLogshuttleArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingLogshuttleArrayInput` via:
//
//	ServiceVclLoggingLogshuttleArray{ ServiceVclLoggingLogshuttleArgs{...} }
type ServiceVclLoggingLogshuttleArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingLogshuttleArrayOutput() ServiceVclLoggingLogshuttleArrayOutput
	ToServiceVclLoggingLogshuttleArrayOutputWithContext(context.Context) ServiceVclLoggingLogshuttleArrayOutput
}

type ServiceVclLoggingLogshuttleArray []ServiceVclLoggingLogshuttleInput

func (ServiceVclLoggingLogshuttleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingLogshuttle)(nil)).Elem()
}

func (i ServiceVclLoggingLogshuttleArray) ToServiceVclLoggingLogshuttleArrayOutput() ServiceVclLoggingLogshuttleArrayOutput {
	return i.ToServiceVclLoggingLogshuttleArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingLogshuttleArray) ToServiceVclLoggingLogshuttleArrayOutputWithContext(ctx context.Context) ServiceVclLoggingLogshuttleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingLogshuttleArrayOutput)
}

type ServiceVclLoggingLogshuttleOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingLogshuttleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingLogshuttle)(nil)).Elem()
}

func (o ServiceVclLoggingLogshuttleOutput) ToServiceVclLoggingLogshuttleOutput() ServiceVclLoggingLogshuttleOutput {
	return o
}

func (o ServiceVclLoggingLogshuttleOutput) ToServiceVclLoggingLogshuttleOutputWithContext(ctx context.Context) ServiceVclLoggingLogshuttleOutput {
	return o
}

// Apache style log formatting.
func (o ServiceVclLoggingLogshuttleOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogshuttle) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingLogshuttleOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogshuttle) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Log Shuttle logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingLogshuttleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogshuttle) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o ServiceVclLoggingLogshuttleOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogshuttle) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingLogshuttleOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogshuttle) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The data authentication token associated with this endpoint
func (o ServiceVclLoggingLogshuttleOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogshuttle) string { return v.Token }).(pulumi.StringOutput)
}

// Your Log Shuttle endpoint URL
func (o ServiceVclLoggingLogshuttleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingLogshuttle) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceVclLoggingLogshuttleArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingLogshuttleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingLogshuttle)(nil)).Elem()
}

func (o ServiceVclLoggingLogshuttleArrayOutput) ToServiceVclLoggingLogshuttleArrayOutput() ServiceVclLoggingLogshuttleArrayOutput {
	return o
}

func (o ServiceVclLoggingLogshuttleArrayOutput) ToServiceVclLoggingLogshuttleArrayOutputWithContext(ctx context.Context) ServiceVclLoggingLogshuttleArrayOutput {
	return o
}

func (o ServiceVclLoggingLogshuttleArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingLogshuttleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingLogshuttle {
		return vs[0].([]ServiceVclLoggingLogshuttle)[vs[1].(int)]
	}).(ServiceVclLoggingLogshuttleOutput)
}

type ServiceVclLoggingNewrelic struct {
	// Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The region that log data will be sent to. Default: `US`
	Region *string `pulumi:"region"`
	// The name of the condition to apply.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The Insert API key from the Account page of your New Relic account
	Token string `pulumi:"token"`
}

// ServiceVclLoggingNewrelicInput is an input type that accepts ServiceVclLoggingNewrelicArgs and ServiceVclLoggingNewrelicOutput values.
// You can construct a concrete instance of `ServiceVclLoggingNewrelicInput` via:
//
//	ServiceVclLoggingNewrelicArgs{...}
type ServiceVclLoggingNewrelicInput interface {
	pulumi.Input

	ToServiceVclLoggingNewrelicOutput() ServiceVclLoggingNewrelicOutput
	ToServiceVclLoggingNewrelicOutputWithContext(context.Context) ServiceVclLoggingNewrelicOutput
}

type ServiceVclLoggingNewrelicArgs struct {
	// Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The region that log data will be sent to. Default: `US`
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the condition to apply.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The Insert API key from the Account page of your New Relic account
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceVclLoggingNewrelicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingNewrelic)(nil)).Elem()
}

func (i ServiceVclLoggingNewrelicArgs) ToServiceVclLoggingNewrelicOutput() ServiceVclLoggingNewrelicOutput {
	return i.ToServiceVclLoggingNewrelicOutputWithContext(context.Background())
}

func (i ServiceVclLoggingNewrelicArgs) ToServiceVclLoggingNewrelicOutputWithContext(ctx context.Context) ServiceVclLoggingNewrelicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingNewrelicOutput)
}

// ServiceVclLoggingNewrelicArrayInput is an input type that accepts ServiceVclLoggingNewrelicArray and ServiceVclLoggingNewrelicArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingNewrelicArrayInput` via:
//
//	ServiceVclLoggingNewrelicArray{ ServiceVclLoggingNewrelicArgs{...} }
type ServiceVclLoggingNewrelicArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingNewrelicArrayOutput() ServiceVclLoggingNewrelicArrayOutput
	ToServiceVclLoggingNewrelicArrayOutputWithContext(context.Context) ServiceVclLoggingNewrelicArrayOutput
}

type ServiceVclLoggingNewrelicArray []ServiceVclLoggingNewrelicInput

func (ServiceVclLoggingNewrelicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingNewrelic)(nil)).Elem()
}

func (i ServiceVclLoggingNewrelicArray) ToServiceVclLoggingNewrelicArrayOutput() ServiceVclLoggingNewrelicArrayOutput {
	return i.ToServiceVclLoggingNewrelicArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingNewrelicArray) ToServiceVclLoggingNewrelicArrayOutputWithContext(ctx context.Context) ServiceVclLoggingNewrelicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingNewrelicArrayOutput)
}

type ServiceVclLoggingNewrelicOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingNewrelicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingNewrelic)(nil)).Elem()
}

func (o ServiceVclLoggingNewrelicOutput) ToServiceVclLoggingNewrelicOutput() ServiceVclLoggingNewrelicOutput {
	return o
}

func (o ServiceVclLoggingNewrelicOutput) ToServiceVclLoggingNewrelicOutputWithContext(ctx context.Context) ServiceVclLoggingNewrelicOutput {
	return o
}

// Apache style log formatting. Your log must produce valid JSON that New Relic Logs can ingest.
func (o ServiceVclLoggingNewrelicOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingNewrelic) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingNewrelicOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingNewrelic) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the New Relic logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingNewrelicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingNewrelic) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingNewrelicOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingNewrelic) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The region that log data will be sent to. Default: `US`
func (o ServiceVclLoggingNewrelicOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingNewrelic) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply.
func (o ServiceVclLoggingNewrelicOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingNewrelic) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The Insert API key from the Account page of your New Relic account
func (o ServiceVclLoggingNewrelicOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingNewrelic) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceVclLoggingNewrelicArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingNewrelicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingNewrelic)(nil)).Elem()
}

func (o ServiceVclLoggingNewrelicArrayOutput) ToServiceVclLoggingNewrelicArrayOutput() ServiceVclLoggingNewrelicArrayOutput {
	return o
}

func (o ServiceVclLoggingNewrelicArrayOutput) ToServiceVclLoggingNewrelicArrayOutputWithContext(ctx context.Context) ServiceVclLoggingNewrelicArrayOutput {
	return o
}

func (o ServiceVclLoggingNewrelicArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingNewrelicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingNewrelic {
		return vs[0].([]ServiceVclLoggingNewrelic)[vs[1].(int)]
	}).(ServiceVclLoggingNewrelicOutput)
}

type ServiceVclLoggingOpenstack struct {
	// Your OpenStack account access key
	AccessKey string `pulumi:"accessKey"`
	// The name of your OpenStack container
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// Your OpenStack auth url
	Url string `pulumi:"url"`
	// The username for your OpenStack account
	User string `pulumi:"user"`
}

// ServiceVclLoggingOpenstackInput is an input type that accepts ServiceVclLoggingOpenstackArgs and ServiceVclLoggingOpenstackOutput values.
// You can construct a concrete instance of `ServiceVclLoggingOpenstackInput` via:
//
//	ServiceVclLoggingOpenstackArgs{...}
type ServiceVclLoggingOpenstackInput interface {
	pulumi.Input

	ToServiceVclLoggingOpenstackOutput() ServiceVclLoggingOpenstackOutput
	ToServiceVclLoggingOpenstackOutputWithContext(context.Context) ServiceVclLoggingOpenstackOutput
}

type ServiceVclLoggingOpenstackArgs struct {
	// Your OpenStack account access key
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The name of your OpenStack container
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// Your OpenStack auth url
	Url pulumi.StringInput `pulumi:"url"`
	// The username for your OpenStack account
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceVclLoggingOpenstackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingOpenstack)(nil)).Elem()
}

func (i ServiceVclLoggingOpenstackArgs) ToServiceVclLoggingOpenstackOutput() ServiceVclLoggingOpenstackOutput {
	return i.ToServiceVclLoggingOpenstackOutputWithContext(context.Background())
}

func (i ServiceVclLoggingOpenstackArgs) ToServiceVclLoggingOpenstackOutputWithContext(ctx context.Context) ServiceVclLoggingOpenstackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingOpenstackOutput)
}

// ServiceVclLoggingOpenstackArrayInput is an input type that accepts ServiceVclLoggingOpenstackArray and ServiceVclLoggingOpenstackArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingOpenstackArrayInput` via:
//
//	ServiceVclLoggingOpenstackArray{ ServiceVclLoggingOpenstackArgs{...} }
type ServiceVclLoggingOpenstackArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingOpenstackArrayOutput() ServiceVclLoggingOpenstackArrayOutput
	ToServiceVclLoggingOpenstackArrayOutputWithContext(context.Context) ServiceVclLoggingOpenstackArrayOutput
}

type ServiceVclLoggingOpenstackArray []ServiceVclLoggingOpenstackInput

func (ServiceVclLoggingOpenstackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingOpenstack)(nil)).Elem()
}

func (i ServiceVclLoggingOpenstackArray) ToServiceVclLoggingOpenstackArrayOutput() ServiceVclLoggingOpenstackArrayOutput {
	return i.ToServiceVclLoggingOpenstackArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingOpenstackArray) ToServiceVclLoggingOpenstackArrayOutputWithContext(ctx context.Context) ServiceVclLoggingOpenstackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingOpenstackArrayOutput)
}

type ServiceVclLoggingOpenstackOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingOpenstackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingOpenstack)(nil)).Elem()
}

func (o ServiceVclLoggingOpenstackOutput) ToServiceVclLoggingOpenstackOutput() ServiceVclLoggingOpenstackOutput {
	return o
}

func (o ServiceVclLoggingOpenstackOutput) ToServiceVclLoggingOpenstackOutputWithContext(ctx context.Context) ServiceVclLoggingOpenstackOutput {
	return o
}

// Your OpenStack account access key
func (o ServiceVclLoggingOpenstackOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The name of your OpenStack container
func (o ServiceVclLoggingOpenstackOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceVclLoggingOpenstackOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Apache style log formatting.
func (o ServiceVclLoggingOpenstackOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. (default: `2`).
func (o ServiceVclLoggingOpenstackOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceVclLoggingOpenstackOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingOpenstackOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the OpenStack logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingOpenstackOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceVclLoggingOpenstackOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds. Default `3600`
func (o ServiceVclLoggingOpenstackOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed. Can be `none` or `wafDebug`.
func (o ServiceVclLoggingOpenstackOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceVclLoggingOpenstackOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingOpenstackOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceVclLoggingOpenstackOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// Your OpenStack auth url
func (o ServiceVclLoggingOpenstackOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) string { return v.Url }).(pulumi.StringOutput)
}

// The username for your OpenStack account
func (o ServiceVclLoggingOpenstackOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingOpenstack) string { return v.User }).(pulumi.StringOutput)
}

type ServiceVclLoggingOpenstackArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingOpenstackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingOpenstack)(nil)).Elem()
}

func (o ServiceVclLoggingOpenstackArrayOutput) ToServiceVclLoggingOpenstackArrayOutput() ServiceVclLoggingOpenstackArrayOutput {
	return o
}

func (o ServiceVclLoggingOpenstackArrayOutput) ToServiceVclLoggingOpenstackArrayOutputWithContext(ctx context.Context) ServiceVclLoggingOpenstackArrayOutput {
	return o
}

func (o ServiceVclLoggingOpenstackArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingOpenstackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingOpenstack {
		return vs[0].([]ServiceVclLoggingOpenstack)[vs[1].(int)]
	}).(ServiceVclLoggingOpenstackOutput)
}

type ServiceVclLoggingPapertrail struct {
	// The address of the Papertrail endpoint
	Address string `pulumi:"address"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `formatVersion` of 2 are placed in `vclLog` and those with `formatVersion` of 1 are placed in `vclDeliver`
	Placement *string `pulumi:"placement"`
	// The port associated with the address where the Papertrail endpoint can be accessed
	Port int `pulumi:"port"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute
	ResponseCondition *string `pulumi:"responseCondition"`
}

// ServiceVclLoggingPapertrailInput is an input type that accepts ServiceVclLoggingPapertrailArgs and ServiceVclLoggingPapertrailOutput values.
// You can construct a concrete instance of `ServiceVclLoggingPapertrailInput` via:
//
//	ServiceVclLoggingPapertrailArgs{...}
type ServiceVclLoggingPapertrailInput interface {
	pulumi.Input

	ToServiceVclLoggingPapertrailOutput() ServiceVclLoggingPapertrailOutput
	ToServiceVclLoggingPapertrailOutputWithContext(context.Context) ServiceVclLoggingPapertrailOutput
}

type ServiceVclLoggingPapertrailArgs struct {
	// The address of the Papertrail endpoint
	Address pulumi.StringInput `pulumi:"address"`
	// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed. If not set, endpoints with `formatVersion` of 2 are placed in `vclLog` and those with `formatVersion` of 1 are placed in `vclDeliver`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port associated with the address where the Papertrail endpoint can be accessed
	Port pulumi.IntInput `pulumi:"port"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
}

func (ServiceVclLoggingPapertrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingPapertrail)(nil)).Elem()
}

func (i ServiceVclLoggingPapertrailArgs) ToServiceVclLoggingPapertrailOutput() ServiceVclLoggingPapertrailOutput {
	return i.ToServiceVclLoggingPapertrailOutputWithContext(context.Background())
}

func (i ServiceVclLoggingPapertrailArgs) ToServiceVclLoggingPapertrailOutputWithContext(ctx context.Context) ServiceVclLoggingPapertrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingPapertrailOutput)
}

// ServiceVclLoggingPapertrailArrayInput is an input type that accepts ServiceVclLoggingPapertrailArray and ServiceVclLoggingPapertrailArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingPapertrailArrayInput` via:
//
//	ServiceVclLoggingPapertrailArray{ ServiceVclLoggingPapertrailArgs{...} }
type ServiceVclLoggingPapertrailArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingPapertrailArrayOutput() ServiceVclLoggingPapertrailArrayOutput
	ToServiceVclLoggingPapertrailArrayOutputWithContext(context.Context) ServiceVclLoggingPapertrailArrayOutput
}

type ServiceVclLoggingPapertrailArray []ServiceVclLoggingPapertrailInput

func (ServiceVclLoggingPapertrailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingPapertrail)(nil)).Elem()
}

func (i ServiceVclLoggingPapertrailArray) ToServiceVclLoggingPapertrailArrayOutput() ServiceVclLoggingPapertrailArrayOutput {
	return i.ToServiceVclLoggingPapertrailArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingPapertrailArray) ToServiceVclLoggingPapertrailArrayOutputWithContext(ctx context.Context) ServiceVclLoggingPapertrailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingPapertrailArrayOutput)
}

type ServiceVclLoggingPapertrailOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingPapertrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingPapertrail)(nil)).Elem()
}

func (o ServiceVclLoggingPapertrailOutput) ToServiceVclLoggingPapertrailOutput() ServiceVclLoggingPapertrailOutput {
	return o
}

func (o ServiceVclLoggingPapertrailOutput) ToServiceVclLoggingPapertrailOutputWithContext(ctx context.Context) ServiceVclLoggingPapertrailOutput {
	return o
}

// The address of the Papertrail endpoint
func (o ServiceVclLoggingPapertrailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingPapertrail) string { return v.Address }).(pulumi.StringOutput)
}

// A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats)
func (o ServiceVclLoggingPapertrailOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingPapertrail) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. The logging call gets placed by default in `vclLog` if `formatVersion` is set to `2` and in `vclDeliver` if `formatVersion` is set to `1`
func (o ServiceVclLoggingPapertrailOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingPapertrail) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify this Papertrail endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingPapertrailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingPapertrail) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed. If not set, endpoints with `formatVersion` of 2 are placed in `vclLog` and those with `formatVersion` of 1 are placed in `vclDeliver`
func (o ServiceVclLoggingPapertrailOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingPapertrail) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port associated with the address where the Papertrail endpoint can be accessed
func (o ServiceVclLoggingPapertrailOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceVclLoggingPapertrail) int { return v.Port }).(pulumi.IntOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute
func (o ServiceVclLoggingPapertrailOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingPapertrail) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

type ServiceVclLoggingPapertrailArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingPapertrailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingPapertrail)(nil)).Elem()
}

func (o ServiceVclLoggingPapertrailArrayOutput) ToServiceVclLoggingPapertrailArrayOutput() ServiceVclLoggingPapertrailArrayOutput {
	return o
}

func (o ServiceVclLoggingPapertrailArrayOutput) ToServiceVclLoggingPapertrailArrayOutputWithContext(ctx context.Context) ServiceVclLoggingPapertrailArrayOutput {
	return o
}

func (o ServiceVclLoggingPapertrailArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingPapertrailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingPapertrail {
		return vs[0].([]ServiceVclLoggingPapertrail)[vs[1].(int)]
	}).(ServiceVclLoggingPapertrailOutput)
}

type ServiceVclLoggingS3 struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acl *string `pulumi:"acl"`
	// The name of the bucket in which to store the logs
	BucketName string `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
	Domain *string `pulumi:"domain"`
	// Maximum size of an uploaded log file, if non-zero.
	FileMaxBytes *int `pulumi:"fileMaxBytes"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path *string `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The S3 storage class (redundancy level). Should be one of: `standard`, `intelligentTiering`, `standardIa`, `onezoneIa`, `glacier`, `glacierIr`, `deepArchive`, or `reducedRedundancy`
	Redundancy *string `pulumi:"redundancy"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
	S3AccessKey *string `pulumi:"s3AccessKey"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `accessKey` and `secretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
	S3IamRole *string `pulumi:"s3IamRole"`
	// AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
	S3SecretKey *string `pulumi:"s3SecretKey"`
	// Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
	ServerSideEncryption *string `pulumi:"serverSideEncryption"`
	// Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`
	ServerSideEncryptionKmsKeyId *string `pulumi:"serverSideEncryptionKmsKeyId"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
}

// ServiceVclLoggingS3Input is an input type that accepts ServiceVclLoggingS3Args and ServiceVclLoggingS3Output values.
// You can construct a concrete instance of `ServiceVclLoggingS3Input` via:
//
//	ServiceVclLoggingS3Args{...}
type ServiceVclLoggingS3Input interface {
	pulumi.Input

	ToServiceVclLoggingS3Output() ServiceVclLoggingS3Output
	ToServiceVclLoggingS3OutputWithContext(context.Context) ServiceVclLoggingS3Output
}

type ServiceVclLoggingS3Args struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acl pulumi.StringPtrInput `pulumi:"acl"`
	// The name of the bucket in which to store the logs
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// Maximum size of an uploaded log file, if non-zero.
	FileMaxBytes pulumi.IntPtrInput `pulumi:"fileMaxBytes"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
	Path pulumi.StringPtrInput `pulumi:"path"`
	// How frequently the logs should be transferred, in seconds. Default `3600`
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The S3 storage class (redundancy level). Should be one of: `standard`, `intelligentTiering`, `standardIa`, `onezoneIa`, `glacier`, `glacierIr`, `deepArchive`, or `reducedRedundancy`
	Redundancy pulumi.StringPtrInput `pulumi:"redundancy"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
	S3AccessKey pulumi.StringPtrInput `pulumi:"s3AccessKey"`
	// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `accessKey` and `secretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
	S3IamRole pulumi.StringPtrInput `pulumi:"s3IamRole"`
	// AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
	S3SecretKey pulumi.StringPtrInput `pulumi:"s3SecretKey"`
	// Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
	ServerSideEncryption pulumi.StringPtrInput `pulumi:"serverSideEncryption"`
	// Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`
	ServerSideEncryptionKmsKeyId pulumi.StringPtrInput `pulumi:"serverSideEncryptionKmsKeyId"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (ServiceVclLoggingS3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingS3)(nil)).Elem()
}

func (i ServiceVclLoggingS3Args) ToServiceVclLoggingS3Output() ServiceVclLoggingS3Output {
	return i.ToServiceVclLoggingS3OutputWithContext(context.Background())
}

func (i ServiceVclLoggingS3Args) ToServiceVclLoggingS3OutputWithContext(ctx context.Context) ServiceVclLoggingS3Output {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingS3Output)
}

// ServiceVclLoggingS3ArrayInput is an input type that accepts ServiceVclLoggingS3Array and ServiceVclLoggingS3ArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingS3ArrayInput` via:
//
//	ServiceVclLoggingS3Array{ ServiceVclLoggingS3Args{...} }
type ServiceVclLoggingS3ArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingS3ArrayOutput() ServiceVclLoggingS3ArrayOutput
	ToServiceVclLoggingS3ArrayOutputWithContext(context.Context) ServiceVclLoggingS3ArrayOutput
}

type ServiceVclLoggingS3Array []ServiceVclLoggingS3Input

func (ServiceVclLoggingS3Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingS3)(nil)).Elem()
}

func (i ServiceVclLoggingS3Array) ToServiceVclLoggingS3ArrayOutput() ServiceVclLoggingS3ArrayOutput {
	return i.ToServiceVclLoggingS3ArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingS3Array) ToServiceVclLoggingS3ArrayOutputWithContext(ctx context.Context) ServiceVclLoggingS3ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingS3ArrayOutput)
}

type ServiceVclLoggingS3Output struct{ *pulumi.OutputState }

func (ServiceVclLoggingS3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingS3)(nil)).Elem()
}

func (o ServiceVclLoggingS3Output) ToServiceVclLoggingS3Output() ServiceVclLoggingS3Output {
	return o
}

func (o ServiceVclLoggingS3Output) ToServiceVclLoggingS3OutputWithContext(ctx context.Context) ServiceVclLoggingS3Output {
	return o
}

// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
func (o ServiceVclLoggingS3Output) Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.Acl }).(pulumi.StringPtrOutput)
}

// The name of the bucket in which to store the logs
func (o ServiceVclLoggingS3Output) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) string { return v.BucketName }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceVclLoggingS3Output) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// If you created the S3 bucket outside of `us-east-1`, then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`
func (o ServiceVclLoggingS3Output) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// Maximum size of an uploaded log file, if non-zero.
func (o ServiceVclLoggingS3Output) FileMaxBytes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *int { return v.FileMaxBytes }).(pulumi.IntPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o ServiceVclLoggingS3Output) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2).
func (o ServiceVclLoggingS3Output) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceVclLoggingS3Output) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingS3Output) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the S3 logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingS3Output) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) string { return v.Name }).(pulumi.StringOutput)
}

// Path to store the files. Must end with a trailing slash. If this field is left empty, the files will be saved in the bucket's root path
func (o ServiceVclLoggingS3Output) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// How frequently the logs should be transferred, in seconds. Default `3600`
func (o ServiceVclLoggingS3Output) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingS3Output) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceVclLoggingS3Output) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The S3 storage class (redundancy level). Should be one of: `standard`, `intelligentTiering`, `standardIa`, `onezoneIa`, `glacier`, `glacierIr`, `deepArchive`, or `reducedRedundancy`
func (o ServiceVclLoggingS3Output) Redundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.Redundancy }).(pulumi.StringPtrOutput)
}

// Name of blockAttributes condition to apply this logging.
func (o ServiceVclLoggingS3Output) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// AWS Access Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This key will be not be encrypted. Not required if `iamRole` is provided. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`
func (o ServiceVclLoggingS3Output) S3AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.S3AccessKey }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) for the IAM role granting Fastly access to S3. Not required if `accessKey` and `secretKey` are provided. You can provide this value via an environment variable, `FASTLY_S3_IAM_ROLE`
func (o ServiceVclLoggingS3Output) S3IamRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.S3IamRole }).(pulumi.StringPtrOutput)
}

// AWS Secret Key of an account with the required permissions to post logs. It is **strongly** recommended you create a separate IAM user with permissions to only operate on this Bucket. This secret will be not be encrypted. Not required if `iamRole` is provided. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`
func (o ServiceVclLoggingS3Output) S3SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.S3SecretKey }).(pulumi.StringPtrOutput)
}

// Specify what type of server side encryption should be used. Can be either `AES256` or `aws:kms`
func (o ServiceVclLoggingS3Output) ServerSideEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.ServerSideEncryption }).(pulumi.StringPtrOutput)
}

// Optional server-side KMS Key Id. Must be set if server*side*encryption is set to `aws:kms`
func (o ServiceVclLoggingS3Output) ServerSideEncryptionKmsKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.ServerSideEncryptionKmsKeyId }).(pulumi.StringPtrOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceVclLoggingS3Output) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingS3) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type ServiceVclLoggingS3ArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingS3ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingS3)(nil)).Elem()
}

func (o ServiceVclLoggingS3ArrayOutput) ToServiceVclLoggingS3ArrayOutput() ServiceVclLoggingS3ArrayOutput {
	return o
}

func (o ServiceVclLoggingS3ArrayOutput) ToServiceVclLoggingS3ArrayOutputWithContext(ctx context.Context) ServiceVclLoggingS3ArrayOutput {
	return o
}

func (o ServiceVclLoggingS3ArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingS3Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingS3 {
		return vs[0].([]ServiceVclLoggingS3)[vs[1].(int)]
	}).(ServiceVclLoggingS3Output)
}

type ServiceVclLoggingScalyr struct {
	// Apache style log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region *string `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys)
	Token string `pulumi:"token"`
}

// ServiceVclLoggingScalyrInput is an input type that accepts ServiceVclLoggingScalyrArgs and ServiceVclLoggingScalyrOutput values.
// You can construct a concrete instance of `ServiceVclLoggingScalyrInput` via:
//
//	ServiceVclLoggingScalyrArgs{...}
type ServiceVclLoggingScalyrInput interface {
	pulumi.Input

	ToServiceVclLoggingScalyrOutput() ServiceVclLoggingScalyrOutput
	ToServiceVclLoggingScalyrOutputWithContext(context.Context) ServiceVclLoggingScalyrOutput
}

type ServiceVclLoggingScalyrArgs struct {
	// Apache style log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of an existing condition in the configured endpoint, or leave blank to always execute.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The token to use for authentication (https://www.scalyr.com/keys)
	Token pulumi.StringInput `pulumi:"token"`
}

func (ServiceVclLoggingScalyrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingScalyr)(nil)).Elem()
}

func (i ServiceVclLoggingScalyrArgs) ToServiceVclLoggingScalyrOutput() ServiceVclLoggingScalyrOutput {
	return i.ToServiceVclLoggingScalyrOutputWithContext(context.Background())
}

func (i ServiceVclLoggingScalyrArgs) ToServiceVclLoggingScalyrOutputWithContext(ctx context.Context) ServiceVclLoggingScalyrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingScalyrOutput)
}

// ServiceVclLoggingScalyrArrayInput is an input type that accepts ServiceVclLoggingScalyrArray and ServiceVclLoggingScalyrArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingScalyrArrayInput` via:
//
//	ServiceVclLoggingScalyrArray{ ServiceVclLoggingScalyrArgs{...} }
type ServiceVclLoggingScalyrArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingScalyrArrayOutput() ServiceVclLoggingScalyrArrayOutput
	ToServiceVclLoggingScalyrArrayOutputWithContext(context.Context) ServiceVclLoggingScalyrArrayOutput
}

type ServiceVclLoggingScalyrArray []ServiceVclLoggingScalyrInput

func (ServiceVclLoggingScalyrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingScalyr)(nil)).Elem()
}

func (i ServiceVclLoggingScalyrArray) ToServiceVclLoggingScalyrArrayOutput() ServiceVclLoggingScalyrArrayOutput {
	return i.ToServiceVclLoggingScalyrArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingScalyrArray) ToServiceVclLoggingScalyrArrayOutputWithContext(ctx context.Context) ServiceVclLoggingScalyrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingScalyrArrayOutput)
}

type ServiceVclLoggingScalyrOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingScalyrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingScalyr)(nil)).Elem()
}

func (o ServiceVclLoggingScalyrOutput) ToServiceVclLoggingScalyrOutput() ServiceVclLoggingScalyrOutput {
	return o
}

func (o ServiceVclLoggingScalyrOutput) ToServiceVclLoggingScalyrOutputWithContext(ctx context.Context) ServiceVclLoggingScalyrOutput {
	return o
}

// Apache style log formatting.
func (o ServiceVclLoggingScalyrOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingScalyr) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o ServiceVclLoggingScalyrOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingScalyr) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name of the Scalyr logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingScalyrOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingScalyr) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingScalyrOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingScalyr) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The region that log data will be sent to. One of `US` or `EU`. Defaults to `US` if undefined
func (o ServiceVclLoggingScalyrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingScalyr) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of an existing condition in the configured endpoint, or leave blank to always execute.
func (o ServiceVclLoggingScalyrOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingScalyr) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The token to use for authentication (https://www.scalyr.com/keys)
func (o ServiceVclLoggingScalyrOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingScalyr) string { return v.Token }).(pulumi.StringOutput)
}

type ServiceVclLoggingScalyrArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingScalyrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingScalyr)(nil)).Elem()
}

func (o ServiceVclLoggingScalyrArrayOutput) ToServiceVclLoggingScalyrArrayOutput() ServiceVclLoggingScalyrArrayOutput {
	return o
}

func (o ServiceVclLoggingScalyrArrayOutput) ToServiceVclLoggingScalyrArrayOutputWithContext(ctx context.Context) ServiceVclLoggingScalyrArrayOutput {
	return o
}

func (o ServiceVclLoggingScalyrArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingScalyrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingScalyr {
		return vs[0].([]ServiceVclLoggingScalyr)[vs[1].(int)]
	}).(ServiceVclLoggingScalyrOutput)
}

type ServiceVclLoggingSftp struct {
	// The SFTP address to stream logs to
	Address string `pulumi:"address"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec *string `pulumi:"compressionCodec"`
	// Apache-style string or VCL variables to use for log formatting.
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion *int `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel *int `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	Password *string `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path string `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period *int `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`)
	Port *int `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey *string `pulumi:"publicKey"`
	// The name of the condition to apply.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	SecretKey *string `pulumi:"secretKey"`
	// A list of host keys for all hosts we can connect to over SFTP
	SshKnownHosts string `pulumi:"sshKnownHosts"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat *string `pulumi:"timestampFormat"`
	// The username for the server
	User string `pulumi:"user"`
}

// ServiceVclLoggingSftpInput is an input type that accepts ServiceVclLoggingSftpArgs and ServiceVclLoggingSftpOutput values.
// You can construct a concrete instance of `ServiceVclLoggingSftpInput` via:
//
//	ServiceVclLoggingSftpArgs{...}
type ServiceVclLoggingSftpInput interface {
	pulumi.Input

	ToServiceVclLoggingSftpOutput() ServiceVclLoggingSftpOutput
	ToServiceVclLoggingSftpOutputWithContext(context.Context) ServiceVclLoggingSftpOutput
}

type ServiceVclLoggingSftpArgs struct {
	// The SFTP address to stream logs to
	Address pulumi.StringInput `pulumi:"address"`
	// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
	CompressionCodec pulumi.StringPtrInput `pulumi:"compressionCodec"`
	// Apache-style string or VCL variables to use for log formatting.
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The path to upload log files to. If the path ends in `/` then it is treated as a directory
	Path pulumi.StringInput `pulumi:"path"`
	// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
	Period pulumi.IntPtrInput `pulumi:"period"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port the SFTP service listens on. (Default: `22`)
	Port pulumi.IntPtrInput `pulumi:"port"`
	// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	// The name of the condition to apply.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// A list of host keys for all hosts we can connect to over SFTP
	SshKnownHosts pulumi.StringInput `pulumi:"sshKnownHosts"`
	// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
	// The username for the server
	User pulumi.StringInput `pulumi:"user"`
}

func (ServiceVclLoggingSftpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingSftp)(nil)).Elem()
}

func (i ServiceVclLoggingSftpArgs) ToServiceVclLoggingSftpOutput() ServiceVclLoggingSftpOutput {
	return i.ToServiceVclLoggingSftpOutputWithContext(context.Background())
}

func (i ServiceVclLoggingSftpArgs) ToServiceVclLoggingSftpOutputWithContext(ctx context.Context) ServiceVclLoggingSftpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingSftpOutput)
}

// ServiceVclLoggingSftpArrayInput is an input type that accepts ServiceVclLoggingSftpArray and ServiceVclLoggingSftpArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingSftpArrayInput` via:
//
//	ServiceVclLoggingSftpArray{ ServiceVclLoggingSftpArgs{...} }
type ServiceVclLoggingSftpArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingSftpArrayOutput() ServiceVclLoggingSftpArrayOutput
	ToServiceVclLoggingSftpArrayOutputWithContext(context.Context) ServiceVclLoggingSftpArrayOutput
}

type ServiceVclLoggingSftpArray []ServiceVclLoggingSftpInput

func (ServiceVclLoggingSftpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingSftp)(nil)).Elem()
}

func (i ServiceVclLoggingSftpArray) ToServiceVclLoggingSftpArrayOutput() ServiceVclLoggingSftpArrayOutput {
	return i.ToServiceVclLoggingSftpArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingSftpArray) ToServiceVclLoggingSftpArrayOutputWithContext(ctx context.Context) ServiceVclLoggingSftpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingSftpArrayOutput)
}

type ServiceVclLoggingSftpOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingSftpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingSftp)(nil)).Elem()
}

func (o ServiceVclLoggingSftpOutput) ToServiceVclLoggingSftpOutput() ServiceVclLoggingSftpOutput {
	return o
}

func (o ServiceVclLoggingSftpOutput) ToServiceVclLoggingSftpOutputWithContext(ctx context.Context) ServiceVclLoggingSftpOutput {
	return o
}

// The SFTP address to stream logs to
func (o ServiceVclLoggingSftpOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) string { return v.Address }).(pulumi.StringOutput)
}

// The codec used for compression of your logs. Valid values are zstd, snappy, and gzip. If the specified codec is "gzip", gzip*level will default to 3. To specify a different level, leave compression*codec blank and explicitly set the level using gzip*level. Specifying both compression*codec and gzipLevel in the same API request will result in an error.
func (o ServiceVclLoggingSftpOutput) CompressionCodec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.CompressionCodec }).(pulumi.StringPtrOutput)
}

// Apache-style string or VCL variables to use for log formatting.
func (o ServiceVclLoggingSftpOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2).
func (o ServiceVclLoggingSftpOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// Level of Gzip compression from `0-9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`
func (o ServiceVclLoggingSftpOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingSftpOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name of the SFTP logging endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingSftpOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) string { return v.Name }).(pulumi.StringOutput)
}

// The password for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
func (o ServiceVclLoggingSftpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The path to upload log files to. If the path ends in `/` then it is treated as a directory
func (o ServiceVclLoggingSftpOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) string { return v.Path }).(pulumi.StringOutput)
}

// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`)
func (o ServiceVclLoggingSftpOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingSftpOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port the SFTP service listens on. (Default: `22`)
func (o ServiceVclLoggingSftpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// A PGP public key that Fastly will use to encrypt your log files before writing them to disk
func (o ServiceVclLoggingSftpOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply.
func (o ServiceVclLoggingSftpOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The SSH private key for the server. If both `password` and `secretKey` are passed, `secretKey` will be preferred
func (o ServiceVclLoggingSftpOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// A list of host keys for all hosts we can connect to over SFTP
func (o ServiceVclLoggingSftpOutput) SshKnownHosts() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) string { return v.SshKnownHosts }).(pulumi.StringOutput)
}

// The `strftime` specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`)
func (o ServiceVclLoggingSftpOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

// The username for the server
func (o ServiceVclLoggingSftpOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSftp) string { return v.User }).(pulumi.StringOutput)
}

type ServiceVclLoggingSftpArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingSftpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingSftp)(nil)).Elem()
}

func (o ServiceVclLoggingSftpArrayOutput) ToServiceVclLoggingSftpArrayOutput() ServiceVclLoggingSftpArrayOutput {
	return o
}

func (o ServiceVclLoggingSftpArrayOutput) ToServiceVclLoggingSftpArrayOutputWithContext(ctx context.Context) ServiceVclLoggingSftpArrayOutput {
	return o
}

func (o ServiceVclLoggingSftpArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingSftpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingSftp {
		return vs[0].([]ServiceVclLoggingSftp)[vs[1].(int)]
	}).(ServiceVclLoggingSftpOutput)
}

type ServiceVclLoggingSplunk struct {
	// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed
	Placement *string `pulumi:"placement"`
	// The name of the condition to apply
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname *string `pulumi:"tlsHostname"`
	// The Splunk token to be used for authentication
	Token string `pulumi:"token"`
	// The Splunk URL to stream logs to
	Url string `pulumi:"url"`
	// Whether to use TLS for secure logging. Default: `false`
	UseTls *bool `pulumi:"useTls"`
}

// ServiceVclLoggingSplunkInput is an input type that accepts ServiceVclLoggingSplunkArgs and ServiceVclLoggingSplunkOutput values.
// You can construct a concrete instance of `ServiceVclLoggingSplunkInput` via:
//
//	ServiceVclLoggingSplunkArgs{...}
type ServiceVclLoggingSplunkInput interface {
	pulumi.Input

	ToServiceVclLoggingSplunkOutput() ServiceVclLoggingSplunkOutput
	ToServiceVclLoggingSplunkOutputWithContext(context.Context) ServiceVclLoggingSplunkOutput
}

type ServiceVclLoggingSplunkArgs struct {
	// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The name of the condition to apply
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// The Splunk token to be used for authentication
	Token pulumi.StringInput `pulumi:"token"`
	// The Splunk URL to stream logs to
	Url pulumi.StringInput `pulumi:"url"`
	// Whether to use TLS for secure logging. Default: `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (ServiceVclLoggingSplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingSplunk)(nil)).Elem()
}

func (i ServiceVclLoggingSplunkArgs) ToServiceVclLoggingSplunkOutput() ServiceVclLoggingSplunkOutput {
	return i.ToServiceVclLoggingSplunkOutputWithContext(context.Background())
}

func (i ServiceVclLoggingSplunkArgs) ToServiceVclLoggingSplunkOutputWithContext(ctx context.Context) ServiceVclLoggingSplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingSplunkOutput)
}

// ServiceVclLoggingSplunkArrayInput is an input type that accepts ServiceVclLoggingSplunkArray and ServiceVclLoggingSplunkArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingSplunkArrayInput` via:
//
//	ServiceVclLoggingSplunkArray{ ServiceVclLoggingSplunkArgs{...} }
type ServiceVclLoggingSplunkArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingSplunkArrayOutput() ServiceVclLoggingSplunkArrayOutput
	ToServiceVclLoggingSplunkArrayOutputWithContext(context.Context) ServiceVclLoggingSplunkArrayOutput
}

type ServiceVclLoggingSplunkArray []ServiceVclLoggingSplunkInput

func (ServiceVclLoggingSplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingSplunk)(nil)).Elem()
}

func (i ServiceVclLoggingSplunkArray) ToServiceVclLoggingSplunkArrayOutput() ServiceVclLoggingSplunkArrayOutput {
	return i.ToServiceVclLoggingSplunkArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingSplunkArray) ToServiceVclLoggingSplunkArrayOutputWithContext(ctx context.Context) ServiceVclLoggingSplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingSplunkArrayOutput)
}

type ServiceVclLoggingSplunkOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingSplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingSplunk)(nil)).Elem()
}

func (o ServiceVclLoggingSplunkOutput) ToServiceVclLoggingSplunkOutput() ServiceVclLoggingSplunkOutput {
	return o
}

func (o ServiceVclLoggingSplunkOutput) ToServiceVclLoggingSplunkOutputWithContext(ctx context.Context) ServiceVclLoggingSplunkOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting (default: `%h %l %u %t "%r" %>s %b`)
func (o ServiceVclLoggingSplunkOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (default: 2)
func (o ServiceVclLoggingSplunkOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// A unique name to identify the Splunk endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingSplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed
func (o ServiceVclLoggingSplunkOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The name of the condition to apply
func (o ServiceVclLoggingSplunkOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SPLUNK_CA_CERT`
func (o ServiceVclLoggingSplunkOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format.
func (o ServiceVclLoggingSplunkOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format.
func (o ServiceVclLoggingSplunkOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// The hostname used to verify the server's certificate. It can either be the Common Name or a Subject Alternative Name (SAN)
func (o ServiceVclLoggingSplunkOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// The Splunk token to be used for authentication
func (o ServiceVclLoggingSplunkOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) string { return v.Token }).(pulumi.StringOutput)
}

// The Splunk URL to stream logs to
func (o ServiceVclLoggingSplunkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) string { return v.Url }).(pulumi.StringOutput)
}

// Whether to use TLS for secure logging. Default: `false`
func (o ServiceVclLoggingSplunkOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSplunk) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type ServiceVclLoggingSplunkArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingSplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingSplunk)(nil)).Elem()
}

func (o ServiceVclLoggingSplunkArrayOutput) ToServiceVclLoggingSplunkArrayOutput() ServiceVclLoggingSplunkArrayOutput {
	return o
}

func (o ServiceVclLoggingSplunkArrayOutput) ToServiceVclLoggingSplunkArrayOutputWithContext(ctx context.Context) ServiceVclLoggingSplunkArrayOutput {
	return o
}

func (o ServiceVclLoggingSplunkArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingSplunkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingSplunk {
		return vs[0].([]ServiceVclLoggingSplunk)[vs[1].(int)]
	}).(ServiceVclLoggingSplunkOutput)
}

type ServiceVclLoggingSumologic struct {
	// Apache-style string or VCL variables to use for log formatting
	Format *string `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// The URL to Sumologic collector endpoint
	Url string `pulumi:"url"`
}

// ServiceVclLoggingSumologicInput is an input type that accepts ServiceVclLoggingSumologicArgs and ServiceVclLoggingSumologicOutput values.
// You can construct a concrete instance of `ServiceVclLoggingSumologicInput` via:
//
//	ServiceVclLoggingSumologicArgs{...}
type ServiceVclLoggingSumologicInput interface {
	pulumi.Input

	ToServiceVclLoggingSumologicOutput() ServiceVclLoggingSumologicOutput
	ToServiceVclLoggingSumologicOutputWithContext(context.Context) ServiceVclLoggingSumologicOutput
}

type ServiceVclLoggingSumologicArgs struct {
	// Apache-style string or VCL variables to use for log formatting
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// The URL to Sumologic collector endpoint
	Url pulumi.StringInput `pulumi:"url"`
}

func (ServiceVclLoggingSumologicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingSumologic)(nil)).Elem()
}

func (i ServiceVclLoggingSumologicArgs) ToServiceVclLoggingSumologicOutput() ServiceVclLoggingSumologicOutput {
	return i.ToServiceVclLoggingSumologicOutputWithContext(context.Background())
}

func (i ServiceVclLoggingSumologicArgs) ToServiceVclLoggingSumologicOutputWithContext(ctx context.Context) ServiceVclLoggingSumologicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingSumologicOutput)
}

// ServiceVclLoggingSumologicArrayInput is an input type that accepts ServiceVclLoggingSumologicArray and ServiceVclLoggingSumologicArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingSumologicArrayInput` via:
//
//	ServiceVclLoggingSumologicArray{ ServiceVclLoggingSumologicArgs{...} }
type ServiceVclLoggingSumologicArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingSumologicArrayOutput() ServiceVclLoggingSumologicArrayOutput
	ToServiceVclLoggingSumologicArrayOutputWithContext(context.Context) ServiceVclLoggingSumologicArrayOutput
}

type ServiceVclLoggingSumologicArray []ServiceVclLoggingSumologicInput

func (ServiceVclLoggingSumologicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingSumologic)(nil)).Elem()
}

func (i ServiceVclLoggingSumologicArray) ToServiceVclLoggingSumologicArrayOutput() ServiceVclLoggingSumologicArrayOutput {
	return i.ToServiceVclLoggingSumologicArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingSumologicArray) ToServiceVclLoggingSumologicArrayOutputWithContext(ctx context.Context) ServiceVclLoggingSumologicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingSumologicArrayOutput)
}

type ServiceVclLoggingSumologicOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingSumologicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingSumologic)(nil)).Elem()
}

func (o ServiceVclLoggingSumologicOutput) ToServiceVclLoggingSumologicOutput() ServiceVclLoggingSumologicOutput {
	return o
}

func (o ServiceVclLoggingSumologicOutput) ToServiceVclLoggingSumologicOutputWithContext(ctx context.Context) ServiceVclLoggingSumologicOutput {
	return o
}

// Apache-style string or VCL variables to use for log formatting
func (o ServiceVclLoggingSumologicOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSumologic) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format used for the configured endpoint. Can be either 1 or 2. (Default: 2)
func (o ServiceVclLoggingSumologicOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSumologic) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingSumologicOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSumologic) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Sumologic endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingSumologicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSumologic) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingSumologicOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSumologic) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// Name of blockAttributes condition to apply this logging.
func (o ServiceVclLoggingSumologicOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSumologic) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// The URL to Sumologic collector endpoint
func (o ServiceVclLoggingSumologicOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSumologic) string { return v.Url }).(pulumi.StringOutput)
}

type ServiceVclLoggingSumologicArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingSumologicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingSumologic)(nil)).Elem()
}

func (o ServiceVclLoggingSumologicArrayOutput) ToServiceVclLoggingSumologicArrayOutput() ServiceVclLoggingSumologicArrayOutput {
	return o
}

func (o ServiceVclLoggingSumologicArrayOutput) ToServiceVclLoggingSumologicArrayOutputWithContext(ctx context.Context) ServiceVclLoggingSumologicArrayOutput {
	return o
}

func (o ServiceVclLoggingSumologicArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingSumologicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingSumologic {
		return vs[0].([]ServiceVclLoggingSumologic)[vs[1].(int)]
	}).(ServiceVclLoggingSumologicOutput)
}

type ServiceVclLoggingSyslog struct {
	// A hostname or IPv4 address of the Syslog endpoint
	Address string `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting
	Format *string `pulumi:"format"`
	// The version of the custom logging format. Can be either 1 or 2. (Default: 2)
	FormatVersion *int `pulumi:"formatVersion"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType *string `pulumi:"messageType"`
	// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement *string `pulumi:"placement"`
	// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
	Port *int `pulumi:"port"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition *string `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
	TlsCaCert *string `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname *string `pulumi:"tlsHostname"`
	// Whether to prepend each message with a specific token
	Token *string `pulumi:"token"`
	// Whether to use TLS for secure logging. Default `false`
	UseTls *bool `pulumi:"useTls"`
}

// ServiceVclLoggingSyslogInput is an input type that accepts ServiceVclLoggingSyslogArgs and ServiceVclLoggingSyslogOutput values.
// You can construct a concrete instance of `ServiceVclLoggingSyslogInput` via:
//
//	ServiceVclLoggingSyslogArgs{...}
type ServiceVclLoggingSyslogInput interface {
	pulumi.Input

	ToServiceVclLoggingSyslogOutput() ServiceVclLoggingSyslogOutput
	ToServiceVclLoggingSyslogOutputWithContext(context.Context) ServiceVclLoggingSyslogOutput
}

type ServiceVclLoggingSyslogArgs struct {
	// A hostname or IPv4 address of the Syslog endpoint
	Address pulumi.StringInput `pulumi:"address"`
	// Apache-style string or VCL variables to use for log formatting
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The version of the custom logging format. Can be either 1 or 2. (Default: 2)
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Where in the generated VCL the logging call should be placed.
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Name of blockAttributes condition to apply this logging.
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// Used during the TLS handshake to validate the certificate
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	// Whether to prepend each message with a specific token
	Token pulumi.StringPtrInput `pulumi:"token"`
	// Whether to use TLS for secure logging. Default `false`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (ServiceVclLoggingSyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingSyslog)(nil)).Elem()
}

func (i ServiceVclLoggingSyslogArgs) ToServiceVclLoggingSyslogOutput() ServiceVclLoggingSyslogOutput {
	return i.ToServiceVclLoggingSyslogOutputWithContext(context.Background())
}

func (i ServiceVclLoggingSyslogArgs) ToServiceVclLoggingSyslogOutputWithContext(ctx context.Context) ServiceVclLoggingSyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingSyslogOutput)
}

// ServiceVclLoggingSyslogArrayInput is an input type that accepts ServiceVclLoggingSyslogArray and ServiceVclLoggingSyslogArrayOutput values.
// You can construct a concrete instance of `ServiceVclLoggingSyslogArrayInput` via:
//
//	ServiceVclLoggingSyslogArray{ ServiceVclLoggingSyslogArgs{...} }
type ServiceVclLoggingSyslogArrayInput interface {
	pulumi.Input

	ToServiceVclLoggingSyslogArrayOutput() ServiceVclLoggingSyslogArrayOutput
	ToServiceVclLoggingSyslogArrayOutputWithContext(context.Context) ServiceVclLoggingSyslogArrayOutput
}

type ServiceVclLoggingSyslogArray []ServiceVclLoggingSyslogInput

func (ServiceVclLoggingSyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingSyslog)(nil)).Elem()
}

func (i ServiceVclLoggingSyslogArray) ToServiceVclLoggingSyslogArrayOutput() ServiceVclLoggingSyslogArrayOutput {
	return i.ToServiceVclLoggingSyslogArrayOutputWithContext(context.Background())
}

func (i ServiceVclLoggingSyslogArray) ToServiceVclLoggingSyslogArrayOutputWithContext(ctx context.Context) ServiceVclLoggingSyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclLoggingSyslogArrayOutput)
}

type ServiceVclLoggingSyslogOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingSyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclLoggingSyslog)(nil)).Elem()
}

func (o ServiceVclLoggingSyslogOutput) ToServiceVclLoggingSyslogOutput() ServiceVclLoggingSyslogOutput {
	return o
}

func (o ServiceVclLoggingSyslogOutput) ToServiceVclLoggingSyslogOutputWithContext(ctx context.Context) ServiceVclLoggingSyslogOutput {
	return o
}

// A hostname or IPv4 address of the Syslog endpoint
func (o ServiceVclLoggingSyslogOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) string { return v.Address }).(pulumi.StringOutput)
}

// Apache-style string or VCL variables to use for log formatting
func (o ServiceVclLoggingSyslogOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The version of the custom logging format. Can be either 1 or 2. (Default: 2)
func (o ServiceVclLoggingSyslogOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`. Default is `classic`
func (o ServiceVclLoggingSyslogOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Syslog endpoint. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclLoggingSyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) string { return v.Name }).(pulumi.StringOutput)
}

// Where in the generated VCL the logging call should be placed.
func (o ServiceVclLoggingSyslogOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

// The port associated with the address where the Syslog endpoint can be accessed. Default `514`
func (o ServiceVclLoggingSyslogOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Name of blockAttributes condition to apply this logging.
func (o ServiceVclLoggingSyslogOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
func (o ServiceVclLoggingSyslogOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
func (o ServiceVclLoggingSyslogOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
func (o ServiceVclLoggingSyslogOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// Used during the TLS handshake to validate the certificate
func (o ServiceVclLoggingSyslogOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

// Whether to prepend each message with a specific token
func (o ServiceVclLoggingSyslogOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// Whether to use TLS for secure logging. Default `false`
func (o ServiceVclLoggingSyslogOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclLoggingSyslog) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type ServiceVclLoggingSyslogArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclLoggingSyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclLoggingSyslog)(nil)).Elem()
}

func (o ServiceVclLoggingSyslogArrayOutput) ToServiceVclLoggingSyslogArrayOutput() ServiceVclLoggingSyslogArrayOutput {
	return o
}

func (o ServiceVclLoggingSyslogArrayOutput) ToServiceVclLoggingSyslogArrayOutputWithContext(ctx context.Context) ServiceVclLoggingSyslogArrayOutput {
	return o
}

func (o ServiceVclLoggingSyslogArrayOutput) Index(i pulumi.IntInput) ServiceVclLoggingSyslogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclLoggingSyslog {
		return vs[0].([]ServiceVclLoggingSyslog)[vs[1].(int)]
	}).(ServiceVclLoggingSyslogOutput)
}

type ServiceVclProductEnablement struct {
	// Enable Brotli Compression support
	BrotliCompression *bool `pulumi:"brotliCompression"`
	// Enable Domain Inspector support
	DomainInspector *bool `pulumi:"domainInspector"`
	// Enable Image Optimizer support (requires at least one backend with a `shield` attribute)
	ImageOptimizer *bool `pulumi:"imageOptimizer"`
	// Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
	Name *string `pulumi:"name"`
	// Enable Origin Inspector support
	OriginInspector *bool `pulumi:"originInspector"`
	// Enable WebSockets support
	Websockets *bool `pulumi:"websockets"`
}

// ServiceVclProductEnablementInput is an input type that accepts ServiceVclProductEnablementArgs and ServiceVclProductEnablementOutput values.
// You can construct a concrete instance of `ServiceVclProductEnablementInput` via:
//
//	ServiceVclProductEnablementArgs{...}
type ServiceVclProductEnablementInput interface {
	pulumi.Input

	ToServiceVclProductEnablementOutput() ServiceVclProductEnablementOutput
	ToServiceVclProductEnablementOutputWithContext(context.Context) ServiceVclProductEnablementOutput
}

type ServiceVclProductEnablementArgs struct {
	// Enable Brotli Compression support
	BrotliCompression pulumi.BoolPtrInput `pulumi:"brotliCompression"`
	// Enable Domain Inspector support
	DomainInspector pulumi.BoolPtrInput `pulumi:"domainInspector"`
	// Enable Image Optimizer support (requires at least one backend with a `shield` attribute)
	ImageOptimizer pulumi.BoolPtrInput `pulumi:"imageOptimizer"`
	// Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Enable Origin Inspector support
	OriginInspector pulumi.BoolPtrInput `pulumi:"originInspector"`
	// Enable WebSockets support
	Websockets pulumi.BoolPtrInput `pulumi:"websockets"`
}

func (ServiceVclProductEnablementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclProductEnablement)(nil)).Elem()
}

func (i ServiceVclProductEnablementArgs) ToServiceVclProductEnablementOutput() ServiceVclProductEnablementOutput {
	return i.ToServiceVclProductEnablementOutputWithContext(context.Background())
}

func (i ServiceVclProductEnablementArgs) ToServiceVclProductEnablementOutputWithContext(ctx context.Context) ServiceVclProductEnablementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclProductEnablementOutput)
}

func (i ServiceVclProductEnablementArgs) ToServiceVclProductEnablementPtrOutput() ServiceVclProductEnablementPtrOutput {
	return i.ToServiceVclProductEnablementPtrOutputWithContext(context.Background())
}

func (i ServiceVclProductEnablementArgs) ToServiceVclProductEnablementPtrOutputWithContext(ctx context.Context) ServiceVclProductEnablementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclProductEnablementOutput).ToServiceVclProductEnablementPtrOutputWithContext(ctx)
}

// ServiceVclProductEnablementPtrInput is an input type that accepts ServiceVclProductEnablementArgs, ServiceVclProductEnablementPtr and ServiceVclProductEnablementPtrOutput values.
// You can construct a concrete instance of `ServiceVclProductEnablementPtrInput` via:
//
//	        ServiceVclProductEnablementArgs{...}
//
//	or:
//
//	        nil
type ServiceVclProductEnablementPtrInput interface {
	pulumi.Input

	ToServiceVclProductEnablementPtrOutput() ServiceVclProductEnablementPtrOutput
	ToServiceVclProductEnablementPtrOutputWithContext(context.Context) ServiceVclProductEnablementPtrOutput
}

type serviceVclProductEnablementPtrType ServiceVclProductEnablementArgs

func ServiceVclProductEnablementPtr(v *ServiceVclProductEnablementArgs) ServiceVclProductEnablementPtrInput {
	return (*serviceVclProductEnablementPtrType)(v)
}

func (*serviceVclProductEnablementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVclProductEnablement)(nil)).Elem()
}

func (i *serviceVclProductEnablementPtrType) ToServiceVclProductEnablementPtrOutput() ServiceVclProductEnablementPtrOutput {
	return i.ToServiceVclProductEnablementPtrOutputWithContext(context.Background())
}

func (i *serviceVclProductEnablementPtrType) ToServiceVclProductEnablementPtrOutputWithContext(ctx context.Context) ServiceVclProductEnablementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclProductEnablementPtrOutput)
}

type ServiceVclProductEnablementOutput struct{ *pulumi.OutputState }

func (ServiceVclProductEnablementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclProductEnablement)(nil)).Elem()
}

func (o ServiceVclProductEnablementOutput) ToServiceVclProductEnablementOutput() ServiceVclProductEnablementOutput {
	return o
}

func (o ServiceVclProductEnablementOutput) ToServiceVclProductEnablementOutputWithContext(ctx context.Context) ServiceVclProductEnablementOutput {
	return o
}

func (o ServiceVclProductEnablementOutput) ToServiceVclProductEnablementPtrOutput() ServiceVclProductEnablementPtrOutput {
	return o.ToServiceVclProductEnablementPtrOutputWithContext(context.Background())
}

func (o ServiceVclProductEnablementOutput) ToServiceVclProductEnablementPtrOutputWithContext(ctx context.Context) ServiceVclProductEnablementPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceVclProductEnablement) *ServiceVclProductEnablement {
		return &v
	}).(ServiceVclProductEnablementPtrOutput)
}

// Enable Brotli Compression support
func (o ServiceVclProductEnablementOutput) BrotliCompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclProductEnablement) *bool { return v.BrotliCompression }).(pulumi.BoolPtrOutput)
}

// Enable Domain Inspector support
func (o ServiceVclProductEnablementOutput) DomainInspector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclProductEnablement) *bool { return v.DomainInspector }).(pulumi.BoolPtrOutput)
}

// Enable Image Optimizer support (requires at least one backend with a `shield` attribute)
func (o ServiceVclProductEnablementOutput) ImageOptimizer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclProductEnablement) *bool { return v.ImageOptimizer }).(pulumi.BoolPtrOutput)
}

// Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
func (o ServiceVclProductEnablementOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclProductEnablement) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Enable Origin Inspector support
func (o ServiceVclProductEnablementOutput) OriginInspector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclProductEnablement) *bool { return v.OriginInspector }).(pulumi.BoolPtrOutput)
}

// Enable WebSockets support
func (o ServiceVclProductEnablementOutput) Websockets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclProductEnablement) *bool { return v.Websockets }).(pulumi.BoolPtrOutput)
}

type ServiceVclProductEnablementPtrOutput struct{ *pulumi.OutputState }

func (ServiceVclProductEnablementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVclProductEnablement)(nil)).Elem()
}

func (o ServiceVclProductEnablementPtrOutput) ToServiceVclProductEnablementPtrOutput() ServiceVclProductEnablementPtrOutput {
	return o
}

func (o ServiceVclProductEnablementPtrOutput) ToServiceVclProductEnablementPtrOutputWithContext(ctx context.Context) ServiceVclProductEnablementPtrOutput {
	return o
}

func (o ServiceVclProductEnablementPtrOutput) Elem() ServiceVclProductEnablementOutput {
	return o.ApplyT(func(v *ServiceVclProductEnablement) ServiceVclProductEnablement {
		if v != nil {
			return *v
		}
		var ret ServiceVclProductEnablement
		return ret
	}).(ServiceVclProductEnablementOutput)
}

// Enable Brotli Compression support
func (o ServiceVclProductEnablementPtrOutput) BrotliCompression() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVclProductEnablement) *bool {
		if v == nil {
			return nil
		}
		return v.BrotliCompression
	}).(pulumi.BoolPtrOutput)
}

// Enable Domain Inspector support
func (o ServiceVclProductEnablementPtrOutput) DomainInspector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVclProductEnablement) *bool {
		if v == nil {
			return nil
		}
		return v.DomainInspector
	}).(pulumi.BoolPtrOutput)
}

// Enable Image Optimizer support (requires at least one backend with a `shield` attribute)
func (o ServiceVclProductEnablementPtrOutput) ImageOptimizer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVclProductEnablement) *bool {
		if v == nil {
			return nil
		}
		return v.ImageOptimizer
	}).(pulumi.BoolPtrOutput)
}

// Used by the provider to identify modified settings (changing this value will force the entire block to be deleted, then recreated)
func (o ServiceVclProductEnablementPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVclProductEnablement) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Enable Origin Inspector support
func (o ServiceVclProductEnablementPtrOutput) OriginInspector() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVclProductEnablement) *bool {
		if v == nil {
			return nil
		}
		return v.OriginInspector
	}).(pulumi.BoolPtrOutput)
}

// Enable WebSockets support
func (o ServiceVclProductEnablementPtrOutput) Websockets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVclProductEnablement) *bool {
		if v == nil {
			return nil
		}
		return v.Websockets
	}).(pulumi.BoolPtrOutput)
}

type ServiceVclRateLimiter struct {
	// The action to take when a rate limiter violation is detected (one of: log*only, response, response*object)
	Action string `pulumi:"action"`
	// Comma-separated list of VCL variables used to generate a counter key to identify a client
	ClientKey string `pulumi:"clientKey"`
	// Revision number of the rate limiting feature implementation
	FeatureRevision *int `pulumi:"featureRevision"`
	// Comma-separated list of HTTP methods to apply rate limiting to
	HttpMethods string `pulumi:"httpMethods"`
	// Name of the type of logging endpoint to be used when action is logOnly (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
	LoggerType *string `pulumi:"loggerType"`
	// A unique human readable name for the rate limiting rule
	Name string `pulumi:"name"`
	// Length of time in minutes that the rate limiter is in effect after the initial violation is detected
	PenaltyBoxDuration int `pulumi:"penaltyBoxDuration"`
	// Alphanumeric string identifying the rate limiter
	RatelimiterId *string `pulumi:"ratelimiterId"`
	// Custom response to be sent when the rate limit is exceeded. Required if action is response
	Response *ServiceVclRateLimiterResponse `pulumi:"response"`
	// Name of existing response object. Required if action is response_object
	ResponseObjectName *string `pulumi:"responseObjectName"`
	// Upper limit of requests per second allowed by the rate limiter
	RpsLimit int `pulumi:"rpsLimit"`
	// The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
	UriDictionaryName *string `pulumi:"uriDictionaryName"`
	// Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
	WindowSize int `pulumi:"windowSize"`
}

// ServiceVclRateLimiterInput is an input type that accepts ServiceVclRateLimiterArgs and ServiceVclRateLimiterOutput values.
// You can construct a concrete instance of `ServiceVclRateLimiterInput` via:
//
//	ServiceVclRateLimiterArgs{...}
type ServiceVclRateLimiterInput interface {
	pulumi.Input

	ToServiceVclRateLimiterOutput() ServiceVclRateLimiterOutput
	ToServiceVclRateLimiterOutputWithContext(context.Context) ServiceVclRateLimiterOutput
}

type ServiceVclRateLimiterArgs struct {
	// The action to take when a rate limiter violation is detected (one of: log*only, response, response*object)
	Action pulumi.StringInput `pulumi:"action"`
	// Comma-separated list of VCL variables used to generate a counter key to identify a client
	ClientKey pulumi.StringInput `pulumi:"clientKey"`
	// Revision number of the rate limiting feature implementation
	FeatureRevision pulumi.IntPtrInput `pulumi:"featureRevision"`
	// Comma-separated list of HTTP methods to apply rate limiting to
	HttpMethods pulumi.StringInput `pulumi:"httpMethods"`
	// Name of the type of logging endpoint to be used when action is logOnly (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
	LoggerType pulumi.StringPtrInput `pulumi:"loggerType"`
	// A unique human readable name for the rate limiting rule
	Name pulumi.StringInput `pulumi:"name"`
	// Length of time in minutes that the rate limiter is in effect after the initial violation is detected
	PenaltyBoxDuration pulumi.IntInput `pulumi:"penaltyBoxDuration"`
	// Alphanumeric string identifying the rate limiter
	RatelimiterId pulumi.StringPtrInput `pulumi:"ratelimiterId"`
	// Custom response to be sent when the rate limit is exceeded. Required if action is response
	Response ServiceVclRateLimiterResponsePtrInput `pulumi:"response"`
	// Name of existing response object. Required if action is response_object
	ResponseObjectName pulumi.StringPtrInput `pulumi:"responseObjectName"`
	// Upper limit of requests per second allowed by the rate limiter
	RpsLimit pulumi.IntInput `pulumi:"rpsLimit"`
	// The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
	UriDictionaryName pulumi.StringPtrInput `pulumi:"uriDictionaryName"`
	// Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
	WindowSize pulumi.IntInput `pulumi:"windowSize"`
}

func (ServiceVclRateLimiterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclRateLimiter)(nil)).Elem()
}

func (i ServiceVclRateLimiterArgs) ToServiceVclRateLimiterOutput() ServiceVclRateLimiterOutput {
	return i.ToServiceVclRateLimiterOutputWithContext(context.Background())
}

func (i ServiceVclRateLimiterArgs) ToServiceVclRateLimiterOutputWithContext(ctx context.Context) ServiceVclRateLimiterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclRateLimiterOutput)
}

// ServiceVclRateLimiterArrayInput is an input type that accepts ServiceVclRateLimiterArray and ServiceVclRateLimiterArrayOutput values.
// You can construct a concrete instance of `ServiceVclRateLimiterArrayInput` via:
//
//	ServiceVclRateLimiterArray{ ServiceVclRateLimiterArgs{...} }
type ServiceVclRateLimiterArrayInput interface {
	pulumi.Input

	ToServiceVclRateLimiterArrayOutput() ServiceVclRateLimiterArrayOutput
	ToServiceVclRateLimiterArrayOutputWithContext(context.Context) ServiceVclRateLimiterArrayOutput
}

type ServiceVclRateLimiterArray []ServiceVclRateLimiterInput

func (ServiceVclRateLimiterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclRateLimiter)(nil)).Elem()
}

func (i ServiceVclRateLimiterArray) ToServiceVclRateLimiterArrayOutput() ServiceVclRateLimiterArrayOutput {
	return i.ToServiceVclRateLimiterArrayOutputWithContext(context.Background())
}

func (i ServiceVclRateLimiterArray) ToServiceVclRateLimiterArrayOutputWithContext(ctx context.Context) ServiceVclRateLimiterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclRateLimiterArrayOutput)
}

type ServiceVclRateLimiterOutput struct{ *pulumi.OutputState }

func (ServiceVclRateLimiterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclRateLimiter)(nil)).Elem()
}

func (o ServiceVclRateLimiterOutput) ToServiceVclRateLimiterOutput() ServiceVclRateLimiterOutput {
	return o
}

func (o ServiceVclRateLimiterOutput) ToServiceVclRateLimiterOutputWithContext(ctx context.Context) ServiceVclRateLimiterOutput {
	return o
}

// The action to take when a rate limiter violation is detected (one of: log*only, response, response*object)
func (o ServiceVclRateLimiterOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) string { return v.Action }).(pulumi.StringOutput)
}

// Comma-separated list of VCL variables used to generate a counter key to identify a client
func (o ServiceVclRateLimiterOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) string { return v.ClientKey }).(pulumi.StringOutput)
}

// Revision number of the rate limiting feature implementation
func (o ServiceVclRateLimiterOutput) FeatureRevision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) *int { return v.FeatureRevision }).(pulumi.IntPtrOutput)
}

// Comma-separated list of HTTP methods to apply rate limiting to
func (o ServiceVclRateLimiterOutput) HttpMethods() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) string { return v.HttpMethods }).(pulumi.StringOutput)
}

// Name of the type of logging endpoint to be used when action is logOnly (one of: azureblob, bigquery, cloudfiles, datadog, digitalocean, elasticsearch, ftp, gcs, googleanalytics, heroku, honeycomb, http, https, kafka, kinesis, logentries, loggly, logshuttle, newrelic, openstack, papertrail, pubsub, s3, scalyr, sftp, splunk, stackdriver, sumologic, syslog)
func (o ServiceVclRateLimiterOutput) LoggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) *string { return v.LoggerType }).(pulumi.StringPtrOutput)
}

// A unique human readable name for the rate limiting rule
func (o ServiceVclRateLimiterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) string { return v.Name }).(pulumi.StringOutput)
}

// Length of time in minutes that the rate limiter is in effect after the initial violation is detected
func (o ServiceVclRateLimiterOutput) PenaltyBoxDuration() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) int { return v.PenaltyBoxDuration }).(pulumi.IntOutput)
}

// Alphanumeric string identifying the rate limiter
func (o ServiceVclRateLimiterOutput) RatelimiterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) *string { return v.RatelimiterId }).(pulumi.StringPtrOutput)
}

// Custom response to be sent when the rate limit is exceeded. Required if action is response
func (o ServiceVclRateLimiterOutput) Response() ServiceVclRateLimiterResponsePtrOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) *ServiceVclRateLimiterResponse { return v.Response }).(ServiceVclRateLimiterResponsePtrOutput)
}

// Name of existing response object. Required if action is response_object
func (o ServiceVclRateLimiterOutput) ResponseObjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) *string { return v.ResponseObjectName }).(pulumi.StringPtrOutput)
}

// Upper limit of requests per second allowed by the rate limiter
func (o ServiceVclRateLimiterOutput) RpsLimit() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) int { return v.RpsLimit }).(pulumi.IntOutput)
}

// The name of an Edge Dictionary containing URIs as keys. If not defined or null, all origin URIs will be rate limited
func (o ServiceVclRateLimiterOutput) UriDictionaryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) *string { return v.UriDictionaryName }).(pulumi.StringPtrOutput)
}

// Number of seconds during which the RPS limit must be exceeded in order to trigger a violation (one of: 1, 10, 60)
func (o ServiceVclRateLimiterOutput) WindowSize() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceVclRateLimiter) int { return v.WindowSize }).(pulumi.IntOutput)
}

type ServiceVclRateLimiterArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclRateLimiterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclRateLimiter)(nil)).Elem()
}

func (o ServiceVclRateLimiterArrayOutput) ToServiceVclRateLimiterArrayOutput() ServiceVclRateLimiterArrayOutput {
	return o
}

func (o ServiceVclRateLimiterArrayOutput) ToServiceVclRateLimiterArrayOutputWithContext(ctx context.Context) ServiceVclRateLimiterArrayOutput {
	return o
}

func (o ServiceVclRateLimiterArrayOutput) Index(i pulumi.IntInput) ServiceVclRateLimiterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclRateLimiter {
		return vs[0].([]ServiceVclRateLimiter)[vs[1].(int)]
	}).(ServiceVclRateLimiterOutput)
}

type ServiceVclRateLimiterResponse struct {
	// The VCL code that specifies exactly what the snippet does
	Content string `pulumi:"content"`
	// Value of the `Content-Type` header sent with the request
	ContentType string `pulumi:"contentType"`
	// HTTP response status code (e.g. 429)
	Status int `pulumi:"status"`
}

// ServiceVclRateLimiterResponseInput is an input type that accepts ServiceVclRateLimiterResponseArgs and ServiceVclRateLimiterResponseOutput values.
// You can construct a concrete instance of `ServiceVclRateLimiterResponseInput` via:
//
//	ServiceVclRateLimiterResponseArgs{...}
type ServiceVclRateLimiterResponseInput interface {
	pulumi.Input

	ToServiceVclRateLimiterResponseOutput() ServiceVclRateLimiterResponseOutput
	ToServiceVclRateLimiterResponseOutputWithContext(context.Context) ServiceVclRateLimiterResponseOutput
}

type ServiceVclRateLimiterResponseArgs struct {
	// The VCL code that specifies exactly what the snippet does
	Content pulumi.StringInput `pulumi:"content"`
	// Value of the `Content-Type` header sent with the request
	ContentType pulumi.StringInput `pulumi:"contentType"`
	// HTTP response status code (e.g. 429)
	Status pulumi.IntInput `pulumi:"status"`
}

func (ServiceVclRateLimiterResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclRateLimiterResponse)(nil)).Elem()
}

func (i ServiceVclRateLimiterResponseArgs) ToServiceVclRateLimiterResponseOutput() ServiceVclRateLimiterResponseOutput {
	return i.ToServiceVclRateLimiterResponseOutputWithContext(context.Background())
}

func (i ServiceVclRateLimiterResponseArgs) ToServiceVclRateLimiterResponseOutputWithContext(ctx context.Context) ServiceVclRateLimiterResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclRateLimiterResponseOutput)
}

func (i ServiceVclRateLimiterResponseArgs) ToServiceVclRateLimiterResponsePtrOutput() ServiceVclRateLimiterResponsePtrOutput {
	return i.ToServiceVclRateLimiterResponsePtrOutputWithContext(context.Background())
}

func (i ServiceVclRateLimiterResponseArgs) ToServiceVclRateLimiterResponsePtrOutputWithContext(ctx context.Context) ServiceVclRateLimiterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclRateLimiterResponseOutput).ToServiceVclRateLimiterResponsePtrOutputWithContext(ctx)
}

// ServiceVclRateLimiterResponsePtrInput is an input type that accepts ServiceVclRateLimiterResponseArgs, ServiceVclRateLimiterResponsePtr and ServiceVclRateLimiterResponsePtrOutput values.
// You can construct a concrete instance of `ServiceVclRateLimiterResponsePtrInput` via:
//
//	        ServiceVclRateLimiterResponseArgs{...}
//
//	or:
//
//	        nil
type ServiceVclRateLimiterResponsePtrInput interface {
	pulumi.Input

	ToServiceVclRateLimiterResponsePtrOutput() ServiceVclRateLimiterResponsePtrOutput
	ToServiceVclRateLimiterResponsePtrOutputWithContext(context.Context) ServiceVclRateLimiterResponsePtrOutput
}

type serviceVclRateLimiterResponsePtrType ServiceVclRateLimiterResponseArgs

func ServiceVclRateLimiterResponsePtr(v *ServiceVclRateLimiterResponseArgs) ServiceVclRateLimiterResponsePtrInput {
	return (*serviceVclRateLimiterResponsePtrType)(v)
}

func (*serviceVclRateLimiterResponsePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVclRateLimiterResponse)(nil)).Elem()
}

func (i *serviceVclRateLimiterResponsePtrType) ToServiceVclRateLimiterResponsePtrOutput() ServiceVclRateLimiterResponsePtrOutput {
	return i.ToServiceVclRateLimiterResponsePtrOutputWithContext(context.Background())
}

func (i *serviceVclRateLimiterResponsePtrType) ToServiceVclRateLimiterResponsePtrOutputWithContext(ctx context.Context) ServiceVclRateLimiterResponsePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclRateLimiterResponsePtrOutput)
}

type ServiceVclRateLimiterResponseOutput struct{ *pulumi.OutputState }

func (ServiceVclRateLimiterResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclRateLimiterResponse)(nil)).Elem()
}

func (o ServiceVclRateLimiterResponseOutput) ToServiceVclRateLimiterResponseOutput() ServiceVclRateLimiterResponseOutput {
	return o
}

func (o ServiceVclRateLimiterResponseOutput) ToServiceVclRateLimiterResponseOutputWithContext(ctx context.Context) ServiceVclRateLimiterResponseOutput {
	return o
}

func (o ServiceVclRateLimiterResponseOutput) ToServiceVclRateLimiterResponsePtrOutput() ServiceVclRateLimiterResponsePtrOutput {
	return o.ToServiceVclRateLimiterResponsePtrOutputWithContext(context.Background())
}

func (o ServiceVclRateLimiterResponseOutput) ToServiceVclRateLimiterResponsePtrOutputWithContext(ctx context.Context) ServiceVclRateLimiterResponsePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceVclRateLimiterResponse) *ServiceVclRateLimiterResponse {
		return &v
	}).(ServiceVclRateLimiterResponsePtrOutput)
}

// The VCL code that specifies exactly what the snippet does
func (o ServiceVclRateLimiterResponseOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclRateLimiterResponse) string { return v.Content }).(pulumi.StringOutput)
}

// Value of the `Content-Type` header sent with the request
func (o ServiceVclRateLimiterResponseOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclRateLimiterResponse) string { return v.ContentType }).(pulumi.StringOutput)
}

// HTTP response status code (e.g. 429)
func (o ServiceVclRateLimiterResponseOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceVclRateLimiterResponse) int { return v.Status }).(pulumi.IntOutput)
}

type ServiceVclRateLimiterResponsePtrOutput struct{ *pulumi.OutputState }

func (ServiceVclRateLimiterResponsePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVclRateLimiterResponse)(nil)).Elem()
}

func (o ServiceVclRateLimiterResponsePtrOutput) ToServiceVclRateLimiterResponsePtrOutput() ServiceVclRateLimiterResponsePtrOutput {
	return o
}

func (o ServiceVclRateLimiterResponsePtrOutput) ToServiceVclRateLimiterResponsePtrOutputWithContext(ctx context.Context) ServiceVclRateLimiterResponsePtrOutput {
	return o
}

func (o ServiceVclRateLimiterResponsePtrOutput) Elem() ServiceVclRateLimiterResponseOutput {
	return o.ApplyT(func(v *ServiceVclRateLimiterResponse) ServiceVclRateLimiterResponse {
		if v != nil {
			return *v
		}
		var ret ServiceVclRateLimiterResponse
		return ret
	}).(ServiceVclRateLimiterResponseOutput)
}

// The VCL code that specifies exactly what the snippet does
func (o ServiceVclRateLimiterResponsePtrOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVclRateLimiterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.Content
	}).(pulumi.StringPtrOutput)
}

// Value of the `Content-Type` header sent with the request
func (o ServiceVclRateLimiterResponsePtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVclRateLimiterResponse) *string {
		if v == nil {
			return nil
		}
		return &v.ContentType
	}).(pulumi.StringPtrOutput)
}

// HTTP response status code (e.g. 429)
func (o ServiceVclRateLimiterResponsePtrOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceVclRateLimiterResponse) *int {
		if v == nil {
			return nil
		}
		return &v.Status
	}).(pulumi.IntPtrOutput)
}

type ServiceVclRequestSetting struct {
	// Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
	Action *string `pulumi:"action"`
	// Disable collapsed forwarding, so you don't wait for other objects to origin
	BypassBusyWait *bool `pulumi:"bypassBusyWait"`
	// Sets the host header
	DefaultHost *string `pulumi:"defaultHost"`
	// Force a cache miss for the request. If specified, can be `true` or `false`
	ForceMiss *bool `pulumi:"forceMiss"`
	// Forces the request to use SSL (Redirects a non-SSL request to SSL)
	ForceSsl *bool `pulumi:"forceSsl"`
	// Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers
	//
	// Deprecated: 'geo_headers' attribute has been deprecated and will be removed in the next major version release
	GeoHeaders *bool `pulumi:"geoHeaders"`
	// Comma separated list of varnish request object fields that should be in the hash key
	HashKeys *string `pulumi:"hashKeys"`
	// How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds
	MaxStaleAge *int `pulumi:"maxStaleAge"`
	// Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `requestSetting`)
	RequestCondition *string `pulumi:"requestCondition"`
	// Injects the X-Timer info into the request for viewing origin fetch durations
	TimerSupport *bool `pulumi:"timerSupport"`
	// X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
	Xff *string `pulumi:"xff"`
}

// ServiceVclRequestSettingInput is an input type that accepts ServiceVclRequestSettingArgs and ServiceVclRequestSettingOutput values.
// You can construct a concrete instance of `ServiceVclRequestSettingInput` via:
//
//	ServiceVclRequestSettingArgs{...}
type ServiceVclRequestSettingInput interface {
	pulumi.Input

	ToServiceVclRequestSettingOutput() ServiceVclRequestSettingOutput
	ToServiceVclRequestSettingOutputWithContext(context.Context) ServiceVclRequestSettingOutput
}

type ServiceVclRequestSettingArgs struct {
	// Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
	Action pulumi.StringPtrInput `pulumi:"action"`
	// Disable collapsed forwarding, so you don't wait for other objects to origin
	BypassBusyWait pulumi.BoolPtrInput `pulumi:"bypassBusyWait"`
	// Sets the host header
	DefaultHost pulumi.StringPtrInput `pulumi:"defaultHost"`
	// Force a cache miss for the request. If specified, can be `true` or `false`
	ForceMiss pulumi.BoolPtrInput `pulumi:"forceMiss"`
	// Forces the request to use SSL (Redirects a non-SSL request to SSL)
	ForceSsl pulumi.BoolPtrInput `pulumi:"forceSsl"`
	// Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers
	//
	// Deprecated: 'geo_headers' attribute has been deprecated and will be removed in the next major version release
	GeoHeaders pulumi.BoolPtrInput `pulumi:"geoHeaders"`
	// Comma separated list of varnish request object fields that should be in the hash key
	HashKeys pulumi.StringPtrInput `pulumi:"hashKeys"`
	// How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds
	MaxStaleAge pulumi.IntPtrInput `pulumi:"maxStaleAge"`
	// Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `requestSetting`)
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// Injects the X-Timer info into the request for viewing origin fetch durations
	TimerSupport pulumi.BoolPtrInput `pulumi:"timerSupport"`
	// X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
	Xff pulumi.StringPtrInput `pulumi:"xff"`
}

func (ServiceVclRequestSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclRequestSetting)(nil)).Elem()
}

func (i ServiceVclRequestSettingArgs) ToServiceVclRequestSettingOutput() ServiceVclRequestSettingOutput {
	return i.ToServiceVclRequestSettingOutputWithContext(context.Background())
}

func (i ServiceVclRequestSettingArgs) ToServiceVclRequestSettingOutputWithContext(ctx context.Context) ServiceVclRequestSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclRequestSettingOutput)
}

// ServiceVclRequestSettingArrayInput is an input type that accepts ServiceVclRequestSettingArray and ServiceVclRequestSettingArrayOutput values.
// You can construct a concrete instance of `ServiceVclRequestSettingArrayInput` via:
//
//	ServiceVclRequestSettingArray{ ServiceVclRequestSettingArgs{...} }
type ServiceVclRequestSettingArrayInput interface {
	pulumi.Input

	ToServiceVclRequestSettingArrayOutput() ServiceVclRequestSettingArrayOutput
	ToServiceVclRequestSettingArrayOutputWithContext(context.Context) ServiceVclRequestSettingArrayOutput
}

type ServiceVclRequestSettingArray []ServiceVclRequestSettingInput

func (ServiceVclRequestSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclRequestSetting)(nil)).Elem()
}

func (i ServiceVclRequestSettingArray) ToServiceVclRequestSettingArrayOutput() ServiceVclRequestSettingArrayOutput {
	return i.ToServiceVclRequestSettingArrayOutputWithContext(context.Background())
}

func (i ServiceVclRequestSettingArray) ToServiceVclRequestSettingArrayOutputWithContext(ctx context.Context) ServiceVclRequestSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclRequestSettingArrayOutput)
}

type ServiceVclRequestSettingOutput struct{ *pulumi.OutputState }

func (ServiceVclRequestSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclRequestSetting)(nil)).Elem()
}

func (o ServiceVclRequestSettingOutput) ToServiceVclRequestSettingOutput() ServiceVclRequestSettingOutput {
	return o
}

func (o ServiceVclRequestSettingOutput) ToServiceVclRequestSettingOutputWithContext(ctx context.Context) ServiceVclRequestSettingOutput {
	return o
}

// Allows you to terminate request handling and immediately perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely)
func (o ServiceVclRequestSettingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Disable collapsed forwarding, so you don't wait for other objects to origin
func (o ServiceVclRequestSettingOutput) BypassBusyWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *bool { return v.BypassBusyWait }).(pulumi.BoolPtrOutput)
}

// Sets the host header
func (o ServiceVclRequestSettingOutput) DefaultHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *string { return v.DefaultHost }).(pulumi.StringPtrOutput)
}

// Force a cache miss for the request. If specified, can be `true` or `false`
func (o ServiceVclRequestSettingOutput) ForceMiss() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *bool { return v.ForceMiss }).(pulumi.BoolPtrOutput)
}

// Forces the request to use SSL (Redirects a non-SSL request to SSL)
func (o ServiceVclRequestSettingOutput) ForceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *bool { return v.ForceSsl }).(pulumi.BoolPtrOutput)
}

// Injects Fastly-Geo-Country, Fastly-Geo-City, and Fastly-Geo-Region into the request headers
//
// Deprecated: 'geo_headers' attribute has been deprecated and will be removed in the next major version release
func (o ServiceVclRequestSettingOutput) GeoHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *bool { return v.GeoHeaders }).(pulumi.BoolPtrOutput)
}

// Comma separated list of varnish request object fields that should be in the hash key
func (o ServiceVclRequestSettingOutput) HashKeys() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *string { return v.HashKeys }).(pulumi.StringPtrOutput)
}

// How old an object is allowed to be to serve `stale-if-error` or `stale-while-revalidate`, in seconds
func (o ServiceVclRequestSettingOutput) MaxStaleAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *int { return v.MaxStaleAge }).(pulumi.IntPtrOutput)
}

// Unique name to refer to this Request Setting. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclRequestSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) string { return v.Name }).(pulumi.StringOutput)
}

// Name of already defined `condition` to determine if this request setting should be applied (should be unique across multiple instances of `requestSetting`)
func (o ServiceVclRequestSettingOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// Injects the X-Timer info into the request for viewing origin fetch durations
func (o ServiceVclRequestSettingOutput) TimerSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *bool { return v.TimerSupport }).(pulumi.BoolPtrOutput)
}

// X-Forwarded-For, should be `clear`, `leave`, `append`, `appendAll`, or `overwrite`. Default `append`
func (o ServiceVclRequestSettingOutput) Xff() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclRequestSetting) *string { return v.Xff }).(pulumi.StringPtrOutput)
}

type ServiceVclRequestSettingArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclRequestSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclRequestSetting)(nil)).Elem()
}

func (o ServiceVclRequestSettingArrayOutput) ToServiceVclRequestSettingArrayOutput() ServiceVclRequestSettingArrayOutput {
	return o
}

func (o ServiceVclRequestSettingArrayOutput) ToServiceVclRequestSettingArrayOutputWithContext(ctx context.Context) ServiceVclRequestSettingArrayOutput {
	return o
}

func (o ServiceVclRequestSettingArrayOutput) Index(i pulumi.IntInput) ServiceVclRequestSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclRequestSetting {
		return vs[0].([]ServiceVclRequestSetting)[vs[1].(int)]
	}).(ServiceVclRequestSettingOutput)
}

type ServiceVclResponseObject struct {
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	CacheCondition *string `pulumi:"cacheCondition"`
	// The content to deliver for the response object
	Content *string `pulumi:"content"`
	// The MIME type of the content
	ContentType *string `pulumi:"contentType"`
	// A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
	RequestCondition *string `pulumi:"requestCondition"`
	// The HTTP Response. Default `OK`
	Response *string `pulumi:"response"`
	// The HTTP Status Code. Default `200`
	Status *int `pulumi:"status"`
}

// ServiceVclResponseObjectInput is an input type that accepts ServiceVclResponseObjectArgs and ServiceVclResponseObjectOutput values.
// You can construct a concrete instance of `ServiceVclResponseObjectInput` via:
//
//	ServiceVclResponseObjectArgs{...}
type ServiceVclResponseObjectInput interface {
	pulumi.Input

	ToServiceVclResponseObjectOutput() ServiceVclResponseObjectOutput
	ToServiceVclResponseObjectOutputWithContext(context.Context) ServiceVclResponseObjectOutput
}

type ServiceVclResponseObjectArgs struct {
	// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The content to deliver for the response object
	Content pulumi.StringPtrInput `pulumi:"content"`
	// The MIME type of the content
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	// The HTTP Response. Default `OK`
	Response pulumi.StringPtrInput `pulumi:"response"`
	// The HTTP Status Code. Default `200`
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (ServiceVclResponseObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclResponseObject)(nil)).Elem()
}

func (i ServiceVclResponseObjectArgs) ToServiceVclResponseObjectOutput() ServiceVclResponseObjectOutput {
	return i.ToServiceVclResponseObjectOutputWithContext(context.Background())
}

func (i ServiceVclResponseObjectArgs) ToServiceVclResponseObjectOutputWithContext(ctx context.Context) ServiceVclResponseObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclResponseObjectOutput)
}

// ServiceVclResponseObjectArrayInput is an input type that accepts ServiceVclResponseObjectArray and ServiceVclResponseObjectArrayOutput values.
// You can construct a concrete instance of `ServiceVclResponseObjectArrayInput` via:
//
//	ServiceVclResponseObjectArray{ ServiceVclResponseObjectArgs{...} }
type ServiceVclResponseObjectArrayInput interface {
	pulumi.Input

	ToServiceVclResponseObjectArrayOutput() ServiceVclResponseObjectArrayOutput
	ToServiceVclResponseObjectArrayOutputWithContext(context.Context) ServiceVclResponseObjectArrayOutput
}

type ServiceVclResponseObjectArray []ServiceVclResponseObjectInput

func (ServiceVclResponseObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclResponseObject)(nil)).Elem()
}

func (i ServiceVclResponseObjectArray) ToServiceVclResponseObjectArrayOutput() ServiceVclResponseObjectArrayOutput {
	return i.ToServiceVclResponseObjectArrayOutputWithContext(context.Background())
}

func (i ServiceVclResponseObjectArray) ToServiceVclResponseObjectArrayOutputWithContext(ctx context.Context) ServiceVclResponseObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclResponseObjectArrayOutput)
}

type ServiceVclResponseObjectOutput struct{ *pulumi.OutputState }

func (ServiceVclResponseObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclResponseObject)(nil)).Elem()
}

func (o ServiceVclResponseObjectOutput) ToServiceVclResponseObjectOutput() ServiceVclResponseObjectOutput {
	return o
}

func (o ServiceVclResponseObjectOutput) ToServiceVclResponseObjectOutputWithContext(ctx context.Context) ServiceVclResponseObjectOutput {
	return o
}

// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o ServiceVclResponseObjectOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclResponseObject) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The content to deliver for the response object
func (o ServiceVclResponseObjectOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclResponseObject) *string { return v.Content }).(pulumi.StringPtrOutput)
}

// The MIME type of the content
func (o ServiceVclResponseObjectOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclResponseObject) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// A unique name to identify this Response Object. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclResponseObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclResponseObject) string { return v.Name }).(pulumi.StringOutput)
}

// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`
func (o ServiceVclResponseObjectOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclResponseObject) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

// The HTTP Response. Default `OK`
func (o ServiceVclResponseObjectOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclResponseObject) *string { return v.Response }).(pulumi.StringPtrOutput)
}

// The HTTP Status Code. Default `200`
func (o ServiceVclResponseObjectOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclResponseObject) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type ServiceVclResponseObjectArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclResponseObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclResponseObject)(nil)).Elem()
}

func (o ServiceVclResponseObjectArrayOutput) ToServiceVclResponseObjectArrayOutput() ServiceVclResponseObjectArrayOutput {
	return o
}

func (o ServiceVclResponseObjectArrayOutput) ToServiceVclResponseObjectArrayOutputWithContext(ctx context.Context) ServiceVclResponseObjectArrayOutput {
	return o
}

func (o ServiceVclResponseObjectArrayOutput) Index(i pulumi.IntInput) ServiceVclResponseObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclResponseObject {
		return vs[0].([]ServiceVclResponseObject)[vs[1].(int)]
	}).(ServiceVclResponseObjectOutput)
}

type ServiceVclSnippet struct {
	// The VCL code that specifies exactly what the snippet does
	Content string `pulumi:"content"`
	// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
	Priority *int `pulumi:"priority"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
	Type string `pulumi:"type"`
}

// ServiceVclSnippetInput is an input type that accepts ServiceVclSnippetArgs and ServiceVclSnippetOutput values.
// You can construct a concrete instance of `ServiceVclSnippetInput` via:
//
//	ServiceVclSnippetArgs{...}
type ServiceVclSnippetInput interface {
	pulumi.Input

	ToServiceVclSnippetOutput() ServiceVclSnippetOutput
	ToServiceVclSnippetOutputWithContext(context.Context) ServiceVclSnippetOutput
}

type ServiceVclSnippetArgs struct {
	// The VCL code that specifies exactly what the snippet does
	Content pulumi.StringInput `pulumi:"content"`
	// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
	// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
	Type pulumi.StringInput `pulumi:"type"`
}

func (ServiceVclSnippetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclSnippet)(nil)).Elem()
}

func (i ServiceVclSnippetArgs) ToServiceVclSnippetOutput() ServiceVclSnippetOutput {
	return i.ToServiceVclSnippetOutputWithContext(context.Background())
}

func (i ServiceVclSnippetArgs) ToServiceVclSnippetOutputWithContext(ctx context.Context) ServiceVclSnippetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclSnippetOutput)
}

// ServiceVclSnippetArrayInput is an input type that accepts ServiceVclSnippetArray and ServiceVclSnippetArrayOutput values.
// You can construct a concrete instance of `ServiceVclSnippetArrayInput` via:
//
//	ServiceVclSnippetArray{ ServiceVclSnippetArgs{...} }
type ServiceVclSnippetArrayInput interface {
	pulumi.Input

	ToServiceVclSnippetArrayOutput() ServiceVclSnippetArrayOutput
	ToServiceVclSnippetArrayOutputWithContext(context.Context) ServiceVclSnippetArrayOutput
}

type ServiceVclSnippetArray []ServiceVclSnippetInput

func (ServiceVclSnippetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclSnippet)(nil)).Elem()
}

func (i ServiceVclSnippetArray) ToServiceVclSnippetArrayOutput() ServiceVclSnippetArrayOutput {
	return i.ToServiceVclSnippetArrayOutputWithContext(context.Background())
}

func (i ServiceVclSnippetArray) ToServiceVclSnippetArrayOutputWithContext(ctx context.Context) ServiceVclSnippetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclSnippetArrayOutput)
}

type ServiceVclSnippetOutput struct{ *pulumi.OutputState }

func (ServiceVclSnippetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclSnippet)(nil)).Elem()
}

func (o ServiceVclSnippetOutput) ToServiceVclSnippetOutput() ServiceVclSnippetOutput {
	return o
}

func (o ServiceVclSnippetOutput) ToServiceVclSnippetOutputWithContext(ctx context.Context) ServiceVclSnippetOutput {
	return o
}

// The VCL code that specifies exactly what the snippet does
func (o ServiceVclSnippetOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclSnippet) string { return v.Content }).(pulumi.StringOutput)
}

// A name that is unique across "regular" and "dynamic" VCL Snippet configuration blocks. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclSnippetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclSnippet) string { return v.Name }).(pulumi.StringOutput)
}

// Priority determines the ordering for multiple snippets. Lower numbers execute first. Defaults to `100`
func (o ServiceVclSnippetOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceVclSnippet) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hash`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`)
func (o ServiceVclSnippetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclSnippet) string { return v.Type }).(pulumi.StringOutput)
}

type ServiceVclSnippetArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclSnippetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclSnippet)(nil)).Elem()
}

func (o ServiceVclSnippetArrayOutput) ToServiceVclSnippetArrayOutput() ServiceVclSnippetArrayOutput {
	return o
}

func (o ServiceVclSnippetArrayOutput) ToServiceVclSnippetArrayOutputWithContext(ctx context.Context) ServiceVclSnippetArrayOutput {
	return o
}

func (o ServiceVclSnippetArrayOutput) Index(i pulumi.IntInput) ServiceVclSnippetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclSnippet {
		return vs[0].([]ServiceVclSnippet)[vs[1].(int)]
	}).(ServiceVclSnippetOutput)
}

type ServiceVclVcl struct {
	// The custom VCL code to upload
	Content string `pulumi:"content"`
	// If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
	Main *bool `pulumi:"main"`
	// A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
	Name string `pulumi:"name"`
}

// ServiceVclVclInput is an input type that accepts ServiceVclVclArgs and ServiceVclVclOutput values.
// You can construct a concrete instance of `ServiceVclVclInput` via:
//
//	ServiceVclVclArgs{...}
type ServiceVclVclInput interface {
	pulumi.Input

	ToServiceVclVclOutput() ServiceVclVclOutput
	ToServiceVclVclOutputWithContext(context.Context) ServiceVclVclOutput
}

type ServiceVclVclArgs struct {
	// The custom VCL code to upload
	Content pulumi.StringInput `pulumi:"content"`
	// If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
	Main pulumi.BoolPtrInput `pulumi:"main"`
	// A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceVclVclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclVcl)(nil)).Elem()
}

func (i ServiceVclVclArgs) ToServiceVclVclOutput() ServiceVclVclOutput {
	return i.ToServiceVclVclOutputWithContext(context.Background())
}

func (i ServiceVclVclArgs) ToServiceVclVclOutputWithContext(ctx context.Context) ServiceVclVclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclVclOutput)
}

// ServiceVclVclArrayInput is an input type that accepts ServiceVclVclArray and ServiceVclVclArrayOutput values.
// You can construct a concrete instance of `ServiceVclVclArrayInput` via:
//
//	ServiceVclVclArray{ ServiceVclVclArgs{...} }
type ServiceVclVclArrayInput interface {
	pulumi.Input

	ToServiceVclVclArrayOutput() ServiceVclVclArrayOutput
	ToServiceVclVclArrayOutputWithContext(context.Context) ServiceVclVclArrayOutput
}

type ServiceVclVclArray []ServiceVclVclInput

func (ServiceVclVclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclVcl)(nil)).Elem()
}

func (i ServiceVclVclArray) ToServiceVclVclArrayOutput() ServiceVclVclArrayOutput {
	return i.ToServiceVclVclArrayOutputWithContext(context.Background())
}

func (i ServiceVclVclArray) ToServiceVclVclArrayOutputWithContext(ctx context.Context) ServiceVclVclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclVclArrayOutput)
}

type ServiceVclVclOutput struct{ *pulumi.OutputState }

func (ServiceVclVclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclVcl)(nil)).Elem()
}

func (o ServiceVclVclOutput) ToServiceVclVclOutput() ServiceVclVclOutput {
	return o
}

func (o ServiceVclVclOutput) ToServiceVclVclOutputWithContext(ctx context.Context) ServiceVclVclOutput {
	return o
}

// The custom VCL code to upload
func (o ServiceVclVclOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclVcl) string { return v.Content }).(pulumi.StringOutput)
}

// If `true`, use this block as the main configuration. If `false`, use this block as an includable library. Only a single VCL block can be marked as the main block. Default is `false`
func (o ServiceVclVclOutput) Main() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclVcl) *bool { return v.Main }).(pulumi.BoolPtrOutput)
}

// A unique name for this configuration block. It is important to note that changing this attribute will delete and recreate the resource
func (o ServiceVclVclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclVcl) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceVclVclArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclVclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceVclVcl)(nil)).Elem()
}

func (o ServiceVclVclArrayOutput) ToServiceVclVclArrayOutput() ServiceVclVclArrayOutput {
	return o
}

func (o ServiceVclVclArrayOutput) ToServiceVclVclArrayOutputWithContext(ctx context.Context) ServiceVclVclArrayOutput {
	return o
}

func (o ServiceVclVclArrayOutput) Index(i pulumi.IntInput) ServiceVclVclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceVclVcl {
		return vs[0].([]ServiceVclVcl)[vs[1].(int)]
	}).(ServiceVclVclOutput)
}

type ServiceVclWaf struct {
	// A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
	Disabled *bool `pulumi:"disabled"`
	// The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	PrefetchCondition *string `pulumi:"prefetchCondition"`
	// The name of the response object used by the Web Application Firewall
	ResponseObject string `pulumi:"responseObject"`
	// The ID of the WAF
	WafId *string `pulumi:"wafId"`
}

// ServiceVclWafInput is an input type that accepts ServiceVclWafArgs and ServiceVclWafOutput values.
// You can construct a concrete instance of `ServiceVclWafInput` via:
//
//	ServiceVclWafArgs{...}
type ServiceVclWafInput interface {
	pulumi.Input

	ToServiceVclWafOutput() ServiceVclWafOutput
	ToServiceVclWafOutputWithContext(context.Context) ServiceVclWafOutput
}

type ServiceVclWafArgs struct {
	// A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
	Disabled pulumi.BoolPtrInput `pulumi:"disabled"`
	// The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
	PrefetchCondition pulumi.StringPtrInput `pulumi:"prefetchCondition"`
	// The name of the response object used by the Web Application Firewall
	ResponseObject pulumi.StringInput `pulumi:"responseObject"`
	// The ID of the WAF
	WafId pulumi.StringPtrInput `pulumi:"wafId"`
}

func (ServiceVclWafArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclWaf)(nil)).Elem()
}

func (i ServiceVclWafArgs) ToServiceVclWafOutput() ServiceVclWafOutput {
	return i.ToServiceVclWafOutputWithContext(context.Background())
}

func (i ServiceVclWafArgs) ToServiceVclWafOutputWithContext(ctx context.Context) ServiceVclWafOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclWafOutput)
}

func (i ServiceVclWafArgs) ToServiceVclWafPtrOutput() ServiceVclWafPtrOutput {
	return i.ToServiceVclWafPtrOutputWithContext(context.Background())
}

func (i ServiceVclWafArgs) ToServiceVclWafPtrOutputWithContext(ctx context.Context) ServiceVclWafPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclWafOutput).ToServiceVclWafPtrOutputWithContext(ctx)
}

// ServiceVclWafPtrInput is an input type that accepts ServiceVclWafArgs, ServiceVclWafPtr and ServiceVclWafPtrOutput values.
// You can construct a concrete instance of `ServiceVclWafPtrInput` via:
//
//	        ServiceVclWafArgs{...}
//
//	or:
//
//	        nil
type ServiceVclWafPtrInput interface {
	pulumi.Input

	ToServiceVclWafPtrOutput() ServiceVclWafPtrOutput
	ToServiceVclWafPtrOutputWithContext(context.Context) ServiceVclWafPtrOutput
}

type serviceVclWafPtrType ServiceVclWafArgs

func ServiceVclWafPtr(v *ServiceVclWafArgs) ServiceVclWafPtrInput {
	return (*serviceVclWafPtrType)(v)
}

func (*serviceVclWafPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVclWaf)(nil)).Elem()
}

func (i *serviceVclWafPtrType) ToServiceVclWafPtrOutput() ServiceVclWafPtrOutput {
	return i.ToServiceVclWafPtrOutputWithContext(context.Background())
}

func (i *serviceVclWafPtrType) ToServiceVclWafPtrOutputWithContext(ctx context.Context) ServiceVclWafPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclWafPtrOutput)
}

type ServiceVclWafOutput struct{ *pulumi.OutputState }

func (ServiceVclWafOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceVclWaf)(nil)).Elem()
}

func (o ServiceVclWafOutput) ToServiceVclWafOutput() ServiceVclWafOutput {
	return o
}

func (o ServiceVclWafOutput) ToServiceVclWafOutputWithContext(ctx context.Context) ServiceVclWafOutput {
	return o
}

func (o ServiceVclWafOutput) ToServiceVclWafPtrOutput() ServiceVclWafPtrOutput {
	return o.ToServiceVclWafPtrOutputWithContext(context.Background())
}

func (o ServiceVclWafOutput) ToServiceVclWafPtrOutputWithContext(ctx context.Context) ServiceVclWafPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ServiceVclWaf) *ServiceVclWaf {
		return &v
	}).(ServiceVclWafPtrOutput)
}

// A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
func (o ServiceVclWafOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ServiceVclWaf) *bool { return v.Disabled }).(pulumi.BoolPtrOutput)
}

// The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o ServiceVclWafOutput) PrefetchCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclWaf) *string { return v.PrefetchCondition }).(pulumi.StringPtrOutput)
}

// The name of the response object used by the Web Application Firewall
func (o ServiceVclWafOutput) ResponseObject() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceVclWaf) string { return v.ResponseObject }).(pulumi.StringOutput)
}

// The ID of the WAF
func (o ServiceVclWafOutput) WafId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceVclWaf) *string { return v.WafId }).(pulumi.StringPtrOutput)
}

type ServiceVclWafPtrOutput struct{ *pulumi.OutputState }

func (ServiceVclWafPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVclWaf)(nil)).Elem()
}

func (o ServiceVclWafPtrOutput) ToServiceVclWafPtrOutput() ServiceVclWafPtrOutput {
	return o
}

func (o ServiceVclWafPtrOutput) ToServiceVclWafPtrOutputWithContext(ctx context.Context) ServiceVclWafPtrOutput {
	return o
}

func (o ServiceVclWafPtrOutput) Elem() ServiceVclWafOutput {
	return o.ApplyT(func(v *ServiceVclWaf) ServiceVclWaf {
		if v != nil {
			return *v
		}
		var ret ServiceVclWaf
		return ret
	}).(ServiceVclWafOutput)
}

// A flag used to completely disable a Web Application Firewall. This is intended to only be used in an emergency
func (o ServiceVclWafPtrOutput) Disabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVclWaf) *bool {
		if v == nil {
			return nil
		}
		return v.Disabled
	}).(pulumi.BoolPtrOutput)
}

// The `condition` to determine which requests will be run past your Fastly WAF. This `condition` must be of type `PREFETCH`. For detailed information about Conditionals, see [Fastly's Documentation on Conditionals](https://docs.fastly.com/en/guides/using-conditions)
func (o ServiceVclWafPtrOutput) PrefetchCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVclWaf) *string {
		if v == nil {
			return nil
		}
		return v.PrefetchCondition
	}).(pulumi.StringPtrOutput)
}

// The name of the response object used by the Web Application Firewall
func (o ServiceVclWafPtrOutput) ResponseObject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVclWaf) *string {
		if v == nil {
			return nil
		}
		return &v.ResponseObject
	}).(pulumi.StringPtrOutput)
}

// The ID of the WAF
func (o ServiceVclWafPtrOutput) WafId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVclWaf) *string {
		if v == nil {
			return nil
		}
		return v.WafId
	}).(pulumi.StringPtrOutput)
}

type ServiceWafConfigurationRule struct {
	// The Web Application Firewall rule's modsecurity ID
	ModsecRuleId int `pulumi:"modsecRuleId"`
	// The Web Application Firewall rule's revision. The latest revision will be used if this is not provided
	Revision *int `pulumi:"revision"`
	// The Web Application Firewall rule's status. Allowed values are (`log`, `block` and `score`)
	Status string `pulumi:"status"`
}

// ServiceWafConfigurationRuleInput is an input type that accepts ServiceWafConfigurationRuleArgs and ServiceWafConfigurationRuleOutput values.
// You can construct a concrete instance of `ServiceWafConfigurationRuleInput` via:
//
//	ServiceWafConfigurationRuleArgs{...}
type ServiceWafConfigurationRuleInput interface {
	pulumi.Input

	ToServiceWafConfigurationRuleOutput() ServiceWafConfigurationRuleOutput
	ToServiceWafConfigurationRuleOutputWithContext(context.Context) ServiceWafConfigurationRuleOutput
}

type ServiceWafConfigurationRuleArgs struct {
	// The Web Application Firewall rule's modsecurity ID
	ModsecRuleId pulumi.IntInput `pulumi:"modsecRuleId"`
	// The Web Application Firewall rule's revision. The latest revision will be used if this is not provided
	Revision pulumi.IntPtrInput `pulumi:"revision"`
	// The Web Application Firewall rule's status. Allowed values are (`log`, `block` and `score`)
	Status pulumi.StringInput `pulumi:"status"`
}

func (ServiceWafConfigurationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceWafConfigurationRule)(nil)).Elem()
}

func (i ServiceWafConfigurationRuleArgs) ToServiceWafConfigurationRuleOutput() ServiceWafConfigurationRuleOutput {
	return i.ToServiceWafConfigurationRuleOutputWithContext(context.Background())
}

func (i ServiceWafConfigurationRuleArgs) ToServiceWafConfigurationRuleOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWafConfigurationRuleOutput)
}

// ServiceWafConfigurationRuleArrayInput is an input type that accepts ServiceWafConfigurationRuleArray and ServiceWafConfigurationRuleArrayOutput values.
// You can construct a concrete instance of `ServiceWafConfigurationRuleArrayInput` via:
//
//	ServiceWafConfigurationRuleArray{ ServiceWafConfigurationRuleArgs{...} }
type ServiceWafConfigurationRuleArrayInput interface {
	pulumi.Input

	ToServiceWafConfigurationRuleArrayOutput() ServiceWafConfigurationRuleArrayOutput
	ToServiceWafConfigurationRuleArrayOutputWithContext(context.Context) ServiceWafConfigurationRuleArrayOutput
}

type ServiceWafConfigurationRuleArray []ServiceWafConfigurationRuleInput

func (ServiceWafConfigurationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceWafConfigurationRule)(nil)).Elem()
}

func (i ServiceWafConfigurationRuleArray) ToServiceWafConfigurationRuleArrayOutput() ServiceWafConfigurationRuleArrayOutput {
	return i.ToServiceWafConfigurationRuleArrayOutputWithContext(context.Background())
}

func (i ServiceWafConfigurationRuleArray) ToServiceWafConfigurationRuleArrayOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWafConfigurationRuleArrayOutput)
}

type ServiceWafConfigurationRuleOutput struct{ *pulumi.OutputState }

func (ServiceWafConfigurationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceWafConfigurationRule)(nil)).Elem()
}

func (o ServiceWafConfigurationRuleOutput) ToServiceWafConfigurationRuleOutput() ServiceWafConfigurationRuleOutput {
	return o
}

func (o ServiceWafConfigurationRuleOutput) ToServiceWafConfigurationRuleOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleOutput {
	return o
}

// The Web Application Firewall rule's modsecurity ID
func (o ServiceWafConfigurationRuleOutput) ModsecRuleId() pulumi.IntOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRule) int { return v.ModsecRuleId }).(pulumi.IntOutput)
}

// The Web Application Firewall rule's revision. The latest revision will be used if this is not provided
func (o ServiceWafConfigurationRuleOutput) Revision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRule) *int { return v.Revision }).(pulumi.IntPtrOutput)
}

// The Web Application Firewall rule's status. Allowed values are (`log`, `block` and `score`)
func (o ServiceWafConfigurationRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRule) string { return v.Status }).(pulumi.StringOutput)
}

type ServiceWafConfigurationRuleArrayOutput struct{ *pulumi.OutputState }

func (ServiceWafConfigurationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceWafConfigurationRule)(nil)).Elem()
}

func (o ServiceWafConfigurationRuleArrayOutput) ToServiceWafConfigurationRuleArrayOutput() ServiceWafConfigurationRuleArrayOutput {
	return o
}

func (o ServiceWafConfigurationRuleArrayOutput) ToServiceWafConfigurationRuleArrayOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleArrayOutput {
	return o
}

func (o ServiceWafConfigurationRuleArrayOutput) Index(i pulumi.IntInput) ServiceWafConfigurationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceWafConfigurationRule {
		return vs[0].([]ServiceWafConfigurationRule)[vs[1].(int)]
	}).(ServiceWafConfigurationRuleOutput)
}

type ServiceWafConfigurationRuleExclusion struct {
	// A conditional expression in VCL used to determine if the condition is met
	Condition string `pulumi:"condition"`
	// The type of rule exclusion. Values are `rule` to exclude the specified rule(s), or `waf` to disable the Web Application Firewall
	ExclusionType string `pulumi:"exclusionType"`
	// Set of modsecurity IDs to be excluded. No rules should be provided when `exclusionType` is `waf`. The rules need to be configured on the Web Application Firewall to be excluded
	ModsecRuleIds []int `pulumi:"modsecRuleIds"`
	// The name of rule exclusion
	Name string `pulumi:"name"`
	// The numeric ID assigned to the WAF Rule Exclusion
	Number *int `pulumi:"number"`
}

// ServiceWafConfigurationRuleExclusionInput is an input type that accepts ServiceWafConfigurationRuleExclusionArgs and ServiceWafConfigurationRuleExclusionOutput values.
// You can construct a concrete instance of `ServiceWafConfigurationRuleExclusionInput` via:
//
//	ServiceWafConfigurationRuleExclusionArgs{...}
type ServiceWafConfigurationRuleExclusionInput interface {
	pulumi.Input

	ToServiceWafConfigurationRuleExclusionOutput() ServiceWafConfigurationRuleExclusionOutput
	ToServiceWafConfigurationRuleExclusionOutputWithContext(context.Context) ServiceWafConfigurationRuleExclusionOutput
}

type ServiceWafConfigurationRuleExclusionArgs struct {
	// A conditional expression in VCL used to determine if the condition is met
	Condition pulumi.StringInput `pulumi:"condition"`
	// The type of rule exclusion. Values are `rule` to exclude the specified rule(s), or `waf` to disable the Web Application Firewall
	ExclusionType pulumi.StringInput `pulumi:"exclusionType"`
	// Set of modsecurity IDs to be excluded. No rules should be provided when `exclusionType` is `waf`. The rules need to be configured on the Web Application Firewall to be excluded
	ModsecRuleIds pulumi.IntArrayInput `pulumi:"modsecRuleIds"`
	// The name of rule exclusion
	Name pulumi.StringInput `pulumi:"name"`
	// The numeric ID assigned to the WAF Rule Exclusion
	Number pulumi.IntPtrInput `pulumi:"number"`
}

func (ServiceWafConfigurationRuleExclusionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceWafConfigurationRuleExclusion)(nil)).Elem()
}

func (i ServiceWafConfigurationRuleExclusionArgs) ToServiceWafConfigurationRuleExclusionOutput() ServiceWafConfigurationRuleExclusionOutput {
	return i.ToServiceWafConfigurationRuleExclusionOutputWithContext(context.Background())
}

func (i ServiceWafConfigurationRuleExclusionArgs) ToServiceWafConfigurationRuleExclusionOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleExclusionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWafConfigurationRuleExclusionOutput)
}

// ServiceWafConfigurationRuleExclusionArrayInput is an input type that accepts ServiceWafConfigurationRuleExclusionArray and ServiceWafConfigurationRuleExclusionArrayOutput values.
// You can construct a concrete instance of `ServiceWafConfigurationRuleExclusionArrayInput` via:
//
//	ServiceWafConfigurationRuleExclusionArray{ ServiceWafConfigurationRuleExclusionArgs{...} }
type ServiceWafConfigurationRuleExclusionArrayInput interface {
	pulumi.Input

	ToServiceWafConfigurationRuleExclusionArrayOutput() ServiceWafConfigurationRuleExclusionArrayOutput
	ToServiceWafConfigurationRuleExclusionArrayOutputWithContext(context.Context) ServiceWafConfigurationRuleExclusionArrayOutput
}

type ServiceWafConfigurationRuleExclusionArray []ServiceWafConfigurationRuleExclusionInput

func (ServiceWafConfigurationRuleExclusionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceWafConfigurationRuleExclusion)(nil)).Elem()
}

func (i ServiceWafConfigurationRuleExclusionArray) ToServiceWafConfigurationRuleExclusionArrayOutput() ServiceWafConfigurationRuleExclusionArrayOutput {
	return i.ToServiceWafConfigurationRuleExclusionArrayOutputWithContext(context.Background())
}

func (i ServiceWafConfigurationRuleExclusionArray) ToServiceWafConfigurationRuleExclusionArrayOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleExclusionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceWafConfigurationRuleExclusionArrayOutput)
}

type ServiceWafConfigurationRuleExclusionOutput struct{ *pulumi.OutputState }

func (ServiceWafConfigurationRuleExclusionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceWafConfigurationRuleExclusion)(nil)).Elem()
}

func (o ServiceWafConfigurationRuleExclusionOutput) ToServiceWafConfigurationRuleExclusionOutput() ServiceWafConfigurationRuleExclusionOutput {
	return o
}

func (o ServiceWafConfigurationRuleExclusionOutput) ToServiceWafConfigurationRuleExclusionOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleExclusionOutput {
	return o
}

// A conditional expression in VCL used to determine if the condition is met
func (o ServiceWafConfigurationRuleExclusionOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) string { return v.Condition }).(pulumi.StringOutput)
}

// The type of rule exclusion. Values are `rule` to exclude the specified rule(s), or `waf` to disable the Web Application Firewall
func (o ServiceWafConfigurationRuleExclusionOutput) ExclusionType() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) string { return v.ExclusionType }).(pulumi.StringOutput)
}

// Set of modsecurity IDs to be excluded. No rules should be provided when `exclusionType` is `waf`. The rules need to be configured on the Web Application Firewall to be excluded
func (o ServiceWafConfigurationRuleExclusionOutput) ModsecRuleIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) []int { return v.ModsecRuleIds }).(pulumi.IntArrayOutput)
}

// The name of rule exclusion
func (o ServiceWafConfigurationRuleExclusionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) string { return v.Name }).(pulumi.StringOutput)
}

// The numeric ID assigned to the WAF Rule Exclusion
func (o ServiceWafConfigurationRuleExclusionOutput) Number() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServiceWafConfigurationRuleExclusion) *int { return v.Number }).(pulumi.IntPtrOutput)
}

type ServiceWafConfigurationRuleExclusionArrayOutput struct{ *pulumi.OutputState }

func (ServiceWafConfigurationRuleExclusionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceWafConfigurationRuleExclusion)(nil)).Elem()
}

func (o ServiceWafConfigurationRuleExclusionArrayOutput) ToServiceWafConfigurationRuleExclusionArrayOutput() ServiceWafConfigurationRuleExclusionArrayOutput {
	return o
}

func (o ServiceWafConfigurationRuleExclusionArrayOutput) ToServiceWafConfigurationRuleExclusionArrayOutputWithContext(ctx context.Context) ServiceWafConfigurationRuleExclusionArrayOutput {
	return o
}

func (o ServiceWafConfigurationRuleExclusionArrayOutput) Index(i pulumi.IntInput) ServiceWafConfigurationRuleExclusionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceWafConfigurationRuleExclusion {
		return vs[0].([]ServiceWafConfigurationRuleExclusion)[vs[1].(int)]
	}).(ServiceWafConfigurationRuleExclusionOutput)
}

type TlsSubscriptionManagedDnsChallenge struct {
	RecordName  *string `pulumi:"recordName"`
	RecordType  *string `pulumi:"recordType"`
	RecordValue *string `pulumi:"recordValue"`
}

// TlsSubscriptionManagedDnsChallengeInput is an input type that accepts TlsSubscriptionManagedDnsChallengeArgs and TlsSubscriptionManagedDnsChallengeOutput values.
// You can construct a concrete instance of `TlsSubscriptionManagedDnsChallengeInput` via:
//
//	TlsSubscriptionManagedDnsChallengeArgs{...}
type TlsSubscriptionManagedDnsChallengeInput interface {
	pulumi.Input

	ToTlsSubscriptionManagedDnsChallengeOutput() TlsSubscriptionManagedDnsChallengeOutput
	ToTlsSubscriptionManagedDnsChallengeOutputWithContext(context.Context) TlsSubscriptionManagedDnsChallengeOutput
}

type TlsSubscriptionManagedDnsChallengeArgs struct {
	RecordName  pulumi.StringPtrInput `pulumi:"recordName"`
	RecordType  pulumi.StringPtrInput `pulumi:"recordType"`
	RecordValue pulumi.StringPtrInput `pulumi:"recordValue"`
}

func (TlsSubscriptionManagedDnsChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsSubscriptionManagedDnsChallenge)(nil)).Elem()
}

func (i TlsSubscriptionManagedDnsChallengeArgs) ToTlsSubscriptionManagedDnsChallengeOutput() TlsSubscriptionManagedDnsChallengeOutput {
	return i.ToTlsSubscriptionManagedDnsChallengeOutputWithContext(context.Background())
}

func (i TlsSubscriptionManagedDnsChallengeArgs) ToTlsSubscriptionManagedDnsChallengeOutputWithContext(ctx context.Context) TlsSubscriptionManagedDnsChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSubscriptionManagedDnsChallengeOutput)
}

// TlsSubscriptionManagedDnsChallengeArrayInput is an input type that accepts TlsSubscriptionManagedDnsChallengeArray and TlsSubscriptionManagedDnsChallengeArrayOutput values.
// You can construct a concrete instance of `TlsSubscriptionManagedDnsChallengeArrayInput` via:
//
//	TlsSubscriptionManagedDnsChallengeArray{ TlsSubscriptionManagedDnsChallengeArgs{...} }
type TlsSubscriptionManagedDnsChallengeArrayInput interface {
	pulumi.Input

	ToTlsSubscriptionManagedDnsChallengeArrayOutput() TlsSubscriptionManagedDnsChallengeArrayOutput
	ToTlsSubscriptionManagedDnsChallengeArrayOutputWithContext(context.Context) TlsSubscriptionManagedDnsChallengeArrayOutput
}

type TlsSubscriptionManagedDnsChallengeArray []TlsSubscriptionManagedDnsChallengeInput

func (TlsSubscriptionManagedDnsChallengeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsSubscriptionManagedDnsChallenge)(nil)).Elem()
}

func (i TlsSubscriptionManagedDnsChallengeArray) ToTlsSubscriptionManagedDnsChallengeArrayOutput() TlsSubscriptionManagedDnsChallengeArrayOutput {
	return i.ToTlsSubscriptionManagedDnsChallengeArrayOutputWithContext(context.Background())
}

func (i TlsSubscriptionManagedDnsChallengeArray) ToTlsSubscriptionManagedDnsChallengeArrayOutputWithContext(ctx context.Context) TlsSubscriptionManagedDnsChallengeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSubscriptionManagedDnsChallengeArrayOutput)
}

type TlsSubscriptionManagedDnsChallengeOutput struct{ *pulumi.OutputState }

func (TlsSubscriptionManagedDnsChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsSubscriptionManagedDnsChallenge)(nil)).Elem()
}

func (o TlsSubscriptionManagedDnsChallengeOutput) ToTlsSubscriptionManagedDnsChallengeOutput() TlsSubscriptionManagedDnsChallengeOutput {
	return o
}

func (o TlsSubscriptionManagedDnsChallengeOutput) ToTlsSubscriptionManagedDnsChallengeOutputWithContext(ctx context.Context) TlsSubscriptionManagedDnsChallengeOutput {
	return o
}

func (o TlsSubscriptionManagedDnsChallengeOutput) RecordName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsSubscriptionManagedDnsChallenge) *string { return v.RecordName }).(pulumi.StringPtrOutput)
}

func (o TlsSubscriptionManagedDnsChallengeOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsSubscriptionManagedDnsChallenge) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

func (o TlsSubscriptionManagedDnsChallengeOutput) RecordValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsSubscriptionManagedDnsChallenge) *string { return v.RecordValue }).(pulumi.StringPtrOutput)
}

type TlsSubscriptionManagedDnsChallengeArrayOutput struct{ *pulumi.OutputState }

func (TlsSubscriptionManagedDnsChallengeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsSubscriptionManagedDnsChallenge)(nil)).Elem()
}

func (o TlsSubscriptionManagedDnsChallengeArrayOutput) ToTlsSubscriptionManagedDnsChallengeArrayOutput() TlsSubscriptionManagedDnsChallengeArrayOutput {
	return o
}

func (o TlsSubscriptionManagedDnsChallengeArrayOutput) ToTlsSubscriptionManagedDnsChallengeArrayOutputWithContext(ctx context.Context) TlsSubscriptionManagedDnsChallengeArrayOutput {
	return o
}

func (o TlsSubscriptionManagedDnsChallengeArrayOutput) Index(i pulumi.IntInput) TlsSubscriptionManagedDnsChallengeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsSubscriptionManagedDnsChallenge {
		return vs[0].([]TlsSubscriptionManagedDnsChallenge)[vs[1].(int)]
	}).(TlsSubscriptionManagedDnsChallengeOutput)
}

type TlsSubscriptionManagedHttpChallenge struct {
	RecordName   *string  `pulumi:"recordName"`
	RecordType   *string  `pulumi:"recordType"`
	RecordValues []string `pulumi:"recordValues"`
}

// TlsSubscriptionManagedHttpChallengeInput is an input type that accepts TlsSubscriptionManagedHttpChallengeArgs and TlsSubscriptionManagedHttpChallengeOutput values.
// You can construct a concrete instance of `TlsSubscriptionManagedHttpChallengeInput` via:
//
//	TlsSubscriptionManagedHttpChallengeArgs{...}
type TlsSubscriptionManagedHttpChallengeInput interface {
	pulumi.Input

	ToTlsSubscriptionManagedHttpChallengeOutput() TlsSubscriptionManagedHttpChallengeOutput
	ToTlsSubscriptionManagedHttpChallengeOutputWithContext(context.Context) TlsSubscriptionManagedHttpChallengeOutput
}

type TlsSubscriptionManagedHttpChallengeArgs struct {
	RecordName   pulumi.StringPtrInput   `pulumi:"recordName"`
	RecordType   pulumi.StringPtrInput   `pulumi:"recordType"`
	RecordValues pulumi.StringArrayInput `pulumi:"recordValues"`
}

func (TlsSubscriptionManagedHttpChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsSubscriptionManagedHttpChallenge)(nil)).Elem()
}

func (i TlsSubscriptionManagedHttpChallengeArgs) ToTlsSubscriptionManagedHttpChallengeOutput() TlsSubscriptionManagedHttpChallengeOutput {
	return i.ToTlsSubscriptionManagedHttpChallengeOutputWithContext(context.Background())
}

func (i TlsSubscriptionManagedHttpChallengeArgs) ToTlsSubscriptionManagedHttpChallengeOutputWithContext(ctx context.Context) TlsSubscriptionManagedHttpChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSubscriptionManagedHttpChallengeOutput)
}

// TlsSubscriptionManagedHttpChallengeArrayInput is an input type that accepts TlsSubscriptionManagedHttpChallengeArray and TlsSubscriptionManagedHttpChallengeArrayOutput values.
// You can construct a concrete instance of `TlsSubscriptionManagedHttpChallengeArrayInput` via:
//
//	TlsSubscriptionManagedHttpChallengeArray{ TlsSubscriptionManagedHttpChallengeArgs{...} }
type TlsSubscriptionManagedHttpChallengeArrayInput interface {
	pulumi.Input

	ToTlsSubscriptionManagedHttpChallengeArrayOutput() TlsSubscriptionManagedHttpChallengeArrayOutput
	ToTlsSubscriptionManagedHttpChallengeArrayOutputWithContext(context.Context) TlsSubscriptionManagedHttpChallengeArrayOutput
}

type TlsSubscriptionManagedHttpChallengeArray []TlsSubscriptionManagedHttpChallengeInput

func (TlsSubscriptionManagedHttpChallengeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsSubscriptionManagedHttpChallenge)(nil)).Elem()
}

func (i TlsSubscriptionManagedHttpChallengeArray) ToTlsSubscriptionManagedHttpChallengeArrayOutput() TlsSubscriptionManagedHttpChallengeArrayOutput {
	return i.ToTlsSubscriptionManagedHttpChallengeArrayOutputWithContext(context.Background())
}

func (i TlsSubscriptionManagedHttpChallengeArray) ToTlsSubscriptionManagedHttpChallengeArrayOutputWithContext(ctx context.Context) TlsSubscriptionManagedHttpChallengeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSubscriptionManagedHttpChallengeArrayOutput)
}

type TlsSubscriptionManagedHttpChallengeOutput struct{ *pulumi.OutputState }

func (TlsSubscriptionManagedHttpChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsSubscriptionManagedHttpChallenge)(nil)).Elem()
}

func (o TlsSubscriptionManagedHttpChallengeOutput) ToTlsSubscriptionManagedHttpChallengeOutput() TlsSubscriptionManagedHttpChallengeOutput {
	return o
}

func (o TlsSubscriptionManagedHttpChallengeOutput) ToTlsSubscriptionManagedHttpChallengeOutputWithContext(ctx context.Context) TlsSubscriptionManagedHttpChallengeOutput {
	return o
}

func (o TlsSubscriptionManagedHttpChallengeOutput) RecordName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsSubscriptionManagedHttpChallenge) *string { return v.RecordName }).(pulumi.StringPtrOutput)
}

func (o TlsSubscriptionManagedHttpChallengeOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TlsSubscriptionManagedHttpChallenge) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

func (o TlsSubscriptionManagedHttpChallengeOutput) RecordValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TlsSubscriptionManagedHttpChallenge) []string { return v.RecordValues }).(pulumi.StringArrayOutput)
}

type TlsSubscriptionManagedHttpChallengeArrayOutput struct{ *pulumi.OutputState }

func (TlsSubscriptionManagedHttpChallengeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsSubscriptionManagedHttpChallenge)(nil)).Elem()
}

func (o TlsSubscriptionManagedHttpChallengeArrayOutput) ToTlsSubscriptionManagedHttpChallengeArrayOutput() TlsSubscriptionManagedHttpChallengeArrayOutput {
	return o
}

func (o TlsSubscriptionManagedHttpChallengeArrayOutput) ToTlsSubscriptionManagedHttpChallengeArrayOutputWithContext(ctx context.Context) TlsSubscriptionManagedHttpChallengeArrayOutput {
	return o
}

func (o TlsSubscriptionManagedHttpChallengeArrayOutput) Index(i pulumi.IntInput) TlsSubscriptionManagedHttpChallengeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsSubscriptionManagedHttpChallenge {
		return vs[0].([]TlsSubscriptionManagedHttpChallenge)[vs[1].(int)]
	}).(TlsSubscriptionManagedHttpChallengeOutput)
}

type GetConfigstoresStore struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetConfigstoresStoreInput is an input type that accepts GetConfigstoresStoreArgs and GetConfigstoresStoreOutput values.
// You can construct a concrete instance of `GetConfigstoresStoreInput` via:
//
//	GetConfigstoresStoreArgs{...}
type GetConfigstoresStoreInput interface {
	pulumi.Input

	ToGetConfigstoresStoreOutput() GetConfigstoresStoreOutput
	ToGetConfigstoresStoreOutputWithContext(context.Context) GetConfigstoresStoreOutput
}

type GetConfigstoresStoreArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetConfigstoresStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigstoresStore)(nil)).Elem()
}

func (i GetConfigstoresStoreArgs) ToGetConfigstoresStoreOutput() GetConfigstoresStoreOutput {
	return i.ToGetConfigstoresStoreOutputWithContext(context.Background())
}

func (i GetConfigstoresStoreArgs) ToGetConfigstoresStoreOutputWithContext(ctx context.Context) GetConfigstoresStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConfigstoresStoreOutput)
}

// GetConfigstoresStoreArrayInput is an input type that accepts GetConfigstoresStoreArray and GetConfigstoresStoreArrayOutput values.
// You can construct a concrete instance of `GetConfigstoresStoreArrayInput` via:
//
//	GetConfigstoresStoreArray{ GetConfigstoresStoreArgs{...} }
type GetConfigstoresStoreArrayInput interface {
	pulumi.Input

	ToGetConfigstoresStoreArrayOutput() GetConfigstoresStoreArrayOutput
	ToGetConfigstoresStoreArrayOutputWithContext(context.Context) GetConfigstoresStoreArrayOutput
}

type GetConfigstoresStoreArray []GetConfigstoresStoreInput

func (GetConfigstoresStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConfigstoresStore)(nil)).Elem()
}

func (i GetConfigstoresStoreArray) ToGetConfigstoresStoreArrayOutput() GetConfigstoresStoreArrayOutput {
	return i.ToGetConfigstoresStoreArrayOutputWithContext(context.Background())
}

func (i GetConfigstoresStoreArray) ToGetConfigstoresStoreArrayOutputWithContext(ctx context.Context) GetConfigstoresStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConfigstoresStoreArrayOutput)
}

type GetConfigstoresStoreOutput struct{ *pulumi.OutputState }

func (GetConfigstoresStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConfigstoresStore)(nil)).Elem()
}

func (o GetConfigstoresStoreOutput) ToGetConfigstoresStoreOutput() GetConfigstoresStoreOutput {
	return o
}

func (o GetConfigstoresStoreOutput) ToGetConfigstoresStoreOutputWithContext(ctx context.Context) GetConfigstoresStoreOutput {
	return o
}

func (o GetConfigstoresStoreOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigstoresStore) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetConfigstoresStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetConfigstoresStore) string { return v.Name }).(pulumi.StringOutput)
}

type GetConfigstoresStoreArrayOutput struct{ *pulumi.OutputState }

func (GetConfigstoresStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConfigstoresStore)(nil)).Elem()
}

func (o GetConfigstoresStoreArrayOutput) ToGetConfigstoresStoreArrayOutput() GetConfigstoresStoreArrayOutput {
	return o
}

func (o GetConfigstoresStoreArrayOutput) ToGetConfigstoresStoreArrayOutputWithContext(ctx context.Context) GetConfigstoresStoreArrayOutput {
	return o
}

func (o GetConfigstoresStoreArrayOutput) Index(i pulumi.IntInput) GetConfigstoresStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetConfigstoresStore {
		return vs[0].([]GetConfigstoresStore)[vs[1].(int)]
	}).(GetConfigstoresStoreOutput)
}

type GetDatacentersPop struct {
	Code   string `pulumi:"code"`
	Group  string `pulumi:"group"`
	Name   string `pulumi:"name"`
	Shield string `pulumi:"shield"`
}

// GetDatacentersPopInput is an input type that accepts GetDatacentersPopArgs and GetDatacentersPopOutput values.
// You can construct a concrete instance of `GetDatacentersPopInput` via:
//
//	GetDatacentersPopArgs{...}
type GetDatacentersPopInput interface {
	pulumi.Input

	ToGetDatacentersPopOutput() GetDatacentersPopOutput
	ToGetDatacentersPopOutputWithContext(context.Context) GetDatacentersPopOutput
}

type GetDatacentersPopArgs struct {
	Code   pulumi.StringInput `pulumi:"code"`
	Group  pulumi.StringInput `pulumi:"group"`
	Name   pulumi.StringInput `pulumi:"name"`
	Shield pulumi.StringInput `pulumi:"shield"`
}

func (GetDatacentersPopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatacentersPop)(nil)).Elem()
}

func (i GetDatacentersPopArgs) ToGetDatacentersPopOutput() GetDatacentersPopOutput {
	return i.ToGetDatacentersPopOutputWithContext(context.Background())
}

func (i GetDatacentersPopArgs) ToGetDatacentersPopOutputWithContext(ctx context.Context) GetDatacentersPopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatacentersPopOutput)
}

// GetDatacentersPopArrayInput is an input type that accepts GetDatacentersPopArray and GetDatacentersPopArrayOutput values.
// You can construct a concrete instance of `GetDatacentersPopArrayInput` via:
//
//	GetDatacentersPopArray{ GetDatacentersPopArgs{...} }
type GetDatacentersPopArrayInput interface {
	pulumi.Input

	ToGetDatacentersPopArrayOutput() GetDatacentersPopArrayOutput
	ToGetDatacentersPopArrayOutputWithContext(context.Context) GetDatacentersPopArrayOutput
}

type GetDatacentersPopArray []GetDatacentersPopInput

func (GetDatacentersPopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatacentersPop)(nil)).Elem()
}

func (i GetDatacentersPopArray) ToGetDatacentersPopArrayOutput() GetDatacentersPopArrayOutput {
	return i.ToGetDatacentersPopArrayOutputWithContext(context.Background())
}

func (i GetDatacentersPopArray) ToGetDatacentersPopArrayOutputWithContext(ctx context.Context) GetDatacentersPopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatacentersPopArrayOutput)
}

type GetDatacentersPopOutput struct{ *pulumi.OutputState }

func (GetDatacentersPopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatacentersPop)(nil)).Elem()
}

func (o GetDatacentersPopOutput) ToGetDatacentersPopOutput() GetDatacentersPopOutput {
	return o
}

func (o GetDatacentersPopOutput) ToGetDatacentersPopOutputWithContext(ctx context.Context) GetDatacentersPopOutput {
	return o
}

func (o GetDatacentersPopOutput) Code() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatacentersPop) string { return v.Code }).(pulumi.StringOutput)
}

func (o GetDatacentersPopOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatacentersPop) string { return v.Group }).(pulumi.StringOutput)
}

func (o GetDatacentersPopOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatacentersPop) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDatacentersPopOutput) Shield() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatacentersPop) string { return v.Shield }).(pulumi.StringOutput)
}

type GetDatacentersPopArrayOutput struct{ *pulumi.OutputState }

func (GetDatacentersPopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatacentersPop)(nil)).Elem()
}

func (o GetDatacentersPopArrayOutput) ToGetDatacentersPopArrayOutput() GetDatacentersPopArrayOutput {
	return o
}

func (o GetDatacentersPopArrayOutput) ToGetDatacentersPopArrayOutputWithContext(ctx context.Context) GetDatacentersPopArrayOutput {
	return o
}

func (o GetDatacentersPopArrayOutput) Index(i pulumi.IntInput) GetDatacentersPopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatacentersPop {
		return vs[0].([]GetDatacentersPop)[vs[1].(int)]
	}).(GetDatacentersPopOutput)
}

type GetDictionariesDictionary struct {
	Id        string `pulumi:"id"`
	Name      string `pulumi:"name"`
	WriteOnly bool   `pulumi:"writeOnly"`
}

// GetDictionariesDictionaryInput is an input type that accepts GetDictionariesDictionaryArgs and GetDictionariesDictionaryOutput values.
// You can construct a concrete instance of `GetDictionariesDictionaryInput` via:
//
//	GetDictionariesDictionaryArgs{...}
type GetDictionariesDictionaryInput interface {
	pulumi.Input

	ToGetDictionariesDictionaryOutput() GetDictionariesDictionaryOutput
	ToGetDictionariesDictionaryOutputWithContext(context.Context) GetDictionariesDictionaryOutput
}

type GetDictionariesDictionaryArgs struct {
	Id        pulumi.StringInput `pulumi:"id"`
	Name      pulumi.StringInput `pulumi:"name"`
	WriteOnly pulumi.BoolInput   `pulumi:"writeOnly"`
}

func (GetDictionariesDictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDictionariesDictionary)(nil)).Elem()
}

func (i GetDictionariesDictionaryArgs) ToGetDictionariesDictionaryOutput() GetDictionariesDictionaryOutput {
	return i.ToGetDictionariesDictionaryOutputWithContext(context.Background())
}

func (i GetDictionariesDictionaryArgs) ToGetDictionariesDictionaryOutputWithContext(ctx context.Context) GetDictionariesDictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDictionariesDictionaryOutput)
}

// GetDictionariesDictionaryArrayInput is an input type that accepts GetDictionariesDictionaryArray and GetDictionariesDictionaryArrayOutput values.
// You can construct a concrete instance of `GetDictionariesDictionaryArrayInput` via:
//
//	GetDictionariesDictionaryArray{ GetDictionariesDictionaryArgs{...} }
type GetDictionariesDictionaryArrayInput interface {
	pulumi.Input

	ToGetDictionariesDictionaryArrayOutput() GetDictionariesDictionaryArrayOutput
	ToGetDictionariesDictionaryArrayOutputWithContext(context.Context) GetDictionariesDictionaryArrayOutput
}

type GetDictionariesDictionaryArray []GetDictionariesDictionaryInput

func (GetDictionariesDictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDictionariesDictionary)(nil)).Elem()
}

func (i GetDictionariesDictionaryArray) ToGetDictionariesDictionaryArrayOutput() GetDictionariesDictionaryArrayOutput {
	return i.ToGetDictionariesDictionaryArrayOutputWithContext(context.Background())
}

func (i GetDictionariesDictionaryArray) ToGetDictionariesDictionaryArrayOutputWithContext(ctx context.Context) GetDictionariesDictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDictionariesDictionaryArrayOutput)
}

type GetDictionariesDictionaryOutput struct{ *pulumi.OutputState }

func (GetDictionariesDictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDictionariesDictionary)(nil)).Elem()
}

func (o GetDictionariesDictionaryOutput) ToGetDictionariesDictionaryOutput() GetDictionariesDictionaryOutput {
	return o
}

func (o GetDictionariesDictionaryOutput) ToGetDictionariesDictionaryOutputWithContext(ctx context.Context) GetDictionariesDictionaryOutput {
	return o
}

func (o GetDictionariesDictionaryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDictionariesDictionary) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetDictionariesDictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDictionariesDictionary) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetDictionariesDictionaryOutput) WriteOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetDictionariesDictionary) bool { return v.WriteOnly }).(pulumi.BoolOutput)
}

type GetDictionariesDictionaryArrayOutput struct{ *pulumi.OutputState }

func (GetDictionariesDictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDictionariesDictionary)(nil)).Elem()
}

func (o GetDictionariesDictionaryArrayOutput) ToGetDictionariesDictionaryArrayOutput() GetDictionariesDictionaryArrayOutput {
	return o
}

func (o GetDictionariesDictionaryArrayOutput) ToGetDictionariesDictionaryArrayOutputWithContext(ctx context.Context) GetDictionariesDictionaryArrayOutput {
	return o
}

func (o GetDictionariesDictionaryArrayOutput) Index(i pulumi.IntInput) GetDictionariesDictionaryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDictionariesDictionary {
		return vs[0].([]GetDictionariesDictionary)[vs[1].(int)]
	}).(GetDictionariesDictionaryOutput)
}

type GetKvstoresStore struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetKvstoresStoreInput is an input type that accepts GetKvstoresStoreArgs and GetKvstoresStoreOutput values.
// You can construct a concrete instance of `GetKvstoresStoreInput` via:
//
//	GetKvstoresStoreArgs{...}
type GetKvstoresStoreInput interface {
	pulumi.Input

	ToGetKvstoresStoreOutput() GetKvstoresStoreOutput
	ToGetKvstoresStoreOutputWithContext(context.Context) GetKvstoresStoreOutput
}

type GetKvstoresStoreArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetKvstoresStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKvstoresStore)(nil)).Elem()
}

func (i GetKvstoresStoreArgs) ToGetKvstoresStoreOutput() GetKvstoresStoreOutput {
	return i.ToGetKvstoresStoreOutputWithContext(context.Background())
}

func (i GetKvstoresStoreArgs) ToGetKvstoresStoreOutputWithContext(ctx context.Context) GetKvstoresStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKvstoresStoreOutput)
}

// GetKvstoresStoreArrayInput is an input type that accepts GetKvstoresStoreArray and GetKvstoresStoreArrayOutput values.
// You can construct a concrete instance of `GetKvstoresStoreArrayInput` via:
//
//	GetKvstoresStoreArray{ GetKvstoresStoreArgs{...} }
type GetKvstoresStoreArrayInput interface {
	pulumi.Input

	ToGetKvstoresStoreArrayOutput() GetKvstoresStoreArrayOutput
	ToGetKvstoresStoreArrayOutputWithContext(context.Context) GetKvstoresStoreArrayOutput
}

type GetKvstoresStoreArray []GetKvstoresStoreInput

func (GetKvstoresStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKvstoresStore)(nil)).Elem()
}

func (i GetKvstoresStoreArray) ToGetKvstoresStoreArrayOutput() GetKvstoresStoreArrayOutput {
	return i.ToGetKvstoresStoreArrayOutputWithContext(context.Background())
}

func (i GetKvstoresStoreArray) ToGetKvstoresStoreArrayOutputWithContext(ctx context.Context) GetKvstoresStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKvstoresStoreArrayOutput)
}

type GetKvstoresStoreOutput struct{ *pulumi.OutputState }

func (GetKvstoresStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKvstoresStore)(nil)).Elem()
}

func (o GetKvstoresStoreOutput) ToGetKvstoresStoreOutput() GetKvstoresStoreOutput {
	return o
}

func (o GetKvstoresStoreOutput) ToGetKvstoresStoreOutputWithContext(ctx context.Context) GetKvstoresStoreOutput {
	return o
}

func (o GetKvstoresStoreOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKvstoresStore) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetKvstoresStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetKvstoresStore) string { return v.Name }).(pulumi.StringOutput)
}

type GetKvstoresStoreArrayOutput struct{ *pulumi.OutputState }

func (GetKvstoresStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKvstoresStore)(nil)).Elem()
}

func (o GetKvstoresStoreArrayOutput) ToGetKvstoresStoreArrayOutput() GetKvstoresStoreArrayOutput {
	return o
}

func (o GetKvstoresStoreArrayOutput) ToGetKvstoresStoreArrayOutputWithContext(ctx context.Context) GetKvstoresStoreArrayOutput {
	return o
}

func (o GetKvstoresStoreArrayOutput) Index(i pulumi.IntInput) GetKvstoresStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKvstoresStore {
		return vs[0].([]GetKvstoresStore)[vs[1].(int)]
	}).(GetKvstoresStoreOutput)
}

type GetSecretstoresStore struct {
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
}

// GetSecretstoresStoreInput is an input type that accepts GetSecretstoresStoreArgs and GetSecretstoresStoreOutput values.
// You can construct a concrete instance of `GetSecretstoresStoreInput` via:
//
//	GetSecretstoresStoreArgs{...}
type GetSecretstoresStoreInput interface {
	pulumi.Input

	ToGetSecretstoresStoreOutput() GetSecretstoresStoreOutput
	ToGetSecretstoresStoreOutputWithContext(context.Context) GetSecretstoresStoreOutput
}

type GetSecretstoresStoreArgs struct {
	Id   pulumi.StringInput `pulumi:"id"`
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetSecretstoresStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretstoresStore)(nil)).Elem()
}

func (i GetSecretstoresStoreArgs) ToGetSecretstoresStoreOutput() GetSecretstoresStoreOutput {
	return i.ToGetSecretstoresStoreOutputWithContext(context.Background())
}

func (i GetSecretstoresStoreArgs) ToGetSecretstoresStoreOutputWithContext(ctx context.Context) GetSecretstoresStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretstoresStoreOutput)
}

// GetSecretstoresStoreArrayInput is an input type that accepts GetSecretstoresStoreArray and GetSecretstoresStoreArrayOutput values.
// You can construct a concrete instance of `GetSecretstoresStoreArrayInput` via:
//
//	GetSecretstoresStoreArray{ GetSecretstoresStoreArgs{...} }
type GetSecretstoresStoreArrayInput interface {
	pulumi.Input

	ToGetSecretstoresStoreArrayOutput() GetSecretstoresStoreArrayOutput
	ToGetSecretstoresStoreArrayOutputWithContext(context.Context) GetSecretstoresStoreArrayOutput
}

type GetSecretstoresStoreArray []GetSecretstoresStoreInput

func (GetSecretstoresStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretstoresStore)(nil)).Elem()
}

func (i GetSecretstoresStoreArray) ToGetSecretstoresStoreArrayOutput() GetSecretstoresStoreArrayOutput {
	return i.ToGetSecretstoresStoreArrayOutputWithContext(context.Background())
}

func (i GetSecretstoresStoreArray) ToGetSecretstoresStoreArrayOutputWithContext(ctx context.Context) GetSecretstoresStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretstoresStoreArrayOutput)
}

type GetSecretstoresStoreOutput struct{ *pulumi.OutputState }

func (GetSecretstoresStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretstoresStore)(nil)).Elem()
}

func (o GetSecretstoresStoreOutput) ToGetSecretstoresStoreOutput() GetSecretstoresStoreOutput {
	return o
}

func (o GetSecretstoresStoreOutput) ToGetSecretstoresStoreOutputWithContext(ctx context.Context) GetSecretstoresStoreOutput {
	return o
}

func (o GetSecretstoresStoreOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretstoresStore) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSecretstoresStoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretstoresStore) string { return v.Name }).(pulumi.StringOutput)
}

type GetSecretstoresStoreArrayOutput struct{ *pulumi.OutputState }

func (GetSecretstoresStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretstoresStore)(nil)).Elem()
}

func (o GetSecretstoresStoreArrayOutput) ToGetSecretstoresStoreArrayOutput() GetSecretstoresStoreArrayOutput {
	return o
}

func (o GetSecretstoresStoreArrayOutput) ToGetSecretstoresStoreArrayOutputWithContext(ctx context.Context) GetSecretstoresStoreArrayOutput {
	return o
}

func (o GetSecretstoresStoreArrayOutput) Index(i pulumi.IntInput) GetSecretstoresStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretstoresStore {
		return vs[0].([]GetSecretstoresStore)[vs[1].(int)]
	}).(GetSecretstoresStoreOutput)
}

type GetServicesDetail struct {
	Comment    string `pulumi:"comment"`
	CreatedAt  string `pulumi:"createdAt"`
	CustomerId string `pulumi:"customerId"`
	Id         string `pulumi:"id"`
	Name       string `pulumi:"name"`
	Type       string `pulumi:"type"`
	UpdatedAt  string `pulumi:"updatedAt"`
	Version    int    `pulumi:"version"`
}

// GetServicesDetailInput is an input type that accepts GetServicesDetailArgs and GetServicesDetailOutput values.
// You can construct a concrete instance of `GetServicesDetailInput` via:
//
//	GetServicesDetailArgs{...}
type GetServicesDetailInput interface {
	pulumi.Input

	ToGetServicesDetailOutput() GetServicesDetailOutput
	ToGetServicesDetailOutputWithContext(context.Context) GetServicesDetailOutput
}

type GetServicesDetailArgs struct {
	Comment    pulumi.StringInput `pulumi:"comment"`
	CreatedAt  pulumi.StringInput `pulumi:"createdAt"`
	CustomerId pulumi.StringInput `pulumi:"customerId"`
	Id         pulumi.StringInput `pulumi:"id"`
	Name       pulumi.StringInput `pulumi:"name"`
	Type       pulumi.StringInput `pulumi:"type"`
	UpdatedAt  pulumi.StringInput `pulumi:"updatedAt"`
	Version    pulumi.IntInput    `pulumi:"version"`
}

func (GetServicesDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicesDetail)(nil)).Elem()
}

func (i GetServicesDetailArgs) ToGetServicesDetailOutput() GetServicesDetailOutput {
	return i.ToGetServicesDetailOutputWithContext(context.Background())
}

func (i GetServicesDetailArgs) ToGetServicesDetailOutputWithContext(ctx context.Context) GetServicesDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicesDetailOutput)
}

// GetServicesDetailArrayInput is an input type that accepts GetServicesDetailArray and GetServicesDetailArrayOutput values.
// You can construct a concrete instance of `GetServicesDetailArrayInput` via:
//
//	GetServicesDetailArray{ GetServicesDetailArgs{...} }
type GetServicesDetailArrayInput interface {
	pulumi.Input

	ToGetServicesDetailArrayOutput() GetServicesDetailArrayOutput
	ToGetServicesDetailArrayOutputWithContext(context.Context) GetServicesDetailArrayOutput
}

type GetServicesDetailArray []GetServicesDetailInput

func (GetServicesDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicesDetail)(nil)).Elem()
}

func (i GetServicesDetailArray) ToGetServicesDetailArrayOutput() GetServicesDetailArrayOutput {
	return i.ToGetServicesDetailArrayOutputWithContext(context.Background())
}

func (i GetServicesDetailArray) ToGetServicesDetailArrayOutputWithContext(ctx context.Context) GetServicesDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServicesDetailArrayOutput)
}

type GetServicesDetailOutput struct{ *pulumi.OutputState }

func (GetServicesDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServicesDetail)(nil)).Elem()
}

func (o GetServicesDetailOutput) ToGetServicesDetailOutput() GetServicesDetailOutput {
	return o
}

func (o GetServicesDetailOutput) ToGetServicesDetailOutputWithContext(ctx context.Context) GetServicesDetailOutput {
	return o
}

func (o GetServicesDetailOutput) Comment() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesDetail) string { return v.Comment }).(pulumi.StringOutput)
}

func (o GetServicesDetailOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesDetail) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o GetServicesDetailOutput) CustomerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesDetail) string { return v.CustomerId }).(pulumi.StringOutput)
}

func (o GetServicesDetailOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesDetail) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetServicesDetailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesDetail) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetServicesDetailOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesDetail) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetServicesDetailOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetServicesDetail) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o GetServicesDetailOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetServicesDetail) int { return v.Version }).(pulumi.IntOutput)
}

type GetServicesDetailArrayOutput struct{ *pulumi.OutputState }

func (GetServicesDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServicesDetail)(nil)).Elem()
}

func (o GetServicesDetailArrayOutput) ToGetServicesDetailArrayOutput() GetServicesDetailArrayOutput {
	return o
}

func (o GetServicesDetailArrayOutput) ToGetServicesDetailArrayOutputWithContext(ctx context.Context) GetServicesDetailArrayOutput {
	return o
}

func (o GetServicesDetailArrayOutput) Index(i pulumi.IntInput) GetServicesDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServicesDetail {
		return vs[0].([]GetServicesDetail)[vs[1].(int)]
	}).(GetServicesDetailOutput)
}

type GetTlsConfigurationDnsRecord struct {
	RecordType  string `pulumi:"recordType"`
	RecordValue string `pulumi:"recordValue"`
	Region      string `pulumi:"region"`
}

// GetTlsConfigurationDnsRecordInput is an input type that accepts GetTlsConfigurationDnsRecordArgs and GetTlsConfigurationDnsRecordOutput values.
// You can construct a concrete instance of `GetTlsConfigurationDnsRecordInput` via:
//
//	GetTlsConfigurationDnsRecordArgs{...}
type GetTlsConfigurationDnsRecordInput interface {
	pulumi.Input

	ToGetTlsConfigurationDnsRecordOutput() GetTlsConfigurationDnsRecordOutput
	ToGetTlsConfigurationDnsRecordOutputWithContext(context.Context) GetTlsConfigurationDnsRecordOutput
}

type GetTlsConfigurationDnsRecordArgs struct {
	RecordType  pulumi.StringInput `pulumi:"recordType"`
	RecordValue pulumi.StringInput `pulumi:"recordValue"`
	Region      pulumi.StringInput `pulumi:"region"`
}

func (GetTlsConfigurationDnsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTlsConfigurationDnsRecord)(nil)).Elem()
}

func (i GetTlsConfigurationDnsRecordArgs) ToGetTlsConfigurationDnsRecordOutput() GetTlsConfigurationDnsRecordOutput {
	return i.ToGetTlsConfigurationDnsRecordOutputWithContext(context.Background())
}

func (i GetTlsConfigurationDnsRecordArgs) ToGetTlsConfigurationDnsRecordOutputWithContext(ctx context.Context) GetTlsConfigurationDnsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTlsConfigurationDnsRecordOutput)
}

// GetTlsConfigurationDnsRecordArrayInput is an input type that accepts GetTlsConfigurationDnsRecordArray and GetTlsConfigurationDnsRecordArrayOutput values.
// You can construct a concrete instance of `GetTlsConfigurationDnsRecordArrayInput` via:
//
//	GetTlsConfigurationDnsRecordArray{ GetTlsConfigurationDnsRecordArgs{...} }
type GetTlsConfigurationDnsRecordArrayInput interface {
	pulumi.Input

	ToGetTlsConfigurationDnsRecordArrayOutput() GetTlsConfigurationDnsRecordArrayOutput
	ToGetTlsConfigurationDnsRecordArrayOutputWithContext(context.Context) GetTlsConfigurationDnsRecordArrayOutput
}

type GetTlsConfigurationDnsRecordArray []GetTlsConfigurationDnsRecordInput

func (GetTlsConfigurationDnsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTlsConfigurationDnsRecord)(nil)).Elem()
}

func (i GetTlsConfigurationDnsRecordArray) ToGetTlsConfigurationDnsRecordArrayOutput() GetTlsConfigurationDnsRecordArrayOutput {
	return i.ToGetTlsConfigurationDnsRecordArrayOutputWithContext(context.Background())
}

func (i GetTlsConfigurationDnsRecordArray) ToGetTlsConfigurationDnsRecordArrayOutputWithContext(ctx context.Context) GetTlsConfigurationDnsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTlsConfigurationDnsRecordArrayOutput)
}

type GetTlsConfigurationDnsRecordOutput struct{ *pulumi.OutputState }

func (GetTlsConfigurationDnsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTlsConfigurationDnsRecord)(nil)).Elem()
}

func (o GetTlsConfigurationDnsRecordOutput) ToGetTlsConfigurationDnsRecordOutput() GetTlsConfigurationDnsRecordOutput {
	return o
}

func (o GetTlsConfigurationDnsRecordOutput) ToGetTlsConfigurationDnsRecordOutputWithContext(ctx context.Context) GetTlsConfigurationDnsRecordOutput {
	return o
}

func (o GetTlsConfigurationDnsRecordOutput) RecordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationDnsRecord) string { return v.RecordType }).(pulumi.StringOutput)
}

func (o GetTlsConfigurationDnsRecordOutput) RecordValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationDnsRecord) string { return v.RecordValue }).(pulumi.StringOutput)
}

func (o GetTlsConfigurationDnsRecordOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationDnsRecord) string { return v.Region }).(pulumi.StringOutput)
}

type GetTlsConfigurationDnsRecordArrayOutput struct{ *pulumi.OutputState }

func (GetTlsConfigurationDnsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTlsConfigurationDnsRecord)(nil)).Elem()
}

func (o GetTlsConfigurationDnsRecordArrayOutput) ToGetTlsConfigurationDnsRecordArrayOutput() GetTlsConfigurationDnsRecordArrayOutput {
	return o
}

func (o GetTlsConfigurationDnsRecordArrayOutput) ToGetTlsConfigurationDnsRecordArrayOutputWithContext(ctx context.Context) GetTlsConfigurationDnsRecordArrayOutput {
	return o
}

func (o GetTlsConfigurationDnsRecordArrayOutput) Index(i pulumi.IntInput) GetTlsConfigurationDnsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTlsConfigurationDnsRecord {
		return vs[0].([]GetTlsConfigurationDnsRecord)[vs[1].(int)]
	}).(GetTlsConfigurationDnsRecordOutput)
}

type GetWafRulesRule struct {
	LatestRevisionNumber int    `pulumi:"latestRevisionNumber"`
	ModsecRuleId         int    `pulumi:"modsecRuleId"`
	Type                 string `pulumi:"type"`
}

// GetWafRulesRuleInput is an input type that accepts GetWafRulesRuleArgs and GetWafRulesRuleOutput values.
// You can construct a concrete instance of `GetWafRulesRuleInput` via:
//
//	GetWafRulesRuleArgs{...}
type GetWafRulesRuleInput interface {
	pulumi.Input

	ToGetWafRulesRuleOutput() GetWafRulesRuleOutput
	ToGetWafRulesRuleOutputWithContext(context.Context) GetWafRulesRuleOutput
}

type GetWafRulesRuleArgs struct {
	LatestRevisionNumber pulumi.IntInput    `pulumi:"latestRevisionNumber"`
	ModsecRuleId         pulumi.IntInput    `pulumi:"modsecRuleId"`
	Type                 pulumi.StringInput `pulumi:"type"`
}

func (GetWafRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWafRulesRule)(nil)).Elem()
}

func (i GetWafRulesRuleArgs) ToGetWafRulesRuleOutput() GetWafRulesRuleOutput {
	return i.ToGetWafRulesRuleOutputWithContext(context.Background())
}

func (i GetWafRulesRuleArgs) ToGetWafRulesRuleOutputWithContext(ctx context.Context) GetWafRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWafRulesRuleOutput)
}

// GetWafRulesRuleArrayInput is an input type that accepts GetWafRulesRuleArray and GetWafRulesRuleArrayOutput values.
// You can construct a concrete instance of `GetWafRulesRuleArrayInput` via:
//
//	GetWafRulesRuleArray{ GetWafRulesRuleArgs{...} }
type GetWafRulesRuleArrayInput interface {
	pulumi.Input

	ToGetWafRulesRuleArrayOutput() GetWafRulesRuleArrayOutput
	ToGetWafRulesRuleArrayOutputWithContext(context.Context) GetWafRulesRuleArrayOutput
}

type GetWafRulesRuleArray []GetWafRulesRuleInput

func (GetWafRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWafRulesRule)(nil)).Elem()
}

func (i GetWafRulesRuleArray) ToGetWafRulesRuleArrayOutput() GetWafRulesRuleArrayOutput {
	return i.ToGetWafRulesRuleArrayOutputWithContext(context.Background())
}

func (i GetWafRulesRuleArray) ToGetWafRulesRuleArrayOutputWithContext(ctx context.Context) GetWafRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWafRulesRuleArrayOutput)
}

type GetWafRulesRuleOutput struct{ *pulumi.OutputState }

func (GetWafRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWafRulesRule)(nil)).Elem()
}

func (o GetWafRulesRuleOutput) ToGetWafRulesRuleOutput() GetWafRulesRuleOutput {
	return o
}

func (o GetWafRulesRuleOutput) ToGetWafRulesRuleOutputWithContext(ctx context.Context) GetWafRulesRuleOutput {
	return o
}

func (o GetWafRulesRuleOutput) LatestRevisionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetWafRulesRule) int { return v.LatestRevisionNumber }).(pulumi.IntOutput)
}

func (o GetWafRulesRuleOutput) ModsecRuleId() pulumi.IntOutput {
	return o.ApplyT(func(v GetWafRulesRule) int { return v.ModsecRuleId }).(pulumi.IntOutput)
}

func (o GetWafRulesRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetWafRulesRule) string { return v.Type }).(pulumi.StringOutput)
}

type GetWafRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (GetWafRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWafRulesRule)(nil)).Elem()
}

func (o GetWafRulesRuleArrayOutput) ToGetWafRulesRuleArrayOutput() GetWafRulesRuleArrayOutput {
	return o
}

func (o GetWafRulesRuleArrayOutput) ToGetWafRulesRuleArrayOutputWithContext(ctx context.Context) GetWafRulesRuleArrayOutput {
	return o
}

func (o GetWafRulesRuleArrayOutput) Index(i pulumi.IntInput) GetWafRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWafRulesRule {
		return vs[0].([]GetWafRulesRule)[vs[1].(int)]
	}).(GetWafRulesRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceACLEntriesEntryInput)(nil)).Elem(), ServiceACLEntriesEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceACLEntriesEntryArrayInput)(nil)).Elem(), ServiceACLEntriesEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeBackendInput)(nil)).Elem(), ServiceComputeBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeBackendArrayInput)(nil)).Elem(), ServiceComputeBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeDictionaryInput)(nil)).Elem(), ServiceComputeDictionaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeDictionaryArrayInput)(nil)).Elem(), ServiceComputeDictionaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeDomainInput)(nil)).Elem(), ServiceComputeDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeDomainArrayInput)(nil)).Elem(), ServiceComputeDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingBigqueryInput)(nil)).Elem(), ServiceComputeLoggingBigqueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingBigqueryArrayInput)(nil)).Elem(), ServiceComputeLoggingBigqueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingBlobstorageInput)(nil)).Elem(), ServiceComputeLoggingBlobstorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingBlobstorageArrayInput)(nil)).Elem(), ServiceComputeLoggingBlobstorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingCloudfileInput)(nil)).Elem(), ServiceComputeLoggingCloudfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingCloudfileArrayInput)(nil)).Elem(), ServiceComputeLoggingCloudfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingDatadogInput)(nil)).Elem(), ServiceComputeLoggingDatadogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingDatadogArrayInput)(nil)).Elem(), ServiceComputeLoggingDatadogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingDigitaloceanInput)(nil)).Elem(), ServiceComputeLoggingDigitaloceanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingDigitaloceanArrayInput)(nil)).Elem(), ServiceComputeLoggingDigitaloceanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingElasticsearchInput)(nil)).Elem(), ServiceComputeLoggingElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingElasticsearchArrayInput)(nil)).Elem(), ServiceComputeLoggingElasticsearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingFtpInput)(nil)).Elem(), ServiceComputeLoggingFtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingFtpArrayInput)(nil)).Elem(), ServiceComputeLoggingFtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingGcInput)(nil)).Elem(), ServiceComputeLoggingGcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingGcArrayInput)(nil)).Elem(), ServiceComputeLoggingGcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingGooglepubsubInput)(nil)).Elem(), ServiceComputeLoggingGooglepubsubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingGooglepubsubArrayInput)(nil)).Elem(), ServiceComputeLoggingGooglepubsubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingHerokuInput)(nil)).Elem(), ServiceComputeLoggingHerokuArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingHerokuArrayInput)(nil)).Elem(), ServiceComputeLoggingHerokuArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingHoneycombInput)(nil)).Elem(), ServiceComputeLoggingHoneycombArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingHoneycombArrayInput)(nil)).Elem(), ServiceComputeLoggingHoneycombArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingHttpInput)(nil)).Elem(), ServiceComputeLoggingHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingHttpArrayInput)(nil)).Elem(), ServiceComputeLoggingHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingKafkaInput)(nil)).Elem(), ServiceComputeLoggingKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingKafkaArrayInput)(nil)).Elem(), ServiceComputeLoggingKafkaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingKineseInput)(nil)).Elem(), ServiceComputeLoggingKineseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingKineseArrayInput)(nil)).Elem(), ServiceComputeLoggingKineseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingLogentryInput)(nil)).Elem(), ServiceComputeLoggingLogentryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingLogentryArrayInput)(nil)).Elem(), ServiceComputeLoggingLogentryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingLogglyInput)(nil)).Elem(), ServiceComputeLoggingLogglyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingLogglyArrayInput)(nil)).Elem(), ServiceComputeLoggingLogglyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingLogshuttleInput)(nil)).Elem(), ServiceComputeLoggingLogshuttleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingLogshuttleArrayInput)(nil)).Elem(), ServiceComputeLoggingLogshuttleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingNewrelicInput)(nil)).Elem(), ServiceComputeLoggingNewrelicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingNewrelicArrayInput)(nil)).Elem(), ServiceComputeLoggingNewrelicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingOpenstackInput)(nil)).Elem(), ServiceComputeLoggingOpenstackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingOpenstackArrayInput)(nil)).Elem(), ServiceComputeLoggingOpenstackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingPapertrailInput)(nil)).Elem(), ServiceComputeLoggingPapertrailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingPapertrailArrayInput)(nil)).Elem(), ServiceComputeLoggingPapertrailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingS3Input)(nil)).Elem(), ServiceComputeLoggingS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingS3ArrayInput)(nil)).Elem(), ServiceComputeLoggingS3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingScalyrInput)(nil)).Elem(), ServiceComputeLoggingScalyrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingScalyrArrayInput)(nil)).Elem(), ServiceComputeLoggingScalyrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingSftpInput)(nil)).Elem(), ServiceComputeLoggingSftpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingSftpArrayInput)(nil)).Elem(), ServiceComputeLoggingSftpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingSplunkInput)(nil)).Elem(), ServiceComputeLoggingSplunkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingSplunkArrayInput)(nil)).Elem(), ServiceComputeLoggingSplunkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingSumologicInput)(nil)).Elem(), ServiceComputeLoggingSumologicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingSumologicArrayInput)(nil)).Elem(), ServiceComputeLoggingSumologicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingSyslogInput)(nil)).Elem(), ServiceComputeLoggingSyslogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeLoggingSyslogArrayInput)(nil)).Elem(), ServiceComputeLoggingSyslogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputePackageInput)(nil)).Elem(), ServiceComputePackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputePackagePtrInput)(nil)).Elem(), ServiceComputePackageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeProductEnablementInput)(nil)).Elem(), ServiceComputeProductEnablementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeProductEnablementPtrInput)(nil)).Elem(), ServiceComputeProductEnablementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeResourceLinkInput)(nil)).Elem(), ServiceComputeResourceLinkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeResourceLinkArrayInput)(nil)).Elem(), ServiceComputeResourceLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclAclInput)(nil)).Elem(), ServiceVclAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclAclArrayInput)(nil)).Elem(), ServiceVclAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclBackendInput)(nil)).Elem(), ServiceVclBackendArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclBackendArrayInput)(nil)).Elem(), ServiceVclBackendArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclCacheSettingInput)(nil)).Elem(), ServiceVclCacheSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclCacheSettingArrayInput)(nil)).Elem(), ServiceVclCacheSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclConditionInput)(nil)).Elem(), ServiceVclConditionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclConditionArrayInput)(nil)).Elem(), ServiceVclConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclDictionaryInput)(nil)).Elem(), ServiceVclDictionaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclDictionaryArrayInput)(nil)).Elem(), ServiceVclDictionaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclDirectorInput)(nil)).Elem(), ServiceVclDirectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclDirectorArrayInput)(nil)).Elem(), ServiceVclDirectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclDomainInput)(nil)).Elem(), ServiceVclDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclDomainArrayInput)(nil)).Elem(), ServiceVclDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclDynamicsnippetInput)(nil)).Elem(), ServiceVclDynamicsnippetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclDynamicsnippetArrayInput)(nil)).Elem(), ServiceVclDynamicsnippetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclGzipInput)(nil)).Elem(), ServiceVclGzipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclGzipArrayInput)(nil)).Elem(), ServiceVclGzipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclHeaderInput)(nil)).Elem(), ServiceVclHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclHeaderArrayInput)(nil)).Elem(), ServiceVclHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclHealthcheckInput)(nil)).Elem(), ServiceVclHealthcheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclHealthcheckArrayInput)(nil)).Elem(), ServiceVclHealthcheckArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingBigqueryInput)(nil)).Elem(), ServiceVclLoggingBigqueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingBigqueryArrayInput)(nil)).Elem(), ServiceVclLoggingBigqueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingBlobstorageInput)(nil)).Elem(), ServiceVclLoggingBlobstorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingBlobstorageArrayInput)(nil)).Elem(), ServiceVclLoggingBlobstorageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingCloudfileInput)(nil)).Elem(), ServiceVclLoggingCloudfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingCloudfileArrayInput)(nil)).Elem(), ServiceVclLoggingCloudfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingDatadogInput)(nil)).Elem(), ServiceVclLoggingDatadogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingDatadogArrayInput)(nil)).Elem(), ServiceVclLoggingDatadogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingDigitaloceanInput)(nil)).Elem(), ServiceVclLoggingDigitaloceanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingDigitaloceanArrayInput)(nil)).Elem(), ServiceVclLoggingDigitaloceanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingElasticsearchInput)(nil)).Elem(), ServiceVclLoggingElasticsearchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingElasticsearchArrayInput)(nil)).Elem(), ServiceVclLoggingElasticsearchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingFtpInput)(nil)).Elem(), ServiceVclLoggingFtpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingFtpArrayInput)(nil)).Elem(), ServiceVclLoggingFtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingGcInput)(nil)).Elem(), ServiceVclLoggingGcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingGcArrayInput)(nil)).Elem(), ServiceVclLoggingGcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingGooglepubsubInput)(nil)).Elem(), ServiceVclLoggingGooglepubsubArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingGooglepubsubArrayInput)(nil)).Elem(), ServiceVclLoggingGooglepubsubArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingHerokusInput)(nil)).Elem(), ServiceVclLoggingHerokusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingHerokusArrayInput)(nil)).Elem(), ServiceVclLoggingHerokusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingHoneycombInput)(nil)).Elem(), ServiceVclLoggingHoneycombArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingHoneycombArrayInput)(nil)).Elem(), ServiceVclLoggingHoneycombArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingHttpInput)(nil)).Elem(), ServiceVclLoggingHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingHttpArrayInput)(nil)).Elem(), ServiceVclLoggingHttpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingKafkaInput)(nil)).Elem(), ServiceVclLoggingKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingKafkaArrayInput)(nil)).Elem(), ServiceVclLoggingKafkaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingKineseInput)(nil)).Elem(), ServiceVclLoggingKineseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingKineseArrayInput)(nil)).Elem(), ServiceVclLoggingKineseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingLogentryInput)(nil)).Elem(), ServiceVclLoggingLogentryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingLogentryArrayInput)(nil)).Elem(), ServiceVclLoggingLogentryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingLogglyInput)(nil)).Elem(), ServiceVclLoggingLogglyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingLogglyArrayInput)(nil)).Elem(), ServiceVclLoggingLogglyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingLogshuttleInput)(nil)).Elem(), ServiceVclLoggingLogshuttleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingLogshuttleArrayInput)(nil)).Elem(), ServiceVclLoggingLogshuttleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingNewrelicInput)(nil)).Elem(), ServiceVclLoggingNewrelicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingNewrelicArrayInput)(nil)).Elem(), ServiceVclLoggingNewrelicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingOpenstackInput)(nil)).Elem(), ServiceVclLoggingOpenstackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingOpenstackArrayInput)(nil)).Elem(), ServiceVclLoggingOpenstackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingPapertrailInput)(nil)).Elem(), ServiceVclLoggingPapertrailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingPapertrailArrayInput)(nil)).Elem(), ServiceVclLoggingPapertrailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingS3Input)(nil)).Elem(), ServiceVclLoggingS3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingS3ArrayInput)(nil)).Elem(), ServiceVclLoggingS3Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingScalyrInput)(nil)).Elem(), ServiceVclLoggingScalyrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingScalyrArrayInput)(nil)).Elem(), ServiceVclLoggingScalyrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingSftpInput)(nil)).Elem(), ServiceVclLoggingSftpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingSftpArrayInput)(nil)).Elem(), ServiceVclLoggingSftpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingSplunkInput)(nil)).Elem(), ServiceVclLoggingSplunkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingSplunkArrayInput)(nil)).Elem(), ServiceVclLoggingSplunkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingSumologicInput)(nil)).Elem(), ServiceVclLoggingSumologicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingSumologicArrayInput)(nil)).Elem(), ServiceVclLoggingSumologicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingSyslogInput)(nil)).Elem(), ServiceVclLoggingSyslogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclLoggingSyslogArrayInput)(nil)).Elem(), ServiceVclLoggingSyslogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclProductEnablementInput)(nil)).Elem(), ServiceVclProductEnablementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclProductEnablementPtrInput)(nil)).Elem(), ServiceVclProductEnablementArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclRateLimiterInput)(nil)).Elem(), ServiceVclRateLimiterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclRateLimiterArrayInput)(nil)).Elem(), ServiceVclRateLimiterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclRateLimiterResponseInput)(nil)).Elem(), ServiceVclRateLimiterResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclRateLimiterResponsePtrInput)(nil)).Elem(), ServiceVclRateLimiterResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclRequestSettingInput)(nil)).Elem(), ServiceVclRequestSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclRequestSettingArrayInput)(nil)).Elem(), ServiceVclRequestSettingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclResponseObjectInput)(nil)).Elem(), ServiceVclResponseObjectArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclResponseObjectArrayInput)(nil)).Elem(), ServiceVclResponseObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclSnippetInput)(nil)).Elem(), ServiceVclSnippetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclSnippetArrayInput)(nil)).Elem(), ServiceVclSnippetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclVclInput)(nil)).Elem(), ServiceVclVclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclVclArrayInput)(nil)).Elem(), ServiceVclVclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclWafInput)(nil)).Elem(), ServiceVclWafArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclWafPtrInput)(nil)).Elem(), ServiceVclWafArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceWafConfigurationRuleInput)(nil)).Elem(), ServiceWafConfigurationRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceWafConfigurationRuleArrayInput)(nil)).Elem(), ServiceWafConfigurationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceWafConfigurationRuleExclusionInput)(nil)).Elem(), ServiceWafConfigurationRuleExclusionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceWafConfigurationRuleExclusionArrayInput)(nil)).Elem(), ServiceWafConfigurationRuleExclusionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSubscriptionManagedDnsChallengeInput)(nil)).Elem(), TlsSubscriptionManagedDnsChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSubscriptionManagedDnsChallengeArrayInput)(nil)).Elem(), TlsSubscriptionManagedDnsChallengeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSubscriptionManagedHttpChallengeInput)(nil)).Elem(), TlsSubscriptionManagedHttpChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSubscriptionManagedHttpChallengeArrayInput)(nil)).Elem(), TlsSubscriptionManagedHttpChallengeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConfigstoresStoreInput)(nil)).Elem(), GetConfigstoresStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConfigstoresStoreArrayInput)(nil)).Elem(), GetConfigstoresStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatacentersPopInput)(nil)).Elem(), GetDatacentersPopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatacentersPopArrayInput)(nil)).Elem(), GetDatacentersPopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDictionariesDictionaryInput)(nil)).Elem(), GetDictionariesDictionaryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDictionariesDictionaryArrayInput)(nil)).Elem(), GetDictionariesDictionaryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKvstoresStoreInput)(nil)).Elem(), GetKvstoresStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKvstoresStoreArrayInput)(nil)).Elem(), GetKvstoresStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretstoresStoreInput)(nil)).Elem(), GetSecretstoresStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretstoresStoreArrayInput)(nil)).Elem(), GetSecretstoresStoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicesDetailInput)(nil)).Elem(), GetServicesDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServicesDetailArrayInput)(nil)).Elem(), GetServicesDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTlsConfigurationDnsRecordInput)(nil)).Elem(), GetTlsConfigurationDnsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTlsConfigurationDnsRecordArrayInput)(nil)).Elem(), GetTlsConfigurationDnsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWafRulesRuleInput)(nil)).Elem(), GetWafRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWafRulesRuleArrayInput)(nil)).Elem(), GetWafRulesRuleArray{})
	pulumi.RegisterOutputType(ServiceACLEntriesEntryOutput{})
	pulumi.RegisterOutputType(ServiceACLEntriesEntryArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeBackendOutput{})
	pulumi.RegisterOutputType(ServiceComputeBackendArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeDictionaryOutput{})
	pulumi.RegisterOutputType(ServiceComputeDictionaryArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeDomainOutput{})
	pulumi.RegisterOutputType(ServiceComputeDomainArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingBigqueryOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingBigqueryArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingBlobstorageOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingBlobstorageArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingCloudfileOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingCloudfileArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingDatadogOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingDatadogArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingDigitaloceanOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingDigitaloceanArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingElasticsearchOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingElasticsearchArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingFtpOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingFtpArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingGcOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingGcArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingGooglepubsubOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingGooglepubsubArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHerokuOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHerokuArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHoneycombOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHoneycombArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHttpOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingHttpArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingKafkaOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingKafkaArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingKineseOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingKineseArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogentryOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogentryArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogglyOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogglyArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogshuttleOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingLogshuttleArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingNewrelicOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingNewrelicArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingOpenstackOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingOpenstackArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingPapertrailOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingPapertrailArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingS3Output{})
	pulumi.RegisterOutputType(ServiceComputeLoggingS3ArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingScalyrOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingScalyrArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSftpOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSftpArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSplunkOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSplunkArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSumologicOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSumologicArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSyslogOutput{})
	pulumi.RegisterOutputType(ServiceComputeLoggingSyslogArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputePackageOutput{})
	pulumi.RegisterOutputType(ServiceComputePackagePtrOutput{})
	pulumi.RegisterOutputType(ServiceComputeProductEnablementOutput{})
	pulumi.RegisterOutputType(ServiceComputeProductEnablementPtrOutput{})
	pulumi.RegisterOutputType(ServiceComputeResourceLinkOutput{})
	pulumi.RegisterOutputType(ServiceComputeResourceLinkArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclAclOutput{})
	pulumi.RegisterOutputType(ServiceVclAclArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclBackendOutput{})
	pulumi.RegisterOutputType(ServiceVclBackendArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclCacheSettingOutput{})
	pulumi.RegisterOutputType(ServiceVclCacheSettingArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclConditionOutput{})
	pulumi.RegisterOutputType(ServiceVclConditionArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclDictionaryOutput{})
	pulumi.RegisterOutputType(ServiceVclDictionaryArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclDirectorOutput{})
	pulumi.RegisterOutputType(ServiceVclDirectorArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclDomainOutput{})
	pulumi.RegisterOutputType(ServiceVclDomainArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclDynamicsnippetOutput{})
	pulumi.RegisterOutputType(ServiceVclDynamicsnippetArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclGzipOutput{})
	pulumi.RegisterOutputType(ServiceVclGzipArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclHeaderOutput{})
	pulumi.RegisterOutputType(ServiceVclHeaderArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclHealthcheckOutput{})
	pulumi.RegisterOutputType(ServiceVclHealthcheckArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingBigqueryOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingBigqueryArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingBlobstorageOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingBlobstorageArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingCloudfileOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingCloudfileArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingDatadogOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingDatadogArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingDigitaloceanOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingDigitaloceanArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingElasticsearchOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingElasticsearchArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingFtpOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingFtpArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingGcOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingGcArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingGooglepubsubOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingGooglepubsubArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingHerokusOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingHerokusArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingHoneycombOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingHoneycombArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingHttpOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingHttpArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingKafkaOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingKafkaArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingKineseOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingKineseArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingLogentryOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingLogentryArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingLogglyOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingLogglyArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingLogshuttleOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingLogshuttleArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingNewrelicOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingNewrelicArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingOpenstackOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingOpenstackArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingPapertrailOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingPapertrailArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingS3Output{})
	pulumi.RegisterOutputType(ServiceVclLoggingS3ArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingScalyrOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingScalyrArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingSftpOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingSftpArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingSplunkOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingSplunkArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingSumologicOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingSumologicArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingSyslogOutput{})
	pulumi.RegisterOutputType(ServiceVclLoggingSyslogArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclProductEnablementOutput{})
	pulumi.RegisterOutputType(ServiceVclProductEnablementPtrOutput{})
	pulumi.RegisterOutputType(ServiceVclRateLimiterOutput{})
	pulumi.RegisterOutputType(ServiceVclRateLimiterArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclRateLimiterResponseOutput{})
	pulumi.RegisterOutputType(ServiceVclRateLimiterResponsePtrOutput{})
	pulumi.RegisterOutputType(ServiceVclRequestSettingOutput{})
	pulumi.RegisterOutputType(ServiceVclRequestSettingArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclResponseObjectOutput{})
	pulumi.RegisterOutputType(ServiceVclResponseObjectArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclSnippetOutput{})
	pulumi.RegisterOutputType(ServiceVclSnippetArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclVclOutput{})
	pulumi.RegisterOutputType(ServiceVclVclArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclWafOutput{})
	pulumi.RegisterOutputType(ServiceVclWafPtrOutput{})
	pulumi.RegisterOutputType(ServiceWafConfigurationRuleOutput{})
	pulumi.RegisterOutputType(ServiceWafConfigurationRuleArrayOutput{})
	pulumi.RegisterOutputType(ServiceWafConfigurationRuleExclusionOutput{})
	pulumi.RegisterOutputType(ServiceWafConfigurationRuleExclusionArrayOutput{})
	pulumi.RegisterOutputType(TlsSubscriptionManagedDnsChallengeOutput{})
	pulumi.RegisterOutputType(TlsSubscriptionManagedDnsChallengeArrayOutput{})
	pulumi.RegisterOutputType(TlsSubscriptionManagedHttpChallengeOutput{})
	pulumi.RegisterOutputType(TlsSubscriptionManagedHttpChallengeArrayOutput{})
	pulumi.RegisterOutputType(GetConfigstoresStoreOutput{})
	pulumi.RegisterOutputType(GetConfigstoresStoreArrayOutput{})
	pulumi.RegisterOutputType(GetDatacentersPopOutput{})
	pulumi.RegisterOutputType(GetDatacentersPopArrayOutput{})
	pulumi.RegisterOutputType(GetDictionariesDictionaryOutput{})
	pulumi.RegisterOutputType(GetDictionariesDictionaryArrayOutput{})
	pulumi.RegisterOutputType(GetKvstoresStoreOutput{})
	pulumi.RegisterOutputType(GetKvstoresStoreArrayOutput{})
	pulumi.RegisterOutputType(GetSecretstoresStoreOutput{})
	pulumi.RegisterOutputType(GetSecretstoresStoreArrayOutput{})
	pulumi.RegisterOutputType(GetServicesDetailOutput{})
	pulumi.RegisterOutputType(GetServicesDetailArrayOutput{})
	pulumi.RegisterOutputType(GetTlsConfigurationDnsRecordOutput{})
	pulumi.RegisterOutputType(GetTlsConfigurationDnsRecordArrayOutput{})
	pulumi.RegisterOutputType(GetWafRulesRuleOutput{})
	pulumi.RegisterOutputType(GetWafRulesRuleArrayOutput{})
}
