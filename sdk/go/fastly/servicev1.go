// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// Fastly Service can be imported using their service ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/servicev1:Servicev1 demo xxxxxxxxxxxxxxxxxxxx
// ```
type Servicev1 struct {
	pulumi.CustomResourceState

	// A set of ACL configuration blocks.
	// Defined below.
	Acls Servicev1AclArrayOutput `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate pulumi.BoolPtrOutput `pulumi:"activate"`
	// The currently active version of your Fastly Service.
	ActiveVersion pulumi.IntOutput `pulumi:"activeVersion"`
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends Servicev1BackendArrayOutput `pulumi:"backends"`
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings Servicev1BigqueryloggingArrayOutput `pulumi:"bigqueryloggings"`
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings Servicev1BlobstorageloggingArrayOutput `pulumi:"blobstorageloggings"`
	// A set of Cache Settings, allowing you to override.
	// Defined below.
	CacheSettings Servicev1CacheSettingArrayOutput `pulumi:"cacheSettings"`
	// The latest cloned version by the provider. The value gets only set after running `pulumi up`.
	ClonedVersion pulumi.IntOutput `pulumi:"clonedVersion"`
	// An optional comment about the Director.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// A set of conditions to add logic to any basic
	// configuration object in this service. Defined below.
	Conditions Servicev1ConditionArrayOutput `pulumi:"conditions"`
	// Sets the host header.
	DefaultHost pulumi.StringOutput `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for
	// requests.
	DefaultTtl pulumi.IntPtrOutput `pulumi:"defaultTtl"`
	// A set of dictionaries that allow the storing of key values pair for use within VCL functions.
	// Defined below.
	Dictionaries Servicev1DictionaryArrayOutput `pulumi:"dictionaries"`
	// A director to allow more control over balancing traffic over backends.
	// when an item is not to be cached based on an above `condition`.
	// Defined below
	Directors Servicev1DirectorArrayOutput `pulumi:"directors"`
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains Servicev1DomainArrayOutput `pulumi:"domains"`
	// A set of custom, "dynamic" VCL Snippet configuration blocks.
	// Defined below.
	Dynamicsnippets Servicev1DynamicsnippetArrayOutput `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings Servicev1GcsloggingArrayOutput `pulumi:"gcsloggings"`
	// A set of gzip rules to control automatic gzipping of
	// content. Defined below.
	Gzips Servicev1GzipArrayOutput `pulumi:"gzips"`
	// A set of Headers to manipulate for each request.
	// Defined below.
	Headers Servicev1HeaderArrayOutput `pulumi:"headers"`
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks Servicev1HealthcheckArrayOutput `pulumi:"healthchecks"`
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings Servicev1HttpsloggingArrayOutput `pulumi:"httpsloggings"`
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries Servicev1LogentryArrayOutput `pulumi:"logentries"`
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles Servicev1LoggingCloudfileArrayOutput `pulumi:"loggingCloudfiles"`
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs Servicev1LoggingDatadogArrayOutput `pulumi:"loggingDatadogs"`
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans Servicev1LoggingDigitaloceanArrayOutput `pulumi:"loggingDigitaloceans"`
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches Servicev1LoggingElasticsearchArrayOutput `pulumi:"loggingElasticsearches"`
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps Servicev1LoggingFtpArrayOutput `pulumi:"loggingFtps"`
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs Servicev1LoggingGooglepubsubArrayOutput `pulumi:"loggingGooglepubsubs"`
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku Servicev1LoggingHerokuArrayOutput `pulumi:"loggingHeroku"`
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs Servicev1LoggingHoneycombArrayOutput `pulumi:"loggingHoneycombs"`
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas Servicev1LoggingKafkaArrayOutput `pulumi:"loggingKafkas"`
	// A Kinesis endpoint to send streaming logs to.
	// Defined below.
	LoggingKineses Servicev1LoggingKineseArrayOutput `pulumi:"loggingKineses"`
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies Servicev1LoggingLogglyArrayOutput `pulumi:"loggingLogglies"`
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles Servicev1LoggingLogshuttleArrayOutput `pulumi:"loggingLogshuttles"`
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics Servicev1LoggingNewrelicArrayOutput `pulumi:"loggingNewrelics"`
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks Servicev1LoggingOpenstackArrayOutput `pulumi:"loggingOpenstacks"`
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs Servicev1LoggingScalyrArrayOutput `pulumi:"loggingScalyrs"`
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps Servicev1LoggingSftpArrayOutput `pulumi:"loggingSftps"`
	// A unique name to identify this dictionary.
	Name pulumi.StringOutput `pulumi:"name"`
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails Servicev1PapertrailArrayOutput `pulumi:"papertrails"`
	// A set of Request modifiers.
	// Defined below
	RequestSettings Servicev1RequestSettingArrayOutput `pulumi:"requestSettings"`
	// The name of the response object used by the Web Application Firewall.
	ResponseObjects Servicev1ResponseObjectArrayOutput `pulumi:"responseObjects"`
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings Servicev1S3loggingArrayOutput `pulumi:"s3loggings"`
	// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.
	// Defined below.
	Snippets Servicev1SnippetArrayOutput `pulumi:"snippets"`
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks Servicev1SplunkArrayOutput `pulumi:"splunks"`
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics Servicev1SumologicArrayOutput `pulumi:"sumologics"`
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs Servicev1SyslogArrayOutput `pulumi:"syslogs"`
	// A set of custom VCL configuration blocks.
	// Defined below. See the [Fastly documentation](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/) for more information on using custom VCL.
	Vcls Servicev1VclArrayOutput `pulumi:"vcls"`
	// Description field for the version.
	VersionComment pulumi.StringPtrOutput `pulumi:"versionComment"`
	// A WAF configuration block.
	// Defined below.
	Waf Servicev1WafPtrOutput `pulumi:"waf"`
}

// NewServicev1 registers a new resource with the given unique name, arguments, and options.
func NewServicev1(ctx *pulumi.Context,
	name string, args *Servicev1Args, opts ...pulumi.ResourceOption) (*Servicev1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	var resource Servicev1
	err := ctx.RegisterResource("fastly:index/servicev1:Servicev1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicev1 gets an existing Servicev1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicev1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Servicev1State, opts ...pulumi.ResourceOption) (*Servicev1, error) {
	var resource Servicev1
	err := ctx.ReadResource("fastly:index/servicev1:Servicev1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Servicev1 resources.
type servicev1State struct {
	// A set of ACL configuration blocks.
	// Defined below.
	Acls []Servicev1Acl `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate *bool `pulumi:"activate"`
	// The currently active version of your Fastly Service.
	ActiveVersion *int `pulumi:"activeVersion"`
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends []Servicev1Backend `pulumi:"backends"`
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings []Servicev1Bigquerylogging `pulumi:"bigqueryloggings"`
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings []Servicev1Blobstoragelogging `pulumi:"blobstorageloggings"`
	// A set of Cache Settings, allowing you to override.
	// Defined below.
	CacheSettings []Servicev1CacheSetting `pulumi:"cacheSettings"`
	// The latest cloned version by the provider. The value gets only set after running `pulumi up`.
	ClonedVersion *int `pulumi:"clonedVersion"`
	// An optional comment about the Director.
	Comment *string `pulumi:"comment"`
	// A set of conditions to add logic to any basic
	// configuration object in this service. Defined below.
	Conditions []Servicev1Condition `pulumi:"conditions"`
	// Sets the host header.
	DefaultHost *string `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for
	// requests.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// A set of dictionaries that allow the storing of key values pair for use within VCL functions.
	// Defined below.
	Dictionaries []Servicev1Dictionary `pulumi:"dictionaries"`
	// A director to allow more control over balancing traffic over backends.
	// when an item is not to be cached based on an above `condition`.
	// Defined below
	Directors []Servicev1Director `pulumi:"directors"`
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains []Servicev1Domain `pulumi:"domains"`
	// A set of custom, "dynamic" VCL Snippet configuration blocks.
	// Defined below.
	Dynamicsnippets []Servicev1Dynamicsnippet `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings []Servicev1Gcslogging `pulumi:"gcsloggings"`
	// A set of gzip rules to control automatic gzipping of
	// content. Defined below.
	Gzips []Servicev1Gzip `pulumi:"gzips"`
	// A set of Headers to manipulate for each request.
	// Defined below.
	Headers []Servicev1Header `pulumi:"headers"`
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks []Servicev1Healthcheck `pulumi:"healthchecks"`
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings []Servicev1Httpslogging `pulumi:"httpsloggings"`
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries []Servicev1Logentry `pulumi:"logentries"`
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles []Servicev1LoggingCloudfile `pulumi:"loggingCloudfiles"`
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs []Servicev1LoggingDatadog `pulumi:"loggingDatadogs"`
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans []Servicev1LoggingDigitalocean `pulumi:"loggingDigitaloceans"`
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches []Servicev1LoggingElasticsearch `pulumi:"loggingElasticsearches"`
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps []Servicev1LoggingFtp `pulumi:"loggingFtps"`
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs []Servicev1LoggingGooglepubsub `pulumi:"loggingGooglepubsubs"`
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku []Servicev1LoggingHeroku `pulumi:"loggingHeroku"`
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs []Servicev1LoggingHoneycomb `pulumi:"loggingHoneycombs"`
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas []Servicev1LoggingKafka `pulumi:"loggingKafkas"`
	// A Kinesis endpoint to send streaming logs to.
	// Defined below.
	LoggingKineses []Servicev1LoggingKinese `pulumi:"loggingKineses"`
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies []Servicev1LoggingLoggly `pulumi:"loggingLogglies"`
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles []Servicev1LoggingLogshuttle `pulumi:"loggingLogshuttles"`
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics []Servicev1LoggingNewrelic `pulumi:"loggingNewrelics"`
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks []Servicev1LoggingOpenstack `pulumi:"loggingOpenstacks"`
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs []Servicev1LoggingScalyr `pulumi:"loggingScalyrs"`
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps []Servicev1LoggingSftp `pulumi:"loggingSftps"`
	// A unique name to identify this dictionary.
	Name *string `pulumi:"name"`
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails []Servicev1Papertrail `pulumi:"papertrails"`
	// A set of Request modifiers.
	// Defined below
	RequestSettings []Servicev1RequestSetting `pulumi:"requestSettings"`
	// The name of the response object used by the Web Application Firewall.
	ResponseObjects []Servicev1ResponseObject `pulumi:"responseObjects"`
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings []Servicev1S3logging `pulumi:"s3loggings"`
	// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.
	// Defined below.
	Snippets []Servicev1Snippet `pulumi:"snippets"`
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks []Servicev1Splunk `pulumi:"splunks"`
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics []Servicev1Sumologic `pulumi:"sumologics"`
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs []Servicev1Syslog `pulumi:"syslogs"`
	// A set of custom VCL configuration blocks.
	// Defined below. See the [Fastly documentation](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/) for more information on using custom VCL.
	Vcls []Servicev1Vcl `pulumi:"vcls"`
	// Description field for the version.
	VersionComment *string `pulumi:"versionComment"`
	// A WAF configuration block.
	// Defined below.
	Waf *Servicev1Waf `pulumi:"waf"`
}

type Servicev1State struct {
	// A set of ACL configuration blocks.
	// Defined below.
	Acls Servicev1AclArrayInput
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate pulumi.BoolPtrInput
	// The currently active version of your Fastly Service.
	ActiveVersion pulumi.IntPtrInput
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends Servicev1BackendArrayInput
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings Servicev1BigqueryloggingArrayInput
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings Servicev1BlobstorageloggingArrayInput
	// A set of Cache Settings, allowing you to override.
	// Defined below.
	CacheSettings Servicev1CacheSettingArrayInput
	// The latest cloned version by the provider. The value gets only set after running `pulumi up`.
	ClonedVersion pulumi.IntPtrInput
	// An optional comment about the Director.
	Comment pulumi.StringPtrInput
	// A set of conditions to add logic to any basic
	// configuration object in this service. Defined below.
	Conditions Servicev1ConditionArrayInput
	// Sets the host header.
	DefaultHost pulumi.StringPtrInput
	// The default Time-to-live (TTL) for
	// requests.
	DefaultTtl pulumi.IntPtrInput
	// A set of dictionaries that allow the storing of key values pair for use within VCL functions.
	// Defined below.
	Dictionaries Servicev1DictionaryArrayInput
	// A director to allow more control over balancing traffic over backends.
	// when an item is not to be cached based on an above `condition`.
	// Defined below
	Directors Servicev1DirectorArrayInput
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains Servicev1DomainArrayInput
	// A set of custom, "dynamic" VCL Snippet configuration blocks.
	// Defined below.
	Dynamicsnippets Servicev1DynamicsnippetArrayInput
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy pulumi.BoolPtrInput
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings Servicev1GcsloggingArrayInput
	// A set of gzip rules to control automatic gzipping of
	// content. Defined below.
	Gzips Servicev1GzipArrayInput
	// A set of Headers to manipulate for each request.
	// Defined below.
	Headers Servicev1HeaderArrayInput
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks Servicev1HealthcheckArrayInput
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings Servicev1HttpsloggingArrayInput
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries Servicev1LogentryArrayInput
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles Servicev1LoggingCloudfileArrayInput
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs Servicev1LoggingDatadogArrayInput
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans Servicev1LoggingDigitaloceanArrayInput
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches Servicev1LoggingElasticsearchArrayInput
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps Servicev1LoggingFtpArrayInput
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs Servicev1LoggingGooglepubsubArrayInput
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku Servicev1LoggingHerokuArrayInput
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs Servicev1LoggingHoneycombArrayInput
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas Servicev1LoggingKafkaArrayInput
	// A Kinesis endpoint to send streaming logs to.
	// Defined below.
	LoggingKineses Servicev1LoggingKineseArrayInput
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies Servicev1LoggingLogglyArrayInput
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles Servicev1LoggingLogshuttleArrayInput
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics Servicev1LoggingNewrelicArrayInput
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks Servicev1LoggingOpenstackArrayInput
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs Servicev1LoggingScalyrArrayInput
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps Servicev1LoggingSftpArrayInput
	// A unique name to identify this dictionary.
	Name pulumi.StringPtrInput
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails Servicev1PapertrailArrayInput
	// A set of Request modifiers.
	// Defined below
	RequestSettings Servicev1RequestSettingArrayInput
	// The name of the response object used by the Web Application Firewall.
	ResponseObjects Servicev1ResponseObjectArrayInput
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings Servicev1S3loggingArrayInput
	// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.
	// Defined below.
	Snippets Servicev1SnippetArrayInput
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks Servicev1SplunkArrayInput
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics Servicev1SumologicArrayInput
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs Servicev1SyslogArrayInput
	// A set of custom VCL configuration blocks.
	// Defined below. See the [Fastly documentation](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/) for more information on using custom VCL.
	Vcls Servicev1VclArrayInput
	// Description field for the version.
	VersionComment pulumi.StringPtrInput
	// A WAF configuration block.
	// Defined below.
	Waf Servicev1WafPtrInput
}

func (Servicev1State) ElementType() reflect.Type {
	return reflect.TypeOf((*servicev1State)(nil)).Elem()
}

type servicev1Args struct {
	// A set of ACL configuration blocks.
	// Defined below.
	Acls []Servicev1Acl `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate *bool `pulumi:"activate"`
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends []Servicev1Backend `pulumi:"backends"`
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings []Servicev1Bigquerylogging `pulumi:"bigqueryloggings"`
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings []Servicev1Blobstoragelogging `pulumi:"blobstorageloggings"`
	// A set of Cache Settings, allowing you to override.
	// Defined below.
	CacheSettings []Servicev1CacheSetting `pulumi:"cacheSettings"`
	// An optional comment about the Director.
	Comment *string `pulumi:"comment"`
	// A set of conditions to add logic to any basic
	// configuration object in this service. Defined below.
	Conditions []Servicev1Condition `pulumi:"conditions"`
	// Sets the host header.
	DefaultHost *string `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for
	// requests.
	DefaultTtl *int `pulumi:"defaultTtl"`
	// A set of dictionaries that allow the storing of key values pair for use within VCL functions.
	// Defined below.
	Dictionaries []Servicev1Dictionary `pulumi:"dictionaries"`
	// A director to allow more control over balancing traffic over backends.
	// when an item is not to be cached based on an above `condition`.
	// Defined below
	Directors []Servicev1Director `pulumi:"directors"`
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains []Servicev1Domain `pulumi:"domains"`
	// A set of custom, "dynamic" VCL Snippet configuration blocks.
	// Defined below.
	Dynamicsnippets []Servicev1Dynamicsnippet `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings []Servicev1Gcslogging `pulumi:"gcsloggings"`
	// A set of gzip rules to control automatic gzipping of
	// content. Defined below.
	Gzips []Servicev1Gzip `pulumi:"gzips"`
	// A set of Headers to manipulate for each request.
	// Defined below.
	Headers []Servicev1Header `pulumi:"headers"`
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks []Servicev1Healthcheck `pulumi:"healthchecks"`
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings []Servicev1Httpslogging `pulumi:"httpsloggings"`
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries []Servicev1Logentry `pulumi:"logentries"`
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles []Servicev1LoggingCloudfile `pulumi:"loggingCloudfiles"`
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs []Servicev1LoggingDatadog `pulumi:"loggingDatadogs"`
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans []Servicev1LoggingDigitalocean `pulumi:"loggingDigitaloceans"`
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches []Servicev1LoggingElasticsearch `pulumi:"loggingElasticsearches"`
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps []Servicev1LoggingFtp `pulumi:"loggingFtps"`
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs []Servicev1LoggingGooglepubsub `pulumi:"loggingGooglepubsubs"`
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku []Servicev1LoggingHeroku `pulumi:"loggingHeroku"`
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs []Servicev1LoggingHoneycomb `pulumi:"loggingHoneycombs"`
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas []Servicev1LoggingKafka `pulumi:"loggingKafkas"`
	// A Kinesis endpoint to send streaming logs to.
	// Defined below.
	LoggingKineses []Servicev1LoggingKinese `pulumi:"loggingKineses"`
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies []Servicev1LoggingLoggly `pulumi:"loggingLogglies"`
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles []Servicev1LoggingLogshuttle `pulumi:"loggingLogshuttles"`
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics []Servicev1LoggingNewrelic `pulumi:"loggingNewrelics"`
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks []Servicev1LoggingOpenstack `pulumi:"loggingOpenstacks"`
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs []Servicev1LoggingScalyr `pulumi:"loggingScalyrs"`
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps []Servicev1LoggingSftp `pulumi:"loggingSftps"`
	// A unique name to identify this dictionary.
	Name *string `pulumi:"name"`
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails []Servicev1Papertrail `pulumi:"papertrails"`
	// A set of Request modifiers.
	// Defined below
	RequestSettings []Servicev1RequestSetting `pulumi:"requestSettings"`
	// The name of the response object used by the Web Application Firewall.
	ResponseObjects []Servicev1ResponseObject `pulumi:"responseObjects"`
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings []Servicev1S3logging `pulumi:"s3loggings"`
	// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.
	// Defined below.
	Snippets []Servicev1Snippet `pulumi:"snippets"`
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks []Servicev1Splunk `pulumi:"splunks"`
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics []Servicev1Sumologic `pulumi:"sumologics"`
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs []Servicev1Syslog `pulumi:"syslogs"`
	// A set of custom VCL configuration blocks.
	// Defined below. See the [Fastly documentation](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/) for more information on using custom VCL.
	Vcls []Servicev1Vcl `pulumi:"vcls"`
	// Description field for the version.
	VersionComment *string `pulumi:"versionComment"`
	// A WAF configuration block.
	// Defined below.
	Waf *Servicev1Waf `pulumi:"waf"`
}

// The set of arguments for constructing a Servicev1 resource.
type Servicev1Args struct {
	// A set of ACL configuration blocks.
	// Defined below.
	Acls Servicev1AclArrayInput
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate pulumi.BoolPtrInput
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends Servicev1BackendArrayInput
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings Servicev1BigqueryloggingArrayInput
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings Servicev1BlobstorageloggingArrayInput
	// A set of Cache Settings, allowing you to override.
	// Defined below.
	CacheSettings Servicev1CacheSettingArrayInput
	// An optional comment about the Director.
	Comment pulumi.StringPtrInput
	// A set of conditions to add logic to any basic
	// configuration object in this service. Defined below.
	Conditions Servicev1ConditionArrayInput
	// Sets the host header.
	DefaultHost pulumi.StringPtrInput
	// The default Time-to-live (TTL) for
	// requests.
	DefaultTtl pulumi.IntPtrInput
	// A set of dictionaries that allow the storing of key values pair for use within VCL functions.
	// Defined below.
	Dictionaries Servicev1DictionaryArrayInput
	// A director to allow more control over balancing traffic over backends.
	// when an item is not to be cached based on an above `condition`.
	// Defined below
	Directors Servicev1DirectorArrayInput
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains Servicev1DomainArrayInput
	// A set of custom, "dynamic" VCL Snippet configuration blocks.
	// Defined below.
	Dynamicsnippets Servicev1DynamicsnippetArrayInput
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy pulumi.BoolPtrInput
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings Servicev1GcsloggingArrayInput
	// A set of gzip rules to control automatic gzipping of
	// content. Defined below.
	Gzips Servicev1GzipArrayInput
	// A set of Headers to manipulate for each request.
	// Defined below.
	Headers Servicev1HeaderArrayInput
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks Servicev1HealthcheckArrayInput
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings Servicev1HttpsloggingArrayInput
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries Servicev1LogentryArrayInput
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles Servicev1LoggingCloudfileArrayInput
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs Servicev1LoggingDatadogArrayInput
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans Servicev1LoggingDigitaloceanArrayInput
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches Servicev1LoggingElasticsearchArrayInput
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps Servicev1LoggingFtpArrayInput
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs Servicev1LoggingGooglepubsubArrayInput
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku Servicev1LoggingHerokuArrayInput
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs Servicev1LoggingHoneycombArrayInput
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas Servicev1LoggingKafkaArrayInput
	// A Kinesis endpoint to send streaming logs to.
	// Defined below.
	LoggingKineses Servicev1LoggingKineseArrayInput
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies Servicev1LoggingLogglyArrayInput
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles Servicev1LoggingLogshuttleArrayInput
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics Servicev1LoggingNewrelicArrayInput
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks Servicev1LoggingOpenstackArrayInput
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs Servicev1LoggingScalyrArrayInput
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps Servicev1LoggingSftpArrayInput
	// A unique name to identify this dictionary.
	Name pulumi.StringPtrInput
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails Servicev1PapertrailArrayInput
	// A set of Request modifiers.
	// Defined below
	RequestSettings Servicev1RequestSettingArrayInput
	// The name of the response object used by the Web Application Firewall.
	ResponseObjects Servicev1ResponseObjectArrayInput
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings Servicev1S3loggingArrayInput
	// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.
	// Defined below.
	Snippets Servicev1SnippetArrayInput
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks Servicev1SplunkArrayInput
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics Servicev1SumologicArrayInput
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs Servicev1SyslogArrayInput
	// A set of custom VCL configuration blocks.
	// Defined below. See the [Fastly documentation](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/) for more information on using custom VCL.
	Vcls Servicev1VclArrayInput
	// Description field for the version.
	VersionComment pulumi.StringPtrInput
	// A WAF configuration block.
	// Defined below.
	Waf Servicev1WafPtrInput
}

func (Servicev1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*servicev1Args)(nil)).Elem()
}

type Servicev1Input interface {
	pulumi.Input

	ToServicev1Output() Servicev1Output
	ToServicev1OutputWithContext(ctx context.Context) Servicev1Output
}

func (*Servicev1) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1)(nil))
}

func (i *Servicev1) ToServicev1Output() Servicev1Output {
	return i.ToServicev1OutputWithContext(context.Background())
}

func (i *Servicev1) ToServicev1OutputWithContext(ctx context.Context) Servicev1Output {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1Output)
}

func (i *Servicev1) ToServicev1PtrOutput() Servicev1PtrOutput {
	return i.ToServicev1PtrOutputWithContext(context.Background())
}

func (i *Servicev1) ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PtrOutput)
}

type Servicev1PtrInput interface {
	pulumi.Input

	ToServicev1PtrOutput() Servicev1PtrOutput
	ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput
}

type servicev1PtrType Servicev1Args

func (*servicev1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Servicev1)(nil))
}

func (i *servicev1PtrType) ToServicev1PtrOutput() Servicev1PtrOutput {
	return i.ToServicev1PtrOutputWithContext(context.Background())
}

func (i *servicev1PtrType) ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PtrOutput)
}

// Servicev1ArrayInput is an input type that accepts Servicev1Array and Servicev1ArrayOutput values.
// You can construct a concrete instance of `Servicev1ArrayInput` via:
//
//          Servicev1Array{ Servicev1Args{...} }
type Servicev1ArrayInput interface {
	pulumi.Input

	ToServicev1ArrayOutput() Servicev1ArrayOutput
	ToServicev1ArrayOutputWithContext(context.Context) Servicev1ArrayOutput
}

type Servicev1Array []Servicev1Input

func (Servicev1Array) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Servicev1)(nil))
}

func (i Servicev1Array) ToServicev1ArrayOutput() Servicev1ArrayOutput {
	return i.ToServicev1ArrayOutputWithContext(context.Background())
}

func (i Servicev1Array) ToServicev1ArrayOutputWithContext(ctx context.Context) Servicev1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ArrayOutput)
}

// Servicev1MapInput is an input type that accepts Servicev1Map and Servicev1MapOutput values.
// You can construct a concrete instance of `Servicev1MapInput` via:
//
//          Servicev1Map{ "key": Servicev1Args{...} }
type Servicev1MapInput interface {
	pulumi.Input

	ToServicev1MapOutput() Servicev1MapOutput
	ToServicev1MapOutputWithContext(context.Context) Servicev1MapOutput
}

type Servicev1Map map[string]Servicev1Input

func (Servicev1Map) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Servicev1)(nil))
}

func (i Servicev1Map) ToServicev1MapOutput() Servicev1MapOutput {
	return i.ToServicev1MapOutputWithContext(context.Background())
}

func (i Servicev1Map) ToServicev1MapOutputWithContext(ctx context.Context) Servicev1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1MapOutput)
}

type Servicev1Output struct {
	*pulumi.OutputState
}

func (Servicev1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1)(nil))
}

func (o Servicev1Output) ToServicev1Output() Servicev1Output {
	return o
}

func (o Servicev1Output) ToServicev1OutputWithContext(ctx context.Context) Servicev1Output {
	return o
}

func (o Servicev1Output) ToServicev1PtrOutput() Servicev1PtrOutput {
	return o.ToServicev1PtrOutputWithContext(context.Background())
}

func (o Servicev1Output) ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput {
	return o.ApplyT(func(v Servicev1) *Servicev1 {
		return &v
	}).(Servicev1PtrOutput)
}

type Servicev1PtrOutput struct {
	*pulumi.OutputState
}

func (Servicev1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Servicev1)(nil))
}

func (o Servicev1PtrOutput) ToServicev1PtrOutput() Servicev1PtrOutput {
	return o
}

func (o Servicev1PtrOutput) ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput {
	return o
}

type Servicev1ArrayOutput struct{ *pulumi.OutputState }

func (Servicev1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1)(nil))
}

func (o Servicev1ArrayOutput) ToServicev1ArrayOutput() Servicev1ArrayOutput {
	return o
}

func (o Servicev1ArrayOutput) ToServicev1ArrayOutputWithContext(ctx context.Context) Servicev1ArrayOutput {
	return o
}

func (o Servicev1ArrayOutput) Index(i pulumi.IntInput) Servicev1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1 {
		return vs[0].([]Servicev1)[vs[1].(int)]
	}).(Servicev1Output)
}

type Servicev1MapOutput struct{ *pulumi.OutputState }

func (Servicev1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Servicev1)(nil))
}

func (o Servicev1MapOutput) ToServicev1MapOutput() Servicev1MapOutput {
	return o
}

func (o Servicev1MapOutput) ToServicev1MapOutputWithContext(ctx context.Context) Servicev1MapOutput {
	return o
}

func (o Servicev1MapOutput) MapIndex(k pulumi.StringInput) Servicev1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Servicev1 {
		return vs[0].(map[string]Servicev1)[vs[1].(string)]
	}).(Servicev1Output)
}

func init() {
	pulumi.RegisterOutputType(Servicev1Output{})
	pulumi.RegisterOutputType(Servicev1PtrOutput{})
	pulumi.RegisterOutputType(Servicev1ArrayOutput{})
	pulumi.RegisterOutputType(Servicev1MapOutput{})
}
