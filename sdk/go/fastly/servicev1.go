// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Service, representing the configuration for a website, app,
// API, or anything else to be served through Fastly. A Service encompasses Domains
// and Backends.
//
// The Service resource requires a domain name that is correctly set up to direct
// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
// on their documentation site for guidance.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fastly/sdk/v3/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServicev1(ctx, "demo", &fastly.Servicev1Args{
// 			Backends: Servicev1BackendArray{
// 				&Servicev1BackendArgs{
// 					Address: pulumi.String("127.0.0.1"),
// 					Name:    pulumi.String("localhost"),
// 					Port:    pulumi.Int(80),
// 				},
// 			},
// 			Domains: Servicev1DomainArray{
// 				&Servicev1DomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("demo.notexample.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Basic usage with an Amazon S3 Website and that removes the `x-amz-request-id` header:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
// 	"github.com/pulumi/pulumi-fastly/sdk/v3/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServicev1(ctx, "demo", &fastly.Servicev1Args{
// 			Backends: Servicev1BackendArray{
// 				&Servicev1BackendArgs{
// 					Address:      pulumi.String("demo.notexample.com.s3-website-us-west-2.amazonaws.com"),
// 					Name:         pulumi.String("AWS S3 hosting"),
// 					OverrideHost: pulumi.String("demo.notexample.com.s3-website-us-west-2.amazonaws.com"),
// 					Port:         pulumi.Int(80),
// 				},
// 			},
// 			Domains: Servicev1DomainArray{
// 				&Servicev1DomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("demo.notexample.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 			Gzips: Servicev1GzipArray{
// 				&Servicev1GzipArgs{
// 					ContentTypes: pulumi.StringArray{
// 						pulumi.String("text/html"),
// 						pulumi.String("text/css"),
// 					},
// 					Extensions: pulumi.StringArray{
// 						pulumi.String("css"),
// 						pulumi.String("js"),
// 					},
// 					Name: pulumi.String("file extensions and content types"),
// 				},
// 			},
// 			Headers: Servicev1HeaderArray{
// 				&Servicev1HeaderArgs{
// 					Action:      pulumi.String("delete"),
// 					Destination: pulumi.String("http.x-amz-request-id"),
// 					Name:        pulumi.String("remove x-amz-request-id"),
// 					Type:        pulumi.String("cache"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = s3.NewBucket(ctx, "website", &s3.BucketArgs{
// 			Acl: pulumi.String("public-read"),
// 			Website: &s3.BucketWebsiteArgs{
// 				ErrorDocument: pulumi.String("error.html"),
// 				IndexDocument: pulumi.String("index.html"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Basic usage with [custom
// VCL](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/):
//
// ```go
// package main
//
// import (
// 	"fmt"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-fastly/sdk/v3/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServicev1(ctx, "demo", &fastly.Servicev1Args{
// 			Backends: Servicev1BackendArray{
// 				&Servicev1BackendArgs{
// 					Address: pulumi.String("127.0.0.1"),
// 					Name:    pulumi.String("localhost"),
// 					Port:    pulumi.Int(80),
// 				},
// 			},
// 			Domains: Servicev1DomainArray{
// 				&Servicev1DomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("demo.notexample.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 			Vcls: Servicev1VclArray{
// 				&Servicev1VclArgs{
// 					Content: readFileOrPanic(fmt.Sprintf("%v%v", path.Module, "/my_custom_main.vcl")),
// 					Main:    pulumi.Bool(true),
// 					Name:    pulumi.String("my_custom_main_vcl"),
// 				},
// 				&Servicev1VclArgs{
// 					Content: readFileOrPanic(fmt.Sprintf("%v%v", path.Module, "/my_custom_library.vcl")),
// 					Name:    pulumi.String("my_custom_library_vcl"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Basic usage with [custom Director](https://developer.fastly.com/reference/api/load-balancing/directors/director/):
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fastly/sdk/v3/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServicev1(ctx, "demo", &fastly.Servicev1Args{
// 			Backends: Servicev1BackendArray{
// 				&Servicev1BackendArgs{
// 					Address: pulumi.String("127.0.0.1"),
// 					Name:    pulumi.String("origin1"),
// 					Port:    pulumi.Int(80),
// 				},
// 				&Servicev1BackendArgs{
// 					Address: pulumi.String("127.0.0.2"),
// 					Name:    pulumi.String("origin2"),
// 					Port:    pulumi.Int(80),
// 				},
// 			},
// 			Directors: Servicev1DirectorArray{
// 				&Servicev1DirectorArgs{
// 					Backends: pulumi.StringArray{
// 						pulumi.String("origin1"),
// 						pulumi.String("origin2"),
// 					},
// 					Name:   pulumi.String("mydirector"),
// 					Quorum: pulumi.Int(0),
// 					Type:   pulumi.Int(3),
// 				},
// 			},
// 			Domains: Servicev1DomainArray{
// 				&Servicev1DomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("demo.notexample.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Basic usage with [Web Application Firewall](https://developer.fastly.com/reference/api/waf/):
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fastly/sdk/v3/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServicev1(ctx, "demo", &fastly.Servicev1Args{
// 			Backends: Servicev1BackendArray{
// 				&Servicev1BackendArgs{
// 					Address: pulumi.String("127.0.0.1"),
// 					Name:    pulumi.String("origin1"),
// 					Port:    pulumi.Int(80),
// 				},
// 			},
// 			Conditions: Servicev1ConditionArray{
// 				&Servicev1ConditionArgs{
// 					Name:      pulumi.String("WAF_Prefetch"),
// 					Statement: pulumi.String("req.backend.is_origin"),
// 					Type:      pulumi.String("PREFETCH"),
// 				},
// 				&Servicev1ConditionArgs{
// 					Name:      pulumi.String("WAF_always_false"),
// 					Statement: pulumi.String("false"),
// 					Type:      pulumi.String("REQUEST"),
// 				},
// 			},
// 			Domains: Servicev1DomainArray{
// 				&Servicev1DomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("example.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 			ResponseObjects: Servicev1ResponseObjectArray{
// 				&Servicev1ResponseObjectArgs{
// 					Content:          pulumi.String("<html><body>Forbidden</body></html>"),
// 					ContentType:      pulumi.String("text/html"),
// 					Name:             pulumi.String("WAF_Response"),
// 					RequestCondition: pulumi.String("WAF_always_false"),
// 					Response:         pulumi.String("Forbidden"),
// 					Status:           pulumi.Int(403),
// 				},
// 			},
// 			Waf: &Servicev1WafArgs{
// 				PrefetchCondition: pulumi.String("WAF_Prefetch"),
// 				ResponseObject:    pulumi.String("WAF_Response"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// > **Note:** For an AWS S3 Bucket, the Backend address is
// `<domain>.s3-website-<region>.amazonaws.com`. The `overrideHost` attribute
// should be set to `<bucket_name>.s3-website-<region>.amazonaws.com` in the `backend` block. See the
// Fastly documentation on [Amazon S3][fastly-s3].
//
// [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
// [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
// [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
// [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/
//
// ## Import
//
// Fastly Services can be imported using their service ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/servicev1:Servicev1 demo xxxxxxxxxxxxxxxxxxxx
// ```
//
//  By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/servicev1:Servicev1 demo xxxxxxxxxxxxxxxxxxxx@2
// ```
type Servicev1 struct {
	pulumi.CustomResourceState

	Acls Servicev1AclArrayOutput `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrOutput `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion       pulumi.IntOutput                       `pulumi:"activeVersion"`
	Backends            Servicev1BackendArrayOutput            `pulumi:"backends"`
	Bigqueryloggings    Servicev1BigqueryloggingArrayOutput    `pulumi:"bigqueryloggings"`
	Blobstorageloggings Servicev1BlobstorageloggingArrayOutput `pulumi:"blobstorageloggings"`
	CacheSettings       Servicev1CacheSettingArrayOutput       `pulumi:"cacheSettings"`
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntOutput `pulumi:"clonedVersion"`
	// Description field for the service. Default `Managed by Terraform`
	Comment    pulumi.StringPtrOutput        `pulumi:"comment"`
	Conditions Servicev1ConditionArrayOutput `pulumi:"conditions"`
	// The default hostname
	DefaultHost pulumi.StringPtrOutput `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrOutput            `pulumi:"defaultTtl"`
	Dictionaries Servicev1DictionaryArrayOutput `pulumi:"dictionaries"`
	Directors    Servicev1DirectorArrayOutput   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains         Servicev1DomainArrayOutput         `pulumi:"domains"`
	Dynamicsnippets Servicev1DynamicsnippetArrayOutput `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrOutput                     `pulumi:"forceDestroy"`
	Gcsloggings            Servicev1GcsloggingArrayOutput           `pulumi:"gcsloggings"`
	Gzips                  Servicev1GzipArrayOutput                 `pulumi:"gzips"`
	Headers                Servicev1HeaderArrayOutput               `pulumi:"headers"`
	Healthchecks           Servicev1HealthcheckArrayOutput          `pulumi:"healthchecks"`
	Httpsloggings          Servicev1HttpsloggingArrayOutput         `pulumi:"httpsloggings"`
	Logentries             Servicev1LogentryArrayOutput             `pulumi:"logentries"`
	LoggingCloudfiles      Servicev1LoggingCloudfileArrayOutput     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        Servicev1LoggingDatadogArrayOutput       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   Servicev1LoggingDigitaloceanArrayOutput  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches Servicev1LoggingElasticsearchArrayOutput `pulumi:"loggingElasticsearches"`
	LoggingFtps            Servicev1LoggingFtpArrayOutput           `pulumi:"loggingFtps"`
	LoggingGooglepubsubs   Servicev1LoggingGooglepubsubArrayOutput  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          Servicev1LoggingHerokuArrayOutput        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      Servicev1LoggingHoneycombArrayOutput     `pulumi:"loggingHoneycombs"`
	LoggingKafkas          Servicev1LoggingKafkaArrayOutput         `pulumi:"loggingKafkas"`
	LoggingKineses         Servicev1LoggingKineseArrayOutput        `pulumi:"loggingKineses"`
	LoggingLogglies        Servicev1LoggingLogglyArrayOutput        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     Servicev1LoggingLogshuttleArrayOutput    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       Servicev1LoggingNewrelicArrayOutput      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      Servicev1LoggingOpenstackArrayOutput     `pulumi:"loggingOpenstacks"`
	LoggingScalyrs         Servicev1LoggingScalyrArrayOutput        `pulumi:"loggingScalyrs"`
	LoggingSftps           Servicev1LoggingSftpArrayOutput          `pulumi:"loggingSftps"`
	// The unique name for the Service to create
	Name            pulumi.StringOutput                `pulumi:"name"`
	Papertrails     Servicev1PapertrailArrayOutput     `pulumi:"papertrails"`
	RequestSettings Servicev1RequestSettingArrayOutput `pulumi:"requestSettings"`
	ResponseObjects Servicev1ResponseObjectArrayOutput `pulumi:"responseObjects"`
	S3loggings      Servicev1S3loggingArrayOutput      `pulumi:"s3loggings"`
	Snippets        Servicev1SnippetArrayOutput        `pulumi:"snippets"`
	Splunks         Servicev1SplunkArrayOutput         `pulumi:"splunks"`
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrOutput `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrOutput           `pulumi:"staleIfErrorTtl"`
	Sumologics      Servicev1SumologicArrayOutput `pulumi:"sumologics"`
	Syslogs         Servicev1SyslogArrayOutput    `pulumi:"syslogs"`
	Vcls            Servicev1VclArrayOutput       `pulumi:"vcls"`
	// Description field for the version
	VersionComment pulumi.StringPtrOutput `pulumi:"versionComment"`
	Waf            Servicev1WafPtrOutput  `pulumi:"waf"`
}

// NewServicev1 registers a new resource with the given unique name, arguments, and options.
func NewServicev1(ctx *pulumi.Context,
	name string, args *Servicev1Args, opts ...pulumi.ResourceOption) (*Servicev1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	var resource Servicev1
	err := ctx.RegisterResource("fastly:index/servicev1:Servicev1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServicev1 gets an existing Servicev1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServicev1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Servicev1State, opts ...pulumi.ResourceOption) (*Servicev1, error) {
	var resource Servicev1
	err := ctx.ReadResource("fastly:index/servicev1:Servicev1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Servicev1 resources.
type servicev1State struct {
	Acls []Servicev1Acl `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate *bool `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion       *int                          `pulumi:"activeVersion"`
	Backends            []Servicev1Backend            `pulumi:"backends"`
	Bigqueryloggings    []Servicev1Bigquerylogging    `pulumi:"bigqueryloggings"`
	Blobstorageloggings []Servicev1Blobstoragelogging `pulumi:"blobstorageloggings"`
	CacheSettings       []Servicev1CacheSetting       `pulumi:"cacheSettings"`
	// The latest cloned version by the provider
	ClonedVersion *int `pulumi:"clonedVersion"`
	// Description field for the service. Default `Managed by Terraform`
	Comment    *string              `pulumi:"comment"`
	Conditions []Servicev1Condition `pulumi:"conditions"`
	// The default hostname
	DefaultHost *string `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   *int                  `pulumi:"defaultTtl"`
	Dictionaries []Servicev1Dictionary `pulumi:"dictionaries"`
	Directors    []Servicev1Director   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains         []Servicev1Domain         `pulumi:"domains"`
	Dynamicsnippets []Servicev1Dynamicsnippet `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           *bool                           `pulumi:"forceDestroy"`
	Gcsloggings            []Servicev1Gcslogging           `pulumi:"gcsloggings"`
	Gzips                  []Servicev1Gzip                 `pulumi:"gzips"`
	Headers                []Servicev1Header               `pulumi:"headers"`
	Healthchecks           []Servicev1Healthcheck          `pulumi:"healthchecks"`
	Httpsloggings          []Servicev1Httpslogging         `pulumi:"httpsloggings"`
	Logentries             []Servicev1Logentry             `pulumi:"logentries"`
	LoggingCloudfiles      []Servicev1LoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []Servicev1LoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []Servicev1LoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []Servicev1LoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []Servicev1LoggingFtp           `pulumi:"loggingFtps"`
	LoggingGooglepubsubs   []Servicev1LoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          []Servicev1LoggingHeroku        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      []Servicev1LoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingKafkas          []Servicev1LoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []Servicev1LoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogglies        []Servicev1LoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []Servicev1LoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []Servicev1LoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []Servicev1LoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingScalyrs         []Servicev1LoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []Servicev1LoggingSftp          `pulumi:"loggingSftps"`
	// The unique name for the Service to create
	Name            *string                   `pulumi:"name"`
	Papertrails     []Servicev1Papertrail     `pulumi:"papertrails"`
	RequestSettings []Servicev1RequestSetting `pulumi:"requestSettings"`
	ResponseObjects []Servicev1ResponseObject `pulumi:"responseObjects"`
	S3loggings      []Servicev1S3logging      `pulumi:"s3loggings"`
	Snippets        []Servicev1Snippet        `pulumi:"snippets"`
	Splunks         []Servicev1Splunk         `pulumi:"splunks"`
	// Enables serving a stale object if there is an error
	StaleIfError *bool `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl *int                 `pulumi:"staleIfErrorTtl"`
	Sumologics      []Servicev1Sumologic `pulumi:"sumologics"`
	Syslogs         []Servicev1Syslog    `pulumi:"syslogs"`
	Vcls            []Servicev1Vcl       `pulumi:"vcls"`
	// Description field for the version
	VersionComment *string       `pulumi:"versionComment"`
	Waf            *Servicev1Waf `pulumi:"waf"`
}

type Servicev1State struct {
	Acls Servicev1AclArrayInput
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrInput
	// The currently active version of your Fastly Service
	ActiveVersion       pulumi.IntPtrInput
	Backends            Servicev1BackendArrayInput
	Bigqueryloggings    Servicev1BigqueryloggingArrayInput
	Blobstorageloggings Servicev1BlobstorageloggingArrayInput
	CacheSettings       Servicev1CacheSettingArrayInput
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntPtrInput
	// Description field for the service. Default `Managed by Terraform`
	Comment    pulumi.StringPtrInput
	Conditions Servicev1ConditionArrayInput
	// The default hostname
	DefaultHost pulumi.StringPtrInput
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrInput
	Dictionaries Servicev1DictionaryArrayInput
	Directors    Servicev1DirectorArrayInput
	// A set of Domain names to serve as entry points for your Service
	Domains         Servicev1DomainArrayInput
	Dynamicsnippets Servicev1DynamicsnippetArrayInput
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrInput
	Gcsloggings            Servicev1GcsloggingArrayInput
	Gzips                  Servicev1GzipArrayInput
	Headers                Servicev1HeaderArrayInput
	Healthchecks           Servicev1HealthcheckArrayInput
	Httpsloggings          Servicev1HttpsloggingArrayInput
	Logentries             Servicev1LogentryArrayInput
	LoggingCloudfiles      Servicev1LoggingCloudfileArrayInput
	LoggingDatadogs        Servicev1LoggingDatadogArrayInput
	LoggingDigitaloceans   Servicev1LoggingDigitaloceanArrayInput
	LoggingElasticsearches Servicev1LoggingElasticsearchArrayInput
	LoggingFtps            Servicev1LoggingFtpArrayInput
	LoggingGooglepubsubs   Servicev1LoggingGooglepubsubArrayInput
	LoggingHeroku          Servicev1LoggingHerokuArrayInput
	LoggingHoneycombs      Servicev1LoggingHoneycombArrayInput
	LoggingKafkas          Servicev1LoggingKafkaArrayInput
	LoggingKineses         Servicev1LoggingKineseArrayInput
	LoggingLogglies        Servicev1LoggingLogglyArrayInput
	LoggingLogshuttles     Servicev1LoggingLogshuttleArrayInput
	LoggingNewrelics       Servicev1LoggingNewrelicArrayInput
	LoggingOpenstacks      Servicev1LoggingOpenstackArrayInput
	LoggingScalyrs         Servicev1LoggingScalyrArrayInput
	LoggingSftps           Servicev1LoggingSftpArrayInput
	// The unique name for the Service to create
	Name            pulumi.StringPtrInput
	Papertrails     Servicev1PapertrailArrayInput
	RequestSettings Servicev1RequestSettingArrayInput
	ResponseObjects Servicev1ResponseObjectArrayInput
	S3loggings      Servicev1S3loggingArrayInput
	Snippets        Servicev1SnippetArrayInput
	Splunks         Servicev1SplunkArrayInput
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrInput
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrInput
	Sumologics      Servicev1SumologicArrayInput
	Syslogs         Servicev1SyslogArrayInput
	Vcls            Servicev1VclArrayInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
	Waf            Servicev1WafPtrInput
}

func (Servicev1State) ElementType() reflect.Type {
	return reflect.TypeOf((*servicev1State)(nil)).Elem()
}

type servicev1Args struct {
	Acls []Servicev1Acl `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate            *bool                         `pulumi:"activate"`
	Backends            []Servicev1Backend            `pulumi:"backends"`
	Bigqueryloggings    []Servicev1Bigquerylogging    `pulumi:"bigqueryloggings"`
	Blobstorageloggings []Servicev1Blobstoragelogging `pulumi:"blobstorageloggings"`
	CacheSettings       []Servicev1CacheSetting       `pulumi:"cacheSettings"`
	// Description field for the service. Default `Managed by Terraform`
	Comment    *string              `pulumi:"comment"`
	Conditions []Servicev1Condition `pulumi:"conditions"`
	// The default hostname
	DefaultHost *string `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   *int                  `pulumi:"defaultTtl"`
	Dictionaries []Servicev1Dictionary `pulumi:"dictionaries"`
	Directors    []Servicev1Director   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains         []Servicev1Domain         `pulumi:"domains"`
	Dynamicsnippets []Servicev1Dynamicsnippet `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           *bool                           `pulumi:"forceDestroy"`
	Gcsloggings            []Servicev1Gcslogging           `pulumi:"gcsloggings"`
	Gzips                  []Servicev1Gzip                 `pulumi:"gzips"`
	Headers                []Servicev1Header               `pulumi:"headers"`
	Healthchecks           []Servicev1Healthcheck          `pulumi:"healthchecks"`
	Httpsloggings          []Servicev1Httpslogging         `pulumi:"httpsloggings"`
	Logentries             []Servicev1Logentry             `pulumi:"logentries"`
	LoggingCloudfiles      []Servicev1LoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []Servicev1LoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []Servicev1LoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []Servicev1LoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []Servicev1LoggingFtp           `pulumi:"loggingFtps"`
	LoggingGooglepubsubs   []Servicev1LoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          []Servicev1LoggingHeroku        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      []Servicev1LoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingKafkas          []Servicev1LoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []Servicev1LoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogglies        []Servicev1LoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []Servicev1LoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []Servicev1LoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []Servicev1LoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingScalyrs         []Servicev1LoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []Servicev1LoggingSftp          `pulumi:"loggingSftps"`
	// The unique name for the Service to create
	Name            *string                   `pulumi:"name"`
	Papertrails     []Servicev1Papertrail     `pulumi:"papertrails"`
	RequestSettings []Servicev1RequestSetting `pulumi:"requestSettings"`
	ResponseObjects []Servicev1ResponseObject `pulumi:"responseObjects"`
	S3loggings      []Servicev1S3logging      `pulumi:"s3loggings"`
	Snippets        []Servicev1Snippet        `pulumi:"snippets"`
	Splunks         []Servicev1Splunk         `pulumi:"splunks"`
	// Enables serving a stale object if there is an error
	StaleIfError *bool `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl *int                 `pulumi:"staleIfErrorTtl"`
	Sumologics      []Servicev1Sumologic `pulumi:"sumologics"`
	Syslogs         []Servicev1Syslog    `pulumi:"syslogs"`
	Vcls            []Servicev1Vcl       `pulumi:"vcls"`
	// Description field for the version
	VersionComment *string       `pulumi:"versionComment"`
	Waf            *Servicev1Waf `pulumi:"waf"`
}

// The set of arguments for constructing a Servicev1 resource.
type Servicev1Args struct {
	Acls Servicev1AclArrayInput
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate            pulumi.BoolPtrInput
	Backends            Servicev1BackendArrayInput
	Bigqueryloggings    Servicev1BigqueryloggingArrayInput
	Blobstorageloggings Servicev1BlobstorageloggingArrayInput
	CacheSettings       Servicev1CacheSettingArrayInput
	// Description field for the service. Default `Managed by Terraform`
	Comment    pulumi.StringPtrInput
	Conditions Servicev1ConditionArrayInput
	// The default hostname
	DefaultHost pulumi.StringPtrInput
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrInput
	Dictionaries Servicev1DictionaryArrayInput
	Directors    Servicev1DirectorArrayInput
	// A set of Domain names to serve as entry points for your Service
	Domains         Servicev1DomainArrayInput
	Dynamicsnippets Servicev1DynamicsnippetArrayInput
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrInput
	Gcsloggings            Servicev1GcsloggingArrayInput
	Gzips                  Servicev1GzipArrayInput
	Headers                Servicev1HeaderArrayInput
	Healthchecks           Servicev1HealthcheckArrayInput
	Httpsloggings          Servicev1HttpsloggingArrayInput
	Logentries             Servicev1LogentryArrayInput
	LoggingCloudfiles      Servicev1LoggingCloudfileArrayInput
	LoggingDatadogs        Servicev1LoggingDatadogArrayInput
	LoggingDigitaloceans   Servicev1LoggingDigitaloceanArrayInput
	LoggingElasticsearches Servicev1LoggingElasticsearchArrayInput
	LoggingFtps            Servicev1LoggingFtpArrayInput
	LoggingGooglepubsubs   Servicev1LoggingGooglepubsubArrayInput
	LoggingHeroku          Servicev1LoggingHerokuArrayInput
	LoggingHoneycombs      Servicev1LoggingHoneycombArrayInput
	LoggingKafkas          Servicev1LoggingKafkaArrayInput
	LoggingKineses         Servicev1LoggingKineseArrayInput
	LoggingLogglies        Servicev1LoggingLogglyArrayInput
	LoggingLogshuttles     Servicev1LoggingLogshuttleArrayInput
	LoggingNewrelics       Servicev1LoggingNewrelicArrayInput
	LoggingOpenstacks      Servicev1LoggingOpenstackArrayInput
	LoggingScalyrs         Servicev1LoggingScalyrArrayInput
	LoggingSftps           Servicev1LoggingSftpArrayInput
	// The unique name for the Service to create
	Name            pulumi.StringPtrInput
	Papertrails     Servicev1PapertrailArrayInput
	RequestSettings Servicev1RequestSettingArrayInput
	ResponseObjects Servicev1ResponseObjectArrayInput
	S3loggings      Servicev1S3loggingArrayInput
	Snippets        Servicev1SnippetArrayInput
	Splunks         Servicev1SplunkArrayInput
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrInput
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrInput
	Sumologics      Servicev1SumologicArrayInput
	Syslogs         Servicev1SyslogArrayInput
	Vcls            Servicev1VclArrayInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
	Waf            Servicev1WafPtrInput
}

func (Servicev1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*servicev1Args)(nil)).Elem()
}

type Servicev1Input interface {
	pulumi.Input

	ToServicev1Output() Servicev1Output
	ToServicev1OutputWithContext(ctx context.Context) Servicev1Output
}

func (*Servicev1) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1)(nil))
}

func (i *Servicev1) ToServicev1Output() Servicev1Output {
	return i.ToServicev1OutputWithContext(context.Background())
}

func (i *Servicev1) ToServicev1OutputWithContext(ctx context.Context) Servicev1Output {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1Output)
}

func (i *Servicev1) ToServicev1PtrOutput() Servicev1PtrOutput {
	return i.ToServicev1PtrOutputWithContext(context.Background())
}

func (i *Servicev1) ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PtrOutput)
}

type Servicev1PtrInput interface {
	pulumi.Input

	ToServicev1PtrOutput() Servicev1PtrOutput
	ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput
}

type servicev1PtrType Servicev1Args

func (*servicev1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Servicev1)(nil))
}

func (i *servicev1PtrType) ToServicev1PtrOutput() Servicev1PtrOutput {
	return i.ToServicev1PtrOutputWithContext(context.Background())
}

func (i *servicev1PtrType) ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PtrOutput)
}

// Servicev1ArrayInput is an input type that accepts Servicev1Array and Servicev1ArrayOutput values.
// You can construct a concrete instance of `Servicev1ArrayInput` via:
//
//          Servicev1Array{ Servicev1Args{...} }
type Servicev1ArrayInput interface {
	pulumi.Input

	ToServicev1ArrayOutput() Servicev1ArrayOutput
	ToServicev1ArrayOutputWithContext(context.Context) Servicev1ArrayOutput
}

type Servicev1Array []Servicev1Input

func (Servicev1Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Servicev1)(nil)).Elem()
}

func (i Servicev1Array) ToServicev1ArrayOutput() Servicev1ArrayOutput {
	return i.ToServicev1ArrayOutputWithContext(context.Background())
}

func (i Servicev1Array) ToServicev1ArrayOutputWithContext(ctx context.Context) Servicev1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ArrayOutput)
}

// Servicev1MapInput is an input type that accepts Servicev1Map and Servicev1MapOutput values.
// You can construct a concrete instance of `Servicev1MapInput` via:
//
//          Servicev1Map{ "key": Servicev1Args{...} }
type Servicev1MapInput interface {
	pulumi.Input

	ToServicev1MapOutput() Servicev1MapOutput
	ToServicev1MapOutputWithContext(context.Context) Servicev1MapOutput
}

type Servicev1Map map[string]Servicev1Input

func (Servicev1Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Servicev1)(nil)).Elem()
}

func (i Servicev1Map) ToServicev1MapOutput() Servicev1MapOutput {
	return i.ToServicev1MapOutputWithContext(context.Background())
}

func (i Servicev1Map) ToServicev1MapOutputWithContext(ctx context.Context) Servicev1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1MapOutput)
}

type Servicev1Output struct{ *pulumi.OutputState }

func (Servicev1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1)(nil))
}

func (o Servicev1Output) ToServicev1Output() Servicev1Output {
	return o
}

func (o Servicev1Output) ToServicev1OutputWithContext(ctx context.Context) Servicev1Output {
	return o
}

func (o Servicev1Output) ToServicev1PtrOutput() Servicev1PtrOutput {
	return o.ToServicev1PtrOutputWithContext(context.Background())
}

func (o Servicev1Output) ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Servicev1) *Servicev1 {
		return &v
	}).(Servicev1PtrOutput)
}

type Servicev1PtrOutput struct{ *pulumi.OutputState }

func (Servicev1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Servicev1)(nil))
}

func (o Servicev1PtrOutput) ToServicev1PtrOutput() Servicev1PtrOutput {
	return o
}

func (o Servicev1PtrOutput) ToServicev1PtrOutputWithContext(ctx context.Context) Servicev1PtrOutput {
	return o
}

func (o Servicev1PtrOutput) Elem() Servicev1Output {
	return o.ApplyT(func(v *Servicev1) Servicev1 {
		if v != nil {
			return *v
		}
		var ret Servicev1
		return ret
	}).(Servicev1Output)
}

type Servicev1ArrayOutput struct{ *pulumi.OutputState }

func (Servicev1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1)(nil))
}

func (o Servicev1ArrayOutput) ToServicev1ArrayOutput() Servicev1ArrayOutput {
	return o
}

func (o Servicev1ArrayOutput) ToServicev1ArrayOutputWithContext(ctx context.Context) Servicev1ArrayOutput {
	return o
}

func (o Servicev1ArrayOutput) Index(i pulumi.IntInput) Servicev1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Servicev1 {
		return vs[0].([]Servicev1)[vs[1].(int)]
	}).(Servicev1Output)
}

type Servicev1MapOutput struct{ *pulumi.OutputState }

func (Servicev1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Servicev1)(nil))
}

func (o Servicev1MapOutput) ToServicev1MapOutput() Servicev1MapOutput {
	return o
}

func (o Servicev1MapOutput) ToServicev1MapOutputWithContext(ctx context.Context) Servicev1MapOutput {
	return o
}

func (o Servicev1MapOutput) MapIndex(k pulumi.StringInput) Servicev1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Servicev1 {
		return vs[0].(map[string]Servicev1)[vs[1].(string)]
	}).(Servicev1Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Servicev1Input)(nil)).Elem(), &Servicev1{})
	pulumi.RegisterInputType(reflect.TypeOf((*Servicev1PtrInput)(nil)).Elem(), &Servicev1{})
	pulumi.RegisterInputType(reflect.TypeOf((*Servicev1ArrayInput)(nil)).Elem(), Servicev1Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*Servicev1MapInput)(nil)).Elem(), Servicev1Map{})
	pulumi.RegisterOutputType(Servicev1Output{})
	pulumi.RegisterOutputType(Servicev1PtrOutput{})
	pulumi.RegisterOutputType(Servicev1ArrayOutput{})
	pulumi.RegisterOutputType(Servicev1MapOutput{})
}
