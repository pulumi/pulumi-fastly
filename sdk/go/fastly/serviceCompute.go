// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Fastly Compute@Edge service. Compute@Edge is a computation platform capable of running custom binaries that you compile on your own systems and upload to Fastly. Security and portability is provided by compiling your code to [WebAssembly](https://webassembly.org/), which is ran at the edge using [Lucet](https://github.com/bytecodealliance/lucet), an open-source WebAssembly runtime created by Fastly. A compute service encompasses Domains and Backends.
//
// The Service resource requires a domain name that is correctly set up to direct
// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
// on their documentation site for guidance.
//
// ## Import
//
// Fastly Service can be imported using their service ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx
// ```
type ServiceCompute struct {
	pulumi.CustomResourceState

	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate pulumi.BoolPtrOutput `pulumi:"activate"`
	// The currently active version of your Fastly Service.
	ActiveVersion pulumi.IntOutput `pulumi:"activeVersion"`
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends ServiceComputeBackendArrayOutput `pulumi:"backends"`
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings ServiceComputeBigqueryloggingArrayOutput `pulumi:"bigqueryloggings"`
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings ServiceComputeBlobstorageloggingArrayOutput `pulumi:"blobstorageloggings"`
	ClonedVersion       pulumi.IntOutput                            `pulumi:"clonedVersion"`
	// An optional comment about the Domain.
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains ServiceComputeDomainArrayOutput `pulumi:"domains"`
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings ServiceComputeGcsloggingArrayOutput `pulumi:"gcsloggings"`
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks ServiceComputeHealthcheckArrayOutput `pulumi:"healthchecks"`
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings ServiceComputeHttpsloggingArrayOutput `pulumi:"httpsloggings"`
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries ServiceComputeLogentryArrayOutput `pulumi:"logentries"`
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles ServiceComputeLoggingCloudfileArrayOutput `pulumi:"loggingCloudfiles"`
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs ServiceComputeLoggingDatadogArrayOutput `pulumi:"loggingDatadogs"`
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans ServiceComputeLoggingDigitaloceanArrayOutput `pulumi:"loggingDigitaloceans"`
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayOutput `pulumi:"loggingElasticsearches"`
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps ServiceComputeLoggingFtpArrayOutput `pulumi:"loggingFtps"`
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs ServiceComputeLoggingGooglepubsubArrayOutput `pulumi:"loggingGooglepubsubs"`
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku ServiceComputeLoggingHerokuArrayOutput `pulumi:"loggingHeroku"`
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs ServiceComputeLoggingHoneycombArrayOutput `pulumi:"loggingHoneycombs"`
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas ServiceComputeLoggingKafkaArrayOutput `pulumi:"loggingKafkas"`
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies ServiceComputeLoggingLogglyArrayOutput `pulumi:"loggingLogglies"`
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles ServiceComputeLoggingLogshuttleArrayOutput `pulumi:"loggingLogshuttles"`
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics ServiceComputeLoggingNewrelicArrayOutput `pulumi:"loggingNewrelics"`
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks ServiceComputeLoggingOpenstackArrayOutput `pulumi:"loggingOpenstacks"`
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs ServiceComputeLoggingScalyrArrayOutput `pulumi:"loggingScalyrs"`
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps ServiceComputeLoggingSftpArrayOutput `pulumi:"loggingSftps"`
	// The unique name of the Rackspace Cloud Files logging endpoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// A Wasm deployment package to upload. Defined below.
	Package ServiceComputePackageOutput `pulumi:"package"`
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails ServiceComputePapertrailArrayOutput `pulumi:"papertrails"`
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings ServiceComputeS3loggingArrayOutput `pulumi:"s3loggings"`
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks ServiceComputeSplunkArrayOutput `pulumi:"splunks"`
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics ServiceComputeSumologicArrayOutput `pulumi:"sumologics"`
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs ServiceComputeSyslogArrayOutput `pulumi:"syslogs"`
	// Description field for the version.
	VersionComment pulumi.StringPtrOutput `pulumi:"versionComment"`
}

// NewServiceCompute registers a new resource with the given unique name, arguments, and options.
func NewServiceCompute(ctx *pulumi.Context,
	name string, args *ServiceComputeArgs, opts ...pulumi.ResourceOption) (*ServiceCompute, error) {
	if args == nil || args.Domains == nil {
		return nil, errors.New("missing required argument 'Domains'")
	}
	if args == nil || args.Package == nil {
		return nil, errors.New("missing required argument 'Package'")
	}
	if args == nil {
		args = &ServiceComputeArgs{}
	}
	var resource ServiceCompute
	err := ctx.RegisterResource("fastly:index/serviceCompute:ServiceCompute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceCompute gets an existing ServiceCompute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceCompute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceComputeState, opts ...pulumi.ResourceOption) (*ServiceCompute, error) {
	var resource ServiceCompute
	err := ctx.ReadResource("fastly:index/serviceCompute:ServiceCompute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceCompute resources.
type serviceComputeState struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate *bool `pulumi:"activate"`
	// The currently active version of your Fastly Service.
	ActiveVersion *int `pulumi:"activeVersion"`
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends []ServiceComputeBackend `pulumi:"backends"`
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings []ServiceComputeBigquerylogging `pulumi:"bigqueryloggings"`
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings []ServiceComputeBlobstoragelogging `pulumi:"blobstorageloggings"`
	ClonedVersion       *int                               `pulumi:"clonedVersion"`
	// An optional comment about the Domain.
	Comment *string `pulumi:"comment"`
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains []ServiceComputeDomain `pulumi:"domains"`
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings []ServiceComputeGcslogging `pulumi:"gcsloggings"`
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks []ServiceComputeHealthcheck `pulumi:"healthchecks"`
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings []ServiceComputeHttpslogging `pulumi:"httpsloggings"`
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries []ServiceComputeLogentry `pulumi:"logentries"`
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles []ServiceComputeLoggingCloudfile `pulumi:"loggingCloudfiles"`
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs []ServiceComputeLoggingDatadog `pulumi:"loggingDatadogs"`
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans []ServiceComputeLoggingDigitalocean `pulumi:"loggingDigitaloceans"`
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches []ServiceComputeLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps []ServiceComputeLoggingFtp `pulumi:"loggingFtps"`
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs []ServiceComputeLoggingGooglepubsub `pulumi:"loggingGooglepubsubs"`
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku []ServiceComputeLoggingHeroku `pulumi:"loggingHeroku"`
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs []ServiceComputeLoggingHoneycomb `pulumi:"loggingHoneycombs"`
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas []ServiceComputeLoggingKafka `pulumi:"loggingKafkas"`
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies []ServiceComputeLoggingLoggly `pulumi:"loggingLogglies"`
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles []ServiceComputeLoggingLogshuttle `pulumi:"loggingLogshuttles"`
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics []ServiceComputeLoggingNewrelic `pulumi:"loggingNewrelics"`
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks []ServiceComputeLoggingOpenstack `pulumi:"loggingOpenstacks"`
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs []ServiceComputeLoggingScalyr `pulumi:"loggingScalyrs"`
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps []ServiceComputeLoggingSftp `pulumi:"loggingSftps"`
	// The unique name of the Rackspace Cloud Files logging endpoint.
	Name *string `pulumi:"name"`
	// A Wasm deployment package to upload. Defined below.
	Package *ServiceComputePackage `pulumi:"package"`
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails []ServiceComputePapertrail `pulumi:"papertrails"`
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings []ServiceComputeS3logging `pulumi:"s3loggings"`
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks []ServiceComputeSplunk `pulumi:"splunks"`
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics []ServiceComputeSumologic `pulumi:"sumologics"`
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs []ServiceComputeSyslog `pulumi:"syslogs"`
	// Description field for the version.
	VersionComment *string `pulumi:"versionComment"`
}

type ServiceComputeState struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate pulumi.BoolPtrInput
	// The currently active version of your Fastly Service.
	ActiveVersion pulumi.IntPtrInput
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends ServiceComputeBackendArrayInput
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings ServiceComputeBigqueryloggingArrayInput
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings ServiceComputeBlobstorageloggingArrayInput
	ClonedVersion       pulumi.IntPtrInput
	// An optional comment about the Domain.
	Comment pulumi.StringPtrInput
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains ServiceComputeDomainArrayInput
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy pulumi.BoolPtrInput
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings ServiceComputeGcsloggingArrayInput
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks ServiceComputeHealthcheckArrayInput
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings ServiceComputeHttpsloggingArrayInput
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries ServiceComputeLogentryArrayInput
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles ServiceComputeLoggingCloudfileArrayInput
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs ServiceComputeLoggingDatadogArrayInput
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans ServiceComputeLoggingDigitaloceanArrayInput
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayInput
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps ServiceComputeLoggingFtpArrayInput
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs ServiceComputeLoggingGooglepubsubArrayInput
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku ServiceComputeLoggingHerokuArrayInput
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs ServiceComputeLoggingHoneycombArrayInput
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas ServiceComputeLoggingKafkaArrayInput
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies ServiceComputeLoggingLogglyArrayInput
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles ServiceComputeLoggingLogshuttleArrayInput
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics ServiceComputeLoggingNewrelicArrayInput
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks ServiceComputeLoggingOpenstackArrayInput
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs ServiceComputeLoggingScalyrArrayInput
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps ServiceComputeLoggingSftpArrayInput
	// The unique name of the Rackspace Cloud Files logging endpoint.
	Name pulumi.StringPtrInput
	// A Wasm deployment package to upload. Defined below.
	Package ServiceComputePackagePtrInput
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails ServiceComputePapertrailArrayInput
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings ServiceComputeS3loggingArrayInput
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks ServiceComputeSplunkArrayInput
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics ServiceComputeSumologicArrayInput
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs ServiceComputeSyslogArrayInput
	// Description field for the version.
	VersionComment pulumi.StringPtrInput
}

func (ServiceComputeState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceComputeState)(nil)).Elem()
}

type serviceComputeArgs struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate *bool `pulumi:"activate"`
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends []ServiceComputeBackend `pulumi:"backends"`
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings []ServiceComputeBigquerylogging `pulumi:"bigqueryloggings"`
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings []ServiceComputeBlobstoragelogging `pulumi:"blobstorageloggings"`
	// An optional comment about the Domain.
	Comment *string `pulumi:"comment"`
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains []ServiceComputeDomain `pulumi:"domains"`
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings []ServiceComputeGcslogging `pulumi:"gcsloggings"`
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks []ServiceComputeHealthcheck `pulumi:"healthchecks"`
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings []ServiceComputeHttpslogging `pulumi:"httpsloggings"`
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries []ServiceComputeLogentry `pulumi:"logentries"`
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles []ServiceComputeLoggingCloudfile `pulumi:"loggingCloudfiles"`
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs []ServiceComputeLoggingDatadog `pulumi:"loggingDatadogs"`
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans []ServiceComputeLoggingDigitalocean `pulumi:"loggingDigitaloceans"`
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches []ServiceComputeLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps []ServiceComputeLoggingFtp `pulumi:"loggingFtps"`
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs []ServiceComputeLoggingGooglepubsub `pulumi:"loggingGooglepubsubs"`
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku []ServiceComputeLoggingHeroku `pulumi:"loggingHeroku"`
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs []ServiceComputeLoggingHoneycomb `pulumi:"loggingHoneycombs"`
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas []ServiceComputeLoggingKafka `pulumi:"loggingKafkas"`
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies []ServiceComputeLoggingLoggly `pulumi:"loggingLogglies"`
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles []ServiceComputeLoggingLogshuttle `pulumi:"loggingLogshuttles"`
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics []ServiceComputeLoggingNewrelic `pulumi:"loggingNewrelics"`
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks []ServiceComputeLoggingOpenstack `pulumi:"loggingOpenstacks"`
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs []ServiceComputeLoggingScalyr `pulumi:"loggingScalyrs"`
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps []ServiceComputeLoggingSftp `pulumi:"loggingSftps"`
	// The unique name of the Rackspace Cloud Files logging endpoint.
	Name *string `pulumi:"name"`
	// A Wasm deployment package to upload. Defined below.
	Package ServiceComputePackage `pulumi:"package"`
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails []ServiceComputePapertrail `pulumi:"papertrails"`
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings []ServiceComputeS3logging `pulumi:"s3loggings"`
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks []ServiceComputeSplunk `pulumi:"splunks"`
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics []ServiceComputeSumologic `pulumi:"sumologics"`
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs []ServiceComputeSyslog `pulumi:"syslogs"`
	// Description field for the version.
	VersionComment *string `pulumi:"versionComment"`
}

// The set of arguments for constructing a ServiceCompute resource.
type ServiceComputeArgs struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
	Activate pulumi.BoolPtrInput
	// A set of Backends to service requests from your Domains.
	// Defined below. Backends must be defined in this argument, or defined in the
	// `vcl` argument below
	Backends ServiceComputeBackendArrayInput
	// A BigQuery endpoint to send streaming logs too.
	// Defined below.
	Bigqueryloggings ServiceComputeBigqueryloggingArrayInput
	// An Azure Blob Storage endpoint to send streaming logs too.
	// Defined below.
	Blobstorageloggings ServiceComputeBlobstorageloggingArrayInput
	// An optional comment about the Domain.
	Comment pulumi.StringPtrInput
	// The domain of the DigitalOcean Spaces endpoint (default "nyc3.digitaloceanspaces.com").
	Domains ServiceComputeDomainArrayInput
	// Services that are active cannot be destroyed. In
	// order to destroy the Service, set `forceDestroy` to `true`. Default `false`.
	ForceDestroy pulumi.BoolPtrInput
	// A gcs endpoint to send streaming logs too.
	// Defined below.
	Gcsloggings ServiceComputeGcsloggingArrayInput
	// Name of a defined `healthcheck` to assign to this backend.
	Healthchecks ServiceComputeHealthcheckArrayInput
	// An HTTPS endpoint to send streaming logs to.
	// Defined below.
	Httpsloggings ServiceComputeHttpsloggingArrayInput
	// A logentries endpoint to send streaming logs too.
	// Defined below.
	Logentries ServiceComputeLogentryArrayInput
	// A Rackspace Cloud Files endpoint to send streaming logs to.
	// Defined below.
	LoggingCloudfiles ServiceComputeLoggingCloudfileArrayInput
	// A Datadog endpoint to send streaming logs to.
	// Defined below.
	LoggingDatadogs ServiceComputeLoggingDatadogArrayInput
	// A DigitalOcean Spaces endpoint to send streaming logs to.
	// Defined below.
	LoggingDigitaloceans ServiceComputeLoggingDigitaloceanArrayInput
	// An Elasticsearch endpoint to send streaming logs to.
	// Defined below.
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayInput
	// An FTP endpoint to send streaming logs to.
	// Defined below.
	LoggingFtps ServiceComputeLoggingFtpArrayInput
	// A Google Cloud Pub/Sub endpoint to send streaming logs to.
	// Defined below.
	LoggingGooglepubsubs ServiceComputeLoggingGooglepubsubArrayInput
	// A Heroku endpoint to send streaming logs to.
	// Defined below.
	LoggingHeroku ServiceComputeLoggingHerokuArrayInput
	// A Honeycomb endpoint to send streaming logs to.
	// Defined below.
	LoggingHoneycombs ServiceComputeLoggingHoneycombArrayInput
	// A Kafka endpoint to send streaming logs to.
	// Defined below.
	LoggingKafkas ServiceComputeLoggingKafkaArrayInput
	// A Loggly endpoint to send streaming logs to.
	// Defined below.
	LoggingLogglies ServiceComputeLoggingLogglyArrayInput
	// A Log Shuttle endpoint to send streaming logs to.
	// Defined below.
	LoggingLogshuttles ServiceComputeLoggingLogshuttleArrayInput
	// A New Relic endpoint to send streaming logs to.
	// Defined below.
	LoggingNewrelics ServiceComputeLoggingNewrelicArrayInput
	// An OpenStack endpoint to send streaming logs to.
	// Defined below.
	LoggingOpenstacks ServiceComputeLoggingOpenstackArrayInput
	// A Scalyr endpoint to send streaming logs to.
	// Defined below.
	LoggingScalyrs ServiceComputeLoggingScalyrArrayInput
	// An SFTP endpoint to send streaming logs to.
	// Defined below.
	LoggingSftps ServiceComputeLoggingSftpArrayInput
	// The unique name of the Rackspace Cloud Files logging endpoint.
	Name pulumi.StringPtrInput
	// A Wasm deployment package to upload. Defined below.
	Package ServiceComputePackageInput
	// A Papertrail endpoint to send streaming logs too.
	// Defined below.
	Papertrails ServiceComputePapertrailArrayInput
	// A set of S3 Buckets to send streaming logs too.
	// Defined below.
	S3loggings ServiceComputeS3loggingArrayInput
	// A Splunk endpoint to send streaming logs too.
	// Defined below.
	Splunks ServiceComputeSplunkArrayInput
	// A Sumologic endpoint to send streaming logs too.
	// Defined below.
	Sumologics ServiceComputeSumologicArrayInput
	// A syslog endpoint to send streaming logs too.
	// Defined below.
	Syslogs ServiceComputeSyslogArrayInput
	// Description field for the version.
	VersionComment pulumi.StringPtrInput
}

func (ServiceComputeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceComputeArgs)(nil)).Elem()
}

type ServiceComputeInput interface {
	pulumi.Input

	ToServiceComputeOutput() ServiceComputeOutput
	ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput
}

func (ServiceCompute) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCompute)(nil)).Elem()
}

func (i ServiceCompute) ToServiceComputeOutput() ServiceComputeOutput {
	return i.ToServiceComputeOutputWithContext(context.Background())
}

func (i ServiceCompute) ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeOutput)
}

type ServiceComputeOutput struct {
	*pulumi.OutputState
}

func (ServiceComputeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceComputeOutput)(nil)).Elem()
}

func (o ServiceComputeOutput) ToServiceComputeOutput() ServiceComputeOutput {
	return o
}

func (o ServiceComputeOutput) ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ServiceComputeOutput{})
}
