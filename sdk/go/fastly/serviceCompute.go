// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Fastly Services can be imported using their service ID, e.g.
//
// ```sh
//
//	$ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx
//
// ```
//
//	By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
//
// ```sh
//
//	$ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx@2
//
// ```
type ServiceCompute struct {
	pulumi.CustomResourceState

	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrOutput `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion pulumi.IntOutput                 `pulumi:"activeVersion"`
	Backends      ServiceComputeBackendArrayOutput `pulumi:"backends"`
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntOutput `pulumi:"clonedVersion"`
	// Description field for the service. Default `Managed by Terraform`
	Comment      pulumi.StringPtrOutput              `pulumi:"comment"`
	Dictionaries ServiceComputeDictionaryArrayOutput `pulumi:"dictionaries"`
	// A set of Domain names to serve as entry points for your Service
	Domains ServiceComputeDomainArrayOutput `pulumi:"domains"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
	Imported               pulumi.BoolOutput                             `pulumi:"imported"`
	LoggingBigqueries      ServiceComputeLoggingBigqueryArrayOutput      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    ServiceComputeLoggingBlobstorageArrayOutput   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      ServiceComputeLoggingCloudfileArrayOutput     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        ServiceComputeLoggingDatadogArrayOutput       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   ServiceComputeLoggingDigitaloceanArrayOutput  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayOutput `pulumi:"loggingElasticsearches"`
	LoggingFtps            ServiceComputeLoggingFtpArrayOutput           `pulumi:"loggingFtps"`
	LoggingGcs             ServiceComputeLoggingGcArrayOutput            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   ServiceComputeLoggingGooglepubsubArrayOutput  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          ServiceComputeLoggingHerokuArrayOutput        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      ServiceComputeLoggingHoneycombArrayOutput     `pulumi:"loggingHoneycombs"`
	LoggingHttps           ServiceComputeLoggingHttpArrayOutput          `pulumi:"loggingHttps"`
	LoggingKafkas          ServiceComputeLoggingKafkaArrayOutput         `pulumi:"loggingKafkas"`
	LoggingKineses         ServiceComputeLoggingKineseArrayOutput        `pulumi:"loggingKineses"`
	LoggingLogentries      ServiceComputeLoggingLogentryArrayOutput      `pulumi:"loggingLogentries"`
	LoggingLogglies        ServiceComputeLoggingLogglyArrayOutput        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     ServiceComputeLoggingLogshuttleArrayOutput    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       ServiceComputeLoggingNewrelicArrayOutput      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      ServiceComputeLoggingOpenstackArrayOutput     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     ServiceComputeLoggingPapertrailArrayOutput    `pulumi:"loggingPapertrails"`
	LoggingS3s             ServiceComputeLoggingS3ArrayOutput            `pulumi:"loggingS3s"`
	LoggingScalyrs         ServiceComputeLoggingScalyrArrayOutput        `pulumi:"loggingScalyrs"`
	LoggingSftps           ServiceComputeLoggingSftpArrayOutput          `pulumi:"loggingSftps"`
	LoggingSplunks         ServiceComputeLoggingSplunkArrayOutput        `pulumi:"loggingSplunks"`
	LoggingSumologics      ServiceComputeLoggingSumologicArrayOutput     `pulumi:"loggingSumologics"`
	LoggingSyslogs         ServiceComputeLoggingSyslogArrayOutput        `pulumi:"loggingSyslogs"`
	// The unique name for the Service to create
	Name pulumi.StringOutput `pulumi:"name"`
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package ServiceComputePackageOutput `pulumi:"package"`
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse pulumi.BoolPtrOutput `pulumi:"reuse"`
	// Description field for the version
	VersionComment pulumi.StringPtrOutput `pulumi:"versionComment"`
}

// NewServiceCompute registers a new resource with the given unique name, arguments, and options.
func NewServiceCompute(ctx *pulumi.Context,
	name string, args *ServiceComputeArgs, opts ...pulumi.ResourceOption) (*ServiceCompute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	if args.Package == nil {
		return nil, errors.New("invalid value for required argument 'Package'")
	}
	var resource ServiceCompute
	err := ctx.RegisterResource("fastly:index/serviceCompute:ServiceCompute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceCompute gets an existing ServiceCompute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceCompute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceComputeState, opts ...pulumi.ResourceOption) (*ServiceCompute, error) {
	var resource ServiceCompute
	err := ctx.ReadResource("fastly:index/serviceCompute:ServiceCompute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceCompute resources.
type serviceComputeState struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate *bool `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion *int                    `pulumi:"activeVersion"`
	Backends      []ServiceComputeBackend `pulumi:"backends"`
	// The latest cloned version by the provider
	ClonedVersion *int `pulumi:"clonedVersion"`
	// Description field for the service. Default `Managed by Terraform`
	Comment      *string                    `pulumi:"comment"`
	Dictionaries []ServiceComputeDictionary `pulumi:"dictionaries"`
	// A set of Domain names to serve as entry points for your Service
	Domains []ServiceComputeDomain `pulumi:"domains"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
	Imported               *bool                                `pulumi:"imported"`
	LoggingBigqueries      []ServiceComputeLoggingBigquery      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    []ServiceComputeLoggingBlobstorage   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      []ServiceComputeLoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []ServiceComputeLoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []ServiceComputeLoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []ServiceComputeLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []ServiceComputeLoggingFtp           `pulumi:"loggingFtps"`
	LoggingGcs             []ServiceComputeLoggingGc            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   []ServiceComputeLoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          []ServiceComputeLoggingHeroku        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      []ServiceComputeLoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingHttps           []ServiceComputeLoggingHttp          `pulumi:"loggingHttps"`
	LoggingKafkas          []ServiceComputeLoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []ServiceComputeLoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogentries      []ServiceComputeLoggingLogentry      `pulumi:"loggingLogentries"`
	LoggingLogglies        []ServiceComputeLoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []ServiceComputeLoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []ServiceComputeLoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []ServiceComputeLoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     []ServiceComputeLoggingPapertrail    `pulumi:"loggingPapertrails"`
	LoggingS3s             []ServiceComputeLoggingS3            `pulumi:"loggingS3s"`
	LoggingScalyrs         []ServiceComputeLoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []ServiceComputeLoggingSftp          `pulumi:"loggingSftps"`
	LoggingSplunks         []ServiceComputeLoggingSplunk        `pulumi:"loggingSplunks"`
	LoggingSumologics      []ServiceComputeLoggingSumologic     `pulumi:"loggingSumologics"`
	LoggingSyslogs         []ServiceComputeLoggingSyslog        `pulumi:"loggingSyslogs"`
	// The unique name for the Service to create
	Name *string `pulumi:"name"`
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package *ServiceComputePackage `pulumi:"package"`
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse *bool `pulumi:"reuse"`
	// Description field for the version
	VersionComment *string `pulumi:"versionComment"`
}

type ServiceComputeState struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrInput
	// The currently active version of your Fastly Service
	ActiveVersion pulumi.IntPtrInput
	Backends      ServiceComputeBackendArrayInput
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntPtrInput
	// Description field for the service. Default `Managed by Terraform`
	Comment      pulumi.StringPtrInput
	Dictionaries ServiceComputeDictionaryArrayInput
	// A set of Domain names to serve as entry points for your Service
	Domains ServiceComputeDomainArrayInput
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy pulumi.BoolPtrInput
	// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
	Imported               pulumi.BoolPtrInput
	LoggingBigqueries      ServiceComputeLoggingBigqueryArrayInput
	LoggingBlobstorages    ServiceComputeLoggingBlobstorageArrayInput
	LoggingCloudfiles      ServiceComputeLoggingCloudfileArrayInput
	LoggingDatadogs        ServiceComputeLoggingDatadogArrayInput
	LoggingDigitaloceans   ServiceComputeLoggingDigitaloceanArrayInput
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayInput
	LoggingFtps            ServiceComputeLoggingFtpArrayInput
	LoggingGcs             ServiceComputeLoggingGcArrayInput
	LoggingGooglepubsubs   ServiceComputeLoggingGooglepubsubArrayInput
	LoggingHeroku          ServiceComputeLoggingHerokuArrayInput
	LoggingHoneycombs      ServiceComputeLoggingHoneycombArrayInput
	LoggingHttps           ServiceComputeLoggingHttpArrayInput
	LoggingKafkas          ServiceComputeLoggingKafkaArrayInput
	LoggingKineses         ServiceComputeLoggingKineseArrayInput
	LoggingLogentries      ServiceComputeLoggingLogentryArrayInput
	LoggingLogglies        ServiceComputeLoggingLogglyArrayInput
	LoggingLogshuttles     ServiceComputeLoggingLogshuttleArrayInput
	LoggingNewrelics       ServiceComputeLoggingNewrelicArrayInput
	LoggingOpenstacks      ServiceComputeLoggingOpenstackArrayInput
	LoggingPapertrails     ServiceComputeLoggingPapertrailArrayInput
	LoggingS3s             ServiceComputeLoggingS3ArrayInput
	LoggingScalyrs         ServiceComputeLoggingScalyrArrayInput
	LoggingSftps           ServiceComputeLoggingSftpArrayInput
	LoggingSplunks         ServiceComputeLoggingSplunkArrayInput
	LoggingSumologics      ServiceComputeLoggingSumologicArrayInput
	LoggingSyslogs         ServiceComputeLoggingSyslogArrayInput
	// The unique name for the Service to create
	Name pulumi.StringPtrInput
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package ServiceComputePackagePtrInput
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse pulumi.BoolPtrInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
}

func (ServiceComputeState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceComputeState)(nil)).Elem()
}

type serviceComputeArgs struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate *bool                   `pulumi:"activate"`
	Backends []ServiceComputeBackend `pulumi:"backends"`
	// Description field for the service. Default `Managed by Terraform`
	Comment      *string                    `pulumi:"comment"`
	Dictionaries []ServiceComputeDictionary `pulumi:"dictionaries"`
	// A set of Domain names to serve as entry points for your Service
	Domains []ServiceComputeDomain `pulumi:"domains"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           *bool                                `pulumi:"forceDestroy"`
	LoggingBigqueries      []ServiceComputeLoggingBigquery      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    []ServiceComputeLoggingBlobstorage   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      []ServiceComputeLoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []ServiceComputeLoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []ServiceComputeLoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []ServiceComputeLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []ServiceComputeLoggingFtp           `pulumi:"loggingFtps"`
	LoggingGcs             []ServiceComputeLoggingGc            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   []ServiceComputeLoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          []ServiceComputeLoggingHeroku        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      []ServiceComputeLoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingHttps           []ServiceComputeLoggingHttp          `pulumi:"loggingHttps"`
	LoggingKafkas          []ServiceComputeLoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []ServiceComputeLoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogentries      []ServiceComputeLoggingLogentry      `pulumi:"loggingLogentries"`
	LoggingLogglies        []ServiceComputeLoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []ServiceComputeLoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []ServiceComputeLoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []ServiceComputeLoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     []ServiceComputeLoggingPapertrail    `pulumi:"loggingPapertrails"`
	LoggingS3s             []ServiceComputeLoggingS3            `pulumi:"loggingS3s"`
	LoggingScalyrs         []ServiceComputeLoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []ServiceComputeLoggingSftp          `pulumi:"loggingSftps"`
	LoggingSplunks         []ServiceComputeLoggingSplunk        `pulumi:"loggingSplunks"`
	LoggingSumologics      []ServiceComputeLoggingSumologic     `pulumi:"loggingSumologics"`
	LoggingSyslogs         []ServiceComputeLoggingSyslog        `pulumi:"loggingSyslogs"`
	// The unique name for the Service to create
	Name *string `pulumi:"name"`
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package ServiceComputePackage `pulumi:"package"`
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse *bool `pulumi:"reuse"`
	// Description field for the version
	VersionComment *string `pulumi:"versionComment"`
}

// The set of arguments for constructing a ServiceCompute resource.
type ServiceComputeArgs struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrInput
	Backends ServiceComputeBackendArrayInput
	// Description field for the service. Default `Managed by Terraform`
	Comment      pulumi.StringPtrInput
	Dictionaries ServiceComputeDictionaryArrayInput
	// A set of Domain names to serve as entry points for your Service
	Domains ServiceComputeDomainArrayInput
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrInput
	LoggingBigqueries      ServiceComputeLoggingBigqueryArrayInput
	LoggingBlobstorages    ServiceComputeLoggingBlobstorageArrayInput
	LoggingCloudfiles      ServiceComputeLoggingCloudfileArrayInput
	LoggingDatadogs        ServiceComputeLoggingDatadogArrayInput
	LoggingDigitaloceans   ServiceComputeLoggingDigitaloceanArrayInput
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayInput
	LoggingFtps            ServiceComputeLoggingFtpArrayInput
	LoggingGcs             ServiceComputeLoggingGcArrayInput
	LoggingGooglepubsubs   ServiceComputeLoggingGooglepubsubArrayInput
	LoggingHeroku          ServiceComputeLoggingHerokuArrayInput
	LoggingHoneycombs      ServiceComputeLoggingHoneycombArrayInput
	LoggingHttps           ServiceComputeLoggingHttpArrayInput
	LoggingKafkas          ServiceComputeLoggingKafkaArrayInput
	LoggingKineses         ServiceComputeLoggingKineseArrayInput
	LoggingLogentries      ServiceComputeLoggingLogentryArrayInput
	LoggingLogglies        ServiceComputeLoggingLogglyArrayInput
	LoggingLogshuttles     ServiceComputeLoggingLogshuttleArrayInput
	LoggingNewrelics       ServiceComputeLoggingNewrelicArrayInput
	LoggingOpenstacks      ServiceComputeLoggingOpenstackArrayInput
	LoggingPapertrails     ServiceComputeLoggingPapertrailArrayInput
	LoggingS3s             ServiceComputeLoggingS3ArrayInput
	LoggingScalyrs         ServiceComputeLoggingScalyrArrayInput
	LoggingSftps           ServiceComputeLoggingSftpArrayInput
	LoggingSplunks         ServiceComputeLoggingSplunkArrayInput
	LoggingSumologics      ServiceComputeLoggingSumologicArrayInput
	LoggingSyslogs         ServiceComputeLoggingSyslogArrayInput
	// The unique name for the Service to create
	Name pulumi.StringPtrInput
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package ServiceComputePackageInput
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse pulumi.BoolPtrInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
}

func (ServiceComputeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceComputeArgs)(nil)).Elem()
}

type ServiceComputeInput interface {
	pulumi.Input

	ToServiceComputeOutput() ServiceComputeOutput
	ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput
}

func (*ServiceCompute) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCompute)(nil)).Elem()
}

func (i *ServiceCompute) ToServiceComputeOutput() ServiceComputeOutput {
	return i.ToServiceComputeOutputWithContext(context.Background())
}

func (i *ServiceCompute) ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeOutput)
}

// ServiceComputeArrayInput is an input type that accepts ServiceComputeArray and ServiceComputeArrayOutput values.
// You can construct a concrete instance of `ServiceComputeArrayInput` via:
//
//	ServiceComputeArray{ ServiceComputeArgs{...} }
type ServiceComputeArrayInput interface {
	pulumi.Input

	ToServiceComputeArrayOutput() ServiceComputeArrayOutput
	ToServiceComputeArrayOutputWithContext(context.Context) ServiceComputeArrayOutput
}

type ServiceComputeArray []ServiceComputeInput

func (ServiceComputeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCompute)(nil)).Elem()
}

func (i ServiceComputeArray) ToServiceComputeArrayOutput() ServiceComputeArrayOutput {
	return i.ToServiceComputeArrayOutputWithContext(context.Background())
}

func (i ServiceComputeArray) ToServiceComputeArrayOutputWithContext(ctx context.Context) ServiceComputeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeArrayOutput)
}

// ServiceComputeMapInput is an input type that accepts ServiceComputeMap and ServiceComputeMapOutput values.
// You can construct a concrete instance of `ServiceComputeMapInput` via:
//
//	ServiceComputeMap{ "key": ServiceComputeArgs{...} }
type ServiceComputeMapInput interface {
	pulumi.Input

	ToServiceComputeMapOutput() ServiceComputeMapOutput
	ToServiceComputeMapOutputWithContext(context.Context) ServiceComputeMapOutput
}

type ServiceComputeMap map[string]ServiceComputeInput

func (ServiceComputeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCompute)(nil)).Elem()
}

func (i ServiceComputeMap) ToServiceComputeMapOutput() ServiceComputeMapOutput {
	return i.ToServiceComputeMapOutputWithContext(context.Background())
}

func (i ServiceComputeMap) ToServiceComputeMapOutputWithContext(ctx context.Context) ServiceComputeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeMapOutput)
}

type ServiceComputeOutput struct{ *pulumi.OutputState }

func (ServiceComputeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCompute)(nil)).Elem()
}

func (o ServiceComputeOutput) ToServiceComputeOutput() ServiceComputeOutput {
	return o
}

func (o ServiceComputeOutput) ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput {
	return o
}

// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
func (o ServiceComputeOutput) Activate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.BoolPtrOutput { return v.Activate }).(pulumi.BoolPtrOutput)
}

// The currently active version of your Fastly Service
func (o ServiceComputeOutput) ActiveVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.IntOutput { return v.ActiveVersion }).(pulumi.IntOutput)
}

func (o ServiceComputeOutput) Backends() ServiceComputeBackendArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeBackendArrayOutput { return v.Backends }).(ServiceComputeBackendArrayOutput)
}

// The latest cloned version by the provider
func (o ServiceComputeOutput) ClonedVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.IntOutput { return v.ClonedVersion }).(pulumi.IntOutput)
}

// Description field for the service. Default `Managed by Terraform`
func (o ServiceComputeOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ServiceComputeOutput) Dictionaries() ServiceComputeDictionaryArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeDictionaryArrayOutput { return v.Dictionaries }).(ServiceComputeDictionaryArrayOutput)
}

// A set of Domain names to serve as entry points for your Service
func (o ServiceComputeOutput) Domains() ServiceComputeDomainArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeDomainArrayOutput { return v.Domains }).(ServiceComputeDomainArrayOutput)
}

// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
func (o ServiceComputeOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
func (o ServiceComputeOutput) Imported() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.BoolOutput { return v.Imported }).(pulumi.BoolOutput)
}

func (o ServiceComputeOutput) LoggingBigqueries() ServiceComputeLoggingBigqueryArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingBigqueryArrayOutput { return v.LoggingBigqueries }).(ServiceComputeLoggingBigqueryArrayOutput)
}

func (o ServiceComputeOutput) LoggingBlobstorages() ServiceComputeLoggingBlobstorageArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingBlobstorageArrayOutput { return v.LoggingBlobstorages }).(ServiceComputeLoggingBlobstorageArrayOutput)
}

func (o ServiceComputeOutput) LoggingCloudfiles() ServiceComputeLoggingCloudfileArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingCloudfileArrayOutput { return v.LoggingCloudfiles }).(ServiceComputeLoggingCloudfileArrayOutput)
}

func (o ServiceComputeOutput) LoggingDatadogs() ServiceComputeLoggingDatadogArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingDatadogArrayOutput { return v.LoggingDatadogs }).(ServiceComputeLoggingDatadogArrayOutput)
}

func (o ServiceComputeOutput) LoggingDigitaloceans() ServiceComputeLoggingDigitaloceanArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingDigitaloceanArrayOutput { return v.LoggingDigitaloceans }).(ServiceComputeLoggingDigitaloceanArrayOutput)
}

func (o ServiceComputeOutput) LoggingElasticsearches() ServiceComputeLoggingElasticsearchArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingElasticsearchArrayOutput { return v.LoggingElasticsearches }).(ServiceComputeLoggingElasticsearchArrayOutput)
}

func (o ServiceComputeOutput) LoggingFtps() ServiceComputeLoggingFtpArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingFtpArrayOutput { return v.LoggingFtps }).(ServiceComputeLoggingFtpArrayOutput)
}

func (o ServiceComputeOutput) LoggingGcs() ServiceComputeLoggingGcArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingGcArrayOutput { return v.LoggingGcs }).(ServiceComputeLoggingGcArrayOutput)
}

func (o ServiceComputeOutput) LoggingGooglepubsubs() ServiceComputeLoggingGooglepubsubArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingGooglepubsubArrayOutput { return v.LoggingGooglepubsubs }).(ServiceComputeLoggingGooglepubsubArrayOutput)
}

func (o ServiceComputeOutput) LoggingHeroku() ServiceComputeLoggingHerokuArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingHerokuArrayOutput { return v.LoggingHeroku }).(ServiceComputeLoggingHerokuArrayOutput)
}

func (o ServiceComputeOutput) LoggingHoneycombs() ServiceComputeLoggingHoneycombArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingHoneycombArrayOutput { return v.LoggingHoneycombs }).(ServiceComputeLoggingHoneycombArrayOutput)
}

func (o ServiceComputeOutput) LoggingHttps() ServiceComputeLoggingHttpArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingHttpArrayOutput { return v.LoggingHttps }).(ServiceComputeLoggingHttpArrayOutput)
}

func (o ServiceComputeOutput) LoggingKafkas() ServiceComputeLoggingKafkaArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingKafkaArrayOutput { return v.LoggingKafkas }).(ServiceComputeLoggingKafkaArrayOutput)
}

func (o ServiceComputeOutput) LoggingKineses() ServiceComputeLoggingKineseArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingKineseArrayOutput { return v.LoggingKineses }).(ServiceComputeLoggingKineseArrayOutput)
}

func (o ServiceComputeOutput) LoggingLogentries() ServiceComputeLoggingLogentryArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingLogentryArrayOutput { return v.LoggingLogentries }).(ServiceComputeLoggingLogentryArrayOutput)
}

func (o ServiceComputeOutput) LoggingLogglies() ServiceComputeLoggingLogglyArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingLogglyArrayOutput { return v.LoggingLogglies }).(ServiceComputeLoggingLogglyArrayOutput)
}

func (o ServiceComputeOutput) LoggingLogshuttles() ServiceComputeLoggingLogshuttleArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingLogshuttleArrayOutput { return v.LoggingLogshuttles }).(ServiceComputeLoggingLogshuttleArrayOutput)
}

func (o ServiceComputeOutput) LoggingNewrelics() ServiceComputeLoggingNewrelicArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingNewrelicArrayOutput { return v.LoggingNewrelics }).(ServiceComputeLoggingNewrelicArrayOutput)
}

func (o ServiceComputeOutput) LoggingOpenstacks() ServiceComputeLoggingOpenstackArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingOpenstackArrayOutput { return v.LoggingOpenstacks }).(ServiceComputeLoggingOpenstackArrayOutput)
}

func (o ServiceComputeOutput) LoggingPapertrails() ServiceComputeLoggingPapertrailArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingPapertrailArrayOutput { return v.LoggingPapertrails }).(ServiceComputeLoggingPapertrailArrayOutput)
}

func (o ServiceComputeOutput) LoggingS3s() ServiceComputeLoggingS3ArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingS3ArrayOutput { return v.LoggingS3s }).(ServiceComputeLoggingS3ArrayOutput)
}

func (o ServiceComputeOutput) LoggingScalyrs() ServiceComputeLoggingScalyrArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingScalyrArrayOutput { return v.LoggingScalyrs }).(ServiceComputeLoggingScalyrArrayOutput)
}

func (o ServiceComputeOutput) LoggingSftps() ServiceComputeLoggingSftpArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingSftpArrayOutput { return v.LoggingSftps }).(ServiceComputeLoggingSftpArrayOutput)
}

func (o ServiceComputeOutput) LoggingSplunks() ServiceComputeLoggingSplunkArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingSplunkArrayOutput { return v.LoggingSplunks }).(ServiceComputeLoggingSplunkArrayOutput)
}

func (o ServiceComputeOutput) LoggingSumologics() ServiceComputeLoggingSumologicArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingSumologicArrayOutput { return v.LoggingSumologics }).(ServiceComputeLoggingSumologicArrayOutput)
}

func (o ServiceComputeOutput) LoggingSyslogs() ServiceComputeLoggingSyslogArrayOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputeLoggingSyslogArrayOutput { return v.LoggingSyslogs }).(ServiceComputeLoggingSyslogArrayOutput)
}

// The unique name for the Service to create
func (o ServiceComputeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
func (o ServiceComputeOutput) Package() ServiceComputePackageOutput {
	return o.ApplyT(func(v *ServiceCompute) ServiceComputePackageOutput { return v.Package }).(ServiceComputePackageOutput)
}

// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
// an active service will cause an error. Default `false`
func (o ServiceComputeOutput) Reuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.BoolPtrOutput { return v.Reuse }).(pulumi.BoolPtrOutput)
}

// Description field for the version
func (o ServiceComputeOutput) VersionComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceCompute) pulumi.StringPtrOutput { return v.VersionComment }).(pulumi.StringPtrOutput)
}

type ServiceComputeArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceCompute)(nil)).Elem()
}

func (o ServiceComputeArrayOutput) ToServiceComputeArrayOutput() ServiceComputeArrayOutput {
	return o
}

func (o ServiceComputeArrayOutput) ToServiceComputeArrayOutputWithContext(ctx context.Context) ServiceComputeArrayOutput {
	return o
}

func (o ServiceComputeArrayOutput) Index(i pulumi.IntInput) ServiceComputeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceCompute {
		return vs[0].([]*ServiceCompute)[vs[1].(int)]
	}).(ServiceComputeOutput)
}

type ServiceComputeMapOutput struct{ *pulumi.OutputState }

func (ServiceComputeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceCompute)(nil)).Elem()
}

func (o ServiceComputeMapOutput) ToServiceComputeMapOutput() ServiceComputeMapOutput {
	return o
}

func (o ServiceComputeMapOutput) ToServiceComputeMapOutputWithContext(ctx context.Context) ServiceComputeMapOutput {
	return o
}

func (o ServiceComputeMapOutput) MapIndex(k pulumi.StringInput) ServiceComputeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceCompute {
		return vs[0].(map[string]*ServiceCompute)[vs[1].(string)]
	}).(ServiceComputeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeInput)(nil)).Elem(), &ServiceCompute{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeArrayInput)(nil)).Elem(), ServiceComputeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceComputeMapInput)(nil)).Elem(), ServiceComputeMap{})
	pulumi.RegisterOutputType(ServiceComputeOutput{})
	pulumi.RegisterOutputType(ServiceComputeArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeMapOutput{})
}
