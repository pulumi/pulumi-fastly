// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Compute@Edge service. Compute@Edge is a computation platform capable of running custom binaries that you compile on your own systems and upload to Fastly. Security and portability is provided by compiling your code to [WebAssembly](https://webassembly.org/), which is run at the edge using [Lucet](https://github.com/bytecodealliance/lucet), an open-source WebAssembly runtime created by Fastly. A compute service encompasses Domains and Backends.
//
// The Service resource requires a domain name that is correctly set up to direct
// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
// on their documentation site for guidance.
//
// ## Example Usage
// ### package block
//
// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on
// [Compute@Edge](https://www.fastly.com/products/edge-compute/serverless)
//
// [fastly-s3]: https://docs.fastly.com/en/guides/amazon-s3
// [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
// [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
// [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
// [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/
//
// ## Import
//
// Fastly Services can be imported using their service ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/serviceCompute:ServiceCompute demo xxxxxxxxxxxxxxxxxxxx
// ```
type ServiceCompute struct {
	pulumi.CustomResourceState

	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrOutput `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion       pulumi.IntOutput                            `pulumi:"activeVersion"`
	Backends            ServiceComputeBackendArrayOutput            `pulumi:"backends"`
	Bigqueryloggings    ServiceComputeBigqueryloggingArrayOutput    `pulumi:"bigqueryloggings"`
	Blobstorageloggings ServiceComputeBlobstorageloggingArrayOutput `pulumi:"blobstorageloggings"`
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntOutput `pulumi:"clonedVersion"`
	// Description field for the service. Default `Managed by Terraform`
	Comment      pulumi.StringPtrOutput              `pulumi:"comment"`
	Dictionaries ServiceComputeDictionaryArrayOutput `pulumi:"dictionaries"`
	Directors    ServiceComputeDirectorArrayOutput   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains ServiceComputeDomainArrayOutput `pulumi:"domains"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrOutput                          `pulumi:"forceDestroy"`
	Gcsloggings            ServiceComputeGcsloggingArrayOutput           `pulumi:"gcsloggings"`
	Healthchecks           ServiceComputeHealthcheckArrayOutput          `pulumi:"healthchecks"`
	Httpsloggings          ServiceComputeHttpsloggingArrayOutput         `pulumi:"httpsloggings"`
	Logentries             ServiceComputeLogentryArrayOutput             `pulumi:"logentries"`
	LoggingCloudfiles      ServiceComputeLoggingCloudfileArrayOutput     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        ServiceComputeLoggingDatadogArrayOutput       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   ServiceComputeLoggingDigitaloceanArrayOutput  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayOutput `pulumi:"loggingElasticsearches"`
	LoggingFtps            ServiceComputeLoggingFtpArrayOutput           `pulumi:"loggingFtps"`
	LoggingGooglepubsubs   ServiceComputeLoggingGooglepubsubArrayOutput  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          ServiceComputeLoggingHerokuArrayOutput        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      ServiceComputeLoggingHoneycombArrayOutput     `pulumi:"loggingHoneycombs"`
	LoggingKafkas          ServiceComputeLoggingKafkaArrayOutput         `pulumi:"loggingKafkas"`
	LoggingKineses         ServiceComputeLoggingKineseArrayOutput        `pulumi:"loggingKineses"`
	LoggingLogglies        ServiceComputeLoggingLogglyArrayOutput        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     ServiceComputeLoggingLogshuttleArrayOutput    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       ServiceComputeLoggingNewrelicArrayOutput      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      ServiceComputeLoggingOpenstackArrayOutput     `pulumi:"loggingOpenstacks"`
	LoggingScalyrs         ServiceComputeLoggingScalyrArrayOutput        `pulumi:"loggingScalyrs"`
	LoggingSftps           ServiceComputeLoggingSftpArrayOutput          `pulumi:"loggingSftps"`
	// The unique name for the Service to create
	Name pulumi.StringOutput `pulumi:"name"`
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package     ServiceComputePackageOutput         `pulumi:"package"`
	Papertrails ServiceComputePapertrailArrayOutput `pulumi:"papertrails"`
	S3loggings  ServiceComputeS3loggingArrayOutput  `pulumi:"s3loggings"`
	Splunks     ServiceComputeSplunkArrayOutput     `pulumi:"splunks"`
	Sumologics  ServiceComputeSumologicArrayOutput  `pulumi:"sumologics"`
	Syslogs     ServiceComputeSyslogArrayOutput     `pulumi:"syslogs"`
	// Description field for the version
	VersionComment pulumi.StringPtrOutput `pulumi:"versionComment"`
}

// NewServiceCompute registers a new resource with the given unique name, arguments, and options.
func NewServiceCompute(ctx *pulumi.Context,
	name string, args *ServiceComputeArgs, opts ...pulumi.ResourceOption) (*ServiceCompute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Backends == nil {
		return nil, errors.New("invalid value for required argument 'Backends'")
	}
	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	if args.Package == nil {
		return nil, errors.New("invalid value for required argument 'Package'")
	}
	var resource ServiceCompute
	err := ctx.RegisterResource("fastly:index/serviceCompute:ServiceCompute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceCompute gets an existing ServiceCompute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceCompute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceComputeState, opts ...pulumi.ResourceOption) (*ServiceCompute, error) {
	var resource ServiceCompute
	err := ctx.ReadResource("fastly:index/serviceCompute:ServiceCompute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceCompute resources.
type serviceComputeState struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate *bool `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion       *int                               `pulumi:"activeVersion"`
	Backends            []ServiceComputeBackend            `pulumi:"backends"`
	Bigqueryloggings    []ServiceComputeBigquerylogging    `pulumi:"bigqueryloggings"`
	Blobstorageloggings []ServiceComputeBlobstoragelogging `pulumi:"blobstorageloggings"`
	// The latest cloned version by the provider
	ClonedVersion *int `pulumi:"clonedVersion"`
	// Description field for the service. Default `Managed by Terraform`
	Comment      *string                    `pulumi:"comment"`
	Dictionaries []ServiceComputeDictionary `pulumi:"dictionaries"`
	Directors    []ServiceComputeDirector   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains []ServiceComputeDomain `pulumi:"domains"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           *bool                                `pulumi:"forceDestroy"`
	Gcsloggings            []ServiceComputeGcslogging           `pulumi:"gcsloggings"`
	Healthchecks           []ServiceComputeHealthcheck          `pulumi:"healthchecks"`
	Httpsloggings          []ServiceComputeHttpslogging         `pulumi:"httpsloggings"`
	Logentries             []ServiceComputeLogentry             `pulumi:"logentries"`
	LoggingCloudfiles      []ServiceComputeLoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []ServiceComputeLoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []ServiceComputeLoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []ServiceComputeLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []ServiceComputeLoggingFtp           `pulumi:"loggingFtps"`
	LoggingGooglepubsubs   []ServiceComputeLoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          []ServiceComputeLoggingHeroku        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      []ServiceComputeLoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingKafkas          []ServiceComputeLoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []ServiceComputeLoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogglies        []ServiceComputeLoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []ServiceComputeLoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []ServiceComputeLoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []ServiceComputeLoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingScalyrs         []ServiceComputeLoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []ServiceComputeLoggingSftp          `pulumi:"loggingSftps"`
	// The unique name for the Service to create
	Name *string `pulumi:"name"`
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package     *ServiceComputePackage     `pulumi:"package"`
	Papertrails []ServiceComputePapertrail `pulumi:"papertrails"`
	S3loggings  []ServiceComputeS3logging  `pulumi:"s3loggings"`
	Splunks     []ServiceComputeSplunk     `pulumi:"splunks"`
	Sumologics  []ServiceComputeSumologic  `pulumi:"sumologics"`
	Syslogs     []ServiceComputeSyslog     `pulumi:"syslogs"`
	// Description field for the version
	VersionComment *string `pulumi:"versionComment"`
}

type ServiceComputeState struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrInput
	// The currently active version of your Fastly Service
	ActiveVersion       pulumi.IntPtrInput
	Backends            ServiceComputeBackendArrayInput
	Bigqueryloggings    ServiceComputeBigqueryloggingArrayInput
	Blobstorageloggings ServiceComputeBlobstorageloggingArrayInput
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntPtrInput
	// Description field for the service. Default `Managed by Terraform`
	Comment      pulumi.StringPtrInput
	Dictionaries ServiceComputeDictionaryArrayInput
	Directors    ServiceComputeDirectorArrayInput
	// A set of Domain names to serve as entry points for your Service
	Domains ServiceComputeDomainArrayInput
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrInput
	Gcsloggings            ServiceComputeGcsloggingArrayInput
	Healthchecks           ServiceComputeHealthcheckArrayInput
	Httpsloggings          ServiceComputeHttpsloggingArrayInput
	Logentries             ServiceComputeLogentryArrayInput
	LoggingCloudfiles      ServiceComputeLoggingCloudfileArrayInput
	LoggingDatadogs        ServiceComputeLoggingDatadogArrayInput
	LoggingDigitaloceans   ServiceComputeLoggingDigitaloceanArrayInput
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayInput
	LoggingFtps            ServiceComputeLoggingFtpArrayInput
	LoggingGooglepubsubs   ServiceComputeLoggingGooglepubsubArrayInput
	LoggingHeroku          ServiceComputeLoggingHerokuArrayInput
	LoggingHoneycombs      ServiceComputeLoggingHoneycombArrayInput
	LoggingKafkas          ServiceComputeLoggingKafkaArrayInput
	LoggingKineses         ServiceComputeLoggingKineseArrayInput
	LoggingLogglies        ServiceComputeLoggingLogglyArrayInput
	LoggingLogshuttles     ServiceComputeLoggingLogshuttleArrayInput
	LoggingNewrelics       ServiceComputeLoggingNewrelicArrayInput
	LoggingOpenstacks      ServiceComputeLoggingOpenstackArrayInput
	LoggingScalyrs         ServiceComputeLoggingScalyrArrayInput
	LoggingSftps           ServiceComputeLoggingSftpArrayInput
	// The unique name for the Service to create
	Name pulumi.StringPtrInput
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package     ServiceComputePackagePtrInput
	Papertrails ServiceComputePapertrailArrayInput
	S3loggings  ServiceComputeS3loggingArrayInput
	Splunks     ServiceComputeSplunkArrayInput
	Sumologics  ServiceComputeSumologicArrayInput
	Syslogs     ServiceComputeSyslogArrayInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
}

func (ServiceComputeState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceComputeState)(nil)).Elem()
}

type serviceComputeArgs struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate            *bool                              `pulumi:"activate"`
	Backends            []ServiceComputeBackend            `pulumi:"backends"`
	Bigqueryloggings    []ServiceComputeBigquerylogging    `pulumi:"bigqueryloggings"`
	Blobstorageloggings []ServiceComputeBlobstoragelogging `pulumi:"blobstorageloggings"`
	// Description field for the service. Default `Managed by Terraform`
	Comment      *string                    `pulumi:"comment"`
	Dictionaries []ServiceComputeDictionary `pulumi:"dictionaries"`
	Directors    []ServiceComputeDirector   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains []ServiceComputeDomain `pulumi:"domains"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           *bool                                `pulumi:"forceDestroy"`
	Gcsloggings            []ServiceComputeGcslogging           `pulumi:"gcsloggings"`
	Healthchecks           []ServiceComputeHealthcheck          `pulumi:"healthchecks"`
	Httpsloggings          []ServiceComputeHttpslogging         `pulumi:"httpsloggings"`
	Logentries             []ServiceComputeLogentry             `pulumi:"logentries"`
	LoggingCloudfiles      []ServiceComputeLoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []ServiceComputeLoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []ServiceComputeLoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []ServiceComputeLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []ServiceComputeLoggingFtp           `pulumi:"loggingFtps"`
	LoggingGooglepubsubs   []ServiceComputeLoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHeroku          []ServiceComputeLoggingHeroku        `pulumi:"loggingHeroku"`
	LoggingHoneycombs      []ServiceComputeLoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingKafkas          []ServiceComputeLoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []ServiceComputeLoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogglies        []ServiceComputeLoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []ServiceComputeLoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []ServiceComputeLoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []ServiceComputeLoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingScalyrs         []ServiceComputeLoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []ServiceComputeLoggingSftp          `pulumi:"loggingSftps"`
	// The unique name for the Service to create
	Name *string `pulumi:"name"`
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package     ServiceComputePackage      `pulumi:"package"`
	Papertrails []ServiceComputePapertrail `pulumi:"papertrails"`
	S3loggings  []ServiceComputeS3logging  `pulumi:"s3loggings"`
	Splunks     []ServiceComputeSplunk     `pulumi:"splunks"`
	Sumologics  []ServiceComputeSumologic  `pulumi:"sumologics"`
	Syslogs     []ServiceComputeSyslog     `pulumi:"syslogs"`
	// Description field for the version
	VersionComment *string `pulumi:"versionComment"`
}

// The set of arguments for constructing a ServiceCompute resource.
type ServiceComputeArgs struct {
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate            pulumi.BoolPtrInput
	Backends            ServiceComputeBackendArrayInput
	Bigqueryloggings    ServiceComputeBigqueryloggingArrayInput
	Blobstorageloggings ServiceComputeBlobstorageloggingArrayInput
	// Description field for the service. Default `Managed by Terraform`
	Comment      pulumi.StringPtrInput
	Dictionaries ServiceComputeDictionaryArrayInput
	Directors    ServiceComputeDirectorArrayInput
	// A set of Domain names to serve as entry points for your Service
	Domains ServiceComputeDomainArrayInput
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrInput
	Gcsloggings            ServiceComputeGcsloggingArrayInput
	Healthchecks           ServiceComputeHealthcheckArrayInput
	Httpsloggings          ServiceComputeHttpsloggingArrayInput
	Logentries             ServiceComputeLogentryArrayInput
	LoggingCloudfiles      ServiceComputeLoggingCloudfileArrayInput
	LoggingDatadogs        ServiceComputeLoggingDatadogArrayInput
	LoggingDigitaloceans   ServiceComputeLoggingDigitaloceanArrayInput
	LoggingElasticsearches ServiceComputeLoggingElasticsearchArrayInput
	LoggingFtps            ServiceComputeLoggingFtpArrayInput
	LoggingGooglepubsubs   ServiceComputeLoggingGooglepubsubArrayInput
	LoggingHeroku          ServiceComputeLoggingHerokuArrayInput
	LoggingHoneycombs      ServiceComputeLoggingHoneycombArrayInput
	LoggingKafkas          ServiceComputeLoggingKafkaArrayInput
	LoggingKineses         ServiceComputeLoggingKineseArrayInput
	LoggingLogglies        ServiceComputeLoggingLogglyArrayInput
	LoggingLogshuttles     ServiceComputeLoggingLogshuttleArrayInput
	LoggingNewrelics       ServiceComputeLoggingNewrelicArrayInput
	LoggingOpenstacks      ServiceComputeLoggingOpenstackArrayInput
	LoggingScalyrs         ServiceComputeLoggingScalyrArrayInput
	LoggingSftps           ServiceComputeLoggingSftpArrayInput
	// The unique name for the Service to create
	Name pulumi.StringPtrInput
	// The `package` block supports uploading or modifying Wasm packages for use in a Fastly Compute@Edge service. See Fastly's documentation on [Compute@Edge](https://developer.fastly.com/learning/compute/)
	Package     ServiceComputePackageInput
	Papertrails ServiceComputePapertrailArrayInput
	S3loggings  ServiceComputeS3loggingArrayInput
	Splunks     ServiceComputeSplunkArrayInput
	Sumologics  ServiceComputeSumologicArrayInput
	Syslogs     ServiceComputeSyslogArrayInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
}

func (ServiceComputeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceComputeArgs)(nil)).Elem()
}

type ServiceComputeInput interface {
	pulumi.Input

	ToServiceComputeOutput() ServiceComputeOutput
	ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput
}

func (*ServiceCompute) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCompute)(nil))
}

func (i *ServiceCompute) ToServiceComputeOutput() ServiceComputeOutput {
	return i.ToServiceComputeOutputWithContext(context.Background())
}

func (i *ServiceCompute) ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeOutput)
}

func (i *ServiceCompute) ToServiceComputePtrOutput() ServiceComputePtrOutput {
	return i.ToServiceComputePtrOutputWithContext(context.Background())
}

func (i *ServiceCompute) ToServiceComputePtrOutputWithContext(ctx context.Context) ServiceComputePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePtrOutput)
}

type ServiceComputePtrInput interface {
	pulumi.Input

	ToServiceComputePtrOutput() ServiceComputePtrOutput
	ToServiceComputePtrOutputWithContext(ctx context.Context) ServiceComputePtrOutput
}

type serviceComputePtrType ServiceComputeArgs

func (*serviceComputePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCompute)(nil))
}

func (i *serviceComputePtrType) ToServiceComputePtrOutput() ServiceComputePtrOutput {
	return i.ToServiceComputePtrOutputWithContext(context.Background())
}

func (i *serviceComputePtrType) ToServiceComputePtrOutputWithContext(ctx context.Context) ServiceComputePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputePtrOutput)
}

// ServiceComputeArrayInput is an input type that accepts ServiceComputeArray and ServiceComputeArrayOutput values.
// You can construct a concrete instance of `ServiceComputeArrayInput` via:
//
//          ServiceComputeArray{ ServiceComputeArgs{...} }
type ServiceComputeArrayInput interface {
	pulumi.Input

	ToServiceComputeArrayOutput() ServiceComputeArrayOutput
	ToServiceComputeArrayOutputWithContext(context.Context) ServiceComputeArrayOutput
}

type ServiceComputeArray []ServiceComputeInput

func (ServiceComputeArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ServiceCompute)(nil))
}

func (i ServiceComputeArray) ToServiceComputeArrayOutput() ServiceComputeArrayOutput {
	return i.ToServiceComputeArrayOutputWithContext(context.Background())
}

func (i ServiceComputeArray) ToServiceComputeArrayOutputWithContext(ctx context.Context) ServiceComputeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeArrayOutput)
}

// ServiceComputeMapInput is an input type that accepts ServiceComputeMap and ServiceComputeMapOutput values.
// You can construct a concrete instance of `ServiceComputeMapInput` via:
//
//          ServiceComputeMap{ "key": ServiceComputeArgs{...} }
type ServiceComputeMapInput interface {
	pulumi.Input

	ToServiceComputeMapOutput() ServiceComputeMapOutput
	ToServiceComputeMapOutputWithContext(context.Context) ServiceComputeMapOutput
}

type ServiceComputeMap map[string]ServiceComputeInput

func (ServiceComputeMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ServiceCompute)(nil))
}

func (i ServiceComputeMap) ToServiceComputeMapOutput() ServiceComputeMapOutput {
	return i.ToServiceComputeMapOutputWithContext(context.Background())
}

func (i ServiceComputeMap) ToServiceComputeMapOutputWithContext(ctx context.Context) ServiceComputeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceComputeMapOutput)
}

type ServiceComputeOutput struct {
	*pulumi.OutputState
}

func (ServiceComputeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceCompute)(nil))
}

func (o ServiceComputeOutput) ToServiceComputeOutput() ServiceComputeOutput {
	return o
}

func (o ServiceComputeOutput) ToServiceComputeOutputWithContext(ctx context.Context) ServiceComputeOutput {
	return o
}

func (o ServiceComputeOutput) ToServiceComputePtrOutput() ServiceComputePtrOutput {
	return o.ToServiceComputePtrOutputWithContext(context.Background())
}

func (o ServiceComputeOutput) ToServiceComputePtrOutputWithContext(ctx context.Context) ServiceComputePtrOutput {
	return o.ApplyT(func(v ServiceCompute) *ServiceCompute {
		return &v
	}).(ServiceComputePtrOutput)
}

type ServiceComputePtrOutput struct {
	*pulumi.OutputState
}

func (ServiceComputePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceCompute)(nil))
}

func (o ServiceComputePtrOutput) ToServiceComputePtrOutput() ServiceComputePtrOutput {
	return o
}

func (o ServiceComputePtrOutput) ToServiceComputePtrOutputWithContext(ctx context.Context) ServiceComputePtrOutput {
	return o
}

type ServiceComputeArrayOutput struct{ *pulumi.OutputState }

func (ServiceComputeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceCompute)(nil))
}

func (o ServiceComputeArrayOutput) ToServiceComputeArrayOutput() ServiceComputeArrayOutput {
	return o
}

func (o ServiceComputeArrayOutput) ToServiceComputeArrayOutputWithContext(ctx context.Context) ServiceComputeArrayOutput {
	return o
}

func (o ServiceComputeArrayOutput) Index(i pulumi.IntInput) ServiceComputeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceCompute {
		return vs[0].([]ServiceCompute)[vs[1].(int)]
	}).(ServiceComputeOutput)
}

type ServiceComputeMapOutput struct{ *pulumi.OutputState }

func (ServiceComputeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceCompute)(nil))
}

func (o ServiceComputeMapOutput) ToServiceComputeMapOutput() ServiceComputeMapOutput {
	return o
}

func (o ServiceComputeMapOutput) ToServiceComputeMapOutputWithContext(ctx context.Context) ServiceComputeMapOutput {
	return o
}

func (o ServiceComputeMapOutput) MapIndex(k pulumi.StringInput) ServiceComputeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServiceCompute {
		return vs[0].(map[string]ServiceCompute)[vs[1].(string)]
	}).(ServiceComputeOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceComputeOutput{})
	pulumi.RegisterOutputType(ServiceComputePtrOutput{})
	pulumi.RegisterOutputType(ServiceComputeArrayOutput{})
	pulumi.RegisterOutputType(ServiceComputeMapOutput{})
}
