// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Fastly Next-Gen WAF Alert Jira integrations, which provide a connection to Jira.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafAlertJiraIntegration(ctx, "demo_jira_alert", &fastly.NgwafAlertJiraIntegrationArgs{
//				Description: pulumi.String("A description"),
//				Host:        pulumi.String("https://mycompany.atlassian.net"),
//				IssueType:   pulumi.String("task"),
//				Key:         pulumi.String("a1b2c3d4e5f6789012345678901234567"),
//				Project:     pulumi.String("test"),
//				Username:    pulumi.String("user"),
//				WorkspaceId: pulumi.Any(demo.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF Alert Jira integrations can be imported using their ID and the ID of the workspace they belong to.
//
// ```sh
// $ pulumi import fastly:index/ngwafAlertJiraIntegration:NgwafAlertJiraIntegration example <workspace_id>/<alert_id>
// ```
type NgwafAlertJiraIntegration struct {
	pulumi.CustomResourceState

	// The description of the alert.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the Jira instance.
	Host pulumi.StringOutput `pulumi:"host"`
	// The Jira issue type associated with the ticket.
	IssueType pulumi.StringPtrOutput `pulumi:"issueType"`
	// The Jira key.
	Key pulumi.StringOutput `pulumi:"key"`
	// The Jira project where the issue will be created.
	Project pulumi.StringOutput `pulumi:"project"`
	// The Jira username of the user who created the ticket.
	Username pulumi.StringOutput `pulumi:"username"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafAlertJiraIntegration registers a new resource with the given unique name, arguments, and options.
func NewNgwafAlertJiraIntegration(ctx *pulumi.Context,
	name string, args *NgwafAlertJiraIntegrationArgs, opts ...pulumi.ResourceOption) (*NgwafAlertJiraIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafAlertJiraIntegration
	err := ctx.RegisterResource("fastly:index/ngwafAlertJiraIntegration:NgwafAlertJiraIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafAlertJiraIntegration gets an existing NgwafAlertJiraIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafAlertJiraIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafAlertJiraIntegrationState, opts ...pulumi.ResourceOption) (*NgwafAlertJiraIntegration, error) {
	var resource NgwafAlertJiraIntegration
	err := ctx.ReadResource("fastly:index/ngwafAlertJiraIntegration:NgwafAlertJiraIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafAlertJiraIntegration resources.
type ngwafAlertJiraIntegrationState struct {
	// The description of the alert.
	Description *string `pulumi:"description"`
	// The name of the Jira instance.
	Host *string `pulumi:"host"`
	// The Jira issue type associated with the ticket.
	IssueType *string `pulumi:"issueType"`
	// The Jira key.
	Key *string `pulumi:"key"`
	// The Jira project where the issue will be created.
	Project *string `pulumi:"project"`
	// The Jira username of the user who created the ticket.
	Username *string `pulumi:"username"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafAlertJiraIntegrationState struct {
	// The description of the alert.
	Description pulumi.StringPtrInput
	// The name of the Jira instance.
	Host pulumi.StringPtrInput
	// The Jira issue type associated with the ticket.
	IssueType pulumi.StringPtrInput
	// The Jira key.
	Key pulumi.StringPtrInput
	// The Jira project where the issue will be created.
	Project pulumi.StringPtrInput
	// The Jira username of the user who created the ticket.
	Username pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafAlertJiraIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAlertJiraIntegrationState)(nil)).Elem()
}

type ngwafAlertJiraIntegrationArgs struct {
	// The description of the alert.
	Description *string `pulumi:"description"`
	// The name of the Jira instance.
	Host string `pulumi:"host"`
	// The Jira issue type associated with the ticket.
	IssueType *string `pulumi:"issueType"`
	// The Jira key.
	Key string `pulumi:"key"`
	// The Jira project where the issue will be created.
	Project string `pulumi:"project"`
	// The Jira username of the user who created the ticket.
	Username string `pulumi:"username"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafAlertJiraIntegration resource.
type NgwafAlertJiraIntegrationArgs struct {
	// The description of the alert.
	Description pulumi.StringPtrInput
	// The name of the Jira instance.
	Host pulumi.StringInput
	// The Jira issue type associated with the ticket.
	IssueType pulumi.StringPtrInput
	// The Jira key.
	Key pulumi.StringInput
	// The Jira project where the issue will be created.
	Project pulumi.StringInput
	// The Jira username of the user who created the ticket.
	Username pulumi.StringInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (NgwafAlertJiraIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAlertJiraIntegrationArgs)(nil)).Elem()
}

type NgwafAlertJiraIntegrationInput interface {
	pulumi.Input

	ToNgwafAlertJiraIntegrationOutput() NgwafAlertJiraIntegrationOutput
	ToNgwafAlertJiraIntegrationOutputWithContext(ctx context.Context) NgwafAlertJiraIntegrationOutput
}

func (*NgwafAlertJiraIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAlertJiraIntegration)(nil)).Elem()
}

func (i *NgwafAlertJiraIntegration) ToNgwafAlertJiraIntegrationOutput() NgwafAlertJiraIntegrationOutput {
	return i.ToNgwafAlertJiraIntegrationOutputWithContext(context.Background())
}

func (i *NgwafAlertJiraIntegration) ToNgwafAlertJiraIntegrationOutputWithContext(ctx context.Context) NgwafAlertJiraIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertJiraIntegrationOutput)
}

// NgwafAlertJiraIntegrationArrayInput is an input type that accepts NgwafAlertJiraIntegrationArray and NgwafAlertJiraIntegrationArrayOutput values.
// You can construct a concrete instance of `NgwafAlertJiraIntegrationArrayInput` via:
//
//	NgwafAlertJiraIntegrationArray{ NgwafAlertJiraIntegrationArgs{...} }
type NgwafAlertJiraIntegrationArrayInput interface {
	pulumi.Input

	ToNgwafAlertJiraIntegrationArrayOutput() NgwafAlertJiraIntegrationArrayOutput
	ToNgwafAlertJiraIntegrationArrayOutputWithContext(context.Context) NgwafAlertJiraIntegrationArrayOutput
}

type NgwafAlertJiraIntegrationArray []NgwafAlertJiraIntegrationInput

func (NgwafAlertJiraIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAlertJiraIntegration)(nil)).Elem()
}

func (i NgwafAlertJiraIntegrationArray) ToNgwafAlertJiraIntegrationArrayOutput() NgwafAlertJiraIntegrationArrayOutput {
	return i.ToNgwafAlertJiraIntegrationArrayOutputWithContext(context.Background())
}

func (i NgwafAlertJiraIntegrationArray) ToNgwafAlertJiraIntegrationArrayOutputWithContext(ctx context.Context) NgwafAlertJiraIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertJiraIntegrationArrayOutput)
}

// NgwafAlertJiraIntegrationMapInput is an input type that accepts NgwafAlertJiraIntegrationMap and NgwafAlertJiraIntegrationMapOutput values.
// You can construct a concrete instance of `NgwafAlertJiraIntegrationMapInput` via:
//
//	NgwafAlertJiraIntegrationMap{ "key": NgwafAlertJiraIntegrationArgs{...} }
type NgwafAlertJiraIntegrationMapInput interface {
	pulumi.Input

	ToNgwafAlertJiraIntegrationMapOutput() NgwafAlertJiraIntegrationMapOutput
	ToNgwafAlertJiraIntegrationMapOutputWithContext(context.Context) NgwafAlertJiraIntegrationMapOutput
}

type NgwafAlertJiraIntegrationMap map[string]NgwafAlertJiraIntegrationInput

func (NgwafAlertJiraIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAlertJiraIntegration)(nil)).Elem()
}

func (i NgwafAlertJiraIntegrationMap) ToNgwafAlertJiraIntegrationMapOutput() NgwafAlertJiraIntegrationMapOutput {
	return i.ToNgwafAlertJiraIntegrationMapOutputWithContext(context.Background())
}

func (i NgwafAlertJiraIntegrationMap) ToNgwafAlertJiraIntegrationMapOutputWithContext(ctx context.Context) NgwafAlertJiraIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertJiraIntegrationMapOutput)
}

type NgwafAlertJiraIntegrationOutput struct{ *pulumi.OutputState }

func (NgwafAlertJiraIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAlertJiraIntegration)(nil)).Elem()
}

func (o NgwafAlertJiraIntegrationOutput) ToNgwafAlertJiraIntegrationOutput() NgwafAlertJiraIntegrationOutput {
	return o
}

func (o NgwafAlertJiraIntegrationOutput) ToNgwafAlertJiraIntegrationOutputWithContext(ctx context.Context) NgwafAlertJiraIntegrationOutput {
	return o
}

// The description of the alert.
func (o NgwafAlertJiraIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafAlertJiraIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the Jira instance.
func (o NgwafAlertJiraIntegrationOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertJiraIntegration) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The Jira issue type associated with the ticket.
func (o NgwafAlertJiraIntegrationOutput) IssueType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafAlertJiraIntegration) pulumi.StringPtrOutput { return v.IssueType }).(pulumi.StringPtrOutput)
}

// The Jira key.
func (o NgwafAlertJiraIntegrationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertJiraIntegration) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The Jira project where the issue will be created.
func (o NgwafAlertJiraIntegrationOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertJiraIntegration) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The Jira username of the user who created the ticket.
func (o NgwafAlertJiraIntegrationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertJiraIntegration) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o NgwafAlertJiraIntegrationOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertJiraIntegration) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafAlertJiraIntegrationArrayOutput struct{ *pulumi.OutputState }

func (NgwafAlertJiraIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAlertJiraIntegration)(nil)).Elem()
}

func (o NgwafAlertJiraIntegrationArrayOutput) ToNgwafAlertJiraIntegrationArrayOutput() NgwafAlertJiraIntegrationArrayOutput {
	return o
}

func (o NgwafAlertJiraIntegrationArrayOutput) ToNgwafAlertJiraIntegrationArrayOutputWithContext(ctx context.Context) NgwafAlertJiraIntegrationArrayOutput {
	return o
}

func (o NgwafAlertJiraIntegrationArrayOutput) Index(i pulumi.IntInput) NgwafAlertJiraIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafAlertJiraIntegration {
		return vs[0].([]*NgwafAlertJiraIntegration)[vs[1].(int)]
	}).(NgwafAlertJiraIntegrationOutput)
}

type NgwafAlertJiraIntegrationMapOutput struct{ *pulumi.OutputState }

func (NgwafAlertJiraIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAlertJiraIntegration)(nil)).Elem()
}

func (o NgwafAlertJiraIntegrationMapOutput) ToNgwafAlertJiraIntegrationMapOutput() NgwafAlertJiraIntegrationMapOutput {
	return o
}

func (o NgwafAlertJiraIntegrationMapOutput) ToNgwafAlertJiraIntegrationMapOutputWithContext(ctx context.Context) NgwafAlertJiraIntegrationMapOutput {
	return o
}

func (o NgwafAlertJiraIntegrationMapOutput) MapIndex(k pulumi.StringInput) NgwafAlertJiraIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafAlertJiraIntegration {
		return vs[0].(map[string]*NgwafAlertJiraIntegration)[vs[1].(string)]
	}).(NgwafAlertJiraIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertJiraIntegrationInput)(nil)).Elem(), &NgwafAlertJiraIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertJiraIntegrationArrayInput)(nil)).Elem(), NgwafAlertJiraIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertJiraIntegrationMapInput)(nil)).Elem(), NgwafAlertJiraIntegrationMap{})
	pulumi.RegisterOutputType(NgwafAlertJiraIntegrationOutput{})
	pulumi.RegisterOutputType(NgwafAlertJiraIntegrationArrayOutput{})
	pulumi.RegisterOutputType(NgwafAlertJiraIntegrationMapOutput{})
}
