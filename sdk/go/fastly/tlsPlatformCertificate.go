// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uploads a TLS certificate to the Fastly Platform TLS service.
//
// > Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate.
//
// ## Example Usage
//
// Basic usage with self-signed CA:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v5/go/fastly"
//	"github.com/pulumi/pulumi-tls/sdk/v4/go/tls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			caKey, err := tls.NewPrivateKey(ctx, "caKey", &tls.PrivateKeyArgs{
//				Algorithm: pulumi.String("RSA"),
//			})
//			if err != nil {
//				return err
//			}
//			keyPrivateKey, err := tls.NewPrivateKey(ctx, "keyPrivateKey", &tls.PrivateKeyArgs{
//				Algorithm: pulumi.String("RSA"),
//			})
//			if err != nil {
//				return err
//			}
//			ca, err := tls.NewSelfSignedCert(ctx, "ca", &tls.SelfSignedCertArgs{
//				KeyAlgorithm:  caKey.Algorithm,
//				PrivateKeyPem: caKey.PrivateKeyPem,
//				Subjects: tls.SelfSignedCertSubjectArray{
//					&tls.SelfSignedCertSubjectArgs{
//						CommonName: pulumi.String("Example CA"),
//					},
//				},
//				IsCaCertificate:     pulumi.Bool(true),
//				ValidityPeriodHours: pulumi.Int(360),
//				AllowedUses: pulumi.StringArray{
//					pulumi.String("cert_signing"),
//					pulumi.String("server_auth"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example, err := tls.NewCertRequest(ctx, "example", &tls.CertRequestArgs{
//				KeyAlgorithm:  keyPrivateKey.Algorithm,
//				PrivateKeyPem: keyPrivateKey.PrivateKeyPem,
//				Subjects: tls.CertRequestSubjectArray{
//					&tls.CertRequestSubjectArgs{
//						CommonName: pulumi.String("example.com"),
//					},
//				},
//				DnsNames: pulumi.StringArray{
//					pulumi.String("example.com"),
//					pulumi.String("www.example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			certLocallySignedCert, err := tls.NewLocallySignedCert(ctx, "certLocallySignedCert", &tls.LocallySignedCertArgs{
//				CertRequestPem:      example.CertRequestPem,
//				CaKeyAlgorithm:      caKey.Algorithm,
//				CaPrivateKeyPem:     caKey.PrivateKeyPem,
//				CaCertPem:           ca.CertPem,
//				ValidityPeriodHours: pulumi.Int(360),
//				AllowedUses: pulumi.StringArray{
//					pulumi.String("cert_signing"),
//					pulumi.String("server_auth"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			config, err := fastly.GetTlsConfiguration(ctx, &fastly.GetTlsConfigurationArgs{
//				TlsService: pulumi.StringRef("PLATFORM"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			keyTlsPrivateKey, err := fastly.NewTlsPrivateKey(ctx, "keyTlsPrivateKey", &fastly.TlsPrivateKeyArgs{
//				KeyPem: keyPrivateKey.PrivateKeyPem,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewTlsPlatformCertificate(ctx, "certTlsPlatformCertificate", &fastly.TlsPlatformCertificateArgs{
//				CertificateBody:    certLocallySignedCert.CertPem,
//				IntermediatesBlob:  ca.CertPem,
//				ConfigurationId:    *pulumi.String(config.Id),
//				AllowUntrustedRoot: pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				keyTlsPrivateKey,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A certificate can be imported using its Fastly certificate ID, e.g.
//
// ```sh
//
//	$ pulumi import fastly:index/tlsPlatformCertificate:TlsPlatformCertificate demo xxxxxxxxxxx
//
// ```
type TlsPlatformCertificate struct {
	pulumi.CustomResourceState

	// Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
	AllowUntrustedRoot pulumi.BoolPtrOutput `pulumi:"allowUntrustedRoot"`
	// PEM-formatted certificate.
	CertificateBody pulumi.StringOutput `pulumi:"certificateBody"`
	// ID of TLS configuration to be used to terminate TLS traffic.
	ConfigurationId pulumi.StringOutput `pulumi:"configurationId"`
	// Timestamp (GMT) when the certificate was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.
	Domains pulumi.StringArrayOutput `pulumi:"domains"`
	// PEM-formatted certificate chain from the `certificateBody` to its root.
	IntermediatesBlob pulumi.StringOutput `pulumi:"intermediatesBlob"`
	// Timestamp (GMT) when the certificate will expire.
	NotAfter pulumi.StringOutput `pulumi:"notAfter"`
	// Timestamp (GMT) when the certificate will become valid.
	NotBefore pulumi.StringOutput `pulumi:"notBefore"`
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace pulumi.BoolOutput `pulumi:"replace"`
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTlsPlatformCertificate registers a new resource with the given unique name, arguments, and options.
func NewTlsPlatformCertificate(ctx *pulumi.Context,
	name string, args *TlsPlatformCertificateArgs, opts ...pulumi.ResourceOption) (*TlsPlatformCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateBody == nil {
		return nil, errors.New("invalid value for required argument 'CertificateBody'")
	}
	if args.ConfigurationId == nil {
		return nil, errors.New("invalid value for required argument 'ConfigurationId'")
	}
	if args.IntermediatesBlob == nil {
		return nil, errors.New("invalid value for required argument 'IntermediatesBlob'")
	}
	var resource TlsPlatformCertificate
	err := ctx.RegisterResource("fastly:index/tlsPlatformCertificate:TlsPlatformCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsPlatformCertificate gets an existing TlsPlatformCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsPlatformCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsPlatformCertificateState, opts ...pulumi.ResourceOption) (*TlsPlatformCertificate, error) {
	var resource TlsPlatformCertificate
	err := ctx.ReadResource("fastly:index/tlsPlatformCertificate:TlsPlatformCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsPlatformCertificate resources.
type tlsPlatformCertificateState struct {
	// Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
	AllowUntrustedRoot *bool `pulumi:"allowUntrustedRoot"`
	// PEM-formatted certificate.
	CertificateBody *string `pulumi:"certificateBody"`
	// ID of TLS configuration to be used to terminate TLS traffic.
	ConfigurationId *string `pulumi:"configurationId"`
	// Timestamp (GMT) when the certificate was created.
	CreatedAt *string `pulumi:"createdAt"`
	// All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.
	Domains []string `pulumi:"domains"`
	// PEM-formatted certificate chain from the `certificateBody` to its root.
	IntermediatesBlob *string `pulumi:"intermediatesBlob"`
	// Timestamp (GMT) when the certificate will expire.
	NotAfter *string `pulumi:"notAfter"`
	// Timestamp (GMT) when the certificate will become valid.
	NotBefore *string `pulumi:"notBefore"`
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace *bool `pulumi:"replace"`
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TlsPlatformCertificateState struct {
	// Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
	AllowUntrustedRoot pulumi.BoolPtrInput
	// PEM-formatted certificate.
	CertificateBody pulumi.StringPtrInput
	// ID of TLS configuration to be used to terminate TLS traffic.
	ConfigurationId pulumi.StringPtrInput
	// Timestamp (GMT) when the certificate was created.
	CreatedAt pulumi.StringPtrInput
	// All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.
	Domains pulumi.StringArrayInput
	// PEM-formatted certificate chain from the `certificateBody` to its root.
	IntermediatesBlob pulumi.StringPtrInput
	// Timestamp (GMT) when the certificate will expire.
	NotAfter pulumi.StringPtrInput
	// Timestamp (GMT) when the certificate will become valid.
	NotBefore pulumi.StringPtrInput
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace pulumi.BoolPtrInput
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (TlsPlatformCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsPlatformCertificateState)(nil)).Elem()
}

type tlsPlatformCertificateArgs struct {
	// Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
	AllowUntrustedRoot *bool `pulumi:"allowUntrustedRoot"`
	// PEM-formatted certificate.
	CertificateBody string `pulumi:"certificateBody"`
	// ID of TLS configuration to be used to terminate TLS traffic.
	ConfigurationId string `pulumi:"configurationId"`
	// PEM-formatted certificate chain from the `certificateBody` to its root.
	IntermediatesBlob string `pulumi:"intermediatesBlob"`
}

// The set of arguments for constructing a TlsPlatformCertificate resource.
type TlsPlatformCertificateArgs struct {
	// Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
	AllowUntrustedRoot pulumi.BoolPtrInput
	// PEM-formatted certificate.
	CertificateBody pulumi.StringInput
	// ID of TLS configuration to be used to terminate TLS traffic.
	ConfigurationId pulumi.StringInput
	// PEM-formatted certificate chain from the `certificateBody` to its root.
	IntermediatesBlob pulumi.StringInput
}

func (TlsPlatformCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsPlatformCertificateArgs)(nil)).Elem()
}

type TlsPlatformCertificateInput interface {
	pulumi.Input

	ToTlsPlatformCertificateOutput() TlsPlatformCertificateOutput
	ToTlsPlatformCertificateOutputWithContext(ctx context.Context) TlsPlatformCertificateOutput
}

func (*TlsPlatformCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsPlatformCertificate)(nil)).Elem()
}

func (i *TlsPlatformCertificate) ToTlsPlatformCertificateOutput() TlsPlatformCertificateOutput {
	return i.ToTlsPlatformCertificateOutputWithContext(context.Background())
}

func (i *TlsPlatformCertificate) ToTlsPlatformCertificateOutputWithContext(ctx context.Context) TlsPlatformCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsPlatformCertificateOutput)
}

// TlsPlatformCertificateArrayInput is an input type that accepts TlsPlatformCertificateArray and TlsPlatformCertificateArrayOutput values.
// You can construct a concrete instance of `TlsPlatformCertificateArrayInput` via:
//
//	TlsPlatformCertificateArray{ TlsPlatformCertificateArgs{...} }
type TlsPlatformCertificateArrayInput interface {
	pulumi.Input

	ToTlsPlatformCertificateArrayOutput() TlsPlatformCertificateArrayOutput
	ToTlsPlatformCertificateArrayOutputWithContext(context.Context) TlsPlatformCertificateArrayOutput
}

type TlsPlatformCertificateArray []TlsPlatformCertificateInput

func (TlsPlatformCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsPlatformCertificate)(nil)).Elem()
}

func (i TlsPlatformCertificateArray) ToTlsPlatformCertificateArrayOutput() TlsPlatformCertificateArrayOutput {
	return i.ToTlsPlatformCertificateArrayOutputWithContext(context.Background())
}

func (i TlsPlatformCertificateArray) ToTlsPlatformCertificateArrayOutputWithContext(ctx context.Context) TlsPlatformCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsPlatformCertificateArrayOutput)
}

// TlsPlatformCertificateMapInput is an input type that accepts TlsPlatformCertificateMap and TlsPlatformCertificateMapOutput values.
// You can construct a concrete instance of `TlsPlatformCertificateMapInput` via:
//
//	TlsPlatformCertificateMap{ "key": TlsPlatformCertificateArgs{...} }
type TlsPlatformCertificateMapInput interface {
	pulumi.Input

	ToTlsPlatformCertificateMapOutput() TlsPlatformCertificateMapOutput
	ToTlsPlatformCertificateMapOutputWithContext(context.Context) TlsPlatformCertificateMapOutput
}

type TlsPlatformCertificateMap map[string]TlsPlatformCertificateInput

func (TlsPlatformCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsPlatformCertificate)(nil)).Elem()
}

func (i TlsPlatformCertificateMap) ToTlsPlatformCertificateMapOutput() TlsPlatformCertificateMapOutput {
	return i.ToTlsPlatformCertificateMapOutputWithContext(context.Background())
}

func (i TlsPlatformCertificateMap) ToTlsPlatformCertificateMapOutputWithContext(ctx context.Context) TlsPlatformCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsPlatformCertificateMapOutput)
}

type TlsPlatformCertificateOutput struct{ *pulumi.OutputState }

func (TlsPlatformCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsPlatformCertificate)(nil)).Elem()
}

func (o TlsPlatformCertificateOutput) ToTlsPlatformCertificateOutput() TlsPlatformCertificateOutput {
	return o
}

func (o TlsPlatformCertificateOutput) ToTlsPlatformCertificateOutputWithContext(ctx context.Context) TlsPlatformCertificateOutput {
	return o
}

// Disable checking whether the root of the certificate chain is trusted. Useful for development purposes to allow use of self-signed CAs. Defaults to false. Write-only on create.
func (o TlsPlatformCertificateOutput) AllowUntrustedRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.BoolPtrOutput { return v.AllowUntrustedRoot }).(pulumi.BoolPtrOutput)
}

// PEM-formatted certificate.
func (o TlsPlatformCertificateOutput) CertificateBody() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.StringOutput { return v.CertificateBody }).(pulumi.StringOutput)
}

// ID of TLS configuration to be used to terminate TLS traffic.
func (o TlsPlatformCertificateOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.StringOutput { return v.ConfigurationId }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the certificate was created.
func (o TlsPlatformCertificateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// All the domains (including wildcard domains) that are listed in any certificate's Subject Alternative Names (SAN) list.
func (o TlsPlatformCertificateOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.StringArrayOutput { return v.Domains }).(pulumi.StringArrayOutput)
}

// PEM-formatted certificate chain from the `certificateBody` to its root.
func (o TlsPlatformCertificateOutput) IntermediatesBlob() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.StringOutput { return v.IntermediatesBlob }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the certificate will expire.
func (o TlsPlatformCertificateOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.StringOutput { return v.NotAfter }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the certificate will become valid.
func (o TlsPlatformCertificateOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.StringOutput { return v.NotBefore }).(pulumi.StringOutput)
}

// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
func (o TlsPlatformCertificateOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.BoolOutput { return v.Replace }).(pulumi.BoolOutput)
}

// Timestamp (GMT) when the certificate was last updated.
func (o TlsPlatformCertificateOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPlatformCertificate) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TlsPlatformCertificateArrayOutput struct{ *pulumi.OutputState }

func (TlsPlatformCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsPlatformCertificate)(nil)).Elem()
}

func (o TlsPlatformCertificateArrayOutput) ToTlsPlatformCertificateArrayOutput() TlsPlatformCertificateArrayOutput {
	return o
}

func (o TlsPlatformCertificateArrayOutput) ToTlsPlatformCertificateArrayOutputWithContext(ctx context.Context) TlsPlatformCertificateArrayOutput {
	return o
}

func (o TlsPlatformCertificateArrayOutput) Index(i pulumi.IntInput) TlsPlatformCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TlsPlatformCertificate {
		return vs[0].([]*TlsPlatformCertificate)[vs[1].(int)]
	}).(TlsPlatformCertificateOutput)
}

type TlsPlatformCertificateMapOutput struct{ *pulumi.OutputState }

func (TlsPlatformCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsPlatformCertificate)(nil)).Elem()
}

func (o TlsPlatformCertificateMapOutput) ToTlsPlatformCertificateMapOutput() TlsPlatformCertificateMapOutput {
	return o
}

func (o TlsPlatformCertificateMapOutput) ToTlsPlatformCertificateMapOutputWithContext(ctx context.Context) TlsPlatformCertificateMapOutput {
	return o
}

func (o TlsPlatformCertificateMapOutput) MapIndex(k pulumi.StringInput) TlsPlatformCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TlsPlatformCertificate {
		return vs[0].(map[string]*TlsPlatformCertificate)[vs[1].(string)]
	}).(TlsPlatformCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsPlatformCertificateInput)(nil)).Elem(), &TlsPlatformCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsPlatformCertificateArrayInput)(nil)).Elem(), TlsPlatformCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsPlatformCertificateMapInput)(nil)).Elem(), TlsPlatformCertificateMap{})
	pulumi.RegisterOutputType(TlsPlatformCertificateOutput{})
	pulumi.RegisterOutputType(TlsPlatformCertificateArrayOutput{})
	pulumi.RegisterOutputType(TlsPlatformCertificateMapOutput{})
}
