// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleKvstore, err := fastly.NewKvstore(ctx, "exampleKvstore", nil)
//			if err != nil {
//				return err
//			}
//			examplePackageHash, err := fastly.GetPackageHash(ctx, &fastly.GetPackageHashArgs{
//				Filename: pulumi.StringRef("package.tar.gz"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewServiceCompute(ctx, "exampleServiceCompute", &fastly.ServiceComputeArgs{
//				Domains: fastly.ServiceComputeDomainArray{
//					&fastly.ServiceComputeDomainArgs{
//						Name: pulumi.String("demo.example.com"),
//					},
//				},
//				Package: &fastly.ServiceComputePackageArgs{
//					Filename:       pulumi.String("package.tar.gz"),
//					SourceCodeHash: *pulumi.String(examplePackageHash.Hash),
//				},
//				ResourceLinks: fastly.ServiceComputeResourceLinkArray{
//					&fastly.ServiceComputeResourceLinkArgs{
//						Name:       pulumi.String("my_resource_link"),
//						ResourceId: exampleKvstore.ID(),
//					},
//				},
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly KV Stores can be imported using their Store ID, e.g.
//
// ```sh
//
//	$ pulumi import fastly:index/kvstore:Kvstore example xxxxxxxxxxxxxxxxxxxx
//
// ```
type Kvstore struct {
	pulumi.CustomResourceState

	// Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewKvstore registers a new resource with the given unique name, arguments, and options.
func NewKvstore(ctx *pulumi.Context,
	name string, args *KvstoreArgs, opts ...pulumi.ResourceOption) (*Kvstore, error) {
	if args == nil {
		args = &KvstoreArgs{}
	}

	var resource Kvstore
	err := ctx.RegisterResource("fastly:index/kvstore:Kvstore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKvstore gets an existing Kvstore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKvstore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KvstoreState, opts ...pulumi.ResourceOption) (*Kvstore, error) {
	var resource Kvstore
	err := ctx.ReadResource("fastly:index/kvstore:Kvstore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Kvstore resources.
type kvstoreState struct {
	// Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
	Name *string `pulumi:"name"`
}

type KvstoreState struct {
	// Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput
	// A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
	Name pulumi.StringPtrInput
}

func (KvstoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*kvstoreState)(nil)).Elem()
}

type kvstoreArgs struct {
	// Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Kvstore resource.
type KvstoreArgs struct {
	// Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput
	// A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
	Name pulumi.StringPtrInput
}

func (KvstoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kvstoreArgs)(nil)).Elem()
}

type KvstoreInput interface {
	pulumi.Input

	ToKvstoreOutput() KvstoreOutput
	ToKvstoreOutputWithContext(ctx context.Context) KvstoreOutput
}

func (*Kvstore) ElementType() reflect.Type {
	return reflect.TypeOf((**Kvstore)(nil)).Elem()
}

func (i *Kvstore) ToKvstoreOutput() KvstoreOutput {
	return i.ToKvstoreOutputWithContext(context.Background())
}

func (i *Kvstore) ToKvstoreOutputWithContext(ctx context.Context) KvstoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KvstoreOutput)
}

// KvstoreArrayInput is an input type that accepts KvstoreArray and KvstoreArrayOutput values.
// You can construct a concrete instance of `KvstoreArrayInput` via:
//
//	KvstoreArray{ KvstoreArgs{...} }
type KvstoreArrayInput interface {
	pulumi.Input

	ToKvstoreArrayOutput() KvstoreArrayOutput
	ToKvstoreArrayOutputWithContext(context.Context) KvstoreArrayOutput
}

type KvstoreArray []KvstoreInput

func (KvstoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kvstore)(nil)).Elem()
}

func (i KvstoreArray) ToKvstoreArrayOutput() KvstoreArrayOutput {
	return i.ToKvstoreArrayOutputWithContext(context.Background())
}

func (i KvstoreArray) ToKvstoreArrayOutputWithContext(ctx context.Context) KvstoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KvstoreArrayOutput)
}

// KvstoreMapInput is an input type that accepts KvstoreMap and KvstoreMapOutput values.
// You can construct a concrete instance of `KvstoreMapInput` via:
//
//	KvstoreMap{ "key": KvstoreArgs{...} }
type KvstoreMapInput interface {
	pulumi.Input

	ToKvstoreMapOutput() KvstoreMapOutput
	ToKvstoreMapOutputWithContext(context.Context) KvstoreMapOutput
}

type KvstoreMap map[string]KvstoreInput

func (KvstoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kvstore)(nil)).Elem()
}

func (i KvstoreMap) ToKvstoreMapOutput() KvstoreMapOutput {
	return i.ToKvstoreMapOutputWithContext(context.Background())
}

func (i KvstoreMap) ToKvstoreMapOutputWithContext(ctx context.Context) KvstoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KvstoreMapOutput)
}

type KvstoreOutput struct{ *pulumi.OutputState }

func (KvstoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Kvstore)(nil)).Elem()
}

func (o KvstoreOutput) ToKvstoreOutput() KvstoreOutput {
	return o
}

func (o KvstoreOutput) ToKvstoreOutputWithContext(ctx context.Context) KvstoreOutput {
	return o
}

// Allow the KV Store to be deleted, even if it contains entries. Defaults to false.
func (o KvstoreOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Kvstore) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// A unique name to identify the KV Store. It is important to note that changing this attribute will delete and recreate the KV Store, and discard the current entries. You MUST first delete the associated resourceLink block from your service before modifying this field.
func (o KvstoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Kvstore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type KvstoreArrayOutput struct{ *pulumi.OutputState }

func (KvstoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Kvstore)(nil)).Elem()
}

func (o KvstoreArrayOutput) ToKvstoreArrayOutput() KvstoreArrayOutput {
	return o
}

func (o KvstoreArrayOutput) ToKvstoreArrayOutputWithContext(ctx context.Context) KvstoreArrayOutput {
	return o
}

func (o KvstoreArrayOutput) Index(i pulumi.IntInput) KvstoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Kvstore {
		return vs[0].([]*Kvstore)[vs[1].(int)]
	}).(KvstoreOutput)
}

type KvstoreMapOutput struct{ *pulumi.OutputState }

func (KvstoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Kvstore)(nil)).Elem()
}

func (o KvstoreMapOutput) ToKvstoreMapOutput() KvstoreMapOutput {
	return o
}

func (o KvstoreMapOutput) ToKvstoreMapOutputWithContext(ctx context.Context) KvstoreMapOutput {
	return o
}

func (o KvstoreMapOutput) MapIndex(k pulumi.StringInput) KvstoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Kvstore {
		return vs[0].(map[string]*Kvstore)[vs[1].(string)]
	}).(KvstoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KvstoreInput)(nil)).Elem(), &Kvstore{})
	pulumi.RegisterInputType(reflect.TypeOf((*KvstoreArrayInput)(nil)).Elem(), KvstoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KvstoreMapInput)(nil)).Elem(), KvstoreMap{})
	pulumi.RegisterOutputType(KvstoreOutput{})
	pulumi.RegisterOutputType(KvstoreArrayOutput{})
	pulumi.RegisterOutputType(KvstoreMapOutput{})
}
