// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// ## Import
//
// This is an example of the import command being applied to the resource named `fastly_service_dynamic_snippet_content.content` The resource ID is a combined value of the `service_id` and `snippet_id` separated by a forward slash.
//
// ```sh
//
//	$ pulumi import fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent content xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
//
// ```
//
//	If Terraform is already managing remote content against a resource being imported then the user will be asked to remove it from the existing Terraform state. The following is an example of the Terraform state command to remove the resource named `fastly_service_dynamic_snippet_content.content` from the Terraform state file. $ terraform state rm fastly_service_dynamic_snippet_content.content
type ServiceDynamicSnippetContent struct {
	pulumi.CustomResourceState

	// The VCL code that specifies exactly what the snippet does
	Content pulumi.StringOutput `pulumi:"content"`
	// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
	ManageSnippets pulumi.BoolPtrOutput `pulumi:"manageSnippets"`
	// The ID of the service that the dynamic snippet belongs to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The ID of the dynamic snippet that the content belong to
	SnippetId pulumi.StringOutput `pulumi:"snippetId"`
}

// NewServiceDynamicSnippetContent registers a new resource with the given unique name, arguments, and options.
func NewServiceDynamicSnippetContent(ctx *pulumi.Context,
	name string, args *ServiceDynamicSnippetContentArgs, opts ...pulumi.ResourceOption) (*ServiceDynamicSnippetContent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.SnippetId == nil {
		return nil, errors.New("invalid value for required argument 'SnippetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceDynamicSnippetContent
	err := ctx.RegisterResource("fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceDynamicSnippetContent gets an existing ServiceDynamicSnippetContent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceDynamicSnippetContent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceDynamicSnippetContentState, opts ...pulumi.ResourceOption) (*ServiceDynamicSnippetContent, error) {
	var resource ServiceDynamicSnippetContent
	err := ctx.ReadResource("fastly:index/serviceDynamicSnippetContent:ServiceDynamicSnippetContent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceDynamicSnippetContent resources.
type serviceDynamicSnippetContentState struct {
	// The VCL code that specifies exactly what the snippet does
	Content *string `pulumi:"content"`
	// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
	ManageSnippets *bool `pulumi:"manageSnippets"`
	// The ID of the service that the dynamic snippet belongs to
	ServiceId *string `pulumi:"serviceId"`
	// The ID of the dynamic snippet that the content belong to
	SnippetId *string `pulumi:"snippetId"`
}

type ServiceDynamicSnippetContentState struct {
	// The VCL code that specifies exactly what the snippet does
	Content pulumi.StringPtrInput
	// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
	ManageSnippets pulumi.BoolPtrInput
	// The ID of the service that the dynamic snippet belongs to
	ServiceId pulumi.StringPtrInput
	// The ID of the dynamic snippet that the content belong to
	SnippetId pulumi.StringPtrInput
}

func (ServiceDynamicSnippetContentState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDynamicSnippetContentState)(nil)).Elem()
}

type serviceDynamicSnippetContentArgs struct {
	// The VCL code that specifies exactly what the snippet does
	Content string `pulumi:"content"`
	// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
	ManageSnippets *bool `pulumi:"manageSnippets"`
	// The ID of the service that the dynamic snippet belongs to
	ServiceId string `pulumi:"serviceId"`
	// The ID of the dynamic snippet that the content belong to
	SnippetId string `pulumi:"snippetId"`
}

// The set of arguments for constructing a ServiceDynamicSnippetContent resource.
type ServiceDynamicSnippetContentArgs struct {
	// The VCL code that specifies exactly what the snippet does
	Content pulumi.StringInput
	// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
	ManageSnippets pulumi.BoolPtrInput
	// The ID of the service that the dynamic snippet belongs to
	ServiceId pulumi.StringInput
	// The ID of the dynamic snippet that the content belong to
	SnippetId pulumi.StringInput
}

func (ServiceDynamicSnippetContentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDynamicSnippetContentArgs)(nil)).Elem()
}

type ServiceDynamicSnippetContentInput interface {
	pulumi.Input

	ToServiceDynamicSnippetContentOutput() ServiceDynamicSnippetContentOutput
	ToServiceDynamicSnippetContentOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentOutput
}

func (*ServiceDynamicSnippetContent) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDynamicSnippetContent)(nil)).Elem()
}

func (i *ServiceDynamicSnippetContent) ToServiceDynamicSnippetContentOutput() ServiceDynamicSnippetContentOutput {
	return i.ToServiceDynamicSnippetContentOutputWithContext(context.Background())
}

func (i *ServiceDynamicSnippetContent) ToServiceDynamicSnippetContentOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDynamicSnippetContentOutput)
}

func (i *ServiceDynamicSnippetContent) ToOutput(ctx context.Context) pulumix.Output[*ServiceDynamicSnippetContent] {
	return pulumix.Output[*ServiceDynamicSnippetContent]{
		OutputState: i.ToServiceDynamicSnippetContentOutputWithContext(ctx).OutputState,
	}
}

// ServiceDynamicSnippetContentArrayInput is an input type that accepts ServiceDynamicSnippetContentArray and ServiceDynamicSnippetContentArrayOutput values.
// You can construct a concrete instance of `ServiceDynamicSnippetContentArrayInput` via:
//
//	ServiceDynamicSnippetContentArray{ ServiceDynamicSnippetContentArgs{...} }
type ServiceDynamicSnippetContentArrayInput interface {
	pulumi.Input

	ToServiceDynamicSnippetContentArrayOutput() ServiceDynamicSnippetContentArrayOutput
	ToServiceDynamicSnippetContentArrayOutputWithContext(context.Context) ServiceDynamicSnippetContentArrayOutput
}

type ServiceDynamicSnippetContentArray []ServiceDynamicSnippetContentInput

func (ServiceDynamicSnippetContentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDynamicSnippetContent)(nil)).Elem()
}

func (i ServiceDynamicSnippetContentArray) ToServiceDynamicSnippetContentArrayOutput() ServiceDynamicSnippetContentArrayOutput {
	return i.ToServiceDynamicSnippetContentArrayOutputWithContext(context.Background())
}

func (i ServiceDynamicSnippetContentArray) ToServiceDynamicSnippetContentArrayOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDynamicSnippetContentArrayOutput)
}

func (i ServiceDynamicSnippetContentArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceDynamicSnippetContent] {
	return pulumix.Output[[]*ServiceDynamicSnippetContent]{
		OutputState: i.ToServiceDynamicSnippetContentArrayOutputWithContext(ctx).OutputState,
	}
}

// ServiceDynamicSnippetContentMapInput is an input type that accepts ServiceDynamicSnippetContentMap and ServiceDynamicSnippetContentMapOutput values.
// You can construct a concrete instance of `ServiceDynamicSnippetContentMapInput` via:
//
//	ServiceDynamicSnippetContentMap{ "key": ServiceDynamicSnippetContentArgs{...} }
type ServiceDynamicSnippetContentMapInput interface {
	pulumi.Input

	ToServiceDynamicSnippetContentMapOutput() ServiceDynamicSnippetContentMapOutput
	ToServiceDynamicSnippetContentMapOutputWithContext(context.Context) ServiceDynamicSnippetContentMapOutput
}

type ServiceDynamicSnippetContentMap map[string]ServiceDynamicSnippetContentInput

func (ServiceDynamicSnippetContentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDynamicSnippetContent)(nil)).Elem()
}

func (i ServiceDynamicSnippetContentMap) ToServiceDynamicSnippetContentMapOutput() ServiceDynamicSnippetContentMapOutput {
	return i.ToServiceDynamicSnippetContentMapOutputWithContext(context.Background())
}

func (i ServiceDynamicSnippetContentMap) ToServiceDynamicSnippetContentMapOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDynamicSnippetContentMapOutput)
}

func (i ServiceDynamicSnippetContentMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceDynamicSnippetContent] {
	return pulumix.Output[map[string]*ServiceDynamicSnippetContent]{
		OutputState: i.ToServiceDynamicSnippetContentMapOutputWithContext(ctx).OutputState,
	}
}

type ServiceDynamicSnippetContentOutput struct{ *pulumi.OutputState }

func (ServiceDynamicSnippetContentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDynamicSnippetContent)(nil)).Elem()
}

func (o ServiceDynamicSnippetContentOutput) ToServiceDynamicSnippetContentOutput() ServiceDynamicSnippetContentOutput {
	return o
}

func (o ServiceDynamicSnippetContentOutput) ToServiceDynamicSnippetContentOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentOutput {
	return o
}

func (o ServiceDynamicSnippetContentOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceDynamicSnippetContent] {
	return pulumix.Output[*ServiceDynamicSnippetContent]{
		OutputState: o.OutputState,
	}
}

// The VCL code that specifies exactly what the snippet does
func (o ServiceDynamicSnippetContentOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDynamicSnippetContent) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Whether to reapply changes if the state of the snippets drifts, i.e. if snippets are managed externally
func (o ServiceDynamicSnippetContentOutput) ManageSnippets() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDynamicSnippetContent) pulumi.BoolPtrOutput { return v.ManageSnippets }).(pulumi.BoolPtrOutput)
}

// The ID of the service that the dynamic snippet belongs to
func (o ServiceDynamicSnippetContentOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDynamicSnippetContent) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// The ID of the dynamic snippet that the content belong to
func (o ServiceDynamicSnippetContentOutput) SnippetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDynamicSnippetContent) pulumi.StringOutput { return v.SnippetId }).(pulumi.StringOutput)
}

type ServiceDynamicSnippetContentArrayOutput struct{ *pulumi.OutputState }

func (ServiceDynamicSnippetContentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDynamicSnippetContent)(nil)).Elem()
}

func (o ServiceDynamicSnippetContentArrayOutput) ToServiceDynamicSnippetContentArrayOutput() ServiceDynamicSnippetContentArrayOutput {
	return o
}

func (o ServiceDynamicSnippetContentArrayOutput) ToServiceDynamicSnippetContentArrayOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentArrayOutput {
	return o
}

func (o ServiceDynamicSnippetContentArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceDynamicSnippetContent] {
	return pulumix.Output[[]*ServiceDynamicSnippetContent]{
		OutputState: o.OutputState,
	}
}

func (o ServiceDynamicSnippetContentArrayOutput) Index(i pulumi.IntInput) ServiceDynamicSnippetContentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceDynamicSnippetContent {
		return vs[0].([]*ServiceDynamicSnippetContent)[vs[1].(int)]
	}).(ServiceDynamicSnippetContentOutput)
}

type ServiceDynamicSnippetContentMapOutput struct{ *pulumi.OutputState }

func (ServiceDynamicSnippetContentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDynamicSnippetContent)(nil)).Elem()
}

func (o ServiceDynamicSnippetContentMapOutput) ToServiceDynamicSnippetContentMapOutput() ServiceDynamicSnippetContentMapOutput {
	return o
}

func (o ServiceDynamicSnippetContentMapOutput) ToServiceDynamicSnippetContentMapOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentMapOutput {
	return o
}

func (o ServiceDynamicSnippetContentMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceDynamicSnippetContent] {
	return pulumix.Output[map[string]*ServiceDynamicSnippetContent]{
		OutputState: o.OutputState,
	}
}

func (o ServiceDynamicSnippetContentMapOutput) MapIndex(k pulumi.StringInput) ServiceDynamicSnippetContentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceDynamicSnippetContent {
		return vs[0].(map[string]*ServiceDynamicSnippetContent)[vs[1].(string)]
	}).(ServiceDynamicSnippetContentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDynamicSnippetContentInput)(nil)).Elem(), &ServiceDynamicSnippetContent{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDynamicSnippetContentArrayInput)(nil)).Elem(), ServiceDynamicSnippetContentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDynamicSnippetContentMapInput)(nil)).Elem(), ServiceDynamicSnippetContentMap{})
	pulumi.RegisterOutputType(ServiceDynamicSnippetContentOutput{})
	pulumi.RegisterOutputType(ServiceDynamicSnippetContentArrayOutput{})
	pulumi.RegisterOutputType(ServiceDynamicSnippetContentMapOutput{})
}
