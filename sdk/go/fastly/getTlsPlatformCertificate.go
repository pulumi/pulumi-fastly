// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v10/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information of a Platform TLS certificate for use with other resources.
//
// > **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
// with any of the others.
//
// > **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v10/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.LookupTlsPlatformCertificate(ctx, &fastly.LookupTlsPlatformCertificateArgs{
//				Domains: []string{
//					"example.com",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTlsPlatformCertificate(ctx *pulumi.Context, args *LookupTlsPlatformCertificateArgs, opts ...pulumi.InvokeOption) (*LookupTlsPlatformCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTlsPlatformCertificateResult
	err := ctx.Invoke("fastly:index/getTlsPlatformCertificate:getTlsPlatformCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTlsPlatformCertificate.
type LookupTlsPlatformCertificateArgs struct {
	// Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
	Domains []string `pulumi:"domains"`
	// Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getTlsPlatformCertificate.
type LookupTlsPlatformCertificateResult struct {
	// ID of TLS configuration used to terminate TLS traffic.
	ConfigurationId string `pulumi:"configurationId"`
	// Timestamp (GMT) when the certificate was created.
	CreatedAt string `pulumi:"createdAt"`
	// Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
	Domains []string `pulumi:"domains"`
	// Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
	Id string `pulumi:"id"`
	// Timestamp (GMT) when the certificate will expire.
	NotAfter string `pulumi:"notAfter"`
	// Timestamp (GMT) when the certificate will become valid.
	NotBefore string `pulumi:"notBefore"`
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace bool `pulumi:"replace"`
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupTlsPlatformCertificateOutput(ctx *pulumi.Context, args LookupTlsPlatformCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupTlsPlatformCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTlsPlatformCertificateResultOutput, error) {
			args := v.(LookupTlsPlatformCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fastly:index/getTlsPlatformCertificate:getTlsPlatformCertificate", args, LookupTlsPlatformCertificateResultOutput{}, options).(LookupTlsPlatformCertificateResultOutput), nil
		}).(LookupTlsPlatformCertificateResultOutput)
}

// A collection of arguments for invoking getTlsPlatformCertificate.
type LookupTlsPlatformCertificateOutputArgs struct {
	// Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupTlsPlatformCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTlsPlatformCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getTlsPlatformCertificate.
type LookupTlsPlatformCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupTlsPlatformCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTlsPlatformCertificateResult)(nil)).Elem()
}

func (o LookupTlsPlatformCertificateResultOutput) ToLookupTlsPlatformCertificateResultOutput() LookupTlsPlatformCertificateResultOutput {
	return o
}

func (o LookupTlsPlatformCertificateResultOutput) ToLookupTlsPlatformCertificateResultOutputWithContext(ctx context.Context) LookupTlsPlatformCertificateResultOutput {
	return o
}

// ID of TLS configuration used to terminate TLS traffic.
func (o LookupTlsPlatformCertificateResultOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPlatformCertificateResult) string { return v.ConfigurationId }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the certificate was created.
func (o LookupTlsPlatformCertificateResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPlatformCertificateResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Domains that are listed in any certificate's Subject Alternative Names (SAN) list.
func (o LookupTlsPlatformCertificateResultOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTlsPlatformCertificateResult) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// Unique ID assigned to certificate by Fastly. Conflicts with all the other filters.
func (o LookupTlsPlatformCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPlatformCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the certificate will expire.
func (o LookupTlsPlatformCertificateResultOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPlatformCertificateResult) string { return v.NotAfter }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the certificate will become valid.
func (o LookupTlsPlatformCertificateResultOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPlatformCertificateResult) string { return v.NotBefore }).(pulumi.StringOutput)
}

// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
func (o LookupTlsPlatformCertificateResultOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTlsPlatformCertificateResult) bool { return v.Replace }).(pulumi.BoolOutput)
}

// Timestamp (GMT) when the certificate was last updated.
func (o LookupTlsPlatformCertificateResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPlatformCertificateResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTlsPlatformCertificateResultOutput{})
}
