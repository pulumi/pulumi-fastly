// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uploads a custom TLS certificate to Fastly to be used to terminate TLS traffic.
//
// > Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate.
//
// ## Import
//
// A certificate can be imported using its Fastly certificate ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/tlsCertificate:TlsCertificate demo xxxxxxxxxxx
// ```
type TlsCertificate struct {
	pulumi.CustomResourceState

	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody pulumi.StringOutput `pulumi:"certificateBody"`
	// Timestamp (GMT) when the certificate was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
	Domains pulumi.StringArrayOutput `pulumi:"domains"`
	// The hostname for which a certificate was issued.
	IssuedTo pulumi.StringOutput `pulumi:"issuedTo"`
	// The certificate authority that issued the certificate.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name pulumi.StringOutput `pulumi:"name"`
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace pulumi.BoolOutput `pulumi:"replace"`
	// A value assigned by the issuer that is unique to a certificate.
	SerialNumber pulumi.StringOutput `pulumi:"serialNumber"`
	// The algorithm used to sign the certificate.
	SignatureAlgorithm pulumi.StringOutput `pulumi:"signatureAlgorithm"`
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTlsCertificate registers a new resource with the given unique name, arguments, and options.
func NewTlsCertificate(ctx *pulumi.Context,
	name string, args *TlsCertificateArgs, opts ...pulumi.ResourceOption) (*TlsCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateBody == nil {
		return nil, errors.New("invalid value for required argument 'CertificateBody'")
	}
	var resource TlsCertificate
	err := ctx.RegisterResource("fastly:index/tlsCertificate:TlsCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsCertificate gets an existing TlsCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsCertificateState, opts ...pulumi.ResourceOption) (*TlsCertificate, error) {
	var resource TlsCertificate
	err := ctx.ReadResource("fastly:index/tlsCertificate:TlsCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsCertificate resources.
type tlsCertificateState struct {
	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody *string `pulumi:"certificateBody"`
	// Timestamp (GMT) when the certificate was created.
	CreatedAt *string `pulumi:"createdAt"`
	// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
	Domains []string `pulumi:"domains"`
	// The hostname for which a certificate was issued.
	IssuedTo *string `pulumi:"issuedTo"`
	// The certificate authority that issued the certificate.
	Issuer *string `pulumi:"issuer"`
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name *string `pulumi:"name"`
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace *bool `pulumi:"replace"`
	// A value assigned by the issuer that is unique to a certificate.
	SerialNumber *string `pulumi:"serialNumber"`
	// The algorithm used to sign the certificate.
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TlsCertificateState struct {
	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody pulumi.StringPtrInput
	// Timestamp (GMT) when the certificate was created.
	CreatedAt pulumi.StringPtrInput
	// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
	Domains pulumi.StringArrayInput
	// The hostname for which a certificate was issued.
	IssuedTo pulumi.StringPtrInput
	// The certificate authority that issued the certificate.
	Issuer pulumi.StringPtrInput
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name pulumi.StringPtrInput
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace pulumi.BoolPtrInput
	// A value assigned by the issuer that is unique to a certificate.
	SerialNumber pulumi.StringPtrInput
	// The algorithm used to sign the certificate.
	SignatureAlgorithm pulumi.StringPtrInput
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (TlsCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsCertificateState)(nil)).Elem()
}

type tlsCertificateArgs struct {
	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody string `pulumi:"certificateBody"`
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a TlsCertificate resource.
type TlsCertificateArgs struct {
	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody pulumi.StringInput
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name pulumi.StringPtrInput
}

func (TlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsCertificateArgs)(nil)).Elem()
}

type TlsCertificateInput interface {
	pulumi.Input

	ToTlsCertificateOutput() TlsCertificateOutput
	ToTlsCertificateOutputWithContext(ctx context.Context) TlsCertificateOutput
}

func (*TlsCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificate)(nil))
}

func (i *TlsCertificate) ToTlsCertificateOutput() TlsCertificateOutput {
	return i.ToTlsCertificateOutputWithContext(context.Background())
}

func (i *TlsCertificate) ToTlsCertificateOutputWithContext(ctx context.Context) TlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateOutput)
}

func (i *TlsCertificate) ToTlsCertificatePtrOutput() TlsCertificatePtrOutput {
	return i.ToTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *TlsCertificate) ToTlsCertificatePtrOutputWithContext(ctx context.Context) TlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificatePtrOutput)
}

type TlsCertificatePtrInput interface {
	pulumi.Input

	ToTlsCertificatePtrOutput() TlsCertificatePtrOutput
	ToTlsCertificatePtrOutputWithContext(ctx context.Context) TlsCertificatePtrOutput
}

type tlsCertificatePtrType TlsCertificateArgs

func (*tlsCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificate)(nil))
}

func (i *tlsCertificatePtrType) ToTlsCertificatePtrOutput() TlsCertificatePtrOutput {
	return i.ToTlsCertificatePtrOutputWithContext(context.Background())
}

func (i *tlsCertificatePtrType) ToTlsCertificatePtrOutputWithContext(ctx context.Context) TlsCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificatePtrOutput)
}

// TlsCertificateArrayInput is an input type that accepts TlsCertificateArray and TlsCertificateArrayOutput values.
// You can construct a concrete instance of `TlsCertificateArrayInput` via:
//
//          TlsCertificateArray{ TlsCertificateArgs{...} }
type TlsCertificateArrayInput interface {
	pulumi.Input

	ToTlsCertificateArrayOutput() TlsCertificateArrayOutput
	ToTlsCertificateArrayOutputWithContext(context.Context) TlsCertificateArrayOutput
}

type TlsCertificateArray []TlsCertificateInput

func (TlsCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*TlsCertificate)(nil))
}

func (i TlsCertificateArray) ToTlsCertificateArrayOutput() TlsCertificateArrayOutput {
	return i.ToTlsCertificateArrayOutputWithContext(context.Background())
}

func (i TlsCertificateArray) ToTlsCertificateArrayOutputWithContext(ctx context.Context) TlsCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateArrayOutput)
}

// TlsCertificateMapInput is an input type that accepts TlsCertificateMap and TlsCertificateMapOutput values.
// You can construct a concrete instance of `TlsCertificateMapInput` via:
//
//          TlsCertificateMap{ "key": TlsCertificateArgs{...} }
type TlsCertificateMapInput interface {
	pulumi.Input

	ToTlsCertificateMapOutput() TlsCertificateMapOutput
	ToTlsCertificateMapOutputWithContext(context.Context) TlsCertificateMapOutput
}

type TlsCertificateMap map[string]TlsCertificateInput

func (TlsCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*TlsCertificate)(nil))
}

func (i TlsCertificateMap) ToTlsCertificateMapOutput() TlsCertificateMapOutput {
	return i.ToTlsCertificateMapOutputWithContext(context.Background())
}

func (i TlsCertificateMap) ToTlsCertificateMapOutputWithContext(ctx context.Context) TlsCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateMapOutput)
}

type TlsCertificateOutput struct {
	*pulumi.OutputState
}

func (TlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TlsCertificate)(nil))
}

func (o TlsCertificateOutput) ToTlsCertificateOutput() TlsCertificateOutput {
	return o
}

func (o TlsCertificateOutput) ToTlsCertificateOutputWithContext(ctx context.Context) TlsCertificateOutput {
	return o
}

func (o TlsCertificateOutput) ToTlsCertificatePtrOutput() TlsCertificatePtrOutput {
	return o.ToTlsCertificatePtrOutputWithContext(context.Background())
}

func (o TlsCertificateOutput) ToTlsCertificatePtrOutputWithContext(ctx context.Context) TlsCertificatePtrOutput {
	return o.ApplyT(func(v TlsCertificate) *TlsCertificate {
		return &v
	}).(TlsCertificatePtrOutput)
}

type TlsCertificatePtrOutput struct {
	*pulumi.OutputState
}

func (TlsCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificate)(nil))
}

func (o TlsCertificatePtrOutput) ToTlsCertificatePtrOutput() TlsCertificatePtrOutput {
	return o
}

func (o TlsCertificatePtrOutput) ToTlsCertificatePtrOutputWithContext(ctx context.Context) TlsCertificatePtrOutput {
	return o
}

type TlsCertificateArrayOutput struct{ *pulumi.OutputState }

func (TlsCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TlsCertificate)(nil))
}

func (o TlsCertificateArrayOutput) ToTlsCertificateArrayOutput() TlsCertificateArrayOutput {
	return o
}

func (o TlsCertificateArrayOutput) ToTlsCertificateArrayOutputWithContext(ctx context.Context) TlsCertificateArrayOutput {
	return o
}

func (o TlsCertificateArrayOutput) Index(i pulumi.IntInput) TlsCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TlsCertificate {
		return vs[0].([]TlsCertificate)[vs[1].(int)]
	}).(TlsCertificateOutput)
}

type TlsCertificateMapOutput struct{ *pulumi.OutputState }

func (TlsCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TlsCertificate)(nil))
}

func (o TlsCertificateMapOutput) ToTlsCertificateMapOutput() TlsCertificateMapOutput {
	return o
}

func (o TlsCertificateMapOutput) ToTlsCertificateMapOutputWithContext(ctx context.Context) TlsCertificateMapOutput {
	return o
}

func (o TlsCertificateMapOutput) MapIndex(k pulumi.StringInput) TlsCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TlsCertificate {
		return vs[0].(map[string]TlsCertificate)[vs[1].(string)]
	}).(TlsCertificateOutput)
}

func init() {
	pulumi.RegisterOutputType(TlsCertificateOutput{})
	pulumi.RegisterOutputType(TlsCertificatePtrOutput{})
	pulumi.RegisterOutputType(TlsCertificateArrayOutput{})
	pulumi.RegisterOutputType(TlsCertificateMapOutput{})
}
