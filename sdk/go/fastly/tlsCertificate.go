// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uploads a custom TLS certificate to Fastly to be used to terminate TLS traffic.
//
// > Each TLS certificate **must** have its corresponding private key uploaded _prior_ to uploading the certificate.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v6/go/fastly"
//	"github.com/pulumi/pulumi-tls/sdk/v4/go/tls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			keyPrivateKey, err := tls.NewPrivateKey(ctx, "keyPrivateKey", &tls.PrivateKeyArgs{
//				Algorithm: pulumi.String("RSA"),
//			})
//			if err != nil {
//				return err
//			}
//			cert, err := tls.NewSelfSignedCert(ctx, "cert", &tls.SelfSignedCertArgs{
//				KeyAlgorithm:  keyPrivateKey.Algorithm,
//				PrivateKeyPem: keyPrivateKey.PrivateKeyPem,
//				Subjects: tls.SelfSignedCertSubjectArray{
//					&tls.SelfSignedCertSubjectArgs{
//						CommonName: pulumi.String("example.com"),
//					},
//				},
//				IsCaCertificate:     pulumi.Bool(true),
//				ValidityPeriodHours: pulumi.Int(360),
//				AllowedUses: pulumi.StringArray{
//					pulumi.String("cert_signing"),
//					pulumi.String("server_auth"),
//				},
//				DnsNames: pulumi.StringArray{
//					pulumi.String("example.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			keyTlsPrivateKey, err := fastly.NewTlsPrivateKey(ctx, "keyTlsPrivateKey", &fastly.TlsPrivateKeyArgs{
//				KeyPem: keyPrivateKey.PrivateKeyPem,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewTlsCertificate(ctx, "example", &fastly.TlsCertificateArgs{
//				CertificateBody: cert.CertPem,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				keyTlsPrivateKey,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Updating certificates
//
// There are three scenarios for updating a certificate:
//
// 1. The certificate is about to expire but the private key stays the same.
// 2. The certificate is about to expire but the private key is changing.
// 3. The domains on the certificate are changing.
//
// In the first scenario you only need to update the `certificateBody` attribute of the `TlsCertificate` resource, while the other scenarios require a new private key (`TlsPrivateKey`) and certificate (`TlsCertificate`) to be generated.
//
// When updating both the `TlsPrivateKey` and `TlsCertificate` resources, they should be done in multiple plan/apply steps to avoid potential downtime. The new certificate and associated private key must first be created so they exist alongside the currently active resources. Once the new resources have been created, then the `TlsActivation` can be updated to point to the new certificate. Finally, the original key/certificate resources can be deleted.
//
// ## Import
//
// A certificate can be imported using its Fastly certificate ID, e.g.
//
// ```sh
//
//	$ pulumi import fastly:index/tlsCertificate:TlsCertificate demo xxxxxxxxxxx
//
// ```
type TlsCertificate struct {
	pulumi.CustomResourceState

	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody pulumi.StringOutput `pulumi:"certificateBody"`
	// Timestamp (GMT) when the certificate was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
	Domains pulumi.StringArrayOutput `pulumi:"domains"`
	// The hostname for which a certificate was issued.
	IssuedTo pulumi.StringOutput `pulumi:"issuedTo"`
	// The certificate authority that issued the certificate.
	Issuer pulumi.StringOutput `pulumi:"issuer"`
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name pulumi.StringOutput `pulumi:"name"`
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace pulumi.BoolOutput `pulumi:"replace"`
	// A value assigned by the issuer that is unique to a certificate.
	SerialNumber pulumi.StringOutput `pulumi:"serialNumber"`
	// The algorithm used to sign the certificate.
	SignatureAlgorithm pulumi.StringOutput `pulumi:"signatureAlgorithm"`
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTlsCertificate registers a new resource with the given unique name, arguments, and options.
func NewTlsCertificate(ctx *pulumi.Context,
	name string, args *TlsCertificateArgs, opts ...pulumi.ResourceOption) (*TlsCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertificateBody == nil {
		return nil, errors.New("invalid value for required argument 'CertificateBody'")
	}
	var resource TlsCertificate
	err := ctx.RegisterResource("fastly:index/tlsCertificate:TlsCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsCertificate gets an existing TlsCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsCertificateState, opts ...pulumi.ResourceOption) (*TlsCertificate, error) {
	var resource TlsCertificate
	err := ctx.ReadResource("fastly:index/tlsCertificate:TlsCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsCertificate resources.
type tlsCertificateState struct {
	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody *string `pulumi:"certificateBody"`
	// Timestamp (GMT) when the certificate was created.
	CreatedAt *string `pulumi:"createdAt"`
	// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
	Domains []string `pulumi:"domains"`
	// The hostname for which a certificate was issued.
	IssuedTo *string `pulumi:"issuedTo"`
	// The certificate authority that issued the certificate.
	Issuer *string `pulumi:"issuer"`
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name *string `pulumi:"name"`
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace *bool `pulumi:"replace"`
	// A value assigned by the issuer that is unique to a certificate.
	SerialNumber *string `pulumi:"serialNumber"`
	// The algorithm used to sign the certificate.
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TlsCertificateState struct {
	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody pulumi.StringPtrInput
	// Timestamp (GMT) when the certificate was created.
	CreatedAt pulumi.StringPtrInput
	// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
	Domains pulumi.StringArrayInput
	// The hostname for which a certificate was issued.
	IssuedTo pulumi.StringPtrInput
	// The certificate authority that issued the certificate.
	Issuer pulumi.StringPtrInput
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name pulumi.StringPtrInput
	// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
	Replace pulumi.BoolPtrInput
	// A value assigned by the issuer that is unique to a certificate.
	SerialNumber pulumi.StringPtrInput
	// The algorithm used to sign the certificate.
	SignatureAlgorithm pulumi.StringPtrInput
	// Timestamp (GMT) when the certificate was last updated.
	UpdatedAt pulumi.StringPtrInput
}

func (TlsCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsCertificateState)(nil)).Elem()
}

type tlsCertificateArgs struct {
	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody string `pulumi:"certificateBody"`
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a TlsCertificate resource.
type TlsCertificateArgs struct {
	// PEM-formatted certificate, optionally including any intermediary certificates.
	CertificateBody pulumi.StringInput
	// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
	Name pulumi.StringPtrInput
}

func (TlsCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsCertificateArgs)(nil)).Elem()
}

type TlsCertificateInput interface {
	pulumi.Input

	ToTlsCertificateOutput() TlsCertificateOutput
	ToTlsCertificateOutputWithContext(ctx context.Context) TlsCertificateOutput
}

func (*TlsCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificate)(nil)).Elem()
}

func (i *TlsCertificate) ToTlsCertificateOutput() TlsCertificateOutput {
	return i.ToTlsCertificateOutputWithContext(context.Background())
}

func (i *TlsCertificate) ToTlsCertificateOutputWithContext(ctx context.Context) TlsCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateOutput)
}

// TlsCertificateArrayInput is an input type that accepts TlsCertificateArray and TlsCertificateArrayOutput values.
// You can construct a concrete instance of `TlsCertificateArrayInput` via:
//
//	TlsCertificateArray{ TlsCertificateArgs{...} }
type TlsCertificateArrayInput interface {
	pulumi.Input

	ToTlsCertificateArrayOutput() TlsCertificateArrayOutput
	ToTlsCertificateArrayOutputWithContext(context.Context) TlsCertificateArrayOutput
}

type TlsCertificateArray []TlsCertificateInput

func (TlsCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsCertificate)(nil)).Elem()
}

func (i TlsCertificateArray) ToTlsCertificateArrayOutput() TlsCertificateArrayOutput {
	return i.ToTlsCertificateArrayOutputWithContext(context.Background())
}

func (i TlsCertificateArray) ToTlsCertificateArrayOutputWithContext(ctx context.Context) TlsCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateArrayOutput)
}

// TlsCertificateMapInput is an input type that accepts TlsCertificateMap and TlsCertificateMapOutput values.
// You can construct a concrete instance of `TlsCertificateMapInput` via:
//
//	TlsCertificateMap{ "key": TlsCertificateArgs{...} }
type TlsCertificateMapInput interface {
	pulumi.Input

	ToTlsCertificateMapOutput() TlsCertificateMapOutput
	ToTlsCertificateMapOutputWithContext(context.Context) TlsCertificateMapOutput
}

type TlsCertificateMap map[string]TlsCertificateInput

func (TlsCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsCertificate)(nil)).Elem()
}

func (i TlsCertificateMap) ToTlsCertificateMapOutput() TlsCertificateMapOutput {
	return i.ToTlsCertificateMapOutputWithContext(context.Background())
}

func (i TlsCertificateMap) ToTlsCertificateMapOutputWithContext(ctx context.Context) TlsCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsCertificateMapOutput)
}

type TlsCertificateOutput struct{ *pulumi.OutputState }

func (TlsCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsCertificate)(nil)).Elem()
}

func (o TlsCertificateOutput) ToTlsCertificateOutput() TlsCertificateOutput {
	return o
}

func (o TlsCertificateOutput) ToTlsCertificateOutputWithContext(ctx context.Context) TlsCertificateOutput {
	return o
}

// PEM-formatted certificate, optionally including any intermediary certificates.
func (o TlsCertificateOutput) CertificateBody() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringOutput { return v.CertificateBody }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the certificate was created.
func (o TlsCertificateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// All the domains (including wildcard domains) that are listed in the certificate's Subject Alternative Names (SAN) list.
func (o TlsCertificateOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringArrayOutput { return v.Domains }).(pulumi.StringArrayOutput)
}

// The hostname for which a certificate was issued.
func (o TlsCertificateOutput) IssuedTo() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringOutput { return v.IssuedTo }).(pulumi.StringOutput)
}

// The certificate authority that issued the certificate.
func (o TlsCertificateOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringOutput { return v.Issuer }).(pulumi.StringOutput)
}

// Human-readable name used to identify the certificate. Defaults to the certificate's Common Name or first Subject Alternative Name entry.
func (o TlsCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A recommendation from Fastly indicating the key associated with this certificate is in need of rotation.
func (o TlsCertificateOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.BoolOutput { return v.Replace }).(pulumi.BoolOutput)
}

// A value assigned by the issuer that is unique to a certificate.
func (o TlsCertificateOutput) SerialNumber() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringOutput { return v.SerialNumber }).(pulumi.StringOutput)
}

// The algorithm used to sign the certificate.
func (o TlsCertificateOutput) SignatureAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringOutput { return v.SignatureAlgorithm }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the certificate was last updated.
func (o TlsCertificateOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsCertificate) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TlsCertificateArrayOutput struct{ *pulumi.OutputState }

func (TlsCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsCertificate)(nil)).Elem()
}

func (o TlsCertificateArrayOutput) ToTlsCertificateArrayOutput() TlsCertificateArrayOutput {
	return o
}

func (o TlsCertificateArrayOutput) ToTlsCertificateArrayOutputWithContext(ctx context.Context) TlsCertificateArrayOutput {
	return o
}

func (o TlsCertificateArrayOutput) Index(i pulumi.IntInput) TlsCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TlsCertificate {
		return vs[0].([]*TlsCertificate)[vs[1].(int)]
	}).(TlsCertificateOutput)
}

type TlsCertificateMapOutput struct{ *pulumi.OutputState }

func (TlsCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsCertificate)(nil)).Elem()
}

func (o TlsCertificateMapOutput) ToTlsCertificateMapOutput() TlsCertificateMapOutput {
	return o
}

func (o TlsCertificateMapOutput) ToTlsCertificateMapOutputWithContext(ctx context.Context) TlsCertificateMapOutput {
	return o
}

func (o TlsCertificateMapOutput) MapIndex(k pulumi.StringInput) TlsCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TlsCertificate {
		return vs[0].(map[string]*TlsCertificate)[vs[1].(string)]
	}).(TlsCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificateInput)(nil)).Elem(), &TlsCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificateArrayInput)(nil)).Elem(), TlsCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsCertificateMapInput)(nil)).Elem(), TlsCertificateMap{})
	pulumi.RegisterOutputType(TlsCertificateOutput{})
	pulumi.RegisterOutputType(TlsCertificateArrayOutput{})
	pulumi.RegisterOutputType(TlsCertificateMapOutput{})
}
