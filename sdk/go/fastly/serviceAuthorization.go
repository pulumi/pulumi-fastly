// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v9/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Configures authorization with granular permissions to services. Users can be granted rights for services on different levels.
//
// The Service Authorization resource requires a user id, service id and an optional permission.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v9/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			demo, err := fastly.NewServiceVcl(ctx, "demo", nil)
//			if err != nil {
//				return err
//			}
//			user, err := fastly.NewUser(ctx, "user", nil)
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewServiceAuthorization(ctx, "auth", &fastly.ServiceAuthorizationArgs{
//				ServiceId:  demo.ID(),
//				UserId:     user.ID(),
//				Permission: pulumi.String("purge_all"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Fastly Service Authorization can be imported using their user ID, e.g.
//
// ```sh
// $ pulumi import fastly:index/serviceAuthorization:ServiceAuthorization demo xxxxxxxxxxxxxxxxxxxx
// ```
type ServiceAuthorization struct {
	pulumi.CustomResourceState

	// The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
	Permission pulumi.StringOutput `pulumi:"permission"`
	// The ID of the service to grant permissions for.
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The ID of the user which will receive the granted permissions.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewServiceAuthorization registers a new resource with the given unique name, arguments, and options.
func NewServiceAuthorization(ctx *pulumi.Context,
	name string, args *ServiceAuthorizationArgs, opts ...pulumi.ResourceOption) (*ServiceAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceAuthorization
	err := ctx.RegisterResource("fastly:index/serviceAuthorization:ServiceAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceAuthorization gets an existing ServiceAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceAuthorizationState, opts ...pulumi.ResourceOption) (*ServiceAuthorization, error) {
	var resource ServiceAuthorization
	err := ctx.ReadResource("fastly:index/serviceAuthorization:ServiceAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceAuthorization resources.
type serviceAuthorizationState struct {
	// The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
	Permission *string `pulumi:"permission"`
	// The ID of the service to grant permissions for.
	ServiceId *string `pulumi:"serviceId"`
	// The ID of the user which will receive the granted permissions.
	UserId *string `pulumi:"userId"`
}

type ServiceAuthorizationState struct {
	// The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
	Permission pulumi.StringPtrInput
	// The ID of the service to grant permissions for.
	ServiceId pulumi.StringPtrInput
	// The ID of the user which will receive the granted permissions.
	UserId pulumi.StringPtrInput
}

func (ServiceAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAuthorizationState)(nil)).Elem()
}

type serviceAuthorizationArgs struct {
	// The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
	Permission string `pulumi:"permission"`
	// The ID of the service to grant permissions for.
	ServiceId string `pulumi:"serviceId"`
	// The ID of the user which will receive the granted permissions.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a ServiceAuthorization resource.
type ServiceAuthorizationArgs struct {
	// The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
	Permission pulumi.StringInput
	// The ID of the service to grant permissions for.
	ServiceId pulumi.StringInput
	// The ID of the user which will receive the granted permissions.
	UserId pulumi.StringInput
}

func (ServiceAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceAuthorizationArgs)(nil)).Elem()
}

type ServiceAuthorizationInput interface {
	pulumi.Input

	ToServiceAuthorizationOutput() ServiceAuthorizationOutput
	ToServiceAuthorizationOutputWithContext(ctx context.Context) ServiceAuthorizationOutput
}

func (*ServiceAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAuthorization)(nil)).Elem()
}

func (i *ServiceAuthorization) ToServiceAuthorizationOutput() ServiceAuthorizationOutput {
	return i.ToServiceAuthorizationOutputWithContext(context.Background())
}

func (i *ServiceAuthorization) ToServiceAuthorizationOutputWithContext(ctx context.Context) ServiceAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAuthorizationOutput)
}

// ServiceAuthorizationArrayInput is an input type that accepts ServiceAuthorizationArray and ServiceAuthorizationArrayOutput values.
// You can construct a concrete instance of `ServiceAuthorizationArrayInput` via:
//
//	ServiceAuthorizationArray{ ServiceAuthorizationArgs{...} }
type ServiceAuthorizationArrayInput interface {
	pulumi.Input

	ToServiceAuthorizationArrayOutput() ServiceAuthorizationArrayOutput
	ToServiceAuthorizationArrayOutputWithContext(context.Context) ServiceAuthorizationArrayOutput
}

type ServiceAuthorizationArray []ServiceAuthorizationInput

func (ServiceAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAuthorization)(nil)).Elem()
}

func (i ServiceAuthorizationArray) ToServiceAuthorizationArrayOutput() ServiceAuthorizationArrayOutput {
	return i.ToServiceAuthorizationArrayOutputWithContext(context.Background())
}

func (i ServiceAuthorizationArray) ToServiceAuthorizationArrayOutputWithContext(ctx context.Context) ServiceAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAuthorizationArrayOutput)
}

// ServiceAuthorizationMapInput is an input type that accepts ServiceAuthorizationMap and ServiceAuthorizationMapOutput values.
// You can construct a concrete instance of `ServiceAuthorizationMapInput` via:
//
//	ServiceAuthorizationMap{ "key": ServiceAuthorizationArgs{...} }
type ServiceAuthorizationMapInput interface {
	pulumi.Input

	ToServiceAuthorizationMapOutput() ServiceAuthorizationMapOutput
	ToServiceAuthorizationMapOutputWithContext(context.Context) ServiceAuthorizationMapOutput
}

type ServiceAuthorizationMap map[string]ServiceAuthorizationInput

func (ServiceAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAuthorization)(nil)).Elem()
}

func (i ServiceAuthorizationMap) ToServiceAuthorizationMapOutput() ServiceAuthorizationMapOutput {
	return i.ToServiceAuthorizationMapOutputWithContext(context.Background())
}

func (i ServiceAuthorizationMap) ToServiceAuthorizationMapOutputWithContext(ctx context.Context) ServiceAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAuthorizationMapOutput)
}

type ServiceAuthorizationOutput struct{ *pulumi.OutputState }

func (ServiceAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceAuthorization)(nil)).Elem()
}

func (o ServiceAuthorizationOutput) ToServiceAuthorizationOutput() ServiceAuthorizationOutput {
	return o
}

func (o ServiceAuthorizationOutput) ToServiceAuthorizationOutputWithContext(ctx context.Context) ServiceAuthorizationOutput {
	return o
}

// The permissions to grant the user. Can be `full`, `readOnly`, `purgeSelect` or `purgeAll`.
func (o ServiceAuthorizationOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAuthorization) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// The ID of the service to grant permissions for.
func (o ServiceAuthorizationOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAuthorization) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

// The ID of the user which will receive the granted permissions.
func (o ServiceAuthorizationOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceAuthorization) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type ServiceAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (ServiceAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceAuthorization)(nil)).Elem()
}

func (o ServiceAuthorizationArrayOutput) ToServiceAuthorizationArrayOutput() ServiceAuthorizationArrayOutput {
	return o
}

func (o ServiceAuthorizationArrayOutput) ToServiceAuthorizationArrayOutputWithContext(ctx context.Context) ServiceAuthorizationArrayOutput {
	return o
}

func (o ServiceAuthorizationArrayOutput) Index(i pulumi.IntInput) ServiceAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceAuthorization {
		return vs[0].([]*ServiceAuthorization)[vs[1].(int)]
	}).(ServiceAuthorizationOutput)
}

type ServiceAuthorizationMapOutput struct{ *pulumi.OutputState }

func (ServiceAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceAuthorization)(nil)).Elem()
}

func (o ServiceAuthorizationMapOutput) ToServiceAuthorizationMapOutput() ServiceAuthorizationMapOutput {
	return o
}

func (o ServiceAuthorizationMapOutput) ToServiceAuthorizationMapOutputWithContext(ctx context.Context) ServiceAuthorizationMapOutput {
	return o
}

func (o ServiceAuthorizationMapOutput) MapIndex(k pulumi.StringInput) ServiceAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceAuthorization {
		return vs[0].(map[string]*ServiceAuthorization)[vs[1].(string)]
	}).(ServiceAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAuthorizationInput)(nil)).Elem(), &ServiceAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAuthorizationArrayInput)(nil)).Elem(), ServiceAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAuthorizationMapInput)(nil)).Elem(), ServiceAuthorizationMap{})
	pulumi.RegisterOutputType(ServiceAuthorizationOutput{})
	pulumi.RegisterOutputType(ServiceAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(ServiceAuthorizationMapOutput{})
}
