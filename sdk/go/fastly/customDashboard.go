// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Custom Dashboard which can be viewed in the Fastly Control Panel.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewCustomDashboard(ctx, "example", &fastly.CustomDashboardArgs{
//				Name:        pulumi.String("Example Custom Dashboard"),
//				Description: pulumi.String("This is an example custom dashboard. A few dashboard items are provided to help you get started."),
//				DashboardItems: fastly.CustomDashboardDashboardItemArray{
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example1"),
//						Title:    pulumi.String("Total Requests"),
//						Subtitle: pulumi.String("Number of requests processed."),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: map[string]interface{}{
//								"metrics": []string{
//									"requests",
//								},
//							}[0],
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:   pulumi.String("requests"),
//								PlotType: pulumi.String("line"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example2"),
//						Title:    pulumi.String("Hit Ratio"),
//						Subtitle: pulumi.String("Ratio of requests served from Fastly."),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("hit_ratio"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:            pulumi.String("percent"),
//								PlotType:          pulumi.String("donut"),
//								CalculationMethod: pulumi.String("latest"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example3"),
//						Title:    pulumi.String("Client & Server Errors"),
//						Subtitle: pulumi.String("Total errors served from the client or server."),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("status_4xx"),
//									pulumi.String("status_5xx"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:   pulumi.String("requests"),
//								PlotType: pulumi.String("bar"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example4"),
//						Title:    pulumi.String("Domain Requests"),
//						Subtitle: pulumi.String("Requests by Domain."),
//						Span:     pulumi.Int(6),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.domain"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("requests"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:   pulumi.String("requests"),
//								PlotType: pulumi.String("line"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example5"),
//						Title:    pulumi.String("Origin Responses"),
//						Subtitle: pulumi.String("Responses by Origin."),
//						Span:     pulumi.Int(6),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.origin"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("all_responses"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								PlotType: pulumi.String("line"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example6"),
//						Title:    pulumi.String("Total Bandwidth"),
//						Subtitle: pulumi.String("Total bandwidth served."),
//						Span:     pulumi.Int(12),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("bandwidth"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:   pulumi.String("bytes"),
//								PlotType: pulumi.String("bar"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example7"),
//						Title:    pulumi.String("Products - Image Optimizer & Real-Time Log Streaming"),
//						Subtitle: pulumi.String("Total IO images served and log statements sent."),
//						Span:     pulumi.Int(8),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("imgopto"),
//									pulumi.String("log"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								PlotType: pulumi.String("line"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example8"),
//						Title:    pulumi.String("Transport Protocols & Security"),
//						Subtitle: pulumi.String("HTTP Protocols & TLS."),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("http1"),
//									pulumi.String("http2"),
//									pulumi.String("http3"),
//									pulumi.String("tls_v10"),
//									pulumi.String("tls_v11"),
//									pulumi.String("tls_v12"),
//									pulumi.String("tls_v13"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:   pulumi.String("requests"),
//								PlotType: pulumi.String("line"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example9"),
//						Title:    pulumi.String("Origin Miss Latency"),
//						Subtitle: pulumi.String("Miss latency times for your origins."),
//						Span:     pulumi.Int(12),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("origin_latency"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:   pulumi.String("milliseconds"),
//								PlotType: pulumi.String("line"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example10"),
//						Title:    pulumi.String("DDoS - Request Flood Attempts"),
//						Subtitle: pulumi.String("Number of connections the limit-streams action was applied."),
//						Span:     pulumi.Int(6),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("ddos_action_limit_streams_connections"),
//									pulumi.String("ddos_action_limit_streams_requests"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:   pulumi.String("requests"),
//								PlotType: pulumi.String("line"),
//							},
//						},
//					},
//					&fastly.CustomDashboardDashboardItemArgs{
//						Id:       pulumi.String("example11"),
//						Title:    pulumi.String("DDoS - Malicious Bot Attack"),
//						Subtitle: pulumi.String("Number of times the blackhole action was taken."),
//						Span:     pulumi.Int(6),
//						DataSource: &fastly.CustomDashboardDashboardItemDataSourceArgs{
//							Type: pulumi.String("stats.edge"),
//							Config: &fastly.CustomDashboardDashboardItemDataSourceConfigArgs{
//								Metrics: pulumi.StringArray{
//									pulumi.String("ddos_action_close"),
//									pulumi.String("ddos_action_blackhole"),
//								},
//							},
//						},
//						Visualization: &fastly.CustomDashboardDashboardItemVisualizationArgs{
//							Type: pulumi.String("chart"),
//							Config: &fastly.CustomDashboardDashboardItemVisualizationConfigArgs{
//								Format:   pulumi.String("number"),
//								PlotType: pulumi.String("line"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Custom Dashboards can be imported using their ID, e.g.
//
// ```sh
// $ pulumi import fastly:index/customDashboard:CustomDashboard example xxxxxxxxxxxxxxxxxxxx
// ```
type CustomDashboard struct {
	pulumi.CustomResourceState

	// A list of dashboard items.
	DashboardItems CustomDashboardDashboardItemArrayOutput `pulumi:"dashboardItems"`
	// A short description of the dashboard.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A human-readable name.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewCustomDashboard registers a new resource with the given unique name, arguments, and options.
func NewCustomDashboard(ctx *pulumi.Context,
	name string, args *CustomDashboardArgs, opts ...pulumi.ResourceOption) (*CustomDashboard, error) {
	if args == nil {
		args = &CustomDashboardArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CustomDashboard
	err := ctx.RegisterResource("fastly:index/customDashboard:CustomDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCustomDashboard gets an existing CustomDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCustomDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CustomDashboardState, opts ...pulumi.ResourceOption) (*CustomDashboard, error) {
	var resource CustomDashboard
	err := ctx.ReadResource("fastly:index/customDashboard:CustomDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CustomDashboard resources.
type customDashboardState struct {
	// A list of dashboard items.
	DashboardItems []CustomDashboardDashboardItem `pulumi:"dashboardItems"`
	// A short description of the dashboard.
	Description *string `pulumi:"description"`
	// A human-readable name.
	Name *string `pulumi:"name"`
}

type CustomDashboardState struct {
	// A list of dashboard items.
	DashboardItems CustomDashboardDashboardItemArrayInput
	// A short description of the dashboard.
	Description pulumi.StringPtrInput
	// A human-readable name.
	Name pulumi.StringPtrInput
}

func (CustomDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*customDashboardState)(nil)).Elem()
}

type customDashboardArgs struct {
	// A list of dashboard items.
	DashboardItems []CustomDashboardDashboardItem `pulumi:"dashboardItems"`
	// A short description of the dashboard.
	Description *string `pulumi:"description"`
	// A human-readable name.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a CustomDashboard resource.
type CustomDashboardArgs struct {
	// A list of dashboard items.
	DashboardItems CustomDashboardDashboardItemArrayInput
	// A short description of the dashboard.
	Description pulumi.StringPtrInput
	// A human-readable name.
	Name pulumi.StringPtrInput
}

func (CustomDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*customDashboardArgs)(nil)).Elem()
}

type CustomDashboardInput interface {
	pulumi.Input

	ToCustomDashboardOutput() CustomDashboardOutput
	ToCustomDashboardOutputWithContext(ctx context.Context) CustomDashboardOutput
}

func (*CustomDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDashboard)(nil)).Elem()
}

func (i *CustomDashboard) ToCustomDashboardOutput() CustomDashboardOutput {
	return i.ToCustomDashboardOutputWithContext(context.Background())
}

func (i *CustomDashboard) ToCustomDashboardOutputWithContext(ctx context.Context) CustomDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDashboardOutput)
}

// CustomDashboardArrayInput is an input type that accepts CustomDashboardArray and CustomDashboardArrayOutput values.
// You can construct a concrete instance of `CustomDashboardArrayInput` via:
//
//	CustomDashboardArray{ CustomDashboardArgs{...} }
type CustomDashboardArrayInput interface {
	pulumi.Input

	ToCustomDashboardArrayOutput() CustomDashboardArrayOutput
	ToCustomDashboardArrayOutputWithContext(context.Context) CustomDashboardArrayOutput
}

type CustomDashboardArray []CustomDashboardInput

func (CustomDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomDashboard)(nil)).Elem()
}

func (i CustomDashboardArray) ToCustomDashboardArrayOutput() CustomDashboardArrayOutput {
	return i.ToCustomDashboardArrayOutputWithContext(context.Background())
}

func (i CustomDashboardArray) ToCustomDashboardArrayOutputWithContext(ctx context.Context) CustomDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDashboardArrayOutput)
}

// CustomDashboardMapInput is an input type that accepts CustomDashboardMap and CustomDashboardMapOutput values.
// You can construct a concrete instance of `CustomDashboardMapInput` via:
//
//	CustomDashboardMap{ "key": CustomDashboardArgs{...} }
type CustomDashboardMapInput interface {
	pulumi.Input

	ToCustomDashboardMapOutput() CustomDashboardMapOutput
	ToCustomDashboardMapOutputWithContext(context.Context) CustomDashboardMapOutput
}

type CustomDashboardMap map[string]CustomDashboardInput

func (CustomDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomDashboard)(nil)).Elem()
}

func (i CustomDashboardMap) ToCustomDashboardMapOutput() CustomDashboardMapOutput {
	return i.ToCustomDashboardMapOutputWithContext(context.Background())
}

func (i CustomDashboardMap) ToCustomDashboardMapOutputWithContext(ctx context.Context) CustomDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomDashboardMapOutput)
}

type CustomDashboardOutput struct{ *pulumi.OutputState }

func (CustomDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CustomDashboard)(nil)).Elem()
}

func (o CustomDashboardOutput) ToCustomDashboardOutput() CustomDashboardOutput {
	return o
}

func (o CustomDashboardOutput) ToCustomDashboardOutputWithContext(ctx context.Context) CustomDashboardOutput {
	return o
}

// A list of dashboard items.
func (o CustomDashboardOutput) DashboardItems() CustomDashboardDashboardItemArrayOutput {
	return o.ApplyT(func(v *CustomDashboard) CustomDashboardDashboardItemArrayOutput { return v.DashboardItems }).(CustomDashboardDashboardItemArrayOutput)
}

// A short description of the dashboard.
func (o CustomDashboardOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CustomDashboard) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A human-readable name.
func (o CustomDashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CustomDashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CustomDashboardArrayOutput struct{ *pulumi.OutputState }

func (CustomDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CustomDashboard)(nil)).Elem()
}

func (o CustomDashboardArrayOutput) ToCustomDashboardArrayOutput() CustomDashboardArrayOutput {
	return o
}

func (o CustomDashboardArrayOutput) ToCustomDashboardArrayOutputWithContext(ctx context.Context) CustomDashboardArrayOutput {
	return o
}

func (o CustomDashboardArrayOutput) Index(i pulumi.IntInput) CustomDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CustomDashboard {
		return vs[0].([]*CustomDashboard)[vs[1].(int)]
	}).(CustomDashboardOutput)
}

type CustomDashboardMapOutput struct{ *pulumi.OutputState }

func (CustomDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CustomDashboard)(nil)).Elem()
}

func (o CustomDashboardMapOutput) ToCustomDashboardMapOutput() CustomDashboardMapOutput {
	return o
}

func (o CustomDashboardMapOutput) ToCustomDashboardMapOutputWithContext(ctx context.Context) CustomDashboardMapOutput {
	return o
}

func (o CustomDashboardMapOutput) MapIndex(k pulumi.StringInput) CustomDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CustomDashboard {
		return vs[0].(map[string]*CustomDashboard)[vs[1].(string)]
	}).(CustomDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDashboardInput)(nil)).Elem(), &CustomDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDashboardArrayInput)(nil)).Elem(), CustomDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomDashboardMapInput)(nil)).Elem(), CustomDashboardMap{})
	pulumi.RegisterOutputType(CustomDashboardOutput{})
	pulumi.RegisterOutputType(CustomDashboardArrayOutput{})
	pulumi.RegisterOutputType(CustomDashboardMapOutput{})
}
