// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Next-Gen WAF Account Signal.\
// Account-level signals apply across one or more workspaces and are useful for defining shared or global WAF logic.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafAccountSignal(ctx, "example", &fastly.NgwafAccountSignalArgs{
//				AppliesTos: pulumi.StringArray{
//					pulumi.String("*"),
//				},
//				Description: pulumi.String("example"),
//				Name:        pulumi.String("Test Name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF account signals can be imported using just the signal ID, e.g.:
//
// ```sh
// $ pulumi import fastly:index/ngwafAccountSignal:NgwafAccountSignal demo <signalID>
// ```
type NgwafAccountSignal struct {
	pulumi.CustomResourceState

	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos pulumi.StringArrayOutput `pulumi:"appliesTos"`
	// The description of the signal.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the signal. Special characters and periods are not accepted.
	Name pulumi.StringOutput `pulumi:"name"`
	// The generated reference ID of the signal.
	ReferenceId pulumi.StringOutput `pulumi:"referenceId"`
}

// NewNgwafAccountSignal registers a new resource with the given unique name, arguments, and options.
func NewNgwafAccountSignal(ctx *pulumi.Context,
	name string, args *NgwafAccountSignalArgs, opts ...pulumi.ResourceOption) (*NgwafAccountSignal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppliesTos == nil {
		return nil, errors.New("invalid value for required argument 'AppliesTos'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafAccountSignal
	err := ctx.RegisterResource("fastly:index/ngwafAccountSignal:NgwafAccountSignal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafAccountSignal gets an existing NgwafAccountSignal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafAccountSignal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafAccountSignalState, opts ...pulumi.ResourceOption) (*NgwafAccountSignal, error) {
	var resource NgwafAccountSignal
	err := ctx.ReadResource("fastly:index/ngwafAccountSignal:NgwafAccountSignal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafAccountSignal resources.
type ngwafAccountSignalState struct {
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos []string `pulumi:"appliesTos"`
	// The description of the signal.
	Description *string `pulumi:"description"`
	// The name of the signal. Special characters and periods are not accepted.
	Name *string `pulumi:"name"`
	// The generated reference ID of the signal.
	ReferenceId *string `pulumi:"referenceId"`
}

type NgwafAccountSignalState struct {
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos pulumi.StringArrayInput
	// The description of the signal.
	Description pulumi.StringPtrInput
	// The name of the signal. Special characters and periods are not accepted.
	Name pulumi.StringPtrInput
	// The generated reference ID of the signal.
	ReferenceId pulumi.StringPtrInput
}

func (NgwafAccountSignalState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAccountSignalState)(nil)).Elem()
}

type ngwafAccountSignalArgs struct {
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos []string `pulumi:"appliesTos"`
	// The description of the signal.
	Description *string `pulumi:"description"`
	// The name of the signal. Special characters and periods are not accepted.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a NgwafAccountSignal resource.
type NgwafAccountSignalArgs struct {
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos pulumi.StringArrayInput
	// The description of the signal.
	Description pulumi.StringPtrInput
	// The name of the signal. Special characters and periods are not accepted.
	Name pulumi.StringPtrInput
}

func (NgwafAccountSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAccountSignalArgs)(nil)).Elem()
}

type NgwafAccountSignalInput interface {
	pulumi.Input

	ToNgwafAccountSignalOutput() NgwafAccountSignalOutput
	ToNgwafAccountSignalOutputWithContext(ctx context.Context) NgwafAccountSignalOutput
}

func (*NgwafAccountSignal) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAccountSignal)(nil)).Elem()
}

func (i *NgwafAccountSignal) ToNgwafAccountSignalOutput() NgwafAccountSignalOutput {
	return i.ToNgwafAccountSignalOutputWithContext(context.Background())
}

func (i *NgwafAccountSignal) ToNgwafAccountSignalOutputWithContext(ctx context.Context) NgwafAccountSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAccountSignalOutput)
}

// NgwafAccountSignalArrayInput is an input type that accepts NgwafAccountSignalArray and NgwafAccountSignalArrayOutput values.
// You can construct a concrete instance of `NgwafAccountSignalArrayInput` via:
//
//	NgwafAccountSignalArray{ NgwafAccountSignalArgs{...} }
type NgwafAccountSignalArrayInput interface {
	pulumi.Input

	ToNgwafAccountSignalArrayOutput() NgwafAccountSignalArrayOutput
	ToNgwafAccountSignalArrayOutputWithContext(context.Context) NgwafAccountSignalArrayOutput
}

type NgwafAccountSignalArray []NgwafAccountSignalInput

func (NgwafAccountSignalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAccountSignal)(nil)).Elem()
}

func (i NgwafAccountSignalArray) ToNgwafAccountSignalArrayOutput() NgwafAccountSignalArrayOutput {
	return i.ToNgwafAccountSignalArrayOutputWithContext(context.Background())
}

func (i NgwafAccountSignalArray) ToNgwafAccountSignalArrayOutputWithContext(ctx context.Context) NgwafAccountSignalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAccountSignalArrayOutput)
}

// NgwafAccountSignalMapInput is an input type that accepts NgwafAccountSignalMap and NgwafAccountSignalMapOutput values.
// You can construct a concrete instance of `NgwafAccountSignalMapInput` via:
//
//	NgwafAccountSignalMap{ "key": NgwafAccountSignalArgs{...} }
type NgwafAccountSignalMapInput interface {
	pulumi.Input

	ToNgwafAccountSignalMapOutput() NgwafAccountSignalMapOutput
	ToNgwafAccountSignalMapOutputWithContext(context.Context) NgwafAccountSignalMapOutput
}

type NgwafAccountSignalMap map[string]NgwafAccountSignalInput

func (NgwafAccountSignalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAccountSignal)(nil)).Elem()
}

func (i NgwafAccountSignalMap) ToNgwafAccountSignalMapOutput() NgwafAccountSignalMapOutput {
	return i.ToNgwafAccountSignalMapOutputWithContext(context.Background())
}

func (i NgwafAccountSignalMap) ToNgwafAccountSignalMapOutputWithContext(ctx context.Context) NgwafAccountSignalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAccountSignalMapOutput)
}

type NgwafAccountSignalOutput struct{ *pulumi.OutputState }

func (NgwafAccountSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAccountSignal)(nil)).Elem()
}

func (o NgwafAccountSignalOutput) ToNgwafAccountSignalOutput() NgwafAccountSignalOutput {
	return o
}

func (o NgwafAccountSignalOutput) ToNgwafAccountSignalOutputWithContext(ctx context.Context) NgwafAccountSignalOutput {
	return o
}

// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
func (o NgwafAccountSignalOutput) AppliesTos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NgwafAccountSignal) pulumi.StringArrayOutput { return v.AppliesTos }).(pulumi.StringArrayOutput)
}

// The description of the signal.
func (o NgwafAccountSignalOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafAccountSignal) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the signal. Special characters and periods are not accepted.
func (o NgwafAccountSignalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAccountSignal) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The generated reference ID of the signal.
func (o NgwafAccountSignalOutput) ReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAccountSignal) pulumi.StringOutput { return v.ReferenceId }).(pulumi.StringOutput)
}

type NgwafAccountSignalArrayOutput struct{ *pulumi.OutputState }

func (NgwafAccountSignalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAccountSignal)(nil)).Elem()
}

func (o NgwafAccountSignalArrayOutput) ToNgwafAccountSignalArrayOutput() NgwafAccountSignalArrayOutput {
	return o
}

func (o NgwafAccountSignalArrayOutput) ToNgwafAccountSignalArrayOutputWithContext(ctx context.Context) NgwafAccountSignalArrayOutput {
	return o
}

func (o NgwafAccountSignalArrayOutput) Index(i pulumi.IntInput) NgwafAccountSignalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafAccountSignal {
		return vs[0].([]*NgwafAccountSignal)[vs[1].(int)]
	}).(NgwafAccountSignalOutput)
}

type NgwafAccountSignalMapOutput struct{ *pulumi.OutputState }

func (NgwafAccountSignalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAccountSignal)(nil)).Elem()
}

func (o NgwafAccountSignalMapOutput) ToNgwafAccountSignalMapOutput() NgwafAccountSignalMapOutput {
	return o
}

func (o NgwafAccountSignalMapOutput) ToNgwafAccountSignalMapOutputWithContext(ctx context.Context) NgwafAccountSignalMapOutput {
	return o
}

func (o NgwafAccountSignalMapOutput) MapIndex(k pulumi.StringInput) NgwafAccountSignalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafAccountSignal {
		return vs[0].(map[string]*NgwafAccountSignal)[vs[1].(string)]
	}).(NgwafAccountSignalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAccountSignalInput)(nil)).Elem(), &NgwafAccountSignal{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAccountSignalArrayInput)(nil)).Elem(), NgwafAccountSignalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAccountSignalMapInput)(nil)).Elem(), NgwafAccountSignalMap{})
	pulumi.RegisterOutputType(NgwafAccountSignalOutput{})
	pulumi.RegisterOutputType(NgwafAccountSignalArrayOutput{})
	pulumi.RegisterOutputType(NgwafAccountSignalMapOutput{})
}
