// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// This is an example of the import command being applied to the resource named `fastly_service_dynamic_snippet_content_v1.content` The resource ID is a combined value of the `service_id` and `snippet_id` separated by a forward slash.
//
// ```sh
//  $ pulumi import fastly:index/serviceDynamicSnippetContentv1:ServiceDynamicSnippetContentv1 content xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
// ```
//
//  If Terraform is already managing remote content against a resource being imported then the user will be asked to remove it from the existing Terraform state. The following is an example of the Terraform state command to remove the resource named `fastly_service_dynamic_snippet_content_v1.content` from the Terraform state file. $ terraform state rm fastly_service_dynamic_snippet_content_v1.content
type ServiceDynamicSnippetContentv1 struct {
	pulumi.CustomResourceState

	// The VCL code that specifies exactly what the snippet does.
	Content pulumi.StringOutput `pulumi:"content"`
	// The ID of the service that the dynamic snippet belongs to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
	// The ID of the dynamic snippet that the content belong to
	SnippetId pulumi.StringOutput `pulumi:"snippetId"`
}

// NewServiceDynamicSnippetContentv1 registers a new resource with the given unique name, arguments, and options.
func NewServiceDynamicSnippetContentv1(ctx *pulumi.Context,
	name string, args *ServiceDynamicSnippetContentv1Args, opts ...pulumi.ResourceOption) (*ServiceDynamicSnippetContentv1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	if args.SnippetId == nil {
		return nil, errors.New("invalid value for required argument 'SnippetId'")
	}
	var resource ServiceDynamicSnippetContentv1
	err := ctx.RegisterResource("fastly:index/serviceDynamicSnippetContentv1:ServiceDynamicSnippetContentv1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceDynamicSnippetContentv1 gets an existing ServiceDynamicSnippetContentv1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceDynamicSnippetContentv1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceDynamicSnippetContentv1State, opts ...pulumi.ResourceOption) (*ServiceDynamicSnippetContentv1, error) {
	var resource ServiceDynamicSnippetContentv1
	err := ctx.ReadResource("fastly:index/serviceDynamicSnippetContentv1:ServiceDynamicSnippetContentv1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceDynamicSnippetContentv1 resources.
type serviceDynamicSnippetContentv1State struct {
	// The VCL code that specifies exactly what the snippet does.
	Content *string `pulumi:"content"`
	// The ID of the service that the dynamic snippet belongs to
	ServiceId *string `pulumi:"serviceId"`
	// The ID of the dynamic snippet that the content belong to
	SnippetId *string `pulumi:"snippetId"`
}

type ServiceDynamicSnippetContentv1State struct {
	// The VCL code that specifies exactly what the snippet does.
	Content pulumi.StringPtrInput
	// The ID of the service that the dynamic snippet belongs to
	ServiceId pulumi.StringPtrInput
	// The ID of the dynamic snippet that the content belong to
	SnippetId pulumi.StringPtrInput
}

func (ServiceDynamicSnippetContentv1State) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDynamicSnippetContentv1State)(nil)).Elem()
}

type serviceDynamicSnippetContentv1Args struct {
	// The VCL code that specifies exactly what the snippet does.
	Content string `pulumi:"content"`
	// The ID of the service that the dynamic snippet belongs to
	ServiceId string `pulumi:"serviceId"`
	// The ID of the dynamic snippet that the content belong to
	SnippetId string `pulumi:"snippetId"`
}

// The set of arguments for constructing a ServiceDynamicSnippetContentv1 resource.
type ServiceDynamicSnippetContentv1Args struct {
	// The VCL code that specifies exactly what the snippet does.
	Content pulumi.StringInput
	// The ID of the service that the dynamic snippet belongs to
	ServiceId pulumi.StringInput
	// The ID of the dynamic snippet that the content belong to
	SnippetId pulumi.StringInput
}

func (ServiceDynamicSnippetContentv1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDynamicSnippetContentv1Args)(nil)).Elem()
}

type ServiceDynamicSnippetContentv1Input interface {
	pulumi.Input

	ToServiceDynamicSnippetContentv1Output() ServiceDynamicSnippetContentv1Output
	ToServiceDynamicSnippetContentv1OutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1Output
}

func (*ServiceDynamicSnippetContentv1) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDynamicSnippetContentv1)(nil))
}

func (i *ServiceDynamicSnippetContentv1) ToServiceDynamicSnippetContentv1Output() ServiceDynamicSnippetContentv1Output {
	return i.ToServiceDynamicSnippetContentv1OutputWithContext(context.Background())
}

func (i *ServiceDynamicSnippetContentv1) ToServiceDynamicSnippetContentv1OutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1Output {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDynamicSnippetContentv1Output)
}

func (i *ServiceDynamicSnippetContentv1) ToServiceDynamicSnippetContentv1PtrOutput() ServiceDynamicSnippetContentv1PtrOutput {
	return i.ToServiceDynamicSnippetContentv1PtrOutputWithContext(context.Background())
}

func (i *ServiceDynamicSnippetContentv1) ToServiceDynamicSnippetContentv1PtrOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDynamicSnippetContentv1PtrOutput)
}

type ServiceDynamicSnippetContentv1PtrInput interface {
	pulumi.Input

	ToServiceDynamicSnippetContentv1PtrOutput() ServiceDynamicSnippetContentv1PtrOutput
	ToServiceDynamicSnippetContentv1PtrOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1PtrOutput
}

type serviceDynamicSnippetContentv1PtrType ServiceDynamicSnippetContentv1Args

func (*serviceDynamicSnippetContentv1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDynamicSnippetContentv1)(nil))
}

func (i *serviceDynamicSnippetContentv1PtrType) ToServiceDynamicSnippetContentv1PtrOutput() ServiceDynamicSnippetContentv1PtrOutput {
	return i.ToServiceDynamicSnippetContentv1PtrOutputWithContext(context.Background())
}

func (i *serviceDynamicSnippetContentv1PtrType) ToServiceDynamicSnippetContentv1PtrOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDynamicSnippetContentv1PtrOutput)
}

// ServiceDynamicSnippetContentv1ArrayInput is an input type that accepts ServiceDynamicSnippetContentv1Array and ServiceDynamicSnippetContentv1ArrayOutput values.
// You can construct a concrete instance of `ServiceDynamicSnippetContentv1ArrayInput` via:
//
//          ServiceDynamicSnippetContentv1Array{ ServiceDynamicSnippetContentv1Args{...} }
type ServiceDynamicSnippetContentv1ArrayInput interface {
	pulumi.Input

	ToServiceDynamicSnippetContentv1ArrayOutput() ServiceDynamicSnippetContentv1ArrayOutput
	ToServiceDynamicSnippetContentv1ArrayOutputWithContext(context.Context) ServiceDynamicSnippetContentv1ArrayOutput
}

type ServiceDynamicSnippetContentv1Array []ServiceDynamicSnippetContentv1Input

func (ServiceDynamicSnippetContentv1Array) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ServiceDynamicSnippetContentv1)(nil))
}

func (i ServiceDynamicSnippetContentv1Array) ToServiceDynamicSnippetContentv1ArrayOutput() ServiceDynamicSnippetContentv1ArrayOutput {
	return i.ToServiceDynamicSnippetContentv1ArrayOutputWithContext(context.Background())
}

func (i ServiceDynamicSnippetContentv1Array) ToServiceDynamicSnippetContentv1ArrayOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDynamicSnippetContentv1ArrayOutput)
}

// ServiceDynamicSnippetContentv1MapInput is an input type that accepts ServiceDynamicSnippetContentv1Map and ServiceDynamicSnippetContentv1MapOutput values.
// You can construct a concrete instance of `ServiceDynamicSnippetContentv1MapInput` via:
//
//          ServiceDynamicSnippetContentv1Map{ "key": ServiceDynamicSnippetContentv1Args{...} }
type ServiceDynamicSnippetContentv1MapInput interface {
	pulumi.Input

	ToServiceDynamicSnippetContentv1MapOutput() ServiceDynamicSnippetContentv1MapOutput
	ToServiceDynamicSnippetContentv1MapOutputWithContext(context.Context) ServiceDynamicSnippetContentv1MapOutput
}

type ServiceDynamicSnippetContentv1Map map[string]ServiceDynamicSnippetContentv1Input

func (ServiceDynamicSnippetContentv1Map) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ServiceDynamicSnippetContentv1)(nil))
}

func (i ServiceDynamicSnippetContentv1Map) ToServiceDynamicSnippetContentv1MapOutput() ServiceDynamicSnippetContentv1MapOutput {
	return i.ToServiceDynamicSnippetContentv1MapOutputWithContext(context.Background())
}

func (i ServiceDynamicSnippetContentv1Map) ToServiceDynamicSnippetContentv1MapOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDynamicSnippetContentv1MapOutput)
}

type ServiceDynamicSnippetContentv1Output struct {
	*pulumi.OutputState
}

func (ServiceDynamicSnippetContentv1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceDynamicSnippetContentv1)(nil))
}

func (o ServiceDynamicSnippetContentv1Output) ToServiceDynamicSnippetContentv1Output() ServiceDynamicSnippetContentv1Output {
	return o
}

func (o ServiceDynamicSnippetContentv1Output) ToServiceDynamicSnippetContentv1OutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1Output {
	return o
}

func (o ServiceDynamicSnippetContentv1Output) ToServiceDynamicSnippetContentv1PtrOutput() ServiceDynamicSnippetContentv1PtrOutput {
	return o.ToServiceDynamicSnippetContentv1PtrOutputWithContext(context.Background())
}

func (o ServiceDynamicSnippetContentv1Output) ToServiceDynamicSnippetContentv1PtrOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1PtrOutput {
	return o.ApplyT(func(v ServiceDynamicSnippetContentv1) *ServiceDynamicSnippetContentv1 {
		return &v
	}).(ServiceDynamicSnippetContentv1PtrOutput)
}

type ServiceDynamicSnippetContentv1PtrOutput struct {
	*pulumi.OutputState
}

func (ServiceDynamicSnippetContentv1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDynamicSnippetContentv1)(nil))
}

func (o ServiceDynamicSnippetContentv1PtrOutput) ToServiceDynamicSnippetContentv1PtrOutput() ServiceDynamicSnippetContentv1PtrOutput {
	return o
}

func (o ServiceDynamicSnippetContentv1PtrOutput) ToServiceDynamicSnippetContentv1PtrOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1PtrOutput {
	return o
}

type ServiceDynamicSnippetContentv1ArrayOutput struct{ *pulumi.OutputState }

func (ServiceDynamicSnippetContentv1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceDynamicSnippetContentv1)(nil))
}

func (o ServiceDynamicSnippetContentv1ArrayOutput) ToServiceDynamicSnippetContentv1ArrayOutput() ServiceDynamicSnippetContentv1ArrayOutput {
	return o
}

func (o ServiceDynamicSnippetContentv1ArrayOutput) ToServiceDynamicSnippetContentv1ArrayOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1ArrayOutput {
	return o
}

func (o ServiceDynamicSnippetContentv1ArrayOutput) Index(i pulumi.IntInput) ServiceDynamicSnippetContentv1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceDynamicSnippetContentv1 {
		return vs[0].([]ServiceDynamicSnippetContentv1)[vs[1].(int)]
	}).(ServiceDynamicSnippetContentv1Output)
}

type ServiceDynamicSnippetContentv1MapOutput struct{ *pulumi.OutputState }

func (ServiceDynamicSnippetContentv1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceDynamicSnippetContentv1)(nil))
}

func (o ServiceDynamicSnippetContentv1MapOutput) ToServiceDynamicSnippetContentv1MapOutput() ServiceDynamicSnippetContentv1MapOutput {
	return o
}

func (o ServiceDynamicSnippetContentv1MapOutput) ToServiceDynamicSnippetContentv1MapOutputWithContext(ctx context.Context) ServiceDynamicSnippetContentv1MapOutput {
	return o
}

func (o ServiceDynamicSnippetContentv1MapOutput) MapIndex(k pulumi.StringInput) ServiceDynamicSnippetContentv1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServiceDynamicSnippetContentv1 {
		return vs[0].(map[string]ServiceDynamicSnippetContentv1)[vs[1].(string)]
	}).(ServiceDynamicSnippetContentv1Output)
}

func init() {
	pulumi.RegisterOutputType(ServiceDynamicSnippetContentv1Output{})
	pulumi.RegisterOutputType(ServiceDynamicSnippetContentv1PtrOutput{})
	pulumi.RegisterOutputType(ServiceDynamicSnippetContentv1ArrayOutput{})
	pulumi.RegisterOutputType(ServiceDynamicSnippetContentv1MapOutput{})
}
