// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Fastly User, representing the configuration for a user account for interacting with Fastly.
//
// The User resource requires a login and name, and optionally a role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fastly/sdk/v2/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewUserv1(ctx, "demo", &fastly.Userv1Args{
// 			Login: pulumi.String("demo@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A Fastly User can be imported using their user ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/userv1:Userv1 demo xxxxxxxxxxxxxxxxxxxx
// ```
type Userv1 struct {
	pulumi.CustomResourceState

	// The email address, which is the login name, of the User.
	Login pulumi.StringOutput `pulumi:"login"`
	// The real life name of the user.
	Name pulumi.StringOutput `pulumi:"name"`
	// The role of this user. Can be `user` (the default), `billing`, `engineer`, or `superuser`. For detailed information on the abilities granted to each role, see [Fastly's Documentation on User roles](https://docs.fastly.com/en/guides/configuring-user-roles-and-permissions#user-roles-and-what-they-can-do).
	Role pulumi.StringPtrOutput `pulumi:"role"`
}

// NewUserv1 registers a new resource with the given unique name, arguments, and options.
func NewUserv1(ctx *pulumi.Context,
	name string, args *Userv1Args, opts ...pulumi.ResourceOption) (*Userv1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Login == nil {
		return nil, errors.New("invalid value for required argument 'Login'")
	}
	var resource Userv1
	err := ctx.RegisterResource("fastly:index/userv1:Userv1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserv1 gets an existing Userv1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserv1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Userv1State, opts ...pulumi.ResourceOption) (*Userv1, error) {
	var resource Userv1
	err := ctx.ReadResource("fastly:index/userv1:Userv1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Userv1 resources.
type userv1State struct {
	// The email address, which is the login name, of the User.
	Login *string `pulumi:"login"`
	// The real life name of the user.
	Name *string `pulumi:"name"`
	// The role of this user. Can be `user` (the default), `billing`, `engineer`, or `superuser`. For detailed information on the abilities granted to each role, see [Fastly's Documentation on User roles](https://docs.fastly.com/en/guides/configuring-user-roles-and-permissions#user-roles-and-what-they-can-do).
	Role *string `pulumi:"role"`
}

type Userv1State struct {
	// The email address, which is the login name, of the User.
	Login pulumi.StringPtrInput
	// The real life name of the user.
	Name pulumi.StringPtrInput
	// The role of this user. Can be `user` (the default), `billing`, `engineer`, or `superuser`. For detailed information on the abilities granted to each role, see [Fastly's Documentation on User roles](https://docs.fastly.com/en/guides/configuring-user-roles-and-permissions#user-roles-and-what-they-can-do).
	Role pulumi.StringPtrInput
}

func (Userv1State) ElementType() reflect.Type {
	return reflect.TypeOf((*userv1State)(nil)).Elem()
}

type userv1Args struct {
	// The email address, which is the login name, of the User.
	Login string `pulumi:"login"`
	// The real life name of the user.
	Name *string `pulumi:"name"`
	// The role of this user. Can be `user` (the default), `billing`, `engineer`, or `superuser`. For detailed information on the abilities granted to each role, see [Fastly's Documentation on User roles](https://docs.fastly.com/en/guides/configuring-user-roles-and-permissions#user-roles-and-what-they-can-do).
	Role *string `pulumi:"role"`
}

// The set of arguments for constructing a Userv1 resource.
type Userv1Args struct {
	// The email address, which is the login name, of the User.
	Login pulumi.StringInput
	// The real life name of the user.
	Name pulumi.StringPtrInput
	// The role of this user. Can be `user` (the default), `billing`, `engineer`, or `superuser`. For detailed information on the abilities granted to each role, see [Fastly's Documentation on User roles](https://docs.fastly.com/en/guides/configuring-user-roles-and-permissions#user-roles-and-what-they-can-do).
	Role pulumi.StringPtrInput
}

func (Userv1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*userv1Args)(nil)).Elem()
}

type Userv1Input interface {
	pulumi.Input

	ToUserv1Output() Userv1Output
	ToUserv1OutputWithContext(ctx context.Context) Userv1Output
}

func (*Userv1) ElementType() reflect.Type {
	return reflect.TypeOf((*Userv1)(nil))
}

func (i *Userv1) ToUserv1Output() Userv1Output {
	return i.ToUserv1OutputWithContext(context.Background())
}

func (i *Userv1) ToUserv1OutputWithContext(ctx context.Context) Userv1Output {
	return pulumi.ToOutputWithContext(ctx, i).(Userv1Output)
}

func (i *Userv1) ToUserv1PtrOutput() Userv1PtrOutput {
	return i.ToUserv1PtrOutputWithContext(context.Background())
}

func (i *Userv1) ToUserv1PtrOutputWithContext(ctx context.Context) Userv1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Userv1PtrOutput)
}

type Userv1PtrInput interface {
	pulumi.Input

	ToUserv1PtrOutput() Userv1PtrOutput
	ToUserv1PtrOutputWithContext(ctx context.Context) Userv1PtrOutput
}

type userv1PtrType Userv1Args

func (*userv1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Userv1)(nil))
}

func (i *userv1PtrType) ToUserv1PtrOutput() Userv1PtrOutput {
	return i.ToUserv1PtrOutputWithContext(context.Background())
}

func (i *userv1PtrType) ToUserv1PtrOutputWithContext(ctx context.Context) Userv1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Userv1PtrOutput)
}

// Userv1ArrayInput is an input type that accepts Userv1Array and Userv1ArrayOutput values.
// You can construct a concrete instance of `Userv1ArrayInput` via:
//
//          Userv1Array{ Userv1Args{...} }
type Userv1ArrayInput interface {
	pulumi.Input

	ToUserv1ArrayOutput() Userv1ArrayOutput
	ToUserv1ArrayOutputWithContext(context.Context) Userv1ArrayOutput
}

type Userv1Array []Userv1Input

func (Userv1Array) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Userv1)(nil))
}

func (i Userv1Array) ToUserv1ArrayOutput() Userv1ArrayOutput {
	return i.ToUserv1ArrayOutputWithContext(context.Background())
}

func (i Userv1Array) ToUserv1ArrayOutputWithContext(ctx context.Context) Userv1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Userv1ArrayOutput)
}

// Userv1MapInput is an input type that accepts Userv1Map and Userv1MapOutput values.
// You can construct a concrete instance of `Userv1MapInput` via:
//
//          Userv1Map{ "key": Userv1Args{...} }
type Userv1MapInput interface {
	pulumi.Input

	ToUserv1MapOutput() Userv1MapOutput
	ToUserv1MapOutputWithContext(context.Context) Userv1MapOutput
}

type Userv1Map map[string]Userv1Input

func (Userv1Map) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Userv1)(nil))
}

func (i Userv1Map) ToUserv1MapOutput() Userv1MapOutput {
	return i.ToUserv1MapOutputWithContext(context.Background())
}

func (i Userv1Map) ToUserv1MapOutputWithContext(ctx context.Context) Userv1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Userv1MapOutput)
}

type Userv1Output struct {
	*pulumi.OutputState
}

func (Userv1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Userv1)(nil))
}

func (o Userv1Output) ToUserv1Output() Userv1Output {
	return o
}

func (o Userv1Output) ToUserv1OutputWithContext(ctx context.Context) Userv1Output {
	return o
}

func (o Userv1Output) ToUserv1PtrOutput() Userv1PtrOutput {
	return o.ToUserv1PtrOutputWithContext(context.Background())
}

func (o Userv1Output) ToUserv1PtrOutputWithContext(ctx context.Context) Userv1PtrOutput {
	return o.ApplyT(func(v Userv1) *Userv1 {
		return &v
	}).(Userv1PtrOutput)
}

type Userv1PtrOutput struct {
	*pulumi.OutputState
}

func (Userv1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Userv1)(nil))
}

func (o Userv1PtrOutput) ToUserv1PtrOutput() Userv1PtrOutput {
	return o
}

func (o Userv1PtrOutput) ToUserv1PtrOutputWithContext(ctx context.Context) Userv1PtrOutput {
	return o
}

type Userv1ArrayOutput struct{ *pulumi.OutputState }

func (Userv1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Userv1)(nil))
}

func (o Userv1ArrayOutput) ToUserv1ArrayOutput() Userv1ArrayOutput {
	return o
}

func (o Userv1ArrayOutput) ToUserv1ArrayOutputWithContext(ctx context.Context) Userv1ArrayOutput {
	return o
}

func (o Userv1ArrayOutput) Index(i pulumi.IntInput) Userv1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Userv1 {
		return vs[0].([]Userv1)[vs[1].(int)]
	}).(Userv1Output)
}

type Userv1MapOutput struct{ *pulumi.OutputState }

func (Userv1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Userv1)(nil))
}

func (o Userv1MapOutput) ToUserv1MapOutput() Userv1MapOutput {
	return o
}

func (o Userv1MapOutput) ToUserv1MapOutputWithContext(ctx context.Context) Userv1MapOutput {
	return o
}

func (o Userv1MapOutput) MapIndex(k pulumi.StringInput) Userv1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Userv1 {
		return vs[0].(map[string]Userv1)[vs[1].(string)]
	}).(Userv1Output)
}

func init() {
	pulumi.RegisterOutputType(Userv1Output{})
	pulumi.RegisterOutputType(Userv1PtrOutput{})
	pulumi.RegisterOutputType(Userv1ArrayOutput{})
	pulumi.RegisterOutputType(Userv1MapOutput{})
}
