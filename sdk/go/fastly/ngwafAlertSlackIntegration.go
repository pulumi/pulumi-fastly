// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Fastly Next-Gen WAF Alert Slack integrations, which provide a connection to Slack.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafAlertSlackIntegration(ctx, "demo_slack_alert", &fastly.NgwafAlertSlackIntegrationArgs{
//				Description: pulumi.String("Some Description"),
//				Webhook:     pulumi.String("https://example.com/webhooks/my-service"),
//				WorkspaceId: pulumi.Any(demo.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF Alert Webhook integrations can be imported using their ID and the ID of the workspace they belong to.
//
// ```sh
// $ pulumi import fastly:index/ngwafAlertSlackIntegration:NgwafAlertSlackIntegration example <workspace_id>/<alert_id>
// ```
type NgwafAlertSlackIntegration struct {
	pulumi.CustomResourceState

	// The description of the alert.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Slack webhook URL.
	Webhook pulumi.StringOutput `pulumi:"webhook"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafAlertSlackIntegration registers a new resource with the given unique name, arguments, and options.
func NewNgwafAlertSlackIntegration(ctx *pulumi.Context,
	name string, args *NgwafAlertSlackIntegrationArgs, opts ...pulumi.ResourceOption) (*NgwafAlertSlackIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Webhook == nil {
		return nil, errors.New("invalid value for required argument 'Webhook'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	if args.Webhook != nil {
		args.Webhook = pulumi.ToSecret(args.Webhook).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"webhook",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafAlertSlackIntegration
	err := ctx.RegisterResource("fastly:index/ngwafAlertSlackIntegration:NgwafAlertSlackIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafAlertSlackIntegration gets an existing NgwafAlertSlackIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafAlertSlackIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafAlertSlackIntegrationState, opts ...pulumi.ResourceOption) (*NgwafAlertSlackIntegration, error) {
	var resource NgwafAlertSlackIntegration
	err := ctx.ReadResource("fastly:index/ngwafAlertSlackIntegration:NgwafAlertSlackIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafAlertSlackIntegration resources.
type ngwafAlertSlackIntegrationState struct {
	// The description of the alert.
	Description *string `pulumi:"description"`
	// The Slack webhook URL.
	Webhook *string `pulumi:"webhook"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafAlertSlackIntegrationState struct {
	// The description of the alert.
	Description pulumi.StringPtrInput
	// The Slack webhook URL.
	Webhook pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafAlertSlackIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAlertSlackIntegrationState)(nil)).Elem()
}

type ngwafAlertSlackIntegrationArgs struct {
	// The description of the alert.
	Description *string `pulumi:"description"`
	// The Slack webhook URL.
	Webhook string `pulumi:"webhook"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafAlertSlackIntegration resource.
type NgwafAlertSlackIntegrationArgs struct {
	// The description of the alert.
	Description pulumi.StringPtrInput
	// The Slack webhook URL.
	Webhook pulumi.StringInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (NgwafAlertSlackIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAlertSlackIntegrationArgs)(nil)).Elem()
}

type NgwafAlertSlackIntegrationInput interface {
	pulumi.Input

	ToNgwafAlertSlackIntegrationOutput() NgwafAlertSlackIntegrationOutput
	ToNgwafAlertSlackIntegrationOutputWithContext(ctx context.Context) NgwafAlertSlackIntegrationOutput
}

func (*NgwafAlertSlackIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAlertSlackIntegration)(nil)).Elem()
}

func (i *NgwafAlertSlackIntegration) ToNgwafAlertSlackIntegrationOutput() NgwafAlertSlackIntegrationOutput {
	return i.ToNgwafAlertSlackIntegrationOutputWithContext(context.Background())
}

func (i *NgwafAlertSlackIntegration) ToNgwafAlertSlackIntegrationOutputWithContext(ctx context.Context) NgwafAlertSlackIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertSlackIntegrationOutput)
}

// NgwafAlertSlackIntegrationArrayInput is an input type that accepts NgwafAlertSlackIntegrationArray and NgwafAlertSlackIntegrationArrayOutput values.
// You can construct a concrete instance of `NgwafAlertSlackIntegrationArrayInput` via:
//
//	NgwafAlertSlackIntegrationArray{ NgwafAlertSlackIntegrationArgs{...} }
type NgwafAlertSlackIntegrationArrayInput interface {
	pulumi.Input

	ToNgwafAlertSlackIntegrationArrayOutput() NgwafAlertSlackIntegrationArrayOutput
	ToNgwafAlertSlackIntegrationArrayOutputWithContext(context.Context) NgwafAlertSlackIntegrationArrayOutput
}

type NgwafAlertSlackIntegrationArray []NgwafAlertSlackIntegrationInput

func (NgwafAlertSlackIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAlertSlackIntegration)(nil)).Elem()
}

func (i NgwafAlertSlackIntegrationArray) ToNgwafAlertSlackIntegrationArrayOutput() NgwafAlertSlackIntegrationArrayOutput {
	return i.ToNgwafAlertSlackIntegrationArrayOutputWithContext(context.Background())
}

func (i NgwafAlertSlackIntegrationArray) ToNgwafAlertSlackIntegrationArrayOutputWithContext(ctx context.Context) NgwafAlertSlackIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertSlackIntegrationArrayOutput)
}

// NgwafAlertSlackIntegrationMapInput is an input type that accepts NgwafAlertSlackIntegrationMap and NgwafAlertSlackIntegrationMapOutput values.
// You can construct a concrete instance of `NgwafAlertSlackIntegrationMapInput` via:
//
//	NgwafAlertSlackIntegrationMap{ "key": NgwafAlertSlackIntegrationArgs{...} }
type NgwafAlertSlackIntegrationMapInput interface {
	pulumi.Input

	ToNgwafAlertSlackIntegrationMapOutput() NgwafAlertSlackIntegrationMapOutput
	ToNgwafAlertSlackIntegrationMapOutputWithContext(context.Context) NgwafAlertSlackIntegrationMapOutput
}

type NgwafAlertSlackIntegrationMap map[string]NgwafAlertSlackIntegrationInput

func (NgwafAlertSlackIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAlertSlackIntegration)(nil)).Elem()
}

func (i NgwafAlertSlackIntegrationMap) ToNgwafAlertSlackIntegrationMapOutput() NgwafAlertSlackIntegrationMapOutput {
	return i.ToNgwafAlertSlackIntegrationMapOutputWithContext(context.Background())
}

func (i NgwafAlertSlackIntegrationMap) ToNgwafAlertSlackIntegrationMapOutputWithContext(ctx context.Context) NgwafAlertSlackIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertSlackIntegrationMapOutput)
}

type NgwafAlertSlackIntegrationOutput struct{ *pulumi.OutputState }

func (NgwafAlertSlackIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAlertSlackIntegration)(nil)).Elem()
}

func (o NgwafAlertSlackIntegrationOutput) ToNgwafAlertSlackIntegrationOutput() NgwafAlertSlackIntegrationOutput {
	return o
}

func (o NgwafAlertSlackIntegrationOutput) ToNgwafAlertSlackIntegrationOutputWithContext(ctx context.Context) NgwafAlertSlackIntegrationOutput {
	return o
}

// The description of the alert.
func (o NgwafAlertSlackIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafAlertSlackIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Slack webhook URL.
func (o NgwafAlertSlackIntegrationOutput) Webhook() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertSlackIntegration) pulumi.StringOutput { return v.Webhook }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o NgwafAlertSlackIntegrationOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertSlackIntegration) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafAlertSlackIntegrationArrayOutput struct{ *pulumi.OutputState }

func (NgwafAlertSlackIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAlertSlackIntegration)(nil)).Elem()
}

func (o NgwafAlertSlackIntegrationArrayOutput) ToNgwafAlertSlackIntegrationArrayOutput() NgwafAlertSlackIntegrationArrayOutput {
	return o
}

func (o NgwafAlertSlackIntegrationArrayOutput) ToNgwafAlertSlackIntegrationArrayOutputWithContext(ctx context.Context) NgwafAlertSlackIntegrationArrayOutput {
	return o
}

func (o NgwafAlertSlackIntegrationArrayOutput) Index(i pulumi.IntInput) NgwafAlertSlackIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafAlertSlackIntegration {
		return vs[0].([]*NgwafAlertSlackIntegration)[vs[1].(int)]
	}).(NgwafAlertSlackIntegrationOutput)
}

type NgwafAlertSlackIntegrationMapOutput struct{ *pulumi.OutputState }

func (NgwafAlertSlackIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAlertSlackIntegration)(nil)).Elem()
}

func (o NgwafAlertSlackIntegrationMapOutput) ToNgwafAlertSlackIntegrationMapOutput() NgwafAlertSlackIntegrationMapOutput {
	return o
}

func (o NgwafAlertSlackIntegrationMapOutput) ToNgwafAlertSlackIntegrationMapOutputWithContext(ctx context.Context) NgwafAlertSlackIntegrationMapOutput {
	return o
}

func (o NgwafAlertSlackIntegrationMapOutput) MapIndex(k pulumi.StringInput) NgwafAlertSlackIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafAlertSlackIntegration {
		return vs[0].(map[string]*NgwafAlertSlackIntegration)[vs[1].(string)]
	}).(NgwafAlertSlackIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertSlackIntegrationInput)(nil)).Elem(), &NgwafAlertSlackIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertSlackIntegrationArrayInput)(nil)).Elem(), NgwafAlertSlackIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertSlackIntegrationMapInput)(nil)).Elem(), NgwafAlertSlackIntegrationMap{})
	pulumi.RegisterOutputType(NgwafAlertSlackIntegrationOutput{})
	pulumi.RegisterOutputType(NgwafAlertSlackIntegrationArrayOutput{})
	pulumi.RegisterOutputType(NgwafAlertSlackIntegrationMapOutput{})
}
