// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Next-Gen WAF Account Rule.\
// Account-level rules apply across one or more workspaces and are useful for defining shared or global WAF logic.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafAccountRule(ctx, "example", &fastly.NgwafAccountRuleArgs{
//				AppliesTos: pulumi.StringArray{
//					pulumi.String("*"),
//				},
//				Type:           pulumi.String("request"),
//				Description:    pulumi.String("example"),
//				Enabled:        pulumi.Bool(true),
//				RequestLogging: pulumi.String("sampled"),
//				GroupOperator:  pulumi.String("all"),
//				Actions: fastly.NgwafAccountRuleActionArray{
//					&fastly.NgwafAccountRuleActionArgs{
//						Type: pulumi.String("block"),
//					},
//				},
//				Conditions: fastly.NgwafAccountRuleConditionArray{
//					&fastly.NgwafAccountRuleConditionArgs{
//						Field:    pulumi.String("ip"),
//						Operator: pulumi.String("equals"),
//						Value:    pulumi.String("1.2.3.4"),
//					},
//				},
//				GroupConditions: fastly.NgwafAccountRuleGroupConditionArray{
//					&fastly.NgwafAccountRuleGroupConditionArgs{
//						GroupOperator: pulumi.String("all"),
//						Conditions: fastly.NgwafAccountRuleGroupConditionConditionArray{
//							&fastly.NgwafAccountRuleGroupConditionConditionArgs{
//								Field:    pulumi.String("method"),
//								Operator: pulumi.String("equals"),
//								Value:    pulumi.String("POST"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF account rules can be imported using just the rule ID, e.g.:
//
// ```sh
// $ pulumi import fastly:index/ngwafAccountRule:NgwafAccountRule demo <ruleID>
// ```
type NgwafAccountRule struct {
	pulumi.CustomResourceState

	// List of actions to perform when the rule matches.
	Actions NgwafAccountRuleActionArrayOutput `pulumi:"actions"`
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos pulumi.StringArrayOutput `pulumi:"appliesTos"`
	// Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
	Conditions NgwafAccountRuleConditionArrayOutput `pulumi:"conditions"`
	// The description of the rule.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether the rule is currently enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
	GroupConditions NgwafAccountRuleGroupConditionArrayOutput `pulumi:"groupConditions"`
	// Logical operator to apply to group conditions. Accepted values are `any` and `all`.
	GroupOperator pulumi.StringPtrOutput `pulumi:"groupOperator"`
	// Block specifically for rate*limit rules.
	RateLimit NgwafAccountRuleRateLimitPtrOutput `pulumi:"rateLimit"`
	// Logging behavior for matching requests. Accepted values are `sampled` and `none`.
	RequestLogging pulumi.StringPtrOutput `pulumi:"requestLogging"`
	// The type of the rule. Accepted values are `request` and `signal`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewNgwafAccountRule registers a new resource with the given unique name, arguments, and options.
func NewNgwafAccountRule(ctx *pulumi.Context,
	name string, args *NgwafAccountRuleArgs, opts ...pulumi.ResourceOption) (*NgwafAccountRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.AppliesTos == nil {
		return nil, errors.New("invalid value for required argument 'AppliesTos'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafAccountRule
	err := ctx.RegisterResource("fastly:index/ngwafAccountRule:NgwafAccountRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafAccountRule gets an existing NgwafAccountRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafAccountRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafAccountRuleState, opts ...pulumi.ResourceOption) (*NgwafAccountRule, error) {
	var resource NgwafAccountRule
	err := ctx.ReadResource("fastly:index/ngwafAccountRule:NgwafAccountRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafAccountRule resources.
type ngwafAccountRuleState struct {
	// List of actions to perform when the rule matches.
	Actions []NgwafAccountRuleAction `pulumi:"actions"`
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos []string `pulumi:"appliesTos"`
	// Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
	Conditions []NgwafAccountRuleCondition `pulumi:"conditions"`
	// The description of the rule.
	Description *string `pulumi:"description"`
	// Whether the rule is currently enabled.
	Enabled *bool `pulumi:"enabled"`
	// List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
	GroupConditions []NgwafAccountRuleGroupCondition `pulumi:"groupConditions"`
	// Logical operator to apply to group conditions. Accepted values are `any` and `all`.
	GroupOperator *string `pulumi:"groupOperator"`
	// Block specifically for rate*limit rules.
	RateLimit *NgwafAccountRuleRateLimit `pulumi:"rateLimit"`
	// Logging behavior for matching requests. Accepted values are `sampled` and `none`.
	RequestLogging *string `pulumi:"requestLogging"`
	// The type of the rule. Accepted values are `request` and `signal`.
	Type *string `pulumi:"type"`
}

type NgwafAccountRuleState struct {
	// List of actions to perform when the rule matches.
	Actions NgwafAccountRuleActionArrayInput
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos pulumi.StringArrayInput
	// Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
	Conditions NgwafAccountRuleConditionArrayInput
	// The description of the rule.
	Description pulumi.StringPtrInput
	// Whether the rule is currently enabled.
	Enabled pulumi.BoolPtrInput
	// List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
	GroupConditions NgwafAccountRuleGroupConditionArrayInput
	// Logical operator to apply to group conditions. Accepted values are `any` and `all`.
	GroupOperator pulumi.StringPtrInput
	// Block specifically for rate*limit rules.
	RateLimit NgwafAccountRuleRateLimitPtrInput
	// Logging behavior for matching requests. Accepted values are `sampled` and `none`.
	RequestLogging pulumi.StringPtrInput
	// The type of the rule. Accepted values are `request` and `signal`.
	Type pulumi.StringPtrInput
}

func (NgwafAccountRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAccountRuleState)(nil)).Elem()
}

type ngwafAccountRuleArgs struct {
	// List of actions to perform when the rule matches.
	Actions []NgwafAccountRuleAction `pulumi:"actions"`
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos []string `pulumi:"appliesTos"`
	// Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
	Conditions []NgwafAccountRuleCondition `pulumi:"conditions"`
	// The description of the rule.
	Description string `pulumi:"description"`
	// Whether the rule is currently enabled.
	Enabled bool `pulumi:"enabled"`
	// List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
	GroupConditions []NgwafAccountRuleGroupCondition `pulumi:"groupConditions"`
	// Logical operator to apply to group conditions. Accepted values are `any` and `all`.
	GroupOperator *string `pulumi:"groupOperator"`
	// Block specifically for rate*limit rules.
	RateLimit *NgwafAccountRuleRateLimit `pulumi:"rateLimit"`
	// Logging behavior for matching requests. Accepted values are `sampled` and `none`.
	RequestLogging *string `pulumi:"requestLogging"`
	// The type of the rule. Accepted values are `request` and `signal`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a NgwafAccountRule resource.
type NgwafAccountRuleArgs struct {
	// List of actions to perform when the rule matches.
	Actions NgwafAccountRuleActionArrayInput
	// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
	AppliesTos pulumi.StringArrayInput
	// Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
	Conditions NgwafAccountRuleConditionArrayInput
	// The description of the rule.
	Description pulumi.StringInput
	// Whether the rule is currently enabled.
	Enabled pulumi.BoolInput
	// List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
	GroupConditions NgwafAccountRuleGroupConditionArrayInput
	// Logical operator to apply to group conditions. Accepted values are `any` and `all`.
	GroupOperator pulumi.StringPtrInput
	// Block specifically for rate*limit rules.
	RateLimit NgwafAccountRuleRateLimitPtrInput
	// Logging behavior for matching requests. Accepted values are `sampled` and `none`.
	RequestLogging pulumi.StringPtrInput
	// The type of the rule. Accepted values are `request` and `signal`.
	Type pulumi.StringInput
}

func (NgwafAccountRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAccountRuleArgs)(nil)).Elem()
}

type NgwafAccountRuleInput interface {
	pulumi.Input

	ToNgwafAccountRuleOutput() NgwafAccountRuleOutput
	ToNgwafAccountRuleOutputWithContext(ctx context.Context) NgwafAccountRuleOutput
}

func (*NgwafAccountRule) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAccountRule)(nil)).Elem()
}

func (i *NgwafAccountRule) ToNgwafAccountRuleOutput() NgwafAccountRuleOutput {
	return i.ToNgwafAccountRuleOutputWithContext(context.Background())
}

func (i *NgwafAccountRule) ToNgwafAccountRuleOutputWithContext(ctx context.Context) NgwafAccountRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAccountRuleOutput)
}

// NgwafAccountRuleArrayInput is an input type that accepts NgwafAccountRuleArray and NgwafAccountRuleArrayOutput values.
// You can construct a concrete instance of `NgwafAccountRuleArrayInput` via:
//
//	NgwafAccountRuleArray{ NgwafAccountRuleArgs{...} }
type NgwafAccountRuleArrayInput interface {
	pulumi.Input

	ToNgwafAccountRuleArrayOutput() NgwafAccountRuleArrayOutput
	ToNgwafAccountRuleArrayOutputWithContext(context.Context) NgwafAccountRuleArrayOutput
}

type NgwafAccountRuleArray []NgwafAccountRuleInput

func (NgwafAccountRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAccountRule)(nil)).Elem()
}

func (i NgwafAccountRuleArray) ToNgwafAccountRuleArrayOutput() NgwafAccountRuleArrayOutput {
	return i.ToNgwafAccountRuleArrayOutputWithContext(context.Background())
}

func (i NgwafAccountRuleArray) ToNgwafAccountRuleArrayOutputWithContext(ctx context.Context) NgwafAccountRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAccountRuleArrayOutput)
}

// NgwafAccountRuleMapInput is an input type that accepts NgwafAccountRuleMap and NgwafAccountRuleMapOutput values.
// You can construct a concrete instance of `NgwafAccountRuleMapInput` via:
//
//	NgwafAccountRuleMap{ "key": NgwafAccountRuleArgs{...} }
type NgwafAccountRuleMapInput interface {
	pulumi.Input

	ToNgwafAccountRuleMapOutput() NgwafAccountRuleMapOutput
	ToNgwafAccountRuleMapOutputWithContext(context.Context) NgwafAccountRuleMapOutput
}

type NgwafAccountRuleMap map[string]NgwafAccountRuleInput

func (NgwafAccountRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAccountRule)(nil)).Elem()
}

func (i NgwafAccountRuleMap) ToNgwafAccountRuleMapOutput() NgwafAccountRuleMapOutput {
	return i.ToNgwafAccountRuleMapOutputWithContext(context.Background())
}

func (i NgwafAccountRuleMap) ToNgwafAccountRuleMapOutputWithContext(ctx context.Context) NgwafAccountRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAccountRuleMapOutput)
}

type NgwafAccountRuleOutput struct{ *pulumi.OutputState }

func (NgwafAccountRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAccountRule)(nil)).Elem()
}

func (o NgwafAccountRuleOutput) ToNgwafAccountRuleOutput() NgwafAccountRuleOutput {
	return o
}

func (o NgwafAccountRuleOutput) ToNgwafAccountRuleOutputWithContext(ctx context.Context) NgwafAccountRuleOutput {
	return o
}

// List of actions to perform when the rule matches.
func (o NgwafAccountRuleOutput) Actions() NgwafAccountRuleActionArrayOutput {
	return o.ApplyT(func(v *NgwafAccountRule) NgwafAccountRuleActionArrayOutput { return v.Actions }).(NgwafAccountRuleActionArrayOutput)
}

// The list of workspace IDs this signal applies to, or the wildcard `*` if it applies to all workspaces.
func (o NgwafAccountRuleOutput) AppliesTos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NgwafAccountRule) pulumi.StringArrayOutput { return v.AppliesTos }).(pulumi.StringArrayOutput)
}

// Flat list of individual conditions. Each must include `field`, `operator`, and `value`.
func (o NgwafAccountRuleOutput) Conditions() NgwafAccountRuleConditionArrayOutput {
	return o.ApplyT(func(v *NgwafAccountRule) NgwafAccountRuleConditionArrayOutput { return v.Conditions }).(NgwafAccountRuleConditionArrayOutput)
}

// The description of the rule.
func (o NgwafAccountRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAccountRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether the rule is currently enabled.
func (o NgwafAccountRuleOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgwafAccountRule) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// List of grouped conditions with nested logic. Each group must define a `groupOperator` and at least one condition.
func (o NgwafAccountRuleOutput) GroupConditions() NgwafAccountRuleGroupConditionArrayOutput {
	return o.ApplyT(func(v *NgwafAccountRule) NgwafAccountRuleGroupConditionArrayOutput { return v.GroupConditions }).(NgwafAccountRuleGroupConditionArrayOutput)
}

// Logical operator to apply to group conditions. Accepted values are `any` and `all`.
func (o NgwafAccountRuleOutput) GroupOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafAccountRule) pulumi.StringPtrOutput { return v.GroupOperator }).(pulumi.StringPtrOutput)
}

// Block specifically for rate*limit rules.
func (o NgwafAccountRuleOutput) RateLimit() NgwafAccountRuleRateLimitPtrOutput {
	return o.ApplyT(func(v *NgwafAccountRule) NgwafAccountRuleRateLimitPtrOutput { return v.RateLimit }).(NgwafAccountRuleRateLimitPtrOutput)
}

// Logging behavior for matching requests. Accepted values are `sampled` and `none`.
func (o NgwafAccountRuleOutput) RequestLogging() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafAccountRule) pulumi.StringPtrOutput { return v.RequestLogging }).(pulumi.StringPtrOutput)
}

// The type of the rule. Accepted values are `request` and `signal`.
func (o NgwafAccountRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAccountRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type NgwafAccountRuleArrayOutput struct{ *pulumi.OutputState }

func (NgwafAccountRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAccountRule)(nil)).Elem()
}

func (o NgwafAccountRuleArrayOutput) ToNgwafAccountRuleArrayOutput() NgwafAccountRuleArrayOutput {
	return o
}

func (o NgwafAccountRuleArrayOutput) ToNgwafAccountRuleArrayOutputWithContext(ctx context.Context) NgwafAccountRuleArrayOutput {
	return o
}

func (o NgwafAccountRuleArrayOutput) Index(i pulumi.IntInput) NgwafAccountRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafAccountRule {
		return vs[0].([]*NgwafAccountRule)[vs[1].(int)]
	}).(NgwafAccountRuleOutput)
}

type NgwafAccountRuleMapOutput struct{ *pulumi.OutputState }

func (NgwafAccountRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAccountRule)(nil)).Elem()
}

func (o NgwafAccountRuleMapOutput) ToNgwafAccountRuleMapOutput() NgwafAccountRuleMapOutput {
	return o
}

func (o NgwafAccountRuleMapOutput) ToNgwafAccountRuleMapOutputWithContext(ctx context.Context) NgwafAccountRuleMapOutput {
	return o
}

func (o NgwafAccountRuleMapOutput) MapIndex(k pulumi.StringInput) NgwafAccountRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafAccountRule {
		return vs[0].(map[string]*NgwafAccountRule)[vs[1].(string)]
	}).(NgwafAccountRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAccountRuleInput)(nil)).Elem(), &NgwafAccountRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAccountRuleArrayInput)(nil)).Elem(), NgwafAccountRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAccountRuleMapInput)(nil)).Elem(), NgwafAccountRuleMap{})
	pulumi.RegisterOutputType(NgwafAccountRuleOutput{})
	pulumi.RegisterOutputType(NgwafAccountRuleArrayOutput{})
	pulumi.RegisterOutputType(NgwafAccountRuleMapOutput{})
}
