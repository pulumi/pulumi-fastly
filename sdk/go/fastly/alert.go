// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Alert. Alerts send notifications to custom integrations (e.g., Slack channels, PagerDuty, Microsoft Teams and New Relic) when an observed metric either exceeds or falls below a threshold.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := fastly.NewServiceVcl(ctx, "example", &fastly.ServiceVclArgs{
//				Name: pulumi.String("my_vcl_service"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIntegration, err := fastly.NewIntegration(ctx, "example", &fastly.IntegrationArgs{
//				Name: pulumi.String("my_integration"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewAlert(ctx, "example", &fastly.AlertArgs{
//				Name:      pulumi.String("my_vcl_service errors"),
//				ServiceId: example.ID(),
//				Source:    pulumi.String("stats"),
//				Metric:    pulumi.String("status_5xx"),
//				EvaluationStrategy: &fastly.AlertEvaluationStrategyArgs{
//					Type:      pulumi.String("above_threshold"),
//					Period:    pulumi.String("5m"),
//					Threshold: pulumi.Float64(10),
//				},
//				IntegrationIds: pulumi.StringArray{
//					exampleIntegration.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Alerts can be imported using their ID, e.g.
//
// ```sh
// $ pulumi import fastly:index/alert:Alert example xxxxxxxxxxxxxxxxxxxx
// ```
type Alert struct {
	pulumi.CustomResourceState

	// Additional text that is included in the alert notification.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// More filters depending on the source type.
	Dimensions AlertDimensionsPtrOutput `pulumi:"dimensions"`
	// Criteria on how to alert.
	EvaluationStrategy AlertEvaluationStrategyOutput `pulumi:"evaluationStrategy"`
	// List of integrations used to notify when alert fires.
	IntegrationIds pulumi.StringArrayOutput `pulumi:"integrationIds"`
	// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
	Metric pulumi.StringOutput `pulumi:"metric"`
	// The name of the alert.
	Name pulumi.StringOutput `pulumi:"name"`
	// The service which the alert monitors. Optional when using `stats` as the `source`.
	ServiceId pulumi.StringPtrOutput `pulumi:"serviceId"`
	// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
	Source pulumi.StringOutput `pulumi:"source"`
}

// NewAlert registers a new resource with the given unique name, arguments, and options.
func NewAlert(ctx *pulumi.Context,
	name string, args *AlertArgs, opts ...pulumi.ResourceOption) (*Alert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EvaluationStrategy == nil {
		return nil, errors.New("invalid value for required argument 'EvaluationStrategy'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Alert
	err := ctx.RegisterResource("fastly:index/alert:Alert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlert gets an existing Alert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertState, opts ...pulumi.ResourceOption) (*Alert, error) {
	var resource Alert
	err := ctx.ReadResource("fastly:index/alert:Alert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alert resources.
type alertState struct {
	// Additional text that is included in the alert notification.
	Description *string `pulumi:"description"`
	// More filters depending on the source type.
	Dimensions *AlertDimensions `pulumi:"dimensions"`
	// Criteria on how to alert.
	EvaluationStrategy *AlertEvaluationStrategy `pulumi:"evaluationStrategy"`
	// List of integrations used to notify when alert fires.
	IntegrationIds []string `pulumi:"integrationIds"`
	// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
	Metric *string `pulumi:"metric"`
	// The name of the alert.
	Name *string `pulumi:"name"`
	// The service which the alert monitors. Optional when using `stats` as the `source`.
	ServiceId *string `pulumi:"serviceId"`
	// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
	Source *string `pulumi:"source"`
}

type AlertState struct {
	// Additional text that is included in the alert notification.
	Description pulumi.StringPtrInput
	// More filters depending on the source type.
	Dimensions AlertDimensionsPtrInput
	// Criteria on how to alert.
	EvaluationStrategy AlertEvaluationStrategyPtrInput
	// List of integrations used to notify when alert fires.
	IntegrationIds pulumi.StringArrayInput
	// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
	Metric pulumi.StringPtrInput
	// The name of the alert.
	Name pulumi.StringPtrInput
	// The service which the alert monitors. Optional when using `stats` as the `source`.
	ServiceId pulumi.StringPtrInput
	// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
	Source pulumi.StringPtrInput
}

func (AlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertState)(nil)).Elem()
}

type alertArgs struct {
	// Additional text that is included in the alert notification.
	Description *string `pulumi:"description"`
	// More filters depending on the source type.
	Dimensions *AlertDimensions `pulumi:"dimensions"`
	// Criteria on how to alert.
	EvaluationStrategy AlertEvaluationStrategy `pulumi:"evaluationStrategy"`
	// List of integrations used to notify when alert fires.
	IntegrationIds []string `pulumi:"integrationIds"`
	// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
	Metric string `pulumi:"metric"`
	// The name of the alert.
	Name *string `pulumi:"name"`
	// The service which the alert monitors. Optional when using `stats` as the `source`.
	ServiceId *string `pulumi:"serviceId"`
	// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
	Source string `pulumi:"source"`
}

// The set of arguments for constructing a Alert resource.
type AlertArgs struct {
	// Additional text that is included in the alert notification.
	Description pulumi.StringPtrInput
	// More filters depending on the source type.
	Dimensions AlertDimensionsPtrInput
	// Criteria on how to alert.
	EvaluationStrategy AlertEvaluationStrategyInput
	// List of integrations used to notify when alert fires.
	IntegrationIds pulumi.StringArrayInput
	// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
	Metric pulumi.StringInput
	// The name of the alert.
	Name pulumi.StringPtrInput
	// The service which the alert monitors. Optional when using `stats` as the `source`.
	ServiceId pulumi.StringPtrInput
	// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
	Source pulumi.StringInput
}

func (AlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertArgs)(nil)).Elem()
}

type AlertInput interface {
	pulumi.Input

	ToAlertOutput() AlertOutput
	ToAlertOutputWithContext(ctx context.Context) AlertOutput
}

func (*Alert) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (i *Alert) ToAlertOutput() AlertOutput {
	return i.ToAlertOutputWithContext(context.Background())
}

func (i *Alert) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertOutput)
}

// AlertArrayInput is an input type that accepts AlertArray and AlertArrayOutput values.
// You can construct a concrete instance of `AlertArrayInput` via:
//
//	AlertArray{ AlertArgs{...} }
type AlertArrayInput interface {
	pulumi.Input

	ToAlertArrayOutput() AlertArrayOutput
	ToAlertArrayOutputWithContext(context.Context) AlertArrayOutput
}

type AlertArray []AlertInput

func (AlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (i AlertArray) ToAlertArrayOutput() AlertArrayOutput {
	return i.ToAlertArrayOutputWithContext(context.Background())
}

func (i AlertArray) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertArrayOutput)
}

// AlertMapInput is an input type that accepts AlertMap and AlertMapOutput values.
// You can construct a concrete instance of `AlertMapInput` via:
//
//	AlertMap{ "key": AlertArgs{...} }
type AlertMapInput interface {
	pulumi.Input

	ToAlertMapOutput() AlertMapOutput
	ToAlertMapOutputWithContext(context.Context) AlertMapOutput
}

type AlertMap map[string]AlertInput

func (AlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (i AlertMap) ToAlertMapOutput() AlertMapOutput {
	return i.ToAlertMapOutputWithContext(context.Background())
}

func (i AlertMap) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMapOutput)
}

type AlertOutput struct{ *pulumi.OutputState }

func (AlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (o AlertOutput) ToAlertOutput() AlertOutput {
	return o
}

func (o AlertOutput) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return o
}

// Additional text that is included in the alert notification.
func (o AlertOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// More filters depending on the source type.
func (o AlertOutput) Dimensions() AlertDimensionsPtrOutput {
	return o.ApplyT(func(v *Alert) AlertDimensionsPtrOutput { return v.Dimensions }).(AlertDimensionsPtrOutput)
}

// Criteria on how to alert.
func (o AlertOutput) EvaluationStrategy() AlertEvaluationStrategyOutput {
	return o.ApplyT(func(v *Alert) AlertEvaluationStrategyOutput { return v.EvaluationStrategy }).(AlertEvaluationStrategyOutput)
}

// List of integrations used to notify when alert fires.
func (o AlertOutput) IntegrationIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringArrayOutput { return v.IntegrationIds }).(pulumi.StringArrayOutput)
}

// The metric name to alert on for a specific source: [domains](https://developer.fastly.com/reference/api/metrics-stats/domain-inspector/historical), [origins](https://developer.fastly.com/reference/api/metrics-stats/origin-inspector/historical), or [stats](https://developer.fastly.com/reference/api/metrics-stats/historical-stats).
func (o AlertOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.Metric }).(pulumi.StringOutput)
}

// The name of the alert.
func (o AlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The service which the alert monitors. Optional when using `stats` as the `source`.
func (o AlertOutput) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.ServiceId }).(pulumi.StringPtrOutput)
}

// The source where the metric comes from. One of: `domains`, `origins`, `stats`.
func (o AlertOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.Source }).(pulumi.StringOutput)
}

type AlertArrayOutput struct{ *pulumi.OutputState }

func (AlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (o AlertArrayOutput) ToAlertArrayOutput() AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) Index(i pulumi.IntInput) AlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].([]*Alert)[vs[1].(int)]
	}).(AlertOutput)
}

type AlertMapOutput struct{ *pulumi.OutputState }

func (AlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (o AlertMapOutput) ToAlertMapOutput() AlertMapOutput {
	return o
}

func (o AlertMapOutput) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return o
}

func (o AlertMapOutput) MapIndex(k pulumi.StringInput) AlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].(map[string]*Alert)[vs[1].(string)]
	}).(AlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertInput)(nil)).Elem(), &Alert{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertArrayInput)(nil)).Elem(), AlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMapInput)(nil)).Elem(), AlertMap{})
	pulumi.RegisterOutputType(AlertOutput{})
	pulumi.RegisterOutputType(AlertArrayOutput{})
	pulumi.RegisterOutputType(AlertMapOutput{})
}
