// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Next-Gen WAF **List** resource scoped to a specific **workspace**.
//
// Workspace-scoped lists are local to a workspace and typically used within workspace-specific rules.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := fastly.NewNgwafWorkspace(ctx, "example", &fastly.NgwafWorkspaceArgs{
//				Name:            pulumi.String("example"),
//				Description:     pulumi.String("Workspace with custom list"),
//				Mode:            pulumi.String("block"),
//				IpAnonymization: pulumi.String("hashed"),
//				ClientIpHeaders: pulumi.StringArray{
//					pulumi.String("X-Forwarded-For"),
//					pulumi.String("X-Real-IP"),
//				},
//				DefaultBlockingResponseCode: pulumi.Int(403),
//				AttackSignalThresholds: &fastly.NgwafWorkspaceAttackSignalThresholdsArgs{
//					OneMinute:  pulumi.Int(100),
//					TenMinutes: pulumi.Int(500),
//					OneHour:    pulumi.Int(1000),
//					Immediate:  pulumi.Bool(true),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewNgwafWorkspaceList(ctx, "example", &fastly.NgwafWorkspaceListArgs{
//				WorkspaceId: example.ID(),
//				Name:        pulumi.String("local-allowlist"),
//				Description: pulumi.String("IP allowlist for this workspace"),
//				Type:        pulumi.String("ip"),
//				Entries: pulumi.StringArray{
//					pulumi.String("192.168.0.1"),
//					pulumi.String("10.0.0.1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF workspace-scoped lists can be imported using the format `<workspaceID>/<listID>`, e.g.:
//
// ```sh
// $ pulumi import fastly:index/ngwafWorkspaceList:NgwafWorkspaceList demo <workspaceID>/<listID>
// ```
type NgwafWorkspaceList struct {
	pulumi.CustomResourceState

	// The description of the list.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The values in the list.
	Entries pulumi.StringArrayOutput `pulumi:"entries"`
	// The name of the list.
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
	Type        pulumi.StringOutput `pulumi:"type"`
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafWorkspaceList registers a new resource with the given unique name, arguments, and options.
func NewNgwafWorkspaceList(ctx *pulumi.Context,
	name string, args *NgwafWorkspaceListArgs, opts ...pulumi.ResourceOption) (*NgwafWorkspaceList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Entries == nil {
		return nil, errors.New("invalid value for required argument 'Entries'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafWorkspaceList
	err := ctx.RegisterResource("fastly:index/ngwafWorkspaceList:NgwafWorkspaceList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafWorkspaceList gets an existing NgwafWorkspaceList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafWorkspaceList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafWorkspaceListState, opts ...pulumi.ResourceOption) (*NgwafWorkspaceList, error) {
	var resource NgwafWorkspaceList
	err := ctx.ReadResource("fastly:index/ngwafWorkspaceList:NgwafWorkspaceList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafWorkspaceList resources.
type ngwafWorkspaceListState struct {
	// The description of the list.
	Description *string `pulumi:"description"`
	// The values in the list.
	Entries []string `pulumi:"entries"`
	// The name of the list.
	Name *string `pulumi:"name"`
	// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
	Type        *string `pulumi:"type"`
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafWorkspaceListState struct {
	// The description of the list.
	Description pulumi.StringPtrInput
	// The values in the list.
	Entries pulumi.StringArrayInput
	// The name of the list.
	Name pulumi.StringPtrInput
	// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
	Type        pulumi.StringPtrInput
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafWorkspaceListState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafWorkspaceListState)(nil)).Elem()
}

type ngwafWorkspaceListArgs struct {
	// The description of the list.
	Description *string `pulumi:"description"`
	// The values in the list.
	Entries []string `pulumi:"entries"`
	// The name of the list.
	Name *string `pulumi:"name"`
	// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
	Type        string `pulumi:"type"`
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafWorkspaceList resource.
type NgwafWorkspaceListArgs struct {
	// The description of the list.
	Description pulumi.StringPtrInput
	// The values in the list.
	Entries pulumi.StringArrayInput
	// The name of the list.
	Name pulumi.StringPtrInput
	// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
	Type        pulumi.StringInput
	WorkspaceId pulumi.StringInput
}

func (NgwafWorkspaceListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafWorkspaceListArgs)(nil)).Elem()
}

type NgwafWorkspaceListInput interface {
	pulumi.Input

	ToNgwafWorkspaceListOutput() NgwafWorkspaceListOutput
	ToNgwafWorkspaceListOutputWithContext(ctx context.Context) NgwafWorkspaceListOutput
}

func (*NgwafWorkspaceList) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafWorkspaceList)(nil)).Elem()
}

func (i *NgwafWorkspaceList) ToNgwafWorkspaceListOutput() NgwafWorkspaceListOutput {
	return i.ToNgwafWorkspaceListOutputWithContext(context.Background())
}

func (i *NgwafWorkspaceList) ToNgwafWorkspaceListOutputWithContext(ctx context.Context) NgwafWorkspaceListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceListOutput)
}

// NgwafWorkspaceListArrayInput is an input type that accepts NgwafWorkspaceListArray and NgwafWorkspaceListArrayOutput values.
// You can construct a concrete instance of `NgwafWorkspaceListArrayInput` via:
//
//	NgwafWorkspaceListArray{ NgwafWorkspaceListArgs{...} }
type NgwafWorkspaceListArrayInput interface {
	pulumi.Input

	ToNgwafWorkspaceListArrayOutput() NgwafWorkspaceListArrayOutput
	ToNgwafWorkspaceListArrayOutputWithContext(context.Context) NgwafWorkspaceListArrayOutput
}

type NgwafWorkspaceListArray []NgwafWorkspaceListInput

func (NgwafWorkspaceListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafWorkspaceList)(nil)).Elem()
}

func (i NgwafWorkspaceListArray) ToNgwafWorkspaceListArrayOutput() NgwafWorkspaceListArrayOutput {
	return i.ToNgwafWorkspaceListArrayOutputWithContext(context.Background())
}

func (i NgwafWorkspaceListArray) ToNgwafWorkspaceListArrayOutputWithContext(ctx context.Context) NgwafWorkspaceListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceListArrayOutput)
}

// NgwafWorkspaceListMapInput is an input type that accepts NgwafWorkspaceListMap and NgwafWorkspaceListMapOutput values.
// You can construct a concrete instance of `NgwafWorkspaceListMapInput` via:
//
//	NgwafWorkspaceListMap{ "key": NgwafWorkspaceListArgs{...} }
type NgwafWorkspaceListMapInput interface {
	pulumi.Input

	ToNgwafWorkspaceListMapOutput() NgwafWorkspaceListMapOutput
	ToNgwafWorkspaceListMapOutputWithContext(context.Context) NgwafWorkspaceListMapOutput
}

type NgwafWorkspaceListMap map[string]NgwafWorkspaceListInput

func (NgwafWorkspaceListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafWorkspaceList)(nil)).Elem()
}

func (i NgwafWorkspaceListMap) ToNgwafWorkspaceListMapOutput() NgwafWorkspaceListMapOutput {
	return i.ToNgwafWorkspaceListMapOutputWithContext(context.Background())
}

func (i NgwafWorkspaceListMap) ToNgwafWorkspaceListMapOutputWithContext(ctx context.Context) NgwafWorkspaceListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceListMapOutput)
}

type NgwafWorkspaceListOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafWorkspaceList)(nil)).Elem()
}

func (o NgwafWorkspaceListOutput) ToNgwafWorkspaceListOutput() NgwafWorkspaceListOutput {
	return o
}

func (o NgwafWorkspaceListOutput) ToNgwafWorkspaceListOutputWithContext(ctx context.Context) NgwafWorkspaceListOutput {
	return o
}

// The description of the list.
func (o NgwafWorkspaceListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafWorkspaceList) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The values in the list.
func (o NgwafWorkspaceListOutput) Entries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NgwafWorkspaceList) pulumi.StringArrayOutput { return v.Entries }).(pulumi.StringArrayOutput)
}

// The name of the list.
func (o NgwafWorkspaceListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspaceList) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The type of list. Accepted values are `string`, `wildcard`, `ip`, `country`, and `signal`.
func (o NgwafWorkspaceListOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspaceList) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

func (o NgwafWorkspaceListOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspaceList) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafWorkspaceListArrayOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafWorkspaceList)(nil)).Elem()
}

func (o NgwafWorkspaceListArrayOutput) ToNgwafWorkspaceListArrayOutput() NgwafWorkspaceListArrayOutput {
	return o
}

func (o NgwafWorkspaceListArrayOutput) ToNgwafWorkspaceListArrayOutputWithContext(ctx context.Context) NgwafWorkspaceListArrayOutput {
	return o
}

func (o NgwafWorkspaceListArrayOutput) Index(i pulumi.IntInput) NgwafWorkspaceListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafWorkspaceList {
		return vs[0].([]*NgwafWorkspaceList)[vs[1].(int)]
	}).(NgwafWorkspaceListOutput)
}

type NgwafWorkspaceListMapOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafWorkspaceList)(nil)).Elem()
}

func (o NgwafWorkspaceListMapOutput) ToNgwafWorkspaceListMapOutput() NgwafWorkspaceListMapOutput {
	return o
}

func (o NgwafWorkspaceListMapOutput) ToNgwafWorkspaceListMapOutputWithContext(ctx context.Context) NgwafWorkspaceListMapOutput {
	return o
}

func (o NgwafWorkspaceListMapOutput) MapIndex(k pulumi.StringInput) NgwafWorkspaceListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafWorkspaceList {
		return vs[0].(map[string]*NgwafWorkspaceList)[vs[1].(string)]
	}).(NgwafWorkspaceListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceListInput)(nil)).Elem(), &NgwafWorkspaceList{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceListArrayInput)(nil)).Elem(), NgwafWorkspaceListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceListMapInput)(nil)).Elem(), NgwafWorkspaceListMap{})
	pulumi.RegisterOutputType(NgwafWorkspaceListOutput{})
	pulumi.RegisterOutputType(NgwafWorkspaceListArrayOutput{})
	pulumi.RegisterOutputType(NgwafWorkspaceListMapOutput{})
}
