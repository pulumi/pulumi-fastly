// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a list of [Fastly Next-Gen WAF Virtual Patches][1] for a given workspace.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			listPatches, err := fastly.LookupNgwafVirtualPatches(ctx, &fastly.LookupNgwafVirtualPatchesArgs{
//				WorkspaceId: testVirtualPatchesWorkspace.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("fastlyNgwafVirtualPatchesAll", listPatches)
//			return nil
//		})
//	}
//
// ```
//
// [1]: https://www.fastly.com/documentation/reference/api/ngwaf/virtual-patches/
func LookupNgwafVirtualPatches(ctx *pulumi.Context, args *LookupNgwafVirtualPatchesArgs, opts ...pulumi.InvokeOption) (*LookupNgwafVirtualPatchesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNgwafVirtualPatchesResult
	err := ctx.Invoke("fastly:index/getNgwafVirtualPatches:getNgwafVirtualPatches", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNgwafVirtualPatches.
type LookupNgwafVirtualPatchesArgs struct {
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// A collection of values returned by getNgwafVirtualPatches.
type LookupNgwafVirtualPatchesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all virtual patches for a given workspace.
	VirtualPatches []GetNgwafVirtualPatchesVirtualPatch `pulumi:"virtualPatches"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupNgwafVirtualPatchesOutput(ctx *pulumi.Context, args LookupNgwafVirtualPatchesOutputArgs, opts ...pulumi.InvokeOption) LookupNgwafVirtualPatchesResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNgwafVirtualPatchesResultOutput, error) {
			args := v.(LookupNgwafVirtualPatchesArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fastly:index/getNgwafVirtualPatches:getNgwafVirtualPatches", args, LookupNgwafVirtualPatchesResultOutput{}, options).(LookupNgwafVirtualPatchesResultOutput), nil
		}).(LookupNgwafVirtualPatchesResultOutput)
}

// A collection of arguments for invoking getNgwafVirtualPatches.
type LookupNgwafVirtualPatchesOutputArgs struct {
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (LookupNgwafVirtualPatchesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNgwafVirtualPatchesArgs)(nil)).Elem()
}

// A collection of values returned by getNgwafVirtualPatches.
type LookupNgwafVirtualPatchesResultOutput struct{ *pulumi.OutputState }

func (LookupNgwafVirtualPatchesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNgwafVirtualPatchesResult)(nil)).Elem()
}

func (o LookupNgwafVirtualPatchesResultOutput) ToLookupNgwafVirtualPatchesResultOutput() LookupNgwafVirtualPatchesResultOutput {
	return o
}

func (o LookupNgwafVirtualPatchesResultOutput) ToLookupNgwafVirtualPatchesResultOutputWithContext(ctx context.Context) LookupNgwafVirtualPatchesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNgwafVirtualPatchesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgwafVirtualPatchesResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of all virtual patches for a given workspace.
func (o LookupNgwafVirtualPatchesResultOutput) VirtualPatches() GetNgwafVirtualPatchesVirtualPatchArrayOutput {
	return o.ApplyT(func(v LookupNgwafVirtualPatchesResult) []GetNgwafVirtualPatchesVirtualPatch { return v.VirtualPatches }).(GetNgwafVirtualPatchesVirtualPatchArrayOutput)
}

// The ID of the workspace.
func (o LookupNgwafVirtualPatchesResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgwafVirtualPatchesResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNgwafVirtualPatchesResultOutput{})
}
