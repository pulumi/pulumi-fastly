// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Defines a set of Fastly ACL entries that can be used to populate a service ACL.  This resource will populate an ACL with the entries and will track their state.
//
// > **Warning:** This provider will take precedence over any changes you make in the UI or API. Such changes are likely to be reversed if you run the provider again.
//
// If this provider is being used to populate the initial content of an ACL which you intend to manage via API or UI, then the lifecycle `ignoreChanges` field can be used with the resource.  An example of this configuration is provided below.
//
// ## Example Usage
//
// ## Import
//
// This is an example of the import command being applied to the resource named `fastly_service_acl_entries_v1.entries` The resource ID is a combined value of the `service_id` and `acl_id` separated by a forward slash.
//
// ```sh
//  $ pulumi import fastly:index/serviceACLEntriesv1:ServiceACLEntriesv1 entries xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
// ```
type ServiceACLEntriesv1 struct {
	pulumi.CustomResourceState

	// The ID of the ACL that the items belong to
	AclId pulumi.StringOutput `pulumi:"aclId"`
	// ACL Entries
	Entries ServiceACLEntriesv1EntryArrayOutput `pulumi:"entries"`
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewServiceACLEntriesv1 registers a new resource with the given unique name, arguments, and options.
func NewServiceACLEntriesv1(ctx *pulumi.Context,
	name string, args *ServiceACLEntriesv1Args, opts ...pulumi.ResourceOption) (*ServiceACLEntriesv1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclId == nil {
		return nil, errors.New("invalid value for required argument 'AclId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	var resource ServiceACLEntriesv1
	err := ctx.RegisterResource("fastly:index/serviceACLEntriesv1:ServiceACLEntriesv1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceACLEntriesv1 gets an existing ServiceACLEntriesv1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceACLEntriesv1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceACLEntriesv1State, opts ...pulumi.ResourceOption) (*ServiceACLEntriesv1, error) {
	var resource ServiceACLEntriesv1
	err := ctx.ReadResource("fastly:index/serviceACLEntriesv1:ServiceACLEntriesv1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceACLEntriesv1 resources.
type serviceACLEntriesv1State struct {
	// The ID of the ACL that the items belong to
	AclId *string `pulumi:"aclId"`
	// ACL Entries
	Entries []ServiceACLEntriesv1Entry `pulumi:"entries"`
	// The ID of the Service that the ACL belongs to
	ServiceId *string `pulumi:"serviceId"`
}

type ServiceACLEntriesv1State struct {
	// The ID of the ACL that the items belong to
	AclId pulumi.StringPtrInput
	// ACL Entries
	Entries ServiceACLEntriesv1EntryArrayInput
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringPtrInput
}

func (ServiceACLEntriesv1State) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceACLEntriesv1State)(nil)).Elem()
}

type serviceACLEntriesv1Args struct {
	// The ID of the ACL that the items belong to
	AclId string `pulumi:"aclId"`
	// ACL Entries
	Entries []ServiceACLEntriesv1Entry `pulumi:"entries"`
	// The ID of the Service that the ACL belongs to
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a ServiceACLEntriesv1 resource.
type ServiceACLEntriesv1Args struct {
	// The ID of the ACL that the items belong to
	AclId pulumi.StringInput
	// ACL Entries
	Entries ServiceACLEntriesv1EntryArrayInput
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringInput
}

func (ServiceACLEntriesv1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceACLEntriesv1Args)(nil)).Elem()
}

type ServiceACLEntriesv1Input interface {
	pulumi.Input

	ToServiceACLEntriesv1Output() ServiceACLEntriesv1Output
	ToServiceACLEntriesv1OutputWithContext(ctx context.Context) ServiceACLEntriesv1Output
}

func (*ServiceACLEntriesv1) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesv1)(nil))
}

func (i *ServiceACLEntriesv1) ToServiceACLEntriesv1Output() ServiceACLEntriesv1Output {
	return i.ToServiceACLEntriesv1OutputWithContext(context.Background())
}

func (i *ServiceACLEntriesv1) ToServiceACLEntriesv1OutputWithContext(ctx context.Context) ServiceACLEntriesv1Output {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1Output)
}

func (i *ServiceACLEntriesv1) ToServiceACLEntriesv1PtrOutput() ServiceACLEntriesv1PtrOutput {
	return i.ToServiceACLEntriesv1PtrOutputWithContext(context.Background())
}

func (i *ServiceACLEntriesv1) ToServiceACLEntriesv1PtrOutputWithContext(ctx context.Context) ServiceACLEntriesv1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1PtrOutput)
}

type ServiceACLEntriesv1PtrInput interface {
	pulumi.Input

	ToServiceACLEntriesv1PtrOutput() ServiceACLEntriesv1PtrOutput
	ToServiceACLEntriesv1PtrOutputWithContext(ctx context.Context) ServiceACLEntriesv1PtrOutput
}

type serviceACLEntriesv1PtrType ServiceACLEntriesv1Args

func (*serviceACLEntriesv1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceACLEntriesv1)(nil))
}

func (i *serviceACLEntriesv1PtrType) ToServiceACLEntriesv1PtrOutput() ServiceACLEntriesv1PtrOutput {
	return i.ToServiceACLEntriesv1PtrOutputWithContext(context.Background())
}

func (i *serviceACLEntriesv1PtrType) ToServiceACLEntriesv1PtrOutputWithContext(ctx context.Context) ServiceACLEntriesv1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1PtrOutput)
}

// ServiceACLEntriesv1ArrayInput is an input type that accepts ServiceACLEntriesv1Array and ServiceACLEntriesv1ArrayOutput values.
// You can construct a concrete instance of `ServiceACLEntriesv1ArrayInput` via:
//
//          ServiceACLEntriesv1Array{ ServiceACLEntriesv1Args{...} }
type ServiceACLEntriesv1ArrayInput interface {
	pulumi.Input

	ToServiceACLEntriesv1ArrayOutput() ServiceACLEntriesv1ArrayOutput
	ToServiceACLEntriesv1ArrayOutputWithContext(context.Context) ServiceACLEntriesv1ArrayOutput
}

type ServiceACLEntriesv1Array []ServiceACLEntriesv1Input

func (ServiceACLEntriesv1Array) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ServiceACLEntriesv1)(nil))
}

func (i ServiceACLEntriesv1Array) ToServiceACLEntriesv1ArrayOutput() ServiceACLEntriesv1ArrayOutput {
	return i.ToServiceACLEntriesv1ArrayOutputWithContext(context.Background())
}

func (i ServiceACLEntriesv1Array) ToServiceACLEntriesv1ArrayOutputWithContext(ctx context.Context) ServiceACLEntriesv1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1ArrayOutput)
}

// ServiceACLEntriesv1MapInput is an input type that accepts ServiceACLEntriesv1Map and ServiceACLEntriesv1MapOutput values.
// You can construct a concrete instance of `ServiceACLEntriesv1MapInput` via:
//
//          ServiceACLEntriesv1Map{ "key": ServiceACLEntriesv1Args{...} }
type ServiceACLEntriesv1MapInput interface {
	pulumi.Input

	ToServiceACLEntriesv1MapOutput() ServiceACLEntriesv1MapOutput
	ToServiceACLEntriesv1MapOutputWithContext(context.Context) ServiceACLEntriesv1MapOutput
}

type ServiceACLEntriesv1Map map[string]ServiceACLEntriesv1Input

func (ServiceACLEntriesv1Map) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ServiceACLEntriesv1)(nil))
}

func (i ServiceACLEntriesv1Map) ToServiceACLEntriesv1MapOutput() ServiceACLEntriesv1MapOutput {
	return i.ToServiceACLEntriesv1MapOutputWithContext(context.Background())
}

func (i ServiceACLEntriesv1Map) ToServiceACLEntriesv1MapOutputWithContext(ctx context.Context) ServiceACLEntriesv1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1MapOutput)
}

type ServiceACLEntriesv1Output struct {
	*pulumi.OutputState
}

func (ServiceACLEntriesv1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesv1)(nil))
}

func (o ServiceACLEntriesv1Output) ToServiceACLEntriesv1Output() ServiceACLEntriesv1Output {
	return o
}

func (o ServiceACLEntriesv1Output) ToServiceACLEntriesv1OutputWithContext(ctx context.Context) ServiceACLEntriesv1Output {
	return o
}

func (o ServiceACLEntriesv1Output) ToServiceACLEntriesv1PtrOutput() ServiceACLEntriesv1PtrOutput {
	return o.ToServiceACLEntriesv1PtrOutputWithContext(context.Background())
}

func (o ServiceACLEntriesv1Output) ToServiceACLEntriesv1PtrOutputWithContext(ctx context.Context) ServiceACLEntriesv1PtrOutput {
	return o.ApplyT(func(v ServiceACLEntriesv1) *ServiceACLEntriesv1 {
		return &v
	}).(ServiceACLEntriesv1PtrOutput)
}

type ServiceACLEntriesv1PtrOutput struct {
	*pulumi.OutputState
}

func (ServiceACLEntriesv1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceACLEntriesv1)(nil))
}

func (o ServiceACLEntriesv1PtrOutput) ToServiceACLEntriesv1PtrOutput() ServiceACLEntriesv1PtrOutput {
	return o
}

func (o ServiceACLEntriesv1PtrOutput) ToServiceACLEntriesv1PtrOutputWithContext(ctx context.Context) ServiceACLEntriesv1PtrOutput {
	return o
}

type ServiceACLEntriesv1ArrayOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesv1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesv1)(nil))
}

func (o ServiceACLEntriesv1ArrayOutput) ToServiceACLEntriesv1ArrayOutput() ServiceACLEntriesv1ArrayOutput {
	return o
}

func (o ServiceACLEntriesv1ArrayOutput) ToServiceACLEntriesv1ArrayOutputWithContext(ctx context.Context) ServiceACLEntriesv1ArrayOutput {
	return o
}

func (o ServiceACLEntriesv1ArrayOutput) Index(i pulumi.IntInput) ServiceACLEntriesv1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceACLEntriesv1 {
		return vs[0].([]ServiceACLEntriesv1)[vs[1].(int)]
	}).(ServiceACLEntriesv1Output)
}

type ServiceACLEntriesv1MapOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesv1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ServiceACLEntriesv1)(nil))
}

func (o ServiceACLEntriesv1MapOutput) ToServiceACLEntriesv1MapOutput() ServiceACLEntriesv1MapOutput {
	return o
}

func (o ServiceACLEntriesv1MapOutput) ToServiceACLEntriesv1MapOutputWithContext(ctx context.Context) ServiceACLEntriesv1MapOutput {
	return o
}

func (o ServiceACLEntriesv1MapOutput) MapIndex(k pulumi.StringInput) ServiceACLEntriesv1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ServiceACLEntriesv1 {
		return vs[0].(map[string]ServiceACLEntriesv1)[vs[1].(string)]
	}).(ServiceACLEntriesv1Output)
}

func init() {
	pulumi.RegisterOutputType(ServiceACLEntriesv1Output{})
	pulumi.RegisterOutputType(ServiceACLEntriesv1PtrOutput{})
	pulumi.RegisterOutputType(ServiceACLEntriesv1ArrayOutput{})
	pulumi.RegisterOutputType(ServiceACLEntriesv1MapOutput{})
}
