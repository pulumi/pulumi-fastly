// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type ServiceACLEntriesv1 struct {
	pulumi.CustomResourceState

	// The ID of the ACL that the items belong to
	AclId pulumi.StringOutput `pulumi:"aclId"`
	// A Set ACL entries that are applied to the service. Defined below
	Entries ServiceACLEntriesv1EntryArrayOutput `pulumi:"entries"`
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewServiceACLEntriesv1 registers a new resource with the given unique name, arguments, and options.
func NewServiceACLEntriesv1(ctx *pulumi.Context,
	name string, args *ServiceACLEntriesv1Args, opts ...pulumi.ResourceOption) (*ServiceACLEntriesv1, error) {
	if args == nil || args.AclId == nil {
		return nil, errors.New("missing required argument 'AclId'")
	}
	if args == nil || args.ServiceId == nil {
		return nil, errors.New("missing required argument 'ServiceId'")
	}
	if args == nil {
		args = &ServiceACLEntriesv1Args{}
	}
	var resource ServiceACLEntriesv1
	err := ctx.RegisterResource("fastly:index/serviceACLEntriesv1:ServiceACLEntriesv1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceACLEntriesv1 gets an existing ServiceACLEntriesv1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceACLEntriesv1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceACLEntriesv1State, opts ...pulumi.ResourceOption) (*ServiceACLEntriesv1, error) {
	var resource ServiceACLEntriesv1
	err := ctx.ReadResource("fastly:index/serviceACLEntriesv1:ServiceACLEntriesv1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceACLEntriesv1 resources.
type serviceACLEntriesv1State struct {
	// The ID of the ACL that the items belong to
	AclId *string `pulumi:"aclId"`
	// A Set ACL entries that are applied to the service. Defined below
	Entries []ServiceACLEntriesv1Entry `pulumi:"entries"`
	// The ID of the Service that the ACL belongs to
	ServiceId *string `pulumi:"serviceId"`
}

type ServiceACLEntriesv1State struct {
	// The ID of the ACL that the items belong to
	AclId pulumi.StringPtrInput
	// A Set ACL entries that are applied to the service. Defined below
	Entries ServiceACLEntriesv1EntryArrayInput
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringPtrInput
}

func (ServiceACLEntriesv1State) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceACLEntriesv1State)(nil)).Elem()
}

type serviceACLEntriesv1Args struct {
	// The ID of the ACL that the items belong to
	AclId string `pulumi:"aclId"`
	// A Set ACL entries that are applied to the service. Defined below
	Entries []ServiceACLEntriesv1Entry `pulumi:"entries"`
	// The ID of the Service that the ACL belongs to
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a ServiceACLEntriesv1 resource.
type ServiceACLEntriesv1Args struct {
	// The ID of the ACL that the items belong to
	AclId pulumi.StringInput
	// A Set ACL entries that are applied to the service. Defined below
	Entries ServiceACLEntriesv1EntryArrayInput
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringInput
}

func (ServiceACLEntriesv1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceACLEntriesv1Args)(nil)).Elem()
}
