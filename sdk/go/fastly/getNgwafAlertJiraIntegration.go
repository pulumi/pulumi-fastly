// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a Fastly Next-Gen WAF Alert Jira integration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.LookupNgwafAlertJiraIntegration(ctx, &fastly.LookupNgwafAlertJiraIntegrationArgs{
//				WorkspaceId: testRedactionsWorkspace.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("ngwafJiraAlertsAll", jiraAlerts)
//			return nil
//		})
//	}
//
// ```
func LookupNgwafAlertJiraIntegration(ctx *pulumi.Context, args *LookupNgwafAlertJiraIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupNgwafAlertJiraIntegrationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNgwafAlertJiraIntegrationResult
	err := ctx.Invoke("fastly:index/getNgwafAlertJiraIntegration:getNgwafAlertJiraIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNgwafAlertJiraIntegration.
type LookupNgwafAlertJiraIntegrationArgs struct {
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// A collection of values returned by getNgwafAlertJiraIntegration.
type LookupNgwafAlertJiraIntegrationResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all Jira alerts for a workspace.
	JiraAlerts []GetNgwafAlertJiraIntegrationJiraAlert `pulumi:"jiraAlerts"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupNgwafAlertJiraIntegrationOutput(ctx *pulumi.Context, args LookupNgwafAlertJiraIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupNgwafAlertJiraIntegrationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNgwafAlertJiraIntegrationResultOutput, error) {
			args := v.(LookupNgwafAlertJiraIntegrationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fastly:index/getNgwafAlertJiraIntegration:getNgwafAlertJiraIntegration", args, LookupNgwafAlertJiraIntegrationResultOutput{}, options).(LookupNgwafAlertJiraIntegrationResultOutput), nil
		}).(LookupNgwafAlertJiraIntegrationResultOutput)
}

// A collection of arguments for invoking getNgwafAlertJiraIntegration.
type LookupNgwafAlertJiraIntegrationOutputArgs struct {
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (LookupNgwafAlertJiraIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNgwafAlertJiraIntegrationArgs)(nil)).Elem()
}

// A collection of values returned by getNgwafAlertJiraIntegration.
type LookupNgwafAlertJiraIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupNgwafAlertJiraIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNgwafAlertJiraIntegrationResult)(nil)).Elem()
}

func (o LookupNgwafAlertJiraIntegrationResultOutput) ToLookupNgwafAlertJiraIntegrationResultOutput() LookupNgwafAlertJiraIntegrationResultOutput {
	return o
}

func (o LookupNgwafAlertJiraIntegrationResultOutput) ToLookupNgwafAlertJiraIntegrationResultOutputWithContext(ctx context.Context) LookupNgwafAlertJiraIntegrationResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNgwafAlertJiraIntegrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgwafAlertJiraIntegrationResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of all Jira alerts for a workspace.
func (o LookupNgwafAlertJiraIntegrationResultOutput) JiraAlerts() GetNgwafAlertJiraIntegrationJiraAlertArrayOutput {
	return o.ApplyT(func(v LookupNgwafAlertJiraIntegrationResult) []GetNgwafAlertJiraIntegrationJiraAlert {
		return v.JiraAlerts
	}).(GetNgwafAlertJiraIntegrationJiraAlertArrayOutput)
}

// The ID of the workspace.
func (o LookupNgwafAlertJiraIntegrationResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgwafAlertJiraIntegrationResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNgwafAlertJiraIntegrationResultOutput{})
}
