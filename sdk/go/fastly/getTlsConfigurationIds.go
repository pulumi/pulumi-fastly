// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Use this data source to get the IDs of available TLS configurations for use with other resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTlsConfigurationIds, err := fastly.GetTlsConfigurationIds(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewTlsActivation(ctx, "exampleTlsActivation", &fastly.TlsActivationArgs{
//				ConfigurationId: *pulumi.String(exampleTlsConfigurationIds.Ids[0]),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTlsConfigurationIds(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetTlsConfigurationIdsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTlsConfigurationIdsResult
	err := ctx.Invoke("fastly:index/getTlsConfigurationIds:getTlsConfigurationIds", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getTlsConfigurationIds.
type GetTlsConfigurationIdsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of IDs corresponding to available TLS configurations.
	Ids []string `pulumi:"ids"`
}

func GetTlsConfigurationIdsOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetTlsConfigurationIdsResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetTlsConfigurationIdsResult, error) {
		r, err := GetTlsConfigurationIds(ctx, opts...)
		var s GetTlsConfigurationIdsResult
		if r != nil {
			s = *r
		}
		return s, err
	}).(GetTlsConfigurationIdsResultOutput)
}

// A collection of values returned by getTlsConfigurationIds.
type GetTlsConfigurationIdsResultOutput struct{ *pulumi.OutputState }

func (GetTlsConfigurationIdsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTlsConfigurationIdsResult)(nil)).Elem()
}

func (o GetTlsConfigurationIdsResultOutput) ToGetTlsConfigurationIdsResultOutput() GetTlsConfigurationIdsResultOutput {
	return o
}

func (o GetTlsConfigurationIdsResultOutput) ToGetTlsConfigurationIdsResultOutputWithContext(ctx context.Context) GetTlsConfigurationIdsResultOutput {
	return o
}

func (o GetTlsConfigurationIdsResultOutput) ToOutput(ctx context.Context) pulumix.Output[GetTlsConfigurationIdsResult] {
	return pulumix.Output[GetTlsConfigurationIdsResult]{
		OutputState: o.OutputState,
	}
}

// The provider-assigned unique ID for this managed resource.
func (o GetTlsConfigurationIdsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationIdsResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of IDs corresponding to available TLS configurations.
func (o GetTlsConfigurationIdsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTlsConfigurationIdsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTlsConfigurationIdsResultOutput{})
}
