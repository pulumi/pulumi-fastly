// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v10/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information on a TLS Private Key uploaded to Fastly.
//
// > **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
//
//	of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
//	with any of the others.
//
// > **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search
//
//	is specific enough to return a single key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v10/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			demo, err := fastly.LookupTlsPrivateKey(ctx, &fastly.LookupTlsPrivateKeyArgs{
//				Name: pulumi.StringRef("demo-private-key"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("privateKeyNeedsReplacing", demo.Replace)
//			return nil
//		})
//	}
//
// ```
func LookupTlsPrivateKey(ctx *pulumi.Context, args *LookupTlsPrivateKeyArgs, opts ...pulumi.InvokeOption) (*LookupTlsPrivateKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTlsPrivateKeyResult
	err := ctx.Invoke("fastly:index/getTlsPrivateKey:getTlsPrivateKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTlsPrivateKey.
type LookupTlsPrivateKeyArgs struct {
	// Timestamp (GMT) when the private key was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Fastly private key ID. Conflicts with all the other filters
	Id *string `pulumi:"id"`
	// The key length used to generate the private key.
	KeyLength *int `pulumi:"keyLength"`
	// The algorithm used to generate the private key. Must be RSA.
	KeyType *string `pulumi:"keyType"`
	// The human-readable name assigned to the private key when uploaded.
	Name *string `pulumi:"name"`
	// A hash of the associated public key, useful for safely identifying it.
	PublicKeySha1 *string `pulumi:"publicKeySha1"`
}

// A collection of values returned by getTlsPrivateKey.
type LookupTlsPrivateKeyResult struct {
	// Timestamp (GMT) when the private key was created.
	CreatedAt string `pulumi:"createdAt"`
	// Fastly private key ID. Conflicts with all the other filters
	Id string `pulumi:"id"`
	// The key length used to generate the private key.
	KeyLength int `pulumi:"keyLength"`
	// The algorithm used to generate the private key. Must be RSA.
	KeyType string `pulumi:"keyType"`
	// The human-readable name assigned to the private key when uploaded.
	Name string `pulumi:"name"`
	// A hash of the associated public key, useful for safely identifying it.
	PublicKeySha1 string `pulumi:"publicKeySha1"`
	// Whether Fastly recommends replacing this private key.
	Replace bool `pulumi:"replace"`
}

func LookupTlsPrivateKeyOutput(ctx *pulumi.Context, args LookupTlsPrivateKeyOutputArgs, opts ...pulumi.InvokeOption) LookupTlsPrivateKeyResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTlsPrivateKeyResultOutput, error) {
			args := v.(LookupTlsPrivateKeyArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fastly:index/getTlsPrivateKey:getTlsPrivateKey", args, LookupTlsPrivateKeyResultOutput{}, options).(LookupTlsPrivateKeyResultOutput), nil
		}).(LookupTlsPrivateKeyResultOutput)
}

// A collection of arguments for invoking getTlsPrivateKey.
type LookupTlsPrivateKeyOutputArgs struct {
	// Timestamp (GMT) when the private key was created.
	CreatedAt pulumi.StringPtrInput `pulumi:"createdAt"`
	// Fastly private key ID. Conflicts with all the other filters
	Id pulumi.StringPtrInput `pulumi:"id"`
	// The key length used to generate the private key.
	KeyLength pulumi.IntPtrInput `pulumi:"keyLength"`
	// The algorithm used to generate the private key. Must be RSA.
	KeyType pulumi.StringPtrInput `pulumi:"keyType"`
	// The human-readable name assigned to the private key when uploaded.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A hash of the associated public key, useful for safely identifying it.
	PublicKeySha1 pulumi.StringPtrInput `pulumi:"publicKeySha1"`
}

func (LookupTlsPrivateKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTlsPrivateKeyArgs)(nil)).Elem()
}

// A collection of values returned by getTlsPrivateKey.
type LookupTlsPrivateKeyResultOutput struct{ *pulumi.OutputState }

func (LookupTlsPrivateKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTlsPrivateKeyResult)(nil)).Elem()
}

func (o LookupTlsPrivateKeyResultOutput) ToLookupTlsPrivateKeyResultOutput() LookupTlsPrivateKeyResultOutput {
	return o
}

func (o LookupTlsPrivateKeyResultOutput) ToLookupTlsPrivateKeyResultOutputWithContext(ctx context.Context) LookupTlsPrivateKeyResultOutput {
	return o
}

// Timestamp (GMT) when the private key was created.
func (o LookupTlsPrivateKeyResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPrivateKeyResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Fastly private key ID. Conflicts with all the other filters
func (o LookupTlsPrivateKeyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPrivateKeyResult) string { return v.Id }).(pulumi.StringOutput)
}

// The key length used to generate the private key.
func (o LookupTlsPrivateKeyResultOutput) KeyLength() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTlsPrivateKeyResult) int { return v.KeyLength }).(pulumi.IntOutput)
}

// The algorithm used to generate the private key. Must be RSA.
func (o LookupTlsPrivateKeyResultOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPrivateKeyResult) string { return v.KeyType }).(pulumi.StringOutput)
}

// The human-readable name assigned to the private key when uploaded.
func (o LookupTlsPrivateKeyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPrivateKeyResult) string { return v.Name }).(pulumi.StringOutput)
}

// A hash of the associated public key, useful for safely identifying it.
func (o LookupTlsPrivateKeyResultOutput) PublicKeySha1() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsPrivateKeyResult) string { return v.PublicKeySha1 }).(pulumi.StringOutput)
}

// Whether Fastly recommends replacing this private key.
func (o LookupTlsPrivateKeyResultOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTlsPrivateKeyResult) bool { return v.Replace }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTlsPrivateKeyResultOutput{})
}
