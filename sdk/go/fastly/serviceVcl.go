// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Provides a Fastly Service, representing the configuration for a website, app,
// API, or anything else to be served through Fastly. A Service encompasses Domains
// and Backends.
//
// The Service resource requires a domain name that is correctly set up to direct
// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
// on their documentation site for guidance.
//
// ## Import
//
// Fastly Services can be imported using their service ID, e.g.
//
// ```sh
//
//	$ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx
//
// ```
//
//	By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
//
// ```sh
//
//	$ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2
//
// ```
type ServiceVcl struct {
	pulumi.CustomResourceState

	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acls ServiceVclAclArrayOutput `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrOutput `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion pulumi.IntOutput                  `pulumi:"activeVersion"`
	Backends      ServiceVclBackendArrayOutput      `pulumi:"backends"`
	CacheSettings ServiceVclCacheSettingArrayOutput `pulumi:"cacheSettings"`
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntOutput `pulumi:"clonedVersion"`
	// An optional comment about the Director
	Comment    pulumi.StringPtrOutput         `pulumi:"comment"`
	Conditions ServiceVclConditionArrayOutput `pulumi:"conditions"`
	// Sets the host header
	DefaultHost pulumi.StringPtrOutput `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrOutput             `pulumi:"defaultTtl"`
	Dictionaries ServiceVclDictionaryArrayOutput `pulumi:"dictionaries"`
	Directors    ServiceVclDirectorArrayOutput   `pulumi:"directors"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domains         ServiceVclDomainArrayOutput         `pulumi:"domains"`
	Dynamicsnippets ServiceVclDynamicsnippetArrayOutput `pulumi:"dynamicsnippets"`
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrOutput `pulumi:"forceDestroy"`
	// Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
	// local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
	// UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
	ForceRefresh pulumi.BoolOutput           `pulumi:"forceRefresh"`
	Gzips        ServiceVclGzipArrayOutput   `pulumi:"gzips"`
	Headers      ServiceVclHeaderArrayOutput `pulumi:"headers"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthchecks ServiceVclHealthcheckArrayOutput `pulumi:"healthchecks"`
	// Enables support for the HTTP/3 (QUIC) protocol
	Http3 pulumi.BoolPtrOutput `pulumi:"http3"`
	// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
	Imported               pulumi.BoolOutput                         `pulumi:"imported"`
	LoggingBigqueries      ServiceVclLoggingBigqueryArrayOutput      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    ServiceVclLoggingBlobstorageArrayOutput   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      ServiceVclLoggingCloudfileArrayOutput     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        ServiceVclLoggingDatadogArrayOutput       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   ServiceVclLoggingDigitaloceanArrayOutput  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches ServiceVclLoggingElasticsearchArrayOutput `pulumi:"loggingElasticsearches"`
	LoggingFtps            ServiceVclLoggingFtpArrayOutput           `pulumi:"loggingFtps"`
	LoggingGcs             ServiceVclLoggingGcArrayOutput            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   ServiceVclLoggingGooglepubsubArrayOutput  `pulumi:"loggingGooglepubsubs"`
	LoggingHerokus         ServiceVclLoggingHerokusArrayOutput       `pulumi:"loggingHerokus"`
	LoggingHoneycombs      ServiceVclLoggingHoneycombArrayOutput     `pulumi:"loggingHoneycombs"`
	LoggingHttps           ServiceVclLoggingHttpArrayOutput          `pulumi:"loggingHttps"`
	LoggingKafkas          ServiceVclLoggingKafkaArrayOutput         `pulumi:"loggingKafkas"`
	LoggingKineses         ServiceVclLoggingKineseArrayOutput        `pulumi:"loggingKineses"`
	LoggingLogentries      ServiceVclLoggingLogentryArrayOutput      `pulumi:"loggingLogentries"`
	LoggingLogglies        ServiceVclLoggingLogglyArrayOutput        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     ServiceVclLoggingLogshuttleArrayOutput    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       ServiceVclLoggingNewrelicArrayOutput      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      ServiceVclLoggingOpenstackArrayOutput     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     ServiceVclLoggingPapertrailArrayOutput    `pulumi:"loggingPapertrails"`
	LoggingS3s             ServiceVclLoggingS3ArrayOutput            `pulumi:"loggingS3s"`
	LoggingScalyrs         ServiceVclLoggingScalyrArrayOutput        `pulumi:"loggingScalyrs"`
	LoggingSftps           ServiceVclLoggingSftpArrayOutput          `pulumi:"loggingSftps"`
	LoggingSplunks         ServiceVclLoggingSplunkArrayOutput        `pulumi:"loggingSplunks"`
	LoggingSumologics      ServiceVclLoggingSumologicArrayOutput     `pulumi:"loggingSumologics"`
	LoggingSyslogs         ServiceVclLoggingSyslogArrayOutput        `pulumi:"loggingSyslogs"`
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name              pulumi.StringOutput                  `pulumi:"name"`
	ProductEnablement ServiceVclProductEnablementPtrOutput `pulumi:"productEnablement"`
	RateLimiters      ServiceVclRateLimiterArrayOutput     `pulumi:"rateLimiters"`
	RequestSettings   ServiceVclRequestSettingArrayOutput  `pulumi:"requestSettings"`
	// The name of the response object used by the Web Application Firewall
	ResponseObjects ServiceVclResponseObjectArrayOutput `pulumi:"responseObjects"`
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse    pulumi.BoolPtrOutput         `pulumi:"reuse"`
	Snippets ServiceVclSnippetArrayOutput `pulumi:"snippets"`
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrOutput `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrOutput      `pulumi:"staleIfErrorTtl"`
	Vcls            ServiceVclVclArrayOutput `pulumi:"vcls"`
	// Description field for the version
	VersionComment pulumi.StringPtrOutput `pulumi:"versionComment"`
	Waf            ServiceVclWafPtrOutput `pulumi:"waf"`
}

// NewServiceVcl registers a new resource with the given unique name, arguments, and options.
func NewServiceVcl(ctx *pulumi.Context,
	name string, args *ServiceVclArgs, opts ...pulumi.ResourceOption) (*ServiceVcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceVcl
	err := ctx.RegisterResource("fastly:index/serviceVcl:ServiceVcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceVcl gets an existing ServiceVcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceVcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceVclState, opts ...pulumi.ResourceOption) (*ServiceVcl, error) {
	var resource ServiceVcl
	err := ctx.ReadResource("fastly:index/serviceVcl:ServiceVcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceVcl resources.
type serviceVclState struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acls []ServiceVclAcl `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate *bool `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion *int                     `pulumi:"activeVersion"`
	Backends      []ServiceVclBackend      `pulumi:"backends"`
	CacheSettings []ServiceVclCacheSetting `pulumi:"cacheSettings"`
	// The latest cloned version by the provider
	ClonedVersion *int `pulumi:"clonedVersion"`
	// An optional comment about the Director
	Comment    *string               `pulumi:"comment"`
	Conditions []ServiceVclCondition `pulumi:"conditions"`
	// Sets the host header
	DefaultHost *string `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   *int                   `pulumi:"defaultTtl"`
	Dictionaries []ServiceVclDictionary `pulumi:"dictionaries"`
	Directors    []ServiceVclDirector   `pulumi:"directors"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domains         []ServiceVclDomain         `pulumi:"domains"`
	Dynamicsnippets []ServiceVclDynamicsnippet `pulumi:"dynamicsnippets"`
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool `pulumi:"forceDestroy"`
	// Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
	// local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
	// UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
	ForceRefresh *bool              `pulumi:"forceRefresh"`
	Gzips        []ServiceVclGzip   `pulumi:"gzips"`
	Headers      []ServiceVclHeader `pulumi:"headers"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthchecks []ServiceVclHealthcheck `pulumi:"healthchecks"`
	// Enables support for the HTTP/3 (QUIC) protocol
	Http3 *bool `pulumi:"http3"`
	// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
	Imported               *bool                            `pulumi:"imported"`
	LoggingBigqueries      []ServiceVclLoggingBigquery      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    []ServiceVclLoggingBlobstorage   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      []ServiceVclLoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []ServiceVclLoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []ServiceVclLoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []ServiceVclLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []ServiceVclLoggingFtp           `pulumi:"loggingFtps"`
	LoggingGcs             []ServiceVclLoggingGc            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   []ServiceVclLoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHerokus         []ServiceVclLoggingHerokus       `pulumi:"loggingHerokus"`
	LoggingHoneycombs      []ServiceVclLoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingHttps           []ServiceVclLoggingHttp          `pulumi:"loggingHttps"`
	LoggingKafkas          []ServiceVclLoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []ServiceVclLoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogentries      []ServiceVclLoggingLogentry      `pulumi:"loggingLogentries"`
	LoggingLogglies        []ServiceVclLoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []ServiceVclLoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []ServiceVclLoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []ServiceVclLoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     []ServiceVclLoggingPapertrail    `pulumi:"loggingPapertrails"`
	LoggingS3s             []ServiceVclLoggingS3            `pulumi:"loggingS3s"`
	LoggingScalyrs         []ServiceVclLoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []ServiceVclLoggingSftp          `pulumi:"loggingSftps"`
	LoggingSplunks         []ServiceVclLoggingSplunk        `pulumi:"loggingSplunks"`
	LoggingSumologics      []ServiceVclLoggingSumologic     `pulumi:"loggingSumologics"`
	LoggingSyslogs         []ServiceVclLoggingSyslog        `pulumi:"loggingSyslogs"`
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name              *string                      `pulumi:"name"`
	ProductEnablement *ServiceVclProductEnablement `pulumi:"productEnablement"`
	RateLimiters      []ServiceVclRateLimiter      `pulumi:"rateLimiters"`
	RequestSettings   []ServiceVclRequestSetting   `pulumi:"requestSettings"`
	// The name of the response object used by the Web Application Firewall
	ResponseObjects []ServiceVclResponseObject `pulumi:"responseObjects"`
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse    *bool               `pulumi:"reuse"`
	Snippets []ServiceVclSnippet `pulumi:"snippets"`
	// Enables serving a stale object if there is an error
	StaleIfError *bool `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl *int            `pulumi:"staleIfErrorTtl"`
	Vcls            []ServiceVclVcl `pulumi:"vcls"`
	// Description field for the version
	VersionComment *string        `pulumi:"versionComment"`
	Waf            *ServiceVclWaf `pulumi:"waf"`
}

type ServiceVclState struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acls ServiceVclAclArrayInput
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrInput
	// The currently active version of your Fastly Service
	ActiveVersion pulumi.IntPtrInput
	Backends      ServiceVclBackendArrayInput
	CacheSettings ServiceVclCacheSettingArrayInput
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntPtrInput
	// An optional comment about the Director
	Comment    pulumi.StringPtrInput
	Conditions ServiceVclConditionArrayInput
	// Sets the host header
	DefaultHost pulumi.StringPtrInput
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrInput
	Dictionaries ServiceVclDictionaryArrayInput
	Directors    ServiceVclDirectorArrayInput
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domains         ServiceVclDomainArrayInput
	Dynamicsnippets ServiceVclDynamicsnippetArrayInput
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput
	// Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
	// local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
	// UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
	ForceRefresh pulumi.BoolPtrInput
	Gzips        ServiceVclGzipArrayInput
	Headers      ServiceVclHeaderArrayInput
	// Name of a defined `healthcheck` to assign to this backend
	Healthchecks ServiceVclHealthcheckArrayInput
	// Enables support for the HTTP/3 (QUIC) protocol
	Http3 pulumi.BoolPtrInput
	// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
	Imported               pulumi.BoolPtrInput
	LoggingBigqueries      ServiceVclLoggingBigqueryArrayInput
	LoggingBlobstorages    ServiceVclLoggingBlobstorageArrayInput
	LoggingCloudfiles      ServiceVclLoggingCloudfileArrayInput
	LoggingDatadogs        ServiceVclLoggingDatadogArrayInput
	LoggingDigitaloceans   ServiceVclLoggingDigitaloceanArrayInput
	LoggingElasticsearches ServiceVclLoggingElasticsearchArrayInput
	LoggingFtps            ServiceVclLoggingFtpArrayInput
	LoggingGcs             ServiceVclLoggingGcArrayInput
	LoggingGooglepubsubs   ServiceVclLoggingGooglepubsubArrayInput
	LoggingHerokus         ServiceVclLoggingHerokusArrayInput
	LoggingHoneycombs      ServiceVclLoggingHoneycombArrayInput
	LoggingHttps           ServiceVclLoggingHttpArrayInput
	LoggingKafkas          ServiceVclLoggingKafkaArrayInput
	LoggingKineses         ServiceVclLoggingKineseArrayInput
	LoggingLogentries      ServiceVclLoggingLogentryArrayInput
	LoggingLogglies        ServiceVclLoggingLogglyArrayInput
	LoggingLogshuttles     ServiceVclLoggingLogshuttleArrayInput
	LoggingNewrelics       ServiceVclLoggingNewrelicArrayInput
	LoggingOpenstacks      ServiceVclLoggingOpenstackArrayInput
	LoggingPapertrails     ServiceVclLoggingPapertrailArrayInput
	LoggingS3s             ServiceVclLoggingS3ArrayInput
	LoggingScalyrs         ServiceVclLoggingScalyrArrayInput
	LoggingSftps           ServiceVclLoggingSftpArrayInput
	LoggingSplunks         ServiceVclLoggingSplunkArrayInput
	LoggingSumologics      ServiceVclLoggingSumologicArrayInput
	LoggingSyslogs         ServiceVclLoggingSyslogArrayInput
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name              pulumi.StringPtrInput
	ProductEnablement ServiceVclProductEnablementPtrInput
	RateLimiters      ServiceVclRateLimiterArrayInput
	RequestSettings   ServiceVclRequestSettingArrayInput
	// The name of the response object used by the Web Application Firewall
	ResponseObjects ServiceVclResponseObjectArrayInput
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse    pulumi.BoolPtrInput
	Snippets ServiceVclSnippetArrayInput
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrInput
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrInput
	Vcls            ServiceVclVclArrayInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
	Waf            ServiceVclWafPtrInput
}

func (ServiceVclState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceVclState)(nil)).Elem()
}

type serviceVclArgs struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acls []ServiceVclAcl `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate      *bool                    `pulumi:"activate"`
	Backends      []ServiceVclBackend      `pulumi:"backends"`
	CacheSettings []ServiceVclCacheSetting `pulumi:"cacheSettings"`
	// An optional comment about the Director
	Comment    *string               `pulumi:"comment"`
	Conditions []ServiceVclCondition `pulumi:"conditions"`
	// Sets the host header
	DefaultHost *string `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   *int                   `pulumi:"defaultTtl"`
	Dictionaries []ServiceVclDictionary `pulumi:"dictionaries"`
	Directors    []ServiceVclDirector   `pulumi:"directors"`
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domains         []ServiceVclDomain         `pulumi:"domains"`
	Dynamicsnippets []ServiceVclDynamicsnippet `pulumi:"dynamicsnippets"`
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy *bool              `pulumi:"forceDestroy"`
	Gzips        []ServiceVclGzip   `pulumi:"gzips"`
	Headers      []ServiceVclHeader `pulumi:"headers"`
	// Name of a defined `healthcheck` to assign to this backend
	Healthchecks []ServiceVclHealthcheck `pulumi:"healthchecks"`
	// Enables support for the HTTP/3 (QUIC) protocol
	Http3                  *bool                            `pulumi:"http3"`
	LoggingBigqueries      []ServiceVclLoggingBigquery      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    []ServiceVclLoggingBlobstorage   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      []ServiceVclLoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []ServiceVclLoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []ServiceVclLoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []ServiceVclLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []ServiceVclLoggingFtp           `pulumi:"loggingFtps"`
	LoggingGcs             []ServiceVclLoggingGc            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   []ServiceVclLoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHerokus         []ServiceVclLoggingHerokus       `pulumi:"loggingHerokus"`
	LoggingHoneycombs      []ServiceVclLoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingHttps           []ServiceVclLoggingHttp          `pulumi:"loggingHttps"`
	LoggingKafkas          []ServiceVclLoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []ServiceVclLoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogentries      []ServiceVclLoggingLogentry      `pulumi:"loggingLogentries"`
	LoggingLogglies        []ServiceVclLoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []ServiceVclLoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []ServiceVclLoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []ServiceVclLoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     []ServiceVclLoggingPapertrail    `pulumi:"loggingPapertrails"`
	LoggingS3s             []ServiceVclLoggingS3            `pulumi:"loggingS3s"`
	LoggingScalyrs         []ServiceVclLoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []ServiceVclLoggingSftp          `pulumi:"loggingSftps"`
	LoggingSplunks         []ServiceVclLoggingSplunk        `pulumi:"loggingSplunks"`
	LoggingSumologics      []ServiceVclLoggingSumologic     `pulumi:"loggingSumologics"`
	LoggingSyslogs         []ServiceVclLoggingSyslog        `pulumi:"loggingSyslogs"`
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name              *string                      `pulumi:"name"`
	ProductEnablement *ServiceVclProductEnablement `pulumi:"productEnablement"`
	RateLimiters      []ServiceVclRateLimiter      `pulumi:"rateLimiters"`
	RequestSettings   []ServiceVclRequestSetting   `pulumi:"requestSettings"`
	// The name of the response object used by the Web Application Firewall
	ResponseObjects []ServiceVclResponseObject `pulumi:"responseObjects"`
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse    *bool               `pulumi:"reuse"`
	Snippets []ServiceVclSnippet `pulumi:"snippets"`
	// Enables serving a stale object if there is an error
	StaleIfError *bool `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl *int            `pulumi:"staleIfErrorTtl"`
	Vcls            []ServiceVclVcl `pulumi:"vcls"`
	// Description field for the version
	VersionComment *string        `pulumi:"versionComment"`
	Waf            *ServiceVclWaf `pulumi:"waf"`
}

// The set of arguments for constructing a ServiceVcl resource.
type ServiceVclArgs struct {
	// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
	Acls ServiceVclAclArrayInput
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate      pulumi.BoolPtrInput
	Backends      ServiceVclBackendArrayInput
	CacheSettings ServiceVclCacheSettingArrayInput
	// An optional comment about the Director
	Comment    pulumi.StringPtrInput
	Conditions ServiceVclConditionArrayInput
	// Sets the host header
	DefaultHost pulumi.StringPtrInput
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrInput
	Dictionaries ServiceVclDictionaryArrayInput
	Directors    ServiceVclDirectorArrayInput
	// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
	Domains         ServiceVclDomainArrayInput
	Dynamicsnippets ServiceVclDynamicsnippetArrayInput
	// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
	ForceDestroy pulumi.BoolPtrInput
	Gzips        ServiceVclGzipArrayInput
	Headers      ServiceVclHeaderArrayInput
	// Name of a defined `healthcheck` to assign to this backend
	Healthchecks ServiceVclHealthcheckArrayInput
	// Enables support for the HTTP/3 (QUIC) protocol
	Http3                  pulumi.BoolPtrInput
	LoggingBigqueries      ServiceVclLoggingBigqueryArrayInput
	LoggingBlobstorages    ServiceVclLoggingBlobstorageArrayInput
	LoggingCloudfiles      ServiceVclLoggingCloudfileArrayInput
	LoggingDatadogs        ServiceVclLoggingDatadogArrayInput
	LoggingDigitaloceans   ServiceVclLoggingDigitaloceanArrayInput
	LoggingElasticsearches ServiceVclLoggingElasticsearchArrayInput
	LoggingFtps            ServiceVclLoggingFtpArrayInput
	LoggingGcs             ServiceVclLoggingGcArrayInput
	LoggingGooglepubsubs   ServiceVclLoggingGooglepubsubArrayInput
	LoggingHerokus         ServiceVclLoggingHerokusArrayInput
	LoggingHoneycombs      ServiceVclLoggingHoneycombArrayInput
	LoggingHttps           ServiceVclLoggingHttpArrayInput
	LoggingKafkas          ServiceVclLoggingKafkaArrayInput
	LoggingKineses         ServiceVclLoggingKineseArrayInput
	LoggingLogentries      ServiceVclLoggingLogentryArrayInput
	LoggingLogglies        ServiceVclLoggingLogglyArrayInput
	LoggingLogshuttles     ServiceVclLoggingLogshuttleArrayInput
	LoggingNewrelics       ServiceVclLoggingNewrelicArrayInput
	LoggingOpenstacks      ServiceVclLoggingOpenstackArrayInput
	LoggingPapertrails     ServiceVclLoggingPapertrailArrayInput
	LoggingS3s             ServiceVclLoggingS3ArrayInput
	LoggingScalyrs         ServiceVclLoggingScalyrArrayInput
	LoggingSftps           ServiceVclLoggingSftpArrayInput
	LoggingSplunks         ServiceVclLoggingSplunkArrayInput
	LoggingSumologics      ServiceVclLoggingSumologicArrayInput
	LoggingSyslogs         ServiceVclLoggingSyslogArrayInput
	// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
	Name              pulumi.StringPtrInput
	ProductEnablement ServiceVclProductEnablementPtrInput
	RateLimiters      ServiceVclRateLimiterArrayInput
	RequestSettings   ServiceVclRequestSettingArrayInput
	// The name of the response object used by the Web Application Firewall
	ResponseObjects ServiceVclResponseObjectArrayInput
	// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
	// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
	// an active service will cause an error. Default `false`
	Reuse    pulumi.BoolPtrInput
	Snippets ServiceVclSnippetArrayInput
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrInput
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrInput
	Vcls            ServiceVclVclArrayInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
	Waf            ServiceVclWafPtrInput
}

func (ServiceVclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceVclArgs)(nil)).Elem()
}

type ServiceVclInput interface {
	pulumi.Input

	ToServiceVclOutput() ServiceVclOutput
	ToServiceVclOutputWithContext(ctx context.Context) ServiceVclOutput
}

func (*ServiceVcl) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVcl)(nil)).Elem()
}

func (i *ServiceVcl) ToServiceVclOutput() ServiceVclOutput {
	return i.ToServiceVclOutputWithContext(context.Background())
}

func (i *ServiceVcl) ToServiceVclOutputWithContext(ctx context.Context) ServiceVclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclOutput)
}

func (i *ServiceVcl) ToOutput(ctx context.Context) pulumix.Output[*ServiceVcl] {
	return pulumix.Output[*ServiceVcl]{
		OutputState: i.ToServiceVclOutputWithContext(ctx).OutputState,
	}
}

// ServiceVclArrayInput is an input type that accepts ServiceVclArray and ServiceVclArrayOutput values.
// You can construct a concrete instance of `ServiceVclArrayInput` via:
//
//	ServiceVclArray{ ServiceVclArgs{...} }
type ServiceVclArrayInput interface {
	pulumi.Input

	ToServiceVclArrayOutput() ServiceVclArrayOutput
	ToServiceVclArrayOutputWithContext(context.Context) ServiceVclArrayOutput
}

type ServiceVclArray []ServiceVclInput

func (ServiceVclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceVcl)(nil)).Elem()
}

func (i ServiceVclArray) ToServiceVclArrayOutput() ServiceVclArrayOutput {
	return i.ToServiceVclArrayOutputWithContext(context.Background())
}

func (i ServiceVclArray) ToServiceVclArrayOutputWithContext(ctx context.Context) ServiceVclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclArrayOutput)
}

func (i ServiceVclArray) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceVcl] {
	return pulumix.Output[[]*ServiceVcl]{
		OutputState: i.ToServiceVclArrayOutputWithContext(ctx).OutputState,
	}
}

// ServiceVclMapInput is an input type that accepts ServiceVclMap and ServiceVclMapOutput values.
// You can construct a concrete instance of `ServiceVclMapInput` via:
//
//	ServiceVclMap{ "key": ServiceVclArgs{...} }
type ServiceVclMapInput interface {
	pulumi.Input

	ToServiceVclMapOutput() ServiceVclMapOutput
	ToServiceVclMapOutputWithContext(context.Context) ServiceVclMapOutput
}

type ServiceVclMap map[string]ServiceVclInput

func (ServiceVclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceVcl)(nil)).Elem()
}

func (i ServiceVclMap) ToServiceVclMapOutput() ServiceVclMapOutput {
	return i.ToServiceVclMapOutputWithContext(context.Background())
}

func (i ServiceVclMap) ToServiceVclMapOutputWithContext(ctx context.Context) ServiceVclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclMapOutput)
}

func (i ServiceVclMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceVcl] {
	return pulumix.Output[map[string]*ServiceVcl]{
		OutputState: i.ToServiceVclMapOutputWithContext(ctx).OutputState,
	}
}

type ServiceVclOutput struct{ *pulumi.OutputState }

func (ServiceVclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVcl)(nil)).Elem()
}

func (o ServiceVclOutput) ToServiceVclOutput() ServiceVclOutput {
	return o
}

func (o ServiceVclOutput) ToServiceVclOutputWithContext(ctx context.Context) ServiceVclOutput {
	return o
}

func (o ServiceVclOutput) ToOutput(ctx context.Context) pulumix.Output[*ServiceVcl] {
	return pulumix.Output[*ServiceVcl]{
		OutputState: o.OutputState,
	}
}

// The AWS [Canned ACL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl) to use for objects uploaded to the S3 bucket. Options are: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`
func (o ServiceVclOutput) Acls() ServiceVclAclArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclAclArrayOutput { return v.Acls }).(ServiceVclAclArrayOutput)
}

// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
func (o ServiceVclOutput) Activate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.BoolPtrOutput { return v.Activate }).(pulumi.BoolPtrOutput)
}

// The currently active version of your Fastly Service
func (o ServiceVclOutput) ActiveVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.IntOutput { return v.ActiveVersion }).(pulumi.IntOutput)
}

func (o ServiceVclOutput) Backends() ServiceVclBackendArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclBackendArrayOutput { return v.Backends }).(ServiceVclBackendArrayOutput)
}

func (o ServiceVclOutput) CacheSettings() ServiceVclCacheSettingArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclCacheSettingArrayOutput { return v.CacheSettings }).(ServiceVclCacheSettingArrayOutput)
}

// The latest cloned version by the provider
func (o ServiceVclOutput) ClonedVersion() pulumi.IntOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.IntOutput { return v.ClonedVersion }).(pulumi.IntOutput)
}

// An optional comment about the Director
func (o ServiceVclOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ServiceVclOutput) Conditions() ServiceVclConditionArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclConditionArrayOutput { return v.Conditions }).(ServiceVclConditionArrayOutput)
}

// Sets the host header
func (o ServiceVclOutput) DefaultHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.StringPtrOutput { return v.DefaultHost }).(pulumi.StringPtrOutput)
}

// The default Time-to-live (TTL) for requests
func (o ServiceVclOutput) DefaultTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.IntPtrOutput { return v.DefaultTtl }).(pulumi.IntPtrOutput)
}

func (o ServiceVclOutput) Dictionaries() ServiceVclDictionaryArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclDictionaryArrayOutput { return v.Dictionaries }).(ServiceVclDictionaryArrayOutput)
}

func (o ServiceVclOutput) Directors() ServiceVclDirectorArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclDirectorArrayOutput { return v.Directors }).(ServiceVclDirectorArrayOutput)
}

// The domain of the DigitalOcean Spaces endpoint (default `nyc3.digitaloceanspaces.com`)
func (o ServiceVclOutput) Domains() ServiceVclDomainArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclDomainArrayOutput { return v.Domains }).(ServiceVclDomainArrayOutput)
}

func (o ServiceVclOutput) Dynamicsnippets() ServiceVclDynamicsnippetArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclDynamicsnippetArrayOutput { return v.Dynamicsnippets }).(ServiceVclDynamicsnippetArrayOutput)
}

// Allow the ACL to be deleted, even if it contains entries. Defaults to false.
func (o ServiceVclOutput) ForceDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.BoolPtrOutput { return v.ForceDestroy }).(pulumi.BoolPtrOutput)
}

// Used internally by the provider to temporarily indicate if all resources should call their associated API to update the
// local state. This is for scenarios where the service version has been reverted outside of Terraform (e.g. via the Fastly
// UI) and the provider needs to resync the state for a different active version (this is only if `activate` is `true`).
func (o ServiceVclOutput) ForceRefresh() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.BoolOutput { return v.ForceRefresh }).(pulumi.BoolOutput)
}

func (o ServiceVclOutput) Gzips() ServiceVclGzipArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclGzipArrayOutput { return v.Gzips }).(ServiceVclGzipArrayOutput)
}

func (o ServiceVclOutput) Headers() ServiceVclHeaderArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclHeaderArrayOutput { return v.Headers }).(ServiceVclHeaderArrayOutput)
}

// Name of a defined `healthcheck` to assign to this backend
func (o ServiceVclOutput) Healthchecks() ServiceVclHealthcheckArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclHealthcheckArrayOutput { return v.Healthchecks }).(ServiceVclHealthcheckArrayOutput)
}

// Enables support for the HTTP/3 (QUIC) protocol
func (o ServiceVclOutput) Http3() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.BoolPtrOutput { return v.Http3 }).(pulumi.BoolPtrOutput)
}

// Used internally by the provider to temporarily indicate if the service is being imported, and is reset to false once the import is finished
func (o ServiceVclOutput) Imported() pulumi.BoolOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.BoolOutput { return v.Imported }).(pulumi.BoolOutput)
}

func (o ServiceVclOutput) LoggingBigqueries() ServiceVclLoggingBigqueryArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingBigqueryArrayOutput { return v.LoggingBigqueries }).(ServiceVclLoggingBigqueryArrayOutput)
}

func (o ServiceVclOutput) LoggingBlobstorages() ServiceVclLoggingBlobstorageArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingBlobstorageArrayOutput { return v.LoggingBlobstorages }).(ServiceVclLoggingBlobstorageArrayOutput)
}

func (o ServiceVclOutput) LoggingCloudfiles() ServiceVclLoggingCloudfileArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingCloudfileArrayOutput { return v.LoggingCloudfiles }).(ServiceVclLoggingCloudfileArrayOutput)
}

func (o ServiceVclOutput) LoggingDatadogs() ServiceVclLoggingDatadogArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingDatadogArrayOutput { return v.LoggingDatadogs }).(ServiceVclLoggingDatadogArrayOutput)
}

func (o ServiceVclOutput) LoggingDigitaloceans() ServiceVclLoggingDigitaloceanArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingDigitaloceanArrayOutput { return v.LoggingDigitaloceans }).(ServiceVclLoggingDigitaloceanArrayOutput)
}

func (o ServiceVclOutput) LoggingElasticsearches() ServiceVclLoggingElasticsearchArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingElasticsearchArrayOutput { return v.LoggingElasticsearches }).(ServiceVclLoggingElasticsearchArrayOutput)
}

func (o ServiceVclOutput) LoggingFtps() ServiceVclLoggingFtpArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingFtpArrayOutput { return v.LoggingFtps }).(ServiceVclLoggingFtpArrayOutput)
}

func (o ServiceVclOutput) LoggingGcs() ServiceVclLoggingGcArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingGcArrayOutput { return v.LoggingGcs }).(ServiceVclLoggingGcArrayOutput)
}

func (o ServiceVclOutput) LoggingGooglepubsubs() ServiceVclLoggingGooglepubsubArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingGooglepubsubArrayOutput { return v.LoggingGooglepubsubs }).(ServiceVclLoggingGooglepubsubArrayOutput)
}

func (o ServiceVclOutput) LoggingHerokus() ServiceVclLoggingHerokusArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingHerokusArrayOutput { return v.LoggingHerokus }).(ServiceVclLoggingHerokusArrayOutput)
}

func (o ServiceVclOutput) LoggingHoneycombs() ServiceVclLoggingHoneycombArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingHoneycombArrayOutput { return v.LoggingHoneycombs }).(ServiceVclLoggingHoneycombArrayOutput)
}

func (o ServiceVclOutput) LoggingHttps() ServiceVclLoggingHttpArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingHttpArrayOutput { return v.LoggingHttps }).(ServiceVclLoggingHttpArrayOutput)
}

func (o ServiceVclOutput) LoggingKafkas() ServiceVclLoggingKafkaArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingKafkaArrayOutput { return v.LoggingKafkas }).(ServiceVclLoggingKafkaArrayOutput)
}

func (o ServiceVclOutput) LoggingKineses() ServiceVclLoggingKineseArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingKineseArrayOutput { return v.LoggingKineses }).(ServiceVclLoggingKineseArrayOutput)
}

func (o ServiceVclOutput) LoggingLogentries() ServiceVclLoggingLogentryArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingLogentryArrayOutput { return v.LoggingLogentries }).(ServiceVclLoggingLogentryArrayOutput)
}

func (o ServiceVclOutput) LoggingLogglies() ServiceVclLoggingLogglyArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingLogglyArrayOutput { return v.LoggingLogglies }).(ServiceVclLoggingLogglyArrayOutput)
}

func (o ServiceVclOutput) LoggingLogshuttles() ServiceVclLoggingLogshuttleArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingLogshuttleArrayOutput { return v.LoggingLogshuttles }).(ServiceVclLoggingLogshuttleArrayOutput)
}

func (o ServiceVclOutput) LoggingNewrelics() ServiceVclLoggingNewrelicArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingNewrelicArrayOutput { return v.LoggingNewrelics }).(ServiceVclLoggingNewrelicArrayOutput)
}

func (o ServiceVclOutput) LoggingOpenstacks() ServiceVclLoggingOpenstackArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingOpenstackArrayOutput { return v.LoggingOpenstacks }).(ServiceVclLoggingOpenstackArrayOutput)
}

func (o ServiceVclOutput) LoggingPapertrails() ServiceVclLoggingPapertrailArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingPapertrailArrayOutput { return v.LoggingPapertrails }).(ServiceVclLoggingPapertrailArrayOutput)
}

func (o ServiceVclOutput) LoggingS3s() ServiceVclLoggingS3ArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingS3ArrayOutput { return v.LoggingS3s }).(ServiceVclLoggingS3ArrayOutput)
}

func (o ServiceVclOutput) LoggingScalyrs() ServiceVclLoggingScalyrArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingScalyrArrayOutput { return v.LoggingScalyrs }).(ServiceVclLoggingScalyrArrayOutput)
}

func (o ServiceVclOutput) LoggingSftps() ServiceVclLoggingSftpArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingSftpArrayOutput { return v.LoggingSftps }).(ServiceVclLoggingSftpArrayOutput)
}

func (o ServiceVclOutput) LoggingSplunks() ServiceVclLoggingSplunkArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingSplunkArrayOutput { return v.LoggingSplunks }).(ServiceVclLoggingSplunkArrayOutput)
}

func (o ServiceVclOutput) LoggingSumologics() ServiceVclLoggingSumologicArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingSumologicArrayOutput { return v.LoggingSumologics }).(ServiceVclLoggingSumologicArrayOutput)
}

func (o ServiceVclOutput) LoggingSyslogs() ServiceVclLoggingSyslogArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclLoggingSyslogArrayOutput { return v.LoggingSyslogs }).(ServiceVclLoggingSyslogArrayOutput)
}

// A unique name to identify this ACL. It is important to note that changing this attribute will delete and recreate the ACL, and discard the current items in the ACL
func (o ServiceVclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ServiceVclOutput) ProductEnablement() ServiceVclProductEnablementPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclProductEnablementPtrOutput { return v.ProductEnablement }).(ServiceVclProductEnablementPtrOutput)
}

func (o ServiceVclOutput) RateLimiters() ServiceVclRateLimiterArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclRateLimiterArrayOutput { return v.RateLimiters }).(ServiceVclRateLimiterArrayOutput)
}

func (o ServiceVclOutput) RequestSettings() ServiceVclRequestSettingArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclRequestSettingArrayOutput { return v.RequestSettings }).(ServiceVclRequestSettingArrayOutput)
}

// The name of the response object used by the Web Application Firewall
func (o ServiceVclOutput) ResponseObjects() ServiceVclResponseObjectArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclResponseObjectArrayOutput { return v.ResponseObjects }).(ServiceVclResponseObjectArrayOutput)
}

// Services that are active cannot be destroyed. If set to `true` a service Terraform intends to destroy will instead be
// deactivated (allowing it to be reused by importing it into another Terraform project). If `false`, attempting to destroy
// an active service will cause an error. Default `false`
func (o ServiceVclOutput) Reuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.BoolPtrOutput { return v.Reuse }).(pulumi.BoolPtrOutput)
}

func (o ServiceVclOutput) Snippets() ServiceVclSnippetArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclSnippetArrayOutput { return v.Snippets }).(ServiceVclSnippetArrayOutput)
}

// Enables serving a stale object if there is an error
func (o ServiceVclOutput) StaleIfError() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.BoolPtrOutput { return v.StaleIfError }).(pulumi.BoolPtrOutput)
}

// The default time-to-live (TTL) for serving the stale object for the version
func (o ServiceVclOutput) StaleIfErrorTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.IntPtrOutput { return v.StaleIfErrorTtl }).(pulumi.IntPtrOutput)
}

func (o ServiceVclOutput) Vcls() ServiceVclVclArrayOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclVclArrayOutput { return v.Vcls }).(ServiceVclVclArrayOutput)
}

// Description field for the version
func (o ServiceVclOutput) VersionComment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) pulumi.StringPtrOutput { return v.VersionComment }).(pulumi.StringPtrOutput)
}

func (o ServiceVclOutput) Waf() ServiceVclWafPtrOutput {
	return o.ApplyT(func(v *ServiceVcl) ServiceVclWafPtrOutput { return v.Waf }).(ServiceVclWafPtrOutput)
}

type ServiceVclArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceVcl)(nil)).Elem()
}

func (o ServiceVclArrayOutput) ToServiceVclArrayOutput() ServiceVclArrayOutput {
	return o
}

func (o ServiceVclArrayOutput) ToServiceVclArrayOutputWithContext(ctx context.Context) ServiceVclArrayOutput {
	return o
}

func (o ServiceVclArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ServiceVcl] {
	return pulumix.Output[[]*ServiceVcl]{
		OutputState: o.OutputState,
	}
}

func (o ServiceVclArrayOutput) Index(i pulumi.IntInput) ServiceVclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceVcl {
		return vs[0].([]*ServiceVcl)[vs[1].(int)]
	}).(ServiceVclOutput)
}

type ServiceVclMapOutput struct{ *pulumi.OutputState }

func (ServiceVclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceVcl)(nil)).Elem()
}

func (o ServiceVclMapOutput) ToServiceVclMapOutput() ServiceVclMapOutput {
	return o
}

func (o ServiceVclMapOutput) ToServiceVclMapOutputWithContext(ctx context.Context) ServiceVclMapOutput {
	return o
}

func (o ServiceVclMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ServiceVcl] {
	return pulumix.Output[map[string]*ServiceVcl]{
		OutputState: o.OutputState,
	}
}

func (o ServiceVclMapOutput) MapIndex(k pulumi.StringInput) ServiceVclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceVcl {
		return vs[0].(map[string]*ServiceVcl)[vs[1].(string)]
	}).(ServiceVclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclInput)(nil)).Elem(), &ServiceVcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclArrayInput)(nil)).Elem(), ServiceVclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclMapInput)(nil)).Elem(), ServiceVclMap{})
	pulumi.RegisterOutputType(ServiceVclOutput{})
	pulumi.RegisterOutputType(ServiceVclArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclMapOutput{})
}
