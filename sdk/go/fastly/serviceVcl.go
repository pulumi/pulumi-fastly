// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Service, representing the configuration for a website, app,
// API, or anything else to be served through Fastly. A Service encompasses Domains
// and Backends.
//
// The Service resource requires a domain name that is correctly set up to direct
// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
// on their documentation site for guidance.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fastly/sdk/v4/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServiceVcl(ctx, "demo", &fastly.ServiceVclArgs{
// 			Backends: ServiceVclBackendArray{
// 				&ServiceVclBackendArgs{
// 					Address: pulumi.String("127.0.0.1"),
// 					Name:    pulumi.String("localhost"),
// 					Port:    pulumi.Int(80),
// 				},
// 			},
// 			Domains: ServiceVclDomainArray{
// 				&ServiceVclDomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("demo.notexample.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Basic usage with an Amazon S3 Website and that removes the `x-amz-request-id` header:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws/s3"
// 	"github.com/pulumi/pulumi-fastly/sdk/v4/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServiceVcl(ctx, "demo", &fastly.ServiceVclArgs{
// 			Backends: ServiceVclBackendArray{
// 				&ServiceVclBackendArgs{
// 					Address:      pulumi.String("demo.notexample.com.s3-website-us-west-2.amazonaws.com"),
// 					Name:         pulumi.String("AWS S3 hosting"),
// 					OverrideHost: pulumi.String("demo.notexample.com.s3-website-us-west-2.amazonaws.com"),
// 					Port:         pulumi.Int(80),
// 				},
// 			},
// 			Domains: ServiceVclDomainArray{
// 				&ServiceVclDomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("demo.notexample.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 			Gzips: ServiceVclGzipArray{
// 				&ServiceVclGzipArgs{
// 					ContentTypes: pulumi.StringArray{
// 						pulumi.String("text/html"),
// 						pulumi.String("text/css"),
// 					},
// 					Extensions: pulumi.StringArray{
// 						pulumi.String("css"),
// 						pulumi.String("js"),
// 					},
// 					Name: pulumi.String("file extensions and content types"),
// 				},
// 			},
// 			Headers: ServiceVclHeaderArray{
// 				&ServiceVclHeaderArgs{
// 					Action:      pulumi.String("delete"),
// 					Destination: pulumi.String("http.x-amz-request-id"),
// 					Name:        pulumi.String("remove x-amz-request-id"),
// 					Type:        pulumi.String("cache"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = s3.NewBucket(ctx, "website", &s3.BucketArgs{
// 			Acl: pulumi.String("public-read"),
// 			Website: &s3.BucketWebsiteArgs{
// 				ErrorDocument: pulumi.String("error.html"),
// 				IndexDocument: pulumi.String("index.html"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Basic usage with [custom
// VCL](https://docs.fastly.com/vcl/custom-vcl/uploading-custom-vcl/):
//
// ```go
// package main
//
// import (
// 	"fmt"
// 	"io/ioutil"
//
// 	"github.com/pulumi/pulumi-fastly/sdk/v4/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func readFileOrPanic(path string) pulumi.StringPtrInput {
// 	data, err := ioutil.ReadFile(path)
// 	if err != nil {
// 		panic(err.Error())
// 	}
// 	return pulumi.String(string(data))
// }
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServiceVcl(ctx, "demo", &fastly.ServiceVclArgs{
// 			Backends: ServiceVclBackendArray{
// 				&ServiceVclBackendArgs{
// 					Address: pulumi.String("127.0.0.1"),
// 					Name:    pulumi.String("localhost"),
// 					Port:    pulumi.Int(80),
// 				},
// 			},
// 			Domains: ServiceVclDomainArray{
// 				&ServiceVclDomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("demo.notexample.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 			Vcls: ServiceVclVclArray{
// 				&ServiceVclVclArgs{
// 					Content: readFileOrPanic(fmt.Sprintf("%v%v", path.Module, "/my_custom_main.vcl")),
// 					Main:    pulumi.Bool(true),
// 					Name:    pulumi.String("my_custom_main_vcl"),
// 				},
// 				&ServiceVclVclArgs{
// 					Content: readFileOrPanic(fmt.Sprintf("%v%v", path.Module, "/my_custom_library.vcl")),
// 					Name:    pulumi.String("my_custom_library_vcl"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Basic usage with [custom Director](https://developer.fastly.com/reference/api/load-balancing/directors/director/):
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fastly/sdk/v4/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServiceVcl(ctx, "demo", &fastly.ServiceVclArgs{
// 			Backends: ServiceVclBackendArray{
// 				&ServiceVclBackendArgs{
// 					Address: pulumi.String("127.0.0.1"),
// 					Name:    pulumi.String("origin1"),
// 					Port:    pulumi.Int(80),
// 				},
// 				&ServiceVclBackendArgs{
// 					Address: pulumi.String("127.0.0.2"),
// 					Name:    pulumi.String("origin2"),
// 					Port:    pulumi.Int(80),
// 				},
// 			},
// 			Directors: ServiceVclDirectorArray{
// 				&ServiceVclDirectorArgs{
// 					Backends: pulumi.StringArray{
// 						pulumi.String("origin1"),
// 						pulumi.String("origin2"),
// 					},
// 					Name:   pulumi.String("mydirector"),
// 					Quorum: pulumi.Int(0),
// 					Type:   pulumi.Int(3),
// 				},
// 			},
// 			Domains: ServiceVclDomainArray{
// 				&ServiceVclDomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("demo.notexample.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// Basic usage with [Web Application Firewall](https://developer.fastly.com/reference/api/waf/):
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-fastly/sdk/v4/go/fastly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := fastly.NewServiceVcl(ctx, "demo", &fastly.ServiceVclArgs{
// 			Backends: ServiceVclBackendArray{
// 				&ServiceVclBackendArgs{
// 					Address: pulumi.String("127.0.0.1"),
// 					Name:    pulumi.String("origin1"),
// 					Port:    pulumi.Int(80),
// 				},
// 			},
// 			Conditions: ServiceVclConditionArray{
// 				&ServiceVclConditionArgs{
// 					Name:      pulumi.String("WAF_Prefetch"),
// 					Statement: pulumi.String("req.backend.is_origin"),
// 					Type:      pulumi.String("PREFETCH"),
// 				},
// 				&ServiceVclConditionArgs{
// 					Name:      pulumi.String("WAF_always_false"),
// 					Statement: pulumi.String("false"),
// 					Type:      pulumi.String("REQUEST"),
// 				},
// 			},
// 			Domains: ServiceVclDomainArray{
// 				&ServiceVclDomainArgs{
// 					Comment: pulumi.String("demo"),
// 					Name:    pulumi.String("example.com"),
// 				},
// 			},
// 			ForceDestroy: pulumi.Bool(true),
// 			ResponseObjects: ServiceVclResponseObjectArray{
// 				&ServiceVclResponseObjectArgs{
// 					Content:          pulumi.String("<html><body>Forbidden</body></html>"),
// 					ContentType:      pulumi.String("text/html"),
// 					Name:             pulumi.String("WAF_Response"),
// 					RequestCondition: pulumi.String("WAF_always_false"),
// 					Response:         pulumi.String("Forbidden"),
// 					Status:           pulumi.Int(403),
// 				},
// 			},
// 			Waf: &ServiceVclWafArgs{
// 				PrefetchCondition: pulumi.String("WAF_Prefetch"),
// 				ResponseObject:    pulumi.String("WAF_Response"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// > **Note:** For an AWS S3 Bucket, the Backend address is
// `<domain>.s3-website-<region>.amazonaws.com`. The `overrideHost` attribute
// should be set to `<bucket_name>.s3-website-<region>.amazonaws.com` in the `backend` block. See the
// Fastly documentation on [Amazon S3][fastly-s3].
//
// [fastly-s3]: https://docs.fastly.com/en/guides/amazon-s3
// [fastly-cname]: https://docs.fastly.com/en/guides/adding-cname-records
// [fastly-conditionals]: https://docs.fastly.com/en/guides/using-conditions
// [fastly-sumologic]: https://developer.fastly.com/reference/api/logging/sumologic/
// [fastly-gcs]: https://developer.fastly.com/reference/api/logging/gcs/
//
// ## Import
//
// Fastly Services can be imported using their service ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx
// ```
//
//  By default, either the active version will be imported, or the latest version if no version is active. Alternatively, a specific version of the service can be selected by appending an `@` followed by the version number to the service ID, e.g.
//
// ```sh
//  $ pulumi import fastly:index/serviceVcl:ServiceVcl demo xxxxxxxxxxxxxxxxxxxx@2
// ```
type ServiceVcl struct {
	pulumi.CustomResourceState

	Acls ServiceVclAclArrayOutput `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrOutput `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion pulumi.IntOutput                  `pulumi:"activeVersion"`
	Backends      ServiceVclBackendArrayOutput      `pulumi:"backends"`
	CacheSettings ServiceVclCacheSettingArrayOutput `pulumi:"cacheSettings"`
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntOutput `pulumi:"clonedVersion"`
	// Description field for the service. Default `Managed by Terraform`
	Comment    pulumi.StringPtrOutput         `pulumi:"comment"`
	Conditions ServiceVclConditionArrayOutput `pulumi:"conditions"`
	// The default hostname
	DefaultHost pulumi.StringPtrOutput `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrOutput             `pulumi:"defaultTtl"`
	Dictionaries ServiceVclDictionaryArrayOutput `pulumi:"dictionaries"`
	Directors    ServiceVclDirectorArrayOutput   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains         ServiceVclDomainArrayOutput         `pulumi:"domains"`
	Dynamicsnippets ServiceVclDynamicsnippetArrayOutput `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrOutput                      `pulumi:"forceDestroy"`
	Gzips                  ServiceVclGzipArrayOutput                 `pulumi:"gzips"`
	Headers                ServiceVclHeaderArrayOutput               `pulumi:"headers"`
	Healthchecks           ServiceVclHealthcheckArrayOutput          `pulumi:"healthchecks"`
	LoggingBigqueries      ServiceVclLoggingBigqueryArrayOutput      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    ServiceVclLoggingBlobstorageArrayOutput   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      ServiceVclLoggingCloudfileArrayOutput     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        ServiceVclLoggingDatadogArrayOutput       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   ServiceVclLoggingDigitaloceanArrayOutput  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches ServiceVclLoggingElasticsearchArrayOutput `pulumi:"loggingElasticsearches"`
	LoggingFtps            ServiceVclLoggingFtpArrayOutput           `pulumi:"loggingFtps"`
	LoggingGcs             ServiceVclLoggingGcArrayOutput            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   ServiceVclLoggingGooglepubsubArrayOutput  `pulumi:"loggingGooglepubsubs"`
	LoggingHerokus         ServiceVclLoggingHerokusArrayOutput       `pulumi:"loggingHerokus"`
	LoggingHoneycombs      ServiceVclLoggingHoneycombArrayOutput     `pulumi:"loggingHoneycombs"`
	LoggingHttps           ServiceVclLoggingHttpArrayOutput          `pulumi:"loggingHttps"`
	LoggingKafkas          ServiceVclLoggingKafkaArrayOutput         `pulumi:"loggingKafkas"`
	LoggingKineses         ServiceVclLoggingKineseArrayOutput        `pulumi:"loggingKineses"`
	LoggingLogentries      ServiceVclLoggingLogentryArrayOutput      `pulumi:"loggingLogentries"`
	LoggingLogglies        ServiceVclLoggingLogglyArrayOutput        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     ServiceVclLoggingLogshuttleArrayOutput    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       ServiceVclLoggingNewrelicArrayOutput      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      ServiceVclLoggingOpenstackArrayOutput     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     ServiceVclLoggingPapertrailArrayOutput    `pulumi:"loggingPapertrails"`
	LoggingS3s             ServiceVclLoggingS3ArrayOutput            `pulumi:"loggingS3s"`
	LoggingScalyrs         ServiceVclLoggingScalyrArrayOutput        `pulumi:"loggingScalyrs"`
	LoggingSftps           ServiceVclLoggingSftpArrayOutput          `pulumi:"loggingSftps"`
	LoggingSplunks         ServiceVclLoggingSplunkArrayOutput        `pulumi:"loggingSplunks"`
	LoggingSumologics      ServiceVclLoggingSumologicArrayOutput     `pulumi:"loggingSumologics"`
	LoggingSyslogs         ServiceVclLoggingSyslogArrayOutput        `pulumi:"loggingSyslogs"`
	// The unique name for the Service to create
	Name            pulumi.StringOutput                 `pulumi:"name"`
	RequestSettings ServiceVclRequestSettingArrayOutput `pulumi:"requestSettings"`
	ResponseObjects ServiceVclResponseObjectArrayOutput `pulumi:"responseObjects"`
	Snippets        ServiceVclSnippetArrayOutput        `pulumi:"snippets"`
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrOutput `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrOutput      `pulumi:"staleIfErrorTtl"`
	Vcls            ServiceVclVclArrayOutput `pulumi:"vcls"`
	// Description field for the version
	VersionComment pulumi.StringPtrOutput `pulumi:"versionComment"`
	Waf            ServiceVclWafPtrOutput `pulumi:"waf"`
}

// NewServiceVcl registers a new resource with the given unique name, arguments, and options.
func NewServiceVcl(ctx *pulumi.Context,
	name string, args *ServiceVclArgs, opts ...pulumi.ResourceOption) (*ServiceVcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domains == nil {
		return nil, errors.New("invalid value for required argument 'Domains'")
	}
	var resource ServiceVcl
	err := ctx.RegisterResource("fastly:index/serviceVcl:ServiceVcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceVcl gets an existing ServiceVcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceVcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceVclState, opts ...pulumi.ResourceOption) (*ServiceVcl, error) {
	var resource ServiceVcl
	err := ctx.ReadResource("fastly:index/serviceVcl:ServiceVcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceVcl resources.
type serviceVclState struct {
	Acls []ServiceVclAcl `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate *bool `pulumi:"activate"`
	// The currently active version of your Fastly Service
	ActiveVersion *int                     `pulumi:"activeVersion"`
	Backends      []ServiceVclBackend      `pulumi:"backends"`
	CacheSettings []ServiceVclCacheSetting `pulumi:"cacheSettings"`
	// The latest cloned version by the provider
	ClonedVersion *int `pulumi:"clonedVersion"`
	// Description field for the service. Default `Managed by Terraform`
	Comment    *string               `pulumi:"comment"`
	Conditions []ServiceVclCondition `pulumi:"conditions"`
	// The default hostname
	DefaultHost *string `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   *int                   `pulumi:"defaultTtl"`
	Dictionaries []ServiceVclDictionary `pulumi:"dictionaries"`
	Directors    []ServiceVclDirector   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains         []ServiceVclDomain         `pulumi:"domains"`
	Dynamicsnippets []ServiceVclDynamicsnippet `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           *bool                            `pulumi:"forceDestroy"`
	Gzips                  []ServiceVclGzip                 `pulumi:"gzips"`
	Headers                []ServiceVclHeader               `pulumi:"headers"`
	Healthchecks           []ServiceVclHealthcheck          `pulumi:"healthchecks"`
	LoggingBigqueries      []ServiceVclLoggingBigquery      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    []ServiceVclLoggingBlobstorage   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      []ServiceVclLoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []ServiceVclLoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []ServiceVclLoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []ServiceVclLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []ServiceVclLoggingFtp           `pulumi:"loggingFtps"`
	LoggingGcs             []ServiceVclLoggingGc            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   []ServiceVclLoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHerokus         []ServiceVclLoggingHerokus       `pulumi:"loggingHerokus"`
	LoggingHoneycombs      []ServiceVclLoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingHttps           []ServiceVclLoggingHttp          `pulumi:"loggingHttps"`
	LoggingKafkas          []ServiceVclLoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []ServiceVclLoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogentries      []ServiceVclLoggingLogentry      `pulumi:"loggingLogentries"`
	LoggingLogglies        []ServiceVclLoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []ServiceVclLoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []ServiceVclLoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []ServiceVclLoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     []ServiceVclLoggingPapertrail    `pulumi:"loggingPapertrails"`
	LoggingS3s             []ServiceVclLoggingS3            `pulumi:"loggingS3s"`
	LoggingScalyrs         []ServiceVclLoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []ServiceVclLoggingSftp          `pulumi:"loggingSftps"`
	LoggingSplunks         []ServiceVclLoggingSplunk        `pulumi:"loggingSplunks"`
	LoggingSumologics      []ServiceVclLoggingSumologic     `pulumi:"loggingSumologics"`
	LoggingSyslogs         []ServiceVclLoggingSyslog        `pulumi:"loggingSyslogs"`
	// The unique name for the Service to create
	Name            *string                    `pulumi:"name"`
	RequestSettings []ServiceVclRequestSetting `pulumi:"requestSettings"`
	ResponseObjects []ServiceVclResponseObject `pulumi:"responseObjects"`
	Snippets        []ServiceVclSnippet        `pulumi:"snippets"`
	// Enables serving a stale object if there is an error
	StaleIfError *bool `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl *int            `pulumi:"staleIfErrorTtl"`
	Vcls            []ServiceVclVcl `pulumi:"vcls"`
	// Description field for the version
	VersionComment *string        `pulumi:"versionComment"`
	Waf            *ServiceVclWaf `pulumi:"waf"`
}

type ServiceVclState struct {
	Acls ServiceVclAclArrayInput
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate pulumi.BoolPtrInput
	// The currently active version of your Fastly Service
	ActiveVersion pulumi.IntPtrInput
	Backends      ServiceVclBackendArrayInput
	CacheSettings ServiceVclCacheSettingArrayInput
	// The latest cloned version by the provider
	ClonedVersion pulumi.IntPtrInput
	// Description field for the service. Default `Managed by Terraform`
	Comment    pulumi.StringPtrInput
	Conditions ServiceVclConditionArrayInput
	// The default hostname
	DefaultHost pulumi.StringPtrInput
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrInput
	Dictionaries ServiceVclDictionaryArrayInput
	Directors    ServiceVclDirectorArrayInput
	// A set of Domain names to serve as entry points for your Service
	Domains         ServiceVclDomainArrayInput
	Dynamicsnippets ServiceVclDynamicsnippetArrayInput
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrInput
	Gzips                  ServiceVclGzipArrayInput
	Headers                ServiceVclHeaderArrayInput
	Healthchecks           ServiceVclHealthcheckArrayInput
	LoggingBigqueries      ServiceVclLoggingBigqueryArrayInput
	LoggingBlobstorages    ServiceVclLoggingBlobstorageArrayInput
	LoggingCloudfiles      ServiceVclLoggingCloudfileArrayInput
	LoggingDatadogs        ServiceVclLoggingDatadogArrayInput
	LoggingDigitaloceans   ServiceVclLoggingDigitaloceanArrayInput
	LoggingElasticsearches ServiceVclLoggingElasticsearchArrayInput
	LoggingFtps            ServiceVclLoggingFtpArrayInput
	LoggingGcs             ServiceVclLoggingGcArrayInput
	LoggingGooglepubsubs   ServiceVclLoggingGooglepubsubArrayInput
	LoggingHerokus         ServiceVclLoggingHerokusArrayInput
	LoggingHoneycombs      ServiceVclLoggingHoneycombArrayInput
	LoggingHttps           ServiceVclLoggingHttpArrayInput
	LoggingKafkas          ServiceVclLoggingKafkaArrayInput
	LoggingKineses         ServiceVclLoggingKineseArrayInput
	LoggingLogentries      ServiceVclLoggingLogentryArrayInput
	LoggingLogglies        ServiceVclLoggingLogglyArrayInput
	LoggingLogshuttles     ServiceVclLoggingLogshuttleArrayInput
	LoggingNewrelics       ServiceVclLoggingNewrelicArrayInput
	LoggingOpenstacks      ServiceVclLoggingOpenstackArrayInput
	LoggingPapertrails     ServiceVclLoggingPapertrailArrayInput
	LoggingS3s             ServiceVclLoggingS3ArrayInput
	LoggingScalyrs         ServiceVclLoggingScalyrArrayInput
	LoggingSftps           ServiceVclLoggingSftpArrayInput
	LoggingSplunks         ServiceVclLoggingSplunkArrayInput
	LoggingSumologics      ServiceVclLoggingSumologicArrayInput
	LoggingSyslogs         ServiceVclLoggingSyslogArrayInput
	// The unique name for the Service to create
	Name            pulumi.StringPtrInput
	RequestSettings ServiceVclRequestSettingArrayInput
	ResponseObjects ServiceVclResponseObjectArrayInput
	Snippets        ServiceVclSnippetArrayInput
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrInput
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrInput
	Vcls            ServiceVclVclArrayInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
	Waf            ServiceVclWafPtrInput
}

func (ServiceVclState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceVclState)(nil)).Elem()
}

type serviceVclArgs struct {
	Acls []ServiceVclAcl `pulumi:"acls"`
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate      *bool                    `pulumi:"activate"`
	Backends      []ServiceVclBackend      `pulumi:"backends"`
	CacheSettings []ServiceVclCacheSetting `pulumi:"cacheSettings"`
	// Description field for the service. Default `Managed by Terraform`
	Comment    *string               `pulumi:"comment"`
	Conditions []ServiceVclCondition `pulumi:"conditions"`
	// The default hostname
	DefaultHost *string `pulumi:"defaultHost"`
	// The default Time-to-live (TTL) for requests
	DefaultTtl   *int                   `pulumi:"defaultTtl"`
	Dictionaries []ServiceVclDictionary `pulumi:"dictionaries"`
	Directors    []ServiceVclDirector   `pulumi:"directors"`
	// A set of Domain names to serve as entry points for your Service
	Domains         []ServiceVclDomain         `pulumi:"domains"`
	Dynamicsnippets []ServiceVclDynamicsnippet `pulumi:"dynamicsnippets"`
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           *bool                            `pulumi:"forceDestroy"`
	Gzips                  []ServiceVclGzip                 `pulumi:"gzips"`
	Headers                []ServiceVclHeader               `pulumi:"headers"`
	Healthchecks           []ServiceVclHealthcheck          `pulumi:"healthchecks"`
	LoggingBigqueries      []ServiceVclLoggingBigquery      `pulumi:"loggingBigqueries"`
	LoggingBlobstorages    []ServiceVclLoggingBlobstorage   `pulumi:"loggingBlobstorages"`
	LoggingCloudfiles      []ServiceVclLoggingCloudfile     `pulumi:"loggingCloudfiles"`
	LoggingDatadogs        []ServiceVclLoggingDatadog       `pulumi:"loggingDatadogs"`
	LoggingDigitaloceans   []ServiceVclLoggingDigitalocean  `pulumi:"loggingDigitaloceans"`
	LoggingElasticsearches []ServiceVclLoggingElasticsearch `pulumi:"loggingElasticsearches"`
	LoggingFtps            []ServiceVclLoggingFtp           `pulumi:"loggingFtps"`
	LoggingGcs             []ServiceVclLoggingGc            `pulumi:"loggingGcs"`
	LoggingGooglepubsubs   []ServiceVclLoggingGooglepubsub  `pulumi:"loggingGooglepubsubs"`
	LoggingHerokus         []ServiceVclLoggingHerokus       `pulumi:"loggingHerokus"`
	LoggingHoneycombs      []ServiceVclLoggingHoneycomb     `pulumi:"loggingHoneycombs"`
	LoggingHttps           []ServiceVclLoggingHttp          `pulumi:"loggingHttps"`
	LoggingKafkas          []ServiceVclLoggingKafka         `pulumi:"loggingKafkas"`
	LoggingKineses         []ServiceVclLoggingKinese        `pulumi:"loggingKineses"`
	LoggingLogentries      []ServiceVclLoggingLogentry      `pulumi:"loggingLogentries"`
	LoggingLogglies        []ServiceVclLoggingLoggly        `pulumi:"loggingLogglies"`
	LoggingLogshuttles     []ServiceVclLoggingLogshuttle    `pulumi:"loggingLogshuttles"`
	LoggingNewrelics       []ServiceVclLoggingNewrelic      `pulumi:"loggingNewrelics"`
	LoggingOpenstacks      []ServiceVclLoggingOpenstack     `pulumi:"loggingOpenstacks"`
	LoggingPapertrails     []ServiceVclLoggingPapertrail    `pulumi:"loggingPapertrails"`
	LoggingS3s             []ServiceVclLoggingS3            `pulumi:"loggingS3s"`
	LoggingScalyrs         []ServiceVclLoggingScalyr        `pulumi:"loggingScalyrs"`
	LoggingSftps           []ServiceVclLoggingSftp          `pulumi:"loggingSftps"`
	LoggingSplunks         []ServiceVclLoggingSplunk        `pulumi:"loggingSplunks"`
	LoggingSumologics      []ServiceVclLoggingSumologic     `pulumi:"loggingSumologics"`
	LoggingSyslogs         []ServiceVclLoggingSyslog        `pulumi:"loggingSyslogs"`
	// The unique name for the Service to create
	Name            *string                    `pulumi:"name"`
	RequestSettings []ServiceVclRequestSetting `pulumi:"requestSettings"`
	ResponseObjects []ServiceVclResponseObject `pulumi:"responseObjects"`
	Snippets        []ServiceVclSnippet        `pulumi:"snippets"`
	// Enables serving a stale object if there is an error
	StaleIfError *bool `pulumi:"staleIfError"`
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl *int            `pulumi:"staleIfErrorTtl"`
	Vcls            []ServiceVclVcl `pulumi:"vcls"`
	// Description field for the version
	VersionComment *string        `pulumi:"versionComment"`
	Waf            *ServiceVclWaf `pulumi:"waf"`
}

// The set of arguments for constructing a ServiceVcl resource.
type ServiceVclArgs struct {
	Acls ServiceVclAclArrayInput
	// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to `false`. Default `true`
	Activate      pulumi.BoolPtrInput
	Backends      ServiceVclBackendArrayInput
	CacheSettings ServiceVclCacheSettingArrayInput
	// Description field for the service. Default `Managed by Terraform`
	Comment    pulumi.StringPtrInput
	Conditions ServiceVclConditionArrayInput
	// The default hostname
	DefaultHost pulumi.StringPtrInput
	// The default Time-to-live (TTL) for requests
	DefaultTtl   pulumi.IntPtrInput
	Dictionaries ServiceVclDictionaryArrayInput
	Directors    ServiceVclDirectorArrayInput
	// A set of Domain names to serve as entry points for your Service
	Domains         ServiceVclDomainArrayInput
	Dynamicsnippets ServiceVclDynamicsnippetArrayInput
	// Services that are active cannot be destroyed. In order to destroy the Service, set `forceDestroy` to `true`. Default `false`
	ForceDestroy           pulumi.BoolPtrInput
	Gzips                  ServiceVclGzipArrayInput
	Headers                ServiceVclHeaderArrayInput
	Healthchecks           ServiceVclHealthcheckArrayInput
	LoggingBigqueries      ServiceVclLoggingBigqueryArrayInput
	LoggingBlobstorages    ServiceVclLoggingBlobstorageArrayInput
	LoggingCloudfiles      ServiceVclLoggingCloudfileArrayInput
	LoggingDatadogs        ServiceVclLoggingDatadogArrayInput
	LoggingDigitaloceans   ServiceVclLoggingDigitaloceanArrayInput
	LoggingElasticsearches ServiceVclLoggingElasticsearchArrayInput
	LoggingFtps            ServiceVclLoggingFtpArrayInput
	LoggingGcs             ServiceVclLoggingGcArrayInput
	LoggingGooglepubsubs   ServiceVclLoggingGooglepubsubArrayInput
	LoggingHerokus         ServiceVclLoggingHerokusArrayInput
	LoggingHoneycombs      ServiceVclLoggingHoneycombArrayInput
	LoggingHttps           ServiceVclLoggingHttpArrayInput
	LoggingKafkas          ServiceVclLoggingKafkaArrayInput
	LoggingKineses         ServiceVclLoggingKineseArrayInput
	LoggingLogentries      ServiceVclLoggingLogentryArrayInput
	LoggingLogglies        ServiceVclLoggingLogglyArrayInput
	LoggingLogshuttles     ServiceVclLoggingLogshuttleArrayInput
	LoggingNewrelics       ServiceVclLoggingNewrelicArrayInput
	LoggingOpenstacks      ServiceVclLoggingOpenstackArrayInput
	LoggingPapertrails     ServiceVclLoggingPapertrailArrayInput
	LoggingS3s             ServiceVclLoggingS3ArrayInput
	LoggingScalyrs         ServiceVclLoggingScalyrArrayInput
	LoggingSftps           ServiceVclLoggingSftpArrayInput
	LoggingSplunks         ServiceVclLoggingSplunkArrayInput
	LoggingSumologics      ServiceVclLoggingSumologicArrayInput
	LoggingSyslogs         ServiceVclLoggingSyslogArrayInput
	// The unique name for the Service to create
	Name            pulumi.StringPtrInput
	RequestSettings ServiceVclRequestSettingArrayInput
	ResponseObjects ServiceVclResponseObjectArrayInput
	Snippets        ServiceVclSnippetArrayInput
	// Enables serving a stale object if there is an error
	StaleIfError pulumi.BoolPtrInput
	// The default time-to-live (TTL) for serving the stale object for the version
	StaleIfErrorTtl pulumi.IntPtrInput
	Vcls            ServiceVclVclArrayInput
	// Description field for the version
	VersionComment pulumi.StringPtrInput
	Waf            ServiceVclWafPtrInput
}

func (ServiceVclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceVclArgs)(nil)).Elem()
}

type ServiceVclInput interface {
	pulumi.Input

	ToServiceVclOutput() ServiceVclOutput
	ToServiceVclOutputWithContext(ctx context.Context) ServiceVclOutput
}

func (*ServiceVcl) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVcl)(nil)).Elem()
}

func (i *ServiceVcl) ToServiceVclOutput() ServiceVclOutput {
	return i.ToServiceVclOutputWithContext(context.Background())
}

func (i *ServiceVcl) ToServiceVclOutputWithContext(ctx context.Context) ServiceVclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclOutput)
}

// ServiceVclArrayInput is an input type that accepts ServiceVclArray and ServiceVclArrayOutput values.
// You can construct a concrete instance of `ServiceVclArrayInput` via:
//
//          ServiceVclArray{ ServiceVclArgs{...} }
type ServiceVclArrayInput interface {
	pulumi.Input

	ToServiceVclArrayOutput() ServiceVclArrayOutput
	ToServiceVclArrayOutputWithContext(context.Context) ServiceVclArrayOutput
}

type ServiceVclArray []ServiceVclInput

func (ServiceVclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceVcl)(nil)).Elem()
}

func (i ServiceVclArray) ToServiceVclArrayOutput() ServiceVclArrayOutput {
	return i.ToServiceVclArrayOutputWithContext(context.Background())
}

func (i ServiceVclArray) ToServiceVclArrayOutputWithContext(ctx context.Context) ServiceVclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclArrayOutput)
}

// ServiceVclMapInput is an input type that accepts ServiceVclMap and ServiceVclMapOutput values.
// You can construct a concrete instance of `ServiceVclMapInput` via:
//
//          ServiceVclMap{ "key": ServiceVclArgs{...} }
type ServiceVclMapInput interface {
	pulumi.Input

	ToServiceVclMapOutput() ServiceVclMapOutput
	ToServiceVclMapOutputWithContext(context.Context) ServiceVclMapOutput
}

type ServiceVclMap map[string]ServiceVclInput

func (ServiceVclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceVcl)(nil)).Elem()
}

func (i ServiceVclMap) ToServiceVclMapOutput() ServiceVclMapOutput {
	return i.ToServiceVclMapOutputWithContext(context.Background())
}

func (i ServiceVclMap) ToServiceVclMapOutputWithContext(ctx context.Context) ServiceVclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceVclMapOutput)
}

type ServiceVclOutput struct{ *pulumi.OutputState }

func (ServiceVclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceVcl)(nil)).Elem()
}

func (o ServiceVclOutput) ToServiceVclOutput() ServiceVclOutput {
	return o
}

func (o ServiceVclOutput) ToServiceVclOutputWithContext(ctx context.Context) ServiceVclOutput {
	return o
}

type ServiceVclArrayOutput struct{ *pulumi.OutputState }

func (ServiceVclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceVcl)(nil)).Elem()
}

func (o ServiceVclArrayOutput) ToServiceVclArrayOutput() ServiceVclArrayOutput {
	return o
}

func (o ServiceVclArrayOutput) ToServiceVclArrayOutputWithContext(ctx context.Context) ServiceVclArrayOutput {
	return o
}

func (o ServiceVclArrayOutput) Index(i pulumi.IntInput) ServiceVclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceVcl {
		return vs[0].([]*ServiceVcl)[vs[1].(int)]
	}).(ServiceVclOutput)
}

type ServiceVclMapOutput struct{ *pulumi.OutputState }

func (ServiceVclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceVcl)(nil)).Elem()
}

func (o ServiceVclMapOutput) ToServiceVclMapOutput() ServiceVclMapOutput {
	return o
}

func (o ServiceVclMapOutput) ToServiceVclMapOutputWithContext(ctx context.Context) ServiceVclMapOutput {
	return o
}

func (o ServiceVclMapOutput) MapIndex(k pulumi.StringInput) ServiceVclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceVcl {
		return vs[0].(map[string]*ServiceVcl)[vs[1].(string)]
	}).(ServiceVclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclInput)(nil)).Elem(), &ServiceVcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclArrayInput)(nil)).Elem(), ServiceVclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceVclMapInput)(nil)).Elem(), ServiceVclMap{})
	pulumi.RegisterOutputType(ServiceVclOutput{})
	pulumi.RegisterOutputType(ServiceVclArrayOutput{})
	pulumi.RegisterOutputType(ServiceVclMapOutput{})
}
