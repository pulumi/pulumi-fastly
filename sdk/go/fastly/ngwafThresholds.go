// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Next-Gen WAF Threshold.  Operations related to managing workspace thresholds.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafThresholds(ctx, "demo", &fastly.NgwafThresholdsArgs{
//				Action:      pulumi.String("block"),
//				DontNotify:  pulumi.Bool(false),
//				Duration:    pulumi.Int(86400),
//				Enabled:     pulumi.Bool(true),
//				Interval:    pulumi.Int(3600),
//				Limit:       pulumi.Int(10),
//				Name:        pulumi.String("%s"),
//				Signal:      pulumi.String("SQLI"),
//				WorkspaceId: pulumi.Any(example.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF Thresholds can be imported using their workspace and Threshold ID, e.g.
//
// ```sh
// $ pulumi import fastly:index/ngwafThresholds:NgwafThresholds example <workspace_id>/<threshold_id>
// ```
type NgwafThresholds struct {
	pulumi.CustomResourceState

	// Action to take when threshold is exceeded.
	Action pulumi.StringOutput `pulumi:"action"`
	// Whether to silence notifications when action is taken.
	DontNotify pulumi.BoolOutput `pulumi:"dontNotify"`
	// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
	Duration pulumi.IntOutput `pulumi:"duration"`
	// Whether this threshold is active.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
	Interval pulumi.IntOutput `pulumi:"interval"`
	// Threshold limit. Minimum 1 and maximum 10,000.
	Limit pulumi.IntOutput `pulumi:"limit"`
	// The name of the threshold.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the signal this threshold is acting on.
	Signal pulumi.StringOutput `pulumi:"signal"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafThresholds registers a new resource with the given unique name, arguments, and options.
func NewNgwafThresholds(ctx *pulumi.Context,
	name string, args *NgwafThresholdsArgs, opts ...pulumi.ResourceOption) (*NgwafThresholds, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.DontNotify == nil {
		return nil, errors.New("invalid value for required argument 'DontNotify'")
	}
	if args.Duration == nil {
		return nil, errors.New("invalid value for required argument 'Duration'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.Limit == nil {
		return nil, errors.New("invalid value for required argument 'Limit'")
	}
	if args.Signal == nil {
		return nil, errors.New("invalid value for required argument 'Signal'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafThresholds
	err := ctx.RegisterResource("fastly:index/ngwafThresholds:NgwafThresholds", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafThresholds gets an existing NgwafThresholds resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafThresholds(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafThresholdsState, opts ...pulumi.ResourceOption) (*NgwafThresholds, error) {
	var resource NgwafThresholds
	err := ctx.ReadResource("fastly:index/ngwafThresholds:NgwafThresholds", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafThresholds resources.
type ngwafThresholdsState struct {
	// Action to take when threshold is exceeded.
	Action *string `pulumi:"action"`
	// Whether to silence notifications when action is taken.
	DontNotify *bool `pulumi:"dontNotify"`
	// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
	Duration *int `pulumi:"duration"`
	// Whether this threshold is active.
	Enabled *bool `pulumi:"enabled"`
	// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
	Interval *int `pulumi:"interval"`
	// Threshold limit. Minimum 1 and maximum 10,000.
	Limit *int `pulumi:"limit"`
	// The name of the threshold.
	Name *string `pulumi:"name"`
	// The name of the signal this threshold is acting on.
	Signal *string `pulumi:"signal"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafThresholdsState struct {
	// Action to take when threshold is exceeded.
	Action pulumi.StringPtrInput
	// Whether to silence notifications when action is taken.
	DontNotify pulumi.BoolPtrInput
	// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
	Duration pulumi.IntPtrInput
	// Whether this threshold is active.
	Enabled pulumi.BoolPtrInput
	// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
	Interval pulumi.IntPtrInput
	// Threshold limit. Minimum 1 and maximum 10,000.
	Limit pulumi.IntPtrInput
	// The name of the threshold.
	Name pulumi.StringPtrInput
	// The name of the signal this threshold is acting on.
	Signal pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafThresholdsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafThresholdsState)(nil)).Elem()
}

type ngwafThresholdsArgs struct {
	// Action to take when threshold is exceeded.
	Action string `pulumi:"action"`
	// Whether to silence notifications when action is taken.
	DontNotify bool `pulumi:"dontNotify"`
	// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
	Duration int `pulumi:"duration"`
	// Whether this threshold is active.
	Enabled bool `pulumi:"enabled"`
	// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
	Interval int `pulumi:"interval"`
	// Threshold limit. Minimum 1 and maximum 10,000.
	Limit int `pulumi:"limit"`
	// The name of the threshold.
	Name *string `pulumi:"name"`
	// The name of the signal this threshold is acting on.
	Signal string `pulumi:"signal"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafThresholds resource.
type NgwafThresholdsArgs struct {
	// Action to take when threshold is exceeded.
	Action pulumi.StringInput
	// Whether to silence notifications when action is taken.
	DontNotify pulumi.BoolInput
	// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
	Duration pulumi.IntInput
	// Whether this threshold is active.
	Enabled pulumi.BoolInput
	// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
	Interval pulumi.IntInput
	// Threshold limit. Minimum 1 and maximum 10,000.
	Limit pulumi.IntInput
	// The name of the threshold.
	Name pulumi.StringPtrInput
	// The name of the signal this threshold is acting on.
	Signal pulumi.StringInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (NgwafThresholdsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafThresholdsArgs)(nil)).Elem()
}

type NgwafThresholdsInput interface {
	pulumi.Input

	ToNgwafThresholdsOutput() NgwafThresholdsOutput
	ToNgwafThresholdsOutputWithContext(ctx context.Context) NgwafThresholdsOutput
}

func (*NgwafThresholds) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafThresholds)(nil)).Elem()
}

func (i *NgwafThresholds) ToNgwafThresholdsOutput() NgwafThresholdsOutput {
	return i.ToNgwafThresholdsOutputWithContext(context.Background())
}

func (i *NgwafThresholds) ToNgwafThresholdsOutputWithContext(ctx context.Context) NgwafThresholdsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafThresholdsOutput)
}

// NgwafThresholdsArrayInput is an input type that accepts NgwafThresholdsArray and NgwafThresholdsArrayOutput values.
// You can construct a concrete instance of `NgwafThresholdsArrayInput` via:
//
//	NgwafThresholdsArray{ NgwafThresholdsArgs{...} }
type NgwafThresholdsArrayInput interface {
	pulumi.Input

	ToNgwafThresholdsArrayOutput() NgwafThresholdsArrayOutput
	ToNgwafThresholdsArrayOutputWithContext(context.Context) NgwafThresholdsArrayOutput
}

type NgwafThresholdsArray []NgwafThresholdsInput

func (NgwafThresholdsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafThresholds)(nil)).Elem()
}

func (i NgwafThresholdsArray) ToNgwafThresholdsArrayOutput() NgwafThresholdsArrayOutput {
	return i.ToNgwafThresholdsArrayOutputWithContext(context.Background())
}

func (i NgwafThresholdsArray) ToNgwafThresholdsArrayOutputWithContext(ctx context.Context) NgwafThresholdsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafThresholdsArrayOutput)
}

// NgwafThresholdsMapInput is an input type that accepts NgwafThresholdsMap and NgwafThresholdsMapOutput values.
// You can construct a concrete instance of `NgwafThresholdsMapInput` via:
//
//	NgwafThresholdsMap{ "key": NgwafThresholdsArgs{...} }
type NgwafThresholdsMapInput interface {
	pulumi.Input

	ToNgwafThresholdsMapOutput() NgwafThresholdsMapOutput
	ToNgwafThresholdsMapOutputWithContext(context.Context) NgwafThresholdsMapOutput
}

type NgwafThresholdsMap map[string]NgwafThresholdsInput

func (NgwafThresholdsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafThresholds)(nil)).Elem()
}

func (i NgwafThresholdsMap) ToNgwafThresholdsMapOutput() NgwafThresholdsMapOutput {
	return i.ToNgwafThresholdsMapOutputWithContext(context.Background())
}

func (i NgwafThresholdsMap) ToNgwafThresholdsMapOutputWithContext(ctx context.Context) NgwafThresholdsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafThresholdsMapOutput)
}

type NgwafThresholdsOutput struct{ *pulumi.OutputState }

func (NgwafThresholdsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafThresholds)(nil)).Elem()
}

func (o NgwafThresholdsOutput) ToNgwafThresholdsOutput() NgwafThresholdsOutput {
	return o
}

func (o NgwafThresholdsOutput) ToNgwafThresholdsOutputWithContext(ctx context.Context) NgwafThresholdsOutput {
	return o
}

// Action to take when threshold is exceeded.
func (o NgwafThresholdsOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Whether to silence notifications when action is taken.
func (o NgwafThresholdsOutput) DontNotify() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.BoolOutput { return v.DontNotify }).(pulumi.BoolOutput)
}

// Duration the action is in place, in seconds. Minimum 1 and maximum 31,556,900.
func (o NgwafThresholdsOutput) Duration() pulumi.IntOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.IntOutput { return v.Duration }).(pulumi.IntOutput)
}

// Whether this threshold is active.
func (o NgwafThresholdsOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Threshold interval in seconds. Accepted values are `60`, `600`, and `3600`.
func (o NgwafThresholdsOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// Threshold limit. Minimum 1 and maximum 10,000.
func (o NgwafThresholdsOutput) Limit() pulumi.IntOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.IntOutput { return v.Limit }).(pulumi.IntOutput)
}

// The name of the threshold.
func (o NgwafThresholdsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the signal this threshold is acting on.
func (o NgwafThresholdsOutput) Signal() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.StringOutput { return v.Signal }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o NgwafThresholdsOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafThresholds) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafThresholdsArrayOutput struct{ *pulumi.OutputState }

func (NgwafThresholdsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafThresholds)(nil)).Elem()
}

func (o NgwafThresholdsArrayOutput) ToNgwafThresholdsArrayOutput() NgwafThresholdsArrayOutput {
	return o
}

func (o NgwafThresholdsArrayOutput) ToNgwafThresholdsArrayOutputWithContext(ctx context.Context) NgwafThresholdsArrayOutput {
	return o
}

func (o NgwafThresholdsArrayOutput) Index(i pulumi.IntInput) NgwafThresholdsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafThresholds {
		return vs[0].([]*NgwafThresholds)[vs[1].(int)]
	}).(NgwafThresholdsOutput)
}

type NgwafThresholdsMapOutput struct{ *pulumi.OutputState }

func (NgwafThresholdsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafThresholds)(nil)).Elem()
}

func (o NgwafThresholdsMapOutput) ToNgwafThresholdsMapOutput() NgwafThresholdsMapOutput {
	return o
}

func (o NgwafThresholdsMapOutput) ToNgwafThresholdsMapOutputWithContext(ctx context.Context) NgwafThresholdsMapOutput {
	return o
}

func (o NgwafThresholdsMapOutput) MapIndex(k pulumi.StringInput) NgwafThresholdsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafThresholds {
		return vs[0].(map[string]*NgwafThresholds)[vs[1].(string)]
	}).(NgwafThresholdsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafThresholdsInput)(nil)).Elem(), &NgwafThresholds{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafThresholdsArrayInput)(nil)).Elem(), NgwafThresholdsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafThresholdsMapInput)(nil)).Elem(), NgwafThresholdsMap{})
	pulumi.RegisterOutputType(NgwafThresholdsOutput{})
	pulumi.RegisterOutputType(NgwafThresholdsArrayOutput{})
	pulumi.RegisterOutputType(NgwafThresholdsMapOutput{})
}
