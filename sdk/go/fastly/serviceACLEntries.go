// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// This is an example of the import command being applied to the resource named `fastly_service_acl_entries.entries`
//
// The resource ID is a combined value of the `service_id` and `acl_id` separated by a forward slash.
//
// ```sh
// $ pulumi import fastly:index/serviceACLEntries:ServiceACLEntries entries xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
// ```
//
// If Terraform is already managing remote acl entries against a resource being imported then the user will be asked to remove it from the existing Terraform state.
//
// The following is an example of the Terraform state command to remove the resource named `fastly_service_acl_entries.entries` from the Terraform state file.
//
// $ terraform state rm fastly_service_acl_entries.entries
type ServiceACLEntries struct {
	pulumi.CustomResourceState

	// The ID of the ACL that the items belong to
	AclId pulumi.StringOutput `pulumi:"aclId"`
	// ACL Entries
	Entries ServiceACLEntriesEntryArrayOutput `pulumi:"entries"`
	// Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
	ManageEntries pulumi.BoolPtrOutput `pulumi:"manageEntries"`
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewServiceACLEntries registers a new resource with the given unique name, arguments, and options.
func NewServiceACLEntries(ctx *pulumi.Context,
	name string, args *ServiceACLEntriesArgs, opts ...pulumi.ResourceOption) (*ServiceACLEntries, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclId == nil {
		return nil, errors.New("invalid value for required argument 'AclId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceACLEntries
	err := ctx.RegisterResource("fastly:index/serviceACLEntries:ServiceACLEntries", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceACLEntries gets an existing ServiceACLEntries resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceACLEntries(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceACLEntriesState, opts ...pulumi.ResourceOption) (*ServiceACLEntries, error) {
	var resource ServiceACLEntries
	err := ctx.ReadResource("fastly:index/serviceACLEntries:ServiceACLEntries", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceACLEntries resources.
type serviceACLEntriesState struct {
	// The ID of the ACL that the items belong to
	AclId *string `pulumi:"aclId"`
	// ACL Entries
	Entries []ServiceACLEntriesEntry `pulumi:"entries"`
	// Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
	ManageEntries *bool `pulumi:"manageEntries"`
	// The ID of the Service that the ACL belongs to
	ServiceId *string `pulumi:"serviceId"`
}

type ServiceACLEntriesState struct {
	// The ID of the ACL that the items belong to
	AclId pulumi.StringPtrInput
	// ACL Entries
	Entries ServiceACLEntriesEntryArrayInput
	// Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
	ManageEntries pulumi.BoolPtrInput
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringPtrInput
}

func (ServiceACLEntriesState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceACLEntriesState)(nil)).Elem()
}

type serviceACLEntriesArgs struct {
	// The ID of the ACL that the items belong to
	AclId string `pulumi:"aclId"`
	// ACL Entries
	Entries []ServiceACLEntriesEntry `pulumi:"entries"`
	// Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
	ManageEntries *bool `pulumi:"manageEntries"`
	// The ID of the Service that the ACL belongs to
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a ServiceACLEntries resource.
type ServiceACLEntriesArgs struct {
	// The ID of the ACL that the items belong to
	AclId pulumi.StringInput
	// ACL Entries
	Entries ServiceACLEntriesEntryArrayInput
	// Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
	ManageEntries pulumi.BoolPtrInput
	// The ID of the Service that the ACL belongs to
	ServiceId pulumi.StringInput
}

func (ServiceACLEntriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceACLEntriesArgs)(nil)).Elem()
}

type ServiceACLEntriesInput interface {
	pulumi.Input

	ToServiceACLEntriesOutput() ServiceACLEntriesOutput
	ToServiceACLEntriesOutputWithContext(ctx context.Context) ServiceACLEntriesOutput
}

func (*ServiceACLEntries) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceACLEntries)(nil)).Elem()
}

func (i *ServiceACLEntries) ToServiceACLEntriesOutput() ServiceACLEntriesOutput {
	return i.ToServiceACLEntriesOutputWithContext(context.Background())
}

func (i *ServiceACLEntries) ToServiceACLEntriesOutputWithContext(ctx context.Context) ServiceACLEntriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesOutput)
}

// ServiceACLEntriesArrayInput is an input type that accepts ServiceACLEntriesArray and ServiceACLEntriesArrayOutput values.
// You can construct a concrete instance of `ServiceACLEntriesArrayInput` via:
//
//	ServiceACLEntriesArray{ ServiceACLEntriesArgs{...} }
type ServiceACLEntriesArrayInput interface {
	pulumi.Input

	ToServiceACLEntriesArrayOutput() ServiceACLEntriesArrayOutput
	ToServiceACLEntriesArrayOutputWithContext(context.Context) ServiceACLEntriesArrayOutput
}

type ServiceACLEntriesArray []ServiceACLEntriesInput

func (ServiceACLEntriesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceACLEntries)(nil)).Elem()
}

func (i ServiceACLEntriesArray) ToServiceACLEntriesArrayOutput() ServiceACLEntriesArrayOutput {
	return i.ToServiceACLEntriesArrayOutputWithContext(context.Background())
}

func (i ServiceACLEntriesArray) ToServiceACLEntriesArrayOutputWithContext(ctx context.Context) ServiceACLEntriesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesArrayOutput)
}

// ServiceACLEntriesMapInput is an input type that accepts ServiceACLEntriesMap and ServiceACLEntriesMapOutput values.
// You can construct a concrete instance of `ServiceACLEntriesMapInput` via:
//
//	ServiceACLEntriesMap{ "key": ServiceACLEntriesArgs{...} }
type ServiceACLEntriesMapInput interface {
	pulumi.Input

	ToServiceACLEntriesMapOutput() ServiceACLEntriesMapOutput
	ToServiceACLEntriesMapOutputWithContext(context.Context) ServiceACLEntriesMapOutput
}

type ServiceACLEntriesMap map[string]ServiceACLEntriesInput

func (ServiceACLEntriesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceACLEntries)(nil)).Elem()
}

func (i ServiceACLEntriesMap) ToServiceACLEntriesMapOutput() ServiceACLEntriesMapOutput {
	return i.ToServiceACLEntriesMapOutputWithContext(context.Background())
}

func (i ServiceACLEntriesMap) ToServiceACLEntriesMapOutputWithContext(ctx context.Context) ServiceACLEntriesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesMapOutput)
}

type ServiceACLEntriesOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceACLEntries)(nil)).Elem()
}

func (o ServiceACLEntriesOutput) ToServiceACLEntriesOutput() ServiceACLEntriesOutput {
	return o
}

func (o ServiceACLEntriesOutput) ToServiceACLEntriesOutputWithContext(ctx context.Context) ServiceACLEntriesOutput {
	return o
}

// The ID of the ACL that the items belong to
func (o ServiceACLEntriesOutput) AclId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceACLEntries) pulumi.StringOutput { return v.AclId }).(pulumi.StringOutput)
}

// ACL Entries
func (o ServiceACLEntriesOutput) Entries() ServiceACLEntriesEntryArrayOutput {
	return o.ApplyT(func(v *ServiceACLEntries) ServiceACLEntriesEntryArrayOutput { return v.Entries }).(ServiceACLEntriesEntryArrayOutput)
}

// Whether to reapply changes if the state of the entries drifts, i.e. if entries are managed externally
func (o ServiceACLEntriesOutput) ManageEntries() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceACLEntries) pulumi.BoolPtrOutput { return v.ManageEntries }).(pulumi.BoolPtrOutput)
}

// The ID of the Service that the ACL belongs to
func (o ServiceACLEntriesOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceACLEntries) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type ServiceACLEntriesArrayOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceACLEntries)(nil)).Elem()
}

func (o ServiceACLEntriesArrayOutput) ToServiceACLEntriesArrayOutput() ServiceACLEntriesArrayOutput {
	return o
}

func (o ServiceACLEntriesArrayOutput) ToServiceACLEntriesArrayOutputWithContext(ctx context.Context) ServiceACLEntriesArrayOutput {
	return o
}

func (o ServiceACLEntriesArrayOutput) Index(i pulumi.IntInput) ServiceACLEntriesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceACLEntries {
		return vs[0].([]*ServiceACLEntries)[vs[1].(int)]
	}).(ServiceACLEntriesOutput)
}

type ServiceACLEntriesMapOutput struct{ *pulumi.OutputState }

func (ServiceACLEntriesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceACLEntries)(nil)).Elem()
}

func (o ServiceACLEntriesMapOutput) ToServiceACLEntriesMapOutput() ServiceACLEntriesMapOutput {
	return o
}

func (o ServiceACLEntriesMapOutput) ToServiceACLEntriesMapOutputWithContext(ctx context.Context) ServiceACLEntriesMapOutput {
	return o
}

func (o ServiceACLEntriesMapOutput) MapIndex(k pulumi.StringInput) ServiceACLEntriesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceACLEntries {
		return vs[0].(map[string]*ServiceACLEntries)[vs[1].(string)]
	}).(ServiceACLEntriesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceACLEntriesInput)(nil)).Elem(), &ServiceACLEntries{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceACLEntriesArrayInput)(nil)).Elem(), ServiceACLEntriesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceACLEntriesMapInput)(nil)).Elem(), ServiceACLEntriesMap{})
	pulumi.RegisterOutputType(ServiceACLEntriesOutput{})
	pulumi.RegisterOutputType(ServiceACLEntriesArrayOutput{})
	pulumi.RegisterOutputType(ServiceACLEntriesMapOutput{})
}
