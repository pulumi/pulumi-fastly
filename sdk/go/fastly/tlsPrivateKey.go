// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Uploads a Custom TLS Private Key to Fastly. This can be combined with a `TlsCertificate` resource to provide a TLS Certificate able to be applied to a Fastly Service.
//
// The Private Key resource requires a key in PEM format, and a name to identify it.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly"
//	"github.com/pulumi/pulumi-tls/sdk/v4/go/tls"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			demoPrivateKey, err := tls.NewPrivateKey(ctx, "demoPrivateKey", &tls.PrivateKeyArgs{
//				Algorithm: pulumi.String("RSA"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewTlsPrivateKey(ctx, "demoTlsPrivateKey", &fastly.TlsPrivateKeyArgs{
//				KeyPem: demoPrivateKey.PrivateKeyPem,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// A Private Key can be imported using its ID, e.g.
//
// ```sh
//
//	$ pulumi import fastly:index/tlsPrivateKey:TlsPrivateKey demo xxxxxxxxxxx
//
// ```
type TlsPrivateKey struct {
	pulumi.CustomResourceState

	// Time-stamp (GMT) when the private key was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The key length used to generate the private key.
	KeyLength pulumi.IntOutput `pulumi:"keyLength"`
	// Private key in PEM format.
	KeyPem pulumi.StringOutput `pulumi:"keyPem"`
	// The algorithm used to generate the private key. Must be RSA.
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// Customisable name of the private key.
	Name pulumi.StringOutput `pulumi:"name"`
	// Useful for safely identifying the key.
	PublicKeySha1 pulumi.StringOutput `pulumi:"publicKeySha1"`
	// Whether Fastly recommends replacing this private key.
	Replace pulumi.BoolOutput `pulumi:"replace"`
}

// NewTlsPrivateKey registers a new resource with the given unique name, arguments, and options.
func NewTlsPrivateKey(ctx *pulumi.Context,
	name string, args *TlsPrivateKeyArgs, opts ...pulumi.ResourceOption) (*TlsPrivateKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyPem == nil {
		return nil, errors.New("invalid value for required argument 'KeyPem'")
	}
	if args.KeyPem != nil {
		args.KeyPem = pulumi.ToSecret(args.KeyPem).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"keyPem",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TlsPrivateKey
	err := ctx.RegisterResource("fastly:index/tlsPrivateKey:TlsPrivateKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsPrivateKey gets an existing TlsPrivateKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsPrivateKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsPrivateKeyState, opts ...pulumi.ResourceOption) (*TlsPrivateKey, error) {
	var resource TlsPrivateKey
	err := ctx.ReadResource("fastly:index/tlsPrivateKey:TlsPrivateKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsPrivateKey resources.
type tlsPrivateKeyState struct {
	// Time-stamp (GMT) when the private key was created.
	CreatedAt *string `pulumi:"createdAt"`
	// The key length used to generate the private key.
	KeyLength *int `pulumi:"keyLength"`
	// Private key in PEM format.
	KeyPem *string `pulumi:"keyPem"`
	// The algorithm used to generate the private key. Must be RSA.
	KeyType *string `pulumi:"keyType"`
	// Customisable name of the private key.
	Name *string `pulumi:"name"`
	// Useful for safely identifying the key.
	PublicKeySha1 *string `pulumi:"publicKeySha1"`
	// Whether Fastly recommends replacing this private key.
	Replace *bool `pulumi:"replace"`
}

type TlsPrivateKeyState struct {
	// Time-stamp (GMT) when the private key was created.
	CreatedAt pulumi.StringPtrInput
	// The key length used to generate the private key.
	KeyLength pulumi.IntPtrInput
	// Private key in PEM format.
	KeyPem pulumi.StringPtrInput
	// The algorithm used to generate the private key. Must be RSA.
	KeyType pulumi.StringPtrInput
	// Customisable name of the private key.
	Name pulumi.StringPtrInput
	// Useful for safely identifying the key.
	PublicKeySha1 pulumi.StringPtrInput
	// Whether Fastly recommends replacing this private key.
	Replace pulumi.BoolPtrInput
}

func (TlsPrivateKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsPrivateKeyState)(nil)).Elem()
}

type tlsPrivateKeyArgs struct {
	// Private key in PEM format.
	KeyPem string `pulumi:"keyPem"`
	// Customisable name of the private key.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a TlsPrivateKey resource.
type TlsPrivateKeyArgs struct {
	// Private key in PEM format.
	KeyPem pulumi.StringInput
	// Customisable name of the private key.
	Name pulumi.StringPtrInput
}

func (TlsPrivateKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsPrivateKeyArgs)(nil)).Elem()
}

type TlsPrivateKeyInput interface {
	pulumi.Input

	ToTlsPrivateKeyOutput() TlsPrivateKeyOutput
	ToTlsPrivateKeyOutputWithContext(ctx context.Context) TlsPrivateKeyOutput
}

func (*TlsPrivateKey) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsPrivateKey)(nil)).Elem()
}

func (i *TlsPrivateKey) ToTlsPrivateKeyOutput() TlsPrivateKeyOutput {
	return i.ToTlsPrivateKeyOutputWithContext(context.Background())
}

func (i *TlsPrivateKey) ToTlsPrivateKeyOutputWithContext(ctx context.Context) TlsPrivateKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsPrivateKeyOutput)
}

// TlsPrivateKeyArrayInput is an input type that accepts TlsPrivateKeyArray and TlsPrivateKeyArrayOutput values.
// You can construct a concrete instance of `TlsPrivateKeyArrayInput` via:
//
//	TlsPrivateKeyArray{ TlsPrivateKeyArgs{...} }
type TlsPrivateKeyArrayInput interface {
	pulumi.Input

	ToTlsPrivateKeyArrayOutput() TlsPrivateKeyArrayOutput
	ToTlsPrivateKeyArrayOutputWithContext(context.Context) TlsPrivateKeyArrayOutput
}

type TlsPrivateKeyArray []TlsPrivateKeyInput

func (TlsPrivateKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsPrivateKey)(nil)).Elem()
}

func (i TlsPrivateKeyArray) ToTlsPrivateKeyArrayOutput() TlsPrivateKeyArrayOutput {
	return i.ToTlsPrivateKeyArrayOutputWithContext(context.Background())
}

func (i TlsPrivateKeyArray) ToTlsPrivateKeyArrayOutputWithContext(ctx context.Context) TlsPrivateKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsPrivateKeyArrayOutput)
}

// TlsPrivateKeyMapInput is an input type that accepts TlsPrivateKeyMap and TlsPrivateKeyMapOutput values.
// You can construct a concrete instance of `TlsPrivateKeyMapInput` via:
//
//	TlsPrivateKeyMap{ "key": TlsPrivateKeyArgs{...} }
type TlsPrivateKeyMapInput interface {
	pulumi.Input

	ToTlsPrivateKeyMapOutput() TlsPrivateKeyMapOutput
	ToTlsPrivateKeyMapOutputWithContext(context.Context) TlsPrivateKeyMapOutput
}

type TlsPrivateKeyMap map[string]TlsPrivateKeyInput

func (TlsPrivateKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsPrivateKey)(nil)).Elem()
}

func (i TlsPrivateKeyMap) ToTlsPrivateKeyMapOutput() TlsPrivateKeyMapOutput {
	return i.ToTlsPrivateKeyMapOutputWithContext(context.Background())
}

func (i TlsPrivateKeyMap) ToTlsPrivateKeyMapOutputWithContext(ctx context.Context) TlsPrivateKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsPrivateKeyMapOutput)
}

type TlsPrivateKeyOutput struct{ *pulumi.OutputState }

func (TlsPrivateKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsPrivateKey)(nil)).Elem()
}

func (o TlsPrivateKeyOutput) ToTlsPrivateKeyOutput() TlsPrivateKeyOutput {
	return o
}

func (o TlsPrivateKeyOutput) ToTlsPrivateKeyOutputWithContext(ctx context.Context) TlsPrivateKeyOutput {
	return o
}

// Time-stamp (GMT) when the private key was created.
func (o TlsPrivateKeyOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPrivateKey) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The key length used to generate the private key.
func (o TlsPrivateKeyOutput) KeyLength() pulumi.IntOutput {
	return o.ApplyT(func(v *TlsPrivateKey) pulumi.IntOutput { return v.KeyLength }).(pulumi.IntOutput)
}

// Private key in PEM format.
func (o TlsPrivateKeyOutput) KeyPem() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPrivateKey) pulumi.StringOutput { return v.KeyPem }).(pulumi.StringOutput)
}

// The algorithm used to generate the private key. Must be RSA.
func (o TlsPrivateKeyOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPrivateKey) pulumi.StringOutput { return v.KeyType }).(pulumi.StringOutput)
}

// Customisable name of the private key.
func (o TlsPrivateKeyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPrivateKey) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Useful for safely identifying the key.
func (o TlsPrivateKeyOutput) PublicKeySha1() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsPrivateKey) pulumi.StringOutput { return v.PublicKeySha1 }).(pulumi.StringOutput)
}

// Whether Fastly recommends replacing this private key.
func (o TlsPrivateKeyOutput) Replace() pulumi.BoolOutput {
	return o.ApplyT(func(v *TlsPrivateKey) pulumi.BoolOutput { return v.Replace }).(pulumi.BoolOutput)
}

type TlsPrivateKeyArrayOutput struct{ *pulumi.OutputState }

func (TlsPrivateKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsPrivateKey)(nil)).Elem()
}

func (o TlsPrivateKeyArrayOutput) ToTlsPrivateKeyArrayOutput() TlsPrivateKeyArrayOutput {
	return o
}

func (o TlsPrivateKeyArrayOutput) ToTlsPrivateKeyArrayOutputWithContext(ctx context.Context) TlsPrivateKeyArrayOutput {
	return o
}

func (o TlsPrivateKeyArrayOutput) Index(i pulumi.IntInput) TlsPrivateKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TlsPrivateKey {
		return vs[0].([]*TlsPrivateKey)[vs[1].(int)]
	}).(TlsPrivateKeyOutput)
}

type TlsPrivateKeyMapOutput struct{ *pulumi.OutputState }

func (TlsPrivateKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsPrivateKey)(nil)).Elem()
}

func (o TlsPrivateKeyMapOutput) ToTlsPrivateKeyMapOutput() TlsPrivateKeyMapOutput {
	return o
}

func (o TlsPrivateKeyMapOutput) ToTlsPrivateKeyMapOutputWithContext(ctx context.Context) TlsPrivateKeyMapOutput {
	return o
}

func (o TlsPrivateKeyMapOutput) MapIndex(k pulumi.StringInput) TlsPrivateKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TlsPrivateKey {
		return vs[0].(map[string]*TlsPrivateKey)[vs[1].(string)]
	}).(TlsPrivateKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsPrivateKeyInput)(nil)).Elem(), &TlsPrivateKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsPrivateKeyArrayInput)(nil)).Elem(), TlsPrivateKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsPrivateKeyMapInput)(nil)).Elem(), TlsPrivateKeyMap{})
	pulumi.RegisterOutputType(TlsPrivateKeyOutput{})
	pulumi.RegisterOutputType(TlsPrivateKeyArrayOutput{})
	pulumi.RegisterOutputType(TlsPrivateKeyMapOutput{})
}
