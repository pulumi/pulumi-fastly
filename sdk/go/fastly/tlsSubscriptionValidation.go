// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v10/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource represents a successful validation of a Fastly TLS Subscription in concert with other resources.
//
// Most commonly, this resource is used together with a resource for a DNS record and `TlsSubscription` to request a DNS validated certificate, deploy the required validation records and wait for validation to complete.
//
// > **Warning:** This resource implements a part of the validation workflow. It does not represent a real-world entity in Fastly, therefore changing or deleting this resource on its own has no immediate effect.
type TlsSubscriptionValidation struct {
	pulumi.CustomResourceState

	// The ID of the TLS Subscription that should be validated.
	SubscriptionId pulumi.StringOutput `pulumi:"subscriptionId"`
}

// NewTlsSubscriptionValidation registers a new resource with the given unique name, arguments, and options.
func NewTlsSubscriptionValidation(ctx *pulumi.Context,
	name string, args *TlsSubscriptionValidationArgs, opts ...pulumi.ResourceOption) (*TlsSubscriptionValidation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubscriptionId == nil {
		return nil, errors.New("invalid value for required argument 'SubscriptionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TlsSubscriptionValidation
	err := ctx.RegisterResource("fastly:index/tlsSubscriptionValidation:TlsSubscriptionValidation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsSubscriptionValidation gets an existing TlsSubscriptionValidation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsSubscriptionValidation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsSubscriptionValidationState, opts ...pulumi.ResourceOption) (*TlsSubscriptionValidation, error) {
	var resource TlsSubscriptionValidation
	err := ctx.ReadResource("fastly:index/tlsSubscriptionValidation:TlsSubscriptionValidation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsSubscriptionValidation resources.
type tlsSubscriptionValidationState struct {
	// The ID of the TLS Subscription that should be validated.
	SubscriptionId *string `pulumi:"subscriptionId"`
}

type TlsSubscriptionValidationState struct {
	// The ID of the TLS Subscription that should be validated.
	SubscriptionId pulumi.StringPtrInput
}

func (TlsSubscriptionValidationState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsSubscriptionValidationState)(nil)).Elem()
}

type tlsSubscriptionValidationArgs struct {
	// The ID of the TLS Subscription that should be validated.
	SubscriptionId string `pulumi:"subscriptionId"`
}

// The set of arguments for constructing a TlsSubscriptionValidation resource.
type TlsSubscriptionValidationArgs struct {
	// The ID of the TLS Subscription that should be validated.
	SubscriptionId pulumi.StringInput
}

func (TlsSubscriptionValidationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsSubscriptionValidationArgs)(nil)).Elem()
}

type TlsSubscriptionValidationInput interface {
	pulumi.Input

	ToTlsSubscriptionValidationOutput() TlsSubscriptionValidationOutput
	ToTlsSubscriptionValidationOutputWithContext(ctx context.Context) TlsSubscriptionValidationOutput
}

func (*TlsSubscriptionValidation) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsSubscriptionValidation)(nil)).Elem()
}

func (i *TlsSubscriptionValidation) ToTlsSubscriptionValidationOutput() TlsSubscriptionValidationOutput {
	return i.ToTlsSubscriptionValidationOutputWithContext(context.Background())
}

func (i *TlsSubscriptionValidation) ToTlsSubscriptionValidationOutputWithContext(ctx context.Context) TlsSubscriptionValidationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSubscriptionValidationOutput)
}

// TlsSubscriptionValidationArrayInput is an input type that accepts TlsSubscriptionValidationArray and TlsSubscriptionValidationArrayOutput values.
// You can construct a concrete instance of `TlsSubscriptionValidationArrayInput` via:
//
//	TlsSubscriptionValidationArray{ TlsSubscriptionValidationArgs{...} }
type TlsSubscriptionValidationArrayInput interface {
	pulumi.Input

	ToTlsSubscriptionValidationArrayOutput() TlsSubscriptionValidationArrayOutput
	ToTlsSubscriptionValidationArrayOutputWithContext(context.Context) TlsSubscriptionValidationArrayOutput
}

type TlsSubscriptionValidationArray []TlsSubscriptionValidationInput

func (TlsSubscriptionValidationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsSubscriptionValidation)(nil)).Elem()
}

func (i TlsSubscriptionValidationArray) ToTlsSubscriptionValidationArrayOutput() TlsSubscriptionValidationArrayOutput {
	return i.ToTlsSubscriptionValidationArrayOutputWithContext(context.Background())
}

func (i TlsSubscriptionValidationArray) ToTlsSubscriptionValidationArrayOutputWithContext(ctx context.Context) TlsSubscriptionValidationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSubscriptionValidationArrayOutput)
}

// TlsSubscriptionValidationMapInput is an input type that accepts TlsSubscriptionValidationMap and TlsSubscriptionValidationMapOutput values.
// You can construct a concrete instance of `TlsSubscriptionValidationMapInput` via:
//
//	TlsSubscriptionValidationMap{ "key": TlsSubscriptionValidationArgs{...} }
type TlsSubscriptionValidationMapInput interface {
	pulumi.Input

	ToTlsSubscriptionValidationMapOutput() TlsSubscriptionValidationMapOutput
	ToTlsSubscriptionValidationMapOutputWithContext(context.Context) TlsSubscriptionValidationMapOutput
}

type TlsSubscriptionValidationMap map[string]TlsSubscriptionValidationInput

func (TlsSubscriptionValidationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsSubscriptionValidation)(nil)).Elem()
}

func (i TlsSubscriptionValidationMap) ToTlsSubscriptionValidationMapOutput() TlsSubscriptionValidationMapOutput {
	return i.ToTlsSubscriptionValidationMapOutputWithContext(context.Background())
}

func (i TlsSubscriptionValidationMap) ToTlsSubscriptionValidationMapOutputWithContext(ctx context.Context) TlsSubscriptionValidationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsSubscriptionValidationMapOutput)
}

type TlsSubscriptionValidationOutput struct{ *pulumi.OutputState }

func (TlsSubscriptionValidationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsSubscriptionValidation)(nil)).Elem()
}

func (o TlsSubscriptionValidationOutput) ToTlsSubscriptionValidationOutput() TlsSubscriptionValidationOutput {
	return o
}

func (o TlsSubscriptionValidationOutput) ToTlsSubscriptionValidationOutputWithContext(ctx context.Context) TlsSubscriptionValidationOutput {
	return o
}

// The ID of the TLS Subscription that should be validated.
func (o TlsSubscriptionValidationOutput) SubscriptionId() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsSubscriptionValidation) pulumi.StringOutput { return v.SubscriptionId }).(pulumi.StringOutput)
}

type TlsSubscriptionValidationArrayOutput struct{ *pulumi.OutputState }

func (TlsSubscriptionValidationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsSubscriptionValidation)(nil)).Elem()
}

func (o TlsSubscriptionValidationArrayOutput) ToTlsSubscriptionValidationArrayOutput() TlsSubscriptionValidationArrayOutput {
	return o
}

func (o TlsSubscriptionValidationArrayOutput) ToTlsSubscriptionValidationArrayOutputWithContext(ctx context.Context) TlsSubscriptionValidationArrayOutput {
	return o
}

func (o TlsSubscriptionValidationArrayOutput) Index(i pulumi.IntInput) TlsSubscriptionValidationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TlsSubscriptionValidation {
		return vs[0].([]*TlsSubscriptionValidation)[vs[1].(int)]
	}).(TlsSubscriptionValidationOutput)
}

type TlsSubscriptionValidationMapOutput struct{ *pulumi.OutputState }

func (TlsSubscriptionValidationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsSubscriptionValidation)(nil)).Elem()
}

func (o TlsSubscriptionValidationMapOutput) ToTlsSubscriptionValidationMapOutput() TlsSubscriptionValidationMapOutput {
	return o
}

func (o TlsSubscriptionValidationMapOutput) ToTlsSubscriptionValidationMapOutputWithContext(ctx context.Context) TlsSubscriptionValidationMapOutput {
	return o
}

func (o TlsSubscriptionValidationMapOutput) MapIndex(k pulumi.StringInput) TlsSubscriptionValidationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TlsSubscriptionValidation {
		return vs[0].(map[string]*TlsSubscriptionValidation)[vs[1].(string)]
	}).(TlsSubscriptionValidationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSubscriptionValidationInput)(nil)).Elem(), &TlsSubscriptionValidation{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSubscriptionValidationArrayInput)(nil)).Elem(), TlsSubscriptionValidationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsSubscriptionValidationMapInput)(nil)).Elem(), TlsSubscriptionValidationMap{})
	pulumi.RegisterOutputType(TlsSubscriptionValidationOutput{})
	pulumi.RegisterOutputType(TlsSubscriptionValidationArrayOutput{})
	pulumi.RegisterOutputType(TlsSubscriptionValidationMapOutput{})
}
