// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Fastly Next-Gen WAF Alert Webhook integrations, which provide a connection to Webhooks.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafAlertWebhookIntegration(ctx, "demo_webhook_alert", &fastly.NgwafAlertWebhookIntegrationArgs{
//				Description: pulumi.String("Some Description"),
//				Webhook:     pulumi.String("https://example.com/webhooks/my-service"),
//				WorkspaceId: pulumi.Any(demo.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF Alert Webhook integrations can be imported using their ID and the ID of the workspace they belong to.
//
// ```sh
// $ pulumi import fastly:index/ngwafAlertWebhookIntegration:NgwafAlertWebhookIntegration example <workspace_id>/<alert_id>
// ```
type NgwafAlertWebhookIntegration struct {
	pulumi.CustomResourceState

	// The description of the alert.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The webhook URL.
	Webhook pulumi.StringOutput `pulumi:"webhook"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafAlertWebhookIntegration registers a new resource with the given unique name, arguments, and options.
func NewNgwafAlertWebhookIntegration(ctx *pulumi.Context,
	name string, args *NgwafAlertWebhookIntegrationArgs, opts ...pulumi.ResourceOption) (*NgwafAlertWebhookIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Webhook == nil {
		return nil, errors.New("invalid value for required argument 'Webhook'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	if args.Webhook != nil {
		args.Webhook = pulumi.ToSecret(args.Webhook).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"webhook",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafAlertWebhookIntegration
	err := ctx.RegisterResource("fastly:index/ngwafAlertWebhookIntegration:NgwafAlertWebhookIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafAlertWebhookIntegration gets an existing NgwafAlertWebhookIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafAlertWebhookIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafAlertWebhookIntegrationState, opts ...pulumi.ResourceOption) (*NgwafAlertWebhookIntegration, error) {
	var resource NgwafAlertWebhookIntegration
	err := ctx.ReadResource("fastly:index/ngwafAlertWebhookIntegration:NgwafAlertWebhookIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafAlertWebhookIntegration resources.
type ngwafAlertWebhookIntegrationState struct {
	// The description of the alert.
	Description *string `pulumi:"description"`
	// The webhook URL.
	Webhook *string `pulumi:"webhook"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafAlertWebhookIntegrationState struct {
	// The description of the alert.
	Description pulumi.StringPtrInput
	// The webhook URL.
	Webhook pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafAlertWebhookIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAlertWebhookIntegrationState)(nil)).Elem()
}

type ngwafAlertWebhookIntegrationArgs struct {
	// The description of the alert.
	Description *string `pulumi:"description"`
	// The webhook URL.
	Webhook string `pulumi:"webhook"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafAlertWebhookIntegration resource.
type NgwafAlertWebhookIntegrationArgs struct {
	// The description of the alert.
	Description pulumi.StringPtrInput
	// The webhook URL.
	Webhook pulumi.StringInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (NgwafAlertWebhookIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAlertWebhookIntegrationArgs)(nil)).Elem()
}

type NgwafAlertWebhookIntegrationInput interface {
	pulumi.Input

	ToNgwafAlertWebhookIntegrationOutput() NgwafAlertWebhookIntegrationOutput
	ToNgwafAlertWebhookIntegrationOutputWithContext(ctx context.Context) NgwafAlertWebhookIntegrationOutput
}

func (*NgwafAlertWebhookIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAlertWebhookIntegration)(nil)).Elem()
}

func (i *NgwafAlertWebhookIntegration) ToNgwafAlertWebhookIntegrationOutput() NgwafAlertWebhookIntegrationOutput {
	return i.ToNgwafAlertWebhookIntegrationOutputWithContext(context.Background())
}

func (i *NgwafAlertWebhookIntegration) ToNgwafAlertWebhookIntegrationOutputWithContext(ctx context.Context) NgwafAlertWebhookIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertWebhookIntegrationOutput)
}

// NgwafAlertWebhookIntegrationArrayInput is an input type that accepts NgwafAlertWebhookIntegrationArray and NgwafAlertWebhookIntegrationArrayOutput values.
// You can construct a concrete instance of `NgwafAlertWebhookIntegrationArrayInput` via:
//
//	NgwafAlertWebhookIntegrationArray{ NgwafAlertWebhookIntegrationArgs{...} }
type NgwafAlertWebhookIntegrationArrayInput interface {
	pulumi.Input

	ToNgwafAlertWebhookIntegrationArrayOutput() NgwafAlertWebhookIntegrationArrayOutput
	ToNgwafAlertWebhookIntegrationArrayOutputWithContext(context.Context) NgwafAlertWebhookIntegrationArrayOutput
}

type NgwafAlertWebhookIntegrationArray []NgwafAlertWebhookIntegrationInput

func (NgwafAlertWebhookIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAlertWebhookIntegration)(nil)).Elem()
}

func (i NgwafAlertWebhookIntegrationArray) ToNgwafAlertWebhookIntegrationArrayOutput() NgwafAlertWebhookIntegrationArrayOutput {
	return i.ToNgwafAlertWebhookIntegrationArrayOutputWithContext(context.Background())
}

func (i NgwafAlertWebhookIntegrationArray) ToNgwafAlertWebhookIntegrationArrayOutputWithContext(ctx context.Context) NgwafAlertWebhookIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertWebhookIntegrationArrayOutput)
}

// NgwafAlertWebhookIntegrationMapInput is an input type that accepts NgwafAlertWebhookIntegrationMap and NgwafAlertWebhookIntegrationMapOutput values.
// You can construct a concrete instance of `NgwafAlertWebhookIntegrationMapInput` via:
//
//	NgwafAlertWebhookIntegrationMap{ "key": NgwafAlertWebhookIntegrationArgs{...} }
type NgwafAlertWebhookIntegrationMapInput interface {
	pulumi.Input

	ToNgwafAlertWebhookIntegrationMapOutput() NgwafAlertWebhookIntegrationMapOutput
	ToNgwafAlertWebhookIntegrationMapOutputWithContext(context.Context) NgwafAlertWebhookIntegrationMapOutput
}

type NgwafAlertWebhookIntegrationMap map[string]NgwafAlertWebhookIntegrationInput

func (NgwafAlertWebhookIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAlertWebhookIntegration)(nil)).Elem()
}

func (i NgwafAlertWebhookIntegrationMap) ToNgwafAlertWebhookIntegrationMapOutput() NgwafAlertWebhookIntegrationMapOutput {
	return i.ToNgwafAlertWebhookIntegrationMapOutputWithContext(context.Background())
}

func (i NgwafAlertWebhookIntegrationMap) ToNgwafAlertWebhookIntegrationMapOutputWithContext(ctx context.Context) NgwafAlertWebhookIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertWebhookIntegrationMapOutput)
}

type NgwafAlertWebhookIntegrationOutput struct{ *pulumi.OutputState }

func (NgwafAlertWebhookIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAlertWebhookIntegration)(nil)).Elem()
}

func (o NgwafAlertWebhookIntegrationOutput) ToNgwafAlertWebhookIntegrationOutput() NgwafAlertWebhookIntegrationOutput {
	return o
}

func (o NgwafAlertWebhookIntegrationOutput) ToNgwafAlertWebhookIntegrationOutputWithContext(ctx context.Context) NgwafAlertWebhookIntegrationOutput {
	return o
}

// The description of the alert.
func (o NgwafAlertWebhookIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafAlertWebhookIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The webhook URL.
func (o NgwafAlertWebhookIntegrationOutput) Webhook() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertWebhookIntegration) pulumi.StringOutput { return v.Webhook }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o NgwafAlertWebhookIntegrationOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertWebhookIntegration) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafAlertWebhookIntegrationArrayOutput struct{ *pulumi.OutputState }

func (NgwafAlertWebhookIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAlertWebhookIntegration)(nil)).Elem()
}

func (o NgwafAlertWebhookIntegrationArrayOutput) ToNgwafAlertWebhookIntegrationArrayOutput() NgwafAlertWebhookIntegrationArrayOutput {
	return o
}

func (o NgwafAlertWebhookIntegrationArrayOutput) ToNgwafAlertWebhookIntegrationArrayOutputWithContext(ctx context.Context) NgwafAlertWebhookIntegrationArrayOutput {
	return o
}

func (o NgwafAlertWebhookIntegrationArrayOutput) Index(i pulumi.IntInput) NgwafAlertWebhookIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafAlertWebhookIntegration {
		return vs[0].([]*NgwafAlertWebhookIntegration)[vs[1].(int)]
	}).(NgwafAlertWebhookIntegrationOutput)
}

type NgwafAlertWebhookIntegrationMapOutput struct{ *pulumi.OutputState }

func (NgwafAlertWebhookIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAlertWebhookIntegration)(nil)).Elem()
}

func (o NgwafAlertWebhookIntegrationMapOutput) ToNgwafAlertWebhookIntegrationMapOutput() NgwafAlertWebhookIntegrationMapOutput {
	return o
}

func (o NgwafAlertWebhookIntegrationMapOutput) ToNgwafAlertWebhookIntegrationMapOutputWithContext(ctx context.Context) NgwafAlertWebhookIntegrationMapOutput {
	return o
}

func (o NgwafAlertWebhookIntegrationMapOutput) MapIndex(k pulumi.StringInput) NgwafAlertWebhookIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafAlertWebhookIntegration {
		return vs[0].(map[string]*NgwafAlertWebhookIntegration)[vs[1].(string)]
	}).(NgwafAlertWebhookIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertWebhookIntegrationInput)(nil)).Elem(), &NgwafAlertWebhookIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertWebhookIntegrationArrayInput)(nil)).Elem(), NgwafAlertWebhookIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertWebhookIntegrationMapInput)(nil)).Elem(), NgwafAlertWebhookIntegrationMap{})
	pulumi.RegisterOutputType(NgwafAlertWebhookIntegrationOutput{})
	pulumi.RegisterOutputType(NgwafAlertWebhookIntegrationArrayOutput{})
	pulumi.RegisterOutputType(NgwafAlertWebhookIntegrationMapOutput{})
}
