// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// This is an example of the import command being applied to the resource named `fastly_service_dictionary_items.items`
//
// The resource ID is a combined value of the `service_id` and `dictionary_id` separated by a forward slash.
//
// ```sh
// $ pulumi import fastly:index/serviceDictionaryItems:ServiceDictionaryItems items xxxxxxxxxxxxxxxxxxxx/xxxxxxxxxxxxxxxxxxxx
// ```
//
// If Terraform is already managing remote dictionary items against a resource being imported then the user will be asked to remove it from the existing Terraform state.
//
// The following is an example of the Terraform state command to remove the resource named `fastly_service_dictionary_items.items` from the Terraform state file.
//
// $ terraform state rm fastly_service_dictionary_items.items
type ServiceDictionaryItems struct {
	pulumi.CustomResourceState

	// The ID of the dictionary that the items belong to
	DictionaryId pulumi.StringOutput `pulumi:"dictionaryId"`
	// A map representing an entry in the dictionary, (key/value)
	Items pulumi.MapOutput `pulumi:"items"`
	// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
	ManageItems pulumi.BoolPtrOutput `pulumi:"manageItems"`
	// The ID of the service that the dictionary belongs to
	ServiceId pulumi.StringOutput `pulumi:"serviceId"`
}

// NewServiceDictionaryItems registers a new resource with the given unique name, arguments, and options.
func NewServiceDictionaryItems(ctx *pulumi.Context,
	name string, args *ServiceDictionaryItemsArgs, opts ...pulumi.ResourceOption) (*ServiceDictionaryItems, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DictionaryId == nil {
		return nil, errors.New("invalid value for required argument 'DictionaryId'")
	}
	if args.ServiceId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServiceDictionaryItems
	err := ctx.RegisterResource("fastly:index/serviceDictionaryItems:ServiceDictionaryItems", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceDictionaryItems gets an existing ServiceDictionaryItems resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceDictionaryItems(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceDictionaryItemsState, opts ...pulumi.ResourceOption) (*ServiceDictionaryItems, error) {
	var resource ServiceDictionaryItems
	err := ctx.ReadResource("fastly:index/serviceDictionaryItems:ServiceDictionaryItems", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceDictionaryItems resources.
type serviceDictionaryItemsState struct {
	// The ID of the dictionary that the items belong to
	DictionaryId *string `pulumi:"dictionaryId"`
	// A map representing an entry in the dictionary, (key/value)
	Items map[string]interface{} `pulumi:"items"`
	// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
	ManageItems *bool `pulumi:"manageItems"`
	// The ID of the service that the dictionary belongs to
	ServiceId *string `pulumi:"serviceId"`
}

type ServiceDictionaryItemsState struct {
	// The ID of the dictionary that the items belong to
	DictionaryId pulumi.StringPtrInput
	// A map representing an entry in the dictionary, (key/value)
	Items pulumi.MapInput
	// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
	ManageItems pulumi.BoolPtrInput
	// The ID of the service that the dictionary belongs to
	ServiceId pulumi.StringPtrInput
}

func (ServiceDictionaryItemsState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDictionaryItemsState)(nil)).Elem()
}

type serviceDictionaryItemsArgs struct {
	// The ID of the dictionary that the items belong to
	DictionaryId string `pulumi:"dictionaryId"`
	// A map representing an entry in the dictionary, (key/value)
	Items map[string]interface{} `pulumi:"items"`
	// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
	ManageItems *bool `pulumi:"manageItems"`
	// The ID of the service that the dictionary belongs to
	ServiceId string `pulumi:"serviceId"`
}

// The set of arguments for constructing a ServiceDictionaryItems resource.
type ServiceDictionaryItemsArgs struct {
	// The ID of the dictionary that the items belong to
	DictionaryId pulumi.StringInput
	// A map representing an entry in the dictionary, (key/value)
	Items pulumi.MapInput
	// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
	ManageItems pulumi.BoolPtrInput
	// The ID of the service that the dictionary belongs to
	ServiceId pulumi.StringInput
}

func (ServiceDictionaryItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceDictionaryItemsArgs)(nil)).Elem()
}

type ServiceDictionaryItemsInput interface {
	pulumi.Input

	ToServiceDictionaryItemsOutput() ServiceDictionaryItemsOutput
	ToServiceDictionaryItemsOutputWithContext(ctx context.Context) ServiceDictionaryItemsOutput
}

func (*ServiceDictionaryItems) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDictionaryItems)(nil)).Elem()
}

func (i *ServiceDictionaryItems) ToServiceDictionaryItemsOutput() ServiceDictionaryItemsOutput {
	return i.ToServiceDictionaryItemsOutputWithContext(context.Background())
}

func (i *ServiceDictionaryItems) ToServiceDictionaryItemsOutputWithContext(ctx context.Context) ServiceDictionaryItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDictionaryItemsOutput)
}

// ServiceDictionaryItemsArrayInput is an input type that accepts ServiceDictionaryItemsArray and ServiceDictionaryItemsArrayOutput values.
// You can construct a concrete instance of `ServiceDictionaryItemsArrayInput` via:
//
//	ServiceDictionaryItemsArray{ ServiceDictionaryItemsArgs{...} }
type ServiceDictionaryItemsArrayInput interface {
	pulumi.Input

	ToServiceDictionaryItemsArrayOutput() ServiceDictionaryItemsArrayOutput
	ToServiceDictionaryItemsArrayOutputWithContext(context.Context) ServiceDictionaryItemsArrayOutput
}

type ServiceDictionaryItemsArray []ServiceDictionaryItemsInput

func (ServiceDictionaryItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDictionaryItems)(nil)).Elem()
}

func (i ServiceDictionaryItemsArray) ToServiceDictionaryItemsArrayOutput() ServiceDictionaryItemsArrayOutput {
	return i.ToServiceDictionaryItemsArrayOutputWithContext(context.Background())
}

func (i ServiceDictionaryItemsArray) ToServiceDictionaryItemsArrayOutputWithContext(ctx context.Context) ServiceDictionaryItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDictionaryItemsArrayOutput)
}

// ServiceDictionaryItemsMapInput is an input type that accepts ServiceDictionaryItemsMap and ServiceDictionaryItemsMapOutput values.
// You can construct a concrete instance of `ServiceDictionaryItemsMapInput` via:
//
//	ServiceDictionaryItemsMap{ "key": ServiceDictionaryItemsArgs{...} }
type ServiceDictionaryItemsMapInput interface {
	pulumi.Input

	ToServiceDictionaryItemsMapOutput() ServiceDictionaryItemsMapOutput
	ToServiceDictionaryItemsMapOutputWithContext(context.Context) ServiceDictionaryItemsMapOutput
}

type ServiceDictionaryItemsMap map[string]ServiceDictionaryItemsInput

func (ServiceDictionaryItemsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDictionaryItems)(nil)).Elem()
}

func (i ServiceDictionaryItemsMap) ToServiceDictionaryItemsMapOutput() ServiceDictionaryItemsMapOutput {
	return i.ToServiceDictionaryItemsMapOutputWithContext(context.Background())
}

func (i ServiceDictionaryItemsMap) ToServiceDictionaryItemsMapOutputWithContext(ctx context.Context) ServiceDictionaryItemsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceDictionaryItemsMapOutput)
}

type ServiceDictionaryItemsOutput struct{ *pulumi.OutputState }

func (ServiceDictionaryItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceDictionaryItems)(nil)).Elem()
}

func (o ServiceDictionaryItemsOutput) ToServiceDictionaryItemsOutput() ServiceDictionaryItemsOutput {
	return o
}

func (o ServiceDictionaryItemsOutput) ToServiceDictionaryItemsOutputWithContext(ctx context.Context) ServiceDictionaryItemsOutput {
	return o
}

// The ID of the dictionary that the items belong to
func (o ServiceDictionaryItemsOutput) DictionaryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDictionaryItems) pulumi.StringOutput { return v.DictionaryId }).(pulumi.StringOutput)
}

// A map representing an entry in the dictionary, (key/value)
func (o ServiceDictionaryItemsOutput) Items() pulumi.MapOutput {
	return o.ApplyT(func(v *ServiceDictionaryItems) pulumi.MapOutput { return v.Items }).(pulumi.MapOutput)
}

// Whether to reapply changes if the state of the items drifts, i.e. if items are managed externally
func (o ServiceDictionaryItemsOutput) ManageItems() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ServiceDictionaryItems) pulumi.BoolPtrOutput { return v.ManageItems }).(pulumi.BoolPtrOutput)
}

// The ID of the service that the dictionary belongs to
func (o ServiceDictionaryItemsOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceDictionaryItems) pulumi.StringOutput { return v.ServiceId }).(pulumi.StringOutput)
}

type ServiceDictionaryItemsArrayOutput struct{ *pulumi.OutputState }

func (ServiceDictionaryItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceDictionaryItems)(nil)).Elem()
}

func (o ServiceDictionaryItemsArrayOutput) ToServiceDictionaryItemsArrayOutput() ServiceDictionaryItemsArrayOutput {
	return o
}

func (o ServiceDictionaryItemsArrayOutput) ToServiceDictionaryItemsArrayOutputWithContext(ctx context.Context) ServiceDictionaryItemsArrayOutput {
	return o
}

func (o ServiceDictionaryItemsArrayOutput) Index(i pulumi.IntInput) ServiceDictionaryItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceDictionaryItems {
		return vs[0].([]*ServiceDictionaryItems)[vs[1].(int)]
	}).(ServiceDictionaryItemsOutput)
}

type ServiceDictionaryItemsMapOutput struct{ *pulumi.OutputState }

func (ServiceDictionaryItemsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceDictionaryItems)(nil)).Elem()
}

func (o ServiceDictionaryItemsMapOutput) ToServiceDictionaryItemsMapOutput() ServiceDictionaryItemsMapOutput {
	return o
}

func (o ServiceDictionaryItemsMapOutput) ToServiceDictionaryItemsMapOutputWithContext(ctx context.Context) ServiceDictionaryItemsMapOutput {
	return o
}

func (o ServiceDictionaryItemsMapOutput) MapIndex(k pulumi.StringInput) ServiceDictionaryItemsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceDictionaryItems {
		return vs[0].(map[string]*ServiceDictionaryItems)[vs[1].(string)]
	}).(ServiceDictionaryItemsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDictionaryItemsInput)(nil)).Elem(), &ServiceDictionaryItems{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDictionaryItemsArrayInput)(nil)).Elem(), ServiceDictionaryItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceDictionaryItemsMapInput)(nil)).Elem(), ServiceDictionaryItemsMap{})
	pulumi.RegisterOutputType(ServiceDictionaryItemsOutput{})
	pulumi.RegisterOutputType(ServiceDictionaryItemsArrayOutput{})
	pulumi.RegisterOutputType(ServiceDictionaryItemsMapOutput{})
}
