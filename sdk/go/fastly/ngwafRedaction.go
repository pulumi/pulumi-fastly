// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Next-Gen WAF Redaction, which can automatically redact known patterns of sensitive information.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafRedaction(ctx, "demo_redaction", &fastly.NgwafRedactionArgs{
//				Field:       pulumi.String("some field"),
//				Type:        pulumi.String("request_header"),
//				WorkspaceId: pulumi.Any(demo.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF Redactions can be imported using their ID and the ID of the workspace they belong to.
//
// ```sh
// $ pulumi import fastly:index/ngwafRedaction:NgwafRedaction example <workspace_id>/<redaction_id>
// ```
type NgwafRedaction struct {
	pulumi.CustomResourceState

	// The name of the field that should be redacted.
	Field pulumi.StringOutput `pulumi:"field"`
	// The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
	Type pulumi.StringOutput `pulumi:"type"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafRedaction registers a new resource with the given unique name, arguments, and options.
func NewNgwafRedaction(ctx *pulumi.Context,
	name string, args *NgwafRedactionArgs, opts ...pulumi.ResourceOption) (*NgwafRedaction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafRedaction
	err := ctx.RegisterResource("fastly:index/ngwafRedaction:NgwafRedaction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafRedaction gets an existing NgwafRedaction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafRedaction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafRedactionState, opts ...pulumi.ResourceOption) (*NgwafRedaction, error) {
	var resource NgwafRedaction
	err := ctx.ReadResource("fastly:index/ngwafRedaction:NgwafRedaction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafRedaction resources.
type ngwafRedactionState struct {
	// The name of the field that should be redacted.
	Field *string `pulumi:"field"`
	// The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
	Type *string `pulumi:"type"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafRedactionState struct {
	// The name of the field that should be redacted.
	Field pulumi.StringPtrInput
	// The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
	Type pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafRedactionState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafRedactionState)(nil)).Elem()
}

type ngwafRedactionArgs struct {
	// The name of the field that should be redacted.
	Field string `pulumi:"field"`
	// The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
	Type string `pulumi:"type"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafRedaction resource.
type NgwafRedactionArgs struct {
	// The name of the field that should be redacted.
	Field pulumi.StringInput
	// The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
	Type pulumi.StringInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (NgwafRedactionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafRedactionArgs)(nil)).Elem()
}

type NgwafRedactionInput interface {
	pulumi.Input

	ToNgwafRedactionOutput() NgwafRedactionOutput
	ToNgwafRedactionOutputWithContext(ctx context.Context) NgwafRedactionOutput
}

func (*NgwafRedaction) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafRedaction)(nil)).Elem()
}

func (i *NgwafRedaction) ToNgwafRedactionOutput() NgwafRedactionOutput {
	return i.ToNgwafRedactionOutputWithContext(context.Background())
}

func (i *NgwafRedaction) ToNgwafRedactionOutputWithContext(ctx context.Context) NgwafRedactionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafRedactionOutput)
}

// NgwafRedactionArrayInput is an input type that accepts NgwafRedactionArray and NgwafRedactionArrayOutput values.
// You can construct a concrete instance of `NgwafRedactionArrayInput` via:
//
//	NgwafRedactionArray{ NgwafRedactionArgs{...} }
type NgwafRedactionArrayInput interface {
	pulumi.Input

	ToNgwafRedactionArrayOutput() NgwafRedactionArrayOutput
	ToNgwafRedactionArrayOutputWithContext(context.Context) NgwafRedactionArrayOutput
}

type NgwafRedactionArray []NgwafRedactionInput

func (NgwafRedactionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafRedaction)(nil)).Elem()
}

func (i NgwafRedactionArray) ToNgwafRedactionArrayOutput() NgwafRedactionArrayOutput {
	return i.ToNgwafRedactionArrayOutputWithContext(context.Background())
}

func (i NgwafRedactionArray) ToNgwafRedactionArrayOutputWithContext(ctx context.Context) NgwafRedactionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafRedactionArrayOutput)
}

// NgwafRedactionMapInput is an input type that accepts NgwafRedactionMap and NgwafRedactionMapOutput values.
// You can construct a concrete instance of `NgwafRedactionMapInput` via:
//
//	NgwafRedactionMap{ "key": NgwafRedactionArgs{...} }
type NgwafRedactionMapInput interface {
	pulumi.Input

	ToNgwafRedactionMapOutput() NgwafRedactionMapOutput
	ToNgwafRedactionMapOutputWithContext(context.Context) NgwafRedactionMapOutput
}

type NgwafRedactionMap map[string]NgwafRedactionInput

func (NgwafRedactionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafRedaction)(nil)).Elem()
}

func (i NgwafRedactionMap) ToNgwafRedactionMapOutput() NgwafRedactionMapOutput {
	return i.ToNgwafRedactionMapOutputWithContext(context.Background())
}

func (i NgwafRedactionMap) ToNgwafRedactionMapOutputWithContext(ctx context.Context) NgwafRedactionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafRedactionMapOutput)
}

type NgwafRedactionOutput struct{ *pulumi.OutputState }

func (NgwafRedactionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafRedaction)(nil)).Elem()
}

func (o NgwafRedactionOutput) ToNgwafRedactionOutput() NgwafRedactionOutput {
	return o
}

func (o NgwafRedactionOutput) ToNgwafRedactionOutputWithContext(ctx context.Context) NgwafRedactionOutput {
	return o
}

// The name of the field that should be redacted.
func (o NgwafRedactionOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafRedaction) pulumi.StringOutput { return v.Field }).(pulumi.StringOutput)
}

// The type of field that is being redacted. Accepted values are `requestParameter`, `requestHeader`, and `responseHeader`.
func (o NgwafRedactionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafRedaction) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o NgwafRedactionOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafRedaction) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafRedactionArrayOutput struct{ *pulumi.OutputState }

func (NgwafRedactionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafRedaction)(nil)).Elem()
}

func (o NgwafRedactionArrayOutput) ToNgwafRedactionArrayOutput() NgwafRedactionArrayOutput {
	return o
}

func (o NgwafRedactionArrayOutput) ToNgwafRedactionArrayOutputWithContext(ctx context.Context) NgwafRedactionArrayOutput {
	return o
}

func (o NgwafRedactionArrayOutput) Index(i pulumi.IntInput) NgwafRedactionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafRedaction {
		return vs[0].([]*NgwafRedaction)[vs[1].(int)]
	}).(NgwafRedactionOutput)
}

type NgwafRedactionMapOutput struct{ *pulumi.OutputState }

func (NgwafRedactionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafRedaction)(nil)).Elem()
}

func (o NgwafRedactionMapOutput) ToNgwafRedactionMapOutput() NgwafRedactionMapOutput {
	return o
}

func (o NgwafRedactionMapOutput) ToNgwafRedactionMapOutputWithContext(ctx context.Context) NgwafRedactionMapOutput {
	return o
}

func (o NgwafRedactionMapOutput) MapIndex(k pulumi.StringInput) NgwafRedactionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafRedaction {
		return vs[0].(map[string]*NgwafRedaction)[vs[1].(string)]
	}).(NgwafRedactionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafRedactionInput)(nil)).Elem(), &NgwafRedaction{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafRedactionArrayInput)(nil)).Elem(), NgwafRedactionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafRedactionMapInput)(nil)).Elem(), NgwafRedactionMap{})
	pulumi.RegisterOutputType(NgwafRedactionOutput{})
	pulumi.RegisterOutputType(NgwafRedactionArrayOutput{})
	pulumi.RegisterOutputType(NgwafRedactionMapOutput{})
}
