// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Next-Gen WAF Virtual Patch.  Virtual patching
// rules block or log requests matching specific vulnerabilities.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafVirtualPatch(ctx, "demo", &fastly.NgwafVirtualPatchArgs{
//				Action:         "block",
//				Enabled:        true,
//				VirtualPatchId: "CVE-2017-5638",
//				WorkspaceId:    demoFastlyNgwafWorkspace.Id,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF Virtual Patches can be imported using their workspace and Virtual Patch ID, e.g.
//
// ```sh
// $ pulumi import fastly:index/ngwafVirtualPatches:NgwafVirtualPatches demo <workspace_id>/<virtual_patch_id>
// ```
type NgwafVirtualPatches struct {
	pulumi.CustomResourceState

	// Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
	Action pulumi.StringOutput `pulumi:"action"`
	// Control for enabling and disabling a virtual patch.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID of the virtual patch.
	VirtualPatchId pulumi.StringOutput `pulumi:"virtualPatchId"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafVirtualPatches registers a new resource with the given unique name, arguments, and options.
func NewNgwafVirtualPatches(ctx *pulumi.Context,
	name string, args *NgwafVirtualPatchesArgs, opts ...pulumi.ResourceOption) (*NgwafVirtualPatches, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.VirtualPatchId == nil {
		return nil, errors.New("invalid value for required argument 'VirtualPatchId'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafVirtualPatches
	err := ctx.RegisterResource("fastly:index/ngwafVirtualPatches:NgwafVirtualPatches", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafVirtualPatches gets an existing NgwafVirtualPatches resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafVirtualPatches(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafVirtualPatchesState, opts ...pulumi.ResourceOption) (*NgwafVirtualPatches, error) {
	var resource NgwafVirtualPatches
	err := ctx.ReadResource("fastly:index/ngwafVirtualPatches:NgwafVirtualPatches", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafVirtualPatches resources.
type ngwafVirtualPatchesState struct {
	// Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
	Action *string `pulumi:"action"`
	// Control for enabling and disabling a virtual patch.
	Enabled *bool `pulumi:"enabled"`
	// The ID of the virtual patch.
	VirtualPatchId *string `pulumi:"virtualPatchId"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafVirtualPatchesState struct {
	// Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
	Action pulumi.StringPtrInput
	// Control for enabling and disabling a virtual patch.
	Enabled pulumi.BoolPtrInput
	// The ID of the virtual patch.
	VirtualPatchId pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafVirtualPatchesState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafVirtualPatchesState)(nil)).Elem()
}

type ngwafVirtualPatchesArgs struct {
	// Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
	Action string `pulumi:"action"`
	// Control for enabling and disabling a virtual patch.
	Enabled bool `pulumi:"enabled"`
	// The ID of the virtual patch.
	VirtualPatchId string `pulumi:"virtualPatchId"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafVirtualPatches resource.
type NgwafVirtualPatchesArgs struct {
	// Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
	Action pulumi.StringInput
	// Control for enabling and disabling a virtual patch.
	Enabled pulumi.BoolInput
	// The ID of the virtual patch.
	VirtualPatchId pulumi.StringInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (NgwafVirtualPatchesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafVirtualPatchesArgs)(nil)).Elem()
}

type NgwafVirtualPatchesInput interface {
	pulumi.Input

	ToNgwafVirtualPatchesOutput() NgwafVirtualPatchesOutput
	ToNgwafVirtualPatchesOutputWithContext(ctx context.Context) NgwafVirtualPatchesOutput
}

func (*NgwafVirtualPatches) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafVirtualPatches)(nil)).Elem()
}

func (i *NgwafVirtualPatches) ToNgwafVirtualPatchesOutput() NgwafVirtualPatchesOutput {
	return i.ToNgwafVirtualPatchesOutputWithContext(context.Background())
}

func (i *NgwafVirtualPatches) ToNgwafVirtualPatchesOutputWithContext(ctx context.Context) NgwafVirtualPatchesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafVirtualPatchesOutput)
}

// NgwafVirtualPatchesArrayInput is an input type that accepts NgwafVirtualPatchesArray and NgwafVirtualPatchesArrayOutput values.
// You can construct a concrete instance of `NgwafVirtualPatchesArrayInput` via:
//
//	NgwafVirtualPatchesArray{ NgwafVirtualPatchesArgs{...} }
type NgwafVirtualPatchesArrayInput interface {
	pulumi.Input

	ToNgwafVirtualPatchesArrayOutput() NgwafVirtualPatchesArrayOutput
	ToNgwafVirtualPatchesArrayOutputWithContext(context.Context) NgwafVirtualPatchesArrayOutput
}

type NgwafVirtualPatchesArray []NgwafVirtualPatchesInput

func (NgwafVirtualPatchesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafVirtualPatches)(nil)).Elem()
}

func (i NgwafVirtualPatchesArray) ToNgwafVirtualPatchesArrayOutput() NgwafVirtualPatchesArrayOutput {
	return i.ToNgwafVirtualPatchesArrayOutputWithContext(context.Background())
}

func (i NgwafVirtualPatchesArray) ToNgwafVirtualPatchesArrayOutputWithContext(ctx context.Context) NgwafVirtualPatchesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafVirtualPatchesArrayOutput)
}

// NgwafVirtualPatchesMapInput is an input type that accepts NgwafVirtualPatchesMap and NgwafVirtualPatchesMapOutput values.
// You can construct a concrete instance of `NgwafVirtualPatchesMapInput` via:
//
//	NgwafVirtualPatchesMap{ "key": NgwafVirtualPatchesArgs{...} }
type NgwafVirtualPatchesMapInput interface {
	pulumi.Input

	ToNgwafVirtualPatchesMapOutput() NgwafVirtualPatchesMapOutput
	ToNgwafVirtualPatchesMapOutputWithContext(context.Context) NgwafVirtualPatchesMapOutput
}

type NgwafVirtualPatchesMap map[string]NgwafVirtualPatchesInput

func (NgwafVirtualPatchesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafVirtualPatches)(nil)).Elem()
}

func (i NgwafVirtualPatchesMap) ToNgwafVirtualPatchesMapOutput() NgwafVirtualPatchesMapOutput {
	return i.ToNgwafVirtualPatchesMapOutputWithContext(context.Background())
}

func (i NgwafVirtualPatchesMap) ToNgwafVirtualPatchesMapOutputWithContext(ctx context.Context) NgwafVirtualPatchesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafVirtualPatchesMapOutput)
}

type NgwafVirtualPatchesOutput struct{ *pulumi.OutputState }

func (NgwafVirtualPatchesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafVirtualPatches)(nil)).Elem()
}

func (o NgwafVirtualPatchesOutput) ToNgwafVirtualPatchesOutput() NgwafVirtualPatchesOutput {
	return o
}

func (o NgwafVirtualPatchesOutput) ToNgwafVirtualPatchesOutputWithContext(ctx context.Context) NgwafVirtualPatchesOutput {
	return o
}

// Action to take when a signal for virtual patch is detected. Accepted values are `log` and `block`.
func (o NgwafVirtualPatchesOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafVirtualPatches) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Control for enabling and disabling a virtual patch.
func (o NgwafVirtualPatchesOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NgwafVirtualPatches) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of the virtual patch.
func (o NgwafVirtualPatchesOutput) VirtualPatchId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafVirtualPatches) pulumi.StringOutput { return v.VirtualPatchId }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o NgwafVirtualPatchesOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafVirtualPatches) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafVirtualPatchesArrayOutput struct{ *pulumi.OutputState }

func (NgwafVirtualPatchesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafVirtualPatches)(nil)).Elem()
}

func (o NgwafVirtualPatchesArrayOutput) ToNgwafVirtualPatchesArrayOutput() NgwafVirtualPatchesArrayOutput {
	return o
}

func (o NgwafVirtualPatchesArrayOutput) ToNgwafVirtualPatchesArrayOutputWithContext(ctx context.Context) NgwafVirtualPatchesArrayOutput {
	return o
}

func (o NgwafVirtualPatchesArrayOutput) Index(i pulumi.IntInput) NgwafVirtualPatchesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafVirtualPatches {
		return vs[0].([]*NgwafVirtualPatches)[vs[1].(int)]
	}).(NgwafVirtualPatchesOutput)
}

type NgwafVirtualPatchesMapOutput struct{ *pulumi.OutputState }

func (NgwafVirtualPatchesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafVirtualPatches)(nil)).Elem()
}

func (o NgwafVirtualPatchesMapOutput) ToNgwafVirtualPatchesMapOutput() NgwafVirtualPatchesMapOutput {
	return o
}

func (o NgwafVirtualPatchesMapOutput) ToNgwafVirtualPatchesMapOutputWithContext(ctx context.Context) NgwafVirtualPatchesMapOutput {
	return o
}

func (o NgwafVirtualPatchesMapOutput) MapIndex(k pulumi.StringInput) NgwafVirtualPatchesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafVirtualPatches {
		return vs[0].(map[string]*NgwafVirtualPatches)[vs[1].(string)]
	}).(NgwafVirtualPatchesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafVirtualPatchesInput)(nil)).Elem(), &NgwafVirtualPatches{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafVirtualPatchesArrayInput)(nil)).Elem(), NgwafVirtualPatchesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafVirtualPatchesMapInput)(nil)).Elem(), NgwafVirtualPatchesMap{})
	pulumi.RegisterOutputType(NgwafVirtualPatchesOutput{})
	pulumi.RegisterOutputType(NgwafVirtualPatchesArrayOutput{})
	pulumi.RegisterOutputType(NgwafVirtualPatchesMapOutput{})
}
