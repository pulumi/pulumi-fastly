// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v9/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get information about a TLS subscription.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v9/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.LookupTlsSubscription(ctx, &fastly.LookupTlsSubscriptionArgs{
//				Domains: []string{
//					"example.com",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTlsSubscription(ctx *pulumi.Context, args *LookupTlsSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupTlsSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTlsSubscriptionResult
	err := ctx.Invoke("fastly:index/getTlsSubscription:getTlsSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTlsSubscription.
type LookupTlsSubscriptionArgs struct {
	// The entity that issues and certifies the TLS certificates for the subscription.
	CertificateAuthority *string `pulumi:"certificateAuthority"`
	// ID of TLS configuration used to terminate TLS traffic.
	ConfigurationId *string `pulumi:"configurationId"`
	// List of domains on which to enable TLS.
	Domains []string `pulumi:"domains"`
	// ID of TLS subscription. Conflicts with all the other filters.
	Id *string `pulumi:"id"`
}

// A collection of values returned by getTlsSubscription.
type LookupTlsSubscriptionResult struct {
	// The entity that issues and certifies the TLS certificates for the subscription.
	CertificateAuthority string `pulumi:"certificateAuthority"`
	// List of certificate IDs associated with the Subscription.
	CertificateIds []string `pulumi:"certificateIds"`
	// The common name associated with the subscription generated by Fastly TLS.
	CommonName string `pulumi:"commonName"`
	// ID of TLS configuration used to terminate TLS traffic.
	ConfigurationId string `pulumi:"configurationId"`
	// Timestamp (GMT) when subscription was created.
	CreatedAt string `pulumi:"createdAt"`
	// List of domains on which to enable TLS.
	Domains []string `pulumi:"domains"`
	// ID of TLS subscription. Conflicts with all the other filters.
	Id string `pulumi:"id"`
	// The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.
	State string `pulumi:"state"`
	// Timestamp (GMT) when subscription was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func LookupTlsSubscriptionOutput(ctx *pulumi.Context, args LookupTlsSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupTlsSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTlsSubscriptionResultOutput, error) {
			args := v.(LookupTlsSubscriptionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fastly:index/getTlsSubscription:getTlsSubscription", args, LookupTlsSubscriptionResultOutput{}, options).(LookupTlsSubscriptionResultOutput), nil
		}).(LookupTlsSubscriptionResultOutput)
}

// A collection of arguments for invoking getTlsSubscription.
type LookupTlsSubscriptionOutputArgs struct {
	// The entity that issues and certifies the TLS certificates for the subscription.
	CertificateAuthority pulumi.StringPtrInput `pulumi:"certificateAuthority"`
	// ID of TLS configuration used to terminate TLS traffic.
	ConfigurationId pulumi.StringPtrInput `pulumi:"configurationId"`
	// List of domains on which to enable TLS.
	Domains pulumi.StringArrayInput `pulumi:"domains"`
	// ID of TLS subscription. Conflicts with all the other filters.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (LookupTlsSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTlsSubscriptionArgs)(nil)).Elem()
}

// A collection of values returned by getTlsSubscription.
type LookupTlsSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupTlsSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTlsSubscriptionResult)(nil)).Elem()
}

func (o LookupTlsSubscriptionResultOutput) ToLookupTlsSubscriptionResultOutput() LookupTlsSubscriptionResultOutput {
	return o
}

func (o LookupTlsSubscriptionResultOutput) ToLookupTlsSubscriptionResultOutputWithContext(ctx context.Context) LookupTlsSubscriptionResultOutput {
	return o
}

// The entity that issues and certifies the TLS certificates for the subscription.
func (o LookupTlsSubscriptionResultOutput) CertificateAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) string { return v.CertificateAuthority }).(pulumi.StringOutput)
}

// List of certificate IDs associated with the Subscription.
func (o LookupTlsSubscriptionResultOutput) CertificateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) []string { return v.CertificateIds }).(pulumi.StringArrayOutput)
}

// The common name associated with the subscription generated by Fastly TLS.
func (o LookupTlsSubscriptionResultOutput) CommonName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) string { return v.CommonName }).(pulumi.StringOutput)
}

// ID of TLS configuration used to terminate TLS traffic.
func (o LookupTlsSubscriptionResultOutput) ConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) string { return v.ConfigurationId }).(pulumi.StringOutput)
}

// Timestamp (GMT) when subscription was created.
func (o LookupTlsSubscriptionResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// List of domains on which to enable TLS.
func (o LookupTlsSubscriptionResultOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

// ID of TLS subscription. Conflicts with all the other filters.
func (o LookupTlsSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// The current state of the subscription. The list of possible states are: `pending`, `processing`, `issued`, and `renewing`.
func (o LookupTlsSubscriptionResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) string { return v.State }).(pulumi.StringOutput)
}

// Timestamp (GMT) when subscription was last updated.
func (o LookupTlsSubscriptionResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTlsSubscriptionResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTlsSubscriptionResultOutput{})
}
