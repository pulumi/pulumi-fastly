// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get a Fastly Next-Gen WAF Alert Slack integration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ngwafSlackAlerts, err := fastly.LookupNgwafAlertSlackIntegration(ctx, &fastly.LookupNgwafAlertSlackIntegrationArgs{
//				WorkspaceId: example.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("ngwafSlackAlertsAll", ngwafSlackAlerts)
//			return nil
//		})
//	}
//
// ```
func LookupNgwafAlertSlackIntegration(ctx *pulumi.Context, args *LookupNgwafAlertSlackIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupNgwafAlertSlackIntegrationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNgwafAlertSlackIntegrationResult
	err := ctx.Invoke("fastly:index/getNgwafAlertSlackIntegration:getNgwafAlertSlackIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNgwafAlertSlackIntegration.
type LookupNgwafAlertSlackIntegrationArgs struct {
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// A collection of values returned by getNgwafAlertSlackIntegration.
type LookupNgwafAlertSlackIntegrationResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// List of all Slack alerts for a workspace.
	SlackAlerts []GetNgwafAlertSlackIntegrationSlackAlert `pulumi:"slackAlerts"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupNgwafAlertSlackIntegrationOutput(ctx *pulumi.Context, args LookupNgwafAlertSlackIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupNgwafAlertSlackIntegrationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNgwafAlertSlackIntegrationResultOutput, error) {
			args := v.(LookupNgwafAlertSlackIntegrationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("fastly:index/getNgwafAlertSlackIntegration:getNgwafAlertSlackIntegration", args, LookupNgwafAlertSlackIntegrationResultOutput{}, options).(LookupNgwafAlertSlackIntegrationResultOutput), nil
		}).(LookupNgwafAlertSlackIntegrationResultOutput)
}

// A collection of arguments for invoking getNgwafAlertSlackIntegration.
type LookupNgwafAlertSlackIntegrationOutputArgs struct {
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput `pulumi:"workspaceId"`
}

func (LookupNgwafAlertSlackIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNgwafAlertSlackIntegrationArgs)(nil)).Elem()
}

// A collection of values returned by getNgwafAlertSlackIntegration.
type LookupNgwafAlertSlackIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupNgwafAlertSlackIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNgwafAlertSlackIntegrationResult)(nil)).Elem()
}

func (o LookupNgwafAlertSlackIntegrationResultOutput) ToLookupNgwafAlertSlackIntegrationResultOutput() LookupNgwafAlertSlackIntegrationResultOutput {
	return o
}

func (o LookupNgwafAlertSlackIntegrationResultOutput) ToLookupNgwafAlertSlackIntegrationResultOutputWithContext(ctx context.Context) LookupNgwafAlertSlackIntegrationResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNgwafAlertSlackIntegrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgwafAlertSlackIntegrationResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of all Slack alerts for a workspace.
func (o LookupNgwafAlertSlackIntegrationResultOutput) SlackAlerts() GetNgwafAlertSlackIntegrationSlackAlertArrayOutput {
	return o.ApplyT(func(v LookupNgwafAlertSlackIntegrationResult) []GetNgwafAlertSlackIntegrationSlackAlert {
		return v.SlackAlerts
	}).(GetNgwafAlertSlackIntegrationSlackAlertArrayOutput)
}

// The ID of the workspace.
func (o LookupNgwafAlertSlackIntegrationResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNgwafAlertSlackIntegrationResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNgwafAlertSlackIntegrationResultOutput{})
}
