// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v9/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DomainV1 struct {
	pulumi.CustomResourceState

	// The Domain Identifier (UUID).
	DomainId pulumi.StringOutput `pulumi:"domainId"`
	// The fully-qualified domain name for your domain (e.g. `www.example.com`, no trailing dot). Can be created, but not updated.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// The serviceId associated with your domain or null if there is no association.
	ServiceId pulumi.StringPtrOutput `pulumi:"serviceId"`
}

// NewDomainV1 registers a new resource with the given unique name, arguments, and options.
func NewDomainV1(ctx *pulumi.Context,
	name string, args *DomainV1Args, opts ...pulumi.ResourceOption) (*DomainV1, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Fqdn == nil {
		return nil, errors.New("invalid value for required argument 'Fqdn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainV1
	err := ctx.RegisterResource("fastly:index/domainV1:DomainV1", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainV1 gets an existing DomainV1 resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainV1(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainV1State, opts ...pulumi.ResourceOption) (*DomainV1, error) {
	var resource DomainV1
	err := ctx.ReadResource("fastly:index/domainV1:DomainV1", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainV1 resources.
type domainV1State struct {
	// The Domain Identifier (UUID).
	DomainId *string `pulumi:"domainId"`
	// The fully-qualified domain name for your domain (e.g. `www.example.com`, no trailing dot). Can be created, but not updated.
	Fqdn *string `pulumi:"fqdn"`
	// The serviceId associated with your domain or null if there is no association.
	ServiceId *string `pulumi:"serviceId"`
}

type DomainV1State struct {
	// The Domain Identifier (UUID).
	DomainId pulumi.StringPtrInput
	// The fully-qualified domain name for your domain (e.g. `www.example.com`, no trailing dot). Can be created, but not updated.
	Fqdn pulumi.StringPtrInput
	// The serviceId associated with your domain or null if there is no association.
	ServiceId pulumi.StringPtrInput
}

func (DomainV1State) ElementType() reflect.Type {
	return reflect.TypeOf((*domainV1State)(nil)).Elem()
}

type domainV1Args struct {
	// The fully-qualified domain name for your domain (e.g. `www.example.com`, no trailing dot). Can be created, but not updated.
	Fqdn string `pulumi:"fqdn"`
	// The serviceId associated with your domain or null if there is no association.
	ServiceId *string `pulumi:"serviceId"`
}

// The set of arguments for constructing a DomainV1 resource.
type DomainV1Args struct {
	// The fully-qualified domain name for your domain (e.g. `www.example.com`, no trailing dot). Can be created, but not updated.
	Fqdn pulumi.StringInput
	// The serviceId associated with your domain or null if there is no association.
	ServiceId pulumi.StringPtrInput
}

func (DomainV1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*domainV1Args)(nil)).Elem()
}

type DomainV1Input interface {
	pulumi.Input

	ToDomainV1Output() DomainV1Output
	ToDomainV1OutputWithContext(ctx context.Context) DomainV1Output
}

func (*DomainV1) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainV1)(nil)).Elem()
}

func (i *DomainV1) ToDomainV1Output() DomainV1Output {
	return i.ToDomainV1OutputWithContext(context.Background())
}

func (i *DomainV1) ToDomainV1OutputWithContext(ctx context.Context) DomainV1Output {
	return pulumi.ToOutputWithContext(ctx, i).(DomainV1Output)
}

// DomainV1ArrayInput is an input type that accepts DomainV1Array and DomainV1ArrayOutput values.
// You can construct a concrete instance of `DomainV1ArrayInput` via:
//
//	DomainV1Array{ DomainV1Args{...} }
type DomainV1ArrayInput interface {
	pulumi.Input

	ToDomainV1ArrayOutput() DomainV1ArrayOutput
	ToDomainV1ArrayOutputWithContext(context.Context) DomainV1ArrayOutput
}

type DomainV1Array []DomainV1Input

func (DomainV1Array) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainV1)(nil)).Elem()
}

func (i DomainV1Array) ToDomainV1ArrayOutput() DomainV1ArrayOutput {
	return i.ToDomainV1ArrayOutputWithContext(context.Background())
}

func (i DomainV1Array) ToDomainV1ArrayOutputWithContext(ctx context.Context) DomainV1ArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainV1ArrayOutput)
}

// DomainV1MapInput is an input type that accepts DomainV1Map and DomainV1MapOutput values.
// You can construct a concrete instance of `DomainV1MapInput` via:
//
//	DomainV1Map{ "key": DomainV1Args{...} }
type DomainV1MapInput interface {
	pulumi.Input

	ToDomainV1MapOutput() DomainV1MapOutput
	ToDomainV1MapOutputWithContext(context.Context) DomainV1MapOutput
}

type DomainV1Map map[string]DomainV1Input

func (DomainV1Map) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainV1)(nil)).Elem()
}

func (i DomainV1Map) ToDomainV1MapOutput() DomainV1MapOutput {
	return i.ToDomainV1MapOutputWithContext(context.Background())
}

func (i DomainV1Map) ToDomainV1MapOutputWithContext(ctx context.Context) DomainV1MapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainV1MapOutput)
}

type DomainV1Output struct{ *pulumi.OutputState }

func (DomainV1Output) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainV1)(nil)).Elem()
}

func (o DomainV1Output) ToDomainV1Output() DomainV1Output {
	return o
}

func (o DomainV1Output) ToDomainV1OutputWithContext(ctx context.Context) DomainV1Output {
	return o
}

// The Domain Identifier (UUID).
func (o DomainV1Output) DomainId() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainV1) pulumi.StringOutput { return v.DomainId }).(pulumi.StringOutput)
}

// The fully-qualified domain name for your domain (e.g. `www.example.com`, no trailing dot). Can be created, but not updated.
func (o DomainV1Output) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainV1) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// The serviceId associated with your domain or null if there is no association.
func (o DomainV1Output) ServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainV1) pulumi.StringPtrOutput { return v.ServiceId }).(pulumi.StringPtrOutput)
}

type DomainV1ArrayOutput struct{ *pulumi.OutputState }

func (DomainV1ArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainV1)(nil)).Elem()
}

func (o DomainV1ArrayOutput) ToDomainV1ArrayOutput() DomainV1ArrayOutput {
	return o
}

func (o DomainV1ArrayOutput) ToDomainV1ArrayOutputWithContext(ctx context.Context) DomainV1ArrayOutput {
	return o
}

func (o DomainV1ArrayOutput) Index(i pulumi.IntInput) DomainV1Output {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainV1 {
		return vs[0].([]*DomainV1)[vs[1].(int)]
	}).(DomainV1Output)
}

type DomainV1MapOutput struct{ *pulumi.OutputState }

func (DomainV1MapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainV1)(nil)).Elem()
}

func (o DomainV1MapOutput) ToDomainV1MapOutput() DomainV1MapOutput {
	return o
}

func (o DomainV1MapOutput) ToDomainV1MapOutputWithContext(ctx context.Context) DomainV1MapOutput {
	return o
}

func (o DomainV1MapOutput) MapIndex(k pulumi.StringInput) DomainV1Output {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainV1 {
		return vs[0].(map[string]*DomainV1)[vs[1].(string)]
	}).(DomainV1Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainV1Input)(nil)).Elem(), &DomainV1{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainV1ArrayInput)(nil)).Elem(), DomainV1Array{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainV1MapInput)(nil)).Elem(), DomainV1Map{})
	pulumi.RegisterOutputType(DomainV1Output{})
	pulumi.RegisterOutputType(DomainV1ArrayOutput{})
	pulumi.RegisterOutputType(DomainV1MapOutput{})
}
