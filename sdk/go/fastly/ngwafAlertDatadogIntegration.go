// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides Fastly Next-Gen WAF Alert Datadog integrations, which provide a connection to Datadog.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fastly.NewNgwafAlertDatadogIntegration(ctx, "demo_datadog_alert", &fastly.NgwafAlertDatadogIntegrationArgs{
//				Description: pulumi.String("Some Description"),
//				Key:         pulumi.String("123456789"),
//				Site:        pulumi.String("us1"),
//				WorkspaceId: pulumi.Any(demo.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF Alert Datadog integrations can be imported using their ID and the ID of the workspace they belong to.
//
// ```sh
// $ pulumi import fastly:index/ngwafAlertDatadogIntegration:NgwafAlertDatadogIntegration example <workspace_id>/<alert_id>
// ```
type NgwafAlertDatadogIntegration struct {
	pulumi.CustomResourceState

	// The description of the alert.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Datadog key.
	Key pulumi.StringOutput `pulumi:"key"`
	// The Datadog site.
	Site pulumi.StringOutput `pulumi:"site"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafAlertDatadogIntegration registers a new resource with the given unique name, arguments, and options.
func NewNgwafAlertDatadogIntegration(ctx *pulumi.Context,
	name string, args *NgwafAlertDatadogIntegrationArgs, opts ...pulumi.ResourceOption) (*NgwafAlertDatadogIntegration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.Site == nil {
		return nil, errors.New("invalid value for required argument 'Site'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	if args.Key != nil {
		args.Key = pulumi.ToSecret(args.Key).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"key",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafAlertDatadogIntegration
	err := ctx.RegisterResource("fastly:index/ngwafAlertDatadogIntegration:NgwafAlertDatadogIntegration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafAlertDatadogIntegration gets an existing NgwafAlertDatadogIntegration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafAlertDatadogIntegration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafAlertDatadogIntegrationState, opts ...pulumi.ResourceOption) (*NgwafAlertDatadogIntegration, error) {
	var resource NgwafAlertDatadogIntegration
	err := ctx.ReadResource("fastly:index/ngwafAlertDatadogIntegration:NgwafAlertDatadogIntegration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafAlertDatadogIntegration resources.
type ngwafAlertDatadogIntegrationState struct {
	// The description of the alert.
	Description *string `pulumi:"description"`
	// The Datadog key.
	Key *string `pulumi:"key"`
	// The Datadog site.
	Site *string `pulumi:"site"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafAlertDatadogIntegrationState struct {
	// The description of the alert.
	Description pulumi.StringPtrInput
	// The Datadog key.
	Key pulumi.StringPtrInput
	// The Datadog site.
	Site pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafAlertDatadogIntegrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAlertDatadogIntegrationState)(nil)).Elem()
}

type ngwafAlertDatadogIntegrationArgs struct {
	// The description of the alert.
	Description *string `pulumi:"description"`
	// The Datadog key.
	Key string `pulumi:"key"`
	// The Datadog site.
	Site string `pulumi:"site"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafAlertDatadogIntegration resource.
type NgwafAlertDatadogIntegrationArgs struct {
	// The description of the alert.
	Description pulumi.StringPtrInput
	// The Datadog key.
	Key pulumi.StringInput
	// The Datadog site.
	Site pulumi.StringInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (NgwafAlertDatadogIntegrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafAlertDatadogIntegrationArgs)(nil)).Elem()
}

type NgwafAlertDatadogIntegrationInput interface {
	pulumi.Input

	ToNgwafAlertDatadogIntegrationOutput() NgwafAlertDatadogIntegrationOutput
	ToNgwafAlertDatadogIntegrationOutputWithContext(ctx context.Context) NgwafAlertDatadogIntegrationOutput
}

func (*NgwafAlertDatadogIntegration) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAlertDatadogIntegration)(nil)).Elem()
}

func (i *NgwafAlertDatadogIntegration) ToNgwafAlertDatadogIntegrationOutput() NgwafAlertDatadogIntegrationOutput {
	return i.ToNgwafAlertDatadogIntegrationOutputWithContext(context.Background())
}

func (i *NgwafAlertDatadogIntegration) ToNgwafAlertDatadogIntegrationOutputWithContext(ctx context.Context) NgwafAlertDatadogIntegrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertDatadogIntegrationOutput)
}

// NgwafAlertDatadogIntegrationArrayInput is an input type that accepts NgwafAlertDatadogIntegrationArray and NgwafAlertDatadogIntegrationArrayOutput values.
// You can construct a concrete instance of `NgwafAlertDatadogIntegrationArrayInput` via:
//
//	NgwafAlertDatadogIntegrationArray{ NgwafAlertDatadogIntegrationArgs{...} }
type NgwafAlertDatadogIntegrationArrayInput interface {
	pulumi.Input

	ToNgwafAlertDatadogIntegrationArrayOutput() NgwafAlertDatadogIntegrationArrayOutput
	ToNgwafAlertDatadogIntegrationArrayOutputWithContext(context.Context) NgwafAlertDatadogIntegrationArrayOutput
}

type NgwafAlertDatadogIntegrationArray []NgwafAlertDatadogIntegrationInput

func (NgwafAlertDatadogIntegrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAlertDatadogIntegration)(nil)).Elem()
}

func (i NgwafAlertDatadogIntegrationArray) ToNgwafAlertDatadogIntegrationArrayOutput() NgwafAlertDatadogIntegrationArrayOutput {
	return i.ToNgwafAlertDatadogIntegrationArrayOutputWithContext(context.Background())
}

func (i NgwafAlertDatadogIntegrationArray) ToNgwafAlertDatadogIntegrationArrayOutputWithContext(ctx context.Context) NgwafAlertDatadogIntegrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertDatadogIntegrationArrayOutput)
}

// NgwafAlertDatadogIntegrationMapInput is an input type that accepts NgwafAlertDatadogIntegrationMap and NgwafAlertDatadogIntegrationMapOutput values.
// You can construct a concrete instance of `NgwafAlertDatadogIntegrationMapInput` via:
//
//	NgwafAlertDatadogIntegrationMap{ "key": NgwafAlertDatadogIntegrationArgs{...} }
type NgwafAlertDatadogIntegrationMapInput interface {
	pulumi.Input

	ToNgwafAlertDatadogIntegrationMapOutput() NgwafAlertDatadogIntegrationMapOutput
	ToNgwafAlertDatadogIntegrationMapOutputWithContext(context.Context) NgwafAlertDatadogIntegrationMapOutput
}

type NgwafAlertDatadogIntegrationMap map[string]NgwafAlertDatadogIntegrationInput

func (NgwafAlertDatadogIntegrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAlertDatadogIntegration)(nil)).Elem()
}

func (i NgwafAlertDatadogIntegrationMap) ToNgwafAlertDatadogIntegrationMapOutput() NgwafAlertDatadogIntegrationMapOutput {
	return i.ToNgwafAlertDatadogIntegrationMapOutputWithContext(context.Background())
}

func (i NgwafAlertDatadogIntegrationMap) ToNgwafAlertDatadogIntegrationMapOutputWithContext(ctx context.Context) NgwafAlertDatadogIntegrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafAlertDatadogIntegrationMapOutput)
}

type NgwafAlertDatadogIntegrationOutput struct{ *pulumi.OutputState }

func (NgwafAlertDatadogIntegrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafAlertDatadogIntegration)(nil)).Elem()
}

func (o NgwafAlertDatadogIntegrationOutput) ToNgwafAlertDatadogIntegrationOutput() NgwafAlertDatadogIntegrationOutput {
	return o
}

func (o NgwafAlertDatadogIntegrationOutput) ToNgwafAlertDatadogIntegrationOutputWithContext(ctx context.Context) NgwafAlertDatadogIntegrationOutput {
	return o
}

// The description of the alert.
func (o NgwafAlertDatadogIntegrationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafAlertDatadogIntegration) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Datadog key.
func (o NgwafAlertDatadogIntegrationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertDatadogIntegration) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// The Datadog site.
func (o NgwafAlertDatadogIntegrationOutput) Site() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertDatadogIntegration) pulumi.StringOutput { return v.Site }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o NgwafAlertDatadogIntegrationOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafAlertDatadogIntegration) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafAlertDatadogIntegrationArrayOutput struct{ *pulumi.OutputState }

func (NgwafAlertDatadogIntegrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafAlertDatadogIntegration)(nil)).Elem()
}

func (o NgwafAlertDatadogIntegrationArrayOutput) ToNgwafAlertDatadogIntegrationArrayOutput() NgwafAlertDatadogIntegrationArrayOutput {
	return o
}

func (o NgwafAlertDatadogIntegrationArrayOutput) ToNgwafAlertDatadogIntegrationArrayOutputWithContext(ctx context.Context) NgwafAlertDatadogIntegrationArrayOutput {
	return o
}

func (o NgwafAlertDatadogIntegrationArrayOutput) Index(i pulumi.IntInput) NgwafAlertDatadogIntegrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafAlertDatadogIntegration {
		return vs[0].([]*NgwafAlertDatadogIntegration)[vs[1].(int)]
	}).(NgwafAlertDatadogIntegrationOutput)
}

type NgwafAlertDatadogIntegrationMapOutput struct{ *pulumi.OutputState }

func (NgwafAlertDatadogIntegrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafAlertDatadogIntegration)(nil)).Elem()
}

func (o NgwafAlertDatadogIntegrationMapOutput) ToNgwafAlertDatadogIntegrationMapOutput() NgwafAlertDatadogIntegrationMapOutput {
	return o
}

func (o NgwafAlertDatadogIntegrationMapOutput) ToNgwafAlertDatadogIntegrationMapOutputWithContext(ctx context.Context) NgwafAlertDatadogIntegrationMapOutput {
	return o
}

func (o NgwafAlertDatadogIntegrationMapOutput) MapIndex(k pulumi.StringInput) NgwafAlertDatadogIntegrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafAlertDatadogIntegration {
		return vs[0].(map[string]*NgwafAlertDatadogIntegration)[vs[1].(string)]
	}).(NgwafAlertDatadogIntegrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertDatadogIntegrationInput)(nil)).Elem(), &NgwafAlertDatadogIntegration{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertDatadogIntegrationArrayInput)(nil)).Elem(), NgwafAlertDatadogIntegrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafAlertDatadogIntegrationMapInput)(nil)).Elem(), NgwafAlertDatadogIntegrationMap{})
	pulumi.RegisterOutputType(NgwafAlertDatadogIntegrationOutput{})
	pulumi.RegisterOutputType(NgwafAlertDatadogIntegrationArrayOutput{})
	pulumi.RegisterOutputType(NgwafAlertDatadogIntegrationMapOutput{})
}
