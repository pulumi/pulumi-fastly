// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to get the ID of a TLS configuration for use with other resources.
//
// > **Warning:** The data source's filters are applied using an **AND** boolean operator, so depending on the combination
// of filters, they may become mutually exclusive. The exception to this is `id` which must not be specified in combination
// with any of the others.
//
// > **Note:** If more or less than a single match is returned by the search, this provider will fail. Ensure that your search is specific enough to return a single key.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v5/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTlsConfiguration, err := fastly.GetTlsConfiguration(ctx, &fastly.GetTlsConfigurationArgs{
//				Default: pulumi.BoolRef(true),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewTlsActivation(ctx, "exampleTlsActivation", &fastly.TlsActivationArgs{
//				ConfigurationId: *pulumi.String(exampleTlsConfiguration.Id),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTlsConfiguration(ctx *pulumi.Context, args *GetTlsConfigurationArgs, opts ...pulumi.InvokeOption) (*GetTlsConfigurationResult, error) {
	var rv GetTlsConfigurationResult
	err := ctx.Invoke("fastly:index/getTlsConfiguration:getTlsConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTlsConfiguration.
type GetTlsConfigurationArgs struct {
	// Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
	Default *bool `pulumi:"default"`
	// HTTP protocols available on the TLS configuration.
	HttpProtocols []string `pulumi:"httpProtocols"`
	// ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
	Id *string `pulumi:"id"`
	// Custom name of the TLS configuration.
	Name *string `pulumi:"name"`
	// TLS protocols available on the TLS configuration.
	TlsProtocols []string `pulumi:"tlsProtocols"`
	// Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
	TlsService *string `pulumi:"tlsService"`
}

// A collection of values returned by getTlsConfiguration.
type GetTlsConfigurationResult struct {
	// Timestamp (GMT) when the configuration was created.
	CreatedAt string `pulumi:"createdAt"`
	// Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
	Default bool `pulumi:"default"`
	// The available DNS addresses that can be used to enable TLS for a domain. DNS must be configured for a domain for TLS handshakes to succeed. If enabling TLS on an apex domain (e.g. `example.com`) you must create four A records (or four AAAA records for IPv6 support) using the displayed global A record's IP addresses with your DNS provider. For subdomains and wildcard domains (e.g. `www.example.com` or `*.example.com`) you will need to create a relevant CNAME record.
	DnsRecords []GetTlsConfigurationDnsRecord `pulumi:"dnsRecords"`
	// HTTP protocols available on the TLS configuration.
	HttpProtocols []string `pulumi:"httpProtocols"`
	// ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
	Id string `pulumi:"id"`
	// Custom name of the TLS configuration.
	Name string `pulumi:"name"`
	// TLS protocols available on the TLS configuration.
	TlsProtocols []string `pulumi:"tlsProtocols"`
	// Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
	TlsService string `pulumi:"tlsService"`
	// Timestamp (GMT) when the configuration was last updated.
	UpdatedAt string `pulumi:"updatedAt"`
}

func GetTlsConfigurationOutput(ctx *pulumi.Context, args GetTlsConfigurationOutputArgs, opts ...pulumi.InvokeOption) GetTlsConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTlsConfigurationResult, error) {
			args := v.(GetTlsConfigurationArgs)
			r, err := GetTlsConfiguration(ctx, &args, opts...)
			var s GetTlsConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTlsConfigurationResultOutput)
}

// A collection of arguments for invoking getTlsConfiguration.
type GetTlsConfigurationOutputArgs struct {
	// Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
	Default pulumi.BoolPtrInput `pulumi:"default"`
	// HTTP protocols available on the TLS configuration.
	HttpProtocols pulumi.StringArrayInput `pulumi:"httpProtocols"`
	// ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Custom name of the TLS configuration.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// TLS protocols available on the TLS configuration.
	TlsProtocols pulumi.StringArrayInput `pulumi:"tlsProtocols"`
	// Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
	TlsService pulumi.StringPtrInput `pulumi:"tlsService"`
}

func (GetTlsConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTlsConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getTlsConfiguration.
type GetTlsConfigurationResultOutput struct{ *pulumi.OutputState }

func (GetTlsConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTlsConfigurationResult)(nil)).Elem()
}

func (o GetTlsConfigurationResultOutput) ToGetTlsConfigurationResultOutput() GetTlsConfigurationResultOutput {
	return o
}

func (o GetTlsConfigurationResultOutput) ToGetTlsConfigurationResultOutputWithContext(ctx context.Context) GetTlsConfigurationResultOutput {
	return o
}

// Timestamp (GMT) when the configuration was created.
func (o GetTlsConfigurationResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Signifies whether Fastly will use this configuration as a default when creating a new TLS activation.
func (o GetTlsConfigurationResultOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) bool { return v.Default }).(pulumi.BoolOutput)
}

// The available DNS addresses that can be used to enable TLS for a domain. DNS must be configured for a domain for TLS handshakes to succeed. If enabling TLS on an apex domain (e.g. `example.com`) you must create four A records (or four AAAA records for IPv6 support) using the displayed global A record's IP addresses with your DNS provider. For subdomains and wildcard domains (e.g. `www.example.com` or `*.example.com`) you will need to create a relevant CNAME record.
func (o GetTlsConfigurationResultOutput) DnsRecords() GetTlsConfigurationDnsRecordArrayOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) []GetTlsConfigurationDnsRecord { return v.DnsRecords }).(GetTlsConfigurationDnsRecordArrayOutput)
}

// HTTP protocols available on the TLS configuration.
func (o GetTlsConfigurationResultOutput) HttpProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) []string { return v.HttpProtocols }).(pulumi.StringArrayOutput)
}

// ID of the TLS configuration obtained from the Fastly API or another data source. Conflicts with all the other filters.
func (o GetTlsConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Custom name of the TLS configuration.
func (o GetTlsConfigurationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) string { return v.Name }).(pulumi.StringOutput)
}

// TLS protocols available on the TLS configuration.
func (o GetTlsConfigurationResultOutput) TlsProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) []string { return v.TlsProtocols }).(pulumi.StringArrayOutput)
}

// Whether the configuration should support the `PLATFORM` or `CUSTOM` TLS service.
func (o GetTlsConfigurationResultOutput) TlsService() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) string { return v.TlsService }).(pulumi.StringOutput)
}

// Timestamp (GMT) when the configuration was last updated.
func (o GetTlsConfigurationResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetTlsConfigurationResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTlsConfigurationResultOutput{})
}
