// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Next-Gen WAF Workspace Signal, scoped to a specific NGWAF workspace.\
// These signals define conditions and actions that trigger WAF enforcement at the workspace level.
//
// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := fastly.NewNgwafWorkspace(ctx, "example", &fastly.NgwafWorkspaceArgs{
//				Name:            pulumi.String("example"),
//				Description:     pulumi.String("Test NGWAF Workspace"),
//				Mode:            pulumi.String("block"),
//				IpAnonymization: pulumi.String("hashed"),
//				ClientIpHeaders: pulumi.StringArray{
//					pulumi.String("X-Forwarded-For"),
//					pulumi.String("X-Real-IP"),
//				},
//				DefaultBlockingResponseCode: pulumi.Int(429),
//				AttackSignalThresholds:      &fastly.NgwafWorkspaceAttackSignalThresholdsArgs{},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewNgwafWorkspaceSignal(ctx, "example", &fastly.NgwafWorkspaceSignalArgs{
//				WorkspaceId: example.ID(),
//				Description: pulumi.String("example"),
//				Name:        pulumi.String("Test Name"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Next-Gen WAF workspace signals can be imported using the format `<workspaceID>/<signalID>`, e.g.:
//
// ```sh
// $ pulumi import fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal demo <workspaceID>/<signalID>
// ```
type NgwafWorkspaceSignal struct {
	pulumi.CustomResourceState

	// The description of the signal.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the signal. Special characters and periods are not accepted.
	Name pulumi.StringOutput `pulumi:"name"`
	// The generated reference ID of the signal.
	ReferenceId pulumi.StringOutput `pulumi:"referenceId"`
	// The ID of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewNgwafWorkspaceSignal registers a new resource with the given unique name, arguments, and options.
func NewNgwafWorkspaceSignal(ctx *pulumi.Context,
	name string, args *NgwafWorkspaceSignalArgs, opts ...pulumi.ResourceOption) (*NgwafWorkspaceSignal, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafWorkspaceSignal
	err := ctx.RegisterResource("fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafWorkspaceSignal gets an existing NgwafWorkspaceSignal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafWorkspaceSignal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafWorkspaceSignalState, opts ...pulumi.ResourceOption) (*NgwafWorkspaceSignal, error) {
	var resource NgwafWorkspaceSignal
	err := ctx.ReadResource("fastly:index/ngwafWorkspaceSignal:NgwafWorkspaceSignal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafWorkspaceSignal resources.
type ngwafWorkspaceSignalState struct {
	// The description of the signal.
	Description *string `pulumi:"description"`
	// The name of the signal. Special characters and periods are not accepted.
	Name *string `pulumi:"name"`
	// The generated reference ID of the signal.
	ReferenceId *string `pulumi:"referenceId"`
	// The ID of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type NgwafWorkspaceSignalState struct {
	// The description of the signal.
	Description pulumi.StringPtrInput
	// The name of the signal. Special characters and periods are not accepted.
	Name pulumi.StringPtrInput
	// The generated reference ID of the signal.
	ReferenceId pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (NgwafWorkspaceSignalState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafWorkspaceSignalState)(nil)).Elem()
}

type ngwafWorkspaceSignalArgs struct {
	// The description of the signal.
	Description *string `pulumi:"description"`
	// The name of the signal. Special characters and periods are not accepted.
	Name *string `pulumi:"name"`
	// The ID of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a NgwafWorkspaceSignal resource.
type NgwafWorkspaceSignalArgs struct {
	// The description of the signal.
	Description pulumi.StringPtrInput
	// The name of the signal. Special characters and periods are not accepted.
	Name pulumi.StringPtrInput
	// The ID of the workspace.
	WorkspaceId pulumi.StringInput
}

func (NgwafWorkspaceSignalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafWorkspaceSignalArgs)(nil)).Elem()
}

type NgwafWorkspaceSignalInput interface {
	pulumi.Input

	ToNgwafWorkspaceSignalOutput() NgwafWorkspaceSignalOutput
	ToNgwafWorkspaceSignalOutputWithContext(ctx context.Context) NgwafWorkspaceSignalOutput
}

func (*NgwafWorkspaceSignal) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafWorkspaceSignal)(nil)).Elem()
}

func (i *NgwafWorkspaceSignal) ToNgwafWorkspaceSignalOutput() NgwafWorkspaceSignalOutput {
	return i.ToNgwafWorkspaceSignalOutputWithContext(context.Background())
}

func (i *NgwafWorkspaceSignal) ToNgwafWorkspaceSignalOutputWithContext(ctx context.Context) NgwafWorkspaceSignalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceSignalOutput)
}

// NgwafWorkspaceSignalArrayInput is an input type that accepts NgwafWorkspaceSignalArray and NgwafWorkspaceSignalArrayOutput values.
// You can construct a concrete instance of `NgwafWorkspaceSignalArrayInput` via:
//
//	NgwafWorkspaceSignalArray{ NgwafWorkspaceSignalArgs{...} }
type NgwafWorkspaceSignalArrayInput interface {
	pulumi.Input

	ToNgwafWorkspaceSignalArrayOutput() NgwafWorkspaceSignalArrayOutput
	ToNgwafWorkspaceSignalArrayOutputWithContext(context.Context) NgwafWorkspaceSignalArrayOutput
}

type NgwafWorkspaceSignalArray []NgwafWorkspaceSignalInput

func (NgwafWorkspaceSignalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafWorkspaceSignal)(nil)).Elem()
}

func (i NgwafWorkspaceSignalArray) ToNgwafWorkspaceSignalArrayOutput() NgwafWorkspaceSignalArrayOutput {
	return i.ToNgwafWorkspaceSignalArrayOutputWithContext(context.Background())
}

func (i NgwafWorkspaceSignalArray) ToNgwafWorkspaceSignalArrayOutputWithContext(ctx context.Context) NgwafWorkspaceSignalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceSignalArrayOutput)
}

// NgwafWorkspaceSignalMapInput is an input type that accepts NgwafWorkspaceSignalMap and NgwafWorkspaceSignalMapOutput values.
// You can construct a concrete instance of `NgwafWorkspaceSignalMapInput` via:
//
//	NgwafWorkspaceSignalMap{ "key": NgwafWorkspaceSignalArgs{...} }
type NgwafWorkspaceSignalMapInput interface {
	pulumi.Input

	ToNgwafWorkspaceSignalMapOutput() NgwafWorkspaceSignalMapOutput
	ToNgwafWorkspaceSignalMapOutputWithContext(context.Context) NgwafWorkspaceSignalMapOutput
}

type NgwafWorkspaceSignalMap map[string]NgwafWorkspaceSignalInput

func (NgwafWorkspaceSignalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafWorkspaceSignal)(nil)).Elem()
}

func (i NgwafWorkspaceSignalMap) ToNgwafWorkspaceSignalMapOutput() NgwafWorkspaceSignalMapOutput {
	return i.ToNgwafWorkspaceSignalMapOutputWithContext(context.Background())
}

func (i NgwafWorkspaceSignalMap) ToNgwafWorkspaceSignalMapOutputWithContext(ctx context.Context) NgwafWorkspaceSignalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceSignalMapOutput)
}

type NgwafWorkspaceSignalOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceSignalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafWorkspaceSignal)(nil)).Elem()
}

func (o NgwafWorkspaceSignalOutput) ToNgwafWorkspaceSignalOutput() NgwafWorkspaceSignalOutput {
	return o
}

func (o NgwafWorkspaceSignalOutput) ToNgwafWorkspaceSignalOutputWithContext(ctx context.Context) NgwafWorkspaceSignalOutput {
	return o
}

// The description of the signal.
func (o NgwafWorkspaceSignalOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafWorkspaceSignal) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the signal. Special characters and periods are not accepted.
func (o NgwafWorkspaceSignalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspaceSignal) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The generated reference ID of the signal.
func (o NgwafWorkspaceSignalOutput) ReferenceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspaceSignal) pulumi.StringOutput { return v.ReferenceId }).(pulumi.StringOutput)
}

// The ID of the workspace.
func (o NgwafWorkspaceSignalOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspaceSignal) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type NgwafWorkspaceSignalArrayOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceSignalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafWorkspaceSignal)(nil)).Elem()
}

func (o NgwafWorkspaceSignalArrayOutput) ToNgwafWorkspaceSignalArrayOutput() NgwafWorkspaceSignalArrayOutput {
	return o
}

func (o NgwafWorkspaceSignalArrayOutput) ToNgwafWorkspaceSignalArrayOutputWithContext(ctx context.Context) NgwafWorkspaceSignalArrayOutput {
	return o
}

func (o NgwafWorkspaceSignalArrayOutput) Index(i pulumi.IntInput) NgwafWorkspaceSignalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafWorkspaceSignal {
		return vs[0].([]*NgwafWorkspaceSignal)[vs[1].(int)]
	}).(NgwafWorkspaceSignalOutput)
}

type NgwafWorkspaceSignalMapOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceSignalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafWorkspaceSignal)(nil)).Elem()
}

func (o NgwafWorkspaceSignalMapOutput) ToNgwafWorkspaceSignalMapOutput() NgwafWorkspaceSignalMapOutput {
	return o
}

func (o NgwafWorkspaceSignalMapOutput) ToNgwafWorkspaceSignalMapOutputWithContext(ctx context.Context) NgwafWorkspaceSignalMapOutput {
	return o
}

func (o NgwafWorkspaceSignalMapOutput) MapIndex(k pulumi.StringInput) NgwafWorkspaceSignalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafWorkspaceSignal {
		return vs[0].(map[string]*NgwafWorkspaceSignal)[vs[1].(string)]
	}).(NgwafWorkspaceSignalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceSignalInput)(nil)).Elem(), &NgwafWorkspaceSignal{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceSignalArrayInput)(nil)).Elem(), NgwafWorkspaceSignalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceSignalMapInput)(nil)).Elem(), NgwafWorkspaceSignalMap{})
	pulumi.RegisterOutputType(NgwafWorkspaceSignalOutput{})
	pulumi.RegisterOutputType(NgwafWorkspaceSignalArrayOutput{})
	pulumi.RegisterOutputType(NgwafWorkspaceSignalMapOutput{})
}
