// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VCL Snippets are blocks of VCL logic inserted into your service's configuration that don't require custom VCL.
//
// Use this data source to get a list of [Fastly VCL Snippets](https://www.fastly.com/documentation/reference/api/vcl-services/snippet/) for the specified service/version.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleServiceVcl, err := fastly.NewServiceVcl(ctx, "example", &fastly.ServiceVclArgs{
//				Name: pulumi.String("Example Service"),
//				Domains: fastly.ServiceVclDomainArray{
//					&fastly.ServiceVclDomainArgs{
//						Name: pulumi.String("example.com"),
//					},
//				},
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			example := fastly.GetVclSnippetsOutput(ctx, fastly.GetVclSnippetsOutputArgs{
//				ServiceId:      exampleServiceVcl.ID(),
//				ServiceVersion: exampleServiceVcl.ActiveVersion,
//			}, nil)
//			ctx.Export("serviceVclSnippets", example)
//			return nil
//		})
//	}
//
// ```
//
// [1]: https://www.fastly.com/documentation/reference/api/vcl-services/snippet/
func GetVclSnippets(ctx *pulumi.Context, args *GetVclSnippetsArgs, opts ...pulumi.InvokeOption) (*GetVclSnippetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVclSnippetsResult
	err := ctx.Invoke("fastly:index/getVclSnippets:getVclSnippets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVclSnippets.
type GetVclSnippetsArgs struct {
	// Alphanumeric string identifying the service.
	ServiceId string `pulumi:"serviceId"`
	// Integer identifying a service version.
	ServiceVersion int `pulumi:"serviceVersion"`
}

// A collection of values returned by getVclSnippets.
type GetVclSnippetsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Alphanumeric string identifying the service.
	ServiceId string `pulumi:"serviceId"`
	// Integer identifying a service version.
	ServiceVersion int `pulumi:"serviceVersion"`
	// List of all VCL snippets for the version of the service.
	VclSnippets []GetVclSnippetsVclSnippet `pulumi:"vclSnippets"`
}

func GetVclSnippetsOutput(ctx *pulumi.Context, args GetVclSnippetsOutputArgs, opts ...pulumi.InvokeOption) GetVclSnippetsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVclSnippetsResultOutput, error) {
			args := v.(GetVclSnippetsArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetVclSnippetsResult
			secret, err := ctx.InvokePackageRaw("fastly:index/getVclSnippets:getVclSnippets", args, &rv, "", opts...)
			if err != nil {
				return GetVclSnippetsResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetVclSnippetsResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetVclSnippetsResultOutput), nil
			}
			return output, nil
		}).(GetVclSnippetsResultOutput)
}

// A collection of arguments for invoking getVclSnippets.
type GetVclSnippetsOutputArgs struct {
	// Alphanumeric string identifying the service.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
	// Integer identifying a service version.
	ServiceVersion pulumi.IntInput `pulumi:"serviceVersion"`
}

func (GetVclSnippetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVclSnippetsArgs)(nil)).Elem()
}

// A collection of values returned by getVclSnippets.
type GetVclSnippetsResultOutput struct{ *pulumi.OutputState }

func (GetVclSnippetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVclSnippetsResult)(nil)).Elem()
}

func (o GetVclSnippetsResultOutput) ToGetVclSnippetsResultOutput() GetVclSnippetsResultOutput {
	return o
}

func (o GetVclSnippetsResultOutput) ToGetVclSnippetsResultOutputWithContext(ctx context.Context) GetVclSnippetsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVclSnippetsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVclSnippetsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Alphanumeric string identifying the service.
func (o GetVclSnippetsResultOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVclSnippetsResult) string { return v.ServiceId }).(pulumi.StringOutput)
}

// Integer identifying a service version.
func (o GetVclSnippetsResultOutput) ServiceVersion() pulumi.IntOutput {
	return o.ApplyT(func(v GetVclSnippetsResult) int { return v.ServiceVersion }).(pulumi.IntOutput)
}

// List of all VCL snippets for the version of the service.
func (o GetVclSnippetsResultOutput) VclSnippets() GetVclSnippetsVclSnippetArrayOutput {
	return o.ApplyT(func(v GetVclSnippetsResult) []GetVclSnippetsVclSnippet { return v.VclSnippets }).(GetVclSnippetsVclSnippetArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVclSnippetsResultOutput{})
}
