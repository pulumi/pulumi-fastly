// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v11/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Fastly Next-Gen WAF Workspace, representing a container for
// rules, signals, and various other resources that are offered by the
// Next-Gen WAF product.
//
// ## Example Usage
//
// Basic usage:
//
// ## Import
//
// Fastly Next-Gen WAF Workspaces can be imported using their workspace ID, e.g.
//
// ```sh
// $ pulumi import fastly:index/ngwafWorkspace:NgwafWorkspace demo xxxxxxxxxxxxxxxxxxxx
// ```
type NgwafWorkspace struct {
	pulumi.CustomResourceState

	// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
	AttackSignalThresholds NgwafWorkspaceAttackSignalThresholdsOutput `pulumi:"attackSignalThresholds"`
	// Specifies the request headers containing the client IP address. Maximum of 10 header names.
	ClientIpHeaders pulumi.StringArrayOutput `pulumi:"clientIpHeaders"`
	// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
	DefaultBlockingResponseCode pulumi.IntPtrOutput `pulumi:"defaultBlockingResponseCode"`
	// The description of the workspace
	Description pulumi.StringOutput `pulumi:"description"`
	// Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
	IpAnonymization pulumi.StringPtrOutput `pulumi:"ipAnonymization"`
	// The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
	Mode pulumi.StringOutput `pulumi:"mode"`
	// The display name of the workspace.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewNgwafWorkspace registers a new resource with the given unique name, arguments, and options.
func NewNgwafWorkspace(ctx *pulumi.Context,
	name string, args *NgwafWorkspaceArgs, opts ...pulumi.ResourceOption) (*NgwafWorkspace, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AttackSignalThresholds == nil {
		return nil, errors.New("invalid value for required argument 'AttackSignalThresholds'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.Mode == nil {
		return nil, errors.New("invalid value for required argument 'Mode'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NgwafWorkspace
	err := ctx.RegisterResource("fastly:index/ngwafWorkspace:NgwafWorkspace", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNgwafWorkspace gets an existing NgwafWorkspace resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNgwafWorkspace(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NgwafWorkspaceState, opts ...pulumi.ResourceOption) (*NgwafWorkspace, error) {
	var resource NgwafWorkspace
	err := ctx.ReadResource("fastly:index/ngwafWorkspace:NgwafWorkspace", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NgwafWorkspace resources.
type ngwafWorkspaceState struct {
	// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
	AttackSignalThresholds *NgwafWorkspaceAttackSignalThresholds `pulumi:"attackSignalThresholds"`
	// Specifies the request headers containing the client IP address. Maximum of 10 header names.
	ClientIpHeaders []string `pulumi:"clientIpHeaders"`
	// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
	DefaultBlockingResponseCode *int `pulumi:"defaultBlockingResponseCode"`
	// The description of the workspace
	Description *string `pulumi:"description"`
	// Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
	IpAnonymization *string `pulumi:"ipAnonymization"`
	// The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
	Mode *string `pulumi:"mode"`
	// The display name of the workspace.
	Name *string `pulumi:"name"`
}

type NgwafWorkspaceState struct {
	// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
	AttackSignalThresholds NgwafWorkspaceAttackSignalThresholdsPtrInput
	// Specifies the request headers containing the client IP address. Maximum of 10 header names.
	ClientIpHeaders pulumi.StringArrayInput
	// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
	DefaultBlockingResponseCode pulumi.IntPtrInput
	// The description of the workspace
	Description pulumi.StringPtrInput
	// Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
	IpAnonymization pulumi.StringPtrInput
	// The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
	Mode pulumi.StringPtrInput
	// The display name of the workspace.
	Name pulumi.StringPtrInput
}

func (NgwafWorkspaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafWorkspaceState)(nil)).Elem()
}

type ngwafWorkspaceArgs struct {
	// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
	AttackSignalThresholds NgwafWorkspaceAttackSignalThresholds `pulumi:"attackSignalThresholds"`
	// Specifies the request headers containing the client IP address. Maximum of 10 header names.
	ClientIpHeaders []string `pulumi:"clientIpHeaders"`
	// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
	DefaultBlockingResponseCode *int `pulumi:"defaultBlockingResponseCode"`
	// The description of the workspace
	Description string `pulumi:"description"`
	// Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
	IpAnonymization *string `pulumi:"ipAnonymization"`
	// The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
	Mode string `pulumi:"mode"`
	// The display name of the workspace.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a NgwafWorkspace resource.
type NgwafWorkspaceArgs struct {
	// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
	AttackSignalThresholds NgwafWorkspaceAttackSignalThresholdsInput
	// Specifies the request headers containing the client IP address. Maximum of 10 header names.
	ClientIpHeaders pulumi.StringArrayInput
	// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
	DefaultBlockingResponseCode pulumi.IntPtrInput
	// The description of the workspace
	Description pulumi.StringInput
	// Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
	IpAnonymization pulumi.StringPtrInput
	// The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
	Mode pulumi.StringInput
	// The display name of the workspace.
	Name pulumi.StringPtrInput
}

func (NgwafWorkspaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ngwafWorkspaceArgs)(nil)).Elem()
}

type NgwafWorkspaceInput interface {
	pulumi.Input

	ToNgwafWorkspaceOutput() NgwafWorkspaceOutput
	ToNgwafWorkspaceOutputWithContext(ctx context.Context) NgwafWorkspaceOutput
}

func (*NgwafWorkspace) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafWorkspace)(nil)).Elem()
}

func (i *NgwafWorkspace) ToNgwafWorkspaceOutput() NgwafWorkspaceOutput {
	return i.ToNgwafWorkspaceOutputWithContext(context.Background())
}

func (i *NgwafWorkspace) ToNgwafWorkspaceOutputWithContext(ctx context.Context) NgwafWorkspaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceOutput)
}

// NgwafWorkspaceArrayInput is an input type that accepts NgwafWorkspaceArray and NgwafWorkspaceArrayOutput values.
// You can construct a concrete instance of `NgwafWorkspaceArrayInput` via:
//
//	NgwafWorkspaceArray{ NgwafWorkspaceArgs{...} }
type NgwafWorkspaceArrayInput interface {
	pulumi.Input

	ToNgwafWorkspaceArrayOutput() NgwafWorkspaceArrayOutput
	ToNgwafWorkspaceArrayOutputWithContext(context.Context) NgwafWorkspaceArrayOutput
}

type NgwafWorkspaceArray []NgwafWorkspaceInput

func (NgwafWorkspaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafWorkspace)(nil)).Elem()
}

func (i NgwafWorkspaceArray) ToNgwafWorkspaceArrayOutput() NgwafWorkspaceArrayOutput {
	return i.ToNgwafWorkspaceArrayOutputWithContext(context.Background())
}

func (i NgwafWorkspaceArray) ToNgwafWorkspaceArrayOutputWithContext(ctx context.Context) NgwafWorkspaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceArrayOutput)
}

// NgwafWorkspaceMapInput is an input type that accepts NgwafWorkspaceMap and NgwafWorkspaceMapOutput values.
// You can construct a concrete instance of `NgwafWorkspaceMapInput` via:
//
//	NgwafWorkspaceMap{ "key": NgwafWorkspaceArgs{...} }
type NgwafWorkspaceMapInput interface {
	pulumi.Input

	ToNgwafWorkspaceMapOutput() NgwafWorkspaceMapOutput
	ToNgwafWorkspaceMapOutputWithContext(context.Context) NgwafWorkspaceMapOutput
}

type NgwafWorkspaceMap map[string]NgwafWorkspaceInput

func (NgwafWorkspaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafWorkspace)(nil)).Elem()
}

func (i NgwafWorkspaceMap) ToNgwafWorkspaceMapOutput() NgwafWorkspaceMapOutput {
	return i.ToNgwafWorkspaceMapOutputWithContext(context.Background())
}

func (i NgwafWorkspaceMap) ToNgwafWorkspaceMapOutputWithContext(ctx context.Context) NgwafWorkspaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NgwafWorkspaceMapOutput)
}

type NgwafWorkspaceOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NgwafWorkspace)(nil)).Elem()
}

func (o NgwafWorkspaceOutput) ToNgwafWorkspaceOutput() NgwafWorkspaceOutput {
	return o
}

func (o NgwafWorkspaceOutput) ToNgwafWorkspaceOutputWithContext(ctx context.Context) NgwafWorkspaceOutput {
	return o
}

// Attack threshold parameters for system site alerts. Each threshold value is the number of attack signals per IP address that must be detected during the interval before the related IP address is flagged. If no values are set then the default value for each field will be applied
func (o NgwafWorkspaceOutput) AttackSignalThresholds() NgwafWorkspaceAttackSignalThresholdsOutput {
	return o.ApplyT(func(v *NgwafWorkspace) NgwafWorkspaceAttackSignalThresholdsOutput { return v.AttackSignalThresholds }).(NgwafWorkspaceAttackSignalThresholdsOutput)
}

// Specifies the request headers containing the client IP address. Maximum of 10 header names.
func (o NgwafWorkspaceOutput) ClientIpHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NgwafWorkspace) pulumi.StringArrayOutput { return v.ClientIpHeaders }).(pulumi.StringArrayOutput)
}

// The status code returned when a request is blocked. This configuration is applied at the workspace but can be overwritten in rules. Accepted values are [`301`, `302`, `400..599`]. Default value `406`.
func (o NgwafWorkspaceOutput) DefaultBlockingResponseCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NgwafWorkspace) pulumi.IntPtrOutput { return v.DefaultBlockingResponseCode }).(pulumi.IntPtrOutput)
}

// The description of the workspace
func (o NgwafWorkspaceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspace) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Agents will anonymize IP addresses according to the option selected. Accepted value is `hashed`.
func (o NgwafWorkspaceOutput) IpAnonymization() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NgwafWorkspace) pulumi.StringPtrOutput { return v.IpAnonymization }).(pulumi.StringPtrOutput)
}

// The operation mode of the workspace. Accepted values are `off`, `block`, and `log`.
func (o NgwafWorkspaceOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspace) pulumi.StringOutput { return v.Mode }).(pulumi.StringOutput)
}

// The display name of the workspace.
func (o NgwafWorkspaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NgwafWorkspace) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type NgwafWorkspaceArrayOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NgwafWorkspace)(nil)).Elem()
}

func (o NgwafWorkspaceArrayOutput) ToNgwafWorkspaceArrayOutput() NgwafWorkspaceArrayOutput {
	return o
}

func (o NgwafWorkspaceArrayOutput) ToNgwafWorkspaceArrayOutputWithContext(ctx context.Context) NgwafWorkspaceArrayOutput {
	return o
}

func (o NgwafWorkspaceArrayOutput) Index(i pulumi.IntInput) NgwafWorkspaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NgwafWorkspace {
		return vs[0].([]*NgwafWorkspace)[vs[1].(int)]
	}).(NgwafWorkspaceOutput)
}

type NgwafWorkspaceMapOutput struct{ *pulumi.OutputState }

func (NgwafWorkspaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NgwafWorkspace)(nil)).Elem()
}

func (o NgwafWorkspaceMapOutput) ToNgwafWorkspaceMapOutput() NgwafWorkspaceMapOutput {
	return o
}

func (o NgwafWorkspaceMapOutput) ToNgwafWorkspaceMapOutputWithContext(ctx context.Context) NgwafWorkspaceMapOutput {
	return o
}

func (o NgwafWorkspaceMapOutput) MapIndex(k pulumi.StringInput) NgwafWorkspaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NgwafWorkspace {
		return vs[0].(map[string]*NgwafWorkspace)[vs[1].(string)]
	}).(NgwafWorkspaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceInput)(nil)).Elem(), &NgwafWorkspace{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceArrayInput)(nil)).Elem(), NgwafWorkspaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NgwafWorkspaceMapInput)(nil)).Elem(), NgwafWorkspaceMap{})
	pulumi.RegisterOutputType(NgwafWorkspaceOutput{})
	pulumi.RegisterOutputType(NgwafWorkspaceArrayOutput{})
	pulumi.RegisterOutputType(NgwafWorkspaceMapOutput{})
}
