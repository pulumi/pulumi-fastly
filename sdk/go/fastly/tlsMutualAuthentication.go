// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type TlsMutualAuthentication struct {
	pulumi.CustomResourceState

	// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
	CertBundle pulumi.StringOutput `pulumi:"certBundle"`
	// Date and time in ISO 8601 format.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
	Enforced pulumi.BoolOutput `pulumi:"enforced"`
	// Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
	Include pulumi.StringPtrOutput `pulumi:"include"`
	// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
	Name pulumi.StringOutput `pulumi:"name"`
	// List of alphanumeric strings identifying TLS activations.
	TlsActivations pulumi.StringArrayOutput `pulumi:"tlsActivations"`
	// Date and time in ISO 8601 format.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTlsMutualAuthentication registers a new resource with the given unique name, arguments, and options.
func NewTlsMutualAuthentication(ctx *pulumi.Context,
	name string, args *TlsMutualAuthenticationArgs, opts ...pulumi.ResourceOption) (*TlsMutualAuthentication, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CertBundle == nil {
		return nil, errors.New("invalid value for required argument 'CertBundle'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TlsMutualAuthentication
	err := ctx.RegisterResource("fastly:index/tlsMutualAuthentication:TlsMutualAuthentication", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTlsMutualAuthentication gets an existing TlsMutualAuthentication resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTlsMutualAuthentication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TlsMutualAuthenticationState, opts ...pulumi.ResourceOption) (*TlsMutualAuthentication, error) {
	var resource TlsMutualAuthentication
	err := ctx.ReadResource("fastly:index/tlsMutualAuthentication:TlsMutualAuthentication", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TlsMutualAuthentication resources.
type tlsMutualAuthenticationState struct {
	// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
	CertBundle *string `pulumi:"certBundle"`
	// Date and time in ISO 8601 format.
	CreatedAt *string `pulumi:"createdAt"`
	// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
	Enforced *bool `pulumi:"enforced"`
	// Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
	Include *string `pulumi:"include"`
	// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
	Name *string `pulumi:"name"`
	// List of alphanumeric strings identifying TLS activations.
	TlsActivations []string `pulumi:"tlsActivations"`
	// Date and time in ISO 8601 format.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TlsMutualAuthenticationState struct {
	// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
	CertBundle pulumi.StringPtrInput
	// Date and time in ISO 8601 format.
	CreatedAt pulumi.StringPtrInput
	// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
	Enforced pulumi.BoolPtrInput
	// Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
	Include pulumi.StringPtrInput
	// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
	Name pulumi.StringPtrInput
	// List of alphanumeric strings identifying TLS activations.
	TlsActivations pulumi.StringArrayInput
	// Date and time in ISO 8601 format.
	UpdatedAt pulumi.StringPtrInput
}

func (TlsMutualAuthenticationState) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsMutualAuthenticationState)(nil)).Elem()
}

type tlsMutualAuthenticationArgs struct {
	// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
	CertBundle string `pulumi:"certBundle"`
	// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
	Enforced *bool `pulumi:"enforced"`
	// Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
	Include *string `pulumi:"include"`
	// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a TlsMutualAuthentication resource.
type TlsMutualAuthenticationArgs struct {
	// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
	CertBundle pulumi.StringInput
	// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
	Enforced pulumi.BoolPtrInput
	// Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
	Include pulumi.StringPtrInput
	// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
	Name pulumi.StringPtrInput
}

func (TlsMutualAuthenticationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tlsMutualAuthenticationArgs)(nil)).Elem()
}

type TlsMutualAuthenticationInput interface {
	pulumi.Input

	ToTlsMutualAuthenticationOutput() TlsMutualAuthenticationOutput
	ToTlsMutualAuthenticationOutputWithContext(ctx context.Context) TlsMutualAuthenticationOutput
}

func (*TlsMutualAuthentication) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsMutualAuthentication)(nil)).Elem()
}

func (i *TlsMutualAuthentication) ToTlsMutualAuthenticationOutput() TlsMutualAuthenticationOutput {
	return i.ToTlsMutualAuthenticationOutputWithContext(context.Background())
}

func (i *TlsMutualAuthentication) ToTlsMutualAuthenticationOutputWithContext(ctx context.Context) TlsMutualAuthenticationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsMutualAuthenticationOutput)
}

func (i *TlsMutualAuthentication) ToOutput(ctx context.Context) pulumix.Output[*TlsMutualAuthentication] {
	return pulumix.Output[*TlsMutualAuthentication]{
		OutputState: i.ToTlsMutualAuthenticationOutputWithContext(ctx).OutputState,
	}
}

// TlsMutualAuthenticationArrayInput is an input type that accepts TlsMutualAuthenticationArray and TlsMutualAuthenticationArrayOutput values.
// You can construct a concrete instance of `TlsMutualAuthenticationArrayInput` via:
//
//	TlsMutualAuthenticationArray{ TlsMutualAuthenticationArgs{...} }
type TlsMutualAuthenticationArrayInput interface {
	pulumi.Input

	ToTlsMutualAuthenticationArrayOutput() TlsMutualAuthenticationArrayOutput
	ToTlsMutualAuthenticationArrayOutputWithContext(context.Context) TlsMutualAuthenticationArrayOutput
}

type TlsMutualAuthenticationArray []TlsMutualAuthenticationInput

func (TlsMutualAuthenticationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsMutualAuthentication)(nil)).Elem()
}

func (i TlsMutualAuthenticationArray) ToTlsMutualAuthenticationArrayOutput() TlsMutualAuthenticationArrayOutput {
	return i.ToTlsMutualAuthenticationArrayOutputWithContext(context.Background())
}

func (i TlsMutualAuthenticationArray) ToTlsMutualAuthenticationArrayOutputWithContext(ctx context.Context) TlsMutualAuthenticationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsMutualAuthenticationArrayOutput)
}

func (i TlsMutualAuthenticationArray) ToOutput(ctx context.Context) pulumix.Output[[]*TlsMutualAuthentication] {
	return pulumix.Output[[]*TlsMutualAuthentication]{
		OutputState: i.ToTlsMutualAuthenticationArrayOutputWithContext(ctx).OutputState,
	}
}

// TlsMutualAuthenticationMapInput is an input type that accepts TlsMutualAuthenticationMap and TlsMutualAuthenticationMapOutput values.
// You can construct a concrete instance of `TlsMutualAuthenticationMapInput` via:
//
//	TlsMutualAuthenticationMap{ "key": TlsMutualAuthenticationArgs{...} }
type TlsMutualAuthenticationMapInput interface {
	pulumi.Input

	ToTlsMutualAuthenticationMapOutput() TlsMutualAuthenticationMapOutput
	ToTlsMutualAuthenticationMapOutputWithContext(context.Context) TlsMutualAuthenticationMapOutput
}

type TlsMutualAuthenticationMap map[string]TlsMutualAuthenticationInput

func (TlsMutualAuthenticationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsMutualAuthentication)(nil)).Elem()
}

func (i TlsMutualAuthenticationMap) ToTlsMutualAuthenticationMapOutput() TlsMutualAuthenticationMapOutput {
	return i.ToTlsMutualAuthenticationMapOutputWithContext(context.Background())
}

func (i TlsMutualAuthenticationMap) ToTlsMutualAuthenticationMapOutputWithContext(ctx context.Context) TlsMutualAuthenticationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TlsMutualAuthenticationMapOutput)
}

func (i TlsMutualAuthenticationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TlsMutualAuthentication] {
	return pulumix.Output[map[string]*TlsMutualAuthentication]{
		OutputState: i.ToTlsMutualAuthenticationMapOutputWithContext(ctx).OutputState,
	}
}

type TlsMutualAuthenticationOutput struct{ *pulumi.OutputState }

func (TlsMutualAuthenticationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TlsMutualAuthentication)(nil)).Elem()
}

func (o TlsMutualAuthenticationOutput) ToTlsMutualAuthenticationOutput() TlsMutualAuthenticationOutput {
	return o
}

func (o TlsMutualAuthenticationOutput) ToTlsMutualAuthenticationOutputWithContext(ctx context.Context) TlsMutualAuthenticationOutput {
	return o
}

func (o TlsMutualAuthenticationOutput) ToOutput(ctx context.Context) pulumix.Output[*TlsMutualAuthentication] {
	return pulumix.Output[*TlsMutualAuthentication]{
		OutputState: o.OutputState,
	}
}

// One or more certificates. Enter each individual certificate blob on a new line. Must be PEM-formatted.
func (o TlsMutualAuthenticationOutput) CertBundle() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsMutualAuthentication) pulumi.StringOutput { return v.CertBundle }).(pulumi.StringOutput)
}

// Date and time in ISO 8601 format.
func (o TlsMutualAuthenticationOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsMutualAuthentication) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Determines whether Mutual TLS will fail closed (enforced) or fail open. A true value will require a successful Mutual TLS handshake for the connection to continue and will fail closed if unsuccessful. A false value will fail open and allow the connection to proceed (if this attribute is not set we default to `false`).
func (o TlsMutualAuthenticationOutput) Enforced() pulumi.BoolOutput {
	return o.ApplyT(func(v *TlsMutualAuthentication) pulumi.BoolOutput { return v.Enforced }).(pulumi.BoolOutput)
}

// Comma-separated list of related objects to include (e.g. `tlsActivations` will provide you with the TLS domain names that are related to your Mutual TLS authentication).
func (o TlsMutualAuthenticationOutput) Include() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TlsMutualAuthentication) pulumi.StringPtrOutput { return v.Include }).(pulumi.StringPtrOutput)
}

// A custom name for your mutual authentication. If name is not supplied we will auto-generate one.
func (o TlsMutualAuthenticationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsMutualAuthentication) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// List of alphanumeric strings identifying TLS activations.
func (o TlsMutualAuthenticationOutput) TlsActivations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TlsMutualAuthentication) pulumi.StringArrayOutput { return v.TlsActivations }).(pulumi.StringArrayOutput)
}

// Date and time in ISO 8601 format.
func (o TlsMutualAuthenticationOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TlsMutualAuthentication) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TlsMutualAuthenticationArrayOutput struct{ *pulumi.OutputState }

func (TlsMutualAuthenticationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TlsMutualAuthentication)(nil)).Elem()
}

func (o TlsMutualAuthenticationArrayOutput) ToTlsMutualAuthenticationArrayOutput() TlsMutualAuthenticationArrayOutput {
	return o
}

func (o TlsMutualAuthenticationArrayOutput) ToTlsMutualAuthenticationArrayOutputWithContext(ctx context.Context) TlsMutualAuthenticationArrayOutput {
	return o
}

func (o TlsMutualAuthenticationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TlsMutualAuthentication] {
	return pulumix.Output[[]*TlsMutualAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o TlsMutualAuthenticationArrayOutput) Index(i pulumi.IntInput) TlsMutualAuthenticationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TlsMutualAuthentication {
		return vs[0].([]*TlsMutualAuthentication)[vs[1].(int)]
	}).(TlsMutualAuthenticationOutput)
}

type TlsMutualAuthenticationMapOutput struct{ *pulumi.OutputState }

func (TlsMutualAuthenticationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TlsMutualAuthentication)(nil)).Elem()
}

func (o TlsMutualAuthenticationMapOutput) ToTlsMutualAuthenticationMapOutput() TlsMutualAuthenticationMapOutput {
	return o
}

func (o TlsMutualAuthenticationMapOutput) ToTlsMutualAuthenticationMapOutputWithContext(ctx context.Context) TlsMutualAuthenticationMapOutput {
	return o
}

func (o TlsMutualAuthenticationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TlsMutualAuthentication] {
	return pulumix.Output[map[string]*TlsMutualAuthentication]{
		OutputState: o.OutputState,
	}
}

func (o TlsMutualAuthenticationMapOutput) MapIndex(k pulumi.StringInput) TlsMutualAuthenticationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TlsMutualAuthentication {
		return vs[0].(map[string]*TlsMutualAuthentication)[vs[1].(string)]
	}).(TlsMutualAuthenticationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TlsMutualAuthenticationInput)(nil)).Elem(), &TlsMutualAuthentication{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsMutualAuthenticationArrayInput)(nil)).Elem(), TlsMutualAuthenticationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TlsMutualAuthenticationMapInput)(nil)).Elem(), TlsMutualAuthenticationMap{})
	pulumi.RegisterOutputType(TlsMutualAuthenticationOutput{})
	pulumi.RegisterOutputType(TlsMutualAuthenticationArrayOutput{})
	pulumi.RegisterOutputType(TlsMutualAuthenticationMapOutput{})
}
