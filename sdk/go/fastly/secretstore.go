// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// Basic usage:
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-fastly/sdk/v8/go/fastly"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSecretstore, err := fastly.NewSecretstore(ctx, "exampleSecretstore", nil)
//			if err != nil {
//				return err
//			}
//			examplePackageHash, err := fastly.GetPackageHash(ctx, &fastly.GetPackageHashArgs{
//				Filename: pulumi.StringRef("package.tar.gz"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = fastly.NewServiceCompute(ctx, "exampleServiceCompute", &fastly.ServiceComputeArgs{
//				Domains: fastly.ServiceComputeDomainArray{
//					&fastly.ServiceComputeDomainArgs{
//						Name: pulumi.String("demo.example.com"),
//					},
//				},
//				Package: &fastly.ServiceComputePackageArgs{
//					Filename:       pulumi.String("package.tar.gz"),
//					SourceCodeHash: *pulumi.String(examplePackageHash.Hash),
//				},
//				ResourceLinks: fastly.ServiceComputeResourceLinkArray{
//					&fastly.ServiceComputeResourceLinkArgs{
//						Name:       pulumi.String("my_resource_link"),
//						ResourceId: exampleSecretstore.ID(),
//					},
//				},
//				ForceDestroy: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Fastly Secret Stores can be imported using their Store ID, e.g.
//
// ```sh
// $ pulumi import fastly:index/secretstore:Secretstore example xxxxxxxxxxxxxxxxxxxx
// ```
type Secretstore struct {
	pulumi.CustomResourceState

	// A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSecretstore registers a new resource with the given unique name, arguments, and options.
func NewSecretstore(ctx *pulumi.Context,
	name string, args *SecretstoreArgs, opts ...pulumi.ResourceOption) (*Secretstore, error) {
	if args == nil {
		args = &SecretstoreArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Secretstore
	err := ctx.RegisterResource("fastly:index/secretstore:Secretstore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecretstore gets an existing Secretstore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecretstore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretstoreState, opts ...pulumi.ResourceOption) (*Secretstore, error) {
	var resource Secretstore
	err := ctx.ReadResource("fastly:index/secretstore:Secretstore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secretstore resources.
type secretstoreState struct {
	// A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.
	Name *string `pulumi:"name"`
}

type SecretstoreState struct {
	// A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.
	Name pulumi.StringPtrInput
}

func (SecretstoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretstoreState)(nil)).Elem()
}

type secretstoreArgs struct {
	// A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Secretstore resource.
type SecretstoreArgs struct {
	// A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.
	Name pulumi.StringPtrInput
}

func (SecretstoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretstoreArgs)(nil)).Elem()
}

type SecretstoreInput interface {
	pulumi.Input

	ToSecretstoreOutput() SecretstoreOutput
	ToSecretstoreOutputWithContext(ctx context.Context) SecretstoreOutput
}

func (*Secretstore) ElementType() reflect.Type {
	return reflect.TypeOf((**Secretstore)(nil)).Elem()
}

func (i *Secretstore) ToSecretstoreOutput() SecretstoreOutput {
	return i.ToSecretstoreOutputWithContext(context.Background())
}

func (i *Secretstore) ToSecretstoreOutputWithContext(ctx context.Context) SecretstoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretstoreOutput)
}

// SecretstoreArrayInput is an input type that accepts SecretstoreArray and SecretstoreArrayOutput values.
// You can construct a concrete instance of `SecretstoreArrayInput` via:
//
//	SecretstoreArray{ SecretstoreArgs{...} }
type SecretstoreArrayInput interface {
	pulumi.Input

	ToSecretstoreArrayOutput() SecretstoreArrayOutput
	ToSecretstoreArrayOutputWithContext(context.Context) SecretstoreArrayOutput
}

type SecretstoreArray []SecretstoreInput

func (SecretstoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secretstore)(nil)).Elem()
}

func (i SecretstoreArray) ToSecretstoreArrayOutput() SecretstoreArrayOutput {
	return i.ToSecretstoreArrayOutputWithContext(context.Background())
}

func (i SecretstoreArray) ToSecretstoreArrayOutputWithContext(ctx context.Context) SecretstoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretstoreArrayOutput)
}

// SecretstoreMapInput is an input type that accepts SecretstoreMap and SecretstoreMapOutput values.
// You can construct a concrete instance of `SecretstoreMapInput` via:
//
//	SecretstoreMap{ "key": SecretstoreArgs{...} }
type SecretstoreMapInput interface {
	pulumi.Input

	ToSecretstoreMapOutput() SecretstoreMapOutput
	ToSecretstoreMapOutputWithContext(context.Context) SecretstoreMapOutput
}

type SecretstoreMap map[string]SecretstoreInput

func (SecretstoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secretstore)(nil)).Elem()
}

func (i SecretstoreMap) ToSecretstoreMapOutput() SecretstoreMapOutput {
	return i.ToSecretstoreMapOutputWithContext(context.Background())
}

func (i SecretstoreMap) ToSecretstoreMapOutputWithContext(ctx context.Context) SecretstoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretstoreMapOutput)
}

type SecretstoreOutput struct{ *pulumi.OutputState }

func (SecretstoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secretstore)(nil)).Elem()
}

func (o SecretstoreOutput) ToSecretstoreOutput() SecretstoreOutput {
	return o
}

func (o SecretstoreOutput) ToSecretstoreOutputWithContext(ctx context.Context) SecretstoreOutput {
	return o
}

// A human-readable name for the Secret Store. The value must contain only letters, numbers, dashes (-), underscores (*), or periods (.). It is important to note that changing this attribute will delete and recreate the Secret Store, and discard the current entries. You MUST first delete the associated resource*link block from your service before modifying this field.
func (o SecretstoreOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Secretstore) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SecretstoreArrayOutput struct{ *pulumi.OutputState }

func (SecretstoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secretstore)(nil)).Elem()
}

func (o SecretstoreArrayOutput) ToSecretstoreArrayOutput() SecretstoreArrayOutput {
	return o
}

func (o SecretstoreArrayOutput) ToSecretstoreArrayOutputWithContext(ctx context.Context) SecretstoreArrayOutput {
	return o
}

func (o SecretstoreArrayOutput) Index(i pulumi.IntInput) SecretstoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Secretstore {
		return vs[0].([]*Secretstore)[vs[1].(int)]
	}).(SecretstoreOutput)
}

type SecretstoreMapOutput struct{ *pulumi.OutputState }

func (SecretstoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secretstore)(nil)).Elem()
}

func (o SecretstoreMapOutput) ToSecretstoreMapOutput() SecretstoreMapOutput {
	return o
}

func (o SecretstoreMapOutput) ToSecretstoreMapOutputWithContext(ctx context.Context) SecretstoreMapOutput {
	return o
}

func (o SecretstoreMapOutput) MapIndex(k pulumi.StringInput) SecretstoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Secretstore {
		return vs[0].(map[string]*Secretstore)[vs[1].(string)]
	}).(SecretstoreOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretstoreInput)(nil)).Elem(), &Secretstore{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretstoreArrayInput)(nil)).Elem(), SecretstoreArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretstoreMapInput)(nil)).Elem(), SecretstoreMap{})
	pulumi.RegisterOutputType(SecretstoreOutput{})
	pulumi.RegisterOutputType(SecretstoreArrayOutput{})
	pulumi.RegisterOutputType(SecretstoreMapOutput{})
}
